// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the list of Kafka instance consumer groups.
//
// ## Example Usage
//
// ### Get all groups for an instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := sbercloud.GetDmsKafkaConsumerGroups(ctx, &cloudru.GetDmsKafkaConsumerGroupsArgs{
//				InstanceId: instanceId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Get specific group for an instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := sbercloud.GetDmsKafkaConsumerGroups(ctx, &cloudru.GetDmsKafkaConsumerGroupsArgs{
//				InstanceId: instanceId,
//				Name:       pulumi.StringRef("test_group"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDmsKafkaConsumerGroups(ctx *pulumi.Context, args *GetDmsKafkaConsumerGroupsArgs, opts ...pulumi.InvokeOption) (*GetDmsKafkaConsumerGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDmsKafkaConsumerGroupsResult
	err := ctx.Invoke("sbercloud:index/getDmsKafkaConsumerGroups:getDmsKafkaConsumerGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDmsKafkaConsumerGroups.
type GetDmsKafkaConsumerGroupsArgs struct {
	// Specifies the coordinator ID.
	CoordinatorId *int `pulumi:"coordinatorId"`
	// Specifies the group description.
	Description *string `pulumi:"description"`
	// Specifies the instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the number of accumulated messages.
	Lag *int `pulumi:"lag"`
	// Specifies the group name.
	Name *string `pulumi:"name"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the consumer group status.
	State *string `pulumi:"state"`
}

// A collection of values returned by getDmsKafkaConsumerGroups.
type GetDmsKafkaConsumerGroupsResult struct {
	// Indicates the coordinator ID.
	CoordinatorId *int `pulumi:"coordinatorId"`
	// Indicates the consumer group description.
	Description *string `pulumi:"description"`
	// Indicates the groups list.
	Groups []GetDmsKafkaConsumerGroupsGroup `pulumi:"groups"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// Indicates the number of accumulated messages.
	Lag *int `pulumi:"lag"`
	// Indicates the consumer group name.
	Name   *string `pulumi:"name"`
	Region string  `pulumi:"region"`
	// Indicates the consumer group status.
	State *string `pulumi:"state"`
}

func GetDmsKafkaConsumerGroupsOutput(ctx *pulumi.Context, args GetDmsKafkaConsumerGroupsOutputArgs, opts ...pulumi.InvokeOption) GetDmsKafkaConsumerGroupsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDmsKafkaConsumerGroupsResultOutput, error) {
			args := v.(GetDmsKafkaConsumerGroupsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getDmsKafkaConsumerGroups:getDmsKafkaConsumerGroups", args, GetDmsKafkaConsumerGroupsResultOutput{}, options).(GetDmsKafkaConsumerGroupsResultOutput), nil
		}).(GetDmsKafkaConsumerGroupsResultOutput)
}

// A collection of arguments for invoking getDmsKafkaConsumerGroups.
type GetDmsKafkaConsumerGroupsOutputArgs struct {
	// Specifies the coordinator ID.
	CoordinatorId pulumi.IntPtrInput `pulumi:"coordinatorId"`
	// Specifies the group description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the number of accumulated messages.
	Lag pulumi.IntPtrInput `pulumi:"lag"`
	// Specifies the group name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the consumer group status.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (GetDmsKafkaConsumerGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsKafkaConsumerGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getDmsKafkaConsumerGroups.
type GetDmsKafkaConsumerGroupsResultOutput struct{ *pulumi.OutputState }

func (GetDmsKafkaConsumerGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsKafkaConsumerGroupsResult)(nil)).Elem()
}

func (o GetDmsKafkaConsumerGroupsResultOutput) ToGetDmsKafkaConsumerGroupsResultOutput() GetDmsKafkaConsumerGroupsResultOutput {
	return o
}

func (o GetDmsKafkaConsumerGroupsResultOutput) ToGetDmsKafkaConsumerGroupsResultOutputWithContext(ctx context.Context) GetDmsKafkaConsumerGroupsResultOutput {
	return o
}

// Indicates the coordinator ID.
func (o GetDmsKafkaConsumerGroupsResultOutput) CoordinatorId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) *int { return v.CoordinatorId }).(pulumi.IntPtrOutput)
}

// Indicates the consumer group description.
func (o GetDmsKafkaConsumerGroupsResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates the groups list.
func (o GetDmsKafkaConsumerGroupsResultOutput) Groups() GetDmsKafkaConsumerGroupsGroupArrayOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) []GetDmsKafkaConsumerGroupsGroup { return v.Groups }).(GetDmsKafkaConsumerGroupsGroupArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDmsKafkaConsumerGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDmsKafkaConsumerGroupsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates the number of accumulated messages.
func (o GetDmsKafkaConsumerGroupsResultOutput) Lag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) *int { return v.Lag }).(pulumi.IntPtrOutput)
}

// Indicates the consumer group name.
func (o GetDmsKafkaConsumerGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetDmsKafkaConsumerGroupsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the consumer group status.
func (o GetDmsKafkaConsumerGroupsResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaConsumerGroupsResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDmsKafkaConsumerGroupsResultOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an ELB whitelist resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const listener1 = new sbercloud.elb.Listener("listener_1", {
 *     name: "listener_1",
 *     protocol: "HTTP",
 *     protocolPort: 8080,
 *     loadbalancerId: loadbalancerId,
 * });
 * const whitelist1 = new sbercloud.elb.Whitelist("whitelist_1", {
 *     enableWhitelist: true,
 *     whitelist: "192.168.11.1,192.168.0.1/24,192.168.201.18/8",
 *     listenerId: listener1.id,
 * });
 * ```
 *
 * ## Import
 *
 * ELB whitelist can be imported using the whitelist ID, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Elb/whitelist:Whitelist whitelist_1 5c20fdad-7288-11eb-b817-0255ac10158b
 * ```
 */
export class Whitelist extends pulumi.CustomResource {
    /**
     * Get an existing Whitelist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: WhitelistState, opts?: pulumi.CustomResourceOptions): Whitelist {
        return new Whitelist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Elb/whitelist:Whitelist';

    /**
     * Returns true if the given object is an instance of Whitelist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Whitelist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Whitelist.__pulumiType;
    }

    /**
     * Specify whether to enable access control.
     */
    declare public readonly enableWhitelist: pulumi.Output<boolean | undefined>;
    /**
     * The Listener ID that the whitelist will be associated with. Changing this
     * creates a new whitelist.
     */
    declare public readonly listenerId: pulumi.Output<string>;
    /**
     * The region in which to create the ELB whitelist resource. If omitted, the
     * provider-level region will be used. Changing this creates a new whitelist.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * @deprecated tenant_id is deprecated
     */
    declare public readonly tenantId: pulumi.Output<string>;
    /**
     * Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
     * IP addresses.
     */
    declare public readonly whitelist: pulumi.Output<string | undefined>;

    /**
     * Create a Whitelist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: WhitelistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: WhitelistArgs | WhitelistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as WhitelistState | undefined;
            resourceInputs["enableWhitelist"] = state?.enableWhitelist;
            resourceInputs["listenerId"] = state?.listenerId;
            resourceInputs["region"] = state?.region;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["whitelist"] = state?.whitelist;
        } else {
            const args = argsOrState as WhitelistArgs | undefined;
            if (args?.listenerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            resourceInputs["enableWhitelist"] = args?.enableWhitelist;
            resourceInputs["listenerId"] = args?.listenerId;
            resourceInputs["region"] = args?.region;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["whitelist"] = args?.whitelist;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Whitelist.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Whitelist resources.
 */
export interface WhitelistState {
    /**
     * Specify whether to enable access control.
     */
    enableWhitelist?: pulumi.Input<boolean>;
    /**
     * The Listener ID that the whitelist will be associated with. Changing this
     * creates a new whitelist.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The region in which to create the ELB whitelist resource. If omitted, the
     * provider-level region will be used. Changing this creates a new whitelist.
     */
    region?: pulumi.Input<string>;
    /**
     * @deprecated tenant_id is deprecated
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
     * IP addresses.
     */
    whitelist?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Whitelist resource.
 */
export interface WhitelistArgs {
    /**
     * Specify whether to enable access control.
     */
    enableWhitelist?: pulumi.Input<boolean>;
    /**
     * The Listener ID that the whitelist will be associated with. Changing this
     * creates a new whitelist.
     */
    listenerId: pulumi.Input<string>;
    /**
     * The region in which to create the ELB whitelist resource. If omitted, the
     * provider-level region will be used. Changing this creates a new whitelist.
     */
    region?: pulumi.Input<string>;
    /**
     * @deprecated tenant_id is deprecated
     */
    tenantId?: pulumi.Input<string>;
    /**
     * Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
     * IP addresses.
     */
    whitelist?: pulumi.Input<string>;
}

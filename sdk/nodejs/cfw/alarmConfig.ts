// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a CFW alarm configuration resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const fwInstanceId = config.requireObject<any>("fwInstanceId");
 * const alarmType = config.requireObject<any>("alarmType");
 * const alarmTimePeriod = config.requireObject<any>("alarmTimePeriod");
 * const severity = config.requireObject<any>("severity");
 * const frequencyCount = config.requireObject<any>("frequencyCount");
 * const frequencyTime = config.requireObject<any>("frequencyTime");
 * const topicUrn = config.requireObject<any>("topicUrn");
 * const test = new sbercloud.cfw.AlarmConfig("test", {
 *     fwInstanceId: fwInstanceId,
 *     alarmType: alarmType,
 *     alarmTimePeriod: alarmTimePeriod,
 *     frequencyCount: frequencyCount,
 *     frequencyTime: frequencyTime,
 *     severity: severity,
 *     topicUrn: topicUrn,
 * });
 * ```
 *
 * ## Import
 *
 * The alarm configuration can be imported using `fw_instance_id`, `alarm_type`, separated by a slash, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Cfw/alarmConfig:AlarmConfig test <fw_instance_id>/<alarm_type>
 * ```
 */
export class AlarmConfig extends pulumi.CustomResource {
    /**
     * Get an existing AlarmConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlarmConfigState, opts?: pulumi.CustomResourceOptions): AlarmConfig {
        return new AlarmConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cfw/alarmConfig:AlarmConfig';

    /**
     * Returns true if the given object is an instance of AlarmConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlarmConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlarmConfig.__pulumiType;
    }

    /**
     * Specifies the alarm period.
     * The valid values are as follows:
     * + **0**: 8:00 to 22:00;
     * + **1**: all day;
     */
    public readonly alarmTimePeriod!: pulumi.Output<number>;
    /**
     * Specifies the alarm type.
     * The valid values are as follows.
     * + **0**: attack;
     * + **1**: traffic threshold crossing;
     * + **2**: EIP unprotected;
     * + **3**: threat intelligence;
     */
    public readonly alarmType!: pulumi.Output<number>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the alarm triggering frequency.
     * + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
     * + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
     */
    public readonly frequencyCount!: pulumi.Output<number>;
    /**
     * Specifies the alarm frequency time range.
     * + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
     * + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
     */
    public readonly frequencyTime!: pulumi.Output<number>;
    /**
     * Specifies the firewall ID.
     */
    public readonly fwInstanceId!: pulumi.Output<string>;
    /**
     * The language.
     */
    public /*out*/ readonly language!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this will create new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the alarm severity.
     * + If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
     * **MEDIUM**, and **LOW**, separated by commas.
     * + If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
     * + If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
     */
    public readonly severity!: pulumi.Output<string>;
    /**
     * Specifies the alarm URN.
     */
    public readonly topicUrn!: pulumi.Output<string>;
    /**
     * The username.
     */
    public /*out*/ readonly username!: pulumi.Output<string>;

    /**
     * Create a AlarmConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlarmConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlarmConfigArgs | AlarmConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlarmConfigState | undefined;
            resourceInputs["alarmTimePeriod"] = state ? state.alarmTimePeriod : undefined;
            resourceInputs["alarmType"] = state ? state.alarmType : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["frequencyCount"] = state ? state.frequencyCount : undefined;
            resourceInputs["frequencyTime"] = state ? state.frequencyTime : undefined;
            resourceInputs["fwInstanceId"] = state ? state.fwInstanceId : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["topicUrn"] = state ? state.topicUrn : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as AlarmConfigArgs | undefined;
            if ((!args || args.alarmTimePeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alarmTimePeriod'");
            }
            if ((!args || args.alarmType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alarmType'");
            }
            if ((!args || args.frequencyCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequencyCount'");
            }
            if ((!args || args.frequencyTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequencyTime'");
            }
            if ((!args || args.fwInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fwInstanceId'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            if ((!args || args.topicUrn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicUrn'");
            }
            resourceInputs["alarmTimePeriod"] = args ? args.alarmTimePeriod : undefined;
            resourceInputs["alarmType"] = args ? args.alarmType : undefined;
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["frequencyCount"] = args ? args.frequencyCount : undefined;
            resourceInputs["frequencyTime"] = args ? args.frequencyTime : undefined;
            resourceInputs["fwInstanceId"] = args ? args.fwInstanceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["topicUrn"] = args ? args.topicUrn : undefined;
            resourceInputs["language"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlarmConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlarmConfig resources.
 */
export interface AlarmConfigState {
    /**
     * Specifies the alarm period.
     * The valid values are as follows:
     * + **0**: 8:00 to 22:00;
     * + **1**: all day;
     */
    alarmTimePeriod?: pulumi.Input<number>;
    /**
     * Specifies the alarm type.
     * The valid values are as follows.
     * + **0**: attack;
     * + **1**: traffic threshold crossing;
     * + **2**: EIP unprotected;
     * + **3**: threat intelligence;
     */
    alarmType?: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the alarm triggering frequency.
     * + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
     * + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
     */
    frequencyCount?: pulumi.Input<number>;
    /**
     * Specifies the alarm frequency time range.
     * + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
     * + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
     */
    frequencyTime?: pulumi.Input<number>;
    /**
     * Specifies the firewall ID.
     */
    fwInstanceId?: pulumi.Input<string>;
    /**
     * The language.
     */
    language?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this will create new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the alarm severity.
     * + If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
     * **MEDIUM**, and **LOW**, separated by commas.
     * + If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
     * + If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
     */
    severity?: pulumi.Input<string>;
    /**
     * Specifies the alarm URN.
     */
    topicUrn?: pulumi.Input<string>;
    /**
     * The username.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlarmConfig resource.
 */
export interface AlarmConfigArgs {
    /**
     * Specifies the alarm period.
     * The valid values are as follows:
     * + **0**: 8:00 to 22:00;
     * + **1**: all day;
     */
    alarmTimePeriod: pulumi.Input<number>;
    /**
     * Specifies the alarm type.
     * The valid values are as follows.
     * + **0**: attack;
     * + **1**: traffic threshold crossing;
     * + **2**: EIP unprotected;
     * + **3**: threat intelligence;
     */
    alarmType: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the alarm triggering frequency.
     * + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
     * + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
     */
    frequencyCount: pulumi.Input<number>;
    /**
     * Specifies the alarm frequency time range.
     * + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
     * + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
     */
    frequencyTime: pulumi.Input<number>;
    /**
     * Specifies the firewall ID.
     */
    fwInstanceId: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this will create new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the alarm severity.
     * + If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
     * **MEDIUM**, and **LOW**, separated by commas.
     * + If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
     * + If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
     */
    severity: pulumi.Input<string>;
    /**
     * Specifies the alarm URN.
     */
    topicUrn: pulumi.Input<string>;
}

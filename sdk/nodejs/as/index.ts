// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BandwidthPolicyArgs, BandwidthPolicyState } from "./bandwidthPolicy";
export type BandwidthPolicy = import("./bandwidthPolicy").BandwidthPolicy;
export const BandwidthPolicy: typeof import("./bandwidthPolicy").BandwidthPolicy = null as any;
utilities.lazyLoad(exports, ["BandwidthPolicy"], () => require("./bandwidthPolicy"));

export { ConfigurationArgs, ConfigurationState } from "./configuration";
export type Configuration = import("./configuration").Configuration;
export const Configuration: typeof import("./configuration").Configuration = null as any;
utilities.lazyLoad(exports, ["Configuration"], () => require("./configuration"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sbercloud:As/bandwidthPolicy:BandwidthPolicy":
                return new BandwidthPolicy(name, <any>undefined, { urn })
            case "sbercloud:As/configuration:Configuration":
                return new Configuration(name, <any>undefined, { urn })
            case "sbercloud:As/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "sbercloud:As/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sbercloud", "As/bandwidthPolicy", _module)
pulumi.runtime.registerResourceModule("sbercloud", "As/configuration", _module)
pulumi.runtime.registerResourceModule("sbercloud", "As/group", _module)
pulumi.runtime.registerResourceModule("sbercloud", "As/policy", _module)

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

type CbrBackupShare struct {
	pulumi.CustomResourceState

	// The backup ID.
	BackupId pulumi.StringOutput `pulumi:"backupId"`
	// The list of shared members configuration.
	Members CbrBackupShareMemberArrayOutput `pulumi:"members"`
	// The region where the shared backup is located.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewCbrBackupShare registers a new resource with the given unique name, arguments, and options.
func NewCbrBackupShare(ctx *pulumi.Context,
	name string, args *CbrBackupShareArgs, opts ...pulumi.ResourceOption) (*CbrBackupShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupId == nil {
		return nil, errors.New("invalid value for required argument 'BackupId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CbrBackupShare
	err := ctx.RegisterResource("sbercloud:index/cbrBackupShare:CbrBackupShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCbrBackupShare gets an existing CbrBackupShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCbrBackupShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CbrBackupShareState, opts ...pulumi.ResourceOption) (*CbrBackupShare, error) {
	var resource CbrBackupShare
	err := ctx.ReadResource("sbercloud:index/cbrBackupShare:CbrBackupShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CbrBackupShare resources.
type cbrBackupShareState struct {
	// The backup ID.
	BackupId *string `pulumi:"backupId"`
	// The list of shared members configuration.
	Members []CbrBackupShareMember `pulumi:"members"`
	// The region where the shared backup is located.
	Region *string `pulumi:"region"`
}

type CbrBackupShareState struct {
	// The backup ID.
	BackupId pulumi.StringPtrInput
	// The list of shared members configuration.
	Members CbrBackupShareMemberArrayInput
	// The region where the shared backup is located.
	Region pulumi.StringPtrInput
}

func (CbrBackupShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*cbrBackupShareState)(nil)).Elem()
}

type cbrBackupShareArgs struct {
	// The backup ID.
	BackupId string `pulumi:"backupId"`
	// The list of shared members configuration.
	Members []CbrBackupShareMember `pulumi:"members"`
	// The region where the shared backup is located.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a CbrBackupShare resource.
type CbrBackupShareArgs struct {
	// The backup ID.
	BackupId pulumi.StringInput
	// The list of shared members configuration.
	Members CbrBackupShareMemberArrayInput
	// The region where the shared backup is located.
	Region pulumi.StringPtrInput
}

func (CbrBackupShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cbrBackupShareArgs)(nil)).Elem()
}

type CbrBackupShareInput interface {
	pulumi.Input

	ToCbrBackupShareOutput() CbrBackupShareOutput
	ToCbrBackupShareOutputWithContext(ctx context.Context) CbrBackupShareOutput
}

func (*CbrBackupShare) ElementType() reflect.Type {
	return reflect.TypeOf((**CbrBackupShare)(nil)).Elem()
}

func (i *CbrBackupShare) ToCbrBackupShareOutput() CbrBackupShareOutput {
	return i.ToCbrBackupShareOutputWithContext(context.Background())
}

func (i *CbrBackupShare) ToCbrBackupShareOutputWithContext(ctx context.Context) CbrBackupShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrBackupShareOutput)
}

// CbrBackupShareArrayInput is an input type that accepts CbrBackupShareArray and CbrBackupShareArrayOutput values.
// You can construct a concrete instance of `CbrBackupShareArrayInput` via:
//
//	CbrBackupShareArray{ CbrBackupShareArgs{...} }
type CbrBackupShareArrayInput interface {
	pulumi.Input

	ToCbrBackupShareArrayOutput() CbrBackupShareArrayOutput
	ToCbrBackupShareArrayOutputWithContext(context.Context) CbrBackupShareArrayOutput
}

type CbrBackupShareArray []CbrBackupShareInput

func (CbrBackupShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CbrBackupShare)(nil)).Elem()
}

func (i CbrBackupShareArray) ToCbrBackupShareArrayOutput() CbrBackupShareArrayOutput {
	return i.ToCbrBackupShareArrayOutputWithContext(context.Background())
}

func (i CbrBackupShareArray) ToCbrBackupShareArrayOutputWithContext(ctx context.Context) CbrBackupShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrBackupShareArrayOutput)
}

// CbrBackupShareMapInput is an input type that accepts CbrBackupShareMap and CbrBackupShareMapOutput values.
// You can construct a concrete instance of `CbrBackupShareMapInput` via:
//
//	CbrBackupShareMap{ "key": CbrBackupShareArgs{...} }
type CbrBackupShareMapInput interface {
	pulumi.Input

	ToCbrBackupShareMapOutput() CbrBackupShareMapOutput
	ToCbrBackupShareMapOutputWithContext(context.Context) CbrBackupShareMapOutput
}

type CbrBackupShareMap map[string]CbrBackupShareInput

func (CbrBackupShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CbrBackupShare)(nil)).Elem()
}

func (i CbrBackupShareMap) ToCbrBackupShareMapOutput() CbrBackupShareMapOutput {
	return i.ToCbrBackupShareMapOutputWithContext(context.Background())
}

func (i CbrBackupShareMap) ToCbrBackupShareMapOutputWithContext(ctx context.Context) CbrBackupShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrBackupShareMapOutput)
}

type CbrBackupShareOutput struct{ *pulumi.OutputState }

func (CbrBackupShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CbrBackupShare)(nil)).Elem()
}

func (o CbrBackupShareOutput) ToCbrBackupShareOutput() CbrBackupShareOutput {
	return o
}

func (o CbrBackupShareOutput) ToCbrBackupShareOutputWithContext(ctx context.Context) CbrBackupShareOutput {
	return o
}

// The backup ID.
func (o CbrBackupShareOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrBackupShare) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

// The list of shared members configuration.
func (o CbrBackupShareOutput) Members() CbrBackupShareMemberArrayOutput {
	return o.ApplyT(func(v *CbrBackupShare) CbrBackupShareMemberArrayOutput { return v.Members }).(CbrBackupShareMemberArrayOutput)
}

// The region where the shared backup is located.
func (o CbrBackupShareOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrBackupShare) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type CbrBackupShareArrayOutput struct{ *pulumi.OutputState }

func (CbrBackupShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CbrBackupShare)(nil)).Elem()
}

func (o CbrBackupShareArrayOutput) ToCbrBackupShareArrayOutput() CbrBackupShareArrayOutput {
	return o
}

func (o CbrBackupShareArrayOutput) ToCbrBackupShareArrayOutputWithContext(ctx context.Context) CbrBackupShareArrayOutput {
	return o
}

func (o CbrBackupShareArrayOutput) Index(i pulumi.IntInput) CbrBackupShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CbrBackupShare {
		return vs[0].([]*CbrBackupShare)[vs[1].(int)]
	}).(CbrBackupShareOutput)
}

type CbrBackupShareMapOutput struct{ *pulumi.OutputState }

func (CbrBackupShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CbrBackupShare)(nil)).Elem()
}

func (o CbrBackupShareMapOutput) ToCbrBackupShareMapOutput() CbrBackupShareMapOutput {
	return o
}

func (o CbrBackupShareMapOutput) ToCbrBackupShareMapOutputWithContext(ctx context.Context) CbrBackupShareMapOutput {
	return o
}

func (o CbrBackupShareMapOutput) MapIndex(k pulumi.StringInput) CbrBackupShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CbrBackupShare {
		return vs[0].(map[string]*CbrBackupShare)[vs[1].(string)]
	}).(CbrBackupShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CbrBackupShareInput)(nil)).Elem(), &CbrBackupShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*CbrBackupShareArrayInput)(nil)).Elem(), CbrBackupShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CbrBackupShareMapInput)(nil)).Elem(), CbrBackupShareMap{})
	pulumi.RegisterOutputType(CbrBackupShareOutput{})
	pulumi.RegisterOutputType(CbrBackupShareArrayOutput{})
	pulumi.RegisterOutputType(CbrBackupShareMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type FgsLtsLogEnable struct {
	pulumi.CustomResourceState

	// The region where the LTS log function is to be enabled.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewFgsLtsLogEnable registers a new resource with the given unique name, arguments, and options.
func NewFgsLtsLogEnable(ctx *pulumi.Context,
	name string, args *FgsLtsLogEnableArgs, opts ...pulumi.ResourceOption) (*FgsLtsLogEnable, error) {
	if args == nil {
		args = &FgsLtsLogEnableArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FgsLtsLogEnable
	err := ctx.RegisterResource("cloudru:index/fgsLtsLogEnable:FgsLtsLogEnable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFgsLtsLogEnable gets an existing FgsLtsLogEnable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFgsLtsLogEnable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FgsLtsLogEnableState, opts ...pulumi.ResourceOption) (*FgsLtsLogEnable, error) {
	var resource FgsLtsLogEnable
	err := ctx.ReadResource("cloudru:index/fgsLtsLogEnable:FgsLtsLogEnable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FgsLtsLogEnable resources.
type fgsLtsLogEnableState struct {
	// The region where the LTS log function is to be enabled.
	Region *string `pulumi:"region"`
}

type FgsLtsLogEnableState struct {
	// The region where the LTS log function is to be enabled.
	Region pulumi.StringPtrInput
}

func (FgsLtsLogEnableState) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsLtsLogEnableState)(nil)).Elem()
}

type fgsLtsLogEnableArgs struct {
	// The region where the LTS log function is to be enabled.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a FgsLtsLogEnable resource.
type FgsLtsLogEnableArgs struct {
	// The region where the LTS log function is to be enabled.
	Region pulumi.StringPtrInput
}

func (FgsLtsLogEnableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsLtsLogEnableArgs)(nil)).Elem()
}

type FgsLtsLogEnableInput interface {
	pulumi.Input

	ToFgsLtsLogEnableOutput() FgsLtsLogEnableOutput
	ToFgsLtsLogEnableOutputWithContext(ctx context.Context) FgsLtsLogEnableOutput
}

func (*FgsLtsLogEnable) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsLtsLogEnable)(nil)).Elem()
}

func (i *FgsLtsLogEnable) ToFgsLtsLogEnableOutput() FgsLtsLogEnableOutput {
	return i.ToFgsLtsLogEnableOutputWithContext(context.Background())
}

func (i *FgsLtsLogEnable) ToFgsLtsLogEnableOutputWithContext(ctx context.Context) FgsLtsLogEnableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsLtsLogEnableOutput)
}

// FgsLtsLogEnableArrayInput is an input type that accepts FgsLtsLogEnableArray and FgsLtsLogEnableArrayOutput values.
// You can construct a concrete instance of `FgsLtsLogEnableArrayInput` via:
//
//	FgsLtsLogEnableArray{ FgsLtsLogEnableArgs{...} }
type FgsLtsLogEnableArrayInput interface {
	pulumi.Input

	ToFgsLtsLogEnableArrayOutput() FgsLtsLogEnableArrayOutput
	ToFgsLtsLogEnableArrayOutputWithContext(context.Context) FgsLtsLogEnableArrayOutput
}

type FgsLtsLogEnableArray []FgsLtsLogEnableInput

func (FgsLtsLogEnableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsLtsLogEnable)(nil)).Elem()
}

func (i FgsLtsLogEnableArray) ToFgsLtsLogEnableArrayOutput() FgsLtsLogEnableArrayOutput {
	return i.ToFgsLtsLogEnableArrayOutputWithContext(context.Background())
}

func (i FgsLtsLogEnableArray) ToFgsLtsLogEnableArrayOutputWithContext(ctx context.Context) FgsLtsLogEnableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsLtsLogEnableArrayOutput)
}

// FgsLtsLogEnableMapInput is an input type that accepts FgsLtsLogEnableMap and FgsLtsLogEnableMapOutput values.
// You can construct a concrete instance of `FgsLtsLogEnableMapInput` via:
//
//	FgsLtsLogEnableMap{ "key": FgsLtsLogEnableArgs{...} }
type FgsLtsLogEnableMapInput interface {
	pulumi.Input

	ToFgsLtsLogEnableMapOutput() FgsLtsLogEnableMapOutput
	ToFgsLtsLogEnableMapOutputWithContext(context.Context) FgsLtsLogEnableMapOutput
}

type FgsLtsLogEnableMap map[string]FgsLtsLogEnableInput

func (FgsLtsLogEnableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsLtsLogEnable)(nil)).Elem()
}

func (i FgsLtsLogEnableMap) ToFgsLtsLogEnableMapOutput() FgsLtsLogEnableMapOutput {
	return i.ToFgsLtsLogEnableMapOutputWithContext(context.Background())
}

func (i FgsLtsLogEnableMap) ToFgsLtsLogEnableMapOutputWithContext(ctx context.Context) FgsLtsLogEnableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsLtsLogEnableMapOutput)
}

type FgsLtsLogEnableOutput struct{ *pulumi.OutputState }

func (FgsLtsLogEnableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsLtsLogEnable)(nil)).Elem()
}

func (o FgsLtsLogEnableOutput) ToFgsLtsLogEnableOutput() FgsLtsLogEnableOutput {
	return o
}

func (o FgsLtsLogEnableOutput) ToFgsLtsLogEnableOutputWithContext(ctx context.Context) FgsLtsLogEnableOutput {
	return o
}

// The region where the LTS log function is to be enabled.
func (o FgsLtsLogEnableOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsLtsLogEnable) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type FgsLtsLogEnableArrayOutput struct{ *pulumi.OutputState }

func (FgsLtsLogEnableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsLtsLogEnable)(nil)).Elem()
}

func (o FgsLtsLogEnableArrayOutput) ToFgsLtsLogEnableArrayOutput() FgsLtsLogEnableArrayOutput {
	return o
}

func (o FgsLtsLogEnableArrayOutput) ToFgsLtsLogEnableArrayOutputWithContext(ctx context.Context) FgsLtsLogEnableArrayOutput {
	return o
}

func (o FgsLtsLogEnableArrayOutput) Index(i pulumi.IntInput) FgsLtsLogEnableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FgsLtsLogEnable {
		return vs[0].([]*FgsLtsLogEnable)[vs[1].(int)]
	}).(FgsLtsLogEnableOutput)
}

type FgsLtsLogEnableMapOutput struct{ *pulumi.OutputState }

func (FgsLtsLogEnableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsLtsLogEnable)(nil)).Elem()
}

func (o FgsLtsLogEnableMapOutput) ToFgsLtsLogEnableMapOutput() FgsLtsLogEnableMapOutput {
	return o
}

func (o FgsLtsLogEnableMapOutput) ToFgsLtsLogEnableMapOutputWithContext(ctx context.Context) FgsLtsLogEnableMapOutput {
	return o
}

func (o FgsLtsLogEnableMapOutput) MapIndex(k pulumi.StringInput) FgsLtsLogEnableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FgsLtsLogEnable {
		return vs[0].(map[string]*FgsLtsLogEnable)[vs[1].(string)]
	}).(FgsLtsLogEnableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FgsLtsLogEnableInput)(nil)).Elem(), &FgsLtsLogEnable{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsLtsLogEnableArrayInput)(nil)).Elem(), FgsLtsLogEnableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsLtsLogEnableMapInput)(nil)).Elem(), FgsLtsLogEnableMap{})
	pulumi.RegisterOutputType(FgsLtsLogEnableOutput{})
	pulumi.RegisterOutputType(FgsLtsLogEnableArrayOutput{})
	pulumi.RegisterOutputType(FgsLtsLogEnableMapOutput{})
}

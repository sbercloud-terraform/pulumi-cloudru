// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:As/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    declare public /*out*/ readonly activityType: pulumi.Output<string>;
    declare public readonly agencyName: pulumi.Output<string>;
    declare public readonly availabilityZones: pulumi.Output<string[]>;
    /**
     * schema: Deprecated; use availabilityZones instead
     */
    declare public readonly availableZones: pulumi.Output<string[] | undefined>;
    /**
     * The cooling duration, in seconds.
     */
    declare public readonly coolDownTime: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    declare public /*out*/ readonly currentInstanceNumber: pulumi.Output<number>;
    /**
     * Whether to delete instances when they are removed from the AS group.
     */
    declare public readonly deleteInstances: pulumi.Output<string | undefined>;
    declare public readonly deletePublicip: pulumi.Output<boolean | undefined>;
    declare public readonly deleteVolume: pulumi.Output<boolean>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly desireInstanceNumber: pulumi.Output<number>;
    declare public /*out*/ readonly detail: pulumi.Output<string>;
    declare public readonly enable: pulumi.Output<boolean | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly forceDelete: pulumi.Output<boolean | undefined>;
    /**
     * The health check grace period for instances, in seconds.
     */
    declare public readonly healthPeriodicAuditGracePeriod: pulumi.Output<number>;
    declare public readonly healthPeriodicAuditMethod: pulumi.Output<string | undefined>;
    /**
     * The health check period for instances, in minutes.
     */
    declare public readonly healthPeriodicAuditTime: pulumi.Output<number | undefined>;
    declare public readonly instanceTerminatePolicy: pulumi.Output<string | undefined>;
    /**
     * The instances id list in the as group.
     */
    declare public /*out*/ readonly instances: pulumi.Output<string[]>;
    declare public /*out*/ readonly isScaling: pulumi.Output<boolean>;
    /**
     * The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
     *
     * @deprecated use lbaasListeners instead
     */
    declare public readonly lbListenerId: pulumi.Output<string | undefined>;
    declare public readonly lbaasListeners: pulumi.Output<outputs.As.GroupLbaasListener[]>;
    declare public readonly maxInstanceNumber: pulumi.Output<number | undefined>;
    declare public readonly minInstanceNumber: pulumi.Output<number | undefined>;
    declare public readonly multiAzScalingPolicy: pulumi.Output<string>;
    declare public readonly networks: pulumi.Output<outputs.As.GroupNetwork[]>;
    /**
     * schema: Deprecated; The notification mode has been canceled
     */
    declare public readonly notifications: pulumi.Output<string[] | undefined>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * schema: Required
     */
    declare public readonly scalingConfigurationId: pulumi.Output<string>;
    declare public /*out*/ readonly scalingConfigurationName: pulumi.Output<string>;
    declare public readonly scalingGroupName: pulumi.Output<string>;
    declare public readonly securityGroups: pulumi.Output<outputs.As.GroupSecurityGroup[]>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["activityType"] = state?.activityType;
            resourceInputs["agencyName"] = state?.agencyName;
            resourceInputs["availabilityZones"] = state?.availabilityZones;
            resourceInputs["availableZones"] = state?.availableZones;
            resourceInputs["coolDownTime"] = state?.coolDownTime;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["currentInstanceNumber"] = state?.currentInstanceNumber;
            resourceInputs["deleteInstances"] = state?.deleteInstances;
            resourceInputs["deletePublicip"] = state?.deletePublicip;
            resourceInputs["deleteVolume"] = state?.deleteVolume;
            resourceInputs["description"] = state?.description;
            resourceInputs["desireInstanceNumber"] = state?.desireInstanceNumber;
            resourceInputs["detail"] = state?.detail;
            resourceInputs["enable"] = state?.enable;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["healthPeriodicAuditGracePeriod"] = state?.healthPeriodicAuditGracePeriod;
            resourceInputs["healthPeriodicAuditMethod"] = state?.healthPeriodicAuditMethod;
            resourceInputs["healthPeriodicAuditTime"] = state?.healthPeriodicAuditTime;
            resourceInputs["instanceTerminatePolicy"] = state?.instanceTerminatePolicy;
            resourceInputs["instances"] = state?.instances;
            resourceInputs["isScaling"] = state?.isScaling;
            resourceInputs["lbListenerId"] = state?.lbListenerId;
            resourceInputs["lbaasListeners"] = state?.lbaasListeners;
            resourceInputs["maxInstanceNumber"] = state?.maxInstanceNumber;
            resourceInputs["minInstanceNumber"] = state?.minInstanceNumber;
            resourceInputs["multiAzScalingPolicy"] = state?.multiAzScalingPolicy;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["notifications"] = state?.notifications;
            resourceInputs["region"] = state?.region;
            resourceInputs["scalingConfigurationId"] = state?.scalingConfigurationId;
            resourceInputs["scalingConfigurationName"] = state?.scalingConfigurationName;
            resourceInputs["scalingGroupName"] = state?.scalingGroupName;
            resourceInputs["securityGroups"] = state?.securityGroups;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if (args?.networks === undefined && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            if (args?.scalingGroupName === undefined && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupName'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["agencyName"] = args?.agencyName;
            resourceInputs["availabilityZones"] = args?.availabilityZones;
            resourceInputs["availableZones"] = args?.availableZones;
            resourceInputs["coolDownTime"] = args?.coolDownTime;
            resourceInputs["deleteInstances"] = args?.deleteInstances;
            resourceInputs["deletePublicip"] = args?.deletePublicip;
            resourceInputs["deleteVolume"] = args?.deleteVolume;
            resourceInputs["description"] = args?.description;
            resourceInputs["desireInstanceNumber"] = args?.desireInstanceNumber;
            resourceInputs["enable"] = args?.enable;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["healthPeriodicAuditGracePeriod"] = args?.healthPeriodicAuditGracePeriod;
            resourceInputs["healthPeriodicAuditMethod"] = args?.healthPeriodicAuditMethod;
            resourceInputs["healthPeriodicAuditTime"] = args?.healthPeriodicAuditTime;
            resourceInputs["instanceTerminatePolicy"] = args?.instanceTerminatePolicy;
            resourceInputs["lbListenerId"] = args?.lbListenerId;
            resourceInputs["lbaasListeners"] = args?.lbaasListeners;
            resourceInputs["maxInstanceNumber"] = args?.maxInstanceNumber;
            resourceInputs["minInstanceNumber"] = args?.minInstanceNumber;
            resourceInputs["multiAzScalingPolicy"] = args?.multiAzScalingPolicy;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["notifications"] = args?.notifications;
            resourceInputs["region"] = args?.region;
            resourceInputs["scalingConfigurationId"] = args?.scalingConfigurationId;
            resourceInputs["scalingGroupName"] = args?.scalingGroupName;
            resourceInputs["securityGroups"] = args?.securityGroups;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["activityType"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["currentInstanceNumber"] = undefined /*out*/;
            resourceInputs["detail"] = undefined /*out*/;
            resourceInputs["instances"] = undefined /*out*/;
            resourceInputs["isScaling"] = undefined /*out*/;
            resourceInputs["scalingConfigurationName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    activityType?: pulumi.Input<string>;
    agencyName?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Deprecated; use availabilityZones instead
     */
    availableZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cooling duration, in seconds.
     */
    coolDownTime?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    currentInstanceNumber?: pulumi.Input<number>;
    /**
     * Whether to delete instances when they are removed from the AS group.
     */
    deleteInstances?: pulumi.Input<string>;
    deletePublicip?: pulumi.Input<boolean>;
    deleteVolume?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    desireInstanceNumber?: pulumi.Input<number>;
    detail?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The health check grace period for instances, in seconds.
     */
    healthPeriodicAuditGracePeriod?: pulumi.Input<number>;
    healthPeriodicAuditMethod?: pulumi.Input<string>;
    /**
     * The health check period for instances, in minutes.
     */
    healthPeriodicAuditTime?: pulumi.Input<number>;
    instanceTerminatePolicy?: pulumi.Input<string>;
    /**
     * The instances id list in the as group.
     */
    instances?: pulumi.Input<pulumi.Input<string>[]>;
    isScaling?: pulumi.Input<boolean>;
    /**
     * The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
     *
     * @deprecated use lbaasListeners instead
     */
    lbListenerId?: pulumi.Input<string>;
    lbaasListeners?: pulumi.Input<pulumi.Input<inputs.As.GroupLbaasListener>[]>;
    maxInstanceNumber?: pulumi.Input<number>;
    minInstanceNumber?: pulumi.Input<number>;
    multiAzScalingPolicy?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.As.GroupNetwork>[]>;
    /**
     * schema: Deprecated; The notification mode has been canceled
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    scalingConfigurationId?: pulumi.Input<string>;
    scalingConfigurationName?: pulumi.Input<string>;
    scalingGroupName?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<inputs.As.GroupSecurityGroup>[]>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    agencyName?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Deprecated; use availabilityZones instead
     */
    availableZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cooling duration, in seconds.
     */
    coolDownTime?: pulumi.Input<number>;
    /**
     * Whether to delete instances when they are removed from the AS group.
     */
    deleteInstances?: pulumi.Input<string>;
    deletePublicip?: pulumi.Input<boolean>;
    deleteVolume?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    desireInstanceNumber?: pulumi.Input<number>;
    enable?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDelete?: pulumi.Input<boolean>;
    /**
     * The health check grace period for instances, in seconds.
     */
    healthPeriodicAuditGracePeriod?: pulumi.Input<number>;
    healthPeriodicAuditMethod?: pulumi.Input<string>;
    /**
     * The health check period for instances, in minutes.
     */
    healthPeriodicAuditTime?: pulumi.Input<number>;
    instanceTerminatePolicy?: pulumi.Input<string>;
    /**
     * The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
     *
     * @deprecated use lbaasListeners instead
     */
    lbListenerId?: pulumi.Input<string>;
    lbaasListeners?: pulumi.Input<pulumi.Input<inputs.As.GroupLbaasListener>[]>;
    maxInstanceNumber?: pulumi.Input<number>;
    minInstanceNumber?: pulumi.Input<number>;
    multiAzScalingPolicy?: pulumi.Input<string>;
    networks: pulumi.Input<pulumi.Input<inputs.As.GroupNetwork>[]>;
    /**
     * schema: Deprecated; The notification mode has been canceled
     */
    notifications?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    scalingConfigurationId?: pulumi.Input<string>;
    scalingGroupName: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<inputs.As.GroupSecurityGroup>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}

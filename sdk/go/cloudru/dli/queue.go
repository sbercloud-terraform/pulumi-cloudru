// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dli

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Queue struct {
	pulumi.CustomResourceState

	CreateTime  pulumi.IntOutput    `pulumi:"createTime"`
	CuCount     pulumi.IntOutput    `pulumi:"cuCount"`
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName pulumi.StringOutput    `pulumi:"elasticResourcePoolName"`
	EnterpriseProjectId     pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	Feature                 pulumi.StringPtrOutput `pulumi:"feature"`
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr pulumi.StringPtrOutput `pulumi:"managementSubnetCidr"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	Platform             pulumi.StringPtrOutput `pulumi:"platform"`
	QueueType            pulumi.StringPtrOutput `pulumi:"queueType"`
	Region               pulumi.StringOutput    `pulumi:"region"`
	// The queue resource mode.
	ResourceMode    pulumi.IntOutput              `pulumi:"resourceMode"`
	ScalingPolicies QueueScalingPolicyArrayOutput `pulumi:"scalingPolicies"`
	SparkDriver     QueueSparkDriverPtrOutput     `pulumi:"sparkDriver"`
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr pulumi.StringPtrOutput `pulumi:"subnetCidr"`
	Tags       pulumi.StringMapOutput `pulumi:"tags"`
	// The CIDR block of the queue.
	VpcCidr pulumi.StringOutput `pulumi:"vpcCidr"`
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOption) (*Queue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CuCount == nil {
		return nil, errors.New("invalid value for required argument 'CuCount'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Queue
	err := ctx.RegisterResource("sbercloud:Dli/queue:Queue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueueState, opts ...pulumi.ResourceOption) (*Queue, error) {
	var resource Queue
	err := ctx.ReadResource("sbercloud:Dli/queue:Queue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Queue resources.
type queueState struct {
	CreateTime  *int    `pulumi:"createTime"`
	CuCount     *int    `pulumi:"cuCount"`
	Description *string `pulumi:"description"`
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName *string `pulumi:"elasticResourcePoolName"`
	EnterpriseProjectId     *string `pulumi:"enterpriseProjectId"`
	Feature                 *string `pulumi:"feature"`
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr *string `pulumi:"managementSubnetCidr"`
	Name                 *string `pulumi:"name"`
	Platform             *string `pulumi:"platform"`
	QueueType            *string `pulumi:"queueType"`
	Region               *string `pulumi:"region"`
	// The queue resource mode.
	ResourceMode    *int                 `pulumi:"resourceMode"`
	ScalingPolicies []QueueScalingPolicy `pulumi:"scalingPolicies"`
	SparkDriver     *QueueSparkDriver    `pulumi:"sparkDriver"`
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr *string           `pulumi:"subnetCidr"`
	Tags       map[string]string `pulumi:"tags"`
	// The CIDR block of the queue.
	VpcCidr *string `pulumi:"vpcCidr"`
}

type QueueState struct {
	CreateTime  pulumi.IntPtrInput
	CuCount     pulumi.IntPtrInput
	Description pulumi.StringPtrInput
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName pulumi.StringPtrInput
	EnterpriseProjectId     pulumi.StringPtrInput
	Feature                 pulumi.StringPtrInput
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Platform             pulumi.StringPtrInput
	QueueType            pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	// The queue resource mode.
	ResourceMode    pulumi.IntPtrInput
	ScalingPolicies QueueScalingPolicyArrayInput
	SparkDriver     QueueSparkDriverPtrInput
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
	// The CIDR block of the queue.
	VpcCidr pulumi.StringPtrInput
}

func (QueueState) ElementType() reflect.Type {
	return reflect.TypeOf((*queueState)(nil)).Elem()
}

type queueArgs struct {
	CuCount     int     `pulumi:"cuCount"`
	Description *string `pulumi:"description"`
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName *string `pulumi:"elasticResourcePoolName"`
	EnterpriseProjectId     *string `pulumi:"enterpriseProjectId"`
	Feature                 *string `pulumi:"feature"`
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr *string `pulumi:"managementSubnetCidr"`
	Name                 *string `pulumi:"name"`
	Platform             *string `pulumi:"platform"`
	QueueType            *string `pulumi:"queueType"`
	Region               *string `pulumi:"region"`
	// The queue resource mode.
	ResourceMode    *int                 `pulumi:"resourceMode"`
	ScalingPolicies []QueueScalingPolicy `pulumi:"scalingPolicies"`
	SparkDriver     *QueueSparkDriver    `pulumi:"sparkDriver"`
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr *string           `pulumi:"subnetCidr"`
	Tags       map[string]string `pulumi:"tags"`
	// The CIDR block of the queue.
	VpcCidr *string `pulumi:"vpcCidr"`
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	CuCount     pulumi.IntInput
	Description pulumi.StringPtrInput
	// The name of the elastic resource pool to which the queue belongs.
	ElasticResourcePoolName pulumi.StringPtrInput
	EnterpriseProjectId     pulumi.StringPtrInput
	Feature                 pulumi.StringPtrInput
	// Deprecated: management_subnet_cidr is Deprecated
	ManagementSubnetCidr pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	Platform             pulumi.StringPtrInput
	QueueType            pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	// The queue resource mode.
	ResourceMode    pulumi.IntPtrInput
	ScalingPolicies QueueScalingPolicyArrayInput
	SparkDriver     QueueSparkDriverPtrInput
	// Deprecated: subnet_cidr is Deprecated
	SubnetCidr pulumi.StringPtrInput
	Tags       pulumi.StringMapInput
	// The CIDR block of the queue.
	VpcCidr pulumi.StringPtrInput
}

func (QueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queueArgs)(nil)).Elem()
}

type QueueInput interface {
	pulumi.Input

	ToQueueOutput() QueueOutput
	ToQueueOutputWithContext(ctx context.Context) QueueOutput
}

func (*Queue) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (i *Queue) ToQueueOutput() QueueOutput {
	return i.ToQueueOutputWithContext(context.Background())
}

func (i *Queue) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueOutput)
}

// QueueArrayInput is an input type that accepts QueueArray and QueueArrayOutput values.
// You can construct a concrete instance of `QueueArrayInput` via:
//
//	QueueArray{ QueueArgs{...} }
type QueueArrayInput interface {
	pulumi.Input

	ToQueueArrayOutput() QueueArrayOutput
	ToQueueArrayOutputWithContext(context.Context) QueueArrayOutput
}

type QueueArray []QueueInput

func (QueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queue)(nil)).Elem()
}

func (i QueueArray) ToQueueArrayOutput() QueueArrayOutput {
	return i.ToQueueArrayOutputWithContext(context.Background())
}

func (i QueueArray) ToQueueArrayOutputWithContext(ctx context.Context) QueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueArrayOutput)
}

// QueueMapInput is an input type that accepts QueueMap and QueueMapOutput values.
// You can construct a concrete instance of `QueueMapInput` via:
//
//	QueueMap{ "key": QueueArgs{...} }
type QueueMapInput interface {
	pulumi.Input

	ToQueueMapOutput() QueueMapOutput
	ToQueueMapOutputWithContext(context.Context) QueueMapOutput
}

type QueueMap map[string]QueueInput

func (QueueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queue)(nil)).Elem()
}

func (i QueueMap) ToQueueMapOutput() QueueMapOutput {
	return i.ToQueueMapOutputWithContext(context.Background())
}

func (i QueueMap) ToQueueMapOutputWithContext(ctx context.Context) QueueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueMapOutput)
}

type QueueOutput struct{ *pulumi.OutputState }

func (QueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Queue)(nil)).Elem()
}

func (o QueueOutput) ToQueueOutput() QueueOutput {
	return o
}

func (o QueueOutput) ToQueueOutputWithContext(ctx context.Context) QueueOutput {
	return o
}

func (o QueueOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

func (o QueueOutput) CuCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntOutput { return v.CuCount }).(pulumi.IntOutput)
}

func (o QueueOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the elastic resource pool to which the queue belongs.
func (o QueueOutput) ElasticResourcePoolName() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.ElasticResourcePoolName }).(pulumi.StringOutput)
}

func (o QueueOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o QueueOutput) Feature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.Feature }).(pulumi.StringPtrOutput)
}

// Deprecated: management_subnet_cidr is Deprecated
func (o QueueOutput) ManagementSubnetCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.ManagementSubnetCidr }).(pulumi.StringPtrOutput)
}

func (o QueueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o QueueOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.Platform }).(pulumi.StringPtrOutput)
}

func (o QueueOutput) QueueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.QueueType }).(pulumi.StringPtrOutput)
}

func (o QueueOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The queue resource mode.
func (o QueueOutput) ResourceMode() pulumi.IntOutput {
	return o.ApplyT(func(v *Queue) pulumi.IntOutput { return v.ResourceMode }).(pulumi.IntOutput)
}

func (o QueueOutput) ScalingPolicies() QueueScalingPolicyArrayOutput {
	return o.ApplyT(func(v *Queue) QueueScalingPolicyArrayOutput { return v.ScalingPolicies }).(QueueScalingPolicyArrayOutput)
}

func (o QueueOutput) SparkDriver() QueueSparkDriverPtrOutput {
	return o.ApplyT(func(v *Queue) QueueSparkDriverPtrOutput { return v.SparkDriver }).(QueueSparkDriverPtrOutput)
}

// Deprecated: subnet_cidr is Deprecated
func (o QueueOutput) SubnetCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringPtrOutput { return v.SubnetCidr }).(pulumi.StringPtrOutput)
}

func (o QueueOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The CIDR block of the queue.
func (o QueueOutput) VpcCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Queue) pulumi.StringOutput { return v.VpcCidr }).(pulumi.StringOutput)
}

type QueueArrayOutput struct{ *pulumi.OutputState }

func (QueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Queue)(nil)).Elem()
}

func (o QueueArrayOutput) ToQueueArrayOutput() QueueArrayOutput {
	return o
}

func (o QueueArrayOutput) ToQueueArrayOutputWithContext(ctx context.Context) QueueArrayOutput {
	return o
}

func (o QueueArrayOutput) Index(i pulumi.IntInput) QueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Queue {
		return vs[0].([]*Queue)[vs[1].(int)]
	}).(QueueOutput)
}

type QueueMapOutput struct{ *pulumi.OutputState }

func (QueueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Queue)(nil)).Elem()
}

func (o QueueMapOutput) ToQueueMapOutput() QueueMapOutput {
	return o
}

func (o QueueMapOutput) ToQueueMapOutputWithContext(ctx context.Context) QueueMapOutput {
	return o
}

func (o QueueMapOutput) MapIndex(k pulumi.StringInput) QueueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Queue {
		return vs[0].(map[string]*Queue)[vs[1].(string)]
	}).(QueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueInput)(nil)).Elem(), &Queue{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueArrayInput)(nil)).Elem(), QueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueMapInput)(nil)).Elem(), QueueMap{})
	pulumi.RegisterOutputType(QueueOutput{})
	pulumi.RegisterOutputType(QueueArrayOutput{})
	pulumi.RegisterOutputType(QueueMapOutput{})
}

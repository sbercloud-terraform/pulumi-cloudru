// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type StreamPartition struct {
	HashRange           *string `pulumi:"hashRange"`
	Id                  *string `pulumi:"id"`
	SequenceNumberRange *string `pulumi:"sequenceNumberRange"`
	Status              *string `pulumi:"status"`
}

// StreamPartitionInput is an input type that accepts StreamPartitionArgs and StreamPartitionOutput values.
// You can construct a concrete instance of `StreamPartitionInput` via:
//
//	StreamPartitionArgs{...}
type StreamPartitionInput interface {
	pulumi.Input

	ToStreamPartitionOutput() StreamPartitionOutput
	ToStreamPartitionOutputWithContext(context.Context) StreamPartitionOutput
}

type StreamPartitionArgs struct {
	HashRange           pulumi.StringPtrInput `pulumi:"hashRange"`
	Id                  pulumi.StringPtrInput `pulumi:"id"`
	SequenceNumberRange pulumi.StringPtrInput `pulumi:"sequenceNumberRange"`
	Status              pulumi.StringPtrInput `pulumi:"status"`
}

func (StreamPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamPartition)(nil)).Elem()
}

func (i StreamPartitionArgs) ToStreamPartitionOutput() StreamPartitionOutput {
	return i.ToStreamPartitionOutputWithContext(context.Background())
}

func (i StreamPartitionArgs) ToStreamPartitionOutputWithContext(ctx context.Context) StreamPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamPartitionOutput)
}

// StreamPartitionArrayInput is an input type that accepts StreamPartitionArray and StreamPartitionArrayOutput values.
// You can construct a concrete instance of `StreamPartitionArrayInput` via:
//
//	StreamPartitionArray{ StreamPartitionArgs{...} }
type StreamPartitionArrayInput interface {
	pulumi.Input

	ToStreamPartitionArrayOutput() StreamPartitionArrayOutput
	ToStreamPartitionArrayOutputWithContext(context.Context) StreamPartitionArrayOutput
}

type StreamPartitionArray []StreamPartitionInput

func (StreamPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamPartition)(nil)).Elem()
}

func (i StreamPartitionArray) ToStreamPartitionArrayOutput() StreamPartitionArrayOutput {
	return i.ToStreamPartitionArrayOutputWithContext(context.Background())
}

func (i StreamPartitionArray) ToStreamPartitionArrayOutputWithContext(ctx context.Context) StreamPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamPartitionArrayOutput)
}

type StreamPartitionOutput struct{ *pulumi.OutputState }

func (StreamPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamPartition)(nil)).Elem()
}

func (o StreamPartitionOutput) ToStreamPartitionOutput() StreamPartitionOutput {
	return o
}

func (o StreamPartitionOutput) ToStreamPartitionOutputWithContext(ctx context.Context) StreamPartitionOutput {
	return o
}

func (o StreamPartitionOutput) HashRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamPartition) *string { return v.HashRange }).(pulumi.StringPtrOutput)
}

func (o StreamPartitionOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamPartition) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o StreamPartitionOutput) SequenceNumberRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamPartition) *string { return v.SequenceNumberRange }).(pulumi.StringPtrOutput)
}

func (o StreamPartitionOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StreamPartition) *string { return v.Status }).(pulumi.StringPtrOutput)
}

type StreamPartitionArrayOutput struct{ *pulumi.OutputState }

func (StreamPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamPartition)(nil)).Elem()
}

func (o StreamPartitionArrayOutput) ToStreamPartitionArrayOutput() StreamPartitionArrayOutput {
	return o
}

func (o StreamPartitionArrayOutput) ToStreamPartitionArrayOutputWithContext(ctx context.Context) StreamPartitionArrayOutput {
	return o
}

func (o StreamPartitionArrayOutput) Index(i pulumi.IntInput) StreamPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamPartition {
		return vs[0].([]StreamPartition)[vs[1].(int)]
	}).(StreamPartitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamPartitionInput)(nil)).Elem(), StreamPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamPartitionArrayInput)(nil)).Elem(), StreamPartitionArray{})
	pulumi.RegisterOutputType(StreamPartitionOutput{})
	pulumi.RegisterOutputType(StreamPartitionArrayOutput{})
}

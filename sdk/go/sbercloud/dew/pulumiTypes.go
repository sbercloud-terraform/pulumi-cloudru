// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

var _ = internal.GetEnvOrDefault

type GetKeypairsKeypair struct {
	// Specifies the fingerprint of the keypair.
	Fingerprint string `pulumi:"fingerprint"`
	// Indicates whether the private key is managed by sberCloud.
	IsManaged bool `pulumi:"isManaged"`
	// Specifies the name of the keypair.
	Name string `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted public key.
	PublicKey string `pulumi:"publicKey"`
	// Indicates the scope of keypair. The value can be **account**or **user**.
	Scope string `pulumi:"scope"`
}

// GetKeypairsKeypairInput is an input type that accepts GetKeypairsKeypairArgs and GetKeypairsKeypairOutput values.
// You can construct a concrete instance of `GetKeypairsKeypairInput` via:
//
//	GetKeypairsKeypairArgs{...}
type GetKeypairsKeypairInput interface {
	pulumi.Input

	ToGetKeypairsKeypairOutput() GetKeypairsKeypairOutput
	ToGetKeypairsKeypairOutputWithContext(context.Context) GetKeypairsKeypairOutput
}

type GetKeypairsKeypairArgs struct {
	// Specifies the fingerprint of the keypair.
	Fingerprint pulumi.StringInput `pulumi:"fingerprint"`
	// Indicates whether the private key is managed by sberCloud.
	IsManaged pulumi.BoolInput `pulumi:"isManaged"`
	// Specifies the name of the keypair.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted public key.
	PublicKey pulumi.StringInput `pulumi:"publicKey"`
	// Indicates the scope of keypair. The value can be **account**or **user**.
	Scope pulumi.StringInput `pulumi:"scope"`
}

func (GetKeypairsKeypairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeypairsKeypair)(nil)).Elem()
}

func (i GetKeypairsKeypairArgs) ToGetKeypairsKeypairOutput() GetKeypairsKeypairOutput {
	return i.ToGetKeypairsKeypairOutputWithContext(context.Background())
}

func (i GetKeypairsKeypairArgs) ToGetKeypairsKeypairOutputWithContext(ctx context.Context) GetKeypairsKeypairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeypairsKeypairOutput)
}

// GetKeypairsKeypairArrayInput is an input type that accepts GetKeypairsKeypairArray and GetKeypairsKeypairArrayOutput values.
// You can construct a concrete instance of `GetKeypairsKeypairArrayInput` via:
//
//	GetKeypairsKeypairArray{ GetKeypairsKeypairArgs{...} }
type GetKeypairsKeypairArrayInput interface {
	pulumi.Input

	ToGetKeypairsKeypairArrayOutput() GetKeypairsKeypairArrayOutput
	ToGetKeypairsKeypairArrayOutputWithContext(context.Context) GetKeypairsKeypairArrayOutput
}

type GetKeypairsKeypairArray []GetKeypairsKeypairInput

func (GetKeypairsKeypairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeypairsKeypair)(nil)).Elem()
}

func (i GetKeypairsKeypairArray) ToGetKeypairsKeypairArrayOutput() GetKeypairsKeypairArrayOutput {
	return i.ToGetKeypairsKeypairArrayOutputWithContext(context.Background())
}

func (i GetKeypairsKeypairArray) ToGetKeypairsKeypairArrayOutputWithContext(ctx context.Context) GetKeypairsKeypairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeypairsKeypairArrayOutput)
}

type GetKeypairsKeypairOutput struct{ *pulumi.OutputState }

func (GetKeypairsKeypairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeypairsKeypair)(nil)).Elem()
}

func (o GetKeypairsKeypairOutput) ToGetKeypairsKeypairOutput() GetKeypairsKeypairOutput {
	return o
}

func (o GetKeypairsKeypairOutput) ToGetKeypairsKeypairOutputWithContext(ctx context.Context) GetKeypairsKeypairOutput {
	return o
}

// Specifies the fingerprint of the keypair.
func (o GetKeypairsKeypairOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeypairsKeypair) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// Indicates whether the private key is managed by sberCloud.
func (o GetKeypairsKeypairOutput) IsManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v GetKeypairsKeypair) bool { return v.IsManaged }).(pulumi.BoolOutput)
}

// Specifies the name of the keypair.
func (o GetKeypairsKeypairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeypairsKeypair) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the imported OpenSSH-formatted public key.
func (o GetKeypairsKeypairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeypairsKeypair) string { return v.PublicKey }).(pulumi.StringOutput)
}

// Indicates the scope of keypair. The value can be **account**or **user**.
func (o GetKeypairsKeypairOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeypairsKeypair) string { return v.Scope }).(pulumi.StringOutput)
}

type GetKeypairsKeypairArrayOutput struct{ *pulumi.OutputState }

func (GetKeypairsKeypairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeypairsKeypair)(nil)).Elem()
}

func (o GetKeypairsKeypairArrayOutput) ToGetKeypairsKeypairArrayOutput() GetKeypairsKeypairArrayOutput {
	return o
}

func (o GetKeypairsKeypairArrayOutput) ToGetKeypairsKeypairArrayOutputWithContext(ctx context.Context) GetKeypairsKeypairArrayOutput {
	return o
}

func (o GetKeypairsKeypairArrayOutput) Index(i pulumi.IntInput) GetKeypairsKeypairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeypairsKeypair {
		return vs[0].([]GetKeypairsKeypair)[vs[1].(int)]
	}).(GetKeypairsKeypairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeypairsKeypairInput)(nil)).Elem(), GetKeypairsKeypairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeypairsKeypairArrayInput)(nil)).Elem(), GetKeypairsKeypairArray{})
	pulumi.RegisterOutputType(GetKeypairsKeypairOutput{})
	pulumi.RegisterOutputType(GetKeypairsKeypairArrayOutput{})
}

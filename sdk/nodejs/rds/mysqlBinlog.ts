// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages RDS MySQL binlog resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const test = new sbercloud.rds.MysqlBinlog("test", {
 *     instanceId: instanceId,
 *     binlogRetentionHours: 6,
 * });
 * ```
 *
 * ## Import
 *
 * RDS MySQL binlog can be imported using the `instance id`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Rds/mysqlBinlog:MysqlBinlog test <instance_id>
 * ```
 */
export class MysqlBinlog extends pulumi.CustomResource {
    /**
     * Get an existing MysqlBinlog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MysqlBinlogState, opts?: pulumi.CustomResourceOptions): MysqlBinlog {
        return new MysqlBinlog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Rds/mysqlBinlog:MysqlBinlog';

    /**
     * Returns true if the given object is an instance of MysqlBinlog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MysqlBinlog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MysqlBinlog.__pulumiType;
    }

    /**
     * Specifies the binlog retention period. Value range: `1` to `168` (7x24).
     */
    public readonly binlogRetentionHours!: pulumi.Output<number>;
    /**
     * Specifies the RDS MySQL instance ID. Changing this will create a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The region in which to create the RDS binlog resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a MysqlBinlog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MysqlBinlogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MysqlBinlogArgs | MysqlBinlogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MysqlBinlogState | undefined;
            resourceInputs["binlogRetentionHours"] = state ? state.binlogRetentionHours : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as MysqlBinlogArgs | undefined;
            if ((!args || args.binlogRetentionHours === undefined) && !opts.urn) {
                throw new Error("Missing required property 'binlogRetentionHours'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["binlogRetentionHours"] = args ? args.binlogRetentionHours : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MysqlBinlog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MysqlBinlog resources.
 */
export interface MysqlBinlogState {
    /**
     * Specifies the binlog retention period. Value range: `1` to `168` (7x24).
     */
    binlogRetentionHours?: pulumi.Input<number>;
    /**
     * Specifies the RDS MySQL instance ID. Changing this will create a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The region in which to create the RDS binlog resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MysqlBinlog resource.
 */
export interface MysqlBinlogArgs {
    /**
     * Specifies the binlog retention period. Value range: `1` to `168` (7x24).
     */
    binlogRetentionHours: pulumi.Input<number>;
    /**
     * Specifies the RDS MySQL instance ID. Changing this will create a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The region in which to create the RDS binlog resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

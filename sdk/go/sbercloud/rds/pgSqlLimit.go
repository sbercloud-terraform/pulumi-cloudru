// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

type PgSqlLimit struct {
	pulumi.CustomResourceState

	// Specifies the name of the database.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Indicates whether the SQL limit is effective.
	IsEffective pulumi.BoolOutput `pulumi:"isEffective"`
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency pulumi.IntOutput `pulumi:"maxConcurrency"`
	// Specifies the max waiting time in seconds.
	MaxWaiting pulumi.IntOutput `pulumi:"maxWaiting"`
	// Specifies the query ID
	QueryId pulumi.StringPtrOutput `pulumi:"queryId"`
	// Specifies the text form of SQL statement.
	QueryString pulumi.StringPtrOutput `pulumi:"queryString"`
	Region      pulumi.StringOutput    `pulumi:"region"`
	// Specifies the query order for names that are not schema qualified.
	SearchPath pulumi.StringPtrOutput `pulumi:"searchPath"`
	// Indicates the ID of SQL limit.
	SqlLimitId pulumi.StringOutput `pulumi:"sqlLimitId"`
	// Specifies the SQL limit switch.
	Switch pulumi.StringOutput `pulumi:"switch"`
}

// NewPgSqlLimit registers a new resource with the given unique name, arguments, and options.
func NewPgSqlLimit(ctx *pulumi.Context,
	name string, args *PgSqlLimitArgs, opts ...pulumi.ResourceOption) (*PgSqlLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MaxConcurrency == nil {
		return nil, errors.New("invalid value for required argument 'MaxConcurrency'")
	}
	if args.MaxWaiting == nil {
		return nil, errors.New("invalid value for required argument 'MaxWaiting'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PgSqlLimit
	err := ctx.RegisterResource("sbercloud:Rds/pgSqlLimit:PgSqlLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgSqlLimit gets an existing PgSqlLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgSqlLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgSqlLimitState, opts ...pulumi.ResourceOption) (*PgSqlLimit, error) {
	var resource PgSqlLimit
	err := ctx.ReadResource("sbercloud:Rds/pgSqlLimit:PgSqlLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgSqlLimit resources.
type pgSqlLimitState struct {
	// Specifies the name of the database.
	DbName *string `pulumi:"dbName"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId *string `pulumi:"instanceId"`
	// Indicates whether the SQL limit is effective.
	IsEffective *bool `pulumi:"isEffective"`
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// Specifies the max waiting time in seconds.
	MaxWaiting *int `pulumi:"maxWaiting"`
	// Specifies the query ID
	QueryId *string `pulumi:"queryId"`
	// Specifies the text form of SQL statement.
	QueryString *string `pulumi:"queryString"`
	Region      *string `pulumi:"region"`
	// Specifies the query order for names that are not schema qualified.
	SearchPath *string `pulumi:"searchPath"`
	// Indicates the ID of SQL limit.
	SqlLimitId *string `pulumi:"sqlLimitId"`
	// Specifies the SQL limit switch.
	Switch *string `pulumi:"switch"`
}

type PgSqlLimitState struct {
	// Specifies the name of the database.
	DbName pulumi.StringPtrInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringPtrInput
	// Indicates whether the SQL limit is effective.
	IsEffective pulumi.BoolPtrInput
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency pulumi.IntPtrInput
	// Specifies the max waiting time in seconds.
	MaxWaiting pulumi.IntPtrInput
	// Specifies the query ID
	QueryId pulumi.StringPtrInput
	// Specifies the text form of SQL statement.
	QueryString pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	// Specifies the query order for names that are not schema qualified.
	SearchPath pulumi.StringPtrInput
	// Indicates the ID of SQL limit.
	SqlLimitId pulumi.StringPtrInput
	// Specifies the SQL limit switch.
	Switch pulumi.StringPtrInput
}

func (PgSqlLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgSqlLimitState)(nil)).Elem()
}

type pgSqlLimitArgs struct {
	// Specifies the name of the database.
	DbName string `pulumi:"dbName"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency int `pulumi:"maxConcurrency"`
	// Specifies the max waiting time in seconds.
	MaxWaiting int `pulumi:"maxWaiting"`
	// Specifies the query ID
	QueryId *string `pulumi:"queryId"`
	// Specifies the text form of SQL statement.
	QueryString *string `pulumi:"queryString"`
	Region      *string `pulumi:"region"`
	// Specifies the query order for names that are not schema qualified.
	SearchPath *string `pulumi:"searchPath"`
	// Specifies the SQL limit switch.
	Switch *string `pulumi:"switch"`
}

// The set of arguments for constructing a PgSqlLimit resource.
type PgSqlLimitArgs struct {
	// Specifies the name of the database.
	DbName pulumi.StringInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringInput
	// Specifies the number of SQL statements executed simultaneously
	MaxConcurrency pulumi.IntInput
	// Specifies the max waiting time in seconds.
	MaxWaiting pulumi.IntInput
	// Specifies the query ID
	QueryId pulumi.StringPtrInput
	// Specifies the text form of SQL statement.
	QueryString pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	// Specifies the query order for names that are not schema qualified.
	SearchPath pulumi.StringPtrInput
	// Specifies the SQL limit switch.
	Switch pulumi.StringPtrInput
}

func (PgSqlLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgSqlLimitArgs)(nil)).Elem()
}

type PgSqlLimitInput interface {
	pulumi.Input

	ToPgSqlLimitOutput() PgSqlLimitOutput
	ToPgSqlLimitOutputWithContext(ctx context.Context) PgSqlLimitOutput
}

func (*PgSqlLimit) ElementType() reflect.Type {
	return reflect.TypeOf((**PgSqlLimit)(nil)).Elem()
}

func (i *PgSqlLimit) ToPgSqlLimitOutput() PgSqlLimitOutput {
	return i.ToPgSqlLimitOutputWithContext(context.Background())
}

func (i *PgSqlLimit) ToPgSqlLimitOutputWithContext(ctx context.Context) PgSqlLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgSqlLimitOutput)
}

// PgSqlLimitArrayInput is an input type that accepts PgSqlLimitArray and PgSqlLimitArrayOutput values.
// You can construct a concrete instance of `PgSqlLimitArrayInput` via:
//
//	PgSqlLimitArray{ PgSqlLimitArgs{...} }
type PgSqlLimitArrayInput interface {
	pulumi.Input

	ToPgSqlLimitArrayOutput() PgSqlLimitArrayOutput
	ToPgSqlLimitArrayOutputWithContext(context.Context) PgSqlLimitArrayOutput
}

type PgSqlLimitArray []PgSqlLimitInput

func (PgSqlLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgSqlLimit)(nil)).Elem()
}

func (i PgSqlLimitArray) ToPgSqlLimitArrayOutput() PgSqlLimitArrayOutput {
	return i.ToPgSqlLimitArrayOutputWithContext(context.Background())
}

func (i PgSqlLimitArray) ToPgSqlLimitArrayOutputWithContext(ctx context.Context) PgSqlLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgSqlLimitArrayOutput)
}

// PgSqlLimitMapInput is an input type that accepts PgSqlLimitMap and PgSqlLimitMapOutput values.
// You can construct a concrete instance of `PgSqlLimitMapInput` via:
//
//	PgSqlLimitMap{ "key": PgSqlLimitArgs{...} }
type PgSqlLimitMapInput interface {
	pulumi.Input

	ToPgSqlLimitMapOutput() PgSqlLimitMapOutput
	ToPgSqlLimitMapOutputWithContext(context.Context) PgSqlLimitMapOutput
}

type PgSqlLimitMap map[string]PgSqlLimitInput

func (PgSqlLimitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgSqlLimit)(nil)).Elem()
}

func (i PgSqlLimitMap) ToPgSqlLimitMapOutput() PgSqlLimitMapOutput {
	return i.ToPgSqlLimitMapOutputWithContext(context.Background())
}

func (i PgSqlLimitMap) ToPgSqlLimitMapOutputWithContext(ctx context.Context) PgSqlLimitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgSqlLimitMapOutput)
}

type PgSqlLimitOutput struct{ *pulumi.OutputState }

func (PgSqlLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgSqlLimit)(nil)).Elem()
}

func (o PgSqlLimitOutput) ToPgSqlLimitOutput() PgSqlLimitOutput {
	return o
}

func (o PgSqlLimitOutput) ToPgSqlLimitOutputWithContext(ctx context.Context) PgSqlLimitOutput {
	return o
}

// Specifies the name of the database.
func (o PgSqlLimitOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS PostgreSQL instance.
func (o PgSqlLimitOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates whether the SQL limit is effective.
func (o PgSqlLimitOutput) IsEffective() pulumi.BoolOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.BoolOutput { return v.IsEffective }).(pulumi.BoolOutput)
}

// Specifies the number of SQL statements executed simultaneously
func (o PgSqlLimitOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.IntOutput { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Specifies the max waiting time in seconds.
func (o PgSqlLimitOutput) MaxWaiting() pulumi.IntOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.IntOutput { return v.MaxWaiting }).(pulumi.IntOutput)
}

// Specifies the query ID
func (o PgSqlLimitOutput) QueryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.StringPtrOutput { return v.QueryId }).(pulumi.StringPtrOutput)
}

// Specifies the text form of SQL statement.
func (o PgSqlLimitOutput) QueryString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.StringPtrOutput { return v.QueryString }).(pulumi.StringPtrOutput)
}

func (o PgSqlLimitOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the query order for names that are not schema qualified.
func (o PgSqlLimitOutput) SearchPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.StringPtrOutput { return v.SearchPath }).(pulumi.StringPtrOutput)
}

// Indicates the ID of SQL limit.
func (o PgSqlLimitOutput) SqlLimitId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.StringOutput { return v.SqlLimitId }).(pulumi.StringOutput)
}

// Specifies the SQL limit switch.
func (o PgSqlLimitOutput) Switch() pulumi.StringOutput {
	return o.ApplyT(func(v *PgSqlLimit) pulumi.StringOutput { return v.Switch }).(pulumi.StringOutput)
}

type PgSqlLimitArrayOutput struct{ *pulumi.OutputState }

func (PgSqlLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgSqlLimit)(nil)).Elem()
}

func (o PgSqlLimitArrayOutput) ToPgSqlLimitArrayOutput() PgSqlLimitArrayOutput {
	return o
}

func (o PgSqlLimitArrayOutput) ToPgSqlLimitArrayOutputWithContext(ctx context.Context) PgSqlLimitArrayOutput {
	return o
}

func (o PgSqlLimitArrayOutput) Index(i pulumi.IntInput) PgSqlLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgSqlLimit {
		return vs[0].([]*PgSqlLimit)[vs[1].(int)]
	}).(PgSqlLimitOutput)
}

type PgSqlLimitMapOutput struct{ *pulumi.OutputState }

func (PgSqlLimitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgSqlLimit)(nil)).Elem()
}

func (o PgSqlLimitMapOutput) ToPgSqlLimitMapOutput() PgSqlLimitMapOutput {
	return o
}

func (o PgSqlLimitMapOutput) ToPgSqlLimitMapOutputWithContext(ctx context.Context) PgSqlLimitMapOutput {
	return o
}

func (o PgSqlLimitMapOutput) MapIndex(k pulumi.StringInput) PgSqlLimitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgSqlLimit {
		return vs[0].(map[string]*PgSqlLimit)[vs[1].(string)]
	}).(PgSqlLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgSqlLimitInput)(nil)).Elem(), &PgSqlLimit{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgSqlLimitArrayInput)(nil)).Elem(), PgSqlLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgSqlLimitMapInput)(nil)).Elem(), PgSqlLimitMap{})
	pulumi.RegisterOutputType(PgSqlLimitOutput{})
	pulumi.RegisterOutputType(PgSqlLimitArrayOutput{})
	pulumi.RegisterOutputType(PgSqlLimitMapOutput{})
}

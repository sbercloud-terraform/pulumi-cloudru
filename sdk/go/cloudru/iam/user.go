// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type User struct {
	pulumi.CustomResourceState

	AccessType                     pulumi.StringOutput    `pulumi:"accessType"`
	CountryCode                    pulumi.StringPtrOutput `pulumi:"countryCode"`
	CreateTime                     pulumi.StringOutput    `pulumi:"createTime"`
	Description                    pulumi.StringPtrOutput `pulumi:"description"`
	Email                          pulumi.StringPtrOutput `pulumi:"email"`
	Enabled                        pulumi.BoolPtrOutput   `pulumi:"enabled"`
	ExternalIdentityId             pulumi.StringPtrOutput `pulumi:"externalIdentityId"`
	ExternalIdentityType           pulumi.StringOutput    `pulumi:"externalIdentityType"`
	LastLogin                      pulumi.StringOutput    `pulumi:"lastLogin"`
	LoginProtectVerificationMethod pulumi.StringPtrOutput `pulumi:"loginProtectVerificationMethod"`
	Name                           pulumi.StringOutput    `pulumi:"name"`
	Password                       pulumi.StringPtrOutput `pulumi:"password"`
	PasswordStrength               pulumi.StringOutput    `pulumi:"passwordStrength"`
	Phone                          pulumi.StringPtrOutput `pulumi:"phone"`
	PwdReset                       pulumi.BoolPtrOutput   `pulumi:"pwdReset"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		args = &UserArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("cloudru:Iam/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("cloudru:Iam/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	AccessType                     *string `pulumi:"accessType"`
	CountryCode                    *string `pulumi:"countryCode"`
	CreateTime                     *string `pulumi:"createTime"`
	Description                    *string `pulumi:"description"`
	Email                          *string `pulumi:"email"`
	Enabled                        *bool   `pulumi:"enabled"`
	ExternalIdentityId             *string `pulumi:"externalIdentityId"`
	ExternalIdentityType           *string `pulumi:"externalIdentityType"`
	LastLogin                      *string `pulumi:"lastLogin"`
	LoginProtectVerificationMethod *string `pulumi:"loginProtectVerificationMethod"`
	Name                           *string `pulumi:"name"`
	Password                       *string `pulumi:"password"`
	PasswordStrength               *string `pulumi:"passwordStrength"`
	Phone                          *string `pulumi:"phone"`
	PwdReset                       *bool   `pulumi:"pwdReset"`
}

type UserState struct {
	AccessType                     pulumi.StringPtrInput
	CountryCode                    pulumi.StringPtrInput
	CreateTime                     pulumi.StringPtrInput
	Description                    pulumi.StringPtrInput
	Email                          pulumi.StringPtrInput
	Enabled                        pulumi.BoolPtrInput
	ExternalIdentityId             pulumi.StringPtrInput
	ExternalIdentityType           pulumi.StringPtrInput
	LastLogin                      pulumi.StringPtrInput
	LoginProtectVerificationMethod pulumi.StringPtrInput
	Name                           pulumi.StringPtrInput
	Password                       pulumi.StringPtrInput
	PasswordStrength               pulumi.StringPtrInput
	Phone                          pulumi.StringPtrInput
	PwdReset                       pulumi.BoolPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	AccessType                     *string `pulumi:"accessType"`
	CountryCode                    *string `pulumi:"countryCode"`
	Description                    *string `pulumi:"description"`
	Email                          *string `pulumi:"email"`
	Enabled                        *bool   `pulumi:"enabled"`
	ExternalIdentityId             *string `pulumi:"externalIdentityId"`
	ExternalIdentityType           *string `pulumi:"externalIdentityType"`
	LoginProtectVerificationMethod *string `pulumi:"loginProtectVerificationMethod"`
	Name                           *string `pulumi:"name"`
	Password                       *string `pulumi:"password"`
	Phone                          *string `pulumi:"phone"`
	PwdReset                       *bool   `pulumi:"pwdReset"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	AccessType                     pulumi.StringPtrInput
	CountryCode                    pulumi.StringPtrInput
	Description                    pulumi.StringPtrInput
	Email                          pulumi.StringPtrInput
	Enabled                        pulumi.BoolPtrInput
	ExternalIdentityId             pulumi.StringPtrInput
	ExternalIdentityType           pulumi.StringPtrInput
	LoginProtectVerificationMethod pulumi.StringPtrInput
	Name                           pulumi.StringPtrInput
	Password                       pulumi.StringPtrInput
	Phone                          pulumi.StringPtrInput
	PwdReset                       pulumi.BoolPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

func (o UserOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.AccessType }).(pulumi.StringOutput)
}

func (o UserOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.CountryCode }).(pulumi.StringPtrOutput)
}

func (o UserOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o UserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o UserOutput) ExternalIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ExternalIdentityId }).(pulumi.StringPtrOutput)
}

func (o UserOutput) ExternalIdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.ExternalIdentityType }).(pulumi.StringOutput)
}

func (o UserOutput) LastLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastLogin }).(pulumi.StringOutput)
}

func (o UserOutput) LoginProtectVerificationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.LoginProtectVerificationMethod }).(pulumi.StringPtrOutput)
}

func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o UserOutput) PasswordStrength() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.PasswordStrength }).(pulumi.StringOutput)
}

func (o UserOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Phone }).(pulumi.StringPtrOutput)
}

func (o UserOutput) PwdReset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.PwdReset }).(pulumi.BoolPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ElbMember struct {
	pulumi.CustomResourceState

	Address         pulumi.StringOutput        `pulumi:"address"`
	CreatedAt       pulumi.StringOutput        `pulumi:"createdAt"`
	InstanceId      pulumi.StringOutput        `pulumi:"instanceId"`
	IpVersion       pulumi.StringOutput        `pulumi:"ipVersion"`
	MemberType      pulumi.StringOutput        `pulumi:"memberType"`
	Name            pulumi.StringOutput        `pulumi:"name"`
	OperatingStatus pulumi.StringOutput        `pulumi:"operatingStatus"`
	PoolId          pulumi.StringOutput        `pulumi:"poolId"`
	ProtocolPort    pulumi.IntOutput           `pulumi:"protocolPort"`
	Reasons         ElbMemberReasonArrayOutput `pulumi:"reasons"`
	Region          pulumi.StringOutput        `pulumi:"region"`
	Statuses        ElbMemberStatusArrayOutput `pulumi:"statuses"`
	SubnetId        pulumi.StringPtrOutput     `pulumi:"subnetId"`
	UpdatedAt       pulumi.StringOutput        `pulumi:"updatedAt"`
	Weight          pulumi.IntOutput           `pulumi:"weight"`
}

// NewElbMember registers a new resource with the given unique name, arguments, and options.
func NewElbMember(ctx *pulumi.Context,
	name string, args *ElbMemberArgs, opts ...pulumi.ResourceOption) (*ElbMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElbMember
	err := ctx.RegisterResource("cloudru:index/elbMember:ElbMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbMember gets an existing ElbMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbMemberState, opts ...pulumi.ResourceOption) (*ElbMember, error) {
	var resource ElbMember
	err := ctx.ReadResource("cloudru:index/elbMember:ElbMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbMember resources.
type elbMemberState struct {
	Address         *string           `pulumi:"address"`
	CreatedAt       *string           `pulumi:"createdAt"`
	InstanceId      *string           `pulumi:"instanceId"`
	IpVersion       *string           `pulumi:"ipVersion"`
	MemberType      *string           `pulumi:"memberType"`
	Name            *string           `pulumi:"name"`
	OperatingStatus *string           `pulumi:"operatingStatus"`
	PoolId          *string           `pulumi:"poolId"`
	ProtocolPort    *int              `pulumi:"protocolPort"`
	Reasons         []ElbMemberReason `pulumi:"reasons"`
	Region          *string           `pulumi:"region"`
	Statuses        []ElbMemberStatus `pulumi:"statuses"`
	SubnetId        *string           `pulumi:"subnetId"`
	UpdatedAt       *string           `pulumi:"updatedAt"`
	Weight          *int              `pulumi:"weight"`
}

type ElbMemberState struct {
	Address         pulumi.StringPtrInput
	CreatedAt       pulumi.StringPtrInput
	InstanceId      pulumi.StringPtrInput
	IpVersion       pulumi.StringPtrInput
	MemberType      pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	OperatingStatus pulumi.StringPtrInput
	PoolId          pulumi.StringPtrInput
	ProtocolPort    pulumi.IntPtrInput
	Reasons         ElbMemberReasonArrayInput
	Region          pulumi.StringPtrInput
	Statuses        ElbMemberStatusArrayInput
	SubnetId        pulumi.StringPtrInput
	UpdatedAt       pulumi.StringPtrInput
	Weight          pulumi.IntPtrInput
}

func (ElbMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbMemberState)(nil)).Elem()
}

type elbMemberArgs struct {
	Address      string  `pulumi:"address"`
	Name         *string `pulumi:"name"`
	PoolId       string  `pulumi:"poolId"`
	ProtocolPort *int    `pulumi:"protocolPort"`
	Region       *string `pulumi:"region"`
	SubnetId     *string `pulumi:"subnetId"`
	Weight       *int    `pulumi:"weight"`
}

// The set of arguments for constructing a ElbMember resource.
type ElbMemberArgs struct {
	Address      pulumi.StringInput
	Name         pulumi.StringPtrInput
	PoolId       pulumi.StringInput
	ProtocolPort pulumi.IntPtrInput
	Region       pulumi.StringPtrInput
	SubnetId     pulumi.StringPtrInput
	Weight       pulumi.IntPtrInput
}

func (ElbMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbMemberArgs)(nil)).Elem()
}

type ElbMemberInput interface {
	pulumi.Input

	ToElbMemberOutput() ElbMemberOutput
	ToElbMemberOutputWithContext(ctx context.Context) ElbMemberOutput
}

func (*ElbMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbMember)(nil)).Elem()
}

func (i *ElbMember) ToElbMemberOutput() ElbMemberOutput {
	return i.ToElbMemberOutputWithContext(context.Background())
}

func (i *ElbMember) ToElbMemberOutputWithContext(ctx context.Context) ElbMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMemberOutput)
}

// ElbMemberArrayInput is an input type that accepts ElbMemberArray and ElbMemberArrayOutput values.
// You can construct a concrete instance of `ElbMemberArrayInput` via:
//
//	ElbMemberArray{ ElbMemberArgs{...} }
type ElbMemberArrayInput interface {
	pulumi.Input

	ToElbMemberArrayOutput() ElbMemberArrayOutput
	ToElbMemberArrayOutputWithContext(context.Context) ElbMemberArrayOutput
}

type ElbMemberArray []ElbMemberInput

func (ElbMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbMember)(nil)).Elem()
}

func (i ElbMemberArray) ToElbMemberArrayOutput() ElbMemberArrayOutput {
	return i.ToElbMemberArrayOutputWithContext(context.Background())
}

func (i ElbMemberArray) ToElbMemberArrayOutputWithContext(ctx context.Context) ElbMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMemberArrayOutput)
}

// ElbMemberMapInput is an input type that accepts ElbMemberMap and ElbMemberMapOutput values.
// You can construct a concrete instance of `ElbMemberMapInput` via:
//
//	ElbMemberMap{ "key": ElbMemberArgs{...} }
type ElbMemberMapInput interface {
	pulumi.Input

	ToElbMemberMapOutput() ElbMemberMapOutput
	ToElbMemberMapOutputWithContext(context.Context) ElbMemberMapOutput
}

type ElbMemberMap map[string]ElbMemberInput

func (ElbMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbMember)(nil)).Elem()
}

func (i ElbMemberMap) ToElbMemberMapOutput() ElbMemberMapOutput {
	return i.ToElbMemberMapOutputWithContext(context.Background())
}

func (i ElbMemberMap) ToElbMemberMapOutputWithContext(ctx context.Context) ElbMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMemberMapOutput)
}

type ElbMemberOutput struct{ *pulumi.OutputState }

func (ElbMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbMember)(nil)).Elem()
}

func (o ElbMemberOutput) ToElbMemberOutput() ElbMemberOutput {
	return o
}

func (o ElbMemberOutput) ToElbMemberOutputWithContext(ctx context.Context) ElbMemberOutput {
	return o
}

func (o ElbMemberOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) MemberType() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.MemberType }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.OperatingStatus }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) ProtocolPort() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.IntOutput { return v.ProtocolPort }).(pulumi.IntOutput)
}

func (o ElbMemberOutput) Reasons() ElbMemberReasonArrayOutput {
	return o.ApplyT(func(v *ElbMember) ElbMemberReasonArrayOutput { return v.Reasons }).(ElbMemberReasonArrayOutput)
}

func (o ElbMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) Statuses() ElbMemberStatusArrayOutput {
	return o.ApplyT(func(v *ElbMember) ElbMemberStatusArrayOutput { return v.Statuses }).(ElbMemberStatusArrayOutput)
}

func (o ElbMemberOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o ElbMemberOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type ElbMemberArrayOutput struct{ *pulumi.OutputState }

func (ElbMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbMember)(nil)).Elem()
}

func (o ElbMemberArrayOutput) ToElbMemberArrayOutput() ElbMemberArrayOutput {
	return o
}

func (o ElbMemberArrayOutput) ToElbMemberArrayOutputWithContext(ctx context.Context) ElbMemberArrayOutput {
	return o
}

func (o ElbMemberArrayOutput) Index(i pulumi.IntInput) ElbMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbMember {
		return vs[0].([]*ElbMember)[vs[1].(int)]
	}).(ElbMemberOutput)
}

type ElbMemberMapOutput struct{ *pulumi.OutputState }

func (ElbMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbMember)(nil)).Elem()
}

func (o ElbMemberMapOutput) ToElbMemberMapOutput() ElbMemberMapOutput {
	return o
}

func (o ElbMemberMapOutput) ToElbMemberMapOutputWithContext(ctx context.Context) ElbMemberMapOutput {
	return o
}

func (o ElbMemberMapOutput) MapIndex(k pulumi.StringInput) ElbMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbMember {
		return vs[0].(map[string]*ElbMember)[vs[1].(string)]
	}).(ElbMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMemberInput)(nil)).Elem(), &ElbMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMemberArrayInput)(nil)).Elem(), ElbMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMemberMapInput)(nil)).Elem(), ElbMemberMap{})
	pulumi.RegisterOutputType(ElbMemberOutput{})
	pulumi.RegisterOutputType(ElbMemberArrayOutput{})
	pulumi.RegisterOutputType(ElbMemberMapOutput{})
}

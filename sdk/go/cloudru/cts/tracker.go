// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Tracker struct {
	pulumi.CustomResourceState

	AgencyName          pulumi.StringOutput      `pulumi:"agencyName"`
	BucketName          pulumi.StringPtrOutput   `pulumi:"bucketName"`
	CompressType        pulumi.StringPtrOutput   `pulumi:"compressType"`
	CreateTime          pulumi.IntOutput         `pulumi:"createTime"`
	DeleteTracker       pulumi.BoolPtrOutput     `pulumi:"deleteTracker"`
	Detail              pulumi.StringOutput      `pulumi:"detail"`
	DomainId            pulumi.StringOutput      `pulumi:"domainId"`
	Enabled             pulumi.BoolPtrOutput     `pulumi:"enabled"`
	ExcludeServices     pulumi.StringArrayOutput `pulumi:"excludeServices"`
	FilePrefix          pulumi.StringPtrOutput   `pulumi:"filePrefix"`
	GroupId             pulumi.StringOutput      `pulumi:"groupId"`
	IsAuthorizedBucket  pulumi.BoolOutput        `pulumi:"isAuthorizedBucket"`
	IsSortByService     pulumi.BoolPtrOutput     `pulumi:"isSortByService"`
	KmsId               pulumi.StringPtrOutput   `pulumi:"kmsId"`
	LogGroupName        pulumi.StringOutput      `pulumi:"logGroupName"`
	LogTopicName        pulumi.StringOutput      `pulumi:"logTopicName"`
	LtsEnabled          pulumi.BoolPtrOutput     `pulumi:"ltsEnabled"`
	Name                pulumi.StringOutput      `pulumi:"name"`
	OrganizationEnabled pulumi.BoolOutput        `pulumi:"organizationEnabled"`
	Region              pulumi.StringOutput      `pulumi:"region"`
	Status              pulumi.StringOutput      `pulumi:"status"`
	StreamId            pulumi.StringOutput      `pulumi:"streamId"`
	Tags                pulumi.StringMapOutput   `pulumi:"tags"`
	TransferEnabled     pulumi.BoolOutput        `pulumi:"transferEnabled"`
	Type                pulumi.StringOutput      `pulumi:"type"`
	ValidateFile        pulumi.BoolPtrOutput     `pulumi:"validateFile"`
}

// NewTracker registers a new resource with the given unique name, arguments, and options.
func NewTracker(ctx *pulumi.Context,
	name string, args *TrackerArgs, opts ...pulumi.ResourceOption) (*Tracker, error) {
	if args == nil {
		args = &TrackerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tracker
	err := ctx.RegisterResource("cloudru:Cts/tracker:Tracker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTracker gets an existing Tracker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTracker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrackerState, opts ...pulumi.ResourceOption) (*Tracker, error) {
	var resource Tracker
	err := ctx.ReadResource("cloudru:Cts/tracker:Tracker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tracker resources.
type trackerState struct {
	AgencyName          *string           `pulumi:"agencyName"`
	BucketName          *string           `pulumi:"bucketName"`
	CompressType        *string           `pulumi:"compressType"`
	CreateTime          *int              `pulumi:"createTime"`
	DeleteTracker       *bool             `pulumi:"deleteTracker"`
	Detail              *string           `pulumi:"detail"`
	DomainId            *string           `pulumi:"domainId"`
	Enabled             *bool             `pulumi:"enabled"`
	ExcludeServices     []string          `pulumi:"excludeServices"`
	FilePrefix          *string           `pulumi:"filePrefix"`
	GroupId             *string           `pulumi:"groupId"`
	IsAuthorizedBucket  *bool             `pulumi:"isAuthorizedBucket"`
	IsSortByService     *bool             `pulumi:"isSortByService"`
	KmsId               *string           `pulumi:"kmsId"`
	LogGroupName        *string           `pulumi:"logGroupName"`
	LogTopicName        *string           `pulumi:"logTopicName"`
	LtsEnabled          *bool             `pulumi:"ltsEnabled"`
	Name                *string           `pulumi:"name"`
	OrganizationEnabled *bool             `pulumi:"organizationEnabled"`
	Region              *string           `pulumi:"region"`
	Status              *string           `pulumi:"status"`
	StreamId            *string           `pulumi:"streamId"`
	Tags                map[string]string `pulumi:"tags"`
	TransferEnabled     *bool             `pulumi:"transferEnabled"`
	Type                *string           `pulumi:"type"`
	ValidateFile        *bool             `pulumi:"validateFile"`
}

type TrackerState struct {
	AgencyName          pulumi.StringPtrInput
	BucketName          pulumi.StringPtrInput
	CompressType        pulumi.StringPtrInput
	CreateTime          pulumi.IntPtrInput
	DeleteTracker       pulumi.BoolPtrInput
	Detail              pulumi.StringPtrInput
	DomainId            pulumi.StringPtrInput
	Enabled             pulumi.BoolPtrInput
	ExcludeServices     pulumi.StringArrayInput
	FilePrefix          pulumi.StringPtrInput
	GroupId             pulumi.StringPtrInput
	IsAuthorizedBucket  pulumi.BoolPtrInput
	IsSortByService     pulumi.BoolPtrInput
	KmsId               pulumi.StringPtrInput
	LogGroupName        pulumi.StringPtrInput
	LogTopicName        pulumi.StringPtrInput
	LtsEnabled          pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	OrganizationEnabled pulumi.BoolPtrInput
	Region              pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	StreamId            pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TransferEnabled     pulumi.BoolPtrInput
	Type                pulumi.StringPtrInput
	ValidateFile        pulumi.BoolPtrInput
}

func (TrackerState) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerState)(nil)).Elem()
}

type trackerArgs struct {
	BucketName          *string           `pulumi:"bucketName"`
	CompressType        *string           `pulumi:"compressType"`
	DeleteTracker       *bool             `pulumi:"deleteTracker"`
	Enabled             *bool             `pulumi:"enabled"`
	ExcludeServices     []string          `pulumi:"excludeServices"`
	FilePrefix          *string           `pulumi:"filePrefix"`
	IsSortByService     *bool             `pulumi:"isSortByService"`
	KmsId               *string           `pulumi:"kmsId"`
	LtsEnabled          *bool             `pulumi:"ltsEnabled"`
	OrganizationEnabled *bool             `pulumi:"organizationEnabled"`
	Region              *string           `pulumi:"region"`
	Tags                map[string]string `pulumi:"tags"`
	ValidateFile        *bool             `pulumi:"validateFile"`
}

// The set of arguments for constructing a Tracker resource.
type TrackerArgs struct {
	BucketName          pulumi.StringPtrInput
	CompressType        pulumi.StringPtrInput
	DeleteTracker       pulumi.BoolPtrInput
	Enabled             pulumi.BoolPtrInput
	ExcludeServices     pulumi.StringArrayInput
	FilePrefix          pulumi.StringPtrInput
	IsSortByService     pulumi.BoolPtrInput
	KmsId               pulumi.StringPtrInput
	LtsEnabled          pulumi.BoolPtrInput
	OrganizationEnabled pulumi.BoolPtrInput
	Region              pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	ValidateFile        pulumi.BoolPtrInput
}

func (TrackerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerArgs)(nil)).Elem()
}

type TrackerInput interface {
	pulumi.Input

	ToTrackerOutput() TrackerOutput
	ToTrackerOutputWithContext(ctx context.Context) TrackerOutput
}

func (*Tracker) ElementType() reflect.Type {
	return reflect.TypeOf((**Tracker)(nil)).Elem()
}

func (i *Tracker) ToTrackerOutput() TrackerOutput {
	return i.ToTrackerOutputWithContext(context.Background())
}

func (i *Tracker) ToTrackerOutputWithContext(ctx context.Context) TrackerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerOutput)
}

// TrackerArrayInput is an input type that accepts TrackerArray and TrackerArrayOutput values.
// You can construct a concrete instance of `TrackerArrayInput` via:
//
//	TrackerArray{ TrackerArgs{...} }
type TrackerArrayInput interface {
	pulumi.Input

	ToTrackerArrayOutput() TrackerArrayOutput
	ToTrackerArrayOutputWithContext(context.Context) TrackerArrayOutput
}

type TrackerArray []TrackerInput

func (TrackerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tracker)(nil)).Elem()
}

func (i TrackerArray) ToTrackerArrayOutput() TrackerArrayOutput {
	return i.ToTrackerArrayOutputWithContext(context.Background())
}

func (i TrackerArray) ToTrackerArrayOutputWithContext(ctx context.Context) TrackerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerArrayOutput)
}

// TrackerMapInput is an input type that accepts TrackerMap and TrackerMapOutput values.
// You can construct a concrete instance of `TrackerMapInput` via:
//
//	TrackerMap{ "key": TrackerArgs{...} }
type TrackerMapInput interface {
	pulumi.Input

	ToTrackerMapOutput() TrackerMapOutput
	ToTrackerMapOutputWithContext(context.Context) TrackerMapOutput
}

type TrackerMap map[string]TrackerInput

func (TrackerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tracker)(nil)).Elem()
}

func (i TrackerMap) ToTrackerMapOutput() TrackerMapOutput {
	return i.ToTrackerMapOutputWithContext(context.Background())
}

func (i TrackerMap) ToTrackerMapOutputWithContext(ctx context.Context) TrackerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerMapOutput)
}

type TrackerOutput struct{ *pulumi.OutputState }

func (TrackerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tracker)(nil)).Elem()
}

func (o TrackerOutput) ToTrackerOutput() TrackerOutput {
	return o
}

func (o TrackerOutput) ToTrackerOutputWithContext(ctx context.Context) TrackerOutput {
	return o
}

func (o TrackerOutput) AgencyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.AgencyName }).(pulumi.StringOutput)
}

func (o TrackerOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o TrackerOutput) CompressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.CompressType }).(pulumi.StringPtrOutput)
}

func (o TrackerOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Tracker) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

func (o TrackerOutput) DeleteTracker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.DeleteTracker }).(pulumi.BoolPtrOutput)
}

func (o TrackerOutput) Detail() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Detail }).(pulumi.StringOutput)
}

func (o TrackerOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

func (o TrackerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o TrackerOutput) ExcludeServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringArrayOutput { return v.ExcludeServices }).(pulumi.StringArrayOutput)
}

func (o TrackerOutput) FilePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.FilePrefix }).(pulumi.StringPtrOutput)
}

func (o TrackerOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o TrackerOutput) IsAuthorizedBucket() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolOutput { return v.IsAuthorizedBucket }).(pulumi.BoolOutput)
}

func (o TrackerOutput) IsSortByService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.IsSortByService }).(pulumi.BoolPtrOutput)
}

func (o TrackerOutput) KmsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.KmsId }).(pulumi.StringPtrOutput)
}

func (o TrackerOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

func (o TrackerOutput) LogTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.LogTopicName }).(pulumi.StringOutput)
}

func (o TrackerOutput) LtsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.LtsEnabled }).(pulumi.BoolPtrOutput)
}

func (o TrackerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TrackerOutput) OrganizationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolOutput { return v.OrganizationEnabled }).(pulumi.BoolOutput)
}

func (o TrackerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o TrackerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o TrackerOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

func (o TrackerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TrackerOutput) TransferEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolOutput { return v.TransferEnabled }).(pulumi.BoolOutput)
}

func (o TrackerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o TrackerOutput) ValidateFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.ValidateFile }).(pulumi.BoolPtrOutput)
}

type TrackerArrayOutput struct{ *pulumi.OutputState }

func (TrackerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tracker)(nil)).Elem()
}

func (o TrackerArrayOutput) ToTrackerArrayOutput() TrackerArrayOutput {
	return o
}

func (o TrackerArrayOutput) ToTrackerArrayOutputWithContext(ctx context.Context) TrackerArrayOutput {
	return o
}

func (o TrackerArrayOutput) Index(i pulumi.IntInput) TrackerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tracker {
		return vs[0].([]*Tracker)[vs[1].(int)]
	}).(TrackerOutput)
}

type TrackerMapOutput struct{ *pulumi.OutputState }

func (TrackerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tracker)(nil)).Elem()
}

func (o TrackerMapOutput) ToTrackerMapOutput() TrackerMapOutput {
	return o
}

func (o TrackerMapOutput) ToTrackerMapOutputWithContext(ctx context.Context) TrackerMapOutput {
	return o
}

func (o TrackerMapOutput) MapIndex(k pulumi.StringInput) TrackerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tracker {
		return vs[0].(map[string]*Tracker)[vs[1].(string)]
	}).(TrackerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerInput)(nil)).Elem(), &Tracker{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerArrayInput)(nil)).Elem(), TrackerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerMapInput)(nil)).Elem(), TrackerMap{})
	pulumi.RegisterOutputType(TrackerOutput{})
	pulumi.RegisterOutputType(TrackerArrayOutput{})
	pulumi.RegisterOutputType(TrackerMapOutput{})
}

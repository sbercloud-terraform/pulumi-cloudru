// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type NodeAttach struct {
	pulumi.CustomResourceState

	AvailabilityZone    pulumi.StringOutput               `pulumi:"availabilityZone"`
	ChargingMode        pulumi.StringOutput               `pulumi:"chargingMode"`
	ClusterId           pulumi.StringOutput               `pulumi:"clusterId"`
	DataVolumes         NodeAttachDataVolumeArrayOutput   `pulumi:"dataVolumes"`
	DockerBaseSize      pulumi.IntPtrOutput               `pulumi:"dockerBaseSize"`
	EcsGroupId          pulumi.StringOutput               `pulumi:"ecsGroupId"`
	EnterpriseProjectId pulumi.StringOutput               `pulumi:"enterpriseProjectId"`
	ExtensionNics       NodeAttachExtensionNicArrayOutput `pulumi:"extensionNics"`
	FlavorId            pulumi.StringOutput               `pulumi:"flavorId"`
	HostnameConfig      NodeAttachHostnameConfigOutput    `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               pulumi.StringPtrOutput   `pulumi:"imageId"`
	InitializedConditions pulumi.StringArrayOutput `pulumi:"initializedConditions"`
	KeyPair               pulumi.StringPtrOutput   `pulumi:"keyPair"`
	Labels                pulumi.StringMapOutput   `pulumi:"labels"`
	LvmConfig             pulumi.StringPtrOutput   `pulumi:"lvmConfig"`
	MaxPods               pulumi.IntPtrOutput      `pulumi:"maxPods"`
	Name                  pulumi.StringOutput      `pulumi:"name"`
	// schema: Internal
	NicMultiQueue pulumi.StringPtrOutput `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold       pulumi.StringPtrOutput          `pulumi:"nicThreshold"`
	Os                 pulumi.StringOutput             `pulumi:"os"`
	Password           pulumi.StringPtrOutput          `pulumi:"password"`
	Postinstall        pulumi.StringPtrOutput          `pulumi:"postinstall"`
	Preinstall         pulumi.StringPtrOutput          `pulumi:"preinstall"`
	PrivateIp          pulumi.StringOutput             `pulumi:"privateIp"`
	PrivateKey         pulumi.StringPtrOutput          `pulumi:"privateKey"`
	PublicIp           pulumi.StringOutput             `pulumi:"publicIp"`
	Region             pulumi.StringOutput             `pulumi:"region"`
	RootVolumes        NodeAttachRootVolumeArrayOutput `pulumi:"rootVolumes"`
	Runtime            pulumi.StringOutput             `pulumi:"runtime"`
	ServerId           pulumi.StringOutput             `pulumi:"serverId"`
	Status             pulumi.StringOutput             `pulumi:"status"`
	Storage            NodeAttachStoragePtrOutput      `pulumi:"storage"`
	SubnetId           pulumi.StringOutput             `pulumi:"subnetId"`
	SystemDiskKmsKeyId pulumi.StringPtrOutput          `pulumi:"systemDiskKmsKeyId"`
	Tags               pulumi.StringMapOutput          `pulumi:"tags"`
	Taints             NodeAttachTaintArrayOutput      `pulumi:"taints"`
}

// NewNodeAttach registers a new resource with the given unique name, arguments, and options.
func NewNodeAttach(ctx *pulumi.Context,
	name string, args *NodeAttachArgs, opts ...pulumi.ResourceOption) (*NodeAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Os == nil {
		return nil, errors.New("invalid value for required argument 'Os'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodeAttach
	err := ctx.RegisterResource("sbercloud:Cce/nodeAttach:NodeAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeAttach gets an existing NodeAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeAttachState, opts ...pulumi.ResourceOption) (*NodeAttach, error) {
	var resource NodeAttach
	err := ctx.ReadResource("sbercloud:Cce/nodeAttach:NodeAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeAttach resources.
type nodeAttachState struct {
	AvailabilityZone    *string                   `pulumi:"availabilityZone"`
	ChargingMode        *string                   `pulumi:"chargingMode"`
	ClusterId           *string                   `pulumi:"clusterId"`
	DataVolumes         []NodeAttachDataVolume    `pulumi:"dataVolumes"`
	DockerBaseSize      *int                      `pulumi:"dockerBaseSize"`
	EcsGroupId          *string                   `pulumi:"ecsGroupId"`
	EnterpriseProjectId *string                   `pulumi:"enterpriseProjectId"`
	ExtensionNics       []NodeAttachExtensionNic  `pulumi:"extensionNics"`
	FlavorId            *string                   `pulumi:"flavorId"`
	HostnameConfig      *NodeAttachHostnameConfig `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               *string           `pulumi:"imageId"`
	InitializedConditions []string          `pulumi:"initializedConditions"`
	KeyPair               *string           `pulumi:"keyPair"`
	Labels                map[string]string `pulumi:"labels"`
	LvmConfig             *string           `pulumi:"lvmConfig"`
	MaxPods               *int              `pulumi:"maxPods"`
	Name                  *string           `pulumi:"name"`
	// schema: Internal
	NicMultiQueue *string `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold       *string                `pulumi:"nicThreshold"`
	Os                 *string                `pulumi:"os"`
	Password           *string                `pulumi:"password"`
	Postinstall        *string                `pulumi:"postinstall"`
	Preinstall         *string                `pulumi:"preinstall"`
	PrivateIp          *string                `pulumi:"privateIp"`
	PrivateKey         *string                `pulumi:"privateKey"`
	PublicIp           *string                `pulumi:"publicIp"`
	Region             *string                `pulumi:"region"`
	RootVolumes        []NodeAttachRootVolume `pulumi:"rootVolumes"`
	Runtime            *string                `pulumi:"runtime"`
	ServerId           *string                `pulumi:"serverId"`
	Status             *string                `pulumi:"status"`
	Storage            *NodeAttachStorage     `pulumi:"storage"`
	SubnetId           *string                `pulumi:"subnetId"`
	SystemDiskKmsKeyId *string                `pulumi:"systemDiskKmsKeyId"`
	Tags               map[string]string      `pulumi:"tags"`
	Taints             []NodeAttachTaint      `pulumi:"taints"`
}

type NodeAttachState struct {
	AvailabilityZone    pulumi.StringPtrInput
	ChargingMode        pulumi.StringPtrInput
	ClusterId           pulumi.StringPtrInput
	DataVolumes         NodeAttachDataVolumeArrayInput
	DockerBaseSize      pulumi.IntPtrInput
	EcsGroupId          pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ExtensionNics       NodeAttachExtensionNicArrayInput
	FlavorId            pulumi.StringPtrInput
	HostnameConfig      NodeAttachHostnameConfigPtrInput
	// schema: Internal
	ImageId               pulumi.StringPtrInput
	InitializedConditions pulumi.StringArrayInput
	KeyPair               pulumi.StringPtrInput
	Labels                pulumi.StringMapInput
	LvmConfig             pulumi.StringPtrInput
	MaxPods               pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	// schema: Internal
	NicMultiQueue pulumi.StringPtrInput
	// schema: Internal
	NicThreshold       pulumi.StringPtrInput
	Os                 pulumi.StringPtrInput
	Password           pulumi.StringPtrInput
	Postinstall        pulumi.StringPtrInput
	Preinstall         pulumi.StringPtrInput
	PrivateIp          pulumi.StringPtrInput
	PrivateKey         pulumi.StringPtrInput
	PublicIp           pulumi.StringPtrInput
	Region             pulumi.StringPtrInput
	RootVolumes        NodeAttachRootVolumeArrayInput
	Runtime            pulumi.StringPtrInput
	ServerId           pulumi.StringPtrInput
	Status             pulumi.StringPtrInput
	Storage            NodeAttachStoragePtrInput
	SubnetId           pulumi.StringPtrInput
	SystemDiskKmsKeyId pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	Taints             NodeAttachTaintArrayInput
}

func (NodeAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeAttachState)(nil)).Elem()
}

type nodeAttachArgs struct {
	ClusterId      string                    `pulumi:"clusterId"`
	DockerBaseSize *int                      `pulumi:"dockerBaseSize"`
	HostnameConfig *NodeAttachHostnameConfig `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               *string           `pulumi:"imageId"`
	InitializedConditions []string          `pulumi:"initializedConditions"`
	KeyPair               *string           `pulumi:"keyPair"`
	Labels                map[string]string `pulumi:"labels"`
	LvmConfig             *string           `pulumi:"lvmConfig"`
	MaxPods               *int              `pulumi:"maxPods"`
	Name                  *string           `pulumi:"name"`
	// schema: Internal
	NicMultiQueue *string `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold       *string            `pulumi:"nicThreshold"`
	Os                 string             `pulumi:"os"`
	Password           *string            `pulumi:"password"`
	Postinstall        *string            `pulumi:"postinstall"`
	Preinstall         *string            `pulumi:"preinstall"`
	PrivateKey         *string            `pulumi:"privateKey"`
	Region             *string            `pulumi:"region"`
	Runtime            *string            `pulumi:"runtime"`
	ServerId           string             `pulumi:"serverId"`
	Storage            *NodeAttachStorage `pulumi:"storage"`
	SystemDiskKmsKeyId *string            `pulumi:"systemDiskKmsKeyId"`
	Tags               map[string]string  `pulumi:"tags"`
	Taints             []NodeAttachTaint  `pulumi:"taints"`
}

// The set of arguments for constructing a NodeAttach resource.
type NodeAttachArgs struct {
	ClusterId      pulumi.StringInput
	DockerBaseSize pulumi.IntPtrInput
	HostnameConfig NodeAttachHostnameConfigPtrInput
	// schema: Internal
	ImageId               pulumi.StringPtrInput
	InitializedConditions pulumi.StringArrayInput
	KeyPair               pulumi.StringPtrInput
	Labels                pulumi.StringMapInput
	LvmConfig             pulumi.StringPtrInput
	MaxPods               pulumi.IntPtrInput
	Name                  pulumi.StringPtrInput
	// schema: Internal
	NicMultiQueue pulumi.StringPtrInput
	// schema: Internal
	NicThreshold       pulumi.StringPtrInput
	Os                 pulumi.StringInput
	Password           pulumi.StringPtrInput
	Postinstall        pulumi.StringPtrInput
	Preinstall         pulumi.StringPtrInput
	PrivateKey         pulumi.StringPtrInput
	Region             pulumi.StringPtrInput
	Runtime            pulumi.StringPtrInput
	ServerId           pulumi.StringInput
	Storage            NodeAttachStoragePtrInput
	SystemDiskKmsKeyId pulumi.StringPtrInput
	Tags               pulumi.StringMapInput
	Taints             NodeAttachTaintArrayInput
}

func (NodeAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeAttachArgs)(nil)).Elem()
}

type NodeAttachInput interface {
	pulumi.Input

	ToNodeAttachOutput() NodeAttachOutput
	ToNodeAttachOutputWithContext(ctx context.Context) NodeAttachOutput
}

func (*NodeAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAttach)(nil)).Elem()
}

func (i *NodeAttach) ToNodeAttachOutput() NodeAttachOutput {
	return i.ToNodeAttachOutputWithContext(context.Background())
}

func (i *NodeAttach) ToNodeAttachOutputWithContext(ctx context.Context) NodeAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachOutput)
}

// NodeAttachArrayInput is an input type that accepts NodeAttachArray and NodeAttachArrayOutput values.
// You can construct a concrete instance of `NodeAttachArrayInput` via:
//
//	NodeAttachArray{ NodeAttachArgs{...} }
type NodeAttachArrayInput interface {
	pulumi.Input

	ToNodeAttachArrayOutput() NodeAttachArrayOutput
	ToNodeAttachArrayOutputWithContext(context.Context) NodeAttachArrayOutput
}

type NodeAttachArray []NodeAttachInput

func (NodeAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeAttach)(nil)).Elem()
}

func (i NodeAttachArray) ToNodeAttachArrayOutput() NodeAttachArrayOutput {
	return i.ToNodeAttachArrayOutputWithContext(context.Background())
}

func (i NodeAttachArray) ToNodeAttachArrayOutputWithContext(ctx context.Context) NodeAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachArrayOutput)
}

// NodeAttachMapInput is an input type that accepts NodeAttachMap and NodeAttachMapOutput values.
// You can construct a concrete instance of `NodeAttachMapInput` via:
//
//	NodeAttachMap{ "key": NodeAttachArgs{...} }
type NodeAttachMapInput interface {
	pulumi.Input

	ToNodeAttachMapOutput() NodeAttachMapOutput
	ToNodeAttachMapOutputWithContext(context.Context) NodeAttachMapOutput
}

type NodeAttachMap map[string]NodeAttachInput

func (NodeAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeAttach)(nil)).Elem()
}

func (i NodeAttachMap) ToNodeAttachMapOutput() NodeAttachMapOutput {
	return i.ToNodeAttachMapOutputWithContext(context.Background())
}

func (i NodeAttachMap) ToNodeAttachMapOutputWithContext(ctx context.Context) NodeAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachMapOutput)
}

type NodeAttachOutput struct{ *pulumi.OutputState }

func (NodeAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAttach)(nil)).Elem()
}

func (o NodeAttachOutput) ToNodeAttachOutput() NodeAttachOutput {
	return o
}

func (o NodeAttachOutput) ToNodeAttachOutputWithContext(ctx context.Context) NodeAttachOutput {
	return o
}

func (o NodeAttachOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) DataVolumes() NodeAttachDataVolumeArrayOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachDataVolumeArrayOutput { return v.DataVolumes }).(NodeAttachDataVolumeArrayOutput)
}

func (o NodeAttachOutput) DockerBaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.IntPtrOutput { return v.DockerBaseSize }).(pulumi.IntPtrOutput)
}

func (o NodeAttachOutput) EcsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.EcsGroupId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) ExtensionNics() NodeAttachExtensionNicArrayOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachExtensionNicArrayOutput { return v.ExtensionNics }).(NodeAttachExtensionNicArrayOutput)
}

func (o NodeAttachOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) HostnameConfig() NodeAttachHostnameConfigOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachHostnameConfigOutput { return v.HostnameConfig }).(NodeAttachHostnameConfigOutput)
}

// schema: Internal
func (o NodeAttachOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) InitializedConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringArrayOutput { return v.InitializedConditions }).(pulumi.StringArrayOutput)
}

func (o NodeAttachOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o NodeAttachOutput) LvmConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.LvmConfig }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.IntPtrOutput { return v.MaxPods }).(pulumi.IntPtrOutput)
}

func (o NodeAttachOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// schema: Internal
func (o NodeAttachOutput) NicMultiQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.NicMultiQueue }).(pulumi.StringPtrOutput)
}

// schema: Internal
func (o NodeAttachOutput) NicThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.NicThreshold }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.Postinstall }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.Preinstall }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) RootVolumes() NodeAttachRootVolumeArrayOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachRootVolumeArrayOutput { return v.RootVolumes }).(NodeAttachRootVolumeArrayOutput)
}

func (o NodeAttachOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) Storage() NodeAttachStoragePtrOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachStoragePtrOutput { return v.Storage }).(NodeAttachStoragePtrOutput)
}

func (o NodeAttachOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) SystemDiskKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.SystemDiskKmsKeyId }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o NodeAttachOutput) Taints() NodeAttachTaintArrayOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachTaintArrayOutput { return v.Taints }).(NodeAttachTaintArrayOutput)
}

type NodeAttachArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeAttach)(nil)).Elem()
}

func (o NodeAttachArrayOutput) ToNodeAttachArrayOutput() NodeAttachArrayOutput {
	return o
}

func (o NodeAttachArrayOutput) ToNodeAttachArrayOutputWithContext(ctx context.Context) NodeAttachArrayOutput {
	return o
}

func (o NodeAttachArrayOutput) Index(i pulumi.IntInput) NodeAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeAttach {
		return vs[0].([]*NodeAttach)[vs[1].(int)]
	}).(NodeAttachOutput)
}

type NodeAttachMapOutput struct{ *pulumi.OutputState }

func (NodeAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeAttach)(nil)).Elem()
}

func (o NodeAttachMapOutput) ToNodeAttachMapOutput() NodeAttachMapOutput {
	return o
}

func (o NodeAttachMapOutput) ToNodeAttachMapOutputWithContext(ctx context.Context) NodeAttachMapOutput {
	return o
}

func (o NodeAttachMapOutput) MapIndex(k pulumi.StringInput) NodeAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeAttach {
		return vs[0].(map[string]*NodeAttach)[vs[1].(string)]
	}).(NodeAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachInput)(nil)).Elem(), &NodeAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachArrayInput)(nil)).Elem(), NodeAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachMapInput)(nil)).Elem(), NodeAttachMap{})
	pulumi.RegisterOutputType(NodeAttachOutput{})
	pulumi.RegisterOutputType(NodeAttachArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachMapOutput{})
}

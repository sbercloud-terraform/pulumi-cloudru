// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class PgSqlLimit extends pulumi.CustomResource {
    /**
     * Get an existing PgSqlLimit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PgSqlLimitState, opts?: pulumi.CustomResourceOptions): PgSqlLimit {
        return new PgSqlLimit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Rds/pgSqlLimit:PgSqlLimit';

    /**
     * Returns true if the given object is an instance of PgSqlLimit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PgSqlLimit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PgSqlLimit.__pulumiType;
    }

    /**
     * Specifies the name of the database.
     */
    declare public readonly dbName: pulumi.Output<string>;
    /**
     * Specifies the ID of the RDS PostgreSQL instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Indicates whether the SQL limit is effective.
     */
    declare public /*out*/ readonly isEffective: pulumi.Output<boolean>;
    /**
     * Specifies the number of SQL statements executed simultaneously
     */
    declare public readonly maxConcurrency: pulumi.Output<number>;
    /**
     * Specifies the max waiting time in seconds.
     */
    declare public readonly maxWaiting: pulumi.Output<number>;
    /**
     * Specifies the query ID
     */
    declare public readonly queryId: pulumi.Output<string | undefined>;
    /**
     * Specifies the text form of SQL statement.
     */
    declare public readonly queryString: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the query order for names that are not schema qualified.
     */
    declare public readonly searchPath: pulumi.Output<string | undefined>;
    /**
     * Indicates the ID of SQL limit.
     */
    declare public /*out*/ readonly sqlLimitId: pulumi.Output<string>;
    /**
     * Specifies the SQL limit switch.
     */
    declare public readonly switch: pulumi.Output<string>;

    /**
     * Create a PgSqlLimit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PgSqlLimitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PgSqlLimitArgs | PgSqlLimitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PgSqlLimitState | undefined;
            resourceInputs["dbName"] = state?.dbName;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["isEffective"] = state?.isEffective;
            resourceInputs["maxConcurrency"] = state?.maxConcurrency;
            resourceInputs["maxWaiting"] = state?.maxWaiting;
            resourceInputs["queryId"] = state?.queryId;
            resourceInputs["queryString"] = state?.queryString;
            resourceInputs["region"] = state?.region;
            resourceInputs["searchPath"] = state?.searchPath;
            resourceInputs["sqlLimitId"] = state?.sqlLimitId;
            resourceInputs["switch"] = state?.switch;
        } else {
            const args = argsOrState as PgSqlLimitArgs | undefined;
            if (args?.dbName === undefined && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.maxConcurrency === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxConcurrency'");
            }
            if (args?.maxWaiting === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxWaiting'");
            }
            resourceInputs["dbName"] = args?.dbName;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["maxConcurrency"] = args?.maxConcurrency;
            resourceInputs["maxWaiting"] = args?.maxWaiting;
            resourceInputs["queryId"] = args?.queryId;
            resourceInputs["queryString"] = args?.queryString;
            resourceInputs["region"] = args?.region;
            resourceInputs["searchPath"] = args?.searchPath;
            resourceInputs["switch"] = args?.switch;
            resourceInputs["isEffective"] = undefined /*out*/;
            resourceInputs["sqlLimitId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PgSqlLimit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PgSqlLimit resources.
 */
export interface PgSqlLimitState {
    /**
     * Specifies the name of the database.
     */
    dbName?: pulumi.Input<string>;
    /**
     * Specifies the ID of the RDS PostgreSQL instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Indicates whether the SQL limit is effective.
     */
    isEffective?: pulumi.Input<boolean>;
    /**
     * Specifies the number of SQL statements executed simultaneously
     */
    maxConcurrency?: pulumi.Input<number>;
    /**
     * Specifies the max waiting time in seconds.
     */
    maxWaiting?: pulumi.Input<number>;
    /**
     * Specifies the query ID
     */
    queryId?: pulumi.Input<string>;
    /**
     * Specifies the text form of SQL statement.
     */
    queryString?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the query order for names that are not schema qualified.
     */
    searchPath?: pulumi.Input<string>;
    /**
     * Indicates the ID of SQL limit.
     */
    sqlLimitId?: pulumi.Input<string>;
    /**
     * Specifies the SQL limit switch.
     */
    switch?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PgSqlLimit resource.
 */
export interface PgSqlLimitArgs {
    /**
     * Specifies the name of the database.
     */
    dbName: pulumi.Input<string>;
    /**
     * Specifies the ID of the RDS PostgreSQL instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the number of SQL statements executed simultaneously
     */
    maxConcurrency: pulumi.Input<number>;
    /**
     * Specifies the max waiting time in seconds.
     */
    maxWaiting: pulumi.Input<number>;
    /**
     * Specifies the query ID
     */
    queryId?: pulumi.Input<string>;
    /**
     * Specifies the text form of SQL statement.
     */
    queryString?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the query order for names that are not schema qualified.
     */
    searchPath?: pulumi.Input<string>;
    /**
     * Specifies the SQL limit switch.
     */
    switch?: pulumi.Input<string>;
}

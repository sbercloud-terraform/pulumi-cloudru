# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SfsTurboPermRuleArgs', 'SfsTurboPermRule']

@pulumi.input_type
class SfsTurboPermRuleArgs:
    def __init__(__self__, *,
                 ip_cidr: pulumi.Input[_builtins.str],
                 rw_type: pulumi.Input[_builtins.str],
                 share_id: pulumi.Input[_builtins.str],
                 user_type: pulumi.Input[_builtins.str],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a SfsTurboPermRule resource.
        """
        pulumi.set(__self__, "ip_cidr", ip_cidr)
        pulumi.set(__self__, "rw_type", rw_type)
        pulumi.set(__self__, "share_id", share_id)
        pulumi.set(__self__, "user_type", user_type)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="ipCidr")
    def ip_cidr(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "ip_cidr")

    @ip_cidr.setter
    def ip_cidr(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "ip_cidr", value)

    @_builtins.property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "rw_type")

    @rw_type.setter
    def rw_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "rw_type", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _SfsTurboPermRuleState:
    def __init__(__self__, *,
                 ip_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering SfsTurboPermRule resources.
        """
        if ip_cidr is not None:
            pulumi.set(__self__, "ip_cidr", ip_cidr)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rw_type is not None:
            pulumi.set(__self__, "rw_type", rw_type)
        if share_id is not None:
            pulumi.set(__self__, "share_id", share_id)
        if user_type is not None:
            pulumi.set(__self__, "user_type", user_type)

    @_builtins.property
    @pulumi.getter(name="ipCidr")
    def ip_cidr(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip_cidr")

    @ip_cidr.setter
    def ip_cidr(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip_cidr", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "rw_type")

    @rw_type.setter
    def rw_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rw_type", value)

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "share_id")

    @share_id.setter
    def share_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "share_id", value)

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_type")

    @user_type.setter
    def user_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_type", value)


@pulumi.type_token("sbercloud:index/sfsTurboPermRule:SfsTurboPermRule")
class SfsTurboPermRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a SfsTurboPermRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SfsTurboPermRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SfsTurboPermRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SfsTurboPermRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SfsTurboPermRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_cidr: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 rw_type: Optional[pulumi.Input[_builtins.str]] = None,
                 share_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SfsTurboPermRuleArgs.__new__(SfsTurboPermRuleArgs)

            if ip_cidr is None and not opts.urn:
                raise TypeError("Missing required property 'ip_cidr'")
            __props__.__dict__["ip_cidr"] = ip_cidr
            __props__.__dict__["region"] = region
            if rw_type is None and not opts.urn:
                raise TypeError("Missing required property 'rw_type'")
            __props__.__dict__["rw_type"] = rw_type
            if share_id is None and not opts.urn:
                raise TypeError("Missing required property 'share_id'")
            __props__.__dict__["share_id"] = share_id
            if user_type is None and not opts.urn:
                raise TypeError("Missing required property 'user_type'")
            __props__.__dict__["user_type"] = user_type
        super(SfsTurboPermRule, __self__).__init__(
            'sbercloud:index/sfsTurboPermRule:SfsTurboPermRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ip_cidr: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            rw_type: Optional[pulumi.Input[_builtins.str]] = None,
            share_id: Optional[pulumi.Input[_builtins.str]] = None,
            user_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'SfsTurboPermRule':
        """
        Get an existing SfsTurboPermRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SfsTurboPermRuleState.__new__(_SfsTurboPermRuleState)

        __props__.__dict__["ip_cidr"] = ip_cidr
        __props__.__dict__["region"] = region
        __props__.__dict__["rw_type"] = rw_type
        __props__.__dict__["share_id"] = share_id
        __props__.__dict__["user_type"] = user_type
        return SfsTurboPermRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="ipCidr")
    def ip_cidr(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "ip_cidr")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "rw_type")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "share_id")

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "user_type")


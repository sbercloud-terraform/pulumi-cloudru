// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type PgAccount struct {
	pulumi.CustomResourceState

	// Indicates the permission attributes of the account.
	Attributes PgAccountAttributeArrayOutput `pulumi:"attributes"`
	// Specifies the remarks of the DB account.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// schema: Deprecated
	Memberofs pulumi.StringArrayOutput `pulumi:"memberofs"`
	// Specifies the username of the DB account.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the password of the DB account.
	Password pulumi.StringOutput `pulumi:"password"`
	Region   pulumi.StringOutput `pulumi:"region"`
}

// NewPgAccount registers a new resource with the given unique name, arguments, and options.
func NewPgAccount(ctx *pulumi.Context,
	name string, args *PgAccountArgs, opts ...pulumi.ResourceOption) (*PgAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PgAccount
	err := ctx.RegisterResource("cloudru:Rds/pgAccount:PgAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgAccount gets an existing PgAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgAccountState, opts ...pulumi.ResourceOption) (*PgAccount, error) {
	var resource PgAccount
	err := ctx.ReadResource("cloudru:Rds/pgAccount:PgAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgAccount resources.
type pgAccountState struct {
	// Indicates the permission attributes of the account.
	Attributes []PgAccountAttribute `pulumi:"attributes"`
	// Specifies the remarks of the DB account.
	Description *string `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId *string `pulumi:"instanceId"`
	// schema: Deprecated
	Memberofs []string `pulumi:"memberofs"`
	// Specifies the username of the DB account.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account.
	Password *string `pulumi:"password"`
	Region   *string `pulumi:"region"`
}

type PgAccountState struct {
	// Indicates the permission attributes of the account.
	Attributes PgAccountAttributeArrayInput
	// Specifies the remarks of the DB account.
	Description pulumi.StringPtrInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringPtrInput
	// schema: Deprecated
	Memberofs pulumi.StringArrayInput
	// Specifies the username of the DB account.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account.
	Password pulumi.StringPtrInput
	Region   pulumi.StringPtrInput
}

func (PgAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgAccountState)(nil)).Elem()
}

type pgAccountArgs struct {
	// Specifies the remarks of the DB account.
	Description *string `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// schema: Deprecated
	Memberofs []string `pulumi:"memberofs"`
	// Specifies the username of the DB account.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account.
	Password string  `pulumi:"password"`
	Region   *string `pulumi:"region"`
}

// The set of arguments for constructing a PgAccount resource.
type PgAccountArgs struct {
	// Specifies the remarks of the DB account.
	Description pulumi.StringPtrInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringInput
	// schema: Deprecated
	Memberofs pulumi.StringArrayInput
	// Specifies the username of the DB account.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account.
	Password pulumi.StringInput
	Region   pulumi.StringPtrInput
}

func (PgAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgAccountArgs)(nil)).Elem()
}

type PgAccountInput interface {
	pulumi.Input

	ToPgAccountOutput() PgAccountOutput
	ToPgAccountOutputWithContext(ctx context.Context) PgAccountOutput
}

func (*PgAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**PgAccount)(nil)).Elem()
}

func (i *PgAccount) ToPgAccountOutput() PgAccountOutput {
	return i.ToPgAccountOutputWithContext(context.Background())
}

func (i *PgAccount) ToPgAccountOutputWithContext(ctx context.Context) PgAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgAccountOutput)
}

// PgAccountArrayInput is an input type that accepts PgAccountArray and PgAccountArrayOutput values.
// You can construct a concrete instance of `PgAccountArrayInput` via:
//
//	PgAccountArray{ PgAccountArgs{...} }
type PgAccountArrayInput interface {
	pulumi.Input

	ToPgAccountArrayOutput() PgAccountArrayOutput
	ToPgAccountArrayOutputWithContext(context.Context) PgAccountArrayOutput
}

type PgAccountArray []PgAccountInput

func (PgAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgAccount)(nil)).Elem()
}

func (i PgAccountArray) ToPgAccountArrayOutput() PgAccountArrayOutput {
	return i.ToPgAccountArrayOutputWithContext(context.Background())
}

func (i PgAccountArray) ToPgAccountArrayOutputWithContext(ctx context.Context) PgAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgAccountArrayOutput)
}

// PgAccountMapInput is an input type that accepts PgAccountMap and PgAccountMapOutput values.
// You can construct a concrete instance of `PgAccountMapInput` via:
//
//	PgAccountMap{ "key": PgAccountArgs{...} }
type PgAccountMapInput interface {
	pulumi.Input

	ToPgAccountMapOutput() PgAccountMapOutput
	ToPgAccountMapOutputWithContext(context.Context) PgAccountMapOutput
}

type PgAccountMap map[string]PgAccountInput

func (PgAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgAccount)(nil)).Elem()
}

func (i PgAccountMap) ToPgAccountMapOutput() PgAccountMapOutput {
	return i.ToPgAccountMapOutputWithContext(context.Background())
}

func (i PgAccountMap) ToPgAccountMapOutputWithContext(ctx context.Context) PgAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgAccountMapOutput)
}

type PgAccountOutput struct{ *pulumi.OutputState }

func (PgAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgAccount)(nil)).Elem()
}

func (o PgAccountOutput) ToPgAccountOutput() PgAccountOutput {
	return o
}

func (o PgAccountOutput) ToPgAccountOutputWithContext(ctx context.Context) PgAccountOutput {
	return o
}

// Indicates the permission attributes of the account.
func (o PgAccountOutput) Attributes() PgAccountAttributeArrayOutput {
	return o.ApplyT(func(v *PgAccount) PgAccountAttributeArrayOutput { return v.Attributes }).(PgAccountAttributeArrayOutput)
}

// Specifies the remarks of the DB account.
func (o PgAccountOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgAccount) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the RDS PostgreSQL instance.
func (o PgAccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgAccount) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// schema: Deprecated
func (o PgAccountOutput) Memberofs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PgAccount) pulumi.StringArrayOutput { return v.Memberofs }).(pulumi.StringArrayOutput)
}

// Specifies the username of the DB account.
func (o PgAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PgAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the password of the DB account.
func (o PgAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *PgAccount) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o PgAccountOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PgAccount) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type PgAccountArrayOutput struct{ *pulumi.OutputState }

func (PgAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgAccount)(nil)).Elem()
}

func (o PgAccountArrayOutput) ToPgAccountArrayOutput() PgAccountArrayOutput {
	return o
}

func (o PgAccountArrayOutput) ToPgAccountArrayOutputWithContext(ctx context.Context) PgAccountArrayOutput {
	return o
}

func (o PgAccountArrayOutput) Index(i pulumi.IntInput) PgAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgAccount {
		return vs[0].([]*PgAccount)[vs[1].(int)]
	}).(PgAccountOutput)
}

type PgAccountMapOutput struct{ *pulumi.OutputState }

func (PgAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgAccount)(nil)).Elem()
}

func (o PgAccountMapOutput) ToPgAccountMapOutput() PgAccountMapOutput {
	return o
}

func (o PgAccountMapOutput) ToPgAccountMapOutputWithContext(ctx context.Context) PgAccountMapOutput {
	return o
}

func (o PgAccountMapOutput) MapIndex(k pulumi.StringInput) PgAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgAccount {
		return vs[0].(map[string]*PgAccount)[vs[1].(string)]
	}).(PgAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgAccountInput)(nil)).Elem(), &PgAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgAccountArrayInput)(nil)).Elem(), PgAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgAccountMapInput)(nil)).Elem(), PgAccountMap{})
	pulumi.RegisterOutputType(PgAccountOutput{})
	pulumi.RegisterOutputType(PgAccountArrayOutput{})
	pulumi.RegisterOutputType(PgAccountMapOutput{})
}

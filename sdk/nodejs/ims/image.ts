// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Ims/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    declare public readonly backupId: pulumi.Output<string>;
    declare public /*out*/ readonly checksum: pulumi.Output<string>;
    declare public readonly cmkId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly dataOrigin: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly diskFormat: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly imageSize: pulumi.Output<string>;
    declare public readonly imageUrl: pulumi.Output<string | undefined>;
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly isConfig: pulumi.Output<boolean | undefined>;
    declare public readonly maxRam: pulumi.Output<number>;
    declare public readonly minDisk: pulumi.Output<number | undefined>;
    declare public readonly minRam: pulumi.Output<number>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly osVersion: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly type: pulumi.Output<string | undefined>;
    declare public readonly vaultId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly visibility: pulumi.Output<string>;
    declare public readonly volumeId: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["backupId"] = state?.backupId;
            resourceInputs["checksum"] = state?.checksum;
            resourceInputs["cmkId"] = state?.cmkId;
            resourceInputs["dataOrigin"] = state?.dataOrigin;
            resourceInputs["description"] = state?.description;
            resourceInputs["diskFormat"] = state?.diskFormat;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["imageSize"] = state?.imageSize;
            resourceInputs["imageUrl"] = state?.imageUrl;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["isConfig"] = state?.isConfig;
            resourceInputs["maxRam"] = state?.maxRam;
            resourceInputs["minDisk"] = state?.minDisk;
            resourceInputs["minRam"] = state?.minRam;
            resourceInputs["name"] = state?.name;
            resourceInputs["osVersion"] = state?.osVersion;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["vaultId"] = state?.vaultId;
            resourceInputs["visibility"] = state?.visibility;
            resourceInputs["volumeId"] = state?.volumeId;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            resourceInputs["backupId"] = args?.backupId;
            resourceInputs["cmkId"] = args?.cmkId;
            resourceInputs["description"] = args?.description;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["imageUrl"] = args?.imageUrl;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["isConfig"] = args?.isConfig;
            resourceInputs["maxRam"] = args?.maxRam;
            resourceInputs["minDisk"] = args?.minDisk;
            resourceInputs["minRam"] = args?.minRam;
            resourceInputs["name"] = args?.name;
            resourceInputs["osVersion"] = args?.osVersion;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["vaultId"] = args?.vaultId;
            resourceInputs["volumeId"] = args?.volumeId;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["dataOrigin"] = undefined /*out*/;
            resourceInputs["diskFormat"] = undefined /*out*/;
            resourceInputs["imageSize"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    backupId?: pulumi.Input<string>;
    checksum?: pulumi.Input<string>;
    cmkId?: pulumi.Input<string>;
    dataOrigin?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskFormat?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    imageSize?: pulumi.Input<string>;
    imageUrl?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    isConfig?: pulumi.Input<boolean>;
    maxRam?: pulumi.Input<number>;
    minDisk?: pulumi.Input<number>;
    minRam?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osVersion?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    backupId?: pulumi.Input<string>;
    cmkId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    imageUrl?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    isConfig?: pulumi.Input<boolean>;
    maxRam?: pulumi.Input<number>;
    minDisk?: pulumi.Input<number>;
    minRam?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osVersion?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
}

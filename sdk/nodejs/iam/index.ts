// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessKeyArgs, AccessKeyState } from "./accessKey";
export type AccessKey = import("./accessKey").AccessKey;
export const AccessKey: typeof import("./accessKey").AccessKey = null as any;
utilities.lazyLoad(exports, ["AccessKey"], () => require("./accessKey"));

export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { AgencyArgs, AgencyState } from "./agency";
export type Agency = import("./agency").Agency;
export const Agency: typeof import("./agency").Agency = null as any;
utilities.lazyLoad(exports, ["Agency"], () => require("./agency"));

export { GetCustomRoleArgs, GetCustomRoleResult, GetCustomRoleOutputArgs } from "./getCustomRole";
export const getCustomRole: typeof import("./getCustomRole").getCustomRole = null as any;
export const getCustomRoleOutput: typeof import("./getCustomRole").getCustomRoleOutput = null as any;
utilities.lazyLoad(exports, ["getCustomRole","getCustomRoleOutput"], () => require("./getCustomRole"));

export { GetGroupArgs, GetGroupResult, GetGroupOutputArgs } from "./getGroup";
export const getGroup: typeof import("./getGroup").getGroup = null as any;
export const getGroupOutput: typeof import("./getGroup").getGroupOutput = null as any;
utilities.lazyLoad(exports, ["getGroup","getGroupOutput"], () => require("./getGroup"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupMembershipArgs, GroupMembershipState } from "./groupMembership";
export type GroupMembership = import("./groupMembership").GroupMembership;
export const GroupMembership: typeof import("./groupMembership").GroupMembership = null as any;
utilities.lazyLoad(exports, ["GroupMembership"], () => require("./groupMembership"));

export { GroupRoleAssignmentArgs, GroupRoleAssignmentState } from "./groupRoleAssignment";
export type GroupRoleAssignment = import("./groupRoleAssignment").GroupRoleAssignment;
export const GroupRoleAssignment: typeof import("./groupRoleAssignment").GroupRoleAssignment = null as any;
utilities.lazyLoad(exports, ["GroupRoleAssignment"], () => require("./groupRoleAssignment"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProviderArgs, ProviderState } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ProviderConversionArgs, ProviderConversionState } from "./providerConversion";
export type ProviderConversion = import("./providerConversion").ProviderConversion;
export const ProviderConversion: typeof import("./providerConversion").ProviderConversion = null as any;
utilities.lazyLoad(exports, ["ProviderConversion"], () => require("./providerConversion"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RoleAssignmentArgs, RoleAssignmentState } from "./roleAssignment";
export type RoleAssignment = import("./roleAssignment").RoleAssignment;
export const RoleAssignment: typeof import("./roleAssignment").RoleAssignment = null as any;
utilities.lazyLoad(exports, ["RoleAssignment"], () => require("./roleAssignment"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudru:Iam/accessKey:AccessKey":
                return new AccessKey(name, <any>undefined, { urn })
            case "cloudru:Iam/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "cloudru:Iam/agency:Agency":
                return new Agency(name, <any>undefined, { urn })
            case "cloudru:Iam/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "cloudru:Iam/groupMembership:GroupMembership":
                return new GroupMembership(name, <any>undefined, { urn })
            case "cloudru:Iam/groupRoleAssignment:GroupRoleAssignment":
                return new GroupRoleAssignment(name, <any>undefined, { urn })
            case "cloudru:Iam/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "cloudru:Iam/provider:Provider":
                return new Provider(name, <any>undefined, { urn })
            case "cloudru:Iam/providerConversion:ProviderConversion":
                return new ProviderConversion(name, <any>undefined, { urn })
            case "cloudru:Iam/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "cloudru:Iam/roleAssignment:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "cloudru:Iam/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudru", "Iam/accessKey", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/acl", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/agency", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/group", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/groupMembership", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/groupRoleAssignment", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/project", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/provider", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/providerConversion", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/role", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/roleAssignment", _module)
pulumi.runtime.registerResourceModule("cloudru", "Iam/user", _module)

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFgsFunctionTriggersResult',
    'AwaitableGetFgsFunctionTriggersResult',
    'get_fgs_function_triggers',
    'get_fgs_function_triggers_output',
]

@pulumi.output_type
class GetFgsFunctionTriggersResult:
    """
    A collection of values returned by getFgsFunctionTriggers.
    """
    def __init__(__self__, end_time=None, function_urn=None, id=None, region=None, start_time=None, status=None, trigger_id=None, triggers=None, type=None):
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if function_urn and not isinstance(function_urn, str):
            raise TypeError("Expected argument 'function_urn' to be a str")
        pulumi.set(__self__, "function_urn", function_urn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if trigger_id and not isinstance(trigger_id, str):
            raise TypeError("Expected argument 'trigger_id' to be a str")
        pulumi.set(__self__, "trigger_id", trigger_id)
        if triggers and not isinstance(triggers, list):
            raise TypeError("Expected argument 'triggers' to be a list")
        pulumi.set(__self__, "triggers", triggers)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The current status of the function trigger.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="triggerId")
    def trigger_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "trigger_id")

    @_builtins.property
    @pulumi.getter
    def triggers(self) -> Sequence['outputs.GetFgsFunctionTriggersTriggerResult']:
        """
        All triggers that match the filter parameters.
        The triggers structure is documented below.
        """
        return pulumi.get(self, "triggers")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The type of the function trigger.
        """
        return pulumi.get(self, "type")


class AwaitableGetFgsFunctionTriggersResult(GetFgsFunctionTriggersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFgsFunctionTriggersResult(
            end_time=self.end_time,
            function_urn=self.function_urn,
            id=self.id,
            region=self.region,
            start_time=self.start_time,
            status=self.status,
            trigger_id=self.trigger_id,
            triggers=self.triggers,
            type=self.type)


def get_fgs_function_triggers(end_time: Optional[_builtins.str] = None,
                              function_urn: Optional[_builtins.str] = None,
                              region: Optional[_builtins.str] = None,
                              start_time: Optional[_builtins.str] = None,
                              status: Optional[_builtins.str] = None,
                              trigger_id: Optional[_builtins.str] = None,
                              type: Optional[_builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFgsFunctionTriggersResult:
    """
    Use this data source to get the list of function triggers of FunctionGraph within SberCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    function_urn = config.require_object("functionUrn")
    test = sbercloud.get_fgs_function_triggers(function_urn=function_urn)
    ```


    :param _builtins.str end_time: Specifies end time of creation time of the function trigger.
           The format is `YYYY-MM-DDThh:mm:ss{timezone}`.
           
           > The `status`, `start_time` and `end_time` parameters does not take effect for some triggers, e.g. `SMN`.
    :param _builtins.str function_urn: Specifies the function URN to which the trigger belongs.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies start time of creation time of the function trigger.
           The format is `YYYY-MM-DDThh:mm:ss{timezone}`.
    :param _builtins.str status: Specifies status of the function trigger.
           The valid values are as follows:
           + **ACTIVE**
           + **DISABLED**
    :param _builtins.str trigger_id: Specifies the ID of the function trigger.
    :param _builtins.str type: Specifies type of the function trigger.
           The valid values are as follows:
           + **TIMER**
           + **APIG**
           + **CTS**
           + **DDS**
           + **DMS**
           + **DIS**
           + **LTS**
           + **OBS**
           + **SMN**
           + **KAFKA**
           + **RABBITMQ**
           + **DEDICATEDGATEWAY**
           + **OPENSOURCEKAFKA**
           + **APIC**
           + **GAUSSMONGO**
           + **EVENTGRID**
           + **IOTDA**
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['functionUrn'] = function_urn
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['triggerId'] = trigger_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getFgsFunctionTriggers:getFgsFunctionTriggers', __args__, opts=opts, typ=GetFgsFunctionTriggersResult).value

    return AwaitableGetFgsFunctionTriggersResult(
        end_time=pulumi.get(__ret__, 'end_time'),
        function_urn=pulumi.get(__ret__, 'function_urn'),
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'),
        trigger_id=pulumi.get(__ret__, 'trigger_id'),
        triggers=pulumi.get(__ret__, 'triggers'),
        type=pulumi.get(__ret__, 'type'))
def get_fgs_function_triggers_output(end_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     function_urn: Optional[pulumi.Input[_builtins.str]] = None,
                                     region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     start_time: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     trigger_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFgsFunctionTriggersResult]:
    """
    Use this data source to get the list of function triggers of FunctionGraph within SberCloud.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    function_urn = config.require_object("functionUrn")
    test = sbercloud.get_fgs_function_triggers(function_urn=function_urn)
    ```


    :param _builtins.str end_time: Specifies end time of creation time of the function trigger.
           The format is `YYYY-MM-DDThh:mm:ss{timezone}`.
           
           > The `status`, `start_time` and `end_time` parameters does not take effect for some triggers, e.g. `SMN`.
    :param _builtins.str function_urn: Specifies the function URN to which the trigger belongs.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str start_time: Specifies start time of creation time of the function trigger.
           The format is `YYYY-MM-DDThh:mm:ss{timezone}`.
    :param _builtins.str status: Specifies status of the function trigger.
           The valid values are as follows:
           + **ACTIVE**
           + **DISABLED**
    :param _builtins.str trigger_id: Specifies the ID of the function trigger.
    :param _builtins.str type: Specifies type of the function trigger.
           The valid values are as follows:
           + **TIMER**
           + **APIG**
           + **CTS**
           + **DDS**
           + **DMS**
           + **DIS**
           + **LTS**
           + **OBS**
           + **SMN**
           + **KAFKA**
           + **RABBITMQ**
           + **DEDICATEDGATEWAY**
           + **OPENSOURCEKAFKA**
           + **APIC**
           + **GAUSSMONGO**
           + **EVENTGRID**
           + **IOTDA**
    """
    __args__ = dict()
    __args__['endTime'] = end_time
    __args__['functionUrn'] = function_urn
    __args__['region'] = region
    __args__['startTime'] = start_time
    __args__['status'] = status
    __args__['triggerId'] = trigger_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getFgsFunctionTriggers:getFgsFunctionTriggers', __args__, opts=opts, typ=GetFgsFunctionTriggersResult)
    return __ret__.apply(lambda __response__: GetFgsFunctionTriggersResult(
        end_time=pulumi.get(__response__, 'end_time'),
        function_urn=pulumi.get(__response__, 'function_urn'),
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        start_time=pulumi.get(__response__, 'start_time'),
        status=pulumi.get(__response__, 'status'),
        trigger_id=pulumi.get(__response__, 'trigger_id'),
        triggers=pulumi.get(__response__, 'triggers'),
        type=pulumi.get(__response__, 'type')))

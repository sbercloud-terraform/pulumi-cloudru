// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Provider struct {
	pulumi.CustomResourceState

	AccessConfig    ProviderAccessConfigPtrOutput     `pulumi:"accessConfig"`
	ConversionRules ProviderConversionRuleArrayOutput `pulumi:"conversionRules"`
	Description     pulumi.StringPtrOutput            `pulumi:"description"`
	LoginLink       pulumi.StringOutput               `pulumi:"loginLink"`
	Metadata        pulumi.StringPtrOutput            `pulumi:"metadata"`
	Name            pulumi.StringOutput               `pulumi:"name"`
	Protocol        pulumi.StringOutput               `pulumi:"protocol"`
	SsoType         pulumi.StringOutput               `pulumi:"ssoType"`
	Status          pulumi.BoolPtrOutput              `pulumi:"status"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("cloudru:Iam/provider:Provider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvider gets an existing Provider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderState, opts ...pulumi.ResourceOption) (*Provider, error) {
	var resource Provider
	err := ctx.ReadResource("cloudru:Iam/provider:Provider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Provider resources.
type providerState struct {
	AccessConfig    *ProviderAccessConfig    `pulumi:"accessConfig"`
	ConversionRules []ProviderConversionRule `pulumi:"conversionRules"`
	Description     *string                  `pulumi:"description"`
	LoginLink       *string                  `pulumi:"loginLink"`
	Metadata        *string                  `pulumi:"metadata"`
	Name            *string                  `pulumi:"name"`
	Protocol        *string                  `pulumi:"protocol"`
	SsoType         *string                  `pulumi:"ssoType"`
	Status          *bool                    `pulumi:"status"`
}

type ProviderState struct {
	AccessConfig    ProviderAccessConfigPtrInput
	ConversionRules ProviderConversionRuleArrayInput
	Description     pulumi.StringPtrInput
	LoginLink       pulumi.StringPtrInput
	Metadata        pulumi.StringPtrInput
	Name            pulumi.StringPtrInput
	Protocol        pulumi.StringPtrInput
	SsoType         pulumi.StringPtrInput
	Status          pulumi.BoolPtrInput
}

func (ProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerState)(nil)).Elem()
}

type providerArgs struct {
	AccessConfig *ProviderAccessConfig `pulumi:"accessConfig"`
	Description  *string               `pulumi:"description"`
	Metadata     *string               `pulumi:"metadata"`
	Name         *string               `pulumi:"name"`
	Protocol     string                `pulumi:"protocol"`
	SsoType      *string               `pulumi:"ssoType"`
	Status       *bool                 `pulumi:"status"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	AccessConfig ProviderAccessConfigPtrInput
	Description  pulumi.StringPtrInput
	Metadata     pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Protocol     pulumi.StringInput
	SsoType      pulumi.StringPtrInput
	Status       pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

// ProviderArrayInput is an input type that accepts ProviderArray and ProviderArrayOutput values.
// You can construct a concrete instance of `ProviderArrayInput` via:
//
//	ProviderArray{ ProviderArgs{...} }
type ProviderArrayInput interface {
	pulumi.Input

	ToProviderArrayOutput() ProviderArrayOutput
	ToProviderArrayOutputWithContext(context.Context) ProviderArrayOutput
}

type ProviderArray []ProviderInput

func (ProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Provider)(nil)).Elem()
}

func (i ProviderArray) ToProviderArrayOutput() ProviderArrayOutput {
	return i.ToProviderArrayOutputWithContext(context.Background())
}

func (i ProviderArray) ToProviderArrayOutputWithContext(ctx context.Context) ProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderArrayOutput)
}

// ProviderMapInput is an input type that accepts ProviderMap and ProviderMapOutput values.
// You can construct a concrete instance of `ProviderMapInput` via:
//
//	ProviderMap{ "key": ProviderArgs{...} }
type ProviderMapInput interface {
	pulumi.Input

	ToProviderMapOutput() ProviderMapOutput
	ToProviderMapOutputWithContext(context.Context) ProviderMapOutput
}

type ProviderMap map[string]ProviderInput

func (ProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Provider)(nil)).Elem()
}

func (i ProviderMap) ToProviderMapOutput() ProviderMapOutput {
	return i.ToProviderMapOutputWithContext(context.Background())
}

func (i ProviderMap) ToProviderMapOutputWithContext(ctx context.Context) ProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderMapOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) AccessConfig() ProviderAccessConfigPtrOutput {
	return o.ApplyT(func(v *Provider) ProviderAccessConfigPtrOutput { return v.AccessConfig }).(ProviderAccessConfigPtrOutput)
}

func (o ProviderOutput) ConversionRules() ProviderConversionRuleArrayOutput {
	return o.ApplyT(func(v *Provider) ProviderConversionRuleArrayOutput { return v.ConversionRules }).(ProviderConversionRuleArrayOutput)
}

func (o ProviderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) LoginLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.LoginLink }).(pulumi.StringOutput)
}

func (o ProviderOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ProviderOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o ProviderOutput) SsoType() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.SsoType }).(pulumi.StringOutput)
}

func (o ProviderOutput) Status() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.BoolPtrOutput { return v.Status }).(pulumi.BoolPtrOutput)
}

type ProviderArrayOutput struct{ *pulumi.OutputState }

func (ProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Provider)(nil)).Elem()
}

func (o ProviderArrayOutput) ToProviderArrayOutput() ProviderArrayOutput {
	return o
}

func (o ProviderArrayOutput) ToProviderArrayOutputWithContext(ctx context.Context) ProviderArrayOutput {
	return o
}

func (o ProviderArrayOutput) Index(i pulumi.IntInput) ProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Provider {
		return vs[0].([]*Provider)[vs[1].(int)]
	}).(ProviderOutput)
}

type ProviderMapOutput struct{ *pulumi.OutputState }

func (ProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Provider)(nil)).Elem()
}

func (o ProviderMapOutput) ToProviderMapOutput() ProviderMapOutput {
	return o
}

func (o ProviderMapOutput) ToProviderMapOutputWithContext(ctx context.Context) ProviderMapOutput {
	return o
}

func (o ProviderMapOutput) MapIndex(k pulumi.StringInput) ProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Provider {
		return vs[0].(map[string]*Provider)[vs[1].(string)]
	}).(ProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderArrayInput)(nil)).Elem(), ProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderMapInput)(nil)).Elem(), ProviderMap{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderArrayOutput{})
	pulumi.RegisterOutputType(ProviderMapOutput{})
}

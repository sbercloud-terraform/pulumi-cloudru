# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DmsRocketmqMigrationTaskArgs', 'DmsRocketmqMigrationTask']

@pulumi.input_type
class DmsRocketmqMigrationTaskArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 overwrite: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskBindingArgs']]]] = None,
                 exchanges: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskExchangeArgs']]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskQueueArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskSubscriptionGroupArgs']]]] = None,
                 topic_configs: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskTopicConfigArgs']]]] = None,
                 vhosts: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskVhostArgs']]]] = None):
        """
        The set of arguments for constructing a DmsRocketmqMigrationTask resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RocketMQ instance.
        :param pulumi.Input[_builtins.str] overwrite: Specifies whether to overwrite configurations with the same name.
        :param pulumi.Input[_builtins.str] type: Specifies the migration task type.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskBindingArgs']]] bindings: Specifies the binding metadata.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskExchangeArgs']]] exchanges: Specifies the exchange metadata.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the migration task.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskQueueArgs']]] queues: Specifies the queue metadata.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskSubscriptionGroupArgs']]] subscription_groups: Specifies the consumer group metadata.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskTopicConfigArgs']]] topic_configs: Specifies the topic metadata.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskVhostArgs']]] vhosts: Specifies the virtual hosts metadata.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "overwrite", overwrite)
        pulumi.set(__self__, "type", type)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if exchanges is not None:
            pulumi.set(__self__, "exchanges", exchanges)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if queues is not None:
            pulumi.set(__self__, "queues", queues)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if subscription_groups is not None:
            pulumi.set(__self__, "subscription_groups", subscription_groups)
        if topic_configs is not None:
            pulumi.set(__self__, "topic_configs", topic_configs)
        if vhosts is not None:
            pulumi.set(__self__, "vhosts", vhosts)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the RocketMQ instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def overwrite(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies whether to overwrite configurations with the same name.
        """
        return pulumi.get(self, "overwrite")

    @overwrite.setter
    def overwrite(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "overwrite", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the migration task type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskBindingArgs']]]]:
        """
        Specifies the binding metadata.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskBindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @_builtins.property
    @pulumi.getter
    def exchanges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskExchangeArgs']]]]:
        """
        Specifies the exchange metadata.
        """
        return pulumi.get(self, "exchanges")

    @exchanges.setter
    def exchanges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskExchangeArgs']]]]):
        pulumi.set(self, "exchanges", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the migration task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskQueueArgs']]]]:
        """
        Specifies the queue metadata.
        """
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskQueueArgs']]]]):
        pulumi.set(self, "queues", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionGroups")
    def subscription_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskSubscriptionGroupArgs']]]]:
        """
        Specifies the consumer group metadata.
        """
        return pulumi.get(self, "subscription_groups")

    @subscription_groups.setter
    def subscription_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskSubscriptionGroupArgs']]]]):
        pulumi.set(self, "subscription_groups", value)

    @_builtins.property
    @pulumi.getter(name="topicConfigs")
    def topic_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskTopicConfigArgs']]]]:
        """
        Specifies the topic metadata.
        """
        return pulumi.get(self, "topic_configs")

    @topic_configs.setter
    def topic_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskTopicConfigArgs']]]]):
        pulumi.set(self, "topic_configs", value)

    @_builtins.property
    @pulumi.getter
    def vhosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskVhostArgs']]]]:
        """
        Specifies the virtual hosts metadata.
        """
        return pulumi.get(self, "vhosts")

    @vhosts.setter
    def vhosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskVhostArgs']]]]):
        pulumi.set(self, "vhosts", value)


@pulumi.input_type
class _DmsRocketmqMigrationTaskState:
    def __init__(__self__, *,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskBindingArgs']]]] = None,
                 exchanges: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskExchangeArgs']]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 overwrite: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskQueueArgs']]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 start_date: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskSubscriptionGroupArgs']]]] = None,
                 topic_configs: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskTopicConfigArgs']]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vhosts: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskVhostArgs']]]] = None):
        """
        Input properties used for looking up and filtering DmsRocketmqMigrationTask resources.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskBindingArgs']]] bindings: Specifies the binding metadata.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskExchangeArgs']]] exchanges: Specifies the exchange metadata.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RocketMQ instance.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the migration task.
        :param pulumi.Input[_builtins.str] overwrite: Specifies whether to overwrite configurations with the same name.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskQueueArgs']]] queues: Specifies the queue metadata.
        :param pulumi.Input[_builtins.str] start_date: Indicates the start time of the migration task.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the migration task.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskSubscriptionGroupArgs']]] subscription_groups: Specifies the consumer group metadata.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskTopicConfigArgs']]] topic_configs: Specifies the topic metadata.
        :param pulumi.Input[_builtins.str] type: Specifies the migration task type.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskVhostArgs']]] vhosts: Specifies the virtual hosts metadata.
        """
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if exchanges is not None:
            pulumi.set(__self__, "exchanges", exchanges)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if overwrite is not None:
            pulumi.set(__self__, "overwrite", overwrite)
        if queues is not None:
            pulumi.set(__self__, "queues", queues)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscription_groups is not None:
            pulumi.set(__self__, "subscription_groups", subscription_groups)
        if topic_configs is not None:
            pulumi.set(__self__, "topic_configs", topic_configs)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vhosts is not None:
            pulumi.set(__self__, "vhosts", vhosts)

    @_builtins.property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskBindingArgs']]]]:
        """
        Specifies the binding metadata.
        """
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskBindingArgs']]]]):
        pulumi.set(self, "bindings", value)

    @_builtins.property
    @pulumi.getter
    def exchanges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskExchangeArgs']]]]:
        """
        Specifies the exchange metadata.
        """
        return pulumi.get(self, "exchanges")

    @exchanges.setter
    def exchanges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskExchangeArgs']]]]):
        pulumi.set(self, "exchanges", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of the RocketMQ instance.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the name of the migration task.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def overwrite(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies whether to overwrite configurations with the same name.
        """
        return pulumi.get(self, "overwrite")

    @overwrite.setter
    def overwrite(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "overwrite", value)

    @_builtins.property
    @pulumi.getter
    def queues(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskQueueArgs']]]]:
        """
        Specifies the queue metadata.
        """
        return pulumi.get(self, "queues")

    @queues.setter
    def queues(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskQueueArgs']]]]):
        pulumi.set(self, "queues", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the start time of the migration task.
        """
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "start_date", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the status of the migration task.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="subscriptionGroups")
    def subscription_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskSubscriptionGroupArgs']]]]:
        """
        Specifies the consumer group metadata.
        """
        return pulumi.get(self, "subscription_groups")

    @subscription_groups.setter
    def subscription_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskSubscriptionGroupArgs']]]]):
        pulumi.set(self, "subscription_groups", value)

    @_builtins.property
    @pulumi.getter(name="topicConfigs")
    def topic_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskTopicConfigArgs']]]]:
        """
        Specifies the topic metadata.
        """
        return pulumi.get(self, "topic_configs")

    @topic_configs.setter
    def topic_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskTopicConfigArgs']]]]):
        pulumi.set(self, "topic_configs", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the migration task type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def vhosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskVhostArgs']]]]:
        """
        Specifies the virtual hosts metadata.
        """
        return pulumi.get(self, "vhosts")

    @vhosts.setter
    def vhosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqMigrationTaskVhostArgs']]]]):
        pulumi.set(self, "vhosts", value)


@pulumi.type_token("sbercloud:index/dmsRocketmqMigrationTask:DmsRocketmqMigrationTask")
class DmsRocketmqMigrationTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskBindingArgs', 'DmsRocketmqMigrationTaskBindingArgsDict']]]]] = None,
                 exchanges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskExchangeArgs', 'DmsRocketmqMigrationTaskExchangeArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 overwrite: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskQueueArgs', 'DmsRocketmqMigrationTaskQueueArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskSubscriptionGroupArgs', 'DmsRocketmqMigrationTaskSubscriptionGroupArgsDict']]]]] = None,
                 topic_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskTopicConfigArgs', 'DmsRocketmqMigrationTaskTopicConfigArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vhosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskVhostArgs', 'DmsRocketmqMigrationTaskVhostArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a DmsRocketmqMigrationTask resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskBindingArgs', 'DmsRocketmqMigrationTaskBindingArgsDict']]]] bindings: Specifies the binding metadata.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskExchangeArgs', 'DmsRocketmqMigrationTaskExchangeArgsDict']]]] exchanges: Specifies the exchange metadata.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RocketMQ instance.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the migration task.
        :param pulumi.Input[_builtins.str] overwrite: Specifies whether to overwrite configurations with the same name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskQueueArgs', 'DmsRocketmqMigrationTaskQueueArgsDict']]]] queues: Specifies the queue metadata.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskSubscriptionGroupArgs', 'DmsRocketmqMigrationTaskSubscriptionGroupArgsDict']]]] subscription_groups: Specifies the consumer group metadata.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskTopicConfigArgs', 'DmsRocketmqMigrationTaskTopicConfigArgsDict']]]] topic_configs: Specifies the topic metadata.
        :param pulumi.Input[_builtins.str] type: Specifies the migration task type.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskVhostArgs', 'DmsRocketmqMigrationTaskVhostArgsDict']]]] vhosts: Specifies the virtual hosts metadata.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DmsRocketmqMigrationTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DmsRocketmqMigrationTask resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DmsRocketmqMigrationTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DmsRocketmqMigrationTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskBindingArgs', 'DmsRocketmqMigrationTaskBindingArgsDict']]]]] = None,
                 exchanges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskExchangeArgs', 'DmsRocketmqMigrationTaskExchangeArgsDict']]]]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 overwrite: Optional[pulumi.Input[_builtins.str]] = None,
                 queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskQueueArgs', 'DmsRocketmqMigrationTaskQueueArgsDict']]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 subscription_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskSubscriptionGroupArgs', 'DmsRocketmqMigrationTaskSubscriptionGroupArgsDict']]]]] = None,
                 topic_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskTopicConfigArgs', 'DmsRocketmqMigrationTaskTopicConfigArgsDict']]]]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 vhosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskVhostArgs', 'DmsRocketmqMigrationTaskVhostArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DmsRocketmqMigrationTaskArgs.__new__(DmsRocketmqMigrationTaskArgs)

            __props__.__dict__["bindings"] = bindings
            __props__.__dict__["exchanges"] = exchanges
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["name"] = name
            if overwrite is None and not opts.urn:
                raise TypeError("Missing required property 'overwrite'")
            __props__.__dict__["overwrite"] = overwrite
            __props__.__dict__["queues"] = queues
            __props__.__dict__["region"] = region
            __props__.__dict__["subscription_groups"] = subscription_groups
            __props__.__dict__["topic_configs"] = topic_configs
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["vhosts"] = vhosts
            __props__.__dict__["start_date"] = None
            __props__.__dict__["status"] = None
        super(DmsRocketmqMigrationTask, __self__).__init__(
            'sbercloud:index/dmsRocketmqMigrationTask:DmsRocketmqMigrationTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bindings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskBindingArgs', 'DmsRocketmqMigrationTaskBindingArgsDict']]]]] = None,
            exchanges: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskExchangeArgs', 'DmsRocketmqMigrationTaskExchangeArgsDict']]]]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            overwrite: Optional[pulumi.Input[_builtins.str]] = None,
            queues: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskQueueArgs', 'DmsRocketmqMigrationTaskQueueArgsDict']]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            start_date: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            subscription_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskSubscriptionGroupArgs', 'DmsRocketmqMigrationTaskSubscriptionGroupArgsDict']]]]] = None,
            topic_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskTopicConfigArgs', 'DmsRocketmqMigrationTaskTopicConfigArgsDict']]]]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None,
            vhosts: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskVhostArgs', 'DmsRocketmqMigrationTaskVhostArgsDict']]]]] = None) -> 'DmsRocketmqMigrationTask':
        """
        Get an existing DmsRocketmqMigrationTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskBindingArgs', 'DmsRocketmqMigrationTaskBindingArgsDict']]]] bindings: Specifies the binding metadata.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskExchangeArgs', 'DmsRocketmqMigrationTaskExchangeArgsDict']]]] exchanges: Specifies the exchange metadata.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the ID of the RocketMQ instance.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the migration task.
        :param pulumi.Input[_builtins.str] overwrite: Specifies whether to overwrite configurations with the same name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskQueueArgs', 'DmsRocketmqMigrationTaskQueueArgsDict']]]] queues: Specifies the queue metadata.
        :param pulumi.Input[_builtins.str] start_date: Indicates the start time of the migration task.
        :param pulumi.Input[_builtins.str] status: Indicates the status of the migration task.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskSubscriptionGroupArgs', 'DmsRocketmqMigrationTaskSubscriptionGroupArgsDict']]]] subscription_groups: Specifies the consumer group metadata.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskTopicConfigArgs', 'DmsRocketmqMigrationTaskTopicConfigArgsDict']]]] topic_configs: Specifies the topic metadata.
        :param pulumi.Input[_builtins.str] type: Specifies the migration task type.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqMigrationTaskVhostArgs', 'DmsRocketmqMigrationTaskVhostArgsDict']]]] vhosts: Specifies the virtual hosts metadata.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DmsRocketmqMigrationTaskState.__new__(_DmsRocketmqMigrationTaskState)

        __props__.__dict__["bindings"] = bindings
        __props__.__dict__["exchanges"] = exchanges
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["name"] = name
        __props__.__dict__["overwrite"] = overwrite
        __props__.__dict__["queues"] = queues
        __props__.__dict__["region"] = region
        __props__.__dict__["start_date"] = start_date
        __props__.__dict__["status"] = status
        __props__.__dict__["subscription_groups"] = subscription_groups
        __props__.__dict__["topic_configs"] = topic_configs
        __props__.__dict__["type"] = type
        __props__.__dict__["vhosts"] = vhosts
        return DmsRocketmqMigrationTask(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def bindings(self) -> pulumi.Output[Sequence['outputs.DmsRocketmqMigrationTaskBinding']]:
        """
        Specifies the binding metadata.
        """
        return pulumi.get(self, "bindings")

    @_builtins.property
    @pulumi.getter
    def exchanges(self) -> pulumi.Output[Sequence['outputs.DmsRocketmqMigrationTaskExchange']]:
        """
        Specifies the exchange metadata.
        """
        return pulumi.get(self, "exchanges")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the ID of the RocketMQ instance.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the name of the migration task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def overwrite(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies whether to overwrite configurations with the same name.
        """
        return pulumi.get(self, "overwrite")

    @_builtins.property
    @pulumi.getter
    def queues(self) -> pulumi.Output[Sequence['outputs.DmsRocketmqMigrationTaskQueue']]:
        """
        Specifies the queue metadata.
        """
        return pulumi.get(self, "queues")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the start time of the migration task.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        """
        Indicates the status of the migration task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subscriptionGroups")
    def subscription_groups(self) -> pulumi.Output[Sequence['outputs.DmsRocketmqMigrationTaskSubscriptionGroup']]:
        """
        Specifies the consumer group metadata.
        """
        return pulumi.get(self, "subscription_groups")

    @_builtins.property
    @pulumi.getter(name="topicConfigs")
    def topic_configs(self) -> pulumi.Output[Sequence['outputs.DmsRocketmqMigrationTaskTopicConfig']]:
        """
        Specifies the topic metadata.
        """
        return pulumi.get(self, "topic_configs")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the migration task type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vhosts(self) -> pulumi.Output[Sequence['outputs.DmsRocketmqMigrationTaskVhost']]:
        """
        Specifies the virtual hosts metadata.
        """
        return pulumi.get(self, "vhosts")


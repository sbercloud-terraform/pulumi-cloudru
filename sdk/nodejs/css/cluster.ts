// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Css/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * schema: Required
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public /*out*/ readonly backupAvailable: pulumi.Output<boolean>;
    declare public readonly backupStrategy: pulumi.Output<outputs.Css.ClusterBackupStrategy | undefined>;
    declare public /*out*/ readonly bandwidthResourceId: pulumi.Output<string>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public readonly clientNodeConfig: pulumi.Output<outputs.Css.ClusterClientNodeConfig | undefined>;
    declare public readonly coldNodeConfig: pulumi.Output<outputs.Css.ClusterColdNodeConfig | undefined>;
    /**
     * schema: Deprecated; use createdAt instead
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public /*out*/ readonly diskEncrypted: pulumi.Output<boolean>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly endpoint: pulumi.Output<string>;
    declare public readonly engineType: pulumi.Output<string | undefined>;
    declare public readonly engineVersion: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * schema: Required
     */
    declare public readonly essNodeConfig: pulumi.Output<outputs.Css.ClusterEssNodeConfig>;
    /**
     * @deprecated please use ess_node_config.instance_number instead
     */
    declare public readonly expectNodeNum: pulumi.Output<number>;
    declare public readonly httpsEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly isPeriod: pulumi.Output<boolean>;
    declare public readonly kibanaPublicAccess: pulumi.Output<outputs.Css.ClusterKibanaPublicAccess | undefined>;
    declare public readonly masterNodeConfig: pulumi.Output<outputs.Css.ClusterMasterNodeConfig | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * @deprecated please use essNodeConfig instead
     */
    declare public readonly nodeConfig: pulumi.Output<outputs.Css.ClusterNodeConfig>;
    declare public /*out*/ readonly nodes: pulumi.Output<outputs.Css.ClusterNode[]>;
    declare public readonly password: pulumi.Output<string | undefined>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly publicAccess: pulumi.Output<outputs.Css.ClusterPublicAccess | undefined>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * schema: Required
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    declare public readonly securityMode: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * schema: Required
     */
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * schema: Required
     */
    declare public readonly vpcId: pulumi.Output<string>;
    declare public readonly vpcepEndpoint: pulumi.Output<outputs.Css.ClusterVpcepEndpoint | undefined>;
    declare public /*out*/ readonly vpcepEndpointId: pulumi.Output<string>;
    declare public /*out*/ readonly vpcepIp: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["backupAvailable"] = state?.backupAvailable;
            resourceInputs["backupStrategy"] = state?.backupStrategy;
            resourceInputs["bandwidthResourceId"] = state?.bandwidthResourceId;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["clientNodeConfig"] = state?.clientNodeConfig;
            resourceInputs["coldNodeConfig"] = state?.coldNodeConfig;
            resourceInputs["created"] = state?.created;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["diskEncrypted"] = state?.diskEncrypted;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["engineType"] = state?.engineType;
            resourceInputs["engineVersion"] = state?.engineVersion;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["essNodeConfig"] = state?.essNodeConfig;
            resourceInputs["expectNodeNum"] = state?.expectNodeNum;
            resourceInputs["httpsEnabled"] = state?.httpsEnabled;
            resourceInputs["isPeriod"] = state?.isPeriod;
            resourceInputs["kibanaPublicAccess"] = state?.kibanaPublicAccess;
            resourceInputs["masterNodeConfig"] = state?.masterNodeConfig;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeConfig"] = state?.nodeConfig;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["password"] = state?.password;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["publicAccess"] = state?.publicAccess;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["securityMode"] = state?.securityMode;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["vpcepEndpoint"] = state?.vpcepEndpoint;
            resourceInputs["vpcepEndpointId"] = state?.vpcepEndpointId;
            resourceInputs["vpcepIp"] = state?.vpcepIp;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.engineVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["backupStrategy"] = args?.backupStrategy;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["clientNodeConfig"] = args?.clientNodeConfig;
            resourceInputs["coldNodeConfig"] = args?.coldNodeConfig;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["engineType"] = args?.engineType;
            resourceInputs["engineVersion"] = args?.engineVersion;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["essNodeConfig"] = args?.essNodeConfig;
            resourceInputs["expectNodeNum"] = args?.expectNodeNum;
            resourceInputs["httpsEnabled"] = args?.httpsEnabled;
            resourceInputs["kibanaPublicAccess"] = args?.kibanaPublicAccess;
            resourceInputs["masterNodeConfig"] = args?.masterNodeConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeConfig"] = args?.nodeConfig;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["publicAccess"] = args?.publicAccess;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["securityMode"] = args?.securityMode;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["vpcepEndpoint"] = args?.vpcepEndpoint;
            resourceInputs["backupAvailable"] = undefined /*out*/;
            resourceInputs["bandwidthResourceId"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["diskEncrypted"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["isPeriod"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["vpcepEndpointId"] = undefined /*out*/;
            resourceInputs["vpcepIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    autoRenew?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    availabilityZone?: pulumi.Input<string>;
    backupAvailable?: pulumi.Input<boolean>;
    backupStrategy?: pulumi.Input<inputs.Css.ClusterBackupStrategy>;
    bandwidthResourceId?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    clientNodeConfig?: pulumi.Input<inputs.Css.ClusterClientNodeConfig>;
    coldNodeConfig?: pulumi.Input<inputs.Css.ClusterColdNodeConfig>;
    /**
     * schema: Deprecated; use createdAt instead
     */
    created?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    diskEncrypted?: pulumi.Input<boolean>;
    enableForceNew?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    engineType?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    essNodeConfig?: pulumi.Input<inputs.Css.ClusterEssNodeConfig>;
    /**
     * @deprecated please use ess_node_config.instance_number instead
     */
    expectNodeNum?: pulumi.Input<number>;
    httpsEnabled?: pulumi.Input<boolean>;
    isPeriod?: pulumi.Input<boolean>;
    kibanaPublicAccess?: pulumi.Input<inputs.Css.ClusterKibanaPublicAccess>;
    masterNodeConfig?: pulumi.Input<inputs.Css.ClusterMasterNodeConfig>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated please use essNodeConfig instead
     */
    nodeConfig?: pulumi.Input<inputs.Css.ClusterNodeConfig>;
    nodes?: pulumi.Input<pulumi.Input<inputs.Css.ClusterNode>[]>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    publicAccess?: pulumi.Input<inputs.Css.ClusterPublicAccess>;
    region?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    securityGroupId?: pulumi.Input<string>;
    securityMode?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatedAt?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    vpcId?: pulumi.Input<string>;
    vpcepEndpoint?: pulumi.Input<inputs.Css.ClusterVpcepEndpoint>;
    vpcepEndpointId?: pulumi.Input<string>;
    vpcepIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    autoRenew?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    availabilityZone?: pulumi.Input<string>;
    backupStrategy?: pulumi.Input<inputs.Css.ClusterBackupStrategy>;
    chargingMode?: pulumi.Input<string>;
    clientNodeConfig?: pulumi.Input<inputs.Css.ClusterClientNodeConfig>;
    coldNodeConfig?: pulumi.Input<inputs.Css.ClusterColdNodeConfig>;
    enableForceNew?: pulumi.Input<string>;
    engineType?: pulumi.Input<string>;
    engineVersion: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    essNodeConfig?: pulumi.Input<inputs.Css.ClusterEssNodeConfig>;
    /**
     * @deprecated please use ess_node_config.instance_number instead
     */
    expectNodeNum?: pulumi.Input<number>;
    httpsEnabled?: pulumi.Input<boolean>;
    kibanaPublicAccess?: pulumi.Input<inputs.Css.ClusterKibanaPublicAccess>;
    masterNodeConfig?: pulumi.Input<inputs.Css.ClusterMasterNodeConfig>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated please use essNodeConfig instead
     */
    nodeConfig?: pulumi.Input<inputs.Css.ClusterNodeConfig>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    publicAccess?: pulumi.Input<inputs.Css.ClusterPublicAccess>;
    region?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    securityGroupId?: pulumi.Input<string>;
    securityMode?: pulumi.Input<boolean>;
    /**
     * schema: Required
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * schema: Required
     */
    vpcId?: pulumi.Input<string>;
    vpcepEndpoint?: pulumi.Input<inputs.Css.ClusterVpcepEndpoint>;
}

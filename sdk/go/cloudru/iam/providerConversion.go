// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ProviderConversion struct {
	pulumi.CustomResourceState

	ConversionRules ProviderConversionConversionRuleArrayOutput `pulumi:"conversionRules"`
	ProviderId      pulumi.StringOutput                         `pulumi:"providerId"`
}

// NewProviderConversion registers a new resource with the given unique name, arguments, and options.
func NewProviderConversion(ctx *pulumi.Context,
	name string, args *ProviderConversionArgs, opts ...pulumi.ResourceOption) (*ProviderConversion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConversionRules == nil {
		return nil, errors.New("invalid value for required argument 'ConversionRules'")
	}
	if args.ProviderId == nil {
		return nil, errors.New("invalid value for required argument 'ProviderId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProviderConversion
	err := ctx.RegisterResource("cloudru:Iam/providerConversion:ProviderConversion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProviderConversion gets an existing ProviderConversion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProviderConversion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderConversionState, opts ...pulumi.ResourceOption) (*ProviderConversion, error) {
	var resource ProviderConversion
	err := ctx.ReadResource("cloudru:Iam/providerConversion:ProviderConversion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProviderConversion resources.
type providerConversionState struct {
	ConversionRules []ProviderConversionConversionRule `pulumi:"conversionRules"`
	ProviderId      *string                            `pulumi:"providerId"`
}

type ProviderConversionState struct {
	ConversionRules ProviderConversionConversionRuleArrayInput
	ProviderId      pulumi.StringPtrInput
}

func (ProviderConversionState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerConversionState)(nil)).Elem()
}

type providerConversionArgs struct {
	ConversionRules []ProviderConversionConversionRule `pulumi:"conversionRules"`
	ProviderId      string                             `pulumi:"providerId"`
}

// The set of arguments for constructing a ProviderConversion resource.
type ProviderConversionArgs struct {
	ConversionRules ProviderConversionConversionRuleArrayInput
	ProviderId      pulumi.StringInput
}

func (ProviderConversionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerConversionArgs)(nil)).Elem()
}

type ProviderConversionInput interface {
	pulumi.Input

	ToProviderConversionOutput() ProviderConversionOutput
	ToProviderConversionOutputWithContext(ctx context.Context) ProviderConversionOutput
}

func (*ProviderConversion) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderConversion)(nil)).Elem()
}

func (i *ProviderConversion) ToProviderConversionOutput() ProviderConversionOutput {
	return i.ToProviderConversionOutputWithContext(context.Background())
}

func (i *ProviderConversion) ToProviderConversionOutputWithContext(ctx context.Context) ProviderConversionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionOutput)
}

// ProviderConversionArrayInput is an input type that accepts ProviderConversionArray and ProviderConversionArrayOutput values.
// You can construct a concrete instance of `ProviderConversionArrayInput` via:
//
//	ProviderConversionArray{ ProviderConversionArgs{...} }
type ProviderConversionArrayInput interface {
	pulumi.Input

	ToProviderConversionArrayOutput() ProviderConversionArrayOutput
	ToProviderConversionArrayOutputWithContext(context.Context) ProviderConversionArrayOutput
}

type ProviderConversionArray []ProviderConversionInput

func (ProviderConversionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderConversion)(nil)).Elem()
}

func (i ProviderConversionArray) ToProviderConversionArrayOutput() ProviderConversionArrayOutput {
	return i.ToProviderConversionArrayOutputWithContext(context.Background())
}

func (i ProviderConversionArray) ToProviderConversionArrayOutputWithContext(ctx context.Context) ProviderConversionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionArrayOutput)
}

// ProviderConversionMapInput is an input type that accepts ProviderConversionMap and ProviderConversionMapOutput values.
// You can construct a concrete instance of `ProviderConversionMapInput` via:
//
//	ProviderConversionMap{ "key": ProviderConversionArgs{...} }
type ProviderConversionMapInput interface {
	pulumi.Input

	ToProviderConversionMapOutput() ProviderConversionMapOutput
	ToProviderConversionMapOutputWithContext(context.Context) ProviderConversionMapOutput
}

type ProviderConversionMap map[string]ProviderConversionInput

func (ProviderConversionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderConversion)(nil)).Elem()
}

func (i ProviderConversionMap) ToProviderConversionMapOutput() ProviderConversionMapOutput {
	return i.ToProviderConversionMapOutputWithContext(context.Background())
}

func (i ProviderConversionMap) ToProviderConversionMapOutputWithContext(ctx context.Context) ProviderConversionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionMapOutput)
}

type ProviderConversionOutput struct{ *pulumi.OutputState }

func (ProviderConversionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderConversion)(nil)).Elem()
}

func (o ProviderConversionOutput) ToProviderConversionOutput() ProviderConversionOutput {
	return o
}

func (o ProviderConversionOutput) ToProviderConversionOutputWithContext(ctx context.Context) ProviderConversionOutput {
	return o
}

func (o ProviderConversionOutput) ConversionRules() ProviderConversionConversionRuleArrayOutput {
	return o.ApplyT(func(v *ProviderConversion) ProviderConversionConversionRuleArrayOutput { return v.ConversionRules }).(ProviderConversionConversionRuleArrayOutput)
}

func (o ProviderConversionOutput) ProviderId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProviderConversion) pulumi.StringOutput { return v.ProviderId }).(pulumi.StringOutput)
}

type ProviderConversionArrayOutput struct{ *pulumi.OutputState }

func (ProviderConversionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProviderConversion)(nil)).Elem()
}

func (o ProviderConversionArrayOutput) ToProviderConversionArrayOutput() ProviderConversionArrayOutput {
	return o
}

func (o ProviderConversionArrayOutput) ToProviderConversionArrayOutputWithContext(ctx context.Context) ProviderConversionArrayOutput {
	return o
}

func (o ProviderConversionArrayOutput) Index(i pulumi.IntInput) ProviderConversionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProviderConversion {
		return vs[0].([]*ProviderConversion)[vs[1].(int)]
	}).(ProviderConversionOutput)
}

type ProviderConversionMapOutput struct{ *pulumi.OutputState }

func (ProviderConversionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProviderConversion)(nil)).Elem()
}

func (o ProviderConversionMapOutput) ToProviderConversionMapOutput() ProviderConversionMapOutput {
	return o
}

func (o ProviderConversionMapOutput) ToProviderConversionMapOutputWithContext(ctx context.Context) ProviderConversionMapOutput {
	return o
}

func (o ProviderConversionMapOutput) MapIndex(k pulumi.StringInput) ProviderConversionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProviderConversion {
		return vs[0].(map[string]*ProviderConversion)[vs[1].(string)]
	}).(ProviderConversionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionInput)(nil)).Elem(), &ProviderConversion{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionArrayInput)(nil)).Elem(), ProviderConversionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionMapInput)(nil)).Elem(), ProviderConversionMap{})
	pulumi.RegisterOutputType(ProviderConversionOutput{})
	pulumi.RegisterOutputType(ProviderConversionArrayOutput{})
	pulumi.RegisterOutputType(ProviderConversionMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetFlavorsArgs, GetFlavorsResult, GetFlavorsOutputArgs } from "./getFlavors";
export const getFlavors: typeof import("./getFlavors").getFlavors = null as any;
export const getFlavorsOutput: typeof import("./getFlavors").getFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getFlavors","getFlavorsOutput"], () => require("./getFlavors"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetMaintainwindowArgs, GetMaintainwindowResult, GetMaintainwindowOutputArgs } from "./getMaintainwindow";
export const getMaintainwindow: typeof import("./getMaintainwindow").getMaintainwindow = null as any;
export const getMaintainwindowOutput: typeof import("./getMaintainwindow").getMaintainwindowOutput = null as any;
utilities.lazyLoad(exports, ["getMaintainwindow","getMaintainwindowOutput"], () => require("./getMaintainwindow"));

export { GetProductArgs, GetProductResult, GetProductOutputArgs } from "./getProduct";
export const getProduct: typeof import("./getProduct").getProduct = null as any;
export const getProductOutput: typeof import("./getProduct").getProductOutput = null as any;
utilities.lazyLoad(exports, ["getProduct","getProductOutput"], () => require("./getProduct"));

export { KafkaInstanceArgs, KafkaInstanceState } from "./kafkaInstance";
export type KafkaInstance = import("./kafkaInstance").KafkaInstance;
export const KafkaInstance: typeof import("./kafkaInstance").KafkaInstance = null as any;
utilities.lazyLoad(exports, ["KafkaInstance"], () => require("./kafkaInstance"));

export { KafkaPermissionsArgs, KafkaPermissionsState } from "./kafkaPermissions";
export type KafkaPermissions = import("./kafkaPermissions").KafkaPermissions;
export const KafkaPermissions: typeof import("./kafkaPermissions").KafkaPermissions = null as any;
utilities.lazyLoad(exports, ["KafkaPermissions"], () => require("./kafkaPermissions"));

export { KafkaTopicArgs, KafkaTopicState } from "./kafkaTopic";
export type KafkaTopic = import("./kafkaTopic").KafkaTopic;
export const KafkaTopic: typeof import("./kafkaTopic").KafkaTopic = null as any;
utilities.lazyLoad(exports, ["KafkaTopic"], () => require("./kafkaTopic"));

export { KafkaUserArgs, KafkaUserState } from "./kafkaUser";
export type KafkaUser = import("./kafkaUser").KafkaUser;
export const KafkaUser: typeof import("./kafkaUser").KafkaUser = null as any;
utilities.lazyLoad(exports, ["KafkaUser"], () => require("./kafkaUser"));

export { RabbitmqInstanceArgs, RabbitmqInstanceState } from "./rabbitmqInstance";
export type RabbitmqInstance = import("./rabbitmqInstance").RabbitmqInstance;
export const RabbitmqInstance: typeof import("./rabbitmqInstance").RabbitmqInstance = null as any;
utilities.lazyLoad(exports, ["RabbitmqInstance"], () => require("./rabbitmqInstance"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sbercloud:Dms/kafkaInstance:KafkaInstance":
                return new KafkaInstance(name, <any>undefined, { urn })
            case "sbercloud:Dms/kafkaPermissions:KafkaPermissions":
                return new KafkaPermissions(name, <any>undefined, { urn })
            case "sbercloud:Dms/kafkaTopic:KafkaTopic":
                return new KafkaTopic(name, <any>undefined, { urn })
            case "sbercloud:Dms/kafkaUser:KafkaUser":
                return new KafkaUser(name, <any>undefined, { urn })
            case "sbercloud:Dms/rabbitmqInstance:RabbitmqInstance":
                return new RabbitmqInstance(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sbercloud", "Dms/kafkaInstance", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Dms/kafkaPermissions", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Dms/kafkaTopic", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Dms/kafkaUser", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Dms/rabbitmqInstance", _module)

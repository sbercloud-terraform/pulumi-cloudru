// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyState, opts?: pulumi.CustomResourceOptions): Key {
        return new Key(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Dew/key:Key';

    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Key {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }

    declare public /*out*/ readonly creationDate: pulumi.Output<string>;
    declare public /*out*/ readonly defaultKeyFlag: pulumi.Output<string>;
    declare public /*out*/ readonly domainId: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly expirationTime: pulumi.Output<string>;
    declare public readonly isEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly keyAlgorithm: pulumi.Output<string>;
    declare public readonly keyAlias: pulumi.Output<string>;
    declare public readonly keyDescription: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly keyId: pulumi.Output<string>;
    declare public /*out*/ readonly keyState: pulumi.Output<string>;
    declare public readonly keyUsage: pulumi.Output<string>;
    declare public readonly keystoreId: pulumi.Output<string>;
    declare public readonly origin: pulumi.Output<string>;
    declare public readonly pendingDays: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly rotationEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly rotationInterval: pulumi.Output<number>;
    declare public /*out*/ readonly rotationNumber: pulumi.Output<number>;
    declare public /*out*/ readonly scheduledDeletionDate: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyArgs | KeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyState | undefined;
            resourceInputs["creationDate"] = state?.creationDate;
            resourceInputs["defaultKeyFlag"] = state?.defaultKeyFlag;
            resourceInputs["domainId"] = state?.domainId;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["expirationTime"] = state?.expirationTime;
            resourceInputs["isEnabled"] = state?.isEnabled;
            resourceInputs["keyAlgorithm"] = state?.keyAlgorithm;
            resourceInputs["keyAlias"] = state?.keyAlias;
            resourceInputs["keyDescription"] = state?.keyDescription;
            resourceInputs["keyId"] = state?.keyId;
            resourceInputs["keyState"] = state?.keyState;
            resourceInputs["keyUsage"] = state?.keyUsage;
            resourceInputs["keystoreId"] = state?.keystoreId;
            resourceInputs["origin"] = state?.origin;
            resourceInputs["pendingDays"] = state?.pendingDays;
            resourceInputs["region"] = state?.region;
            resourceInputs["rotationEnabled"] = state?.rotationEnabled;
            resourceInputs["rotationInterval"] = state?.rotationInterval;
            resourceInputs["rotationNumber"] = state?.rotationNumber;
            resourceInputs["scheduledDeletionDate"] = state?.scheduledDeletionDate;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as KeyArgs | undefined;
            if (args?.keyAlias === undefined && !opts.urn) {
                throw new Error("Missing required property 'keyAlias'");
            }
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["isEnabled"] = args?.isEnabled;
            resourceInputs["keyAlgorithm"] = args?.keyAlgorithm;
            resourceInputs["keyAlias"] = args?.keyAlias;
            resourceInputs["keyDescription"] = args?.keyDescription;
            resourceInputs["keyUsage"] = args?.keyUsage;
            resourceInputs["keystoreId"] = args?.keystoreId;
            resourceInputs["origin"] = args?.origin;
            resourceInputs["pendingDays"] = args?.pendingDays;
            resourceInputs["region"] = args?.region;
            resourceInputs["rotationEnabled"] = args?.rotationEnabled;
            resourceInputs["rotationInterval"] = args?.rotationInterval;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["defaultKeyFlag"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["expirationTime"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["keyState"] = undefined /*out*/;
            resourceInputs["rotationNumber"] = undefined /*out*/;
            resourceInputs["scheduledDeletionDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Key.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Key resources.
 */
export interface KeyState {
    creationDate?: pulumi.Input<string>;
    defaultKeyFlag?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    expirationTime?: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    keyAlgorithm?: pulumi.Input<string>;
    keyAlias?: pulumi.Input<string>;
    keyDescription?: pulumi.Input<string>;
    keyId?: pulumi.Input<string>;
    keyState?: pulumi.Input<string>;
    keyUsage?: pulumi.Input<string>;
    keystoreId?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    pendingDays?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rotationEnabled?: pulumi.Input<boolean>;
    rotationInterval?: pulumi.Input<number>;
    rotationNumber?: pulumi.Input<number>;
    scheduledDeletionDate?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    enterpriseProjectId?: pulumi.Input<string>;
    isEnabled?: pulumi.Input<boolean>;
    keyAlgorithm?: pulumi.Input<string>;
    keyAlias: pulumi.Input<string>;
    keyDescription?: pulumi.Input<string>;
    keyUsage?: pulumi.Input<string>;
    keystoreId?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    pendingDays?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rotationEnabled?: pulumi.Input<boolean>;
    rotationInterval?: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

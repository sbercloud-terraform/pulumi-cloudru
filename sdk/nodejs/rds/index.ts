// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { GetBackupsArgs, GetBackupsResult, GetBackupsOutputArgs } from "./getBackups";
export const getBackups: typeof import("./getBackups").getBackups = null as any;
export const getBackupsOutput: typeof import("./getBackups").getBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getBackups","getBackupsOutput"], () => require("./getBackups"));

export { GetEngineVersionsArgs, GetEngineVersionsResult, GetEngineVersionsOutputArgs } from "./getEngineVersions";
export const getEngineVersions: typeof import("./getEngineVersions").getEngineVersions = null as any;
export const getEngineVersionsOutput: typeof import("./getEngineVersions").getEngineVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getEngineVersions","getEngineVersionsOutput"], () => require("./getEngineVersions"));

export { GetFlavorsArgs, GetFlavorsResult, GetFlavorsOutputArgs } from "./getFlavors";
export const getFlavors: typeof import("./getFlavors").getFlavors = null as any;
export const getFlavorsOutput: typeof import("./getFlavors").getFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getFlavors","getFlavorsOutput"], () => require("./getFlavors"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetPgAccountsArgs, GetPgAccountsResult, GetPgAccountsOutputArgs } from "./getPgAccounts";
export const getPgAccounts: typeof import("./getPgAccounts").getPgAccounts = null as any;
export const getPgAccountsOutput: typeof import("./getPgAccounts").getPgAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getPgAccounts","getPgAccountsOutput"], () => require("./getPgAccounts"));

export { GetPgDatabasesArgs, GetPgDatabasesResult, GetPgDatabasesOutputArgs } from "./getPgDatabases";
export const getPgDatabases: typeof import("./getPgDatabases").getPgDatabases = null as any;
export const getPgDatabasesOutput: typeof import("./getPgDatabases").getPgDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getPgDatabases","getPgDatabasesOutput"], () => require("./getPgDatabases"));

export { GetPgPluginParameterValueRangeArgs, GetPgPluginParameterValueRangeResult, GetPgPluginParameterValueRangeOutputArgs } from "./getPgPluginParameterValueRange";
export const getPgPluginParameterValueRange: typeof import("./getPgPluginParameterValueRange").getPgPluginParameterValueRange = null as any;
export const getPgPluginParameterValueRangeOutput: typeof import("./getPgPluginParameterValueRange").getPgPluginParameterValueRangeOutput = null as any;
utilities.lazyLoad(exports, ["getPgPluginParameterValueRange","getPgPluginParameterValueRangeOutput"], () => require("./getPgPluginParameterValueRange"));

export { GetPgPluginParameterValuesArgs, GetPgPluginParameterValuesResult, GetPgPluginParameterValuesOutputArgs } from "./getPgPluginParameterValues";
export const getPgPluginParameterValues: typeof import("./getPgPluginParameterValues").getPgPluginParameterValues = null as any;
export const getPgPluginParameterValuesOutput: typeof import("./getPgPluginParameterValues").getPgPluginParameterValuesOutput = null as any;
utilities.lazyLoad(exports, ["getPgPluginParameterValues","getPgPluginParameterValuesOutput"], () => require("./getPgPluginParameterValues"));

export { GetPgPluginsArgs, GetPgPluginsResult, GetPgPluginsOutputArgs } from "./getPgPlugins";
export const getPgPlugins: typeof import("./getPgPlugins").getPgPlugins = null as any;
export const getPgPluginsOutput: typeof import("./getPgPlugins").getPgPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getPgPlugins","getPgPluginsOutput"], () => require("./getPgPlugins"));

export { GetPgRolesArgs, GetPgRolesResult, GetPgRolesOutputArgs } from "./getPgRoles";
export const getPgRoles: typeof import("./getPgRoles").getPgRoles = null as any;
export const getPgRolesOutput: typeof import("./getPgRoles").getPgRolesOutput = null as any;
utilities.lazyLoad(exports, ["getPgRoles","getPgRolesOutput"], () => require("./getPgRoles"));

export { GetPgSqlLimitsArgs, GetPgSqlLimitsResult, GetPgSqlLimitsOutputArgs } from "./getPgSqlLimits";
export const getPgSqlLimits: typeof import("./getPgSqlLimits").getPgSqlLimits = null as any;
export const getPgSqlLimitsOutput: typeof import("./getPgSqlLimits").getPgSqlLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getPgSqlLimits","getPgSqlLimitsOutput"], () => require("./getPgSqlLimits"));

export { GetStorageTypesArgs, GetStorageTypesResult, GetStorageTypesOutputArgs } from "./getStorageTypes";
export const getStorageTypes: typeof import("./getStorageTypes").getStorageTypes = null as any;
export const getStorageTypesOutput: typeof import("./getStorageTypes").getStorageTypesOutput = null as any;
utilities.lazyLoad(exports, ["getStorageTypes","getStorageTypesOutput"], () => require("./getStorageTypes"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceEipAssociateArgs, InstanceEipAssociateState } from "./instanceEipAssociate";
export type InstanceEipAssociate = import("./instanceEipAssociate").InstanceEipAssociate;
export const InstanceEipAssociate: typeof import("./instanceEipAssociate").InstanceEipAssociate = null as any;
utilities.lazyLoad(exports, ["InstanceEipAssociate"], () => require("./instanceEipAssociate"));

export { MysqlAccountArgs, MysqlAccountState } from "./mysqlAccount";
export type MysqlAccount = import("./mysqlAccount").MysqlAccount;
export const MysqlAccount: typeof import("./mysqlAccount").MysqlAccount = null as any;
utilities.lazyLoad(exports, ["MysqlAccount"], () => require("./mysqlAccount"));

export { MysqlBinlogArgs, MysqlBinlogState } from "./mysqlBinlog";
export type MysqlBinlog = import("./mysqlBinlog").MysqlBinlog;
export const MysqlBinlog: typeof import("./mysqlBinlog").MysqlBinlog = null as any;
utilities.lazyLoad(exports, ["MysqlBinlog"], () => require("./mysqlBinlog"));

export { MysqlDatabaseArgs, MysqlDatabaseState } from "./mysqlDatabase";
export type MysqlDatabase = import("./mysqlDatabase").MysqlDatabase;
export const MysqlDatabase: typeof import("./mysqlDatabase").MysqlDatabase = null as any;
utilities.lazyLoad(exports, ["MysqlDatabase"], () => require("./mysqlDatabase"));

export { MysqlDatabasePrivilegeArgs, MysqlDatabasePrivilegeState } from "./mysqlDatabasePrivilege";
export type MysqlDatabasePrivilege = import("./mysqlDatabasePrivilege").MysqlDatabasePrivilege;
export const MysqlDatabasePrivilege: typeof import("./mysqlDatabasePrivilege").MysqlDatabasePrivilege = null as any;
utilities.lazyLoad(exports, ["MysqlDatabasePrivilege"], () => require("./mysqlDatabasePrivilege"));

export { MysqlDatabaseTableRestoreArgs, MysqlDatabaseTableRestoreState } from "./mysqlDatabaseTableRestore";
export type MysqlDatabaseTableRestore = import("./mysqlDatabaseTableRestore").MysqlDatabaseTableRestore;
export const MysqlDatabaseTableRestore: typeof import("./mysqlDatabaseTableRestore").MysqlDatabaseTableRestore = null as any;
utilities.lazyLoad(exports, ["MysqlDatabaseTableRestore"], () => require("./mysqlDatabaseTableRestore"));

export { ParametergroupArgs, ParametergroupState } from "./parametergroup";
export type Parametergroup = import("./parametergroup").Parametergroup;
export const Parametergroup: typeof import("./parametergroup").Parametergroup = null as any;
utilities.lazyLoad(exports, ["Parametergroup"], () => require("./parametergroup"));

export { PgAccountArgs, PgAccountState } from "./pgAccount";
export type PgAccount = import("./pgAccount").PgAccount;
export const PgAccount: typeof import("./pgAccount").PgAccount = null as any;
utilities.lazyLoad(exports, ["PgAccount"], () => require("./pgAccount"));

export { PgAccountRolesArgs, PgAccountRolesState } from "./pgAccountRoles";
export type PgAccountRoles = import("./pgAccountRoles").PgAccountRoles;
export const PgAccountRoles: typeof import("./pgAccountRoles").PgAccountRoles = null as any;
utilities.lazyLoad(exports, ["PgAccountRoles"], () => require("./pgAccountRoles"));

export { PgDatabaseArgs, PgDatabaseState } from "./pgDatabase";
export type PgDatabase = import("./pgDatabase").PgDatabase;
export const PgDatabase: typeof import("./pgDatabase").PgDatabase = null as any;
utilities.lazyLoad(exports, ["PgDatabase"], () => require("./pgDatabase"));

export { PgHbaArgs, PgHbaState } from "./pgHba";
export type PgHba = import("./pgHba").PgHba;
export const PgHba: typeof import("./pgHba").PgHba = null as any;
utilities.lazyLoad(exports, ["PgHba"], () => require("./pgHba"));

export { PgPluginArgs, PgPluginState } from "./pgPlugin";
export type PgPlugin = import("./pgPlugin").PgPlugin;
export const PgPlugin: typeof import("./pgPlugin").PgPlugin = null as any;
utilities.lazyLoad(exports, ["PgPlugin"], () => require("./pgPlugin"));

export { PgPluginParameterArgs, PgPluginParameterState } from "./pgPluginParameter";
export type PgPluginParameter = import("./pgPluginParameter").PgPluginParameter;
export const PgPluginParameter: typeof import("./pgPluginParameter").PgPluginParameter = null as any;
utilities.lazyLoad(exports, ["PgPluginParameter"], () => require("./pgPluginParameter"));

export { PgPluginUpdateArgs, PgPluginUpdateState } from "./pgPluginUpdate";
export type PgPluginUpdate = import("./pgPluginUpdate").PgPluginUpdate;
export const PgPluginUpdate: typeof import("./pgPluginUpdate").PgPluginUpdate = null as any;
utilities.lazyLoad(exports, ["PgPluginUpdate"], () => require("./pgPluginUpdate"));

export { PgSqlLimitArgs, PgSqlLimitState } from "./pgSqlLimit";
export type PgSqlLimit = import("./pgSqlLimit").PgSqlLimit;
export const PgSqlLimit: typeof import("./pgSqlLimit").PgSqlLimit = null as any;
utilities.lazyLoad(exports, ["PgSqlLimit"], () => require("./pgSqlLimit"));

export { ReadReplicaInstanceArgs, ReadReplicaInstanceState } from "./readReplicaInstance";
export type ReadReplicaInstance = import("./readReplicaInstance").ReadReplicaInstance;
export const ReadReplicaInstance: typeof import("./readReplicaInstance").ReadReplicaInstance = null as any;
utilities.lazyLoad(exports, ["ReadReplicaInstance"], () => require("./readReplicaInstance"));

export { SqlAuditArgs, SqlAuditState } from "./sqlAudit";
export type SqlAudit = import("./sqlAudit").SqlAudit;
export const SqlAudit: typeof import("./sqlAudit").SqlAudit = null as any;
utilities.lazyLoad(exports, ["SqlAudit"], () => require("./sqlAudit"));

export { SqlserverAccountArgs, SqlserverAccountState } from "./sqlserverAccount";
export type SqlserverAccount = import("./sqlserverAccount").SqlserverAccount;
export const SqlserverAccount: typeof import("./sqlserverAccount").SqlserverAccount = null as any;
utilities.lazyLoad(exports, ["SqlserverAccount"], () => require("./sqlserverAccount"));

export { SqlserverDatabaseArgs, SqlserverDatabaseState } from "./sqlserverDatabase";
export type SqlserverDatabase = import("./sqlserverDatabase").SqlserverDatabase;
export const SqlserverDatabase: typeof import("./sqlserverDatabase").SqlserverDatabase = null as any;
utilities.lazyLoad(exports, ["SqlserverDatabase"], () => require("./sqlserverDatabase"));

export { SqlserverDatabasePrivilegeArgs, SqlserverDatabasePrivilegeState } from "./sqlserverDatabasePrivilege";
export type SqlserverDatabasePrivilege = import("./sqlserverDatabasePrivilege").SqlserverDatabasePrivilege;
export const SqlserverDatabasePrivilege: typeof import("./sqlserverDatabasePrivilege").SqlserverDatabasePrivilege = null as any;
utilities.lazyLoad(exports, ["SqlserverDatabasePrivilege"], () => require("./sqlserverDatabasePrivilege"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sbercloud:Rds/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "sbercloud:Rds/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "sbercloud:Rds/instanceEipAssociate:InstanceEipAssociate":
                return new InstanceEipAssociate(name, <any>undefined, { urn })
            case "sbercloud:Rds/mysqlAccount:MysqlAccount":
                return new MysqlAccount(name, <any>undefined, { urn })
            case "sbercloud:Rds/mysqlBinlog:MysqlBinlog":
                return new MysqlBinlog(name, <any>undefined, { urn })
            case "sbercloud:Rds/mysqlDatabase:MysqlDatabase":
                return new MysqlDatabase(name, <any>undefined, { urn })
            case "sbercloud:Rds/mysqlDatabasePrivilege:MysqlDatabasePrivilege":
                return new MysqlDatabasePrivilege(name, <any>undefined, { urn })
            case "sbercloud:Rds/mysqlDatabaseTableRestore:MysqlDatabaseTableRestore":
                return new MysqlDatabaseTableRestore(name, <any>undefined, { urn })
            case "sbercloud:Rds/parametergroup:Parametergroup":
                return new Parametergroup(name, <any>undefined, { urn })
            case "sbercloud:Rds/pgAccount:PgAccount":
                return new PgAccount(name, <any>undefined, { urn })
            case "sbercloud:Rds/pgAccountRoles:PgAccountRoles":
                return new PgAccountRoles(name, <any>undefined, { urn })
            case "sbercloud:Rds/pgDatabase:PgDatabase":
                return new PgDatabase(name, <any>undefined, { urn })
            case "sbercloud:Rds/pgHba:PgHba":
                return new PgHba(name, <any>undefined, { urn })
            case "sbercloud:Rds/pgPlugin:PgPlugin":
                return new PgPlugin(name, <any>undefined, { urn })
            case "sbercloud:Rds/pgPluginParameter:PgPluginParameter":
                return new PgPluginParameter(name, <any>undefined, { urn })
            case "sbercloud:Rds/pgPluginUpdate:PgPluginUpdate":
                return new PgPluginUpdate(name, <any>undefined, { urn })
            case "sbercloud:Rds/pgSqlLimit:PgSqlLimit":
                return new PgSqlLimit(name, <any>undefined, { urn })
            case "sbercloud:Rds/readReplicaInstance:ReadReplicaInstance":
                return new ReadReplicaInstance(name, <any>undefined, { urn })
            case "sbercloud:Rds/sqlAudit:SqlAudit":
                return new SqlAudit(name, <any>undefined, { urn })
            case "sbercloud:Rds/sqlserverAccount:SqlserverAccount":
                return new SqlserverAccount(name, <any>undefined, { urn })
            case "sbercloud:Rds/sqlserverDatabase:SqlserverDatabase":
                return new SqlserverDatabase(name, <any>undefined, { urn })
            case "sbercloud:Rds/sqlserverDatabasePrivilege:SqlserverDatabasePrivilege":
                return new SqlserverDatabasePrivilege(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sbercloud", "Rds/backup", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/instance", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/instanceEipAssociate", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/mysqlAccount", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/mysqlBinlog", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/mysqlDatabase", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/mysqlDatabasePrivilege", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/mysqlDatabaseTableRestore", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/parametergroup", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/pgAccount", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/pgAccountRoles", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/pgDatabase", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/pgHba", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/pgPlugin", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/pgPluginParameter", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/pgPluginUpdate", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/pgSqlLimit", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/readReplicaInstance", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/sqlAudit", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/sqlserverAccount", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/sqlserverDatabase", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Rds/sqlserverDatabasePrivilege", _module)

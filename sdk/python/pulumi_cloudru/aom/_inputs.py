# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ServiceDiscoveryRuleDiscoveryRuleArgs',
    'ServiceDiscoveryRuleDiscoveryRuleArgsDict',
    'ServiceDiscoveryRuleLogPathRuleArgs',
    'ServiceDiscoveryRuleLogPathRuleArgsDict',
    'ServiceDiscoveryRuleNameRulesArgs',
    'ServiceDiscoveryRuleNameRulesArgsDict',
    'ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs',
    'ServiceDiscoveryRuleNameRulesApplicationNameRuleArgsDict',
    'ServiceDiscoveryRuleNameRulesServiceNameRuleArgs',
    'ServiceDiscoveryRuleNameRulesServiceNameRuleArgsDict',
]

MYPY = False

if not MYPY:
    class ServiceDiscoveryRuleDiscoveryRuleArgsDict(TypedDict):
        check_contents: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        check_mode: pulumi.Input[_builtins.str]
        check_type: pulumi.Input[_builtins.str]
elif False:
    ServiceDiscoveryRuleDiscoveryRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceDiscoveryRuleDiscoveryRuleArgs:
    def __init__(__self__, *,
                 check_contents: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 check_mode: pulumi.Input[_builtins.str],
                 check_type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "check_contents", check_contents)
        pulumi.set(__self__, "check_mode", check_mode)
        pulumi.set(__self__, "check_type", check_type)

    @_builtins.property
    @pulumi.getter(name="checkContents")
    def check_contents(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "check_contents")

    @check_contents.setter
    def check_contents(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "check_contents", value)

    @_builtins.property
    @pulumi.getter(name="checkMode")
    def check_mode(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "check_mode")

    @check_mode.setter
    def check_mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "check_mode", value)

    @_builtins.property
    @pulumi.getter(name="checkType")
    def check_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "check_type")

    @check_type.setter
    def check_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "check_type", value)


if not MYPY:
    class ServiceDiscoveryRuleLogPathRuleArgsDict(TypedDict):
        args: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        name_type: pulumi.Input[_builtins.str]
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    ServiceDiscoveryRuleLogPathRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceDiscoveryRuleLogPathRuleArgs:
    def __init__(__self__, *,
                 args: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 name_type: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def args(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "args", value)

    @_builtins.property
    @pulumi.getter(name="nameType")
    def name_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name_type")

    @name_type.setter
    def name_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name_type", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ServiceDiscoveryRuleNameRulesArgsDict(TypedDict):
        application_name_rules: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgsDict']]]
        service_name_rules: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesServiceNameRuleArgsDict']]]
elif False:
    ServiceDiscoveryRuleNameRulesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceDiscoveryRuleNameRulesArgs:
    def __init__(__self__, *,
                 application_name_rules: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs']]],
                 service_name_rules: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesServiceNameRuleArgs']]]):
        pulumi.set(__self__, "application_name_rules", application_name_rules)
        pulumi.set(__self__, "service_name_rules", service_name_rules)

    @_builtins.property
    @pulumi.getter(name="applicationNameRules")
    def application_name_rules(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs']]]:
        return pulumi.get(self, "application_name_rules")

    @application_name_rules.setter
    def application_name_rules(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs']]]):
        pulumi.set(self, "application_name_rules", value)

    @_builtins.property
    @pulumi.getter(name="serviceNameRules")
    def service_name_rules(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesServiceNameRuleArgs']]]:
        return pulumi.get(self, "service_name_rules")

    @service_name_rules.setter
    def service_name_rules(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceDiscoveryRuleNameRulesServiceNameRuleArgs']]]):
        pulumi.set(self, "service_name_rules", value)


if not MYPY:
    class ServiceDiscoveryRuleNameRulesApplicationNameRuleArgsDict(TypedDict):
        args: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        name_type: pulumi.Input[_builtins.str]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    ServiceDiscoveryRuleNameRulesApplicationNameRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceDiscoveryRuleNameRulesApplicationNameRuleArgs:
    def __init__(__self__, *,
                 args: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 name_type: pulumi.Input[_builtins.str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def args(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "args", value)

    @_builtins.property
    @pulumi.getter(name="nameType")
    def name_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name_type")

    @name_type.setter
    def name_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name_type", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "values", value)


if not MYPY:
    class ServiceDiscoveryRuleNameRulesServiceNameRuleArgsDict(TypedDict):
        args: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        name_type: pulumi.Input[_builtins.str]
        values: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    ServiceDiscoveryRuleNameRulesServiceNameRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServiceDiscoveryRuleNameRulesServiceNameRuleArgs:
    def __init__(__self__, *,
                 args: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 name_type: pulumi.Input[_builtins.str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def args(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "args", value)

    @_builtins.property
    @pulumi.getter(name="nameType")
    def name_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name_type")

    @name_type.setter
    def name_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name_type", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "values", value)



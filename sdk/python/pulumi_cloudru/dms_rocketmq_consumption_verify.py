# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DmsRocketmqConsumptionVerifyArgs', 'DmsRocketmqConsumptionVerify']

@pulumi.input_type
class DmsRocketmqConsumptionVerifyArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 message_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a DmsRocketmqConsumptionVerify resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] client_id: Specifies the client ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] group: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] message_id_lists: Specifies the message ID list.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name.
               Changing this creates a new resource.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if message_id_lists is not None:
            pulumi.set(__self__, "message_id_lists", message_id_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the client ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter(name="messageIdLists")
    def message_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the message ID list.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_id_lists")

    @message_id_lists.setter
    def message_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "message_id_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)


@pulumi.input_type
class _DmsRocketmqConsumptionVerifyState:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 message_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resend_results: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqConsumptionVerifyResendResultArgs']]]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering DmsRocketmqConsumptionVerify resources.
        :param pulumi.Input[_builtins.str] client_id: Specifies the client ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] group: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] message_id_lists: Specifies the message ID list.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input['DmsRocketmqConsumptionVerifyResendResultArgs']]] resend_results: Indicates the verify results.
               The resend_results structure is documented below.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name.
               Changing this creates a new resource.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if message_id_lists is not None:
            pulumi.set(__self__, "message_id_lists", message_id_lists)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resend_results is not None:
            pulumi.set(__self__, "resend_results", resend_results)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the client ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="messageIdLists")
    def message_id_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Specifies the message ID list.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_id_lists")

    @message_id_lists.setter
    def message_id_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "message_id_lists", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resendResults")
    def resend_results(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqConsumptionVerifyResendResultArgs']]]]:
        """
        Indicates the verify results.
        The resend_results structure is documented below.
        """
        return pulumi.get(self, "resend_results")

    @resend_results.setter
    def resend_results(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DmsRocketmqConsumptionVerifyResendResultArgs']]]]):
        pulumi.set(self, "resend_results", value)

    @_builtins.property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic", value)


@pulumi.type_token("sbercloud:index/dmsRocketmqConsumptionVerify:DmsRocketmqConsumptionVerify")
class DmsRocketmqConsumptionVerify(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 message_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a DMS RocketMQ consumption verify resource within SberCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudru as sbercloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group = config.require_object("group")
        topic = config.require_object("topic")
        client_id = config.require_object("clientId")
        message_id_list = config.require_object("messageIdList")
        test = sbercloud.DmsRocketmqConsumptionVerify("test",
            instance_id=instance_id,
            group=group,
            topic=topic,
            client_id=client_id,
            message_id_lists=message_id_list)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_id: Specifies the client ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] group: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] message_id_lists: Specifies the message ID list.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name.
               Changing this creates a new resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DmsRocketmqConsumptionVerifyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a DMS RocketMQ consumption verify resource within SberCloud.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_cloudru as sbercloud

        config = pulumi.Config()
        instance_id = config.require_object("instanceId")
        group = config.require_object("group")
        topic = config.require_object("topic")
        client_id = config.require_object("clientId")
        message_id_list = config.require_object("messageIdList")
        test = sbercloud.DmsRocketmqConsumptionVerify("test",
            instance_id=instance_id,
            group=group,
            topic=topic,
            client_id=client_id,
            message_id_lists=message_id_list)
        ```

        :param str resource_name: The name of the resource.
        :param DmsRocketmqConsumptionVerifyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DmsRocketmqConsumptionVerifyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 group: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 message_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 topic: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DmsRocketmqConsumptionVerifyArgs.__new__(DmsRocketmqConsumptionVerifyArgs)

            __props__.__dict__["client_id"] = client_id
            __props__.__dict__["group"] = group
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["message_id_lists"] = message_id_lists
            __props__.__dict__["region"] = region
            __props__.__dict__["topic"] = topic
            __props__.__dict__["resend_results"] = None
        super(DmsRocketmqConsumptionVerify, __self__).__init__(
            'sbercloud:index/dmsRocketmqConsumptionVerify:DmsRocketmqConsumptionVerify',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_id: Optional[pulumi.Input[_builtins.str]] = None,
            group: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            message_id_lists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resend_results: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqConsumptionVerifyResendResultArgs', 'DmsRocketmqConsumptionVerifyResendResultArgsDict']]]]] = None,
            topic: Optional[pulumi.Input[_builtins.str]] = None) -> 'DmsRocketmqConsumptionVerify':
        """
        Get an existing DmsRocketmqConsumptionVerify resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] client_id: Specifies the client ID.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] group: Specifies the group name.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] instance_id: Specifies the instance ID.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] message_id_lists: Specifies the message ID list.
               Changing this creates a new resource.
        :param pulumi.Input[_builtins.str] region: Specifies the region in which to create the resource.
               If omitted, the provider-level region will be used.
               Changing this creates a new resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DmsRocketmqConsumptionVerifyResendResultArgs', 'DmsRocketmqConsumptionVerifyResendResultArgsDict']]]] resend_results: Indicates the verify results.
               The resend_results structure is documented below.
        :param pulumi.Input[_builtins.str] topic: Specifies the topic name.
               Changing this creates a new resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DmsRocketmqConsumptionVerifyState.__new__(_DmsRocketmqConsumptionVerifyState)

        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["group"] = group
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["message_id_lists"] = message_id_lists
        __props__.__dict__["region"] = region
        __props__.__dict__["resend_results"] = resend_results
        __props__.__dict__["topic"] = topic
        return DmsRocketmqConsumptionVerify(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the client ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the group name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the instance ID.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="messageIdLists")
    def message_id_lists(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        Specifies the message ID list.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "message_id_lists")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        Specifies the region in which to create the resource.
        If omitted, the provider-level region will be used.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resendResults")
    def resend_results(self) -> pulumi.Output[Sequence['outputs.DmsRocketmqConsumptionVerifyResendResult']]:
        """
        Indicates the verify results.
        The resend_results structure is documented below.
        """
        return pulumi.get(self, "resend_results")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Specifies the topic name.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic")


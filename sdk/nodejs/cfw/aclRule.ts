// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class AclRule extends pulumi.CustomResource {
    /**
     * Get an existing AclRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclRuleState, opts?: pulumi.CustomResourceOptions): AclRule {
        return new AclRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Cfw/aclRule:AclRule';

    /**
     * Returns true if the given object is an instance of AclRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclRule.__pulumiType;
    }

    /**
     * The action type.
     */
    declare public readonly actionType: pulumi.Output<number>;
    /**
     * The address type.
     */
    declare public readonly addressType: pulumi.Output<number>;
    /**
     * The application list.
     */
    declare public readonly applications: pulumi.Output<string[] | undefined>;
    /**
     * The custom service group list.
     */
    declare public readonly customServiceGroups: pulumi.Output<outputs.Cfw.AclRuleCustomServiceGroups | undefined>;
    /**
     * The custom service configuration.
     */
    declare public readonly customServices: pulumi.Output<outputs.Cfw.AclRuleCustomService[] | undefined>;
    /**
     * The rule description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The destination address group list.
     */
    declare public readonly destinationAddressGroups: pulumi.Output<string[] | undefined>;
    /**
     * The destination address type.
     */
    declare public readonly destinationAddressType: pulumi.Output<number | undefined>;
    /**
     * The destination IP address list.
     */
    declare public readonly destinationAddresses: pulumi.Output<string[] | undefined>;
    /**
     * The destination domain address name.
     */
    declare public readonly destinationDomainAddressName: pulumi.Output<string | undefined>;
    /**
     * The destination domain group ID.
     */
    declare public readonly destinationDomainGroupId: pulumi.Output<string | undefined>;
    /**
     * The destination domain group name.
     */
    declare public readonly destinationDomainGroupName: pulumi.Output<string | undefined>;
    /**
     * The destination domain group type.
     */
    declare public readonly destinationDomainGroupType: pulumi.Output<number | undefined>;
    /**
     * The destination region list.
     */
    declare public readonly destinationRegionLists: pulumi.Output<outputs.Cfw.AclRuleDestinationRegionList[] | undefined>;
    /**
     * The rule direction.
     */
    declare public readonly direction: pulumi.Output<number>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    /**
     * Whether to support persistent connections.
     */
    declare public readonly longConnectEnable: pulumi.Output<number>;
    /**
     * The persistent connection duration (hour).
     */
    declare public readonly longConnectTimeHour: pulumi.Output<number>;
    /**
     * The persistent connection duration (minute).
     */
    declare public readonly longConnectTimeMinute: pulumi.Output<number>;
    /**
     * The persistent Connection Duration (second).
     */
    declare public readonly longConnectTimeSecond: pulumi.Output<number>;
    /**
     * The rule name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The protected object ID.
     */
    declare public readonly objectId: pulumi.Output<string>;
    /**
     * The predefined service group list.
     */
    declare public readonly predefinedServiceGroups: pulumi.Output<outputs.Cfw.AclRulePredefinedServiceGroups | undefined>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * The number of times the ACL rule is hit.
     */
    declare public readonly ruleHitCount: pulumi.Output<string>;
    /**
     * The sequence configuration.
     */
    declare public readonly sequence: pulumi.Output<outputs.Cfw.AclRuleSequence>;
    /**
     * The source address group list.
     */
    declare public readonly sourceAddressGroups: pulumi.Output<string[] | undefined>;
    /**
     * The source address type.
     */
    declare public readonly sourceAddressType: pulumi.Output<number | undefined>;
    /**
     * The source IP address list.
     */
    declare public readonly sourceAddresses: pulumi.Output<string[] | undefined>;
    /**
     * The source predefined address group list.
     */
    declare public readonly sourcePredefinedGroups: pulumi.Output<string[] | undefined>;
    /**
     * The source region list.
     */
    declare public readonly sourceRegionLists: pulumi.Output<outputs.Cfw.AclRuleSourceRegionList[] | undefined>;
    /**
     * The rule status.
     */
    declare public readonly status: pulumi.Output<number>;
    /**
     * The key/value pairs to associate with the ACL rule.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The rule type.
     */
    declare public readonly type: pulumi.Output<number>;

    /**
     * Create a AclRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclRuleArgs | AclRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclRuleState | undefined;
            resourceInputs["actionType"] = state?.actionType;
            resourceInputs["addressType"] = state?.addressType;
            resourceInputs["applications"] = state?.applications;
            resourceInputs["customServiceGroups"] = state?.customServiceGroups;
            resourceInputs["customServices"] = state?.customServices;
            resourceInputs["description"] = state?.description;
            resourceInputs["destinationAddressGroups"] = state?.destinationAddressGroups;
            resourceInputs["destinationAddressType"] = state?.destinationAddressType;
            resourceInputs["destinationAddresses"] = state?.destinationAddresses;
            resourceInputs["destinationDomainAddressName"] = state?.destinationDomainAddressName;
            resourceInputs["destinationDomainGroupId"] = state?.destinationDomainGroupId;
            resourceInputs["destinationDomainGroupName"] = state?.destinationDomainGroupName;
            resourceInputs["destinationDomainGroupType"] = state?.destinationDomainGroupType;
            resourceInputs["destinationRegionLists"] = state?.destinationRegionLists;
            resourceInputs["direction"] = state?.direction;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["longConnectEnable"] = state?.longConnectEnable;
            resourceInputs["longConnectTimeHour"] = state?.longConnectTimeHour;
            resourceInputs["longConnectTimeMinute"] = state?.longConnectTimeMinute;
            resourceInputs["longConnectTimeSecond"] = state?.longConnectTimeSecond;
            resourceInputs["name"] = state?.name;
            resourceInputs["objectId"] = state?.objectId;
            resourceInputs["predefinedServiceGroups"] = state?.predefinedServiceGroups;
            resourceInputs["region"] = state?.region;
            resourceInputs["ruleHitCount"] = state?.ruleHitCount;
            resourceInputs["sequence"] = state?.sequence;
            resourceInputs["sourceAddressGroups"] = state?.sourceAddressGroups;
            resourceInputs["sourceAddressType"] = state?.sourceAddressType;
            resourceInputs["sourceAddresses"] = state?.sourceAddresses;
            resourceInputs["sourcePredefinedGroups"] = state?.sourcePredefinedGroups;
            resourceInputs["sourceRegionLists"] = state?.sourceRegionLists;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as AclRuleArgs | undefined;
            if (args?.actionType === undefined && !opts.urn) {
                throw new Error("Missing required property 'actionType'");
            }
            if (args?.addressType === undefined && !opts.urn) {
                throw new Error("Missing required property 'addressType'");
            }
            if (args?.longConnectEnable === undefined && !opts.urn) {
                throw new Error("Missing required property 'longConnectEnable'");
            }
            if (args?.objectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectId'");
            }
            if (args?.sequence === undefined && !opts.urn) {
                throw new Error("Missing required property 'sequence'");
            }
            if (args?.status === undefined && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actionType"] = args?.actionType;
            resourceInputs["addressType"] = args?.addressType;
            resourceInputs["applications"] = args?.applications;
            resourceInputs["customServiceGroups"] = args?.customServiceGroups;
            resourceInputs["customServices"] = args?.customServices;
            resourceInputs["description"] = args?.description;
            resourceInputs["destinationAddressGroups"] = args?.destinationAddressGroups;
            resourceInputs["destinationAddressType"] = args?.destinationAddressType;
            resourceInputs["destinationAddresses"] = args?.destinationAddresses;
            resourceInputs["destinationDomainAddressName"] = args?.destinationDomainAddressName;
            resourceInputs["destinationDomainGroupId"] = args?.destinationDomainGroupId;
            resourceInputs["destinationDomainGroupName"] = args?.destinationDomainGroupName;
            resourceInputs["destinationDomainGroupType"] = args?.destinationDomainGroupType;
            resourceInputs["destinationRegionLists"] = args?.destinationRegionLists;
            resourceInputs["direction"] = args?.direction;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["longConnectEnable"] = args?.longConnectEnable;
            resourceInputs["longConnectTimeHour"] = args?.longConnectTimeHour;
            resourceInputs["longConnectTimeMinute"] = args?.longConnectTimeMinute;
            resourceInputs["longConnectTimeSecond"] = args?.longConnectTimeSecond;
            resourceInputs["name"] = args?.name;
            resourceInputs["objectId"] = args?.objectId;
            resourceInputs["predefinedServiceGroups"] = args?.predefinedServiceGroups;
            resourceInputs["region"] = args?.region;
            resourceInputs["ruleHitCount"] = args?.ruleHitCount;
            resourceInputs["sequence"] = args?.sequence;
            resourceInputs["sourceAddressGroups"] = args?.sourceAddressGroups;
            resourceInputs["sourceAddressType"] = args?.sourceAddressType;
            resourceInputs["sourceAddresses"] = args?.sourceAddresses;
            resourceInputs["sourcePredefinedGroups"] = args?.sourcePredefinedGroups;
            resourceInputs["sourceRegionLists"] = args?.sourceRegionLists;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclRule resources.
 */
export interface AclRuleState {
    /**
     * The action type.
     */
    actionType?: pulumi.Input<number>;
    /**
     * The address type.
     */
    addressType?: pulumi.Input<number>;
    /**
     * The application list.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The custom service group list.
     */
    customServiceGroups?: pulumi.Input<inputs.Cfw.AclRuleCustomServiceGroups>;
    /**
     * The custom service configuration.
     */
    customServices?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleCustomService>[]>;
    /**
     * The rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination address group list.
     */
    destinationAddressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination address type.
     */
    destinationAddressType?: pulumi.Input<number>;
    /**
     * The destination IP address list.
     */
    destinationAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination domain address name.
     */
    destinationDomainAddressName?: pulumi.Input<string>;
    /**
     * The destination domain group ID.
     */
    destinationDomainGroupId?: pulumi.Input<string>;
    /**
     * The destination domain group name.
     */
    destinationDomainGroupName?: pulumi.Input<string>;
    /**
     * The destination domain group type.
     */
    destinationDomainGroupType?: pulumi.Input<number>;
    /**
     * The destination region list.
     */
    destinationRegionLists?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleDestinationRegionList>[]>;
    /**
     * The rule direction.
     */
    direction?: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Whether to support persistent connections.
     */
    longConnectEnable?: pulumi.Input<number>;
    /**
     * The persistent connection duration (hour).
     */
    longConnectTimeHour?: pulumi.Input<number>;
    /**
     * The persistent connection duration (minute).
     */
    longConnectTimeMinute?: pulumi.Input<number>;
    /**
     * The persistent Connection Duration (second).
     */
    longConnectTimeSecond?: pulumi.Input<number>;
    /**
     * The rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The protected object ID.
     */
    objectId?: pulumi.Input<string>;
    /**
     * The predefined service group list.
     */
    predefinedServiceGroups?: pulumi.Input<inputs.Cfw.AclRulePredefinedServiceGroups>;
    region?: pulumi.Input<string>;
    /**
     * The number of times the ACL rule is hit.
     */
    ruleHitCount?: pulumi.Input<string>;
    /**
     * The sequence configuration.
     */
    sequence?: pulumi.Input<inputs.Cfw.AclRuleSequence>;
    /**
     * The source address group list.
     */
    sourceAddressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source address type.
     */
    sourceAddressType?: pulumi.Input<number>;
    /**
     * The source IP address list.
     */
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source predefined address group list.
     */
    sourcePredefinedGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source region list.
     */
    sourceRegionLists?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleSourceRegionList>[]>;
    /**
     * The rule status.
     */
    status?: pulumi.Input<number>;
    /**
     * The key/value pairs to associate with the ACL rule.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The rule type.
     */
    type?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AclRule resource.
 */
export interface AclRuleArgs {
    /**
     * The action type.
     */
    actionType: pulumi.Input<number>;
    /**
     * The address type.
     */
    addressType: pulumi.Input<number>;
    /**
     * The application list.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The custom service group list.
     */
    customServiceGroups?: pulumi.Input<inputs.Cfw.AclRuleCustomServiceGroups>;
    /**
     * The custom service configuration.
     */
    customServices?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleCustomService>[]>;
    /**
     * The rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination address group list.
     */
    destinationAddressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination address type.
     */
    destinationAddressType?: pulumi.Input<number>;
    /**
     * The destination IP address list.
     */
    destinationAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination domain address name.
     */
    destinationDomainAddressName?: pulumi.Input<string>;
    /**
     * The destination domain group ID.
     */
    destinationDomainGroupId?: pulumi.Input<string>;
    /**
     * The destination domain group name.
     */
    destinationDomainGroupName?: pulumi.Input<string>;
    /**
     * The destination domain group type.
     */
    destinationDomainGroupType?: pulumi.Input<number>;
    /**
     * The destination region list.
     */
    destinationRegionLists?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleDestinationRegionList>[]>;
    /**
     * The rule direction.
     */
    direction?: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Whether to support persistent connections.
     */
    longConnectEnable: pulumi.Input<number>;
    /**
     * The persistent connection duration (hour).
     */
    longConnectTimeHour?: pulumi.Input<number>;
    /**
     * The persistent connection duration (minute).
     */
    longConnectTimeMinute?: pulumi.Input<number>;
    /**
     * The persistent Connection Duration (second).
     */
    longConnectTimeSecond?: pulumi.Input<number>;
    /**
     * The rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The protected object ID.
     */
    objectId: pulumi.Input<string>;
    /**
     * The predefined service group list.
     */
    predefinedServiceGroups?: pulumi.Input<inputs.Cfw.AclRulePredefinedServiceGroups>;
    region?: pulumi.Input<string>;
    /**
     * The number of times the ACL rule is hit.
     */
    ruleHitCount?: pulumi.Input<string>;
    /**
     * The sequence configuration.
     */
    sequence: pulumi.Input<inputs.Cfw.AclRuleSequence>;
    /**
     * The source address group list.
     */
    sourceAddressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source address type.
     */
    sourceAddressType?: pulumi.Input<number>;
    /**
     * The source IP address list.
     */
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source predefined address group list.
     */
    sourcePredefinedGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source region list.
     */
    sourceRegionLists?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleSourceRegionList>[]>;
    /**
     * The rule status.
     */
    status: pulumi.Input<number>;
    /**
     * The key/value pairs to associate with the ACL rule.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The rule type.
     */
    type: pulumi.Input<number>;
}

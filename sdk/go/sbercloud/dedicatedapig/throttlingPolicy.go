// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedapig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

type ThrottlingPolicy struct {
	pulumi.CustomResourceState

	// The array of one or more special throttling policies for APP limit.
	AppThrottles ThrottlingPolicyAppThrottleArrayOutput `pulumi:"appThrottles"`
	// The creation time of the throttling policy.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description about the API throttling policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests pulumi.IntOutput `pulumi:"maxApiRequests"`
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests pulumi.IntPtrOutput `pulumi:"maxAppRequests"`
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests pulumi.IntPtrOutput `pulumi:"maxIpRequests"`
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests pulumi.IntPtrOutput `pulumi:"maxUserRequests"`
	// The name of the throttling policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The period of time for limiting the number of API calls.
	Period pulumi.IntOutput `pulumi:"period"`
	// The time unit for limiting the number of API calls.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The region where the throttling policy is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The type of the request throttling policy.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles ThrottlingPolicyUserThrottleArrayOutput `pulumi:"userThrottles"`
}

// NewThrottlingPolicy registers a new resource with the given unique name, arguments, and options.
func NewThrottlingPolicy(ctx *pulumi.Context,
	name string, args *ThrottlingPolicyArgs, opts ...pulumi.ResourceOption) (*ThrottlingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MaxApiRequests == nil {
		return nil, errors.New("invalid value for required argument 'MaxApiRequests'")
	}
	if args.Period == nil {
		return nil, errors.New("invalid value for required argument 'Period'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ThrottlingPolicy
	err := ctx.RegisterResource("sbercloud:DedicatedApig/throttlingPolicy:ThrottlingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThrottlingPolicy gets an existing ThrottlingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThrottlingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThrottlingPolicyState, opts ...pulumi.ResourceOption) (*ThrottlingPolicy, error) {
	var resource ThrottlingPolicy
	err := ctx.ReadResource("sbercloud:DedicatedApig/throttlingPolicy:ThrottlingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ThrottlingPolicy resources.
type throttlingPolicyState struct {
	// The array of one or more special throttling policies for APP limit.
	AppThrottles []ThrottlingPolicyAppThrottle `pulumi:"appThrottles"`
	// The creation time of the throttling policy.
	CreatedAt *string `pulumi:"createdAt"`
	// The description about the API throttling policy.
	Description *string `pulumi:"description"`
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests *int `pulumi:"maxApiRequests"`
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests *int `pulumi:"maxAppRequests"`
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests *int `pulumi:"maxIpRequests"`
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests *int `pulumi:"maxUserRequests"`
	// The name of the throttling policy.
	Name *string `pulumi:"name"`
	// The period of time for limiting the number of API calls.
	Period *int `pulumi:"period"`
	// The time unit for limiting the number of API calls.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The region where the throttling policy is located.
	Region *string `pulumi:"region"`
	// The type of the request throttling policy.
	Type *string `pulumi:"type"`
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles []ThrottlingPolicyUserThrottle `pulumi:"userThrottles"`
}

type ThrottlingPolicyState struct {
	// The array of one or more special throttling policies for APP limit.
	AppThrottles ThrottlingPolicyAppThrottleArrayInput
	// The creation time of the throttling policy.
	CreatedAt pulumi.StringPtrInput
	// The description about the API throttling policy.
	Description pulumi.StringPtrInput
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId pulumi.StringPtrInput
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests pulumi.IntPtrInput
	// The name of the throttling policy.
	Name pulumi.StringPtrInput
	// The period of time for limiting the number of API calls.
	Period pulumi.IntPtrInput
	// The time unit for limiting the number of API calls.
	PeriodUnit pulumi.StringPtrInput
	// The region where the throttling policy is located.
	Region pulumi.StringPtrInput
	// The type of the request throttling policy.
	Type pulumi.StringPtrInput
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles ThrottlingPolicyUserThrottleArrayInput
}

func (ThrottlingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*throttlingPolicyState)(nil)).Elem()
}

type throttlingPolicyArgs struct {
	// The array of one or more special throttling policies for APP limit.
	AppThrottles []ThrottlingPolicyAppThrottle `pulumi:"appThrottles"`
	// The description about the API throttling policy.
	Description *string `pulumi:"description"`
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId string `pulumi:"instanceId"`
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests int `pulumi:"maxApiRequests"`
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests *int `pulumi:"maxAppRequests"`
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests *int `pulumi:"maxIpRequests"`
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests *int `pulumi:"maxUserRequests"`
	// The name of the throttling policy.
	Name *string `pulumi:"name"`
	// The period of time for limiting the number of API calls.
	Period int `pulumi:"period"`
	// The time unit for limiting the number of API calls.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The region where the throttling policy is located.
	Region *string `pulumi:"region"`
	// The type of the request throttling policy.
	Type *string `pulumi:"type"`
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles []ThrottlingPolicyUserThrottle `pulumi:"userThrottles"`
}

// The set of arguments for constructing a ThrottlingPolicy resource.
type ThrottlingPolicyArgs struct {
	// The array of one or more special throttling policies for APP limit.
	AppThrottles ThrottlingPolicyAppThrottleArrayInput
	// The description about the API throttling policy.
	Description pulumi.StringPtrInput
	// The ID of the dedicated instance to which the throttling policy belongs.
	InstanceId pulumi.StringInput
	// The maximum number of times an API can be accessed within a specified period..
	MaxApiRequests pulumi.IntInput
	// The maximum number of times the API can be accessed by an app within the same period.
	MaxAppRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by an IP address within the same period.
	MaxIpRequests pulumi.IntPtrInput
	// The maximum number of times the API can be accessed by a user within the same period.
	MaxUserRequests pulumi.IntPtrInput
	// The name of the throttling policy.
	Name pulumi.StringPtrInput
	// The period of time for limiting the number of API calls.
	Period pulumi.IntInput
	// The time unit for limiting the number of API calls.
	PeriodUnit pulumi.StringPtrInput
	// The region where the throttling policy is located.
	Region pulumi.StringPtrInput
	// The type of the request throttling policy.
	Type pulumi.StringPtrInput
	// The array of one or more special throttling policies for IAM user limit.
	UserThrottles ThrottlingPolicyUserThrottleArrayInput
}

func (ThrottlingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*throttlingPolicyArgs)(nil)).Elem()
}

type ThrottlingPolicyInput interface {
	pulumi.Input

	ToThrottlingPolicyOutput() ThrottlingPolicyOutput
	ToThrottlingPolicyOutputWithContext(ctx context.Context) ThrottlingPolicyOutput
}

func (*ThrottlingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingPolicy)(nil)).Elem()
}

func (i *ThrottlingPolicy) ToThrottlingPolicyOutput() ThrottlingPolicyOutput {
	return i.ToThrottlingPolicyOutputWithContext(context.Background())
}

func (i *ThrottlingPolicy) ToThrottlingPolicyOutputWithContext(ctx context.Context) ThrottlingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingPolicyOutput)
}

// ThrottlingPolicyArrayInput is an input type that accepts ThrottlingPolicyArray and ThrottlingPolicyArrayOutput values.
// You can construct a concrete instance of `ThrottlingPolicyArrayInput` via:
//
//	ThrottlingPolicyArray{ ThrottlingPolicyArgs{...} }
type ThrottlingPolicyArrayInput interface {
	pulumi.Input

	ToThrottlingPolicyArrayOutput() ThrottlingPolicyArrayOutput
	ToThrottlingPolicyArrayOutputWithContext(context.Context) ThrottlingPolicyArrayOutput
}

type ThrottlingPolicyArray []ThrottlingPolicyInput

func (ThrottlingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThrottlingPolicy)(nil)).Elem()
}

func (i ThrottlingPolicyArray) ToThrottlingPolicyArrayOutput() ThrottlingPolicyArrayOutput {
	return i.ToThrottlingPolicyArrayOutputWithContext(context.Background())
}

func (i ThrottlingPolicyArray) ToThrottlingPolicyArrayOutputWithContext(ctx context.Context) ThrottlingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingPolicyArrayOutput)
}

// ThrottlingPolicyMapInput is an input type that accepts ThrottlingPolicyMap and ThrottlingPolicyMapOutput values.
// You can construct a concrete instance of `ThrottlingPolicyMapInput` via:
//
//	ThrottlingPolicyMap{ "key": ThrottlingPolicyArgs{...} }
type ThrottlingPolicyMapInput interface {
	pulumi.Input

	ToThrottlingPolicyMapOutput() ThrottlingPolicyMapOutput
	ToThrottlingPolicyMapOutputWithContext(context.Context) ThrottlingPolicyMapOutput
}

type ThrottlingPolicyMap map[string]ThrottlingPolicyInput

func (ThrottlingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThrottlingPolicy)(nil)).Elem()
}

func (i ThrottlingPolicyMap) ToThrottlingPolicyMapOutput() ThrottlingPolicyMapOutput {
	return i.ToThrottlingPolicyMapOutputWithContext(context.Background())
}

func (i ThrottlingPolicyMap) ToThrottlingPolicyMapOutputWithContext(ctx context.Context) ThrottlingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThrottlingPolicyMapOutput)
}

type ThrottlingPolicyOutput struct{ *pulumi.OutputState }

func (ThrottlingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThrottlingPolicy)(nil)).Elem()
}

func (o ThrottlingPolicyOutput) ToThrottlingPolicyOutput() ThrottlingPolicyOutput {
	return o
}

func (o ThrottlingPolicyOutput) ToThrottlingPolicyOutputWithContext(ctx context.Context) ThrottlingPolicyOutput {
	return o
}

// The array of one or more special throttling policies for APP limit.
func (o ThrottlingPolicyOutput) AppThrottles() ThrottlingPolicyAppThrottleArrayOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) ThrottlingPolicyAppThrottleArrayOutput { return v.AppThrottles }).(ThrottlingPolicyAppThrottleArrayOutput)
}

// The creation time of the throttling policy.
func (o ThrottlingPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description about the API throttling policy.
func (o ThrottlingPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the dedicated instance to which the throttling policy belongs.
func (o ThrottlingPolicyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The maximum number of times an API can be accessed within a specified period..
func (o ThrottlingPolicyOutput) MaxApiRequests() pulumi.IntOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.IntOutput { return v.MaxApiRequests }).(pulumi.IntOutput)
}

// The maximum number of times the API can be accessed by an app within the same period.
func (o ThrottlingPolicyOutput) MaxAppRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.IntPtrOutput { return v.MaxAppRequests }).(pulumi.IntPtrOutput)
}

// The maximum number of times the API can be accessed by an IP address within the same period.
func (o ThrottlingPolicyOutput) MaxIpRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.IntPtrOutput { return v.MaxIpRequests }).(pulumi.IntPtrOutput)
}

// The maximum number of times the API can be accessed by a user within the same period.
func (o ThrottlingPolicyOutput) MaxUserRequests() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.IntPtrOutput { return v.MaxUserRequests }).(pulumi.IntPtrOutput)
}

// The name of the throttling policy.
func (o ThrottlingPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The period of time for limiting the number of API calls.
func (o ThrottlingPolicyOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.IntOutput { return v.Period }).(pulumi.IntOutput)
}

// The time unit for limiting the number of API calls.
func (o ThrottlingPolicyOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The region where the throttling policy is located.
func (o ThrottlingPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The type of the request throttling policy.
func (o ThrottlingPolicyOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The array of one or more special throttling policies for IAM user limit.
func (o ThrottlingPolicyOutput) UserThrottles() ThrottlingPolicyUserThrottleArrayOutput {
	return o.ApplyT(func(v *ThrottlingPolicy) ThrottlingPolicyUserThrottleArrayOutput { return v.UserThrottles }).(ThrottlingPolicyUserThrottleArrayOutput)
}

type ThrottlingPolicyArrayOutput struct{ *pulumi.OutputState }

func (ThrottlingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThrottlingPolicy)(nil)).Elem()
}

func (o ThrottlingPolicyArrayOutput) ToThrottlingPolicyArrayOutput() ThrottlingPolicyArrayOutput {
	return o
}

func (o ThrottlingPolicyArrayOutput) ToThrottlingPolicyArrayOutputWithContext(ctx context.Context) ThrottlingPolicyArrayOutput {
	return o
}

func (o ThrottlingPolicyArrayOutput) Index(i pulumi.IntInput) ThrottlingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ThrottlingPolicy {
		return vs[0].([]*ThrottlingPolicy)[vs[1].(int)]
	}).(ThrottlingPolicyOutput)
}

type ThrottlingPolicyMapOutput struct{ *pulumi.OutputState }

func (ThrottlingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThrottlingPolicy)(nil)).Elem()
}

func (o ThrottlingPolicyMapOutput) ToThrottlingPolicyMapOutput() ThrottlingPolicyMapOutput {
	return o
}

func (o ThrottlingPolicyMapOutput) ToThrottlingPolicyMapOutputWithContext(ctx context.Context) ThrottlingPolicyMapOutput {
	return o
}

func (o ThrottlingPolicyMapOutput) MapIndex(k pulumi.StringInput) ThrottlingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ThrottlingPolicy {
		return vs[0].(map[string]*ThrottlingPolicy)[vs[1].(string)]
	}).(ThrottlingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThrottlingPolicyInput)(nil)).Elem(), &ThrottlingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThrottlingPolicyArrayInput)(nil)).Elem(), ThrottlingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThrottlingPolicyMapInput)(nil)).Elem(), ThrottlingPolicyMap{})
	pulumi.RegisterOutputType(ThrottlingPolicyOutput{})
	pulumi.RegisterOutputType(ThrottlingPolicyArrayOutput{})
	pulumi.RegisterOutputType(ThrottlingPolicyMapOutput{})
}

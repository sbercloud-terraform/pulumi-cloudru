// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Vpc/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public readonly cidr: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly dhcpDomainName: pulumi.Output<string | undefined>;
    declare public readonly dhcpEnable: pulumi.Output<boolean | undefined>;
    declare public readonly dhcpIpv6LeaseTime: pulumi.Output<string>;
    declare public readonly dhcpLeaseTime: pulumi.Output<string>;
    declare public readonly dnsLists: pulumi.Output<string[]>;
    declare public readonly gatewayIp: pulumi.Output<string>;
    declare public /*out*/ readonly ipv4SubnetId: pulumi.Output<string>;
    declare public /*out*/ readonly ipv6Cidr: pulumi.Output<string>;
    declare public readonly ipv6Enable: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly ipv6Gateway: pulumi.Output<string>;
    declare public /*out*/ readonly ipv6SubnetId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly ntpServerAddress: pulumi.Output<string | undefined>;
    declare public readonly primaryDns: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly secondaryDns: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    declare public /*out*/ readonly subnetId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["cidr"] = state?.cidr;
            resourceInputs["description"] = state?.description;
            resourceInputs["dhcpDomainName"] = state?.dhcpDomainName;
            resourceInputs["dhcpEnable"] = state?.dhcpEnable;
            resourceInputs["dhcpIpv6LeaseTime"] = state?.dhcpIpv6LeaseTime;
            resourceInputs["dhcpLeaseTime"] = state?.dhcpLeaseTime;
            resourceInputs["dnsLists"] = state?.dnsLists;
            resourceInputs["gatewayIp"] = state?.gatewayIp;
            resourceInputs["ipv4SubnetId"] = state?.ipv4SubnetId;
            resourceInputs["ipv6Cidr"] = state?.ipv6Cidr;
            resourceInputs["ipv6Enable"] = state?.ipv6Enable;
            resourceInputs["ipv6Gateway"] = state?.ipv6Gateway;
            resourceInputs["ipv6SubnetId"] = state?.ipv6SubnetId;
            resourceInputs["name"] = state?.name;
            resourceInputs["ntpServerAddress"] = state?.ntpServerAddress;
            resourceInputs["primaryDns"] = state?.primaryDns;
            resourceInputs["region"] = state?.region;
            resourceInputs["secondaryDns"] = state?.secondaryDns;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if (args?.cidr === undefined && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if (args?.gatewayIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'gatewayIp'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["cidr"] = args?.cidr;
            resourceInputs["description"] = args?.description;
            resourceInputs["dhcpDomainName"] = args?.dhcpDomainName;
            resourceInputs["dhcpEnable"] = args?.dhcpEnable;
            resourceInputs["dhcpIpv6LeaseTime"] = args?.dhcpIpv6LeaseTime;
            resourceInputs["dhcpLeaseTime"] = args?.dhcpLeaseTime;
            resourceInputs["dnsLists"] = args?.dnsLists;
            resourceInputs["gatewayIp"] = args?.gatewayIp;
            resourceInputs["ipv6Enable"] = args?.ipv6Enable;
            resourceInputs["name"] = args?.name;
            resourceInputs["ntpServerAddress"] = args?.ntpServerAddress;
            resourceInputs["primaryDns"] = args?.primaryDns;
            resourceInputs["region"] = args?.region;
            resourceInputs["secondaryDns"] = args?.secondaryDns;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["ipv4SubnetId"] = undefined /*out*/;
            resourceInputs["ipv6Cidr"] = undefined /*out*/;
            resourceInputs["ipv6Gateway"] = undefined /*out*/;
            resourceInputs["ipv6SubnetId"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    availabilityZone?: pulumi.Input<string>;
    cidr?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpDomainName?: pulumi.Input<string>;
    dhcpEnable?: pulumi.Input<boolean>;
    dhcpIpv6LeaseTime?: pulumi.Input<string>;
    dhcpLeaseTime?: pulumi.Input<string>;
    dnsLists?: pulumi.Input<pulumi.Input<string>[]>;
    gatewayIp?: pulumi.Input<string>;
    ipv4SubnetId?: pulumi.Input<string>;
    ipv6Cidr?: pulumi.Input<string>;
    ipv6Enable?: pulumi.Input<boolean>;
    ipv6Gateway?: pulumi.Input<string>;
    ipv6SubnetId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ntpServerAddress?: pulumi.Input<string>;
    primaryDns?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secondaryDns?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    availabilityZone?: pulumi.Input<string>;
    cidr: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dhcpDomainName?: pulumi.Input<string>;
    dhcpEnable?: pulumi.Input<boolean>;
    dhcpIpv6LeaseTime?: pulumi.Input<string>;
    dhcpLeaseTime?: pulumi.Input<string>;
    dnsLists?: pulumi.Input<pulumi.Input<string>[]>;
    gatewayIp: pulumi.Input<string>;
    ipv6Enable?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    ntpServerAddress?: pulumi.Input<string>;
    primaryDns?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secondaryDns?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}

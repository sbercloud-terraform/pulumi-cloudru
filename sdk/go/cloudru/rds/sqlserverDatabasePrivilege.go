// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages RDS SQL Server database privilege resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/rds"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			dbName := cfg.RequireObject("dbName")
//			userName1 := cfg.RequireObject("userName1")
//			userName2 := cfg.RequireObject("userName2")
//			_, err := rds.NewSqlserverDatabasePrivilege(ctx, "test", &rds.SqlserverDatabasePrivilegeArgs{
//				InstanceId: pulumi.Any(instanceId),
//				DbName:     pulumi.Any(dbName),
//				Users: rds.SqlserverDatabasePrivilegeUserArray{
//					&rds.SqlserverDatabasePrivilegeUserArgs{
//						Name:     pulumi.Any(userName1),
//						Readonly: pulumi.Bool(true),
//					},
//					&rds.SqlserverDatabasePrivilegeUserArgs{
//						Name:     pulumi.Any(userName2),
//						Readonly: pulumi.Bool(false),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The RDS SQL Server database privilege can be imported using the `instance_id` and `db_name` separated by a slash, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Rds/sqlserverDatabasePrivilege:SqlserverDatabasePrivilege test <instance_id>/<db_name>
// ```
type SqlserverDatabasePrivilege struct {
	pulumi.CustomResourceState

	// Specifies the database name.
	//
	// Changing this parameter will create a new resource.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// Specifies the ID of the RDS SQL Server instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the account that associated with the database
	//
	// -> **NOTE:** The account of **rdsuser** is system account, it can not be managed, and it will not be obtained.
	//
	// The users structure is documented below.
	//
	// <a name="SQLServerDatabasePrivilege_CreateUser"></a>
	// The `users` block supports:
	Users SqlserverDatabasePrivilegeUserArrayOutput `pulumi:"users"`
}

// NewSqlserverDatabasePrivilege registers a new resource with the given unique name, arguments, and options.
func NewSqlserverDatabasePrivilege(ctx *pulumi.Context,
	name string, args *SqlserverDatabasePrivilegeArgs, opts ...pulumi.ResourceOption) (*SqlserverDatabasePrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlserverDatabasePrivilege
	err := ctx.RegisterResource("sbercloud:Rds/sqlserverDatabasePrivilege:SqlserverDatabasePrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlserverDatabasePrivilege gets an existing SqlserverDatabasePrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlserverDatabasePrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlserverDatabasePrivilegeState, opts ...pulumi.ResourceOption) (*SqlserverDatabasePrivilege, error) {
	var resource SqlserverDatabasePrivilege
	err := ctx.ReadResource("sbercloud:Rds/sqlserverDatabasePrivilege:SqlserverDatabasePrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlserverDatabasePrivilege resources.
type sqlserverDatabasePrivilegeState struct {
	// Specifies the database name.
	//
	// Changing this parameter will create a new resource.
	DbName *string `pulumi:"dbName"`
	// Specifies the ID of the RDS SQL Server instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the account that associated with the database
	//
	// -> **NOTE:** The account of **rdsuser** is system account, it can not be managed, and it will not be obtained.
	//
	// The users structure is documented below.
	//
	// <a name="SQLServerDatabasePrivilege_CreateUser"></a>
	// The `users` block supports:
	Users []SqlserverDatabasePrivilegeUser `pulumi:"users"`
}

type SqlserverDatabasePrivilegeState struct {
	// Specifies the database name.
	//
	// Changing this parameter will create a new resource.
	DbName pulumi.StringPtrInput
	// Specifies the ID of the RDS SQL Server instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the account that associated with the database
	//
	// -> **NOTE:** The account of **rdsuser** is system account, it can not be managed, and it will not be obtained.
	//
	// The users structure is documented below.
	//
	// <a name="SQLServerDatabasePrivilege_CreateUser"></a>
	// The `users` block supports:
	Users SqlserverDatabasePrivilegeUserArrayInput
}

func (SqlserverDatabasePrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverDatabasePrivilegeState)(nil)).Elem()
}

type sqlserverDatabasePrivilegeArgs struct {
	// Specifies the database name.
	//
	// Changing this parameter will create a new resource.
	DbName string `pulumi:"dbName"`
	// Specifies the ID of the RDS SQL Server instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the account that associated with the database
	//
	// -> **NOTE:** The account of **rdsuser** is system account, it can not be managed, and it will not be obtained.
	//
	// The users structure is documented below.
	//
	// <a name="SQLServerDatabasePrivilege_CreateUser"></a>
	// The `users` block supports:
	Users []SqlserverDatabasePrivilegeUser `pulumi:"users"`
}

// The set of arguments for constructing a SqlserverDatabasePrivilege resource.
type SqlserverDatabasePrivilegeArgs struct {
	// Specifies the database name.
	//
	// Changing this parameter will create a new resource.
	DbName pulumi.StringInput
	// Specifies the ID of the RDS SQL Server instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the account that associated with the database
	//
	// -> **NOTE:** The account of **rdsuser** is system account, it can not be managed, and it will not be obtained.
	//
	// The users structure is documented below.
	//
	// <a name="SQLServerDatabasePrivilege_CreateUser"></a>
	// The `users` block supports:
	Users SqlserverDatabasePrivilegeUserArrayInput
}

func (SqlserverDatabasePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverDatabasePrivilegeArgs)(nil)).Elem()
}

type SqlserverDatabasePrivilegeInput interface {
	pulumi.Input

	ToSqlserverDatabasePrivilegeOutput() SqlserverDatabasePrivilegeOutput
	ToSqlserverDatabasePrivilegeOutputWithContext(ctx context.Context) SqlserverDatabasePrivilegeOutput
}

func (*SqlserverDatabasePrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverDatabasePrivilege)(nil)).Elem()
}

func (i *SqlserverDatabasePrivilege) ToSqlserverDatabasePrivilegeOutput() SqlserverDatabasePrivilegeOutput {
	return i.ToSqlserverDatabasePrivilegeOutputWithContext(context.Background())
}

func (i *SqlserverDatabasePrivilege) ToSqlserverDatabasePrivilegeOutputWithContext(ctx context.Context) SqlserverDatabasePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverDatabasePrivilegeOutput)
}

// SqlserverDatabasePrivilegeArrayInput is an input type that accepts SqlserverDatabasePrivilegeArray and SqlserverDatabasePrivilegeArrayOutput values.
// You can construct a concrete instance of `SqlserverDatabasePrivilegeArrayInput` via:
//
//	SqlserverDatabasePrivilegeArray{ SqlserverDatabasePrivilegeArgs{...} }
type SqlserverDatabasePrivilegeArrayInput interface {
	pulumi.Input

	ToSqlserverDatabasePrivilegeArrayOutput() SqlserverDatabasePrivilegeArrayOutput
	ToSqlserverDatabasePrivilegeArrayOutputWithContext(context.Context) SqlserverDatabasePrivilegeArrayOutput
}

type SqlserverDatabasePrivilegeArray []SqlserverDatabasePrivilegeInput

func (SqlserverDatabasePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverDatabasePrivilege)(nil)).Elem()
}

func (i SqlserverDatabasePrivilegeArray) ToSqlserverDatabasePrivilegeArrayOutput() SqlserverDatabasePrivilegeArrayOutput {
	return i.ToSqlserverDatabasePrivilegeArrayOutputWithContext(context.Background())
}

func (i SqlserverDatabasePrivilegeArray) ToSqlserverDatabasePrivilegeArrayOutputWithContext(ctx context.Context) SqlserverDatabasePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverDatabasePrivilegeArrayOutput)
}

// SqlserverDatabasePrivilegeMapInput is an input type that accepts SqlserverDatabasePrivilegeMap and SqlserverDatabasePrivilegeMapOutput values.
// You can construct a concrete instance of `SqlserverDatabasePrivilegeMapInput` via:
//
//	SqlserverDatabasePrivilegeMap{ "key": SqlserverDatabasePrivilegeArgs{...} }
type SqlserverDatabasePrivilegeMapInput interface {
	pulumi.Input

	ToSqlserverDatabasePrivilegeMapOutput() SqlserverDatabasePrivilegeMapOutput
	ToSqlserverDatabasePrivilegeMapOutputWithContext(context.Context) SqlserverDatabasePrivilegeMapOutput
}

type SqlserverDatabasePrivilegeMap map[string]SqlserverDatabasePrivilegeInput

func (SqlserverDatabasePrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverDatabasePrivilege)(nil)).Elem()
}

func (i SqlserverDatabasePrivilegeMap) ToSqlserverDatabasePrivilegeMapOutput() SqlserverDatabasePrivilegeMapOutput {
	return i.ToSqlserverDatabasePrivilegeMapOutputWithContext(context.Background())
}

func (i SqlserverDatabasePrivilegeMap) ToSqlserverDatabasePrivilegeMapOutputWithContext(ctx context.Context) SqlserverDatabasePrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverDatabasePrivilegeMapOutput)
}

type SqlserverDatabasePrivilegeOutput struct{ *pulumi.OutputState }

func (SqlserverDatabasePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverDatabasePrivilege)(nil)).Elem()
}

func (o SqlserverDatabasePrivilegeOutput) ToSqlserverDatabasePrivilegeOutput() SqlserverDatabasePrivilegeOutput {
	return o
}

func (o SqlserverDatabasePrivilegeOutput) ToSqlserverDatabasePrivilegeOutputWithContext(ctx context.Context) SqlserverDatabasePrivilegeOutput {
	return o
}

// Specifies the database name.
//
// Changing this parameter will create a new resource.
func (o SqlserverDatabasePrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverDatabasePrivilege) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// Specifies the ID of the RDS SQL Server instance.
//
// Changing this parameter will create a new resource.
func (o SqlserverDatabasePrivilegeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverDatabasePrivilege) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o SqlserverDatabasePrivilegeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverDatabasePrivilege) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the account that associated with the database
//
// -> **NOTE:** The account of **rdsuser** is system account, it can not be managed, and it will not be obtained.
//
// The users structure is documented below.
//
// <a name="SQLServerDatabasePrivilege_CreateUser"></a>
// The `users` block supports:
func (o SqlserverDatabasePrivilegeOutput) Users() SqlserverDatabasePrivilegeUserArrayOutput {
	return o.ApplyT(func(v *SqlserverDatabasePrivilege) SqlserverDatabasePrivilegeUserArrayOutput { return v.Users }).(SqlserverDatabasePrivilegeUserArrayOutput)
}

type SqlserverDatabasePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (SqlserverDatabasePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverDatabasePrivilege)(nil)).Elem()
}

func (o SqlserverDatabasePrivilegeArrayOutput) ToSqlserverDatabasePrivilegeArrayOutput() SqlserverDatabasePrivilegeArrayOutput {
	return o
}

func (o SqlserverDatabasePrivilegeArrayOutput) ToSqlserverDatabasePrivilegeArrayOutputWithContext(ctx context.Context) SqlserverDatabasePrivilegeArrayOutput {
	return o
}

func (o SqlserverDatabasePrivilegeArrayOutput) Index(i pulumi.IntInput) SqlserverDatabasePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlserverDatabasePrivilege {
		return vs[0].([]*SqlserverDatabasePrivilege)[vs[1].(int)]
	}).(SqlserverDatabasePrivilegeOutput)
}

type SqlserverDatabasePrivilegeMapOutput struct{ *pulumi.OutputState }

func (SqlserverDatabasePrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverDatabasePrivilege)(nil)).Elem()
}

func (o SqlserverDatabasePrivilegeMapOutput) ToSqlserverDatabasePrivilegeMapOutput() SqlserverDatabasePrivilegeMapOutput {
	return o
}

func (o SqlserverDatabasePrivilegeMapOutput) ToSqlserverDatabasePrivilegeMapOutputWithContext(ctx context.Context) SqlserverDatabasePrivilegeMapOutput {
	return o
}

func (o SqlserverDatabasePrivilegeMapOutput) MapIndex(k pulumi.StringInput) SqlserverDatabasePrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlserverDatabasePrivilege {
		return vs[0].(map[string]*SqlserverDatabasePrivilege)[vs[1].(string)]
	}).(SqlserverDatabasePrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverDatabasePrivilegeInput)(nil)).Elem(), &SqlserverDatabasePrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverDatabasePrivilegeArrayInput)(nil)).Elem(), SqlserverDatabasePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverDatabasePrivilegeMapInput)(nil)).Elem(), SqlserverDatabasePrivilegeMap{})
	pulumi.RegisterOutputType(SqlserverDatabasePrivilegeOutput{})
	pulumi.RegisterOutputType(SqlserverDatabasePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(SqlserverDatabasePrivilegeMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages CSS cluster resource within SberCloud
 *
 * ## Example Usage
 *
 * ### create a cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.requireObject<any>("availabilityZone");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const cluster = new sbercloud.css.Cluster("cluster", {
 *     name: "terraform_test_cluster",
 *     engineVersion: "7.10.2",
 *     essNodeConfig: {
 *         flavor: "ess.spec-4u8g",
 *         instanceNumber: 1,
 *         volume: {
 *             volumeType: "HIGH",
 *             size: 40,
 *         },
 *     },
 *     availabilityZone: availabilityZone,
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     securityGroupId: secgroupId,
 * });
 * ```
 *
 * ### create a cluster with ess-data node and master node
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.requireObject<any>("availabilityZone");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const cluster = new sbercloud.css.Cluster("cluster", {
 *     name: "terraform_test_cluster",
 *     engineVersion: "7.10.2",
 *     essNodeConfig: {
 *         flavor: "ess.spec-4u8g",
 *         instanceNumber: 1,
 *         volume: {
 *             volumeType: "HIGH",
 *             size: 40,
 *         },
 *     },
 *     masterNodeConfig: {
 *         flavor: "ess.spec-4u8g",
 *         instanceNumber: 3,
 *         volume: {
 *             volumeType: "HIGH",
 *             size: 40,
 *         },
 *     },
 *     availabilityZone: availabilityZone,
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     securityGroupId: secgroupId,
 * });
 * ```
 *
 * ### create a cluster with ess-data node and cold node use local disk
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const availabilityZone = config.requireObject<any>("availabilityZone");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const cluster = new sbercloud.css.Cluster("cluster", {
 *     name: "terraform_test_cluster",
 *     engineVersion: "7.10.2",
 *     essNodeConfig: {
 *         flavor: "ess.spec-ds.xlarge.8",
 *         instanceNumber: 1,
 *     },
 *     coldNodeConfig: {
 *         flavor: "ess.spec-ds.2xlarge.8",
 *         instanceNumber: 2,
 *     },
 *     availabilityZone: availabilityZone,
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     securityGroupId: secgroupId,
 * });
 * ```
 *
 * ## Import
 *
 * The CSS cluster can be imported by `id`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Css/cluster:Cluster test <id>
 * ```
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Css/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Specifies whether auto renew is enabled.
     * The valid values are **true** and **false**, defaults to **false**.
     *
     * <a name="Css_ess_node_config"></a>
     * The `essNodeConfig` and `coldNodeConfig` block supports:
     */
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * Specifies the availability zone name.
     * Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
     * than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
     * distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
     * between node quantity in any two AZs is **1** at most.
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    /**
     * Whether the snapshot function is enabled.
     */
    declare public /*out*/ readonly backupAvailable: pulumi.Output<boolean>;
    /**
     * Specifies the advanced backup policy. Structure is documented below.
     */
    declare public readonly backupStrategy: pulumi.Output<outputs.Css.ClusterBackupStrategy | undefined>;
    /**
     * The resource ID of bandwidth.
     */
    declare public /*out*/ readonly bandwidthResourceId: pulumi.Output<string>;
    /**
     * Specifies the charging mode of the cluster.
     * Valid value is **postPaid**, defaults to **postPaid**.
     */
    declare public readonly chargingMode: pulumi.Output<string>;
    /**
     * Specifies the config of client node.
     * The clientNodeConfig structure is documented below.
     */
    declare public readonly clientNodeConfig: pulumi.Output<outputs.Css.ClusterClientNodeConfig | undefined>;
    /**
     * Specifies the config of cold data node.
     * The coldNodeConfig structure is documented below.
     */
    declare public readonly coldNodeConfig: pulumi.Output<outputs.Css.ClusterColdNodeConfig | undefined>;
    /**
     * schema: Deprecated; use createdAt instead
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * Time when a cluster is created. The format is ISO8601: CCYY-MM-DDThh:mm:ss.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Whether disks are encrypted.
     */
    declare public /*out*/ readonly diskEncrypted: pulumi.Output<boolean>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    /**
     * The IP address and port number.
     */
    declare public /*out*/ readonly endpoint: pulumi.Output<string>;
    /**
     * Specifies the engine type. The valid value can be **elasticsearch** or **opensearch**.
     * Defaults to **elasticsearch**. Changing this parameter will create a new resource.
     */
    declare public readonly engineType: pulumi.Output<string | undefined>;
    /**
     * Specifies the engine version.
     */
    declare public readonly engineVersion: pulumi.Output<string>;
    /**
     * Specifies the enterprise project id of the css cluster, The value **0**
     * indicates the default enterprise project.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * Specifies the config of data node.
     * The essNodeConfig structure is documented below.
     */
    declare public readonly essNodeConfig: pulumi.Output<outputs.Css.ClusterEssNodeConfig>;
    /**
     * @deprecated please use ess_node_config.instance_number instead
     */
    declare public readonly expectNodeNum: pulumi.Output<number>;
    /**
     * Specifies whether to enable HTTPS. Defaults to **false**.
     * When `httpsEnabled` is set to **true**, the `securityMode` needs to be set to **true**.
     * Changing this parameter will create a new resource.
     */
    declare public readonly httpsEnabled: pulumi.Output<boolean>;
    /**
     * Whether a cluster is billed on the yearly/monthly mode.
     */
    declare public /*out*/ readonly isPeriod: pulumi.Output<boolean>;
    /**
     * Specifies Kibana public network access information.
     * This parameter is valid only when securityMode is set to **true**.
     * The kibanaPublicAccess structure is documented below.
     */
    declare public readonly kibanaPublicAccess: pulumi.Output<outputs.Css.ClusterKibanaPublicAccess | undefined>;
    /**
     * Specifies the config of master node.
     * The masterNodeConfig structure is documented below.
     */
    declare public readonly masterNodeConfig: pulumi.Output<outputs.Css.ClusterMasterNodeConfig | undefined>;
    /**
     * Specifies the cluster name. It contains `4` to `32` characters.
     * Only letters, digits, hyphens (-), and underscores (_) are allowed. The value must start with a letter.
     * Changing this parameter will create a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * @deprecated please use essNodeConfig instead
     */
    declare public readonly nodeConfig: pulumi.Output<outputs.Css.ClusterNodeConfig>;
    /**
     * List of node objects.
     * The nodes structure is documented below.
     */
    declare public /*out*/ readonly nodes: pulumi.Output<outputs.Css.ClusterNode[]>;
    /**
     * Specifies the password of the cluster administrator in security mode.
     * This parameter is mandatory only when `securityMode` is set to true.
     * The administrator password must meet the following requirements:
     * + The password can contain 8 to 32 characters.
     * + The password must contain at least 3 of the following character types: uppercase letters, lowercase letters, digits,
     * and special characters (~!@#$%^&*()-_=+\\|[{}];:,<.>/?).
     */
    declare public readonly password: pulumi.Output<string | undefined>;
    /**
     * Specifies the charging period of the instance.
     * If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
     * If `periodUnit` is set to **year**, the value ranges from `1` to `9`.
     *
     * > **NOTE:** `chargingMode`, `periodUnit`, `period` can only be updated when changing
     * from **postPaid** to **prePaid** billing mode.
     */
    declare public readonly period: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the instance.
     * Valid values are **month** and **year**.
     */
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * Specifies the public network access information.
     * The publicAccess structure is documented below.
     */
    declare public readonly publicAccess: pulumi.Output<outputs.Css.ClusterPublicAccess | undefined>;
    /**
     * Specifies the region in which to create the cluster resource. If omitted, the
     * provider-level region will be used. Changing this creates a new cluster resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the security group ID.
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    /**
     * Specifies whether to enable authentication.
     * The value can be **true** or **false**. Authentication is disabled by default.
     * + **true:** Authentication is enabled for the cluster.
     * + **false:** Authentication is disabled for the cluster.
     *
     * > **Note:** This parameter is supported in clusters 6.5.4 or later. Exercise caution when performing this operation.
     * The cluster will be restarted to apply the changes. Services will be interrupted for a while.
     * After the cluster is restarted, the authentication mode for invoking the cluster changes.
     * You need to adjust the authentication mode accordingly.
     */
    declare public readonly securityMode: pulumi.Output<boolean | undefined>;
    /**
     * Instance status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Specifies the Subnet ID.
     * Changing this parameter will create a new resource.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * The key/value pairs to associate with the cluster.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Time when a cluster is updated. The format is ISO8601: CCYY-MM-DDThh:mm:ss.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * Specifies the VPC ID.
     * Changing this parameter will create a new resource.
     */
    declare public readonly vpcId: pulumi.Output<string>;
    /**
     * Specifies the VPC endpoint service information.
     * The vpcepEndpoint structure is documented below.
     */
    declare public readonly vpcepEndpoint: pulumi.Output<outputs.Css.ClusterVpcepEndpoint | undefined>;
    /**
     * The VPC endpoint service ID.
     */
    declare public /*out*/ readonly vpcepEndpointId: pulumi.Output<string>;
    /**
     * The private IP address of VPC endpoint service.
     */
    declare public /*out*/ readonly vpcepIp: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["backupAvailable"] = state?.backupAvailable;
            resourceInputs["backupStrategy"] = state?.backupStrategy;
            resourceInputs["bandwidthResourceId"] = state?.bandwidthResourceId;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["clientNodeConfig"] = state?.clientNodeConfig;
            resourceInputs["coldNodeConfig"] = state?.coldNodeConfig;
            resourceInputs["created"] = state?.created;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["diskEncrypted"] = state?.diskEncrypted;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["endpoint"] = state?.endpoint;
            resourceInputs["engineType"] = state?.engineType;
            resourceInputs["engineVersion"] = state?.engineVersion;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["essNodeConfig"] = state?.essNodeConfig;
            resourceInputs["expectNodeNum"] = state?.expectNodeNum;
            resourceInputs["httpsEnabled"] = state?.httpsEnabled;
            resourceInputs["isPeriod"] = state?.isPeriod;
            resourceInputs["kibanaPublicAccess"] = state?.kibanaPublicAccess;
            resourceInputs["masterNodeConfig"] = state?.masterNodeConfig;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeConfig"] = state?.nodeConfig;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["password"] = state?.password;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["publicAccess"] = state?.publicAccess;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["securityMode"] = state?.securityMode;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["vpcepEndpoint"] = state?.vpcepEndpoint;
            resourceInputs["vpcepEndpointId"] = state?.vpcepEndpointId;
            resourceInputs["vpcepIp"] = state?.vpcepIp;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.engineVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineVersion'");
            }
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["backupStrategy"] = args?.backupStrategy;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["clientNodeConfig"] = args?.clientNodeConfig;
            resourceInputs["coldNodeConfig"] = args?.coldNodeConfig;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["engineType"] = args?.engineType;
            resourceInputs["engineVersion"] = args?.engineVersion;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["essNodeConfig"] = args?.essNodeConfig;
            resourceInputs["expectNodeNum"] = args?.expectNodeNum;
            resourceInputs["httpsEnabled"] = args?.httpsEnabled;
            resourceInputs["kibanaPublicAccess"] = args?.kibanaPublicAccess;
            resourceInputs["masterNodeConfig"] = args?.masterNodeConfig;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeConfig"] = args?.nodeConfig;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["publicAccess"] = args?.publicAccess;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["securityMode"] = args?.securityMode;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["vpcepEndpoint"] = args?.vpcepEndpoint;
            resourceInputs["backupAvailable"] = undefined /*out*/;
            resourceInputs["bandwidthResourceId"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["diskEncrypted"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["isPeriod"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["vpcepEndpointId"] = undefined /*out*/;
            resourceInputs["vpcepIp"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Specifies whether auto renew is enabled.
     * The valid values are **true** and **false**, defaults to **false**.
     *
     * <a name="Css_ess_node_config"></a>
     * The `essNodeConfig` and `coldNodeConfig` block supports:
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the availability zone name.
     * Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
     * than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
     * distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
     * between node quantity in any two AZs is **1** at most.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Whether the snapshot function is enabled.
     */
    backupAvailable?: pulumi.Input<boolean>;
    /**
     * Specifies the advanced backup policy. Structure is documented below.
     */
    backupStrategy?: pulumi.Input<inputs.Css.ClusterBackupStrategy>;
    /**
     * The resource ID of bandwidth.
     */
    bandwidthResourceId?: pulumi.Input<string>;
    /**
     * Specifies the charging mode of the cluster.
     * Valid value is **postPaid**, defaults to **postPaid**.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the config of client node.
     * The clientNodeConfig structure is documented below.
     */
    clientNodeConfig?: pulumi.Input<inputs.Css.ClusterClientNodeConfig>;
    /**
     * Specifies the config of cold data node.
     * The coldNodeConfig structure is documented below.
     */
    coldNodeConfig?: pulumi.Input<inputs.Css.ClusterColdNodeConfig>;
    /**
     * schema: Deprecated; use createdAt instead
     */
    created?: pulumi.Input<string>;
    /**
     * Time when a cluster is created. The format is ISO8601: CCYY-MM-DDThh:mm:ss.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether disks are encrypted.
     */
    diskEncrypted?: pulumi.Input<boolean>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * The IP address and port number.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Specifies the engine type. The valid value can be **elasticsearch** or **opensearch**.
     * Defaults to **elasticsearch**. Changing this parameter will create a new resource.
     */
    engineType?: pulumi.Input<string>;
    /**
     * Specifies the engine version.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project id of the css cluster, The value **0**
     * indicates the default enterprise project.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the config of data node.
     * The essNodeConfig structure is documented below.
     */
    essNodeConfig?: pulumi.Input<inputs.Css.ClusterEssNodeConfig>;
    /**
     * @deprecated please use ess_node_config.instance_number instead
     */
    expectNodeNum?: pulumi.Input<number>;
    /**
     * Specifies whether to enable HTTPS. Defaults to **false**.
     * When `httpsEnabled` is set to **true**, the `securityMode` needs to be set to **true**.
     * Changing this parameter will create a new resource.
     */
    httpsEnabled?: pulumi.Input<boolean>;
    /**
     * Whether a cluster is billed on the yearly/monthly mode.
     */
    isPeriod?: pulumi.Input<boolean>;
    /**
     * Specifies Kibana public network access information.
     * This parameter is valid only when securityMode is set to **true**.
     * The kibanaPublicAccess structure is documented below.
     */
    kibanaPublicAccess?: pulumi.Input<inputs.Css.ClusterKibanaPublicAccess>;
    /**
     * Specifies the config of master node.
     * The masterNodeConfig structure is documented below.
     */
    masterNodeConfig?: pulumi.Input<inputs.Css.ClusterMasterNodeConfig>;
    /**
     * Specifies the cluster name. It contains `4` to `32` characters.
     * Only letters, digits, hyphens (-), and underscores (_) are allowed. The value must start with a letter.
     * Changing this parameter will create a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated please use essNodeConfig instead
     */
    nodeConfig?: pulumi.Input<inputs.Css.ClusterNodeConfig>;
    /**
     * List of node objects.
     * The nodes structure is documented below.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.Css.ClusterNode>[]>;
    /**
     * Specifies the password of the cluster administrator in security mode.
     * This parameter is mandatory only when `securityMode` is set to true.
     * The administrator password must meet the following requirements:
     * + The password can contain 8 to 32 characters.
     * + The password must contain at least 3 of the following character types: uppercase letters, lowercase letters, digits,
     * and special characters (~!@#$%^&*()-_=+\\|[{}];:,<.>/?).
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the instance.
     * If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
     * If `periodUnit` is set to **year**, the value ranges from `1` to `9`.
     *
     * > **NOTE:** `chargingMode`, `periodUnit`, `period` can only be updated when changing
     * from **postPaid** to **prePaid** billing mode.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the instance.
     * Valid values are **month** and **year**.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the public network access information.
     * The publicAccess structure is documented below.
     */
    publicAccess?: pulumi.Input<inputs.Css.ClusterPublicAccess>;
    /**
     * Specifies the region in which to create the cluster resource. If omitted, the
     * provider-level region will be used. Changing this creates a new cluster resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable authentication.
     * The value can be **true** or **false**. Authentication is disabled by default.
     * + **true:** Authentication is enabled for the cluster.
     * + **false:** Authentication is disabled for the cluster.
     *
     * > **Note:** This parameter is supported in clusters 6.5.4 or later. Exercise caution when performing this operation.
     * The cluster will be restarted to apply the changes. Services will be interrupted for a while.
     * After the cluster is restarted, the authentication mode for invoking the cluster changes.
     * You need to adjust the authentication mode accordingly.
     */
    securityMode?: pulumi.Input<boolean>;
    /**
     * Instance status.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the Subnet ID.
     * Changing this parameter will create a new resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Time when a cluster is updated. The format is ISO8601: CCYY-MM-DDThh:mm:ss.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Specifies the VPC ID.
     * Changing this parameter will create a new resource.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Specifies the VPC endpoint service information.
     * The vpcepEndpoint structure is documented below.
     */
    vpcepEndpoint?: pulumi.Input<inputs.Css.ClusterVpcepEndpoint>;
    /**
     * The VPC endpoint service ID.
     */
    vpcepEndpointId?: pulumi.Input<string>;
    /**
     * The private IP address of VPC endpoint service.
     */
    vpcepIp?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Specifies whether auto renew is enabled.
     * The valid values are **true** and **false**, defaults to **false**.
     *
     * <a name="Css_ess_node_config"></a>
     * The `essNodeConfig` and `coldNodeConfig` block supports:
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the availability zone name.
     * Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
     * than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
     * distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
     * between node quantity in any two AZs is **1** at most.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the advanced backup policy. Structure is documented below.
     */
    backupStrategy?: pulumi.Input<inputs.Css.ClusterBackupStrategy>;
    /**
     * Specifies the charging mode of the cluster.
     * Valid value is **postPaid**, defaults to **postPaid**.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the config of client node.
     * The clientNodeConfig structure is documented below.
     */
    clientNodeConfig?: pulumi.Input<inputs.Css.ClusterClientNodeConfig>;
    /**
     * Specifies the config of cold data node.
     * The coldNodeConfig structure is documented below.
     */
    coldNodeConfig?: pulumi.Input<inputs.Css.ClusterColdNodeConfig>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the engine type. The valid value can be **elasticsearch** or **opensearch**.
     * Defaults to **elasticsearch**. Changing this parameter will create a new resource.
     */
    engineType?: pulumi.Input<string>;
    /**
     * Specifies the engine version.
     */
    engineVersion: pulumi.Input<string>;
    /**
     * Specifies the enterprise project id of the css cluster, The value **0**
     * indicates the default enterprise project.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the config of data node.
     * The essNodeConfig structure is documented below.
     */
    essNodeConfig?: pulumi.Input<inputs.Css.ClusterEssNodeConfig>;
    /**
     * @deprecated please use ess_node_config.instance_number instead
     */
    expectNodeNum?: pulumi.Input<number>;
    /**
     * Specifies whether to enable HTTPS. Defaults to **false**.
     * When `httpsEnabled` is set to **true**, the `securityMode` needs to be set to **true**.
     * Changing this parameter will create a new resource.
     */
    httpsEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies Kibana public network access information.
     * This parameter is valid only when securityMode is set to **true**.
     * The kibanaPublicAccess structure is documented below.
     */
    kibanaPublicAccess?: pulumi.Input<inputs.Css.ClusterKibanaPublicAccess>;
    /**
     * Specifies the config of master node.
     * The masterNodeConfig structure is documented below.
     */
    masterNodeConfig?: pulumi.Input<inputs.Css.ClusterMasterNodeConfig>;
    /**
     * Specifies the cluster name. It contains `4` to `32` characters.
     * Only letters, digits, hyphens (-), and underscores (_) are allowed. The value must start with a letter.
     * Changing this parameter will create a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated please use essNodeConfig instead
     */
    nodeConfig?: pulumi.Input<inputs.Css.ClusterNodeConfig>;
    /**
     * Specifies the password of the cluster administrator in security mode.
     * This parameter is mandatory only when `securityMode` is set to true.
     * The administrator password must meet the following requirements:
     * + The password can contain 8 to 32 characters.
     * + The password must contain at least 3 of the following character types: uppercase letters, lowercase letters, digits,
     * and special characters (~!@#$%^&*()-_=+\\|[{}];:,<.>/?).
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the instance.
     * If `periodUnit` is set to **month**, the value ranges from `1` to `9`.
     * If `periodUnit` is set to **year**, the value ranges from `1` to `9`.
     *
     * > **NOTE:** `chargingMode`, `periodUnit`, `period` can only be updated when changing
     * from **postPaid** to **prePaid** billing mode.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the instance.
     * Valid values are **month** and **year**.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the public network access information.
     * The publicAccess structure is documented below.
     */
    publicAccess?: pulumi.Input<inputs.Css.ClusterPublicAccess>;
    /**
     * Specifies the region in which to create the cluster resource. If omitted, the
     * provider-level region will be used. Changing this creates a new cluster resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the security group ID.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable authentication.
     * The value can be **true** or **false**. Authentication is disabled by default.
     * + **true:** Authentication is enabled for the cluster.
     * + **false:** Authentication is disabled for the cluster.
     *
     * > **Note:** This parameter is supported in clusters 6.5.4 or later. Exercise caution when performing this operation.
     * The cluster will be restarted to apply the changes. Services will be interrupted for a while.
     * After the cluster is restarted, the authentication mode for invoking the cluster changes.
     * You need to adjust the authentication mode accordingly.
     */
    securityMode?: pulumi.Input<boolean>;
    /**
     * Specifies the Subnet ID.
     * Changing this parameter will create a new resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the VPC ID.
     * Changing this parameter will create a new resource.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Specifies the VPC endpoint service information.
     * The vpcepEndpoint structure is documented below.
     */
    vpcepEndpoint?: pulumi.Input<inputs.Css.ClusterVpcepEndpoint>;
}

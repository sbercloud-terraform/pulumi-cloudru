// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type AddonValues struct {
	Basic      map[string]string `pulumi:"basic"`
	BasicJson  *string           `pulumi:"basicJson"`
	Custom     map[string]string `pulumi:"custom"`
	CustomJson *string           `pulumi:"customJson"`
	Flavor     map[string]string `pulumi:"flavor"`
	FlavorJson *string           `pulumi:"flavorJson"`
}

// AddonValuesInput is an input type that accepts AddonValuesArgs and AddonValuesOutput values.
// You can construct a concrete instance of `AddonValuesInput` via:
//
//	AddonValuesArgs{...}
type AddonValuesInput interface {
	pulumi.Input

	ToAddonValuesOutput() AddonValuesOutput
	ToAddonValuesOutputWithContext(context.Context) AddonValuesOutput
}

type AddonValuesArgs struct {
	Basic      pulumi.StringMapInput `pulumi:"basic"`
	BasicJson  pulumi.StringPtrInput `pulumi:"basicJson"`
	Custom     pulumi.StringMapInput `pulumi:"custom"`
	CustomJson pulumi.StringPtrInput `pulumi:"customJson"`
	Flavor     pulumi.StringMapInput `pulumi:"flavor"`
	FlavorJson pulumi.StringPtrInput `pulumi:"flavorJson"`
}

func (AddonValuesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonValues)(nil)).Elem()
}

func (i AddonValuesArgs) ToAddonValuesOutput() AddonValuesOutput {
	return i.ToAddonValuesOutputWithContext(context.Background())
}

func (i AddonValuesArgs) ToAddonValuesOutputWithContext(ctx context.Context) AddonValuesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonValuesOutput)
}

func (i AddonValuesArgs) ToAddonValuesPtrOutput() AddonValuesPtrOutput {
	return i.ToAddonValuesPtrOutputWithContext(context.Background())
}

func (i AddonValuesArgs) ToAddonValuesPtrOutputWithContext(ctx context.Context) AddonValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonValuesOutput).ToAddonValuesPtrOutputWithContext(ctx)
}

// AddonValuesPtrInput is an input type that accepts AddonValuesArgs, AddonValuesPtr and AddonValuesPtrOutput values.
// You can construct a concrete instance of `AddonValuesPtrInput` via:
//
//	        AddonValuesArgs{...}
//
//	or:
//
//	        nil
type AddonValuesPtrInput interface {
	pulumi.Input

	ToAddonValuesPtrOutput() AddonValuesPtrOutput
	ToAddonValuesPtrOutputWithContext(context.Context) AddonValuesPtrOutput
}

type addonValuesPtrType AddonValuesArgs

func AddonValuesPtr(v *AddonValuesArgs) AddonValuesPtrInput {
	return (*addonValuesPtrType)(v)
}

func (*addonValuesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonValues)(nil)).Elem()
}

func (i *addonValuesPtrType) ToAddonValuesPtrOutput() AddonValuesPtrOutput {
	return i.ToAddonValuesPtrOutputWithContext(context.Background())
}

func (i *addonValuesPtrType) ToAddonValuesPtrOutputWithContext(ctx context.Context) AddonValuesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AddonValuesPtrOutput)
}

type AddonValuesOutput struct{ *pulumi.OutputState }

func (AddonValuesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddonValues)(nil)).Elem()
}

func (o AddonValuesOutput) ToAddonValuesOutput() AddonValuesOutput {
	return o
}

func (o AddonValuesOutput) ToAddonValuesOutputWithContext(ctx context.Context) AddonValuesOutput {
	return o
}

func (o AddonValuesOutput) ToAddonValuesPtrOutput() AddonValuesPtrOutput {
	return o.ToAddonValuesPtrOutputWithContext(context.Background())
}

func (o AddonValuesOutput) ToAddonValuesPtrOutputWithContext(ctx context.Context) AddonValuesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AddonValues) *AddonValues {
		return &v
	}).(AddonValuesPtrOutput)
}

func (o AddonValuesOutput) Basic() pulumi.StringMapOutput {
	return o.ApplyT(func(v AddonValues) map[string]string { return v.Basic }).(pulumi.StringMapOutput)
}

func (o AddonValuesOutput) BasicJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddonValues) *string { return v.BasicJson }).(pulumi.StringPtrOutput)
}

func (o AddonValuesOutput) Custom() pulumi.StringMapOutput {
	return o.ApplyT(func(v AddonValues) map[string]string { return v.Custom }).(pulumi.StringMapOutput)
}

func (o AddonValuesOutput) CustomJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddonValues) *string { return v.CustomJson }).(pulumi.StringPtrOutput)
}

func (o AddonValuesOutput) Flavor() pulumi.StringMapOutput {
	return o.ApplyT(func(v AddonValues) map[string]string { return v.Flavor }).(pulumi.StringMapOutput)
}

func (o AddonValuesOutput) FlavorJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddonValues) *string { return v.FlavorJson }).(pulumi.StringPtrOutput)
}

type AddonValuesPtrOutput struct{ *pulumi.OutputState }

func (AddonValuesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AddonValues)(nil)).Elem()
}

func (o AddonValuesPtrOutput) ToAddonValuesPtrOutput() AddonValuesPtrOutput {
	return o
}

func (o AddonValuesPtrOutput) ToAddonValuesPtrOutputWithContext(ctx context.Context) AddonValuesPtrOutput {
	return o
}

func (o AddonValuesPtrOutput) Elem() AddonValuesOutput {
	return o.ApplyT(func(v *AddonValues) AddonValues {
		if v != nil {
			return *v
		}
		var ret AddonValues
		return ret
	}).(AddonValuesOutput)
}

func (o AddonValuesPtrOutput) Basic() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AddonValues) map[string]string {
		if v == nil {
			return nil
		}
		return v.Basic
	}).(pulumi.StringMapOutput)
}

func (o AddonValuesPtrOutput) BasicJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonValues) *string {
		if v == nil {
			return nil
		}
		return v.BasicJson
	}).(pulumi.StringPtrOutput)
}

func (o AddonValuesPtrOutput) Custom() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AddonValues) map[string]string {
		if v == nil {
			return nil
		}
		return v.Custom
	}).(pulumi.StringMapOutput)
}

func (o AddonValuesPtrOutput) CustomJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonValues) *string {
		if v == nil {
			return nil
		}
		return v.CustomJson
	}).(pulumi.StringPtrOutput)
}

func (o AddonValuesPtrOutput) Flavor() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AddonValues) map[string]string {
		if v == nil {
			return nil
		}
		return v.Flavor
	}).(pulumi.StringMapOutput)
}

func (o AddonValuesPtrOutput) FlavorJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AddonValues) *string {
		if v == nil {
			return nil
		}
		return v.FlavorJson
	}).(pulumi.StringPtrOutput)
}

type ClusterCertificateCluster struct {
	CertificateAuthorityData *string `pulumi:"certificateAuthorityData"`
	Name                     *string `pulumi:"name"`
	Server                   *string `pulumi:"server"`
}

// ClusterCertificateClusterInput is an input type that accepts ClusterCertificateClusterArgs and ClusterCertificateClusterOutput values.
// You can construct a concrete instance of `ClusterCertificateClusterInput` via:
//
//	ClusterCertificateClusterArgs{...}
type ClusterCertificateClusterInput interface {
	pulumi.Input

	ToClusterCertificateClusterOutput() ClusterCertificateClusterOutput
	ToClusterCertificateClusterOutputWithContext(context.Context) ClusterCertificateClusterOutput
}

type ClusterCertificateClusterArgs struct {
	CertificateAuthorityData pulumi.StringPtrInput `pulumi:"certificateAuthorityData"`
	Name                     pulumi.StringPtrInput `pulumi:"name"`
	Server                   pulumi.StringPtrInput `pulumi:"server"`
}

func (ClusterCertificateClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCluster)(nil)).Elem()
}

func (i ClusterCertificateClusterArgs) ToClusterCertificateClusterOutput() ClusterCertificateClusterOutput {
	return i.ToClusterCertificateClusterOutputWithContext(context.Background())
}

func (i ClusterCertificateClusterArgs) ToClusterCertificateClusterOutputWithContext(ctx context.Context) ClusterCertificateClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateClusterOutput)
}

// ClusterCertificateClusterArrayInput is an input type that accepts ClusterCertificateClusterArray and ClusterCertificateClusterArrayOutput values.
// You can construct a concrete instance of `ClusterCertificateClusterArrayInput` via:
//
//	ClusterCertificateClusterArray{ ClusterCertificateClusterArgs{...} }
type ClusterCertificateClusterArrayInput interface {
	pulumi.Input

	ToClusterCertificateClusterArrayOutput() ClusterCertificateClusterArrayOutput
	ToClusterCertificateClusterArrayOutputWithContext(context.Context) ClusterCertificateClusterArrayOutput
}

type ClusterCertificateClusterArray []ClusterCertificateClusterInput

func (ClusterCertificateClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateCluster)(nil)).Elem()
}

func (i ClusterCertificateClusterArray) ToClusterCertificateClusterArrayOutput() ClusterCertificateClusterArrayOutput {
	return i.ToClusterCertificateClusterArrayOutputWithContext(context.Background())
}

func (i ClusterCertificateClusterArray) ToClusterCertificateClusterArrayOutputWithContext(ctx context.Context) ClusterCertificateClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateClusterArrayOutput)
}

type ClusterCertificateClusterOutput struct{ *pulumi.OutputState }

func (ClusterCertificateClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateCluster)(nil)).Elem()
}

func (o ClusterCertificateClusterOutput) ToClusterCertificateClusterOutput() ClusterCertificateClusterOutput {
	return o
}

func (o ClusterCertificateClusterOutput) ToClusterCertificateClusterOutputWithContext(ctx context.Context) ClusterCertificateClusterOutput {
	return o
}

func (o ClusterCertificateClusterOutput) CertificateAuthorityData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCluster) *string { return v.CertificateAuthorityData }).(pulumi.StringPtrOutput)
}

func (o ClusterCertificateClusterOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCluster) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ClusterCertificateClusterOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateCluster) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type ClusterCertificateClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterCertificateClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateCluster)(nil)).Elem()
}

func (o ClusterCertificateClusterArrayOutput) ToClusterCertificateClusterArrayOutput() ClusterCertificateClusterArrayOutput {
	return o
}

func (o ClusterCertificateClusterArrayOutput) ToClusterCertificateClusterArrayOutputWithContext(ctx context.Context) ClusterCertificateClusterArrayOutput {
	return o
}

func (o ClusterCertificateClusterArrayOutput) Index(i pulumi.IntInput) ClusterCertificateClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCertificateCluster {
		return vs[0].([]ClusterCertificateCluster)[vs[1].(int)]
	}).(ClusterCertificateClusterOutput)
}

type ClusterCertificateUser struct {
	ClientCertificateData *string `pulumi:"clientCertificateData"`
	ClientKeyData         *string `pulumi:"clientKeyData"`
	Name                  *string `pulumi:"name"`
}

// ClusterCertificateUserInput is an input type that accepts ClusterCertificateUserArgs and ClusterCertificateUserOutput values.
// You can construct a concrete instance of `ClusterCertificateUserInput` via:
//
//	ClusterCertificateUserArgs{...}
type ClusterCertificateUserInput interface {
	pulumi.Input

	ToClusterCertificateUserOutput() ClusterCertificateUserOutput
	ToClusterCertificateUserOutputWithContext(context.Context) ClusterCertificateUserOutput
}

type ClusterCertificateUserArgs struct {
	ClientCertificateData pulumi.StringPtrInput `pulumi:"clientCertificateData"`
	ClientKeyData         pulumi.StringPtrInput `pulumi:"clientKeyData"`
	Name                  pulumi.StringPtrInput `pulumi:"name"`
}

func (ClusterCertificateUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateUser)(nil)).Elem()
}

func (i ClusterCertificateUserArgs) ToClusterCertificateUserOutput() ClusterCertificateUserOutput {
	return i.ToClusterCertificateUserOutputWithContext(context.Background())
}

func (i ClusterCertificateUserArgs) ToClusterCertificateUserOutputWithContext(ctx context.Context) ClusterCertificateUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateUserOutput)
}

// ClusterCertificateUserArrayInput is an input type that accepts ClusterCertificateUserArray and ClusterCertificateUserArrayOutput values.
// You can construct a concrete instance of `ClusterCertificateUserArrayInput` via:
//
//	ClusterCertificateUserArray{ ClusterCertificateUserArgs{...} }
type ClusterCertificateUserArrayInput interface {
	pulumi.Input

	ToClusterCertificateUserArrayOutput() ClusterCertificateUserArrayOutput
	ToClusterCertificateUserArrayOutputWithContext(context.Context) ClusterCertificateUserArrayOutput
}

type ClusterCertificateUserArray []ClusterCertificateUserInput

func (ClusterCertificateUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateUser)(nil)).Elem()
}

func (i ClusterCertificateUserArray) ToClusterCertificateUserArrayOutput() ClusterCertificateUserArrayOutput {
	return i.ToClusterCertificateUserArrayOutputWithContext(context.Background())
}

func (i ClusterCertificateUserArray) ToClusterCertificateUserArrayOutputWithContext(ctx context.Context) ClusterCertificateUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterCertificateUserArrayOutput)
}

type ClusterCertificateUserOutput struct{ *pulumi.OutputState }

func (ClusterCertificateUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterCertificateUser)(nil)).Elem()
}

func (o ClusterCertificateUserOutput) ToClusterCertificateUserOutput() ClusterCertificateUserOutput {
	return o
}

func (o ClusterCertificateUserOutput) ToClusterCertificateUserOutputWithContext(ctx context.Context) ClusterCertificateUserOutput {
	return o
}

func (o ClusterCertificateUserOutput) ClientCertificateData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateUser) *string { return v.ClientCertificateData }).(pulumi.StringPtrOutput)
}

func (o ClusterCertificateUserOutput) ClientKeyData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateUser) *string { return v.ClientKeyData }).(pulumi.StringPtrOutput)
}

func (o ClusterCertificateUserOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterCertificateUser) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ClusterCertificateUserArrayOutput struct{ *pulumi.OutputState }

func (ClusterCertificateUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterCertificateUser)(nil)).Elem()
}

func (o ClusterCertificateUserArrayOutput) ToClusterCertificateUserArrayOutput() ClusterCertificateUserArrayOutput {
	return o
}

func (o ClusterCertificateUserArrayOutput) ToClusterCertificateUserArrayOutputWithContext(ctx context.Context) ClusterCertificateUserArrayOutput {
	return o
}

func (o ClusterCertificateUserArrayOutput) Index(i pulumi.IntInput) ClusterCertificateUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterCertificateUser {
		return vs[0].([]ClusterCertificateUser)[vs[1].(int)]
	}).(ClusterCertificateUserOutput)
}

type ClusterComponentConfiguration struct {
	Configurations *string `pulumi:"configurations"`
	Name           string  `pulumi:"name"`
}

// ClusterComponentConfigurationInput is an input type that accepts ClusterComponentConfigurationArgs and ClusterComponentConfigurationOutput values.
// You can construct a concrete instance of `ClusterComponentConfigurationInput` via:
//
//	ClusterComponentConfigurationArgs{...}
type ClusterComponentConfigurationInput interface {
	pulumi.Input

	ToClusterComponentConfigurationOutput() ClusterComponentConfigurationOutput
	ToClusterComponentConfigurationOutputWithContext(context.Context) ClusterComponentConfigurationOutput
}

type ClusterComponentConfigurationArgs struct {
	Configurations pulumi.StringPtrInput `pulumi:"configurations"`
	Name           pulumi.StringInput    `pulumi:"name"`
}

func (ClusterComponentConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterComponentConfiguration)(nil)).Elem()
}

func (i ClusterComponentConfigurationArgs) ToClusterComponentConfigurationOutput() ClusterComponentConfigurationOutput {
	return i.ToClusterComponentConfigurationOutputWithContext(context.Background())
}

func (i ClusterComponentConfigurationArgs) ToClusterComponentConfigurationOutputWithContext(ctx context.Context) ClusterComponentConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterComponentConfigurationOutput)
}

// ClusterComponentConfigurationArrayInput is an input type that accepts ClusterComponentConfigurationArray and ClusterComponentConfigurationArrayOutput values.
// You can construct a concrete instance of `ClusterComponentConfigurationArrayInput` via:
//
//	ClusterComponentConfigurationArray{ ClusterComponentConfigurationArgs{...} }
type ClusterComponentConfigurationArrayInput interface {
	pulumi.Input

	ToClusterComponentConfigurationArrayOutput() ClusterComponentConfigurationArrayOutput
	ToClusterComponentConfigurationArrayOutputWithContext(context.Context) ClusterComponentConfigurationArrayOutput
}

type ClusterComponentConfigurationArray []ClusterComponentConfigurationInput

func (ClusterComponentConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterComponentConfiguration)(nil)).Elem()
}

func (i ClusterComponentConfigurationArray) ToClusterComponentConfigurationArrayOutput() ClusterComponentConfigurationArrayOutput {
	return i.ToClusterComponentConfigurationArrayOutputWithContext(context.Background())
}

func (i ClusterComponentConfigurationArray) ToClusterComponentConfigurationArrayOutputWithContext(ctx context.Context) ClusterComponentConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterComponentConfigurationArrayOutput)
}

type ClusterComponentConfigurationOutput struct{ *pulumi.OutputState }

func (ClusterComponentConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterComponentConfiguration)(nil)).Elem()
}

func (o ClusterComponentConfigurationOutput) ToClusterComponentConfigurationOutput() ClusterComponentConfigurationOutput {
	return o
}

func (o ClusterComponentConfigurationOutput) ToClusterComponentConfigurationOutputWithContext(ctx context.Context) ClusterComponentConfigurationOutput {
	return o
}

func (o ClusterComponentConfigurationOutput) Configurations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterComponentConfiguration) *string { return v.Configurations }).(pulumi.StringPtrOutput)
}

func (o ClusterComponentConfigurationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterComponentConfiguration) string { return v.Name }).(pulumi.StringOutput)
}

type ClusterComponentConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ClusterComponentConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterComponentConfiguration)(nil)).Elem()
}

func (o ClusterComponentConfigurationArrayOutput) ToClusterComponentConfigurationArrayOutput() ClusterComponentConfigurationArrayOutput {
	return o
}

func (o ClusterComponentConfigurationArrayOutput) ToClusterComponentConfigurationArrayOutputWithContext(ctx context.Context) ClusterComponentConfigurationArrayOutput {
	return o
}

func (o ClusterComponentConfigurationArrayOutput) Index(i pulumi.IntInput) ClusterComponentConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterComponentConfiguration {
		return vs[0].([]ClusterComponentConfiguration)[vs[1].(int)]
	}).(ClusterComponentConfigurationOutput)
}

type ClusterEncryptionConfig struct {
	KmsKeyId *string `pulumi:"kmsKeyId"`
	Mode     *string `pulumi:"mode"`
}

// ClusterEncryptionConfigInput is an input type that accepts ClusterEncryptionConfigArgs and ClusterEncryptionConfigOutput values.
// You can construct a concrete instance of `ClusterEncryptionConfigInput` via:
//
//	ClusterEncryptionConfigArgs{...}
type ClusterEncryptionConfigInput interface {
	pulumi.Input

	ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput
	ToClusterEncryptionConfigOutputWithContext(context.Context) ClusterEncryptionConfigOutput
}

type ClusterEncryptionConfigArgs struct {
	KmsKeyId pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Mode     pulumi.StringPtrInput `pulumi:"mode"`
}

func (ClusterEncryptionConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfig)(nil)).Elem()
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput {
	return i.ToClusterEncryptionConfigOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigOutputWithContext(ctx context.Context) ClusterEncryptionConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigOutput)
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput {
	return i.ToClusterEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i ClusterEncryptionConfigArgs) ToClusterEncryptionConfigPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigOutput).ToClusterEncryptionConfigPtrOutputWithContext(ctx)
}

// ClusterEncryptionConfigPtrInput is an input type that accepts ClusterEncryptionConfigArgs, ClusterEncryptionConfigPtr and ClusterEncryptionConfigPtrOutput values.
// You can construct a concrete instance of `ClusterEncryptionConfigPtrInput` via:
//
//	        ClusterEncryptionConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterEncryptionConfigPtrInput interface {
	pulumi.Input

	ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput
	ToClusterEncryptionConfigPtrOutputWithContext(context.Context) ClusterEncryptionConfigPtrOutput
}

type clusterEncryptionConfigPtrType ClusterEncryptionConfigArgs

func ClusterEncryptionConfigPtr(v *ClusterEncryptionConfigArgs) ClusterEncryptionConfigPtrInput {
	return (*clusterEncryptionConfigPtrType)(v)
}

func (*clusterEncryptionConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionConfig)(nil)).Elem()
}

func (i *clusterEncryptionConfigPtrType) ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput {
	return i.ToClusterEncryptionConfigPtrOutputWithContext(context.Background())
}

func (i *clusterEncryptionConfigPtrType) ToClusterEncryptionConfigPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEncryptionConfigPtrOutput)
}

type ClusterEncryptionConfigOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEncryptionConfig)(nil)).Elem()
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigOutput() ClusterEncryptionConfigOutput {
	return o
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigOutputWithContext(ctx context.Context) ClusterEncryptionConfigOutput {
	return o
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput {
	return o.ToClusterEncryptionConfigPtrOutputWithContext(context.Background())
}

func (o ClusterEncryptionConfigOutput) ToClusterEncryptionConfigPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEncryptionConfig) *ClusterEncryptionConfig {
		return &v
	}).(ClusterEncryptionConfigPtrOutput)
}

func (o ClusterEncryptionConfigOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o ClusterEncryptionConfigOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterEncryptionConfig) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

type ClusterEncryptionConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterEncryptionConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEncryptionConfig)(nil)).Elem()
}

func (o ClusterEncryptionConfigPtrOutput) ToClusterEncryptionConfigPtrOutput() ClusterEncryptionConfigPtrOutput {
	return o
}

func (o ClusterEncryptionConfigPtrOutput) ToClusterEncryptionConfigPtrOutputWithContext(ctx context.Context) ClusterEncryptionConfigPtrOutput {
	return o
}

func (o ClusterEncryptionConfigPtrOutput) Elem() ClusterEncryptionConfigOutput {
	return o.ApplyT(func(v *ClusterEncryptionConfig) ClusterEncryptionConfig {
		if v != nil {
			return *v
		}
		var ret ClusterEncryptionConfig
		return ret
	}).(ClusterEncryptionConfigOutput)
}

func (o ClusterEncryptionConfigPtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterEncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

func (o ClusterEncryptionConfigPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterEncryptionConfig) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

type ClusterExtendParam struct {
	ClusterAz        *string `pulumi:"clusterAz"`
	CpuManagerPolicy *string `pulumi:"cpuManagerPolicy"`
	DecMasterFlavor  *string `pulumi:"decMasterFlavor"`
	DockerUmaskMode  *string `pulumi:"dockerUmaskMode"`
	DssMasterVolumes *string `pulumi:"dssMasterVolumes"`
	FixPoolMask      *string `pulumi:"fixPoolMask"`
}

// ClusterExtendParamInput is an input type that accepts ClusterExtendParamArgs and ClusterExtendParamOutput values.
// You can construct a concrete instance of `ClusterExtendParamInput` via:
//
//	ClusterExtendParamArgs{...}
type ClusterExtendParamInput interface {
	pulumi.Input

	ToClusterExtendParamOutput() ClusterExtendParamOutput
	ToClusterExtendParamOutputWithContext(context.Context) ClusterExtendParamOutput
}

type ClusterExtendParamArgs struct {
	ClusterAz        pulumi.StringPtrInput `pulumi:"clusterAz"`
	CpuManagerPolicy pulumi.StringPtrInput `pulumi:"cpuManagerPolicy"`
	DecMasterFlavor  pulumi.StringPtrInput `pulumi:"decMasterFlavor"`
	DockerUmaskMode  pulumi.StringPtrInput `pulumi:"dockerUmaskMode"`
	DssMasterVolumes pulumi.StringPtrInput `pulumi:"dssMasterVolumes"`
	FixPoolMask      pulumi.StringPtrInput `pulumi:"fixPoolMask"`
}

func (ClusterExtendParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExtendParam)(nil)).Elem()
}

func (i ClusterExtendParamArgs) ToClusterExtendParamOutput() ClusterExtendParamOutput {
	return i.ToClusterExtendParamOutputWithContext(context.Background())
}

func (i ClusterExtendParamArgs) ToClusterExtendParamOutputWithContext(ctx context.Context) ClusterExtendParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExtendParamOutput)
}

// ClusterExtendParamArrayInput is an input type that accepts ClusterExtendParamArray and ClusterExtendParamArrayOutput values.
// You can construct a concrete instance of `ClusterExtendParamArrayInput` via:
//
//	ClusterExtendParamArray{ ClusterExtendParamArgs{...} }
type ClusterExtendParamArrayInput interface {
	pulumi.Input

	ToClusterExtendParamArrayOutput() ClusterExtendParamArrayOutput
	ToClusterExtendParamArrayOutputWithContext(context.Context) ClusterExtendParamArrayOutput
}

type ClusterExtendParamArray []ClusterExtendParamInput

func (ClusterExtendParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterExtendParam)(nil)).Elem()
}

func (i ClusterExtendParamArray) ToClusterExtendParamArrayOutput() ClusterExtendParamArrayOutput {
	return i.ToClusterExtendParamArrayOutputWithContext(context.Background())
}

func (i ClusterExtendParamArray) ToClusterExtendParamArrayOutputWithContext(ctx context.Context) ClusterExtendParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterExtendParamArrayOutput)
}

type ClusterExtendParamOutput struct{ *pulumi.OutputState }

func (ClusterExtendParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterExtendParam)(nil)).Elem()
}

func (o ClusterExtendParamOutput) ToClusterExtendParamOutput() ClusterExtendParamOutput {
	return o
}

func (o ClusterExtendParamOutput) ToClusterExtendParamOutputWithContext(ctx context.Context) ClusterExtendParamOutput {
	return o
}

func (o ClusterExtendParamOutput) ClusterAz() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExtendParam) *string { return v.ClusterAz }).(pulumi.StringPtrOutput)
}

func (o ClusterExtendParamOutput) CpuManagerPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExtendParam) *string { return v.CpuManagerPolicy }).(pulumi.StringPtrOutput)
}

func (o ClusterExtendParamOutput) DecMasterFlavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExtendParam) *string { return v.DecMasterFlavor }).(pulumi.StringPtrOutput)
}

func (o ClusterExtendParamOutput) DockerUmaskMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExtendParam) *string { return v.DockerUmaskMode }).(pulumi.StringPtrOutput)
}

func (o ClusterExtendParamOutput) DssMasterVolumes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExtendParam) *string { return v.DssMasterVolumes }).(pulumi.StringPtrOutput)
}

func (o ClusterExtendParamOutput) FixPoolMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterExtendParam) *string { return v.FixPoolMask }).(pulumi.StringPtrOutput)
}

type ClusterExtendParamArrayOutput struct{ *pulumi.OutputState }

func (ClusterExtendParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterExtendParam)(nil)).Elem()
}

func (o ClusterExtendParamArrayOutput) ToClusterExtendParamArrayOutput() ClusterExtendParamArrayOutput {
	return o
}

func (o ClusterExtendParamArrayOutput) ToClusterExtendParamArrayOutputWithContext(ctx context.Context) ClusterExtendParamArrayOutput {
	return o
}

func (o ClusterExtendParamArrayOutput) Index(i pulumi.IntInput) ClusterExtendParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterExtendParam {
		return vs[0].([]ClusterExtendParam)[vs[1].(int)]
	}).(ClusterExtendParamOutput)
}

type ClusterMaster struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
}

// ClusterMasterInput is an input type that accepts ClusterMasterArgs and ClusterMasterOutput values.
// You can construct a concrete instance of `ClusterMasterInput` via:
//
//	ClusterMasterArgs{...}
type ClusterMasterInput interface {
	pulumi.Input

	ToClusterMasterOutput() ClusterMasterOutput
	ToClusterMasterOutputWithContext(context.Context) ClusterMasterOutput
}

type ClusterMasterArgs struct {
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
}

func (ClusterMasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaster)(nil)).Elem()
}

func (i ClusterMasterArgs) ToClusterMasterOutput() ClusterMasterOutput {
	return i.ToClusterMasterOutputWithContext(context.Background())
}

func (i ClusterMasterArgs) ToClusterMasterOutputWithContext(ctx context.Context) ClusterMasterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterOutput)
}

// ClusterMasterArrayInput is an input type that accepts ClusterMasterArray and ClusterMasterArrayOutput values.
// You can construct a concrete instance of `ClusterMasterArrayInput` via:
//
//	ClusterMasterArray{ ClusterMasterArgs{...} }
type ClusterMasterArrayInput interface {
	pulumi.Input

	ToClusterMasterArrayOutput() ClusterMasterArrayOutput
	ToClusterMasterArrayOutputWithContext(context.Context) ClusterMasterArrayOutput
}

type ClusterMasterArray []ClusterMasterInput

func (ClusterMasterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMaster)(nil)).Elem()
}

func (i ClusterMasterArray) ToClusterMasterArrayOutput() ClusterMasterArrayOutput {
	return i.ToClusterMasterArrayOutputWithContext(context.Background())
}

func (i ClusterMasterArray) ToClusterMasterArrayOutputWithContext(ctx context.Context) ClusterMasterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterArrayOutput)
}

type ClusterMasterOutput struct{ *pulumi.OutputState }

func (ClusterMasterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMaster)(nil)).Elem()
}

func (o ClusterMasterOutput) ToClusterMasterOutput() ClusterMasterOutput {
	return o
}

func (o ClusterMasterOutput) ToClusterMasterOutputWithContext(ctx context.Context) ClusterMasterOutput {
	return o
}

func (o ClusterMasterOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterMaster) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

type ClusterMasterArrayOutput struct{ *pulumi.OutputState }

func (ClusterMasterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMaster)(nil)).Elem()
}

func (o ClusterMasterArrayOutput) ToClusterMasterArrayOutput() ClusterMasterArrayOutput {
	return o
}

func (o ClusterMasterArrayOutput) ToClusterMasterArrayOutputWithContext(ctx context.Context) ClusterMasterArrayOutput {
	return o
}

func (o ClusterMasterArrayOutput) Index(i pulumi.IntInput) ClusterMasterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterMaster {
		return vs[0].([]ClusterMaster)[vs[1].(int)]
	}).(ClusterMasterOutput)
}

type NodeAttachDataVolume struct {
	DssPoolId *string `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  *string           `pulumi:"extendParam"`
	ExtendParams map[string]string `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough *bool   `pulumi:"hwPassthrough"`
	Iops          *int    `pulumi:"iops"`
	KmsKeyId      *string `pulumi:"kmsKeyId"`
	Size          *int    `pulumi:"size"`
	Throughput    *int    `pulumi:"throughput"`
	Volumetype    *string `pulumi:"volumetype"`
}

// NodeAttachDataVolumeInput is an input type that accepts NodeAttachDataVolumeArgs and NodeAttachDataVolumeOutput values.
// You can construct a concrete instance of `NodeAttachDataVolumeInput` via:
//
//	NodeAttachDataVolumeArgs{...}
type NodeAttachDataVolumeInput interface {
	pulumi.Input

	ToNodeAttachDataVolumeOutput() NodeAttachDataVolumeOutput
	ToNodeAttachDataVolumeOutputWithContext(context.Context) NodeAttachDataVolumeOutput
}

type NodeAttachDataVolumeArgs struct {
	DssPoolId pulumi.StringPtrInput `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  pulumi.StringPtrInput `pulumi:"extendParam"`
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	Iops          pulumi.IntPtrInput    `pulumi:"iops"`
	KmsKeyId      pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Size          pulumi.IntPtrInput    `pulumi:"size"`
	Throughput    pulumi.IntPtrInput    `pulumi:"throughput"`
	Volumetype    pulumi.StringPtrInput `pulumi:"volumetype"`
}

func (NodeAttachDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachDataVolume)(nil)).Elem()
}

func (i NodeAttachDataVolumeArgs) ToNodeAttachDataVolumeOutput() NodeAttachDataVolumeOutput {
	return i.ToNodeAttachDataVolumeOutputWithContext(context.Background())
}

func (i NodeAttachDataVolumeArgs) ToNodeAttachDataVolumeOutputWithContext(ctx context.Context) NodeAttachDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachDataVolumeOutput)
}

// NodeAttachDataVolumeArrayInput is an input type that accepts NodeAttachDataVolumeArray and NodeAttachDataVolumeArrayOutput values.
// You can construct a concrete instance of `NodeAttachDataVolumeArrayInput` via:
//
//	NodeAttachDataVolumeArray{ NodeAttachDataVolumeArgs{...} }
type NodeAttachDataVolumeArrayInput interface {
	pulumi.Input

	ToNodeAttachDataVolumeArrayOutput() NodeAttachDataVolumeArrayOutput
	ToNodeAttachDataVolumeArrayOutputWithContext(context.Context) NodeAttachDataVolumeArrayOutput
}

type NodeAttachDataVolumeArray []NodeAttachDataVolumeInput

func (NodeAttachDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachDataVolume)(nil)).Elem()
}

func (i NodeAttachDataVolumeArray) ToNodeAttachDataVolumeArrayOutput() NodeAttachDataVolumeArrayOutput {
	return i.ToNodeAttachDataVolumeArrayOutputWithContext(context.Background())
}

func (i NodeAttachDataVolumeArray) ToNodeAttachDataVolumeArrayOutputWithContext(ctx context.Context) NodeAttachDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachDataVolumeArrayOutput)
}

type NodeAttachDataVolumeOutput struct{ *pulumi.OutputState }

func (NodeAttachDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachDataVolume)(nil)).Elem()
}

func (o NodeAttachDataVolumeOutput) ToNodeAttachDataVolumeOutput() NodeAttachDataVolumeOutput {
	return o
}

func (o NodeAttachDataVolumeOutput) ToNodeAttachDataVolumeOutputWithContext(ctx context.Context) NodeAttachDataVolumeOutput {
	return o
}

func (o NodeAttachDataVolumeOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *string { return v.DssPoolId }).(pulumi.StringPtrOutput)
}

// Deprecated: use extendParams instead
func (o NodeAttachDataVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

func (o NodeAttachDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// schema: Internal
func (o NodeAttachDataVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

func (o NodeAttachDataVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o NodeAttachDataVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o NodeAttachDataVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o NodeAttachDataVolumeOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o NodeAttachDataVolumeOutput) Volumetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachDataVolume) *string { return v.Volumetype }).(pulumi.StringPtrOutput)
}

type NodeAttachDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachDataVolume)(nil)).Elem()
}

func (o NodeAttachDataVolumeArrayOutput) ToNodeAttachDataVolumeArrayOutput() NodeAttachDataVolumeArrayOutput {
	return o
}

func (o NodeAttachDataVolumeArrayOutput) ToNodeAttachDataVolumeArrayOutputWithContext(ctx context.Context) NodeAttachDataVolumeArrayOutput {
	return o
}

func (o NodeAttachDataVolumeArrayOutput) Index(i pulumi.IntInput) NodeAttachDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachDataVolume {
		return vs[0].([]NodeAttachDataVolume)[vs[1].(int)]
	}).(NodeAttachDataVolumeOutput)
}

type NodeAttachExtensionNic struct {
	SubnetId *string `pulumi:"subnetId"`
}

// NodeAttachExtensionNicInput is an input type that accepts NodeAttachExtensionNicArgs and NodeAttachExtensionNicOutput values.
// You can construct a concrete instance of `NodeAttachExtensionNicInput` via:
//
//	NodeAttachExtensionNicArgs{...}
type NodeAttachExtensionNicInput interface {
	pulumi.Input

	ToNodeAttachExtensionNicOutput() NodeAttachExtensionNicOutput
	ToNodeAttachExtensionNicOutputWithContext(context.Context) NodeAttachExtensionNicOutput
}

type NodeAttachExtensionNicArgs struct {
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (NodeAttachExtensionNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachExtensionNic)(nil)).Elem()
}

func (i NodeAttachExtensionNicArgs) ToNodeAttachExtensionNicOutput() NodeAttachExtensionNicOutput {
	return i.ToNodeAttachExtensionNicOutputWithContext(context.Background())
}

func (i NodeAttachExtensionNicArgs) ToNodeAttachExtensionNicOutputWithContext(ctx context.Context) NodeAttachExtensionNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachExtensionNicOutput)
}

// NodeAttachExtensionNicArrayInput is an input type that accepts NodeAttachExtensionNicArray and NodeAttachExtensionNicArrayOutput values.
// You can construct a concrete instance of `NodeAttachExtensionNicArrayInput` via:
//
//	NodeAttachExtensionNicArray{ NodeAttachExtensionNicArgs{...} }
type NodeAttachExtensionNicArrayInput interface {
	pulumi.Input

	ToNodeAttachExtensionNicArrayOutput() NodeAttachExtensionNicArrayOutput
	ToNodeAttachExtensionNicArrayOutputWithContext(context.Context) NodeAttachExtensionNicArrayOutput
}

type NodeAttachExtensionNicArray []NodeAttachExtensionNicInput

func (NodeAttachExtensionNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachExtensionNic)(nil)).Elem()
}

func (i NodeAttachExtensionNicArray) ToNodeAttachExtensionNicArrayOutput() NodeAttachExtensionNicArrayOutput {
	return i.ToNodeAttachExtensionNicArrayOutputWithContext(context.Background())
}

func (i NodeAttachExtensionNicArray) ToNodeAttachExtensionNicArrayOutputWithContext(ctx context.Context) NodeAttachExtensionNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachExtensionNicArrayOutput)
}

type NodeAttachExtensionNicOutput struct{ *pulumi.OutputState }

func (NodeAttachExtensionNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachExtensionNic)(nil)).Elem()
}

func (o NodeAttachExtensionNicOutput) ToNodeAttachExtensionNicOutput() NodeAttachExtensionNicOutput {
	return o
}

func (o NodeAttachExtensionNicOutput) ToNodeAttachExtensionNicOutputWithContext(ctx context.Context) NodeAttachExtensionNicOutput {
	return o
}

func (o NodeAttachExtensionNicOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachExtensionNic) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type NodeAttachExtensionNicArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachExtensionNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachExtensionNic)(nil)).Elem()
}

func (o NodeAttachExtensionNicArrayOutput) ToNodeAttachExtensionNicArrayOutput() NodeAttachExtensionNicArrayOutput {
	return o
}

func (o NodeAttachExtensionNicArrayOutput) ToNodeAttachExtensionNicArrayOutputWithContext(ctx context.Context) NodeAttachExtensionNicArrayOutput {
	return o
}

func (o NodeAttachExtensionNicArrayOutput) Index(i pulumi.IntInput) NodeAttachExtensionNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachExtensionNic {
		return vs[0].([]NodeAttachExtensionNic)[vs[1].(int)]
	}).(NodeAttachExtensionNicOutput)
}

type NodeAttachHostnameConfig struct {
	Type string `pulumi:"type"`
}

// NodeAttachHostnameConfigInput is an input type that accepts NodeAttachHostnameConfigArgs and NodeAttachHostnameConfigOutput values.
// You can construct a concrete instance of `NodeAttachHostnameConfigInput` via:
//
//	NodeAttachHostnameConfigArgs{...}
type NodeAttachHostnameConfigInput interface {
	pulumi.Input

	ToNodeAttachHostnameConfigOutput() NodeAttachHostnameConfigOutput
	ToNodeAttachHostnameConfigOutputWithContext(context.Context) NodeAttachHostnameConfigOutput
}

type NodeAttachHostnameConfigArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (NodeAttachHostnameConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachHostnameConfig)(nil)).Elem()
}

func (i NodeAttachHostnameConfigArgs) ToNodeAttachHostnameConfigOutput() NodeAttachHostnameConfigOutput {
	return i.ToNodeAttachHostnameConfigOutputWithContext(context.Background())
}

func (i NodeAttachHostnameConfigArgs) ToNodeAttachHostnameConfigOutputWithContext(ctx context.Context) NodeAttachHostnameConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachHostnameConfigOutput)
}

func (i NodeAttachHostnameConfigArgs) ToNodeAttachHostnameConfigPtrOutput() NodeAttachHostnameConfigPtrOutput {
	return i.ToNodeAttachHostnameConfigPtrOutputWithContext(context.Background())
}

func (i NodeAttachHostnameConfigArgs) ToNodeAttachHostnameConfigPtrOutputWithContext(ctx context.Context) NodeAttachHostnameConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachHostnameConfigOutput).ToNodeAttachHostnameConfigPtrOutputWithContext(ctx)
}

// NodeAttachHostnameConfigPtrInput is an input type that accepts NodeAttachHostnameConfigArgs, NodeAttachHostnameConfigPtr and NodeAttachHostnameConfigPtrOutput values.
// You can construct a concrete instance of `NodeAttachHostnameConfigPtrInput` via:
//
//	        NodeAttachHostnameConfigArgs{...}
//
//	or:
//
//	        nil
type NodeAttachHostnameConfigPtrInput interface {
	pulumi.Input

	ToNodeAttachHostnameConfigPtrOutput() NodeAttachHostnameConfigPtrOutput
	ToNodeAttachHostnameConfigPtrOutputWithContext(context.Context) NodeAttachHostnameConfigPtrOutput
}

type nodeAttachHostnameConfigPtrType NodeAttachHostnameConfigArgs

func NodeAttachHostnameConfigPtr(v *NodeAttachHostnameConfigArgs) NodeAttachHostnameConfigPtrInput {
	return (*nodeAttachHostnameConfigPtrType)(v)
}

func (*nodeAttachHostnameConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAttachHostnameConfig)(nil)).Elem()
}

func (i *nodeAttachHostnameConfigPtrType) ToNodeAttachHostnameConfigPtrOutput() NodeAttachHostnameConfigPtrOutput {
	return i.ToNodeAttachHostnameConfigPtrOutputWithContext(context.Background())
}

func (i *nodeAttachHostnameConfigPtrType) ToNodeAttachHostnameConfigPtrOutputWithContext(ctx context.Context) NodeAttachHostnameConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachHostnameConfigPtrOutput)
}

type NodeAttachHostnameConfigOutput struct{ *pulumi.OutputState }

func (NodeAttachHostnameConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachHostnameConfig)(nil)).Elem()
}

func (o NodeAttachHostnameConfigOutput) ToNodeAttachHostnameConfigOutput() NodeAttachHostnameConfigOutput {
	return o
}

func (o NodeAttachHostnameConfigOutput) ToNodeAttachHostnameConfigOutputWithContext(ctx context.Context) NodeAttachHostnameConfigOutput {
	return o
}

func (o NodeAttachHostnameConfigOutput) ToNodeAttachHostnameConfigPtrOutput() NodeAttachHostnameConfigPtrOutput {
	return o.ToNodeAttachHostnameConfigPtrOutputWithContext(context.Background())
}

func (o NodeAttachHostnameConfigOutput) ToNodeAttachHostnameConfigPtrOutputWithContext(ctx context.Context) NodeAttachHostnameConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeAttachHostnameConfig) *NodeAttachHostnameConfig {
		return &v
	}).(NodeAttachHostnameConfigPtrOutput)
}

func (o NodeAttachHostnameConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachHostnameConfig) string { return v.Type }).(pulumi.StringOutput)
}

type NodeAttachHostnameConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeAttachHostnameConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAttachHostnameConfig)(nil)).Elem()
}

func (o NodeAttachHostnameConfigPtrOutput) ToNodeAttachHostnameConfigPtrOutput() NodeAttachHostnameConfigPtrOutput {
	return o
}

func (o NodeAttachHostnameConfigPtrOutput) ToNodeAttachHostnameConfigPtrOutputWithContext(ctx context.Context) NodeAttachHostnameConfigPtrOutput {
	return o
}

func (o NodeAttachHostnameConfigPtrOutput) Elem() NodeAttachHostnameConfigOutput {
	return o.ApplyT(func(v *NodeAttachHostnameConfig) NodeAttachHostnameConfig {
		if v != nil {
			return *v
		}
		var ret NodeAttachHostnameConfig
		return ret
	}).(NodeAttachHostnameConfigOutput)
}

func (o NodeAttachHostnameConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttachHostnameConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type NodeAttachRootVolume struct {
	DssPoolId *string `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  *string           `pulumi:"extendParam"`
	ExtendParams map[string]string `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough *bool   `pulumi:"hwPassthrough"`
	Iops          *int    `pulumi:"iops"`
	KmsKeyId      *string `pulumi:"kmsKeyId"`
	Size          *int    `pulumi:"size"`
	Throughput    *int    `pulumi:"throughput"`
	Volumetype    *string `pulumi:"volumetype"`
}

// NodeAttachRootVolumeInput is an input type that accepts NodeAttachRootVolumeArgs and NodeAttachRootVolumeOutput values.
// You can construct a concrete instance of `NodeAttachRootVolumeInput` via:
//
//	NodeAttachRootVolumeArgs{...}
type NodeAttachRootVolumeInput interface {
	pulumi.Input

	ToNodeAttachRootVolumeOutput() NodeAttachRootVolumeOutput
	ToNodeAttachRootVolumeOutputWithContext(context.Context) NodeAttachRootVolumeOutput
}

type NodeAttachRootVolumeArgs struct {
	DssPoolId pulumi.StringPtrInput `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  pulumi.StringPtrInput `pulumi:"extendParam"`
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	Iops          pulumi.IntPtrInput    `pulumi:"iops"`
	KmsKeyId      pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Size          pulumi.IntPtrInput    `pulumi:"size"`
	Throughput    pulumi.IntPtrInput    `pulumi:"throughput"`
	Volumetype    pulumi.StringPtrInput `pulumi:"volumetype"`
}

func (NodeAttachRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachRootVolume)(nil)).Elem()
}

func (i NodeAttachRootVolumeArgs) ToNodeAttachRootVolumeOutput() NodeAttachRootVolumeOutput {
	return i.ToNodeAttachRootVolumeOutputWithContext(context.Background())
}

func (i NodeAttachRootVolumeArgs) ToNodeAttachRootVolumeOutputWithContext(ctx context.Context) NodeAttachRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachRootVolumeOutput)
}

// NodeAttachRootVolumeArrayInput is an input type that accepts NodeAttachRootVolumeArray and NodeAttachRootVolumeArrayOutput values.
// You can construct a concrete instance of `NodeAttachRootVolumeArrayInput` via:
//
//	NodeAttachRootVolumeArray{ NodeAttachRootVolumeArgs{...} }
type NodeAttachRootVolumeArrayInput interface {
	pulumi.Input

	ToNodeAttachRootVolumeArrayOutput() NodeAttachRootVolumeArrayOutput
	ToNodeAttachRootVolumeArrayOutputWithContext(context.Context) NodeAttachRootVolumeArrayOutput
}

type NodeAttachRootVolumeArray []NodeAttachRootVolumeInput

func (NodeAttachRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachRootVolume)(nil)).Elem()
}

func (i NodeAttachRootVolumeArray) ToNodeAttachRootVolumeArrayOutput() NodeAttachRootVolumeArrayOutput {
	return i.ToNodeAttachRootVolumeArrayOutputWithContext(context.Background())
}

func (i NodeAttachRootVolumeArray) ToNodeAttachRootVolumeArrayOutputWithContext(ctx context.Context) NodeAttachRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachRootVolumeArrayOutput)
}

type NodeAttachRootVolumeOutput struct{ *pulumi.OutputState }

func (NodeAttachRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachRootVolume)(nil)).Elem()
}

func (o NodeAttachRootVolumeOutput) ToNodeAttachRootVolumeOutput() NodeAttachRootVolumeOutput {
	return o
}

func (o NodeAttachRootVolumeOutput) ToNodeAttachRootVolumeOutputWithContext(ctx context.Context) NodeAttachRootVolumeOutput {
	return o
}

func (o NodeAttachRootVolumeOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *string { return v.DssPoolId }).(pulumi.StringPtrOutput)
}

// Deprecated: use extendParams instead
func (o NodeAttachRootVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

func (o NodeAttachRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// schema: Internal
func (o NodeAttachRootVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

func (o NodeAttachRootVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o NodeAttachRootVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o NodeAttachRootVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o NodeAttachRootVolumeOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o NodeAttachRootVolumeOutput) Volumetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachRootVolume) *string { return v.Volumetype }).(pulumi.StringPtrOutput)
}

type NodeAttachRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachRootVolume)(nil)).Elem()
}

func (o NodeAttachRootVolumeArrayOutput) ToNodeAttachRootVolumeArrayOutput() NodeAttachRootVolumeArrayOutput {
	return o
}

func (o NodeAttachRootVolumeArrayOutput) ToNodeAttachRootVolumeArrayOutputWithContext(ctx context.Context) NodeAttachRootVolumeArrayOutput {
	return o
}

func (o NodeAttachRootVolumeArrayOutput) Index(i pulumi.IntInput) NodeAttachRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachRootVolume {
		return vs[0].([]NodeAttachRootVolume)[vs[1].(int)]
	}).(NodeAttachRootVolumeOutput)
}

type NodeAttachStorage struct {
	Groups    []NodeAttachStorageGroup    `pulumi:"groups"`
	Selectors []NodeAttachStorageSelector `pulumi:"selectors"`
}

// NodeAttachStorageInput is an input type that accepts NodeAttachStorageArgs and NodeAttachStorageOutput values.
// You can construct a concrete instance of `NodeAttachStorageInput` via:
//
//	NodeAttachStorageArgs{...}
type NodeAttachStorageInput interface {
	pulumi.Input

	ToNodeAttachStorageOutput() NodeAttachStorageOutput
	ToNodeAttachStorageOutputWithContext(context.Context) NodeAttachStorageOutput
}

type NodeAttachStorageArgs struct {
	Groups    NodeAttachStorageGroupArrayInput    `pulumi:"groups"`
	Selectors NodeAttachStorageSelectorArrayInput `pulumi:"selectors"`
}

func (NodeAttachStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachStorage)(nil)).Elem()
}

func (i NodeAttachStorageArgs) ToNodeAttachStorageOutput() NodeAttachStorageOutput {
	return i.ToNodeAttachStorageOutputWithContext(context.Background())
}

func (i NodeAttachStorageArgs) ToNodeAttachStorageOutputWithContext(ctx context.Context) NodeAttachStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStorageOutput)
}

func (i NodeAttachStorageArgs) ToNodeAttachStoragePtrOutput() NodeAttachStoragePtrOutput {
	return i.ToNodeAttachStoragePtrOutputWithContext(context.Background())
}

func (i NodeAttachStorageArgs) ToNodeAttachStoragePtrOutputWithContext(ctx context.Context) NodeAttachStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStorageOutput).ToNodeAttachStoragePtrOutputWithContext(ctx)
}

// NodeAttachStoragePtrInput is an input type that accepts NodeAttachStorageArgs, NodeAttachStoragePtr and NodeAttachStoragePtrOutput values.
// You can construct a concrete instance of `NodeAttachStoragePtrInput` via:
//
//	        NodeAttachStorageArgs{...}
//
//	or:
//
//	        nil
type NodeAttachStoragePtrInput interface {
	pulumi.Input

	ToNodeAttachStoragePtrOutput() NodeAttachStoragePtrOutput
	ToNodeAttachStoragePtrOutputWithContext(context.Context) NodeAttachStoragePtrOutput
}

type nodeAttachStoragePtrType NodeAttachStorageArgs

func NodeAttachStoragePtr(v *NodeAttachStorageArgs) NodeAttachStoragePtrInput {
	return (*nodeAttachStoragePtrType)(v)
}

func (*nodeAttachStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAttachStorage)(nil)).Elem()
}

func (i *nodeAttachStoragePtrType) ToNodeAttachStoragePtrOutput() NodeAttachStoragePtrOutput {
	return i.ToNodeAttachStoragePtrOutputWithContext(context.Background())
}

func (i *nodeAttachStoragePtrType) ToNodeAttachStoragePtrOutputWithContext(ctx context.Context) NodeAttachStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStoragePtrOutput)
}

type NodeAttachStorageOutput struct{ *pulumi.OutputState }

func (NodeAttachStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachStorage)(nil)).Elem()
}

func (o NodeAttachStorageOutput) ToNodeAttachStorageOutput() NodeAttachStorageOutput {
	return o
}

func (o NodeAttachStorageOutput) ToNodeAttachStorageOutputWithContext(ctx context.Context) NodeAttachStorageOutput {
	return o
}

func (o NodeAttachStorageOutput) ToNodeAttachStoragePtrOutput() NodeAttachStoragePtrOutput {
	return o.ToNodeAttachStoragePtrOutputWithContext(context.Background())
}

func (o NodeAttachStorageOutput) ToNodeAttachStoragePtrOutputWithContext(ctx context.Context) NodeAttachStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeAttachStorage) *NodeAttachStorage {
		return &v
	}).(NodeAttachStoragePtrOutput)
}

func (o NodeAttachStorageOutput) Groups() NodeAttachStorageGroupArrayOutput {
	return o.ApplyT(func(v NodeAttachStorage) []NodeAttachStorageGroup { return v.Groups }).(NodeAttachStorageGroupArrayOutput)
}

func (o NodeAttachStorageOutput) Selectors() NodeAttachStorageSelectorArrayOutput {
	return o.ApplyT(func(v NodeAttachStorage) []NodeAttachStorageSelector { return v.Selectors }).(NodeAttachStorageSelectorArrayOutput)
}

type NodeAttachStoragePtrOutput struct{ *pulumi.OutputState }

func (NodeAttachStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAttachStorage)(nil)).Elem()
}

func (o NodeAttachStoragePtrOutput) ToNodeAttachStoragePtrOutput() NodeAttachStoragePtrOutput {
	return o
}

func (o NodeAttachStoragePtrOutput) ToNodeAttachStoragePtrOutputWithContext(ctx context.Context) NodeAttachStoragePtrOutput {
	return o
}

func (o NodeAttachStoragePtrOutput) Elem() NodeAttachStorageOutput {
	return o.ApplyT(func(v *NodeAttachStorage) NodeAttachStorage {
		if v != nil {
			return *v
		}
		var ret NodeAttachStorage
		return ret
	}).(NodeAttachStorageOutput)
}

func (o NodeAttachStoragePtrOutput) Groups() NodeAttachStorageGroupArrayOutput {
	return o.ApplyT(func(v *NodeAttachStorage) []NodeAttachStorageGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(NodeAttachStorageGroupArrayOutput)
}

func (o NodeAttachStoragePtrOutput) Selectors() NodeAttachStorageSelectorArrayOutput {
	return o.ApplyT(func(v *NodeAttachStorage) []NodeAttachStorageSelector {
		if v == nil {
			return nil
		}
		return v.Selectors
	}).(NodeAttachStorageSelectorArrayOutput)
}

type NodeAttachStorageGroup struct {
	CceManaged    *bool                                `pulumi:"cceManaged"`
	Name          string                               `pulumi:"name"`
	SelectorNames []string                             `pulumi:"selectorNames"`
	VirtualSpaces []NodeAttachStorageGroupVirtualSpace `pulumi:"virtualSpaces"`
}

// NodeAttachStorageGroupInput is an input type that accepts NodeAttachStorageGroupArgs and NodeAttachStorageGroupOutput values.
// You can construct a concrete instance of `NodeAttachStorageGroupInput` via:
//
//	NodeAttachStorageGroupArgs{...}
type NodeAttachStorageGroupInput interface {
	pulumi.Input

	ToNodeAttachStorageGroupOutput() NodeAttachStorageGroupOutput
	ToNodeAttachStorageGroupOutputWithContext(context.Context) NodeAttachStorageGroupOutput
}

type NodeAttachStorageGroupArgs struct {
	CceManaged    pulumi.BoolPtrInput                          `pulumi:"cceManaged"`
	Name          pulumi.StringInput                           `pulumi:"name"`
	SelectorNames pulumi.StringArrayInput                      `pulumi:"selectorNames"`
	VirtualSpaces NodeAttachStorageGroupVirtualSpaceArrayInput `pulumi:"virtualSpaces"`
}

func (NodeAttachStorageGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachStorageGroup)(nil)).Elem()
}

func (i NodeAttachStorageGroupArgs) ToNodeAttachStorageGroupOutput() NodeAttachStorageGroupOutput {
	return i.ToNodeAttachStorageGroupOutputWithContext(context.Background())
}

func (i NodeAttachStorageGroupArgs) ToNodeAttachStorageGroupOutputWithContext(ctx context.Context) NodeAttachStorageGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStorageGroupOutput)
}

// NodeAttachStorageGroupArrayInput is an input type that accepts NodeAttachStorageGroupArray and NodeAttachStorageGroupArrayOutput values.
// You can construct a concrete instance of `NodeAttachStorageGroupArrayInput` via:
//
//	NodeAttachStorageGroupArray{ NodeAttachStorageGroupArgs{...} }
type NodeAttachStorageGroupArrayInput interface {
	pulumi.Input

	ToNodeAttachStorageGroupArrayOutput() NodeAttachStorageGroupArrayOutput
	ToNodeAttachStorageGroupArrayOutputWithContext(context.Context) NodeAttachStorageGroupArrayOutput
}

type NodeAttachStorageGroupArray []NodeAttachStorageGroupInput

func (NodeAttachStorageGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachStorageGroup)(nil)).Elem()
}

func (i NodeAttachStorageGroupArray) ToNodeAttachStorageGroupArrayOutput() NodeAttachStorageGroupArrayOutput {
	return i.ToNodeAttachStorageGroupArrayOutputWithContext(context.Background())
}

func (i NodeAttachStorageGroupArray) ToNodeAttachStorageGroupArrayOutputWithContext(ctx context.Context) NodeAttachStorageGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStorageGroupArrayOutput)
}

type NodeAttachStorageGroupOutput struct{ *pulumi.OutputState }

func (NodeAttachStorageGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachStorageGroup)(nil)).Elem()
}

func (o NodeAttachStorageGroupOutput) ToNodeAttachStorageGroupOutput() NodeAttachStorageGroupOutput {
	return o
}

func (o NodeAttachStorageGroupOutput) ToNodeAttachStorageGroupOutputWithContext(ctx context.Context) NodeAttachStorageGroupOutput {
	return o
}

func (o NodeAttachStorageGroupOutput) CceManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageGroup) *bool { return v.CceManaged }).(pulumi.BoolPtrOutput)
}

func (o NodeAttachStorageGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachStorageGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodeAttachStorageGroupOutput) SelectorNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeAttachStorageGroup) []string { return v.SelectorNames }).(pulumi.StringArrayOutput)
}

func (o NodeAttachStorageGroupOutput) VirtualSpaces() NodeAttachStorageGroupVirtualSpaceArrayOutput {
	return o.ApplyT(func(v NodeAttachStorageGroup) []NodeAttachStorageGroupVirtualSpace { return v.VirtualSpaces }).(NodeAttachStorageGroupVirtualSpaceArrayOutput)
}

type NodeAttachStorageGroupArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachStorageGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachStorageGroup)(nil)).Elem()
}

func (o NodeAttachStorageGroupArrayOutput) ToNodeAttachStorageGroupArrayOutput() NodeAttachStorageGroupArrayOutput {
	return o
}

func (o NodeAttachStorageGroupArrayOutput) ToNodeAttachStorageGroupArrayOutputWithContext(ctx context.Context) NodeAttachStorageGroupArrayOutput {
	return o
}

func (o NodeAttachStorageGroupArrayOutput) Index(i pulumi.IntInput) NodeAttachStorageGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachStorageGroup {
		return vs[0].([]NodeAttachStorageGroup)[vs[1].(int)]
	}).(NodeAttachStorageGroupOutput)
}

type NodeAttachStorageGroupVirtualSpace struct {
	LvmLvType     *string `pulumi:"lvmLvType"`
	LvmPath       *string `pulumi:"lvmPath"`
	Name          string  `pulumi:"name"`
	RuntimeLvType *string `pulumi:"runtimeLvType"`
	Size          string  `pulumi:"size"`
}

// NodeAttachStorageGroupVirtualSpaceInput is an input type that accepts NodeAttachStorageGroupVirtualSpaceArgs and NodeAttachStorageGroupVirtualSpaceOutput values.
// You can construct a concrete instance of `NodeAttachStorageGroupVirtualSpaceInput` via:
//
//	NodeAttachStorageGroupVirtualSpaceArgs{...}
type NodeAttachStorageGroupVirtualSpaceInput interface {
	pulumi.Input

	ToNodeAttachStorageGroupVirtualSpaceOutput() NodeAttachStorageGroupVirtualSpaceOutput
	ToNodeAttachStorageGroupVirtualSpaceOutputWithContext(context.Context) NodeAttachStorageGroupVirtualSpaceOutput
}

type NodeAttachStorageGroupVirtualSpaceArgs struct {
	LvmLvType     pulumi.StringPtrInput `pulumi:"lvmLvType"`
	LvmPath       pulumi.StringPtrInput `pulumi:"lvmPath"`
	Name          pulumi.StringInput    `pulumi:"name"`
	RuntimeLvType pulumi.StringPtrInput `pulumi:"runtimeLvType"`
	Size          pulumi.StringInput    `pulumi:"size"`
}

func (NodeAttachStorageGroupVirtualSpaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachStorageGroupVirtualSpace)(nil)).Elem()
}

func (i NodeAttachStorageGroupVirtualSpaceArgs) ToNodeAttachStorageGroupVirtualSpaceOutput() NodeAttachStorageGroupVirtualSpaceOutput {
	return i.ToNodeAttachStorageGroupVirtualSpaceOutputWithContext(context.Background())
}

func (i NodeAttachStorageGroupVirtualSpaceArgs) ToNodeAttachStorageGroupVirtualSpaceOutputWithContext(ctx context.Context) NodeAttachStorageGroupVirtualSpaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStorageGroupVirtualSpaceOutput)
}

// NodeAttachStorageGroupVirtualSpaceArrayInput is an input type that accepts NodeAttachStorageGroupVirtualSpaceArray and NodeAttachStorageGroupVirtualSpaceArrayOutput values.
// You can construct a concrete instance of `NodeAttachStorageGroupVirtualSpaceArrayInput` via:
//
//	NodeAttachStorageGroupVirtualSpaceArray{ NodeAttachStorageGroupVirtualSpaceArgs{...} }
type NodeAttachStorageGroupVirtualSpaceArrayInput interface {
	pulumi.Input

	ToNodeAttachStorageGroupVirtualSpaceArrayOutput() NodeAttachStorageGroupVirtualSpaceArrayOutput
	ToNodeAttachStorageGroupVirtualSpaceArrayOutputWithContext(context.Context) NodeAttachStorageGroupVirtualSpaceArrayOutput
}

type NodeAttachStorageGroupVirtualSpaceArray []NodeAttachStorageGroupVirtualSpaceInput

func (NodeAttachStorageGroupVirtualSpaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachStorageGroupVirtualSpace)(nil)).Elem()
}

func (i NodeAttachStorageGroupVirtualSpaceArray) ToNodeAttachStorageGroupVirtualSpaceArrayOutput() NodeAttachStorageGroupVirtualSpaceArrayOutput {
	return i.ToNodeAttachStorageGroupVirtualSpaceArrayOutputWithContext(context.Background())
}

func (i NodeAttachStorageGroupVirtualSpaceArray) ToNodeAttachStorageGroupVirtualSpaceArrayOutputWithContext(ctx context.Context) NodeAttachStorageGroupVirtualSpaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStorageGroupVirtualSpaceArrayOutput)
}

type NodeAttachStorageGroupVirtualSpaceOutput struct{ *pulumi.OutputState }

func (NodeAttachStorageGroupVirtualSpaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachStorageGroupVirtualSpace)(nil)).Elem()
}

func (o NodeAttachStorageGroupVirtualSpaceOutput) ToNodeAttachStorageGroupVirtualSpaceOutput() NodeAttachStorageGroupVirtualSpaceOutput {
	return o
}

func (o NodeAttachStorageGroupVirtualSpaceOutput) ToNodeAttachStorageGroupVirtualSpaceOutputWithContext(ctx context.Context) NodeAttachStorageGroupVirtualSpaceOutput {
	return o
}

func (o NodeAttachStorageGroupVirtualSpaceOutput) LvmLvType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageGroupVirtualSpace) *string { return v.LvmLvType }).(pulumi.StringPtrOutput)
}

func (o NodeAttachStorageGroupVirtualSpaceOutput) LvmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageGroupVirtualSpace) *string { return v.LvmPath }).(pulumi.StringPtrOutput)
}

func (o NodeAttachStorageGroupVirtualSpaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachStorageGroupVirtualSpace) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodeAttachStorageGroupVirtualSpaceOutput) RuntimeLvType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageGroupVirtualSpace) *string { return v.RuntimeLvType }).(pulumi.StringPtrOutput)
}

func (o NodeAttachStorageGroupVirtualSpaceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachStorageGroupVirtualSpace) string { return v.Size }).(pulumi.StringOutput)
}

type NodeAttachStorageGroupVirtualSpaceArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachStorageGroupVirtualSpaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachStorageGroupVirtualSpace)(nil)).Elem()
}

func (o NodeAttachStorageGroupVirtualSpaceArrayOutput) ToNodeAttachStorageGroupVirtualSpaceArrayOutput() NodeAttachStorageGroupVirtualSpaceArrayOutput {
	return o
}

func (o NodeAttachStorageGroupVirtualSpaceArrayOutput) ToNodeAttachStorageGroupVirtualSpaceArrayOutputWithContext(ctx context.Context) NodeAttachStorageGroupVirtualSpaceArrayOutput {
	return o
}

func (o NodeAttachStorageGroupVirtualSpaceArrayOutput) Index(i pulumi.IntInput) NodeAttachStorageGroupVirtualSpaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachStorageGroupVirtualSpace {
		return vs[0].([]NodeAttachStorageGroupVirtualSpace)[vs[1].(int)]
	}).(NodeAttachStorageGroupVirtualSpaceOutput)
}

type NodeAttachStorageSelector struct {
	MatchLabelCount             *string `pulumi:"matchLabelCount"`
	MatchLabelMetadataCmkid     *string `pulumi:"matchLabelMetadataCmkid"`
	MatchLabelMetadataEncrypted *string `pulumi:"matchLabelMetadataEncrypted"`
	MatchLabelSize              *string `pulumi:"matchLabelSize"`
	MatchLabelVolumeType        *string `pulumi:"matchLabelVolumeType"`
	Name                        string  `pulumi:"name"`
	Type                        *string `pulumi:"type"`
}

// NodeAttachStorageSelectorInput is an input type that accepts NodeAttachStorageSelectorArgs and NodeAttachStorageSelectorOutput values.
// You can construct a concrete instance of `NodeAttachStorageSelectorInput` via:
//
//	NodeAttachStorageSelectorArgs{...}
type NodeAttachStorageSelectorInput interface {
	pulumi.Input

	ToNodeAttachStorageSelectorOutput() NodeAttachStorageSelectorOutput
	ToNodeAttachStorageSelectorOutputWithContext(context.Context) NodeAttachStorageSelectorOutput
}

type NodeAttachStorageSelectorArgs struct {
	MatchLabelCount             pulumi.StringPtrInput `pulumi:"matchLabelCount"`
	MatchLabelMetadataCmkid     pulumi.StringPtrInput `pulumi:"matchLabelMetadataCmkid"`
	MatchLabelMetadataEncrypted pulumi.StringPtrInput `pulumi:"matchLabelMetadataEncrypted"`
	MatchLabelSize              pulumi.StringPtrInput `pulumi:"matchLabelSize"`
	MatchLabelVolumeType        pulumi.StringPtrInput `pulumi:"matchLabelVolumeType"`
	Name                        pulumi.StringInput    `pulumi:"name"`
	Type                        pulumi.StringPtrInput `pulumi:"type"`
}

func (NodeAttachStorageSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachStorageSelector)(nil)).Elem()
}

func (i NodeAttachStorageSelectorArgs) ToNodeAttachStorageSelectorOutput() NodeAttachStorageSelectorOutput {
	return i.ToNodeAttachStorageSelectorOutputWithContext(context.Background())
}

func (i NodeAttachStorageSelectorArgs) ToNodeAttachStorageSelectorOutputWithContext(ctx context.Context) NodeAttachStorageSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStorageSelectorOutput)
}

// NodeAttachStorageSelectorArrayInput is an input type that accepts NodeAttachStorageSelectorArray and NodeAttachStorageSelectorArrayOutput values.
// You can construct a concrete instance of `NodeAttachStorageSelectorArrayInput` via:
//
//	NodeAttachStorageSelectorArray{ NodeAttachStorageSelectorArgs{...} }
type NodeAttachStorageSelectorArrayInput interface {
	pulumi.Input

	ToNodeAttachStorageSelectorArrayOutput() NodeAttachStorageSelectorArrayOutput
	ToNodeAttachStorageSelectorArrayOutputWithContext(context.Context) NodeAttachStorageSelectorArrayOutput
}

type NodeAttachStorageSelectorArray []NodeAttachStorageSelectorInput

func (NodeAttachStorageSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachStorageSelector)(nil)).Elem()
}

func (i NodeAttachStorageSelectorArray) ToNodeAttachStorageSelectorArrayOutput() NodeAttachStorageSelectorArrayOutput {
	return i.ToNodeAttachStorageSelectorArrayOutputWithContext(context.Background())
}

func (i NodeAttachStorageSelectorArray) ToNodeAttachStorageSelectorArrayOutputWithContext(ctx context.Context) NodeAttachStorageSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachStorageSelectorArrayOutput)
}

type NodeAttachStorageSelectorOutput struct{ *pulumi.OutputState }

func (NodeAttachStorageSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachStorageSelector)(nil)).Elem()
}

func (o NodeAttachStorageSelectorOutput) ToNodeAttachStorageSelectorOutput() NodeAttachStorageSelectorOutput {
	return o
}

func (o NodeAttachStorageSelectorOutput) ToNodeAttachStorageSelectorOutputWithContext(ctx context.Context) NodeAttachStorageSelectorOutput {
	return o
}

func (o NodeAttachStorageSelectorOutput) MatchLabelCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageSelector) *string { return v.MatchLabelCount }).(pulumi.StringPtrOutput)
}

func (o NodeAttachStorageSelectorOutput) MatchLabelMetadataCmkid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageSelector) *string { return v.MatchLabelMetadataCmkid }).(pulumi.StringPtrOutput)
}

func (o NodeAttachStorageSelectorOutput) MatchLabelMetadataEncrypted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageSelector) *string { return v.MatchLabelMetadataEncrypted }).(pulumi.StringPtrOutput)
}

func (o NodeAttachStorageSelectorOutput) MatchLabelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageSelector) *string { return v.MatchLabelSize }).(pulumi.StringPtrOutput)
}

func (o NodeAttachStorageSelectorOutput) MatchLabelVolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageSelector) *string { return v.MatchLabelVolumeType }).(pulumi.StringPtrOutput)
}

func (o NodeAttachStorageSelectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachStorageSelector) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodeAttachStorageSelectorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeAttachStorageSelector) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodeAttachStorageSelectorArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachStorageSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachStorageSelector)(nil)).Elem()
}

func (o NodeAttachStorageSelectorArrayOutput) ToNodeAttachStorageSelectorArrayOutput() NodeAttachStorageSelectorArrayOutput {
	return o
}

func (o NodeAttachStorageSelectorArrayOutput) ToNodeAttachStorageSelectorArrayOutputWithContext(ctx context.Context) NodeAttachStorageSelectorArrayOutput {
	return o
}

func (o NodeAttachStorageSelectorArrayOutput) Index(i pulumi.IntInput) NodeAttachStorageSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachStorageSelector {
		return vs[0].([]NodeAttachStorageSelector)[vs[1].(int)]
	}).(NodeAttachStorageSelectorOutput)
}

type NodeAttachTaint struct {
	Effect string `pulumi:"effect"`
	Key    string `pulumi:"key"`
	Value  string `pulumi:"value"`
}

// NodeAttachTaintInput is an input type that accepts NodeAttachTaintArgs and NodeAttachTaintOutput values.
// You can construct a concrete instance of `NodeAttachTaintInput` via:
//
//	NodeAttachTaintArgs{...}
type NodeAttachTaintInput interface {
	pulumi.Input

	ToNodeAttachTaintOutput() NodeAttachTaintOutput
	ToNodeAttachTaintOutputWithContext(context.Context) NodeAttachTaintOutput
}

type NodeAttachTaintArgs struct {
	Effect pulumi.StringInput `pulumi:"effect"`
	Key    pulumi.StringInput `pulumi:"key"`
	Value  pulumi.StringInput `pulumi:"value"`
}

func (NodeAttachTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachTaint)(nil)).Elem()
}

func (i NodeAttachTaintArgs) ToNodeAttachTaintOutput() NodeAttachTaintOutput {
	return i.ToNodeAttachTaintOutputWithContext(context.Background())
}

func (i NodeAttachTaintArgs) ToNodeAttachTaintOutputWithContext(ctx context.Context) NodeAttachTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachTaintOutput)
}

// NodeAttachTaintArrayInput is an input type that accepts NodeAttachTaintArray and NodeAttachTaintArrayOutput values.
// You can construct a concrete instance of `NodeAttachTaintArrayInput` via:
//
//	NodeAttachTaintArray{ NodeAttachTaintArgs{...} }
type NodeAttachTaintArrayInput interface {
	pulumi.Input

	ToNodeAttachTaintArrayOutput() NodeAttachTaintArrayOutput
	ToNodeAttachTaintArrayOutputWithContext(context.Context) NodeAttachTaintArrayOutput
}

type NodeAttachTaintArray []NodeAttachTaintInput

func (NodeAttachTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachTaint)(nil)).Elem()
}

func (i NodeAttachTaintArray) ToNodeAttachTaintArrayOutput() NodeAttachTaintArrayOutput {
	return i.ToNodeAttachTaintArrayOutputWithContext(context.Background())
}

func (i NodeAttachTaintArray) ToNodeAttachTaintArrayOutputWithContext(ctx context.Context) NodeAttachTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachTaintArrayOutput)
}

type NodeAttachTaintOutput struct{ *pulumi.OutputState }

func (NodeAttachTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeAttachTaint)(nil)).Elem()
}

func (o NodeAttachTaintOutput) ToNodeAttachTaintOutput() NodeAttachTaintOutput {
	return o
}

func (o NodeAttachTaintOutput) ToNodeAttachTaintOutputWithContext(ctx context.Context) NodeAttachTaintOutput {
	return o
}

func (o NodeAttachTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachTaint) string { return v.Effect }).(pulumi.StringOutput)
}

func (o NodeAttachTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachTaint) string { return v.Key }).(pulumi.StringOutput)
}

func (o NodeAttachTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodeAttachTaint) string { return v.Value }).(pulumi.StringOutput)
}

type NodeAttachTaintArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeAttachTaint)(nil)).Elem()
}

func (o NodeAttachTaintArrayOutput) ToNodeAttachTaintArrayOutput() NodeAttachTaintArrayOutput {
	return o
}

func (o NodeAttachTaintArrayOutput) ToNodeAttachTaintArrayOutputWithContext(ctx context.Context) NodeAttachTaintArrayOutput {
	return o
}

func (o NodeAttachTaintArrayOutput) Index(i pulumi.IntInput) NodeAttachTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeAttachTaint {
		return vs[0].([]NodeAttachTaint)[vs[1].(int)]
	}).(NodeAttachTaintOutput)
}

type NodeDataVolume struct {
	DssPoolId *string `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  *string           `pulumi:"extendParam"`
	ExtendParams map[string]string `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough *bool   `pulumi:"hwPassthrough"`
	Iops          *int    `pulumi:"iops"`
	KmsKeyId      *string `pulumi:"kmsKeyId"`
	Size          int     `pulumi:"size"`
	Throughput    *int    `pulumi:"throughput"`
	Volumetype    string  `pulumi:"volumetype"`
}

// NodeDataVolumeInput is an input type that accepts NodeDataVolumeArgs and NodeDataVolumeOutput values.
// You can construct a concrete instance of `NodeDataVolumeInput` via:
//
//	NodeDataVolumeArgs{...}
type NodeDataVolumeInput interface {
	pulumi.Input

	ToNodeDataVolumeOutput() NodeDataVolumeOutput
	ToNodeDataVolumeOutputWithContext(context.Context) NodeDataVolumeOutput
}

type NodeDataVolumeArgs struct {
	DssPoolId pulumi.StringPtrInput `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  pulumi.StringPtrInput `pulumi:"extendParam"`
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	Iops          pulumi.IntPtrInput    `pulumi:"iops"`
	KmsKeyId      pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Size          pulumi.IntInput       `pulumi:"size"`
	Throughput    pulumi.IntPtrInput    `pulumi:"throughput"`
	Volumetype    pulumi.StringInput    `pulumi:"volumetype"`
}

func (NodeDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeDataVolume)(nil)).Elem()
}

func (i NodeDataVolumeArgs) ToNodeDataVolumeOutput() NodeDataVolumeOutput {
	return i.ToNodeDataVolumeOutputWithContext(context.Background())
}

func (i NodeDataVolumeArgs) ToNodeDataVolumeOutputWithContext(ctx context.Context) NodeDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDataVolumeOutput)
}

// NodeDataVolumeArrayInput is an input type that accepts NodeDataVolumeArray and NodeDataVolumeArrayOutput values.
// You can construct a concrete instance of `NodeDataVolumeArrayInput` via:
//
//	NodeDataVolumeArray{ NodeDataVolumeArgs{...} }
type NodeDataVolumeArrayInput interface {
	pulumi.Input

	ToNodeDataVolumeArrayOutput() NodeDataVolumeArrayOutput
	ToNodeDataVolumeArrayOutputWithContext(context.Context) NodeDataVolumeArrayOutput
}

type NodeDataVolumeArray []NodeDataVolumeInput

func (NodeDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeDataVolume)(nil)).Elem()
}

func (i NodeDataVolumeArray) ToNodeDataVolumeArrayOutput() NodeDataVolumeArrayOutput {
	return i.ToNodeDataVolumeArrayOutputWithContext(context.Background())
}

func (i NodeDataVolumeArray) ToNodeDataVolumeArrayOutputWithContext(ctx context.Context) NodeDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeDataVolumeArrayOutput)
}

type NodeDataVolumeOutput struct{ *pulumi.OutputState }

func (NodeDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeDataVolume)(nil)).Elem()
}

func (o NodeDataVolumeOutput) ToNodeDataVolumeOutput() NodeDataVolumeOutput {
	return o
}

func (o NodeDataVolumeOutput) ToNodeDataVolumeOutputWithContext(ctx context.Context) NodeDataVolumeOutput {
	return o
}

func (o NodeDataVolumeOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *string { return v.DssPoolId }).(pulumi.StringPtrOutput)
}

// Deprecated: use extendParams instead
func (o NodeDataVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

func (o NodeDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// schema: Internal
func (o NodeDataVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

func (o NodeDataVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o NodeDataVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o NodeDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodeDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o NodeDataVolumeOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeDataVolume) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o NodeDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v NodeDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type NodeDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodeDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeDataVolume)(nil)).Elem()
}

func (o NodeDataVolumeArrayOutput) ToNodeDataVolumeArrayOutput() NodeDataVolumeArrayOutput {
	return o
}

func (o NodeDataVolumeArrayOutput) ToNodeDataVolumeArrayOutputWithContext(ctx context.Context) NodeDataVolumeArrayOutput {
	return o
}

func (o NodeDataVolumeArrayOutput) Index(i pulumi.IntInput) NodeDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeDataVolume {
		return vs[0].([]NodeDataVolume)[vs[1].(int)]
	}).(NodeDataVolumeOutput)
}

type NodeExtendParams struct {
	AgencyName                *string `pulumi:"agencyName"`
	DockerBaseSize            *int    `pulumi:"dockerBaseSize"`
	KubeReservedMem           *int    `pulumi:"kubeReservedMem"`
	MarketType                *string `pulumi:"marketType"`
	MaxPods                   *int    `pulumi:"maxPods"`
	NicThreshold              *string `pulumi:"nicThreshold"`
	NodeImageId               *string `pulumi:"nodeImageId"`
	NodeMultiQueue            *string `pulumi:"nodeMultiQueue"`
	Postinstall               *string `pulumi:"postinstall"`
	Preinstall                *string `pulumi:"preinstall"`
	SecurityReinforcementType *string `pulumi:"securityReinforcementType"`
	SpotPrice                 *string `pulumi:"spotPrice"`
	SystemReservedMem         *int    `pulumi:"systemReservedMem"`
}

// NodeExtendParamsInput is an input type that accepts NodeExtendParamsArgs and NodeExtendParamsOutput values.
// You can construct a concrete instance of `NodeExtendParamsInput` via:
//
//	NodeExtendParamsArgs{...}
type NodeExtendParamsInput interface {
	pulumi.Input

	ToNodeExtendParamsOutput() NodeExtendParamsOutput
	ToNodeExtendParamsOutputWithContext(context.Context) NodeExtendParamsOutput
}

type NodeExtendParamsArgs struct {
	AgencyName                pulumi.StringPtrInput `pulumi:"agencyName"`
	DockerBaseSize            pulumi.IntPtrInput    `pulumi:"dockerBaseSize"`
	KubeReservedMem           pulumi.IntPtrInput    `pulumi:"kubeReservedMem"`
	MarketType                pulumi.StringPtrInput `pulumi:"marketType"`
	MaxPods                   pulumi.IntPtrInput    `pulumi:"maxPods"`
	NicThreshold              pulumi.StringPtrInput `pulumi:"nicThreshold"`
	NodeImageId               pulumi.StringPtrInput `pulumi:"nodeImageId"`
	NodeMultiQueue            pulumi.StringPtrInput `pulumi:"nodeMultiQueue"`
	Postinstall               pulumi.StringPtrInput `pulumi:"postinstall"`
	Preinstall                pulumi.StringPtrInput `pulumi:"preinstall"`
	SecurityReinforcementType pulumi.StringPtrInput `pulumi:"securityReinforcementType"`
	SpotPrice                 pulumi.StringPtrInput `pulumi:"spotPrice"`
	SystemReservedMem         pulumi.IntPtrInput    `pulumi:"systemReservedMem"`
}

func (NodeExtendParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeExtendParams)(nil)).Elem()
}

func (i NodeExtendParamsArgs) ToNodeExtendParamsOutput() NodeExtendParamsOutput {
	return i.ToNodeExtendParamsOutputWithContext(context.Background())
}

func (i NodeExtendParamsArgs) ToNodeExtendParamsOutputWithContext(ctx context.Context) NodeExtendParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeExtendParamsOutput)
}

func (i NodeExtendParamsArgs) ToNodeExtendParamsPtrOutput() NodeExtendParamsPtrOutput {
	return i.ToNodeExtendParamsPtrOutputWithContext(context.Background())
}

func (i NodeExtendParamsArgs) ToNodeExtendParamsPtrOutputWithContext(ctx context.Context) NodeExtendParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeExtendParamsOutput).ToNodeExtendParamsPtrOutputWithContext(ctx)
}

// NodeExtendParamsPtrInput is an input type that accepts NodeExtendParamsArgs, NodeExtendParamsPtr and NodeExtendParamsPtrOutput values.
// You can construct a concrete instance of `NodeExtendParamsPtrInput` via:
//
//	        NodeExtendParamsArgs{...}
//
//	or:
//
//	        nil
type NodeExtendParamsPtrInput interface {
	pulumi.Input

	ToNodeExtendParamsPtrOutput() NodeExtendParamsPtrOutput
	ToNodeExtendParamsPtrOutputWithContext(context.Context) NodeExtendParamsPtrOutput
}

type nodeExtendParamsPtrType NodeExtendParamsArgs

func NodeExtendParamsPtr(v *NodeExtendParamsArgs) NodeExtendParamsPtrInput {
	return (*nodeExtendParamsPtrType)(v)
}

func (*nodeExtendParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeExtendParams)(nil)).Elem()
}

func (i *nodeExtendParamsPtrType) ToNodeExtendParamsPtrOutput() NodeExtendParamsPtrOutput {
	return i.ToNodeExtendParamsPtrOutputWithContext(context.Background())
}

func (i *nodeExtendParamsPtrType) ToNodeExtendParamsPtrOutputWithContext(ctx context.Context) NodeExtendParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeExtendParamsPtrOutput)
}

type NodeExtendParamsOutput struct{ *pulumi.OutputState }

func (NodeExtendParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeExtendParams)(nil)).Elem()
}

func (o NodeExtendParamsOutput) ToNodeExtendParamsOutput() NodeExtendParamsOutput {
	return o
}

func (o NodeExtendParamsOutput) ToNodeExtendParamsOutputWithContext(ctx context.Context) NodeExtendParamsOutput {
	return o
}

func (o NodeExtendParamsOutput) ToNodeExtendParamsPtrOutput() NodeExtendParamsPtrOutput {
	return o.ToNodeExtendParamsPtrOutputWithContext(context.Background())
}

func (o NodeExtendParamsOutput) ToNodeExtendParamsPtrOutputWithContext(ctx context.Context) NodeExtendParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeExtendParams) *NodeExtendParams {
		return &v
	}).(NodeExtendParamsPtrOutput)
}

func (o NodeExtendParamsOutput) AgencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.AgencyName }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) DockerBaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *int { return v.DockerBaseSize }).(pulumi.IntPtrOutput)
}

func (o NodeExtendParamsOutput) KubeReservedMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *int { return v.KubeReservedMem }).(pulumi.IntPtrOutput)
}

func (o NodeExtendParamsOutput) MarketType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.MarketType }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

func (o NodeExtendParamsOutput) NicThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.NicThreshold }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) NodeImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.NodeImageId }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) NodeMultiQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.NodeMultiQueue }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.Postinstall }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.Preinstall }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) SecurityReinforcementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.SecurityReinforcementType }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) SpotPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *string { return v.SpotPrice }).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsOutput) SystemReservedMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeExtendParams) *int { return v.SystemReservedMem }).(pulumi.IntPtrOutput)
}

type NodeExtendParamsPtrOutput struct{ *pulumi.OutputState }

func (NodeExtendParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeExtendParams)(nil)).Elem()
}

func (o NodeExtendParamsPtrOutput) ToNodeExtendParamsPtrOutput() NodeExtendParamsPtrOutput {
	return o
}

func (o NodeExtendParamsPtrOutput) ToNodeExtendParamsPtrOutputWithContext(ctx context.Context) NodeExtendParamsPtrOutput {
	return o
}

func (o NodeExtendParamsPtrOutput) Elem() NodeExtendParamsOutput {
	return o.ApplyT(func(v *NodeExtendParams) NodeExtendParams {
		if v != nil {
			return *v
		}
		var ret NodeExtendParams
		return ret
	}).(NodeExtendParamsOutput)
}

func (o NodeExtendParamsPtrOutput) AgencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.AgencyName
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) DockerBaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *int {
		if v == nil {
			return nil
		}
		return v.DockerBaseSize
	}).(pulumi.IntPtrOutput)
}

func (o NodeExtendParamsPtrOutput) KubeReservedMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *int {
		if v == nil {
			return nil
		}
		return v.KubeReservedMem
	}).(pulumi.IntPtrOutput)
}

func (o NodeExtendParamsPtrOutput) MarketType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.MarketType
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *int {
		if v == nil {
			return nil
		}
		return v.MaxPods
	}).(pulumi.IntPtrOutput)
}

func (o NodeExtendParamsPtrOutput) NicThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.NicThreshold
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) NodeImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.NodeImageId
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) NodeMultiQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.NodeMultiQueue
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.Postinstall
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.Preinstall
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) SecurityReinforcementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.SecurityReinforcementType
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) SpotPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.SpotPrice
	}).(pulumi.StringPtrOutput)
}

func (o NodeExtendParamsPtrOutput) SystemReservedMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeExtendParams) *int {
		if v == nil {
			return nil
		}
		return v.SystemReservedMem
	}).(pulumi.IntPtrOutput)
}

type NodeExtensionNic struct {
	SubnetId string `pulumi:"subnetId"`
}

// NodeExtensionNicInput is an input type that accepts NodeExtensionNicArgs and NodeExtensionNicOutput values.
// You can construct a concrete instance of `NodeExtensionNicInput` via:
//
//	NodeExtensionNicArgs{...}
type NodeExtensionNicInput interface {
	pulumi.Input

	ToNodeExtensionNicOutput() NodeExtensionNicOutput
	ToNodeExtensionNicOutputWithContext(context.Context) NodeExtensionNicOutput
}

type NodeExtensionNicArgs struct {
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (NodeExtensionNicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeExtensionNic)(nil)).Elem()
}

func (i NodeExtensionNicArgs) ToNodeExtensionNicOutput() NodeExtensionNicOutput {
	return i.ToNodeExtensionNicOutputWithContext(context.Background())
}

func (i NodeExtensionNicArgs) ToNodeExtensionNicOutputWithContext(ctx context.Context) NodeExtensionNicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeExtensionNicOutput)
}

// NodeExtensionNicArrayInput is an input type that accepts NodeExtensionNicArray and NodeExtensionNicArrayOutput values.
// You can construct a concrete instance of `NodeExtensionNicArrayInput` via:
//
//	NodeExtensionNicArray{ NodeExtensionNicArgs{...} }
type NodeExtensionNicArrayInput interface {
	pulumi.Input

	ToNodeExtensionNicArrayOutput() NodeExtensionNicArrayOutput
	ToNodeExtensionNicArrayOutputWithContext(context.Context) NodeExtensionNicArrayOutput
}

type NodeExtensionNicArray []NodeExtensionNicInput

func (NodeExtensionNicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeExtensionNic)(nil)).Elem()
}

func (i NodeExtensionNicArray) ToNodeExtensionNicArrayOutput() NodeExtensionNicArrayOutput {
	return i.ToNodeExtensionNicArrayOutputWithContext(context.Background())
}

func (i NodeExtensionNicArray) ToNodeExtensionNicArrayOutputWithContext(ctx context.Context) NodeExtensionNicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeExtensionNicArrayOutput)
}

type NodeExtensionNicOutput struct{ *pulumi.OutputState }

func (NodeExtensionNicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeExtensionNic)(nil)).Elem()
}

func (o NodeExtensionNicOutput) ToNodeExtensionNicOutput() NodeExtensionNicOutput {
	return o
}

func (o NodeExtensionNicOutput) ToNodeExtensionNicOutputWithContext(ctx context.Context) NodeExtensionNicOutput {
	return o
}

func (o NodeExtensionNicOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v NodeExtensionNic) string { return v.SubnetId }).(pulumi.StringOutput)
}

type NodeExtensionNicArrayOutput struct{ *pulumi.OutputState }

func (NodeExtensionNicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeExtensionNic)(nil)).Elem()
}

func (o NodeExtensionNicArrayOutput) ToNodeExtensionNicArrayOutput() NodeExtensionNicArrayOutput {
	return o
}

func (o NodeExtensionNicArrayOutput) ToNodeExtensionNicArrayOutputWithContext(ctx context.Context) NodeExtensionNicArrayOutput {
	return o
}

func (o NodeExtensionNicArrayOutput) Index(i pulumi.IntInput) NodeExtensionNicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeExtensionNic {
		return vs[0].([]NodeExtensionNic)[vs[1].(int)]
	}).(NodeExtensionNicOutput)
}

type NodeHostnameConfig struct {
	Type string `pulumi:"type"`
}

// NodeHostnameConfigInput is an input type that accepts NodeHostnameConfigArgs and NodeHostnameConfigOutput values.
// You can construct a concrete instance of `NodeHostnameConfigInput` via:
//
//	NodeHostnameConfigArgs{...}
type NodeHostnameConfigInput interface {
	pulumi.Input

	ToNodeHostnameConfigOutput() NodeHostnameConfigOutput
	ToNodeHostnameConfigOutputWithContext(context.Context) NodeHostnameConfigOutput
}

type NodeHostnameConfigArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (NodeHostnameConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeHostnameConfig)(nil)).Elem()
}

func (i NodeHostnameConfigArgs) ToNodeHostnameConfigOutput() NodeHostnameConfigOutput {
	return i.ToNodeHostnameConfigOutputWithContext(context.Background())
}

func (i NodeHostnameConfigArgs) ToNodeHostnameConfigOutputWithContext(ctx context.Context) NodeHostnameConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeHostnameConfigOutput)
}

func (i NodeHostnameConfigArgs) ToNodeHostnameConfigPtrOutput() NodeHostnameConfigPtrOutput {
	return i.ToNodeHostnameConfigPtrOutputWithContext(context.Background())
}

func (i NodeHostnameConfigArgs) ToNodeHostnameConfigPtrOutputWithContext(ctx context.Context) NodeHostnameConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeHostnameConfigOutput).ToNodeHostnameConfigPtrOutputWithContext(ctx)
}

// NodeHostnameConfigPtrInput is an input type that accepts NodeHostnameConfigArgs, NodeHostnameConfigPtr and NodeHostnameConfigPtrOutput values.
// You can construct a concrete instance of `NodeHostnameConfigPtrInput` via:
//
//	        NodeHostnameConfigArgs{...}
//
//	or:
//
//	        nil
type NodeHostnameConfigPtrInput interface {
	pulumi.Input

	ToNodeHostnameConfigPtrOutput() NodeHostnameConfigPtrOutput
	ToNodeHostnameConfigPtrOutputWithContext(context.Context) NodeHostnameConfigPtrOutput
}

type nodeHostnameConfigPtrType NodeHostnameConfigArgs

func NodeHostnameConfigPtr(v *NodeHostnameConfigArgs) NodeHostnameConfigPtrInput {
	return (*nodeHostnameConfigPtrType)(v)
}

func (*nodeHostnameConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeHostnameConfig)(nil)).Elem()
}

func (i *nodeHostnameConfigPtrType) ToNodeHostnameConfigPtrOutput() NodeHostnameConfigPtrOutput {
	return i.ToNodeHostnameConfigPtrOutputWithContext(context.Background())
}

func (i *nodeHostnameConfigPtrType) ToNodeHostnameConfigPtrOutputWithContext(ctx context.Context) NodeHostnameConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeHostnameConfigPtrOutput)
}

type NodeHostnameConfigOutput struct{ *pulumi.OutputState }

func (NodeHostnameConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeHostnameConfig)(nil)).Elem()
}

func (o NodeHostnameConfigOutput) ToNodeHostnameConfigOutput() NodeHostnameConfigOutput {
	return o
}

func (o NodeHostnameConfigOutput) ToNodeHostnameConfigOutputWithContext(ctx context.Context) NodeHostnameConfigOutput {
	return o
}

func (o NodeHostnameConfigOutput) ToNodeHostnameConfigPtrOutput() NodeHostnameConfigPtrOutput {
	return o.ToNodeHostnameConfigPtrOutputWithContext(context.Background())
}

func (o NodeHostnameConfigOutput) ToNodeHostnameConfigPtrOutputWithContext(ctx context.Context) NodeHostnameConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeHostnameConfig) *NodeHostnameConfig {
		return &v
	}).(NodeHostnameConfigPtrOutput)
}

func (o NodeHostnameConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodeHostnameConfig) string { return v.Type }).(pulumi.StringOutput)
}

type NodeHostnameConfigPtrOutput struct{ *pulumi.OutputState }

func (NodeHostnameConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeHostnameConfig)(nil)).Elem()
}

func (o NodeHostnameConfigPtrOutput) ToNodeHostnameConfigPtrOutput() NodeHostnameConfigPtrOutput {
	return o
}

func (o NodeHostnameConfigPtrOutput) ToNodeHostnameConfigPtrOutputWithContext(ctx context.Context) NodeHostnameConfigPtrOutput {
	return o
}

func (o NodeHostnameConfigPtrOutput) Elem() NodeHostnameConfigOutput {
	return o.ApplyT(func(v *NodeHostnameConfig) NodeHostnameConfig {
		if v != nil {
			return *v
		}
		var ret NodeHostnameConfig
		return ret
	}).(NodeHostnameConfigOutput)
}

func (o NodeHostnameConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeHostnameConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type NodePoolDataVolume struct {
	DssPoolId *string `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  *string           `pulumi:"extendParam"`
	ExtendParams map[string]string `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough *bool   `pulumi:"hwPassthrough"`
	Iops          *int    `pulumi:"iops"`
	KmsKeyId      *string `pulumi:"kmsKeyId"`
	Size          int     `pulumi:"size"`
	Throughput    *int    `pulumi:"throughput"`
	Volumetype    string  `pulumi:"volumetype"`
}

// NodePoolDataVolumeInput is an input type that accepts NodePoolDataVolumeArgs and NodePoolDataVolumeOutput values.
// You can construct a concrete instance of `NodePoolDataVolumeInput` via:
//
//	NodePoolDataVolumeArgs{...}
type NodePoolDataVolumeInput interface {
	pulumi.Input

	ToNodePoolDataVolumeOutput() NodePoolDataVolumeOutput
	ToNodePoolDataVolumeOutputWithContext(context.Context) NodePoolDataVolumeOutput
}

type NodePoolDataVolumeArgs struct {
	DssPoolId pulumi.StringPtrInput `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  pulumi.StringPtrInput `pulumi:"extendParam"`
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	Iops          pulumi.IntPtrInput    `pulumi:"iops"`
	KmsKeyId      pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Size          pulumi.IntInput       `pulumi:"size"`
	Throughput    pulumi.IntPtrInput    `pulumi:"throughput"`
	Volumetype    pulumi.StringInput    `pulumi:"volumetype"`
}

func (NodePoolDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolDataVolume)(nil)).Elem()
}

func (i NodePoolDataVolumeArgs) ToNodePoolDataVolumeOutput() NodePoolDataVolumeOutput {
	return i.ToNodePoolDataVolumeOutputWithContext(context.Background())
}

func (i NodePoolDataVolumeArgs) ToNodePoolDataVolumeOutputWithContext(ctx context.Context) NodePoolDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolDataVolumeOutput)
}

// NodePoolDataVolumeArrayInput is an input type that accepts NodePoolDataVolumeArray and NodePoolDataVolumeArrayOutput values.
// You can construct a concrete instance of `NodePoolDataVolumeArrayInput` via:
//
//	NodePoolDataVolumeArray{ NodePoolDataVolumeArgs{...} }
type NodePoolDataVolumeArrayInput interface {
	pulumi.Input

	ToNodePoolDataVolumeArrayOutput() NodePoolDataVolumeArrayOutput
	ToNodePoolDataVolumeArrayOutputWithContext(context.Context) NodePoolDataVolumeArrayOutput
}

type NodePoolDataVolumeArray []NodePoolDataVolumeInput

func (NodePoolDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolDataVolume)(nil)).Elem()
}

func (i NodePoolDataVolumeArray) ToNodePoolDataVolumeArrayOutput() NodePoolDataVolumeArrayOutput {
	return i.ToNodePoolDataVolumeArrayOutputWithContext(context.Background())
}

func (i NodePoolDataVolumeArray) ToNodePoolDataVolumeArrayOutputWithContext(ctx context.Context) NodePoolDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolDataVolumeArrayOutput)
}

type NodePoolDataVolumeOutput struct{ *pulumi.OutputState }

func (NodePoolDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolDataVolume)(nil)).Elem()
}

func (o NodePoolDataVolumeOutput) ToNodePoolDataVolumeOutput() NodePoolDataVolumeOutput {
	return o
}

func (o NodePoolDataVolumeOutput) ToNodePoolDataVolumeOutputWithContext(ctx context.Context) NodePoolDataVolumeOutput {
	return o
}

func (o NodePoolDataVolumeOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *string { return v.DssPoolId }).(pulumi.StringPtrOutput)
}

// Deprecated: use extendParams instead
func (o NodePoolDataVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

func (o NodePoolDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodePoolDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// schema: Internal
func (o NodePoolDataVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

func (o NodePoolDataVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o NodePoolDataVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o NodePoolDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o NodePoolDataVolumeOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolDataVolume) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o NodePoolDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type NodePoolDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (NodePoolDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolDataVolume)(nil)).Elem()
}

func (o NodePoolDataVolumeArrayOutput) ToNodePoolDataVolumeArrayOutput() NodePoolDataVolumeArrayOutput {
	return o
}

func (o NodePoolDataVolumeArrayOutput) ToNodePoolDataVolumeArrayOutputWithContext(ctx context.Context) NodePoolDataVolumeArrayOutput {
	return o
}

func (o NodePoolDataVolumeArrayOutput) Index(i pulumi.IntInput) NodePoolDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolDataVolume {
		return vs[0].([]NodePoolDataVolume)[vs[1].(int)]
	}).(NodePoolDataVolumeOutput)
}

type NodePoolExtendParams struct {
	AgencyName                *string `pulumi:"agencyName"`
	DockerBaseSize            *int    `pulumi:"dockerBaseSize"`
	KubeReservedMem           *int    `pulumi:"kubeReservedMem"`
	MarketType                *string `pulumi:"marketType"`
	MaxPods                   *int    `pulumi:"maxPods"`
	NicThreshold              *string `pulumi:"nicThreshold"`
	NodeImageId               *string `pulumi:"nodeImageId"`
	NodeMultiQueue            *string `pulumi:"nodeMultiQueue"`
	Postinstall               *string `pulumi:"postinstall"`
	Preinstall                *string `pulumi:"preinstall"`
	SecurityReinforcementType *string `pulumi:"securityReinforcementType"`
	SpotPrice                 *string `pulumi:"spotPrice"`
	SystemReservedMem         *int    `pulumi:"systemReservedMem"`
}

// NodePoolExtendParamsInput is an input type that accepts NodePoolExtendParamsArgs and NodePoolExtendParamsOutput values.
// You can construct a concrete instance of `NodePoolExtendParamsInput` via:
//
//	NodePoolExtendParamsArgs{...}
type NodePoolExtendParamsInput interface {
	pulumi.Input

	ToNodePoolExtendParamsOutput() NodePoolExtendParamsOutput
	ToNodePoolExtendParamsOutputWithContext(context.Context) NodePoolExtendParamsOutput
}

type NodePoolExtendParamsArgs struct {
	AgencyName                pulumi.StringPtrInput `pulumi:"agencyName"`
	DockerBaseSize            pulumi.IntPtrInput    `pulumi:"dockerBaseSize"`
	KubeReservedMem           pulumi.IntPtrInput    `pulumi:"kubeReservedMem"`
	MarketType                pulumi.StringPtrInput `pulumi:"marketType"`
	MaxPods                   pulumi.IntPtrInput    `pulumi:"maxPods"`
	NicThreshold              pulumi.StringPtrInput `pulumi:"nicThreshold"`
	NodeImageId               pulumi.StringPtrInput `pulumi:"nodeImageId"`
	NodeMultiQueue            pulumi.StringPtrInput `pulumi:"nodeMultiQueue"`
	Postinstall               pulumi.StringPtrInput `pulumi:"postinstall"`
	Preinstall                pulumi.StringPtrInput `pulumi:"preinstall"`
	SecurityReinforcementType pulumi.StringPtrInput `pulumi:"securityReinforcementType"`
	SpotPrice                 pulumi.StringPtrInput `pulumi:"spotPrice"`
	SystemReservedMem         pulumi.IntPtrInput    `pulumi:"systemReservedMem"`
}

func (NodePoolExtendParamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtendParams)(nil)).Elem()
}

func (i NodePoolExtendParamsArgs) ToNodePoolExtendParamsOutput() NodePoolExtendParamsOutput {
	return i.ToNodePoolExtendParamsOutputWithContext(context.Background())
}

func (i NodePoolExtendParamsArgs) ToNodePoolExtendParamsOutputWithContext(ctx context.Context) NodePoolExtendParamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtendParamsOutput)
}

func (i NodePoolExtendParamsArgs) ToNodePoolExtendParamsPtrOutput() NodePoolExtendParamsPtrOutput {
	return i.ToNodePoolExtendParamsPtrOutputWithContext(context.Background())
}

func (i NodePoolExtendParamsArgs) ToNodePoolExtendParamsPtrOutputWithContext(ctx context.Context) NodePoolExtendParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtendParamsOutput).ToNodePoolExtendParamsPtrOutputWithContext(ctx)
}

// NodePoolExtendParamsPtrInput is an input type that accepts NodePoolExtendParamsArgs, NodePoolExtendParamsPtr and NodePoolExtendParamsPtrOutput values.
// You can construct a concrete instance of `NodePoolExtendParamsPtrInput` via:
//
//	        NodePoolExtendParamsArgs{...}
//
//	or:
//
//	        nil
type NodePoolExtendParamsPtrInput interface {
	pulumi.Input

	ToNodePoolExtendParamsPtrOutput() NodePoolExtendParamsPtrOutput
	ToNodePoolExtendParamsPtrOutputWithContext(context.Context) NodePoolExtendParamsPtrOutput
}

type nodePoolExtendParamsPtrType NodePoolExtendParamsArgs

func NodePoolExtendParamsPtr(v *NodePoolExtendParamsArgs) NodePoolExtendParamsPtrInput {
	return (*nodePoolExtendParamsPtrType)(v)
}

func (*nodePoolExtendParamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtendParams)(nil)).Elem()
}

func (i *nodePoolExtendParamsPtrType) ToNodePoolExtendParamsPtrOutput() NodePoolExtendParamsPtrOutput {
	return i.ToNodePoolExtendParamsPtrOutputWithContext(context.Background())
}

func (i *nodePoolExtendParamsPtrType) ToNodePoolExtendParamsPtrOutputWithContext(ctx context.Context) NodePoolExtendParamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtendParamsPtrOutput)
}

type NodePoolExtendParamsOutput struct{ *pulumi.OutputState }

func (NodePoolExtendParamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtendParams)(nil)).Elem()
}

func (o NodePoolExtendParamsOutput) ToNodePoolExtendParamsOutput() NodePoolExtendParamsOutput {
	return o
}

func (o NodePoolExtendParamsOutput) ToNodePoolExtendParamsOutputWithContext(ctx context.Context) NodePoolExtendParamsOutput {
	return o
}

func (o NodePoolExtendParamsOutput) ToNodePoolExtendParamsPtrOutput() NodePoolExtendParamsPtrOutput {
	return o.ToNodePoolExtendParamsPtrOutputWithContext(context.Background())
}

func (o NodePoolExtendParamsOutput) ToNodePoolExtendParamsPtrOutputWithContext(ctx context.Context) NodePoolExtendParamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolExtendParams) *NodePoolExtendParams {
		return &v
	}).(NodePoolExtendParamsPtrOutput)
}

func (o NodePoolExtendParamsOutput) AgencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.AgencyName }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) DockerBaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *int { return v.DockerBaseSize }).(pulumi.IntPtrOutput)
}

func (o NodePoolExtendParamsOutput) KubeReservedMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *int { return v.KubeReservedMem }).(pulumi.IntPtrOutput)
}

func (o NodePoolExtendParamsOutput) MarketType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.MarketType }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *int { return v.MaxPods }).(pulumi.IntPtrOutput)
}

func (o NodePoolExtendParamsOutput) NicThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.NicThreshold }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) NodeImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.NodeImageId }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) NodeMultiQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.NodeMultiQueue }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.Postinstall }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.Preinstall }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) SecurityReinforcementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.SecurityReinforcementType }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) SpotPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *string { return v.SpotPrice }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsOutput) SystemReservedMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolExtendParams) *int { return v.SystemReservedMem }).(pulumi.IntPtrOutput)
}

type NodePoolExtendParamsPtrOutput struct{ *pulumi.OutputState }

func (NodePoolExtendParamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtendParams)(nil)).Elem()
}

func (o NodePoolExtendParamsPtrOutput) ToNodePoolExtendParamsPtrOutput() NodePoolExtendParamsPtrOutput {
	return o
}

func (o NodePoolExtendParamsPtrOutput) ToNodePoolExtendParamsPtrOutputWithContext(ctx context.Context) NodePoolExtendParamsPtrOutput {
	return o
}

func (o NodePoolExtendParamsPtrOutput) Elem() NodePoolExtendParamsOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) NodePoolExtendParams {
		if v != nil {
			return *v
		}
		var ret NodePoolExtendParams
		return ret
	}).(NodePoolExtendParamsOutput)
}

func (o NodePoolExtendParamsPtrOutput) AgencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.AgencyName
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) DockerBaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *int {
		if v == nil {
			return nil
		}
		return v.DockerBaseSize
	}).(pulumi.IntPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) KubeReservedMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *int {
		if v == nil {
			return nil
		}
		return v.KubeReservedMem
	}).(pulumi.IntPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) MarketType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.MarketType
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *int {
		if v == nil {
			return nil
		}
		return v.MaxPods
	}).(pulumi.IntPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) NicThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.NicThreshold
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) NodeImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.NodeImageId
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) NodeMultiQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.NodeMultiQueue
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.Postinstall
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.Preinstall
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) SecurityReinforcementType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.SecurityReinforcementType
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) SpotPrice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *string {
		if v == nil {
			return nil
		}
		return v.SpotPrice
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtendParamsPtrOutput) SystemReservedMem() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolExtendParams) *int {
		if v == nil {
			return nil
		}
		return v.SystemReservedMem
	}).(pulumi.IntPtrOutput)
}

type NodePoolExtensionScaleGroup struct {
	Metadata *NodePoolExtensionScaleGroupMetadata `pulumi:"metadata"`
	Spec     *NodePoolExtensionScaleGroupSpec     `pulumi:"spec"`
}

// NodePoolExtensionScaleGroupInput is an input type that accepts NodePoolExtensionScaleGroupArgs and NodePoolExtensionScaleGroupOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupInput` via:
//
//	NodePoolExtensionScaleGroupArgs{...}
type NodePoolExtensionScaleGroupInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupOutput() NodePoolExtensionScaleGroupOutput
	ToNodePoolExtensionScaleGroupOutputWithContext(context.Context) NodePoolExtensionScaleGroupOutput
}

type NodePoolExtensionScaleGroupArgs struct {
	Metadata NodePoolExtensionScaleGroupMetadataPtrInput `pulumi:"metadata"`
	Spec     NodePoolExtensionScaleGroupSpecPtrInput     `pulumi:"spec"`
}

func (NodePoolExtensionScaleGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroup)(nil)).Elem()
}

func (i NodePoolExtensionScaleGroupArgs) ToNodePoolExtensionScaleGroupOutput() NodePoolExtensionScaleGroupOutput {
	return i.ToNodePoolExtensionScaleGroupOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupArgs) ToNodePoolExtensionScaleGroupOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupOutput)
}

// NodePoolExtensionScaleGroupArrayInput is an input type that accepts NodePoolExtensionScaleGroupArray and NodePoolExtensionScaleGroupArrayOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupArrayInput` via:
//
//	NodePoolExtensionScaleGroupArray{ NodePoolExtensionScaleGroupArgs{...} }
type NodePoolExtensionScaleGroupArrayInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupArrayOutput() NodePoolExtensionScaleGroupArrayOutput
	ToNodePoolExtensionScaleGroupArrayOutputWithContext(context.Context) NodePoolExtensionScaleGroupArrayOutput
}

type NodePoolExtensionScaleGroupArray []NodePoolExtensionScaleGroupInput

func (NodePoolExtensionScaleGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolExtensionScaleGroup)(nil)).Elem()
}

func (i NodePoolExtensionScaleGroupArray) ToNodePoolExtensionScaleGroupArrayOutput() NodePoolExtensionScaleGroupArrayOutput {
	return i.ToNodePoolExtensionScaleGroupArrayOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupArray) ToNodePoolExtensionScaleGroupArrayOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupArrayOutput)
}

type NodePoolExtensionScaleGroupOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroup)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupOutput) ToNodePoolExtensionScaleGroupOutput() NodePoolExtensionScaleGroupOutput {
	return o
}

func (o NodePoolExtensionScaleGroupOutput) ToNodePoolExtensionScaleGroupOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupOutput {
	return o
}

func (o NodePoolExtensionScaleGroupOutput) Metadata() NodePoolExtensionScaleGroupMetadataPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroup) *NodePoolExtensionScaleGroupMetadata { return v.Metadata }).(NodePoolExtensionScaleGroupMetadataPtrOutput)
}

func (o NodePoolExtensionScaleGroupOutput) Spec() NodePoolExtensionScaleGroupSpecPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroup) *NodePoolExtensionScaleGroupSpec { return v.Spec }).(NodePoolExtensionScaleGroupSpecPtrOutput)
}

type NodePoolExtensionScaleGroupArrayOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolExtensionScaleGroup)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupArrayOutput) ToNodePoolExtensionScaleGroupArrayOutput() NodePoolExtensionScaleGroupArrayOutput {
	return o
}

func (o NodePoolExtensionScaleGroupArrayOutput) ToNodePoolExtensionScaleGroupArrayOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupArrayOutput {
	return o
}

func (o NodePoolExtensionScaleGroupArrayOutput) Index(i pulumi.IntInput) NodePoolExtensionScaleGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolExtensionScaleGroup {
		return vs[0].([]NodePoolExtensionScaleGroup)[vs[1].(int)]
	}).(NodePoolExtensionScaleGroupOutput)
}

type NodePoolExtensionScaleGroupMetadata struct {
	Name string  `pulumi:"name"`
	Uid  *string `pulumi:"uid"`
}

// NodePoolExtensionScaleGroupMetadataInput is an input type that accepts NodePoolExtensionScaleGroupMetadataArgs and NodePoolExtensionScaleGroupMetadataOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupMetadataInput` via:
//
//	NodePoolExtensionScaleGroupMetadataArgs{...}
type NodePoolExtensionScaleGroupMetadataInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupMetadataOutput() NodePoolExtensionScaleGroupMetadataOutput
	ToNodePoolExtensionScaleGroupMetadataOutputWithContext(context.Context) NodePoolExtensionScaleGroupMetadataOutput
}

type NodePoolExtensionScaleGroupMetadataArgs struct {
	Name pulumi.StringInput    `pulumi:"name"`
	Uid  pulumi.StringPtrInput `pulumi:"uid"`
}

func (NodePoolExtensionScaleGroupMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroupMetadata)(nil)).Elem()
}

func (i NodePoolExtensionScaleGroupMetadataArgs) ToNodePoolExtensionScaleGroupMetadataOutput() NodePoolExtensionScaleGroupMetadataOutput {
	return i.ToNodePoolExtensionScaleGroupMetadataOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupMetadataArgs) ToNodePoolExtensionScaleGroupMetadataOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupMetadataOutput)
}

func (i NodePoolExtensionScaleGroupMetadataArgs) ToNodePoolExtensionScaleGroupMetadataPtrOutput() NodePoolExtensionScaleGroupMetadataPtrOutput {
	return i.ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupMetadataArgs) ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupMetadataOutput).ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(ctx)
}

// NodePoolExtensionScaleGroupMetadataPtrInput is an input type that accepts NodePoolExtensionScaleGroupMetadataArgs, NodePoolExtensionScaleGroupMetadataPtr and NodePoolExtensionScaleGroupMetadataPtrOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupMetadataPtrInput` via:
//
//	        NodePoolExtensionScaleGroupMetadataArgs{...}
//
//	or:
//
//	        nil
type NodePoolExtensionScaleGroupMetadataPtrInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupMetadataPtrOutput() NodePoolExtensionScaleGroupMetadataPtrOutput
	ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(context.Context) NodePoolExtensionScaleGroupMetadataPtrOutput
}

type nodePoolExtensionScaleGroupMetadataPtrType NodePoolExtensionScaleGroupMetadataArgs

func NodePoolExtensionScaleGroupMetadataPtr(v *NodePoolExtensionScaleGroupMetadataArgs) NodePoolExtensionScaleGroupMetadataPtrInput {
	return (*nodePoolExtensionScaleGroupMetadataPtrType)(v)
}

func (*nodePoolExtensionScaleGroupMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtensionScaleGroupMetadata)(nil)).Elem()
}

func (i *nodePoolExtensionScaleGroupMetadataPtrType) ToNodePoolExtensionScaleGroupMetadataPtrOutput() NodePoolExtensionScaleGroupMetadataPtrOutput {
	return i.ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(context.Background())
}

func (i *nodePoolExtensionScaleGroupMetadataPtrType) ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupMetadataPtrOutput)
}

type NodePoolExtensionScaleGroupMetadataOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroupMetadata)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupMetadataOutput) ToNodePoolExtensionScaleGroupMetadataOutput() NodePoolExtensionScaleGroupMetadataOutput {
	return o
}

func (o NodePoolExtensionScaleGroupMetadataOutput) ToNodePoolExtensionScaleGroupMetadataOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupMetadataOutput {
	return o
}

func (o NodePoolExtensionScaleGroupMetadataOutput) ToNodePoolExtensionScaleGroupMetadataPtrOutput() NodePoolExtensionScaleGroupMetadataPtrOutput {
	return o.ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(context.Background())
}

func (o NodePoolExtensionScaleGroupMetadataOutput) ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolExtensionScaleGroupMetadata) *NodePoolExtensionScaleGroupMetadata {
		return &v
	}).(NodePoolExtensionScaleGroupMetadataPtrOutput)
}

func (o NodePoolExtensionScaleGroupMetadataOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupMetadata) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodePoolExtensionScaleGroupMetadataOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupMetadata) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type NodePoolExtensionScaleGroupMetadataPtrOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtensionScaleGroupMetadata)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupMetadataPtrOutput) ToNodePoolExtensionScaleGroupMetadataPtrOutput() NodePoolExtensionScaleGroupMetadataPtrOutput {
	return o
}

func (o NodePoolExtensionScaleGroupMetadataPtrOutput) ToNodePoolExtensionScaleGroupMetadataPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupMetadataPtrOutput {
	return o
}

func (o NodePoolExtensionScaleGroupMetadataPtrOutput) Elem() NodePoolExtensionScaleGroupMetadataOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupMetadata) NodePoolExtensionScaleGroupMetadata {
		if v != nil {
			return *v
		}
		var ret NodePoolExtensionScaleGroupMetadata
		return ret
	}).(NodePoolExtensionScaleGroupMetadataOutput)
}

func (o NodePoolExtensionScaleGroupMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupMetadata) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtensionScaleGroupMetadataPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

type NodePoolExtensionScaleGroupSpec struct {
	Autoscaling                      *NodePoolExtensionScaleGroupSpecAutoscaling                      `pulumi:"autoscaling"`
	Az                               *string                                                          `pulumi:"az"`
	CapacityReservationSpecification *NodePoolExtensionScaleGroupSpecCapacityReservationSpecification `pulumi:"capacityReservationSpecification"`
	Flavor                           *string                                                          `pulumi:"flavor"`
}

// NodePoolExtensionScaleGroupSpecInput is an input type that accepts NodePoolExtensionScaleGroupSpecArgs and NodePoolExtensionScaleGroupSpecOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupSpecInput` via:
//
//	NodePoolExtensionScaleGroupSpecArgs{...}
type NodePoolExtensionScaleGroupSpecInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupSpecOutput() NodePoolExtensionScaleGroupSpecOutput
	ToNodePoolExtensionScaleGroupSpecOutputWithContext(context.Context) NodePoolExtensionScaleGroupSpecOutput
}

type NodePoolExtensionScaleGroupSpecArgs struct {
	Autoscaling                      NodePoolExtensionScaleGroupSpecAutoscalingPtrInput                      `pulumi:"autoscaling"`
	Az                               pulumi.StringPtrInput                                                   `pulumi:"az"`
	CapacityReservationSpecification NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrInput `pulumi:"capacityReservationSpecification"`
	Flavor                           pulumi.StringPtrInput                                                   `pulumi:"flavor"`
}

func (NodePoolExtensionScaleGroupSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroupSpec)(nil)).Elem()
}

func (i NodePoolExtensionScaleGroupSpecArgs) ToNodePoolExtensionScaleGroupSpecOutput() NodePoolExtensionScaleGroupSpecOutput {
	return i.ToNodePoolExtensionScaleGroupSpecOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupSpecArgs) ToNodePoolExtensionScaleGroupSpecOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecOutput)
}

func (i NodePoolExtensionScaleGroupSpecArgs) ToNodePoolExtensionScaleGroupSpecPtrOutput() NodePoolExtensionScaleGroupSpecPtrOutput {
	return i.ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupSpecArgs) ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecOutput).ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(ctx)
}

// NodePoolExtensionScaleGroupSpecPtrInput is an input type that accepts NodePoolExtensionScaleGroupSpecArgs, NodePoolExtensionScaleGroupSpecPtr and NodePoolExtensionScaleGroupSpecPtrOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupSpecPtrInput` via:
//
//	        NodePoolExtensionScaleGroupSpecArgs{...}
//
//	or:
//
//	        nil
type NodePoolExtensionScaleGroupSpecPtrInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupSpecPtrOutput() NodePoolExtensionScaleGroupSpecPtrOutput
	ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(context.Context) NodePoolExtensionScaleGroupSpecPtrOutput
}

type nodePoolExtensionScaleGroupSpecPtrType NodePoolExtensionScaleGroupSpecArgs

func NodePoolExtensionScaleGroupSpecPtr(v *NodePoolExtensionScaleGroupSpecArgs) NodePoolExtensionScaleGroupSpecPtrInput {
	return (*nodePoolExtensionScaleGroupSpecPtrType)(v)
}

func (*nodePoolExtensionScaleGroupSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtensionScaleGroupSpec)(nil)).Elem()
}

func (i *nodePoolExtensionScaleGroupSpecPtrType) ToNodePoolExtensionScaleGroupSpecPtrOutput() NodePoolExtensionScaleGroupSpecPtrOutput {
	return i.ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(context.Background())
}

func (i *nodePoolExtensionScaleGroupSpecPtrType) ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecPtrOutput)
}

type NodePoolExtensionScaleGroupSpecOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroupSpec)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupSpecOutput) ToNodePoolExtensionScaleGroupSpecOutput() NodePoolExtensionScaleGroupSpecOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecOutput) ToNodePoolExtensionScaleGroupSpecOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecOutput) ToNodePoolExtensionScaleGroupSpecPtrOutput() NodePoolExtensionScaleGroupSpecPtrOutput {
	return o.ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(context.Background())
}

func (o NodePoolExtensionScaleGroupSpecOutput) ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolExtensionScaleGroupSpec) *NodePoolExtensionScaleGroupSpec {
		return &v
	}).(NodePoolExtensionScaleGroupSpecPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecOutput) Autoscaling() NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpec) *NodePoolExtensionScaleGroupSpecAutoscaling {
		return v.Autoscaling
	}).(NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecOutput) Az() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpec) *string { return v.Az }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecOutput) CapacityReservationSpecification() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpec) *NodePoolExtensionScaleGroupSpecCapacityReservationSpecification {
		return v.CapacityReservationSpecification
	}).(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpec) *string { return v.Flavor }).(pulumi.StringPtrOutput)
}

type NodePoolExtensionScaleGroupSpecPtrOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtensionScaleGroupSpec)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupSpecPtrOutput) ToNodePoolExtensionScaleGroupSpecPtrOutput() NodePoolExtensionScaleGroupSpecPtrOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecPtrOutput) ToNodePoolExtensionScaleGroupSpecPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecPtrOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecPtrOutput) Elem() NodePoolExtensionScaleGroupSpecOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpec) NodePoolExtensionScaleGroupSpec {
		if v != nil {
			return *v
		}
		var ret NodePoolExtensionScaleGroupSpec
		return ret
	}).(NodePoolExtensionScaleGroupSpecOutput)
}

func (o NodePoolExtensionScaleGroupSpecPtrOutput) Autoscaling() NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpec) *NodePoolExtensionScaleGroupSpecAutoscaling {
		if v == nil {
			return nil
		}
		return v.Autoscaling
	}).(NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecPtrOutput) Az() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpec) *string {
		if v == nil {
			return nil
		}
		return v.Az
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecPtrOutput) CapacityReservationSpecification() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpec) *NodePoolExtensionScaleGroupSpecCapacityReservationSpecification {
		if v == nil {
			return nil
		}
		return v.CapacityReservationSpecification
	}).(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecPtrOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpec) *string {
		if v == nil {
			return nil
		}
		return v.Flavor
	}).(pulumi.StringPtrOutput)
}

type NodePoolExtensionScaleGroupSpecAutoscaling struct {
	Enable            *bool `pulumi:"enable"`
	ExtensionPriority *int  `pulumi:"extensionPriority"`
	MaxNodeCount      *int  `pulumi:"maxNodeCount"`
	MinNodeCount      *int  `pulumi:"minNodeCount"`
}

// NodePoolExtensionScaleGroupSpecAutoscalingInput is an input type that accepts NodePoolExtensionScaleGroupSpecAutoscalingArgs and NodePoolExtensionScaleGroupSpecAutoscalingOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupSpecAutoscalingInput` via:
//
//	NodePoolExtensionScaleGroupSpecAutoscalingArgs{...}
type NodePoolExtensionScaleGroupSpecAutoscalingInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupSpecAutoscalingOutput() NodePoolExtensionScaleGroupSpecAutoscalingOutput
	ToNodePoolExtensionScaleGroupSpecAutoscalingOutputWithContext(context.Context) NodePoolExtensionScaleGroupSpecAutoscalingOutput
}

type NodePoolExtensionScaleGroupSpecAutoscalingArgs struct {
	Enable            pulumi.BoolPtrInput `pulumi:"enable"`
	ExtensionPriority pulumi.IntPtrInput  `pulumi:"extensionPriority"`
	MaxNodeCount      pulumi.IntPtrInput  `pulumi:"maxNodeCount"`
	MinNodeCount      pulumi.IntPtrInput  `pulumi:"minNodeCount"`
}

func (NodePoolExtensionScaleGroupSpecAutoscalingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroupSpecAutoscaling)(nil)).Elem()
}

func (i NodePoolExtensionScaleGroupSpecAutoscalingArgs) ToNodePoolExtensionScaleGroupSpecAutoscalingOutput() NodePoolExtensionScaleGroupSpecAutoscalingOutput {
	return i.ToNodePoolExtensionScaleGroupSpecAutoscalingOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupSpecAutoscalingArgs) ToNodePoolExtensionScaleGroupSpecAutoscalingOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecAutoscalingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecAutoscalingOutput)
}

func (i NodePoolExtensionScaleGroupSpecAutoscalingArgs) ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutput() NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return i.ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupSpecAutoscalingArgs) ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecAutoscalingOutput).ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(ctx)
}

// NodePoolExtensionScaleGroupSpecAutoscalingPtrInput is an input type that accepts NodePoolExtensionScaleGroupSpecAutoscalingArgs, NodePoolExtensionScaleGroupSpecAutoscalingPtr and NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupSpecAutoscalingPtrInput` via:
//
//	        NodePoolExtensionScaleGroupSpecAutoscalingArgs{...}
//
//	or:
//
//	        nil
type NodePoolExtensionScaleGroupSpecAutoscalingPtrInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutput() NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput
	ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(context.Context) NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput
}

type nodePoolExtensionScaleGroupSpecAutoscalingPtrType NodePoolExtensionScaleGroupSpecAutoscalingArgs

func NodePoolExtensionScaleGroupSpecAutoscalingPtr(v *NodePoolExtensionScaleGroupSpecAutoscalingArgs) NodePoolExtensionScaleGroupSpecAutoscalingPtrInput {
	return (*nodePoolExtensionScaleGroupSpecAutoscalingPtrType)(v)
}

func (*nodePoolExtensionScaleGroupSpecAutoscalingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtensionScaleGroupSpecAutoscaling)(nil)).Elem()
}

func (i *nodePoolExtensionScaleGroupSpecAutoscalingPtrType) ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutput() NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return i.ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(context.Background())
}

func (i *nodePoolExtensionScaleGroupSpecAutoscalingPtrType) ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput)
}

type NodePoolExtensionScaleGroupSpecAutoscalingOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupSpecAutoscalingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroupSpecAutoscaling)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingOutput) ToNodePoolExtensionScaleGroupSpecAutoscalingOutput() NodePoolExtensionScaleGroupSpecAutoscalingOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingOutput) ToNodePoolExtensionScaleGroupSpecAutoscalingOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecAutoscalingOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingOutput) ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutput() NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return o.ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(context.Background())
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingOutput) ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolExtensionScaleGroupSpecAutoscaling) *NodePoolExtensionScaleGroupSpecAutoscaling {
		return &v
	}).(NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpecAutoscaling) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingOutput) ExtensionPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpecAutoscaling) *int { return v.ExtensionPriority }).(pulumi.IntPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpecAutoscaling) *int { return v.MaxNodeCount }).(pulumi.IntPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpecAutoscaling) *int { return v.MinNodeCount }).(pulumi.IntPtrOutput)
}

type NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtensionScaleGroupSpecAutoscaling)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput) ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutput() NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput) ToNodePoolExtensionScaleGroupSpecAutoscalingPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput) Elem() NodePoolExtensionScaleGroupSpecAutoscalingOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpecAutoscaling) NodePoolExtensionScaleGroupSpecAutoscaling {
		if v != nil {
			return *v
		}
		var ret NodePoolExtensionScaleGroupSpecAutoscaling
		return ret
	}).(NodePoolExtensionScaleGroupSpecAutoscalingOutput)
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpecAutoscaling) *bool {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.BoolPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput) ExtensionPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpecAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.ExtensionPriority
	}).(pulumi.IntPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput) MaxNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpecAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MaxNodeCount
	}).(pulumi.IntPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput) MinNodeCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpecAutoscaling) *int {
		if v == nil {
			return nil
		}
		return v.MinNodeCount
	}).(pulumi.IntPtrOutput)
}

type NodePoolExtensionScaleGroupSpecCapacityReservationSpecification struct {
	Id         *string `pulumi:"id"`
	Preference *string `pulumi:"preference"`
}

// NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationInput is an input type that accepts NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs and NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationInput` via:
//
//	NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs{...}
type NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput
	ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutputWithContext(context.Context) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput
}

type NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs struct {
	Id         pulumi.StringPtrInput `pulumi:"id"`
	Preference pulumi.StringPtrInput `pulumi:"preference"`
}

func (NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroupSpecCapacityReservationSpecification)(nil)).Elem()
}

func (i NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput {
	return i.ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput)
}

func (i NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return i.ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(context.Background())
}

func (i NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput).ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(ctx)
}

// NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrInput is an input type that accepts NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs, NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtr and NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput values.
// You can construct a concrete instance of `NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrInput` via:
//
//	        NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs{...}
//
//	or:
//
//	        nil
type NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrInput interface {
	pulumi.Input

	ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput
	ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(context.Context) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput
}

type nodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrType NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs

func NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtr(v *NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrInput {
	return (*nodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrType)(v)
}

func (*nodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtensionScaleGroupSpecCapacityReservationSpecification)(nil)).Elem()
}

func (i *nodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrType) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return i.ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(context.Background())
}

func (i *nodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrType) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput)
}

type NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolExtensionScaleGroupSpecCapacityReservationSpecification)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return o.ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(context.Background())
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolExtensionScaleGroupSpecCapacityReservationSpecification) *NodePoolExtensionScaleGroupSpecCapacityReservationSpecification {
		return &v
	}).(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpecCapacityReservationSpecification) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput) Preference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolExtensionScaleGroupSpecCapacityReservationSpecification) *string { return v.Preference }).(pulumi.StringPtrOutput)
}

type NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput struct{ *pulumi.OutputState }

func (NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolExtensionScaleGroupSpecCapacityReservationSpecification)(nil)).Elem()
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput) ToNodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutputWithContext(ctx context.Context) NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput {
	return o
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput) Elem() NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpecCapacityReservationSpecification) NodePoolExtensionScaleGroupSpecCapacityReservationSpecification {
		if v != nil {
			return *v
		}
		var ret NodePoolExtensionScaleGroupSpecCapacityReservationSpecification
		return ret
	}).(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput)
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpecCapacityReservationSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput) Preference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolExtensionScaleGroupSpecCapacityReservationSpecification) *string {
		if v == nil {
			return nil
		}
		return v.Preference
	}).(pulumi.StringPtrOutput)
}

type NodePoolHostnameConfig struct {
	Type string `pulumi:"type"`
}

// NodePoolHostnameConfigInput is an input type that accepts NodePoolHostnameConfigArgs and NodePoolHostnameConfigOutput values.
// You can construct a concrete instance of `NodePoolHostnameConfigInput` via:
//
//	NodePoolHostnameConfigArgs{...}
type NodePoolHostnameConfigInput interface {
	pulumi.Input

	ToNodePoolHostnameConfigOutput() NodePoolHostnameConfigOutput
	ToNodePoolHostnameConfigOutputWithContext(context.Context) NodePoolHostnameConfigOutput
}

type NodePoolHostnameConfigArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (NodePoolHostnameConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolHostnameConfig)(nil)).Elem()
}

func (i NodePoolHostnameConfigArgs) ToNodePoolHostnameConfigOutput() NodePoolHostnameConfigOutput {
	return i.ToNodePoolHostnameConfigOutputWithContext(context.Background())
}

func (i NodePoolHostnameConfigArgs) ToNodePoolHostnameConfigOutputWithContext(ctx context.Context) NodePoolHostnameConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolHostnameConfigOutput)
}

func (i NodePoolHostnameConfigArgs) ToNodePoolHostnameConfigPtrOutput() NodePoolHostnameConfigPtrOutput {
	return i.ToNodePoolHostnameConfigPtrOutputWithContext(context.Background())
}

func (i NodePoolHostnameConfigArgs) ToNodePoolHostnameConfigPtrOutputWithContext(ctx context.Context) NodePoolHostnameConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolHostnameConfigOutput).ToNodePoolHostnameConfigPtrOutputWithContext(ctx)
}

// NodePoolHostnameConfigPtrInput is an input type that accepts NodePoolHostnameConfigArgs, NodePoolHostnameConfigPtr and NodePoolHostnameConfigPtrOutput values.
// You can construct a concrete instance of `NodePoolHostnameConfigPtrInput` via:
//
//	        NodePoolHostnameConfigArgs{...}
//
//	or:
//
//	        nil
type NodePoolHostnameConfigPtrInput interface {
	pulumi.Input

	ToNodePoolHostnameConfigPtrOutput() NodePoolHostnameConfigPtrOutput
	ToNodePoolHostnameConfigPtrOutputWithContext(context.Context) NodePoolHostnameConfigPtrOutput
}

type nodePoolHostnameConfigPtrType NodePoolHostnameConfigArgs

func NodePoolHostnameConfigPtr(v *NodePoolHostnameConfigArgs) NodePoolHostnameConfigPtrInput {
	return (*nodePoolHostnameConfigPtrType)(v)
}

func (*nodePoolHostnameConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolHostnameConfig)(nil)).Elem()
}

func (i *nodePoolHostnameConfigPtrType) ToNodePoolHostnameConfigPtrOutput() NodePoolHostnameConfigPtrOutput {
	return i.ToNodePoolHostnameConfigPtrOutputWithContext(context.Background())
}

func (i *nodePoolHostnameConfigPtrType) ToNodePoolHostnameConfigPtrOutputWithContext(ctx context.Context) NodePoolHostnameConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolHostnameConfigPtrOutput)
}

type NodePoolHostnameConfigOutput struct{ *pulumi.OutputState }

func (NodePoolHostnameConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolHostnameConfig)(nil)).Elem()
}

func (o NodePoolHostnameConfigOutput) ToNodePoolHostnameConfigOutput() NodePoolHostnameConfigOutput {
	return o
}

func (o NodePoolHostnameConfigOutput) ToNodePoolHostnameConfigOutputWithContext(ctx context.Context) NodePoolHostnameConfigOutput {
	return o
}

func (o NodePoolHostnameConfigOutput) ToNodePoolHostnameConfigPtrOutput() NodePoolHostnameConfigPtrOutput {
	return o.ToNodePoolHostnameConfigPtrOutputWithContext(context.Background())
}

func (o NodePoolHostnameConfigOutput) ToNodePoolHostnameConfigPtrOutputWithContext(ctx context.Context) NodePoolHostnameConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolHostnameConfig) *NodePoolHostnameConfig {
		return &v
	}).(NodePoolHostnameConfigPtrOutput)
}

func (o NodePoolHostnameConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolHostnameConfig) string { return v.Type }).(pulumi.StringOutput)
}

type NodePoolHostnameConfigPtrOutput struct{ *pulumi.OutputState }

func (NodePoolHostnameConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolHostnameConfig)(nil)).Elem()
}

func (o NodePoolHostnameConfigPtrOutput) ToNodePoolHostnameConfigPtrOutput() NodePoolHostnameConfigPtrOutput {
	return o
}

func (o NodePoolHostnameConfigPtrOutput) ToNodePoolHostnameConfigPtrOutputWithContext(ctx context.Context) NodePoolHostnameConfigPtrOutput {
	return o
}

func (o NodePoolHostnameConfigPtrOutput) Elem() NodePoolHostnameConfigOutput {
	return o.ApplyT(func(v *NodePoolHostnameConfig) NodePoolHostnameConfig {
		if v != nil {
			return *v
		}
		var ret NodePoolHostnameConfig
		return ret
	}).(NodePoolHostnameConfigOutput)
}

func (o NodePoolHostnameConfigPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolHostnameConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type NodePoolRootVolume struct {
	DssPoolId *string `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  *string           `pulumi:"extendParam"`
	ExtendParams map[string]string `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough *bool   `pulumi:"hwPassthrough"`
	Iops          *int    `pulumi:"iops"`
	KmsKeyId      *string `pulumi:"kmsKeyId"`
	Size          int     `pulumi:"size"`
	Throughput    *int    `pulumi:"throughput"`
	Volumetype    string  `pulumi:"volumetype"`
}

// NodePoolRootVolumeInput is an input type that accepts NodePoolRootVolumeArgs and NodePoolRootVolumeOutput values.
// You can construct a concrete instance of `NodePoolRootVolumeInput` via:
//
//	NodePoolRootVolumeArgs{...}
type NodePoolRootVolumeInput interface {
	pulumi.Input

	ToNodePoolRootVolumeOutput() NodePoolRootVolumeOutput
	ToNodePoolRootVolumeOutputWithContext(context.Context) NodePoolRootVolumeOutput
}

type NodePoolRootVolumeArgs struct {
	DssPoolId pulumi.StringPtrInput `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  pulumi.StringPtrInput `pulumi:"extendParam"`
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	Iops          pulumi.IntPtrInput    `pulumi:"iops"`
	KmsKeyId      pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Size          pulumi.IntInput       `pulumi:"size"`
	Throughput    pulumi.IntPtrInput    `pulumi:"throughput"`
	Volumetype    pulumi.StringInput    `pulumi:"volumetype"`
}

func (NodePoolRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolRootVolume)(nil)).Elem()
}

func (i NodePoolRootVolumeArgs) ToNodePoolRootVolumeOutput() NodePoolRootVolumeOutput {
	return i.ToNodePoolRootVolumeOutputWithContext(context.Background())
}

func (i NodePoolRootVolumeArgs) ToNodePoolRootVolumeOutputWithContext(ctx context.Context) NodePoolRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolRootVolumeOutput)
}

func (i NodePoolRootVolumeArgs) ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput {
	return i.ToNodePoolRootVolumePtrOutputWithContext(context.Background())
}

func (i NodePoolRootVolumeArgs) ToNodePoolRootVolumePtrOutputWithContext(ctx context.Context) NodePoolRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolRootVolumeOutput).ToNodePoolRootVolumePtrOutputWithContext(ctx)
}

// NodePoolRootVolumePtrInput is an input type that accepts NodePoolRootVolumeArgs, NodePoolRootVolumePtr and NodePoolRootVolumePtrOutput values.
// You can construct a concrete instance of `NodePoolRootVolumePtrInput` via:
//
//	        NodePoolRootVolumeArgs{...}
//
//	or:
//
//	        nil
type NodePoolRootVolumePtrInput interface {
	pulumi.Input

	ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput
	ToNodePoolRootVolumePtrOutputWithContext(context.Context) NodePoolRootVolumePtrOutput
}

type nodePoolRootVolumePtrType NodePoolRootVolumeArgs

func NodePoolRootVolumePtr(v *NodePoolRootVolumeArgs) NodePoolRootVolumePtrInput {
	return (*nodePoolRootVolumePtrType)(v)
}

func (*nodePoolRootVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolRootVolume)(nil)).Elem()
}

func (i *nodePoolRootVolumePtrType) ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput {
	return i.ToNodePoolRootVolumePtrOutputWithContext(context.Background())
}

func (i *nodePoolRootVolumePtrType) ToNodePoolRootVolumePtrOutputWithContext(ctx context.Context) NodePoolRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolRootVolumePtrOutput)
}

type NodePoolRootVolumeOutput struct{ *pulumi.OutputState }

func (NodePoolRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolRootVolume)(nil)).Elem()
}

func (o NodePoolRootVolumeOutput) ToNodePoolRootVolumeOutput() NodePoolRootVolumeOutput {
	return o
}

func (o NodePoolRootVolumeOutput) ToNodePoolRootVolumeOutputWithContext(ctx context.Context) NodePoolRootVolumeOutput {
	return o
}

func (o NodePoolRootVolumeOutput) ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput {
	return o.ToNodePoolRootVolumePtrOutputWithContext(context.Background())
}

func (o NodePoolRootVolumeOutput) ToNodePoolRootVolumePtrOutputWithContext(ctx context.Context) NodePoolRootVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolRootVolume) *NodePoolRootVolume {
		return &v
	}).(NodePoolRootVolumePtrOutput)
}

func (o NodePoolRootVolumeOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolRootVolume) *string { return v.DssPoolId }).(pulumi.StringPtrOutput)
}

// Deprecated: use extendParams instead
func (o NodePoolRootVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolRootVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

func (o NodePoolRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodePoolRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// schema: Internal
func (o NodePoolRootVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolRootVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

func (o NodePoolRootVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolRootVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o NodePoolRootVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolRootVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o NodePoolRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodePoolRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o NodePoolRootVolumeOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodePoolRootVolume) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o NodePoolRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type NodePoolRootVolumePtrOutput struct{ *pulumi.OutputState }

func (NodePoolRootVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolRootVolume)(nil)).Elem()
}

func (o NodePoolRootVolumePtrOutput) ToNodePoolRootVolumePtrOutput() NodePoolRootVolumePtrOutput {
	return o
}

func (o NodePoolRootVolumePtrOutput) ToNodePoolRootVolumePtrOutputWithContext(ctx context.Context) NodePoolRootVolumePtrOutput {
	return o
}

func (o NodePoolRootVolumePtrOutput) Elem() NodePoolRootVolumeOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) NodePoolRootVolume {
		if v != nil {
			return *v
		}
		var ret NodePoolRootVolume
		return ret
	}).(NodePoolRootVolumeOutput)
}

func (o NodePoolRootVolumePtrOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.DssPoolId
	}).(pulumi.StringPtrOutput)
}

// Deprecated: use extendParams instead
func (o NodePoolRootVolumePtrOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.ExtendParam
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolRootVolumePtrOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtendParams
	}).(pulumi.StringMapOutput)
}

// schema: Internal
func (o NodePoolRootVolumePtrOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.HwPassthrough
	}).(pulumi.BoolPtrOutput)
}

func (o NodePoolRootVolumePtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

func (o NodePoolRootVolumePtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

func (o NodePoolRootVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

func (o NodePoolRootVolumePtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

func (o NodePoolRootVolumePtrOutput) Volumetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePoolRootVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Volumetype
	}).(pulumi.StringPtrOutput)
}

type NodePoolStorage struct {
	Groups    []NodePoolStorageGroup    `pulumi:"groups"`
	Selectors []NodePoolStorageSelector `pulumi:"selectors"`
}

// NodePoolStorageInput is an input type that accepts NodePoolStorageArgs and NodePoolStorageOutput values.
// You can construct a concrete instance of `NodePoolStorageInput` via:
//
//	NodePoolStorageArgs{...}
type NodePoolStorageInput interface {
	pulumi.Input

	ToNodePoolStorageOutput() NodePoolStorageOutput
	ToNodePoolStorageOutputWithContext(context.Context) NodePoolStorageOutput
}

type NodePoolStorageArgs struct {
	Groups    NodePoolStorageGroupArrayInput    `pulumi:"groups"`
	Selectors NodePoolStorageSelectorArrayInput `pulumi:"selectors"`
}

func (NodePoolStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolStorage)(nil)).Elem()
}

func (i NodePoolStorageArgs) ToNodePoolStorageOutput() NodePoolStorageOutput {
	return i.ToNodePoolStorageOutputWithContext(context.Background())
}

func (i NodePoolStorageArgs) ToNodePoolStorageOutputWithContext(ctx context.Context) NodePoolStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStorageOutput)
}

func (i NodePoolStorageArgs) ToNodePoolStoragePtrOutput() NodePoolStoragePtrOutput {
	return i.ToNodePoolStoragePtrOutputWithContext(context.Background())
}

func (i NodePoolStorageArgs) ToNodePoolStoragePtrOutputWithContext(ctx context.Context) NodePoolStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStorageOutput).ToNodePoolStoragePtrOutputWithContext(ctx)
}

// NodePoolStoragePtrInput is an input type that accepts NodePoolStorageArgs, NodePoolStoragePtr and NodePoolStoragePtrOutput values.
// You can construct a concrete instance of `NodePoolStoragePtrInput` via:
//
//	        NodePoolStorageArgs{...}
//
//	or:
//
//	        nil
type NodePoolStoragePtrInput interface {
	pulumi.Input

	ToNodePoolStoragePtrOutput() NodePoolStoragePtrOutput
	ToNodePoolStoragePtrOutputWithContext(context.Context) NodePoolStoragePtrOutput
}

type nodePoolStoragePtrType NodePoolStorageArgs

func NodePoolStoragePtr(v *NodePoolStorageArgs) NodePoolStoragePtrInput {
	return (*nodePoolStoragePtrType)(v)
}

func (*nodePoolStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolStorage)(nil)).Elem()
}

func (i *nodePoolStoragePtrType) ToNodePoolStoragePtrOutput() NodePoolStoragePtrOutput {
	return i.ToNodePoolStoragePtrOutputWithContext(context.Background())
}

func (i *nodePoolStoragePtrType) ToNodePoolStoragePtrOutputWithContext(ctx context.Context) NodePoolStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStoragePtrOutput)
}

type NodePoolStorageOutput struct{ *pulumi.OutputState }

func (NodePoolStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolStorage)(nil)).Elem()
}

func (o NodePoolStorageOutput) ToNodePoolStorageOutput() NodePoolStorageOutput {
	return o
}

func (o NodePoolStorageOutput) ToNodePoolStorageOutputWithContext(ctx context.Context) NodePoolStorageOutput {
	return o
}

func (o NodePoolStorageOutput) ToNodePoolStoragePtrOutput() NodePoolStoragePtrOutput {
	return o.ToNodePoolStoragePtrOutputWithContext(context.Background())
}

func (o NodePoolStorageOutput) ToNodePoolStoragePtrOutputWithContext(ctx context.Context) NodePoolStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodePoolStorage) *NodePoolStorage {
		return &v
	}).(NodePoolStoragePtrOutput)
}

func (o NodePoolStorageOutput) Groups() NodePoolStorageGroupArrayOutput {
	return o.ApplyT(func(v NodePoolStorage) []NodePoolStorageGroup { return v.Groups }).(NodePoolStorageGroupArrayOutput)
}

func (o NodePoolStorageOutput) Selectors() NodePoolStorageSelectorArrayOutput {
	return o.ApplyT(func(v NodePoolStorage) []NodePoolStorageSelector { return v.Selectors }).(NodePoolStorageSelectorArrayOutput)
}

type NodePoolStoragePtrOutput struct{ *pulumi.OutputState }

func (NodePoolStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePoolStorage)(nil)).Elem()
}

func (o NodePoolStoragePtrOutput) ToNodePoolStoragePtrOutput() NodePoolStoragePtrOutput {
	return o
}

func (o NodePoolStoragePtrOutput) ToNodePoolStoragePtrOutputWithContext(ctx context.Context) NodePoolStoragePtrOutput {
	return o
}

func (o NodePoolStoragePtrOutput) Elem() NodePoolStorageOutput {
	return o.ApplyT(func(v *NodePoolStorage) NodePoolStorage {
		if v != nil {
			return *v
		}
		var ret NodePoolStorage
		return ret
	}).(NodePoolStorageOutput)
}

func (o NodePoolStoragePtrOutput) Groups() NodePoolStorageGroupArrayOutput {
	return o.ApplyT(func(v *NodePoolStorage) []NodePoolStorageGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(NodePoolStorageGroupArrayOutput)
}

func (o NodePoolStoragePtrOutput) Selectors() NodePoolStorageSelectorArrayOutput {
	return o.ApplyT(func(v *NodePoolStorage) []NodePoolStorageSelector {
		if v == nil {
			return nil
		}
		return v.Selectors
	}).(NodePoolStorageSelectorArrayOutput)
}

type NodePoolStorageGroup struct {
	CceManaged    *bool                              `pulumi:"cceManaged"`
	Name          string                             `pulumi:"name"`
	SelectorNames []string                           `pulumi:"selectorNames"`
	VirtualSpaces []NodePoolStorageGroupVirtualSpace `pulumi:"virtualSpaces"`
}

// NodePoolStorageGroupInput is an input type that accepts NodePoolStorageGroupArgs and NodePoolStorageGroupOutput values.
// You can construct a concrete instance of `NodePoolStorageGroupInput` via:
//
//	NodePoolStorageGroupArgs{...}
type NodePoolStorageGroupInput interface {
	pulumi.Input

	ToNodePoolStorageGroupOutput() NodePoolStorageGroupOutput
	ToNodePoolStorageGroupOutputWithContext(context.Context) NodePoolStorageGroupOutput
}

type NodePoolStorageGroupArgs struct {
	CceManaged    pulumi.BoolPtrInput                        `pulumi:"cceManaged"`
	Name          pulumi.StringInput                         `pulumi:"name"`
	SelectorNames pulumi.StringArrayInput                    `pulumi:"selectorNames"`
	VirtualSpaces NodePoolStorageGroupVirtualSpaceArrayInput `pulumi:"virtualSpaces"`
}

func (NodePoolStorageGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolStorageGroup)(nil)).Elem()
}

func (i NodePoolStorageGroupArgs) ToNodePoolStorageGroupOutput() NodePoolStorageGroupOutput {
	return i.ToNodePoolStorageGroupOutputWithContext(context.Background())
}

func (i NodePoolStorageGroupArgs) ToNodePoolStorageGroupOutputWithContext(ctx context.Context) NodePoolStorageGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStorageGroupOutput)
}

// NodePoolStorageGroupArrayInput is an input type that accepts NodePoolStorageGroupArray and NodePoolStorageGroupArrayOutput values.
// You can construct a concrete instance of `NodePoolStorageGroupArrayInput` via:
//
//	NodePoolStorageGroupArray{ NodePoolStorageGroupArgs{...} }
type NodePoolStorageGroupArrayInput interface {
	pulumi.Input

	ToNodePoolStorageGroupArrayOutput() NodePoolStorageGroupArrayOutput
	ToNodePoolStorageGroupArrayOutputWithContext(context.Context) NodePoolStorageGroupArrayOutput
}

type NodePoolStorageGroupArray []NodePoolStorageGroupInput

func (NodePoolStorageGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolStorageGroup)(nil)).Elem()
}

func (i NodePoolStorageGroupArray) ToNodePoolStorageGroupArrayOutput() NodePoolStorageGroupArrayOutput {
	return i.ToNodePoolStorageGroupArrayOutputWithContext(context.Background())
}

func (i NodePoolStorageGroupArray) ToNodePoolStorageGroupArrayOutputWithContext(ctx context.Context) NodePoolStorageGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStorageGroupArrayOutput)
}

type NodePoolStorageGroupOutput struct{ *pulumi.OutputState }

func (NodePoolStorageGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolStorageGroup)(nil)).Elem()
}

func (o NodePoolStorageGroupOutput) ToNodePoolStorageGroupOutput() NodePoolStorageGroupOutput {
	return o
}

func (o NodePoolStorageGroupOutput) ToNodePoolStorageGroupOutputWithContext(ctx context.Context) NodePoolStorageGroupOutput {
	return o
}

func (o NodePoolStorageGroupOutput) CceManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodePoolStorageGroup) *bool { return v.CceManaged }).(pulumi.BoolPtrOutput)
}

func (o NodePoolStorageGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolStorageGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodePoolStorageGroupOutput) SelectorNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodePoolStorageGroup) []string { return v.SelectorNames }).(pulumi.StringArrayOutput)
}

func (o NodePoolStorageGroupOutput) VirtualSpaces() NodePoolStorageGroupVirtualSpaceArrayOutput {
	return o.ApplyT(func(v NodePoolStorageGroup) []NodePoolStorageGroupVirtualSpace { return v.VirtualSpaces }).(NodePoolStorageGroupVirtualSpaceArrayOutput)
}

type NodePoolStorageGroupArrayOutput struct{ *pulumi.OutputState }

func (NodePoolStorageGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolStorageGroup)(nil)).Elem()
}

func (o NodePoolStorageGroupArrayOutput) ToNodePoolStorageGroupArrayOutput() NodePoolStorageGroupArrayOutput {
	return o
}

func (o NodePoolStorageGroupArrayOutput) ToNodePoolStorageGroupArrayOutputWithContext(ctx context.Context) NodePoolStorageGroupArrayOutput {
	return o
}

func (o NodePoolStorageGroupArrayOutput) Index(i pulumi.IntInput) NodePoolStorageGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolStorageGroup {
		return vs[0].([]NodePoolStorageGroup)[vs[1].(int)]
	}).(NodePoolStorageGroupOutput)
}

type NodePoolStorageGroupVirtualSpace struct {
	LvmLvType     *string `pulumi:"lvmLvType"`
	LvmPath       *string `pulumi:"lvmPath"`
	Name          string  `pulumi:"name"`
	RuntimeLvType *string `pulumi:"runtimeLvType"`
	Size          string  `pulumi:"size"`
}

// NodePoolStorageGroupVirtualSpaceInput is an input type that accepts NodePoolStorageGroupVirtualSpaceArgs and NodePoolStorageGroupVirtualSpaceOutput values.
// You can construct a concrete instance of `NodePoolStorageGroupVirtualSpaceInput` via:
//
//	NodePoolStorageGroupVirtualSpaceArgs{...}
type NodePoolStorageGroupVirtualSpaceInput interface {
	pulumi.Input

	ToNodePoolStorageGroupVirtualSpaceOutput() NodePoolStorageGroupVirtualSpaceOutput
	ToNodePoolStorageGroupVirtualSpaceOutputWithContext(context.Context) NodePoolStorageGroupVirtualSpaceOutput
}

type NodePoolStorageGroupVirtualSpaceArgs struct {
	LvmLvType     pulumi.StringPtrInput `pulumi:"lvmLvType"`
	LvmPath       pulumi.StringPtrInput `pulumi:"lvmPath"`
	Name          pulumi.StringInput    `pulumi:"name"`
	RuntimeLvType pulumi.StringPtrInput `pulumi:"runtimeLvType"`
	Size          pulumi.StringInput    `pulumi:"size"`
}

func (NodePoolStorageGroupVirtualSpaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolStorageGroupVirtualSpace)(nil)).Elem()
}

func (i NodePoolStorageGroupVirtualSpaceArgs) ToNodePoolStorageGroupVirtualSpaceOutput() NodePoolStorageGroupVirtualSpaceOutput {
	return i.ToNodePoolStorageGroupVirtualSpaceOutputWithContext(context.Background())
}

func (i NodePoolStorageGroupVirtualSpaceArgs) ToNodePoolStorageGroupVirtualSpaceOutputWithContext(ctx context.Context) NodePoolStorageGroupVirtualSpaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStorageGroupVirtualSpaceOutput)
}

// NodePoolStorageGroupVirtualSpaceArrayInput is an input type that accepts NodePoolStorageGroupVirtualSpaceArray and NodePoolStorageGroupVirtualSpaceArrayOutput values.
// You can construct a concrete instance of `NodePoolStorageGroupVirtualSpaceArrayInput` via:
//
//	NodePoolStorageGroupVirtualSpaceArray{ NodePoolStorageGroupVirtualSpaceArgs{...} }
type NodePoolStorageGroupVirtualSpaceArrayInput interface {
	pulumi.Input

	ToNodePoolStorageGroupVirtualSpaceArrayOutput() NodePoolStorageGroupVirtualSpaceArrayOutput
	ToNodePoolStorageGroupVirtualSpaceArrayOutputWithContext(context.Context) NodePoolStorageGroupVirtualSpaceArrayOutput
}

type NodePoolStorageGroupVirtualSpaceArray []NodePoolStorageGroupVirtualSpaceInput

func (NodePoolStorageGroupVirtualSpaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolStorageGroupVirtualSpace)(nil)).Elem()
}

func (i NodePoolStorageGroupVirtualSpaceArray) ToNodePoolStorageGroupVirtualSpaceArrayOutput() NodePoolStorageGroupVirtualSpaceArrayOutput {
	return i.ToNodePoolStorageGroupVirtualSpaceArrayOutputWithContext(context.Background())
}

func (i NodePoolStorageGroupVirtualSpaceArray) ToNodePoolStorageGroupVirtualSpaceArrayOutputWithContext(ctx context.Context) NodePoolStorageGroupVirtualSpaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStorageGroupVirtualSpaceArrayOutput)
}

type NodePoolStorageGroupVirtualSpaceOutput struct{ *pulumi.OutputState }

func (NodePoolStorageGroupVirtualSpaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolStorageGroupVirtualSpace)(nil)).Elem()
}

func (o NodePoolStorageGroupVirtualSpaceOutput) ToNodePoolStorageGroupVirtualSpaceOutput() NodePoolStorageGroupVirtualSpaceOutput {
	return o
}

func (o NodePoolStorageGroupVirtualSpaceOutput) ToNodePoolStorageGroupVirtualSpaceOutputWithContext(ctx context.Context) NodePoolStorageGroupVirtualSpaceOutput {
	return o
}

func (o NodePoolStorageGroupVirtualSpaceOutput) LvmLvType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageGroupVirtualSpace) *string { return v.LvmLvType }).(pulumi.StringPtrOutput)
}

func (o NodePoolStorageGroupVirtualSpaceOutput) LvmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageGroupVirtualSpace) *string { return v.LvmPath }).(pulumi.StringPtrOutput)
}

func (o NodePoolStorageGroupVirtualSpaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolStorageGroupVirtualSpace) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodePoolStorageGroupVirtualSpaceOutput) RuntimeLvType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageGroupVirtualSpace) *string { return v.RuntimeLvType }).(pulumi.StringPtrOutput)
}

func (o NodePoolStorageGroupVirtualSpaceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolStorageGroupVirtualSpace) string { return v.Size }).(pulumi.StringOutput)
}

type NodePoolStorageGroupVirtualSpaceArrayOutput struct{ *pulumi.OutputState }

func (NodePoolStorageGroupVirtualSpaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolStorageGroupVirtualSpace)(nil)).Elem()
}

func (o NodePoolStorageGroupVirtualSpaceArrayOutput) ToNodePoolStorageGroupVirtualSpaceArrayOutput() NodePoolStorageGroupVirtualSpaceArrayOutput {
	return o
}

func (o NodePoolStorageGroupVirtualSpaceArrayOutput) ToNodePoolStorageGroupVirtualSpaceArrayOutputWithContext(ctx context.Context) NodePoolStorageGroupVirtualSpaceArrayOutput {
	return o
}

func (o NodePoolStorageGroupVirtualSpaceArrayOutput) Index(i pulumi.IntInput) NodePoolStorageGroupVirtualSpaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolStorageGroupVirtualSpace {
		return vs[0].([]NodePoolStorageGroupVirtualSpace)[vs[1].(int)]
	}).(NodePoolStorageGroupVirtualSpaceOutput)
}

type NodePoolStorageSelector struct {
	MatchLabelCount             *string `pulumi:"matchLabelCount"`
	MatchLabelMetadataCmkid     *string `pulumi:"matchLabelMetadataCmkid"`
	MatchLabelMetadataEncrypted *string `pulumi:"matchLabelMetadataEncrypted"`
	MatchLabelSize              *string `pulumi:"matchLabelSize"`
	MatchLabelVolumeType        *string `pulumi:"matchLabelVolumeType"`
	Name                        string  `pulumi:"name"`
	Type                        *string `pulumi:"type"`
}

// NodePoolStorageSelectorInput is an input type that accepts NodePoolStorageSelectorArgs and NodePoolStorageSelectorOutput values.
// You can construct a concrete instance of `NodePoolStorageSelectorInput` via:
//
//	NodePoolStorageSelectorArgs{...}
type NodePoolStorageSelectorInput interface {
	pulumi.Input

	ToNodePoolStorageSelectorOutput() NodePoolStorageSelectorOutput
	ToNodePoolStorageSelectorOutputWithContext(context.Context) NodePoolStorageSelectorOutput
}

type NodePoolStorageSelectorArgs struct {
	MatchLabelCount             pulumi.StringPtrInput `pulumi:"matchLabelCount"`
	MatchLabelMetadataCmkid     pulumi.StringPtrInput `pulumi:"matchLabelMetadataCmkid"`
	MatchLabelMetadataEncrypted pulumi.StringPtrInput `pulumi:"matchLabelMetadataEncrypted"`
	MatchLabelSize              pulumi.StringPtrInput `pulumi:"matchLabelSize"`
	MatchLabelVolumeType        pulumi.StringPtrInput `pulumi:"matchLabelVolumeType"`
	Name                        pulumi.StringInput    `pulumi:"name"`
	Type                        pulumi.StringPtrInput `pulumi:"type"`
}

func (NodePoolStorageSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolStorageSelector)(nil)).Elem()
}

func (i NodePoolStorageSelectorArgs) ToNodePoolStorageSelectorOutput() NodePoolStorageSelectorOutput {
	return i.ToNodePoolStorageSelectorOutputWithContext(context.Background())
}

func (i NodePoolStorageSelectorArgs) ToNodePoolStorageSelectorOutputWithContext(ctx context.Context) NodePoolStorageSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStorageSelectorOutput)
}

// NodePoolStorageSelectorArrayInput is an input type that accepts NodePoolStorageSelectorArray and NodePoolStorageSelectorArrayOutput values.
// You can construct a concrete instance of `NodePoolStorageSelectorArrayInput` via:
//
//	NodePoolStorageSelectorArray{ NodePoolStorageSelectorArgs{...} }
type NodePoolStorageSelectorArrayInput interface {
	pulumi.Input

	ToNodePoolStorageSelectorArrayOutput() NodePoolStorageSelectorArrayOutput
	ToNodePoolStorageSelectorArrayOutputWithContext(context.Context) NodePoolStorageSelectorArrayOutput
}

type NodePoolStorageSelectorArray []NodePoolStorageSelectorInput

func (NodePoolStorageSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolStorageSelector)(nil)).Elem()
}

func (i NodePoolStorageSelectorArray) ToNodePoolStorageSelectorArrayOutput() NodePoolStorageSelectorArrayOutput {
	return i.ToNodePoolStorageSelectorArrayOutputWithContext(context.Background())
}

func (i NodePoolStorageSelectorArray) ToNodePoolStorageSelectorArrayOutputWithContext(ctx context.Context) NodePoolStorageSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolStorageSelectorArrayOutput)
}

type NodePoolStorageSelectorOutput struct{ *pulumi.OutputState }

func (NodePoolStorageSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolStorageSelector)(nil)).Elem()
}

func (o NodePoolStorageSelectorOutput) ToNodePoolStorageSelectorOutput() NodePoolStorageSelectorOutput {
	return o
}

func (o NodePoolStorageSelectorOutput) ToNodePoolStorageSelectorOutputWithContext(ctx context.Context) NodePoolStorageSelectorOutput {
	return o
}

func (o NodePoolStorageSelectorOutput) MatchLabelCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageSelector) *string { return v.MatchLabelCount }).(pulumi.StringPtrOutput)
}

func (o NodePoolStorageSelectorOutput) MatchLabelMetadataCmkid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageSelector) *string { return v.MatchLabelMetadataCmkid }).(pulumi.StringPtrOutput)
}

func (o NodePoolStorageSelectorOutput) MatchLabelMetadataEncrypted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageSelector) *string { return v.MatchLabelMetadataEncrypted }).(pulumi.StringPtrOutput)
}

func (o NodePoolStorageSelectorOutput) MatchLabelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageSelector) *string { return v.MatchLabelSize }).(pulumi.StringPtrOutput)
}

func (o NodePoolStorageSelectorOutput) MatchLabelVolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageSelector) *string { return v.MatchLabelVolumeType }).(pulumi.StringPtrOutput)
}

func (o NodePoolStorageSelectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolStorageSelector) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodePoolStorageSelectorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodePoolStorageSelector) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodePoolStorageSelectorArrayOutput struct{ *pulumi.OutputState }

func (NodePoolStorageSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolStorageSelector)(nil)).Elem()
}

func (o NodePoolStorageSelectorArrayOutput) ToNodePoolStorageSelectorArrayOutput() NodePoolStorageSelectorArrayOutput {
	return o
}

func (o NodePoolStorageSelectorArrayOutput) ToNodePoolStorageSelectorArrayOutputWithContext(ctx context.Context) NodePoolStorageSelectorArrayOutput {
	return o
}

func (o NodePoolStorageSelectorArrayOutput) Index(i pulumi.IntInput) NodePoolStorageSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolStorageSelector {
		return vs[0].([]NodePoolStorageSelector)[vs[1].(int)]
	}).(NodePoolStorageSelectorOutput)
}

type NodePoolTaint struct {
	Effect string `pulumi:"effect"`
	Key    string `pulumi:"key"`
	Value  string `pulumi:"value"`
}

// NodePoolTaintInput is an input type that accepts NodePoolTaintArgs and NodePoolTaintOutput values.
// You can construct a concrete instance of `NodePoolTaintInput` via:
//
//	NodePoolTaintArgs{...}
type NodePoolTaintInput interface {
	pulumi.Input

	ToNodePoolTaintOutput() NodePoolTaintOutput
	ToNodePoolTaintOutputWithContext(context.Context) NodePoolTaintOutput
}

type NodePoolTaintArgs struct {
	Effect pulumi.StringInput `pulumi:"effect"`
	Key    pulumi.StringInput `pulumi:"key"`
	Value  pulumi.StringInput `pulumi:"value"`
}

func (NodePoolTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolTaint)(nil)).Elem()
}

func (i NodePoolTaintArgs) ToNodePoolTaintOutput() NodePoolTaintOutput {
	return i.ToNodePoolTaintOutputWithContext(context.Background())
}

func (i NodePoolTaintArgs) ToNodePoolTaintOutputWithContext(ctx context.Context) NodePoolTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTaintOutput)
}

// NodePoolTaintArrayInput is an input type that accepts NodePoolTaintArray and NodePoolTaintArrayOutput values.
// You can construct a concrete instance of `NodePoolTaintArrayInput` via:
//
//	NodePoolTaintArray{ NodePoolTaintArgs{...} }
type NodePoolTaintArrayInput interface {
	pulumi.Input

	ToNodePoolTaintArrayOutput() NodePoolTaintArrayOutput
	ToNodePoolTaintArrayOutputWithContext(context.Context) NodePoolTaintArrayOutput
}

type NodePoolTaintArray []NodePoolTaintInput

func (NodePoolTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolTaint)(nil)).Elem()
}

func (i NodePoolTaintArray) ToNodePoolTaintArrayOutput() NodePoolTaintArrayOutput {
	return i.ToNodePoolTaintArrayOutputWithContext(context.Background())
}

func (i NodePoolTaintArray) ToNodePoolTaintArrayOutputWithContext(ctx context.Context) NodePoolTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolTaintArrayOutput)
}

type NodePoolTaintOutput struct{ *pulumi.OutputState }

func (NodePoolTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodePoolTaint)(nil)).Elem()
}

func (o NodePoolTaintOutput) ToNodePoolTaintOutput() NodePoolTaintOutput {
	return o
}

func (o NodePoolTaintOutput) ToNodePoolTaintOutputWithContext(ctx context.Context) NodePoolTaintOutput {
	return o
}

func (o NodePoolTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolTaint) string { return v.Effect }).(pulumi.StringOutput)
}

func (o NodePoolTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolTaint) string { return v.Key }).(pulumi.StringOutput)
}

func (o NodePoolTaintOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NodePoolTaint) string { return v.Value }).(pulumi.StringOutput)
}

type NodePoolTaintArrayOutput struct{ *pulumi.OutputState }

func (NodePoolTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodePoolTaint)(nil)).Elem()
}

func (o NodePoolTaintArrayOutput) ToNodePoolTaintArrayOutput() NodePoolTaintArrayOutput {
	return o
}

func (o NodePoolTaintArrayOutput) ToNodePoolTaintArrayOutputWithContext(ctx context.Context) NodePoolTaintArrayOutput {
	return o
}

func (o NodePoolTaintArrayOutput) Index(i pulumi.IntInput) NodePoolTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodePoolTaint {
		return vs[0].([]NodePoolTaint)[vs[1].(int)]
	}).(NodePoolTaintOutput)
}

type NodeRootVolume struct {
	DssPoolId *string `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  *string           `pulumi:"extendParam"`
	ExtendParams map[string]string `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough *bool   `pulumi:"hwPassthrough"`
	Iops          *int    `pulumi:"iops"`
	KmsKeyId      *string `pulumi:"kmsKeyId"`
	Size          int     `pulumi:"size"`
	Throughput    *int    `pulumi:"throughput"`
	Volumetype    string  `pulumi:"volumetype"`
}

// NodeRootVolumeInput is an input type that accepts NodeRootVolumeArgs and NodeRootVolumeOutput values.
// You can construct a concrete instance of `NodeRootVolumeInput` via:
//
//	NodeRootVolumeArgs{...}
type NodeRootVolumeInput interface {
	pulumi.Input

	ToNodeRootVolumeOutput() NodeRootVolumeOutput
	ToNodeRootVolumeOutputWithContext(context.Context) NodeRootVolumeOutput
}

type NodeRootVolumeArgs struct {
	DssPoolId pulumi.StringPtrInput `pulumi:"dssPoolId"`
	// Deprecated: use extendParams instead
	ExtendParam  pulumi.StringPtrInput `pulumi:"extendParam"`
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	// schema: Internal
	HwPassthrough pulumi.BoolPtrInput   `pulumi:"hwPassthrough"`
	Iops          pulumi.IntPtrInput    `pulumi:"iops"`
	KmsKeyId      pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Size          pulumi.IntInput       `pulumi:"size"`
	Throughput    pulumi.IntPtrInput    `pulumi:"throughput"`
	Volumetype    pulumi.StringInput    `pulumi:"volumetype"`
}

func (NodeRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeRootVolume)(nil)).Elem()
}

func (i NodeRootVolumeArgs) ToNodeRootVolumeOutput() NodeRootVolumeOutput {
	return i.ToNodeRootVolumeOutputWithContext(context.Background())
}

func (i NodeRootVolumeArgs) ToNodeRootVolumeOutputWithContext(ctx context.Context) NodeRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRootVolumeOutput)
}

func (i NodeRootVolumeArgs) ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput {
	return i.ToNodeRootVolumePtrOutputWithContext(context.Background())
}

func (i NodeRootVolumeArgs) ToNodeRootVolumePtrOutputWithContext(ctx context.Context) NodeRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRootVolumeOutput).ToNodeRootVolumePtrOutputWithContext(ctx)
}

// NodeRootVolumePtrInput is an input type that accepts NodeRootVolumeArgs, NodeRootVolumePtr and NodeRootVolumePtrOutput values.
// You can construct a concrete instance of `NodeRootVolumePtrInput` via:
//
//	        NodeRootVolumeArgs{...}
//
//	or:
//
//	        nil
type NodeRootVolumePtrInput interface {
	pulumi.Input

	ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput
	ToNodeRootVolumePtrOutputWithContext(context.Context) NodeRootVolumePtrOutput
}

type nodeRootVolumePtrType NodeRootVolumeArgs

func NodeRootVolumePtr(v *NodeRootVolumeArgs) NodeRootVolumePtrInput {
	return (*nodeRootVolumePtrType)(v)
}

func (*nodeRootVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeRootVolume)(nil)).Elem()
}

func (i *nodeRootVolumePtrType) ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput {
	return i.ToNodeRootVolumePtrOutputWithContext(context.Background())
}

func (i *nodeRootVolumePtrType) ToNodeRootVolumePtrOutputWithContext(ctx context.Context) NodeRootVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeRootVolumePtrOutput)
}

type NodeRootVolumeOutput struct{ *pulumi.OutputState }

func (NodeRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeRootVolume)(nil)).Elem()
}

func (o NodeRootVolumeOutput) ToNodeRootVolumeOutput() NodeRootVolumeOutput {
	return o
}

func (o NodeRootVolumeOutput) ToNodeRootVolumeOutputWithContext(ctx context.Context) NodeRootVolumeOutput {
	return o
}

func (o NodeRootVolumeOutput) ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput {
	return o.ToNodeRootVolumePtrOutputWithContext(context.Background())
}

func (o NodeRootVolumeOutput) ToNodeRootVolumePtrOutputWithContext(ctx context.Context) NodeRootVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeRootVolume) *NodeRootVolume {
		return &v
	}).(NodeRootVolumePtrOutput)
}

func (o NodeRootVolumeOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRootVolume) *string { return v.DssPoolId }).(pulumi.StringPtrOutput)
}

// Deprecated: use extendParams instead
func (o NodeRootVolumeOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRootVolume) *string { return v.ExtendParam }).(pulumi.StringPtrOutput)
}

func (o NodeRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v NodeRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

// schema: Internal
func (o NodeRootVolumeOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeRootVolume) *bool { return v.HwPassthrough }).(pulumi.BoolPtrOutput)
}

func (o NodeRootVolumeOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeRootVolume) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o NodeRootVolumeOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeRootVolume) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o NodeRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v NodeRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o NodeRootVolumeOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NodeRootVolume) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o NodeRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v NodeRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type NodeRootVolumePtrOutput struct{ *pulumi.OutputState }

func (NodeRootVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeRootVolume)(nil)).Elem()
}

func (o NodeRootVolumePtrOutput) ToNodeRootVolumePtrOutput() NodeRootVolumePtrOutput {
	return o
}

func (o NodeRootVolumePtrOutput) ToNodeRootVolumePtrOutputWithContext(ctx context.Context) NodeRootVolumePtrOutput {
	return o
}

func (o NodeRootVolumePtrOutput) Elem() NodeRootVolumeOutput {
	return o.ApplyT(func(v *NodeRootVolume) NodeRootVolume {
		if v != nil {
			return *v
		}
		var ret NodeRootVolume
		return ret
	}).(NodeRootVolumeOutput)
}

func (o NodeRootVolumePtrOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.DssPoolId
	}).(pulumi.StringPtrOutput)
}

// Deprecated: use extendParams instead
func (o NodeRootVolumePtrOutput) ExtendParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.ExtendParam
	}).(pulumi.StringPtrOutput)
}

func (o NodeRootVolumePtrOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeRootVolume) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtendParams
	}).(pulumi.StringMapOutput)
}

// schema: Internal
func (o NodeRootVolumePtrOutput) HwPassthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *bool {
		if v == nil {
			return nil
		}
		return v.HwPassthrough
	}).(pulumi.BoolPtrOutput)
}

func (o NodeRootVolumePtrOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *int {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.IntPtrOutput)
}

func (o NodeRootVolumePtrOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *string {
		if v == nil {
			return nil
		}
		return v.KmsKeyId
	}).(pulumi.StringPtrOutput)
}

func (o NodeRootVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

func (o NodeRootVolumePtrOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *int {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.IntPtrOutput)
}

func (o NodeRootVolumePtrOutput) Volumetype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeRootVolume) *string {
		if v == nil {
			return nil
		}
		return &v.Volumetype
	}).(pulumi.StringPtrOutput)
}

type NodeStorage struct {
	Groups    []NodeStorageGroup    `pulumi:"groups"`
	Selectors []NodeStorageSelector `pulumi:"selectors"`
}

// NodeStorageInput is an input type that accepts NodeStorageArgs and NodeStorageOutput values.
// You can construct a concrete instance of `NodeStorageInput` via:
//
//	NodeStorageArgs{...}
type NodeStorageInput interface {
	pulumi.Input

	ToNodeStorageOutput() NodeStorageOutput
	ToNodeStorageOutputWithContext(context.Context) NodeStorageOutput
}

type NodeStorageArgs struct {
	Groups    NodeStorageGroupArrayInput    `pulumi:"groups"`
	Selectors NodeStorageSelectorArrayInput `pulumi:"selectors"`
}

func (NodeStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorage)(nil)).Elem()
}

func (i NodeStorageArgs) ToNodeStorageOutput() NodeStorageOutput {
	return i.ToNodeStorageOutputWithContext(context.Background())
}

func (i NodeStorageArgs) ToNodeStorageOutputWithContext(ctx context.Context) NodeStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageOutput)
}

func (i NodeStorageArgs) ToNodeStoragePtrOutput() NodeStoragePtrOutput {
	return i.ToNodeStoragePtrOutputWithContext(context.Background())
}

func (i NodeStorageArgs) ToNodeStoragePtrOutputWithContext(ctx context.Context) NodeStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageOutput).ToNodeStoragePtrOutputWithContext(ctx)
}

// NodeStoragePtrInput is an input type that accepts NodeStorageArgs, NodeStoragePtr and NodeStoragePtrOutput values.
// You can construct a concrete instance of `NodeStoragePtrInput` via:
//
//	        NodeStorageArgs{...}
//
//	or:
//
//	        nil
type NodeStoragePtrInput interface {
	pulumi.Input

	ToNodeStoragePtrOutput() NodeStoragePtrOutput
	ToNodeStoragePtrOutputWithContext(context.Context) NodeStoragePtrOutput
}

type nodeStoragePtrType NodeStorageArgs

func NodeStoragePtr(v *NodeStorageArgs) NodeStoragePtrInput {
	return (*nodeStoragePtrType)(v)
}

func (*nodeStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStorage)(nil)).Elem()
}

func (i *nodeStoragePtrType) ToNodeStoragePtrOutput() NodeStoragePtrOutput {
	return i.ToNodeStoragePtrOutputWithContext(context.Background())
}

func (i *nodeStoragePtrType) ToNodeStoragePtrOutputWithContext(ctx context.Context) NodeStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStoragePtrOutput)
}

type NodeStorageOutput struct{ *pulumi.OutputState }

func (NodeStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorage)(nil)).Elem()
}

func (o NodeStorageOutput) ToNodeStorageOutput() NodeStorageOutput {
	return o
}

func (o NodeStorageOutput) ToNodeStorageOutputWithContext(ctx context.Context) NodeStorageOutput {
	return o
}

func (o NodeStorageOutput) ToNodeStoragePtrOutput() NodeStoragePtrOutput {
	return o.ToNodeStoragePtrOutputWithContext(context.Background())
}

func (o NodeStorageOutput) ToNodeStoragePtrOutputWithContext(ctx context.Context) NodeStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NodeStorage) *NodeStorage {
		return &v
	}).(NodeStoragePtrOutput)
}

func (o NodeStorageOutput) Groups() NodeStorageGroupArrayOutput {
	return o.ApplyT(func(v NodeStorage) []NodeStorageGroup { return v.Groups }).(NodeStorageGroupArrayOutput)
}

func (o NodeStorageOutput) Selectors() NodeStorageSelectorArrayOutput {
	return o.ApplyT(func(v NodeStorage) []NodeStorageSelector { return v.Selectors }).(NodeStorageSelectorArrayOutput)
}

type NodeStoragePtrOutput struct{ *pulumi.OutputState }

func (NodeStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeStorage)(nil)).Elem()
}

func (o NodeStoragePtrOutput) ToNodeStoragePtrOutput() NodeStoragePtrOutput {
	return o
}

func (o NodeStoragePtrOutput) ToNodeStoragePtrOutputWithContext(ctx context.Context) NodeStoragePtrOutput {
	return o
}

func (o NodeStoragePtrOutput) Elem() NodeStorageOutput {
	return o.ApplyT(func(v *NodeStorage) NodeStorage {
		if v != nil {
			return *v
		}
		var ret NodeStorage
		return ret
	}).(NodeStorageOutput)
}

func (o NodeStoragePtrOutput) Groups() NodeStorageGroupArrayOutput {
	return o.ApplyT(func(v *NodeStorage) []NodeStorageGroup {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(NodeStorageGroupArrayOutput)
}

func (o NodeStoragePtrOutput) Selectors() NodeStorageSelectorArrayOutput {
	return o.ApplyT(func(v *NodeStorage) []NodeStorageSelector {
		if v == nil {
			return nil
		}
		return v.Selectors
	}).(NodeStorageSelectorArrayOutput)
}

type NodeStorageGroup struct {
	CceManaged    *bool                          `pulumi:"cceManaged"`
	Name          string                         `pulumi:"name"`
	SelectorNames []string                       `pulumi:"selectorNames"`
	VirtualSpaces []NodeStorageGroupVirtualSpace `pulumi:"virtualSpaces"`
}

// NodeStorageGroupInput is an input type that accepts NodeStorageGroupArgs and NodeStorageGroupOutput values.
// You can construct a concrete instance of `NodeStorageGroupInput` via:
//
//	NodeStorageGroupArgs{...}
type NodeStorageGroupInput interface {
	pulumi.Input

	ToNodeStorageGroupOutput() NodeStorageGroupOutput
	ToNodeStorageGroupOutputWithContext(context.Context) NodeStorageGroupOutput
}

type NodeStorageGroupArgs struct {
	CceManaged    pulumi.BoolPtrInput                    `pulumi:"cceManaged"`
	Name          pulumi.StringInput                     `pulumi:"name"`
	SelectorNames pulumi.StringArrayInput                `pulumi:"selectorNames"`
	VirtualSpaces NodeStorageGroupVirtualSpaceArrayInput `pulumi:"virtualSpaces"`
}

func (NodeStorageGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageGroup)(nil)).Elem()
}

func (i NodeStorageGroupArgs) ToNodeStorageGroupOutput() NodeStorageGroupOutput {
	return i.ToNodeStorageGroupOutputWithContext(context.Background())
}

func (i NodeStorageGroupArgs) ToNodeStorageGroupOutputWithContext(ctx context.Context) NodeStorageGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageGroupOutput)
}

// NodeStorageGroupArrayInput is an input type that accepts NodeStorageGroupArray and NodeStorageGroupArrayOutput values.
// You can construct a concrete instance of `NodeStorageGroupArrayInput` via:
//
//	NodeStorageGroupArray{ NodeStorageGroupArgs{...} }
type NodeStorageGroupArrayInput interface {
	pulumi.Input

	ToNodeStorageGroupArrayOutput() NodeStorageGroupArrayOutput
	ToNodeStorageGroupArrayOutputWithContext(context.Context) NodeStorageGroupArrayOutput
}

type NodeStorageGroupArray []NodeStorageGroupInput

func (NodeStorageGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageGroup)(nil)).Elem()
}

func (i NodeStorageGroupArray) ToNodeStorageGroupArrayOutput() NodeStorageGroupArrayOutput {
	return i.ToNodeStorageGroupArrayOutputWithContext(context.Background())
}

func (i NodeStorageGroupArray) ToNodeStorageGroupArrayOutputWithContext(ctx context.Context) NodeStorageGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageGroupArrayOutput)
}

type NodeStorageGroupOutput struct{ *pulumi.OutputState }

func (NodeStorageGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageGroup)(nil)).Elem()
}

func (o NodeStorageGroupOutput) ToNodeStorageGroupOutput() NodeStorageGroupOutput {
	return o
}

func (o NodeStorageGroupOutput) ToNodeStorageGroupOutputWithContext(ctx context.Context) NodeStorageGroupOutput {
	return o
}

func (o NodeStorageGroupOutput) CceManaged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NodeStorageGroup) *bool { return v.CceManaged }).(pulumi.BoolPtrOutput)
}

func (o NodeStorageGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeStorageGroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodeStorageGroupOutput) SelectorNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NodeStorageGroup) []string { return v.SelectorNames }).(pulumi.StringArrayOutput)
}

func (o NodeStorageGroupOutput) VirtualSpaces() NodeStorageGroupVirtualSpaceArrayOutput {
	return o.ApplyT(func(v NodeStorageGroup) []NodeStorageGroupVirtualSpace { return v.VirtualSpaces }).(NodeStorageGroupVirtualSpaceArrayOutput)
}

type NodeStorageGroupArrayOutput struct{ *pulumi.OutputState }

func (NodeStorageGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageGroup)(nil)).Elem()
}

func (o NodeStorageGroupArrayOutput) ToNodeStorageGroupArrayOutput() NodeStorageGroupArrayOutput {
	return o
}

func (o NodeStorageGroupArrayOutput) ToNodeStorageGroupArrayOutputWithContext(ctx context.Context) NodeStorageGroupArrayOutput {
	return o
}

func (o NodeStorageGroupArrayOutput) Index(i pulumi.IntInput) NodeStorageGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeStorageGroup {
		return vs[0].([]NodeStorageGroup)[vs[1].(int)]
	}).(NodeStorageGroupOutput)
}

type NodeStorageGroupVirtualSpace struct {
	LvmLvType     *string `pulumi:"lvmLvType"`
	LvmPath       *string `pulumi:"lvmPath"`
	Name          string  `pulumi:"name"`
	RuntimeLvType *string `pulumi:"runtimeLvType"`
	Size          string  `pulumi:"size"`
}

// NodeStorageGroupVirtualSpaceInput is an input type that accepts NodeStorageGroupVirtualSpaceArgs and NodeStorageGroupVirtualSpaceOutput values.
// You can construct a concrete instance of `NodeStorageGroupVirtualSpaceInput` via:
//
//	NodeStorageGroupVirtualSpaceArgs{...}
type NodeStorageGroupVirtualSpaceInput interface {
	pulumi.Input

	ToNodeStorageGroupVirtualSpaceOutput() NodeStorageGroupVirtualSpaceOutput
	ToNodeStorageGroupVirtualSpaceOutputWithContext(context.Context) NodeStorageGroupVirtualSpaceOutput
}

type NodeStorageGroupVirtualSpaceArgs struct {
	LvmLvType     pulumi.StringPtrInput `pulumi:"lvmLvType"`
	LvmPath       pulumi.StringPtrInput `pulumi:"lvmPath"`
	Name          pulumi.StringInput    `pulumi:"name"`
	RuntimeLvType pulumi.StringPtrInput `pulumi:"runtimeLvType"`
	Size          pulumi.StringInput    `pulumi:"size"`
}

func (NodeStorageGroupVirtualSpaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageGroupVirtualSpace)(nil)).Elem()
}

func (i NodeStorageGroupVirtualSpaceArgs) ToNodeStorageGroupVirtualSpaceOutput() NodeStorageGroupVirtualSpaceOutput {
	return i.ToNodeStorageGroupVirtualSpaceOutputWithContext(context.Background())
}

func (i NodeStorageGroupVirtualSpaceArgs) ToNodeStorageGroupVirtualSpaceOutputWithContext(ctx context.Context) NodeStorageGroupVirtualSpaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageGroupVirtualSpaceOutput)
}

// NodeStorageGroupVirtualSpaceArrayInput is an input type that accepts NodeStorageGroupVirtualSpaceArray and NodeStorageGroupVirtualSpaceArrayOutput values.
// You can construct a concrete instance of `NodeStorageGroupVirtualSpaceArrayInput` via:
//
//	NodeStorageGroupVirtualSpaceArray{ NodeStorageGroupVirtualSpaceArgs{...} }
type NodeStorageGroupVirtualSpaceArrayInput interface {
	pulumi.Input

	ToNodeStorageGroupVirtualSpaceArrayOutput() NodeStorageGroupVirtualSpaceArrayOutput
	ToNodeStorageGroupVirtualSpaceArrayOutputWithContext(context.Context) NodeStorageGroupVirtualSpaceArrayOutput
}

type NodeStorageGroupVirtualSpaceArray []NodeStorageGroupVirtualSpaceInput

func (NodeStorageGroupVirtualSpaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageGroupVirtualSpace)(nil)).Elem()
}

func (i NodeStorageGroupVirtualSpaceArray) ToNodeStorageGroupVirtualSpaceArrayOutput() NodeStorageGroupVirtualSpaceArrayOutput {
	return i.ToNodeStorageGroupVirtualSpaceArrayOutputWithContext(context.Background())
}

func (i NodeStorageGroupVirtualSpaceArray) ToNodeStorageGroupVirtualSpaceArrayOutputWithContext(ctx context.Context) NodeStorageGroupVirtualSpaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageGroupVirtualSpaceArrayOutput)
}

type NodeStorageGroupVirtualSpaceOutput struct{ *pulumi.OutputState }

func (NodeStorageGroupVirtualSpaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageGroupVirtualSpace)(nil)).Elem()
}

func (o NodeStorageGroupVirtualSpaceOutput) ToNodeStorageGroupVirtualSpaceOutput() NodeStorageGroupVirtualSpaceOutput {
	return o
}

func (o NodeStorageGroupVirtualSpaceOutput) ToNodeStorageGroupVirtualSpaceOutputWithContext(ctx context.Context) NodeStorageGroupVirtualSpaceOutput {
	return o
}

func (o NodeStorageGroupVirtualSpaceOutput) LvmLvType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) *string { return v.LvmLvType }).(pulumi.StringPtrOutput)
}

func (o NodeStorageGroupVirtualSpaceOutput) LvmPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) *string { return v.LvmPath }).(pulumi.StringPtrOutput)
}

func (o NodeStorageGroupVirtualSpaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodeStorageGroupVirtualSpaceOutput) RuntimeLvType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) *string { return v.RuntimeLvType }).(pulumi.StringPtrOutput)
}

func (o NodeStorageGroupVirtualSpaceOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v NodeStorageGroupVirtualSpace) string { return v.Size }).(pulumi.StringOutput)
}

type NodeStorageGroupVirtualSpaceArrayOutput struct{ *pulumi.OutputState }

func (NodeStorageGroupVirtualSpaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageGroupVirtualSpace)(nil)).Elem()
}

func (o NodeStorageGroupVirtualSpaceArrayOutput) ToNodeStorageGroupVirtualSpaceArrayOutput() NodeStorageGroupVirtualSpaceArrayOutput {
	return o
}

func (o NodeStorageGroupVirtualSpaceArrayOutput) ToNodeStorageGroupVirtualSpaceArrayOutputWithContext(ctx context.Context) NodeStorageGroupVirtualSpaceArrayOutput {
	return o
}

func (o NodeStorageGroupVirtualSpaceArrayOutput) Index(i pulumi.IntInput) NodeStorageGroupVirtualSpaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeStorageGroupVirtualSpace {
		return vs[0].([]NodeStorageGroupVirtualSpace)[vs[1].(int)]
	}).(NodeStorageGroupVirtualSpaceOutput)
}

type NodeStorageSelector struct {
	MatchLabelCount             *string `pulumi:"matchLabelCount"`
	MatchLabelMetadataCmkid     *string `pulumi:"matchLabelMetadataCmkid"`
	MatchLabelMetadataEncrypted *string `pulumi:"matchLabelMetadataEncrypted"`
	MatchLabelSize              *string `pulumi:"matchLabelSize"`
	MatchLabelVolumeType        *string `pulumi:"matchLabelVolumeType"`
	Name                        string  `pulumi:"name"`
	Type                        *string `pulumi:"type"`
}

// NodeStorageSelectorInput is an input type that accepts NodeStorageSelectorArgs and NodeStorageSelectorOutput values.
// You can construct a concrete instance of `NodeStorageSelectorInput` via:
//
//	NodeStorageSelectorArgs{...}
type NodeStorageSelectorInput interface {
	pulumi.Input

	ToNodeStorageSelectorOutput() NodeStorageSelectorOutput
	ToNodeStorageSelectorOutputWithContext(context.Context) NodeStorageSelectorOutput
}

type NodeStorageSelectorArgs struct {
	MatchLabelCount             pulumi.StringPtrInput `pulumi:"matchLabelCount"`
	MatchLabelMetadataCmkid     pulumi.StringPtrInput `pulumi:"matchLabelMetadataCmkid"`
	MatchLabelMetadataEncrypted pulumi.StringPtrInput `pulumi:"matchLabelMetadataEncrypted"`
	MatchLabelSize              pulumi.StringPtrInput `pulumi:"matchLabelSize"`
	MatchLabelVolumeType        pulumi.StringPtrInput `pulumi:"matchLabelVolumeType"`
	Name                        pulumi.StringInput    `pulumi:"name"`
	Type                        pulumi.StringPtrInput `pulumi:"type"`
}

func (NodeStorageSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageSelector)(nil)).Elem()
}

func (i NodeStorageSelectorArgs) ToNodeStorageSelectorOutput() NodeStorageSelectorOutput {
	return i.ToNodeStorageSelectorOutputWithContext(context.Background())
}

func (i NodeStorageSelectorArgs) ToNodeStorageSelectorOutputWithContext(ctx context.Context) NodeStorageSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageSelectorOutput)
}

// NodeStorageSelectorArrayInput is an input type that accepts NodeStorageSelectorArray and NodeStorageSelectorArrayOutput values.
// You can construct a concrete instance of `NodeStorageSelectorArrayInput` via:
//
//	NodeStorageSelectorArray{ NodeStorageSelectorArgs{...} }
type NodeStorageSelectorArrayInput interface {
	pulumi.Input

	ToNodeStorageSelectorArrayOutput() NodeStorageSelectorArrayOutput
	ToNodeStorageSelectorArrayOutputWithContext(context.Context) NodeStorageSelectorArrayOutput
}

type NodeStorageSelectorArray []NodeStorageSelectorInput

func (NodeStorageSelectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageSelector)(nil)).Elem()
}

func (i NodeStorageSelectorArray) ToNodeStorageSelectorArrayOutput() NodeStorageSelectorArrayOutput {
	return i.ToNodeStorageSelectorArrayOutputWithContext(context.Background())
}

func (i NodeStorageSelectorArray) ToNodeStorageSelectorArrayOutputWithContext(ctx context.Context) NodeStorageSelectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeStorageSelectorArrayOutput)
}

type NodeStorageSelectorOutput struct{ *pulumi.OutputState }

func (NodeStorageSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeStorageSelector)(nil)).Elem()
}

func (o NodeStorageSelectorOutput) ToNodeStorageSelectorOutput() NodeStorageSelectorOutput {
	return o
}

func (o NodeStorageSelectorOutput) ToNodeStorageSelectorOutputWithContext(ctx context.Context) NodeStorageSelectorOutput {
	return o
}

func (o NodeStorageSelectorOutput) MatchLabelCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelCount }).(pulumi.StringPtrOutput)
}

func (o NodeStorageSelectorOutput) MatchLabelMetadataCmkid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelMetadataCmkid }).(pulumi.StringPtrOutput)
}

func (o NodeStorageSelectorOutput) MatchLabelMetadataEncrypted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelMetadataEncrypted }).(pulumi.StringPtrOutput)
}

func (o NodeStorageSelectorOutput) MatchLabelSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelSize }).(pulumi.StringPtrOutput)
}

func (o NodeStorageSelectorOutput) MatchLabelVolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.MatchLabelVolumeType }).(pulumi.StringPtrOutput)
}

func (o NodeStorageSelectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NodeStorageSelector) string { return v.Name }).(pulumi.StringOutput)
}

func (o NodeStorageSelectorOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeStorageSelector) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type NodeStorageSelectorArrayOutput struct{ *pulumi.OutputState }

func (NodeStorageSelectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeStorageSelector)(nil)).Elem()
}

func (o NodeStorageSelectorArrayOutput) ToNodeStorageSelectorArrayOutput() NodeStorageSelectorArrayOutput {
	return o
}

func (o NodeStorageSelectorArrayOutput) ToNodeStorageSelectorArrayOutputWithContext(ctx context.Context) NodeStorageSelectorArrayOutput {
	return o
}

func (o NodeStorageSelectorArrayOutput) Index(i pulumi.IntInput) NodeStorageSelectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeStorageSelector {
		return vs[0].([]NodeStorageSelector)[vs[1].(int)]
	}).(NodeStorageSelectorOutput)
}

type NodeTaint struct {
	Effect string  `pulumi:"effect"`
	Key    string  `pulumi:"key"`
	Value  *string `pulumi:"value"`
}

// NodeTaintInput is an input type that accepts NodeTaintArgs and NodeTaintOutput values.
// You can construct a concrete instance of `NodeTaintInput` via:
//
//	NodeTaintArgs{...}
type NodeTaintInput interface {
	pulumi.Input

	ToNodeTaintOutput() NodeTaintOutput
	ToNodeTaintOutputWithContext(context.Context) NodeTaintOutput
}

type NodeTaintArgs struct {
	Effect pulumi.StringInput    `pulumi:"effect"`
	Key    pulumi.StringInput    `pulumi:"key"`
	Value  pulumi.StringPtrInput `pulumi:"value"`
}

func (NodeTaintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (i NodeTaintArgs) ToNodeTaintOutput() NodeTaintOutput {
	return i.ToNodeTaintOutputWithContext(context.Background())
}

func (i NodeTaintArgs) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintOutput)
}

// NodeTaintArrayInput is an input type that accepts NodeTaintArray and NodeTaintArrayOutput values.
// You can construct a concrete instance of `NodeTaintArrayInput` via:
//
//	NodeTaintArray{ NodeTaintArgs{...} }
type NodeTaintArrayInput interface {
	pulumi.Input

	ToNodeTaintArrayOutput() NodeTaintArrayOutput
	ToNodeTaintArrayOutputWithContext(context.Context) NodeTaintArrayOutput
}

type NodeTaintArray []NodeTaintInput

func (NodeTaintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (i NodeTaintArray) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return i.ToNodeTaintArrayOutputWithContext(context.Background())
}

func (i NodeTaintArray) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeTaintArrayOutput)
}

type NodeTaintOutput struct{ *pulumi.OutputState }

func (NodeTaintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NodeTaint)(nil)).Elem()
}

func (o NodeTaintOutput) ToNodeTaintOutput() NodeTaintOutput {
	return o
}

func (o NodeTaintOutput) ToNodeTaintOutputWithContext(ctx context.Context) NodeTaintOutput {
	return o
}

func (o NodeTaintOutput) Effect() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaint) string { return v.Effect }).(pulumi.StringOutput)
}

func (o NodeTaintOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v NodeTaint) string { return v.Key }).(pulumi.StringOutput)
}

func (o NodeTaintOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NodeTaint) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NodeTaintArrayOutput struct{ *pulumi.OutputState }

func (NodeTaintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NodeTaint)(nil)).Elem()
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutput() NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) ToNodeTaintArrayOutputWithContext(ctx context.Context) NodeTaintArrayOutput {
	return o
}

func (o NodeTaintArrayOutput) Index(i pulumi.IntInput) NodeTaintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NodeTaint {
		return vs[0].([]NodeTaint)[vs[1].(int)]
	}).(NodeTaintOutput)
}

type GetAddonTemplateSupportVersion struct {
	BareMetals      []string `pulumi:"bareMetals"`
	VirtualMachines []string `pulumi:"virtualMachines"`
}

// GetAddonTemplateSupportVersionInput is an input type that accepts GetAddonTemplateSupportVersionArgs and GetAddonTemplateSupportVersionOutput values.
// You can construct a concrete instance of `GetAddonTemplateSupportVersionInput` via:
//
//	GetAddonTemplateSupportVersionArgs{...}
type GetAddonTemplateSupportVersionInput interface {
	pulumi.Input

	ToGetAddonTemplateSupportVersionOutput() GetAddonTemplateSupportVersionOutput
	ToGetAddonTemplateSupportVersionOutputWithContext(context.Context) GetAddonTemplateSupportVersionOutput
}

type GetAddonTemplateSupportVersionArgs struct {
	BareMetals      pulumi.StringArrayInput `pulumi:"bareMetals"`
	VirtualMachines pulumi.StringArrayInput `pulumi:"virtualMachines"`
}

func (GetAddonTemplateSupportVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonTemplateSupportVersion)(nil)).Elem()
}

func (i GetAddonTemplateSupportVersionArgs) ToGetAddonTemplateSupportVersionOutput() GetAddonTemplateSupportVersionOutput {
	return i.ToGetAddonTemplateSupportVersionOutputWithContext(context.Background())
}

func (i GetAddonTemplateSupportVersionArgs) ToGetAddonTemplateSupportVersionOutputWithContext(ctx context.Context) GetAddonTemplateSupportVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAddonTemplateSupportVersionOutput)
}

// GetAddonTemplateSupportVersionArrayInput is an input type that accepts GetAddonTemplateSupportVersionArray and GetAddonTemplateSupportVersionArrayOutput values.
// You can construct a concrete instance of `GetAddonTemplateSupportVersionArrayInput` via:
//
//	GetAddonTemplateSupportVersionArray{ GetAddonTemplateSupportVersionArgs{...} }
type GetAddonTemplateSupportVersionArrayInput interface {
	pulumi.Input

	ToGetAddonTemplateSupportVersionArrayOutput() GetAddonTemplateSupportVersionArrayOutput
	ToGetAddonTemplateSupportVersionArrayOutputWithContext(context.Context) GetAddonTemplateSupportVersionArrayOutput
}

type GetAddonTemplateSupportVersionArray []GetAddonTemplateSupportVersionInput

func (GetAddonTemplateSupportVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAddonTemplateSupportVersion)(nil)).Elem()
}

func (i GetAddonTemplateSupportVersionArray) ToGetAddonTemplateSupportVersionArrayOutput() GetAddonTemplateSupportVersionArrayOutput {
	return i.ToGetAddonTemplateSupportVersionArrayOutputWithContext(context.Background())
}

func (i GetAddonTemplateSupportVersionArray) ToGetAddonTemplateSupportVersionArrayOutputWithContext(ctx context.Context) GetAddonTemplateSupportVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAddonTemplateSupportVersionArrayOutput)
}

type GetAddonTemplateSupportVersionOutput struct{ *pulumi.OutputState }

func (GetAddonTemplateSupportVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAddonTemplateSupportVersion)(nil)).Elem()
}

func (o GetAddonTemplateSupportVersionOutput) ToGetAddonTemplateSupportVersionOutput() GetAddonTemplateSupportVersionOutput {
	return o
}

func (o GetAddonTemplateSupportVersionOutput) ToGetAddonTemplateSupportVersionOutputWithContext(ctx context.Context) GetAddonTemplateSupportVersionOutput {
	return o
}

func (o GetAddonTemplateSupportVersionOutput) BareMetals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAddonTemplateSupportVersion) []string { return v.BareMetals }).(pulumi.StringArrayOutput)
}

func (o GetAddonTemplateSupportVersionOutput) VirtualMachines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAddonTemplateSupportVersion) []string { return v.VirtualMachines }).(pulumi.StringArrayOutput)
}

type GetAddonTemplateSupportVersionArrayOutput struct{ *pulumi.OutputState }

func (GetAddonTemplateSupportVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAddonTemplateSupportVersion)(nil)).Elem()
}

func (o GetAddonTemplateSupportVersionArrayOutput) ToGetAddonTemplateSupportVersionArrayOutput() GetAddonTemplateSupportVersionArrayOutput {
	return o
}

func (o GetAddonTemplateSupportVersionArrayOutput) ToGetAddonTemplateSupportVersionArrayOutputWithContext(ctx context.Context) GetAddonTemplateSupportVersionArrayOutput {
	return o
}

func (o GetAddonTemplateSupportVersionArrayOutput) Index(i pulumi.IntInput) GetAddonTemplateSupportVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAddonTemplateSupportVersion {
		return vs[0].([]GetAddonTemplateSupportVersion)[vs[1].(int)]
	}).(GetAddonTemplateSupportVersionOutput)
}

type GetClusterCertificateCluster struct {
	CertificateAuthorityData string `pulumi:"certificateAuthorityData"`
	Name                     string `pulumi:"name"`
	Server                   string `pulumi:"server"`
}

// GetClusterCertificateClusterInput is an input type that accepts GetClusterCertificateClusterArgs and GetClusterCertificateClusterOutput values.
// You can construct a concrete instance of `GetClusterCertificateClusterInput` via:
//
//	GetClusterCertificateClusterArgs{...}
type GetClusterCertificateClusterInput interface {
	pulumi.Input

	ToGetClusterCertificateClusterOutput() GetClusterCertificateClusterOutput
	ToGetClusterCertificateClusterOutputWithContext(context.Context) GetClusterCertificateClusterOutput
}

type GetClusterCertificateClusterArgs struct {
	CertificateAuthorityData pulumi.StringInput `pulumi:"certificateAuthorityData"`
	Name                     pulumi.StringInput `pulumi:"name"`
	Server                   pulumi.StringInput `pulumi:"server"`
}

func (GetClusterCertificateClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateCluster)(nil)).Elem()
}

func (i GetClusterCertificateClusterArgs) ToGetClusterCertificateClusterOutput() GetClusterCertificateClusterOutput {
	return i.ToGetClusterCertificateClusterOutputWithContext(context.Background())
}

func (i GetClusterCertificateClusterArgs) ToGetClusterCertificateClusterOutputWithContext(ctx context.Context) GetClusterCertificateClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateClusterOutput)
}

// GetClusterCertificateClusterArrayInput is an input type that accepts GetClusterCertificateClusterArray and GetClusterCertificateClusterArrayOutput values.
// You can construct a concrete instance of `GetClusterCertificateClusterArrayInput` via:
//
//	GetClusterCertificateClusterArray{ GetClusterCertificateClusterArgs{...} }
type GetClusterCertificateClusterArrayInput interface {
	pulumi.Input

	ToGetClusterCertificateClusterArrayOutput() GetClusterCertificateClusterArrayOutput
	ToGetClusterCertificateClusterArrayOutputWithContext(context.Context) GetClusterCertificateClusterArrayOutput
}

type GetClusterCertificateClusterArray []GetClusterCertificateClusterInput

func (GetClusterCertificateClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificateCluster)(nil)).Elem()
}

func (i GetClusterCertificateClusterArray) ToGetClusterCertificateClusterArrayOutput() GetClusterCertificateClusterArrayOutput {
	return i.ToGetClusterCertificateClusterArrayOutputWithContext(context.Background())
}

func (i GetClusterCertificateClusterArray) ToGetClusterCertificateClusterArrayOutputWithContext(ctx context.Context) GetClusterCertificateClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateClusterArrayOutput)
}

type GetClusterCertificateClusterOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateCluster)(nil)).Elem()
}

func (o GetClusterCertificateClusterOutput) ToGetClusterCertificateClusterOutput() GetClusterCertificateClusterOutput {
	return o
}

func (o GetClusterCertificateClusterOutput) ToGetClusterCertificateClusterOutputWithContext(ctx context.Context) GetClusterCertificateClusterOutput {
	return o
}

func (o GetClusterCertificateClusterOutput) CertificateAuthorityData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateCluster) string { return v.CertificateAuthorityData }).(pulumi.StringOutput)
}

func (o GetClusterCertificateClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateCluster) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClusterCertificateClusterOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateCluster) string { return v.Server }).(pulumi.StringOutput)
}

type GetClusterCertificateClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificateCluster)(nil)).Elem()
}

func (o GetClusterCertificateClusterArrayOutput) ToGetClusterCertificateClusterArrayOutput() GetClusterCertificateClusterArrayOutput {
	return o
}

func (o GetClusterCertificateClusterArrayOutput) ToGetClusterCertificateClusterArrayOutputWithContext(ctx context.Context) GetClusterCertificateClusterArrayOutput {
	return o
}

func (o GetClusterCertificateClusterArrayOutput) Index(i pulumi.IntInput) GetClusterCertificateClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCertificateCluster {
		return vs[0].([]GetClusterCertificateCluster)[vs[1].(int)]
	}).(GetClusterCertificateClusterOutput)
}

type GetClusterCertificateUser struct {
	ClientCertificateData string `pulumi:"clientCertificateData"`
	ClientKeyData         string `pulumi:"clientKeyData"`
	Name                  string `pulumi:"name"`
}

// GetClusterCertificateUserInput is an input type that accepts GetClusterCertificateUserArgs and GetClusterCertificateUserOutput values.
// You can construct a concrete instance of `GetClusterCertificateUserInput` via:
//
//	GetClusterCertificateUserArgs{...}
type GetClusterCertificateUserInput interface {
	pulumi.Input

	ToGetClusterCertificateUserOutput() GetClusterCertificateUserOutput
	ToGetClusterCertificateUserOutputWithContext(context.Context) GetClusterCertificateUserOutput
}

type GetClusterCertificateUserArgs struct {
	ClientCertificateData pulumi.StringInput `pulumi:"clientCertificateData"`
	ClientKeyData         pulumi.StringInput `pulumi:"clientKeyData"`
	Name                  pulumi.StringInput `pulumi:"name"`
}

func (GetClusterCertificateUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateUser)(nil)).Elem()
}

func (i GetClusterCertificateUserArgs) ToGetClusterCertificateUserOutput() GetClusterCertificateUserOutput {
	return i.ToGetClusterCertificateUserOutputWithContext(context.Background())
}

func (i GetClusterCertificateUserArgs) ToGetClusterCertificateUserOutputWithContext(ctx context.Context) GetClusterCertificateUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateUserOutput)
}

// GetClusterCertificateUserArrayInput is an input type that accepts GetClusterCertificateUserArray and GetClusterCertificateUserArrayOutput values.
// You can construct a concrete instance of `GetClusterCertificateUserArrayInput` via:
//
//	GetClusterCertificateUserArray{ GetClusterCertificateUserArgs{...} }
type GetClusterCertificateUserArrayInput interface {
	pulumi.Input

	ToGetClusterCertificateUserArrayOutput() GetClusterCertificateUserArrayOutput
	ToGetClusterCertificateUserArrayOutputWithContext(context.Context) GetClusterCertificateUserArrayOutput
}

type GetClusterCertificateUserArray []GetClusterCertificateUserInput

func (GetClusterCertificateUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificateUser)(nil)).Elem()
}

func (i GetClusterCertificateUserArray) ToGetClusterCertificateUserArrayOutput() GetClusterCertificateUserArrayOutput {
	return i.ToGetClusterCertificateUserArrayOutputWithContext(context.Background())
}

func (i GetClusterCertificateUserArray) ToGetClusterCertificateUserArrayOutputWithContext(ctx context.Context) GetClusterCertificateUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificateUserArrayOutput)
}

type GetClusterCertificateUserOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificateUser)(nil)).Elem()
}

func (o GetClusterCertificateUserOutput) ToGetClusterCertificateUserOutput() GetClusterCertificateUserOutput {
	return o
}

func (o GetClusterCertificateUserOutput) ToGetClusterCertificateUserOutputWithContext(ctx context.Context) GetClusterCertificateUserOutput {
	return o
}

func (o GetClusterCertificateUserOutput) ClientCertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateUser) string { return v.ClientCertificateData }).(pulumi.StringOutput)
}

func (o GetClusterCertificateUserOutput) ClientKeyData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateUser) string { return v.ClientKeyData }).(pulumi.StringOutput)
}

func (o GetClusterCertificateUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificateUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterCertificateUserArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCertificateUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificateUser)(nil)).Elem()
}

func (o GetClusterCertificateUserArrayOutput) ToGetClusterCertificateUserArrayOutput() GetClusterCertificateUserArrayOutput {
	return o
}

func (o GetClusterCertificateUserArrayOutput) ToGetClusterCertificateUserArrayOutputWithContext(ctx context.Context) GetClusterCertificateUserArrayOutput {
	return o
}

func (o GetClusterCertificateUserArrayOutput) Index(i pulumi.IntInput) GetClusterCertificateUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCertificateUser {
		return vs[0].([]GetClusterCertificateUser)[vs[1].(int)]
	}).(GetClusterCertificateUserOutput)
}

type GetClusterCertificatesCluster struct {
	CertificateAuthorityData string `pulumi:"certificateAuthorityData"`
	InsecureSkipTlsVerify    bool   `pulumi:"insecureSkipTlsVerify"`
	Name                     string `pulumi:"name"`
	Server                   string `pulumi:"server"`
}

// GetClusterCertificatesClusterInput is an input type that accepts GetClusterCertificatesClusterArgs and GetClusterCertificatesClusterOutput values.
// You can construct a concrete instance of `GetClusterCertificatesClusterInput` via:
//
//	GetClusterCertificatesClusterArgs{...}
type GetClusterCertificatesClusterInput interface {
	pulumi.Input

	ToGetClusterCertificatesClusterOutput() GetClusterCertificatesClusterOutput
	ToGetClusterCertificatesClusterOutputWithContext(context.Context) GetClusterCertificatesClusterOutput
}

type GetClusterCertificatesClusterArgs struct {
	CertificateAuthorityData pulumi.StringInput `pulumi:"certificateAuthorityData"`
	InsecureSkipTlsVerify    pulumi.BoolInput   `pulumi:"insecureSkipTlsVerify"`
	Name                     pulumi.StringInput `pulumi:"name"`
	Server                   pulumi.StringInput `pulumi:"server"`
}

func (GetClusterCertificatesClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificatesCluster)(nil)).Elem()
}

func (i GetClusterCertificatesClusterArgs) ToGetClusterCertificatesClusterOutput() GetClusterCertificatesClusterOutput {
	return i.ToGetClusterCertificatesClusterOutputWithContext(context.Background())
}

func (i GetClusterCertificatesClusterArgs) ToGetClusterCertificatesClusterOutputWithContext(ctx context.Context) GetClusterCertificatesClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificatesClusterOutput)
}

// GetClusterCertificatesClusterArrayInput is an input type that accepts GetClusterCertificatesClusterArray and GetClusterCertificatesClusterArrayOutput values.
// You can construct a concrete instance of `GetClusterCertificatesClusterArrayInput` via:
//
//	GetClusterCertificatesClusterArray{ GetClusterCertificatesClusterArgs{...} }
type GetClusterCertificatesClusterArrayInput interface {
	pulumi.Input

	ToGetClusterCertificatesClusterArrayOutput() GetClusterCertificatesClusterArrayOutput
	ToGetClusterCertificatesClusterArrayOutputWithContext(context.Context) GetClusterCertificatesClusterArrayOutput
}

type GetClusterCertificatesClusterArray []GetClusterCertificatesClusterInput

func (GetClusterCertificatesClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificatesCluster)(nil)).Elem()
}

func (i GetClusterCertificatesClusterArray) ToGetClusterCertificatesClusterArrayOutput() GetClusterCertificatesClusterArrayOutput {
	return i.ToGetClusterCertificatesClusterArrayOutputWithContext(context.Background())
}

func (i GetClusterCertificatesClusterArray) ToGetClusterCertificatesClusterArrayOutputWithContext(ctx context.Context) GetClusterCertificatesClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificatesClusterArrayOutput)
}

type GetClusterCertificatesClusterOutput struct{ *pulumi.OutputState }

func (GetClusterCertificatesClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificatesCluster)(nil)).Elem()
}

func (o GetClusterCertificatesClusterOutput) ToGetClusterCertificatesClusterOutput() GetClusterCertificatesClusterOutput {
	return o
}

func (o GetClusterCertificatesClusterOutput) ToGetClusterCertificatesClusterOutputWithContext(ctx context.Context) GetClusterCertificatesClusterOutput {
	return o
}

func (o GetClusterCertificatesClusterOutput) CertificateAuthorityData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesCluster) string { return v.CertificateAuthorityData }).(pulumi.StringOutput)
}

func (o GetClusterCertificatesClusterOutput) InsecureSkipTlsVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterCertificatesCluster) bool { return v.InsecureSkipTlsVerify }).(pulumi.BoolOutput)
}

func (o GetClusterCertificatesClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesCluster) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClusterCertificatesClusterOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesCluster) string { return v.Server }).(pulumi.StringOutput)
}

type GetClusterCertificatesClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCertificatesClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificatesCluster)(nil)).Elem()
}

func (o GetClusterCertificatesClusterArrayOutput) ToGetClusterCertificatesClusterArrayOutput() GetClusterCertificatesClusterArrayOutput {
	return o
}

func (o GetClusterCertificatesClusterArrayOutput) ToGetClusterCertificatesClusterArrayOutputWithContext(ctx context.Context) GetClusterCertificatesClusterArrayOutput {
	return o
}

func (o GetClusterCertificatesClusterArrayOutput) Index(i pulumi.IntInput) GetClusterCertificatesClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCertificatesCluster {
		return vs[0].([]GetClusterCertificatesCluster)[vs[1].(int)]
	}).(GetClusterCertificatesClusterOutput)
}

type GetClusterCertificatesContext struct {
	Cluster string `pulumi:"cluster"`
	Name    string `pulumi:"name"`
	User    string `pulumi:"user"`
}

// GetClusterCertificatesContextInput is an input type that accepts GetClusterCertificatesContextArgs and GetClusterCertificatesContextOutput values.
// You can construct a concrete instance of `GetClusterCertificatesContextInput` via:
//
//	GetClusterCertificatesContextArgs{...}
type GetClusterCertificatesContextInput interface {
	pulumi.Input

	ToGetClusterCertificatesContextOutput() GetClusterCertificatesContextOutput
	ToGetClusterCertificatesContextOutputWithContext(context.Context) GetClusterCertificatesContextOutput
}

type GetClusterCertificatesContextArgs struct {
	Cluster pulumi.StringInput `pulumi:"cluster"`
	Name    pulumi.StringInput `pulumi:"name"`
	User    pulumi.StringInput `pulumi:"user"`
}

func (GetClusterCertificatesContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificatesContext)(nil)).Elem()
}

func (i GetClusterCertificatesContextArgs) ToGetClusterCertificatesContextOutput() GetClusterCertificatesContextOutput {
	return i.ToGetClusterCertificatesContextOutputWithContext(context.Background())
}

func (i GetClusterCertificatesContextArgs) ToGetClusterCertificatesContextOutputWithContext(ctx context.Context) GetClusterCertificatesContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificatesContextOutput)
}

// GetClusterCertificatesContextArrayInput is an input type that accepts GetClusterCertificatesContextArray and GetClusterCertificatesContextArrayOutput values.
// You can construct a concrete instance of `GetClusterCertificatesContextArrayInput` via:
//
//	GetClusterCertificatesContextArray{ GetClusterCertificatesContextArgs{...} }
type GetClusterCertificatesContextArrayInput interface {
	pulumi.Input

	ToGetClusterCertificatesContextArrayOutput() GetClusterCertificatesContextArrayOutput
	ToGetClusterCertificatesContextArrayOutputWithContext(context.Context) GetClusterCertificatesContextArrayOutput
}

type GetClusterCertificatesContextArray []GetClusterCertificatesContextInput

func (GetClusterCertificatesContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificatesContext)(nil)).Elem()
}

func (i GetClusterCertificatesContextArray) ToGetClusterCertificatesContextArrayOutput() GetClusterCertificatesContextArrayOutput {
	return i.ToGetClusterCertificatesContextArrayOutputWithContext(context.Background())
}

func (i GetClusterCertificatesContextArray) ToGetClusterCertificatesContextArrayOutputWithContext(ctx context.Context) GetClusterCertificatesContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificatesContextArrayOutput)
}

type GetClusterCertificatesContextOutput struct{ *pulumi.OutputState }

func (GetClusterCertificatesContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificatesContext)(nil)).Elem()
}

func (o GetClusterCertificatesContextOutput) ToGetClusterCertificatesContextOutput() GetClusterCertificatesContextOutput {
	return o
}

func (o GetClusterCertificatesContextOutput) ToGetClusterCertificatesContextOutputWithContext(ctx context.Context) GetClusterCertificatesContextOutput {
	return o
}

func (o GetClusterCertificatesContextOutput) Cluster() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesContext) string { return v.Cluster }).(pulumi.StringOutput)
}

func (o GetClusterCertificatesContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesContext) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClusterCertificatesContextOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesContext) string { return v.User }).(pulumi.StringOutput)
}

type GetClusterCertificatesContextArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCertificatesContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificatesContext)(nil)).Elem()
}

func (o GetClusterCertificatesContextArrayOutput) ToGetClusterCertificatesContextArrayOutput() GetClusterCertificatesContextArrayOutput {
	return o
}

func (o GetClusterCertificatesContextArrayOutput) ToGetClusterCertificatesContextArrayOutputWithContext(ctx context.Context) GetClusterCertificatesContextArrayOutput {
	return o
}

func (o GetClusterCertificatesContextArrayOutput) Index(i pulumi.IntInput) GetClusterCertificatesContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCertificatesContext {
		return vs[0].([]GetClusterCertificatesContext)[vs[1].(int)]
	}).(GetClusterCertificatesContextOutput)
}

type GetClusterCertificatesUser struct {
	ClientCertificateData string `pulumi:"clientCertificateData"`
	ClientKeyData         string `pulumi:"clientKeyData"`
	Name                  string `pulumi:"name"`
}

// GetClusterCertificatesUserInput is an input type that accepts GetClusterCertificatesUserArgs and GetClusterCertificatesUserOutput values.
// You can construct a concrete instance of `GetClusterCertificatesUserInput` via:
//
//	GetClusterCertificatesUserArgs{...}
type GetClusterCertificatesUserInput interface {
	pulumi.Input

	ToGetClusterCertificatesUserOutput() GetClusterCertificatesUserOutput
	ToGetClusterCertificatesUserOutputWithContext(context.Context) GetClusterCertificatesUserOutput
}

type GetClusterCertificatesUserArgs struct {
	ClientCertificateData pulumi.StringInput `pulumi:"clientCertificateData"`
	ClientKeyData         pulumi.StringInput `pulumi:"clientKeyData"`
	Name                  pulumi.StringInput `pulumi:"name"`
}

func (GetClusterCertificatesUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificatesUser)(nil)).Elem()
}

func (i GetClusterCertificatesUserArgs) ToGetClusterCertificatesUserOutput() GetClusterCertificatesUserOutput {
	return i.ToGetClusterCertificatesUserOutputWithContext(context.Background())
}

func (i GetClusterCertificatesUserArgs) ToGetClusterCertificatesUserOutputWithContext(ctx context.Context) GetClusterCertificatesUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificatesUserOutput)
}

// GetClusterCertificatesUserArrayInput is an input type that accepts GetClusterCertificatesUserArray and GetClusterCertificatesUserArrayOutput values.
// You can construct a concrete instance of `GetClusterCertificatesUserArrayInput` via:
//
//	GetClusterCertificatesUserArray{ GetClusterCertificatesUserArgs{...} }
type GetClusterCertificatesUserArrayInput interface {
	pulumi.Input

	ToGetClusterCertificatesUserArrayOutput() GetClusterCertificatesUserArrayOutput
	ToGetClusterCertificatesUserArrayOutputWithContext(context.Context) GetClusterCertificatesUserArrayOutput
}

type GetClusterCertificatesUserArray []GetClusterCertificatesUserInput

func (GetClusterCertificatesUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificatesUser)(nil)).Elem()
}

func (i GetClusterCertificatesUserArray) ToGetClusterCertificatesUserArrayOutput() GetClusterCertificatesUserArrayOutput {
	return i.ToGetClusterCertificatesUserArrayOutputWithContext(context.Background())
}

func (i GetClusterCertificatesUserArray) ToGetClusterCertificatesUserArrayOutputWithContext(ctx context.Context) GetClusterCertificatesUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterCertificatesUserArrayOutput)
}

type GetClusterCertificatesUserOutput struct{ *pulumi.OutputState }

func (GetClusterCertificatesUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterCertificatesUser)(nil)).Elem()
}

func (o GetClusterCertificatesUserOutput) ToGetClusterCertificatesUserOutput() GetClusterCertificatesUserOutput {
	return o
}

func (o GetClusterCertificatesUserOutput) ToGetClusterCertificatesUserOutputWithContext(ctx context.Context) GetClusterCertificatesUserOutput {
	return o
}

func (o GetClusterCertificatesUserOutput) ClientCertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesUser) string { return v.ClientCertificateData }).(pulumi.StringOutput)
}

func (o GetClusterCertificatesUserOutput) ClientKeyData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesUser) string { return v.ClientKeyData }).(pulumi.StringOutput)
}

func (o GetClusterCertificatesUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterCertificatesUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetClusterCertificatesUserArrayOutput struct{ *pulumi.OutputState }

func (GetClusterCertificatesUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterCertificatesUser)(nil)).Elem()
}

func (o GetClusterCertificatesUserArrayOutput) ToGetClusterCertificatesUserArrayOutput() GetClusterCertificatesUserArrayOutput {
	return o
}

func (o GetClusterCertificatesUserArrayOutput) ToGetClusterCertificatesUserArrayOutputWithContext(ctx context.Context) GetClusterCertificatesUserArrayOutput {
	return o
}

func (o GetClusterCertificatesUserArrayOutput) Index(i pulumi.IntInput) GetClusterCertificatesUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterCertificatesUser {
		return vs[0].([]GetClusterCertificatesUser)[vs[1].(int)]
	}).(GetClusterCertificatesUserOutput)
}

type GetClusterEndpoint struct {
	Type string `pulumi:"type"`
	Url  string `pulumi:"url"`
}

// GetClusterEndpointInput is an input type that accepts GetClusterEndpointArgs and GetClusterEndpointOutput values.
// You can construct a concrete instance of `GetClusterEndpointInput` via:
//
//	GetClusterEndpointArgs{...}
type GetClusterEndpointInput interface {
	pulumi.Input

	ToGetClusterEndpointOutput() GetClusterEndpointOutput
	ToGetClusterEndpointOutputWithContext(context.Context) GetClusterEndpointOutput
}

type GetClusterEndpointArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
	Url  pulumi.StringInput `pulumi:"url"`
}

func (GetClusterEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterEndpoint)(nil)).Elem()
}

func (i GetClusterEndpointArgs) ToGetClusterEndpointOutput() GetClusterEndpointOutput {
	return i.ToGetClusterEndpointOutputWithContext(context.Background())
}

func (i GetClusterEndpointArgs) ToGetClusterEndpointOutputWithContext(ctx context.Context) GetClusterEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterEndpointOutput)
}

// GetClusterEndpointArrayInput is an input type that accepts GetClusterEndpointArray and GetClusterEndpointArrayOutput values.
// You can construct a concrete instance of `GetClusterEndpointArrayInput` via:
//
//	GetClusterEndpointArray{ GetClusterEndpointArgs{...} }
type GetClusterEndpointArrayInput interface {
	pulumi.Input

	ToGetClusterEndpointArrayOutput() GetClusterEndpointArrayOutput
	ToGetClusterEndpointArrayOutputWithContext(context.Context) GetClusterEndpointArrayOutput
}

type GetClusterEndpointArray []GetClusterEndpointInput

func (GetClusterEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterEndpoint)(nil)).Elem()
}

func (i GetClusterEndpointArray) ToGetClusterEndpointArrayOutput() GetClusterEndpointArrayOutput {
	return i.ToGetClusterEndpointArrayOutputWithContext(context.Background())
}

func (i GetClusterEndpointArray) ToGetClusterEndpointArrayOutputWithContext(ctx context.Context) GetClusterEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterEndpointArrayOutput)
}

type GetClusterEndpointOutput struct{ *pulumi.OutputState }

func (GetClusterEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterEndpoint)(nil)).Elem()
}

func (o GetClusterEndpointOutput) ToGetClusterEndpointOutput() GetClusterEndpointOutput {
	return o
}

func (o GetClusterEndpointOutput) ToGetClusterEndpointOutputWithContext(ctx context.Context) GetClusterEndpointOutput {
	return o
}

func (o GetClusterEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetClusterEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type GetClusterEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetClusterEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterEndpoint)(nil)).Elem()
}

func (o GetClusterEndpointArrayOutput) ToGetClusterEndpointArrayOutput() GetClusterEndpointArrayOutput {
	return o
}

func (o GetClusterEndpointArrayOutput) ToGetClusterEndpointArrayOutputWithContext(ctx context.Context) GetClusterEndpointArrayOutput {
	return o
}

func (o GetClusterEndpointArrayOutput) Index(i pulumi.IntInput) GetClusterEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterEndpoint {
		return vs[0].([]GetClusterEndpoint)[vs[1].(int)]
	}).(GetClusterEndpointOutput)
}

type GetClusterMaster struct {
	AvailabilityZone string `pulumi:"availabilityZone"`
}

// GetClusterMasterInput is an input type that accepts GetClusterMasterArgs and GetClusterMasterOutput values.
// You can construct a concrete instance of `GetClusterMasterInput` via:
//
//	GetClusterMasterArgs{...}
type GetClusterMasterInput interface {
	pulumi.Input

	ToGetClusterMasterOutput() GetClusterMasterOutput
	ToGetClusterMasterOutputWithContext(context.Context) GetClusterMasterOutput
}

type GetClusterMasterArgs struct {
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
}

func (GetClusterMasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMaster)(nil)).Elem()
}

func (i GetClusterMasterArgs) ToGetClusterMasterOutput() GetClusterMasterOutput {
	return i.ToGetClusterMasterOutputWithContext(context.Background())
}

func (i GetClusterMasterArgs) ToGetClusterMasterOutputWithContext(ctx context.Context) GetClusterMasterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMasterOutput)
}

// GetClusterMasterArrayInput is an input type that accepts GetClusterMasterArray and GetClusterMasterArrayOutput values.
// You can construct a concrete instance of `GetClusterMasterArrayInput` via:
//
//	GetClusterMasterArray{ GetClusterMasterArgs{...} }
type GetClusterMasterArrayInput interface {
	pulumi.Input

	ToGetClusterMasterArrayOutput() GetClusterMasterArrayOutput
	ToGetClusterMasterArrayOutputWithContext(context.Context) GetClusterMasterArrayOutput
}

type GetClusterMasterArray []GetClusterMasterInput

func (GetClusterMasterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterMaster)(nil)).Elem()
}

func (i GetClusterMasterArray) ToGetClusterMasterArrayOutput() GetClusterMasterArrayOutput {
	return i.ToGetClusterMasterArrayOutputWithContext(context.Background())
}

func (i GetClusterMasterArray) ToGetClusterMasterArrayOutputWithContext(ctx context.Context) GetClusterMasterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClusterMasterArrayOutput)
}

type GetClusterMasterOutput struct{ *pulumi.OutputState }

func (GetClusterMasterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterMaster)(nil)).Elem()
}

func (o GetClusterMasterOutput) ToGetClusterMasterOutput() GetClusterMasterOutput {
	return o
}

func (o GetClusterMasterOutput) ToGetClusterMasterOutputWithContext(ctx context.Context) GetClusterMasterOutput {
	return o
}

func (o GetClusterMasterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterMaster) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

type GetClusterMasterArrayOutput struct{ *pulumi.OutputState }

func (GetClusterMasterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClusterMaster)(nil)).Elem()
}

func (o GetClusterMasterArrayOutput) ToGetClusterMasterArrayOutput() GetClusterMasterArrayOutput {
	return o
}

func (o GetClusterMasterArrayOutput) ToGetClusterMasterArrayOutputWithContext(ctx context.Context) GetClusterMasterArrayOutput {
	return o
}

func (o GetClusterMasterArrayOutput) Index(i pulumi.IntInput) GetClusterMasterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClusterMaster {
		return vs[0].([]GetClusterMaster)[vs[1].(int)]
	}).(GetClusterMasterOutput)
}

type GetClustersCluster struct {
	AuthenticationMode   string                                 `pulumi:"authenticationMode"`
	BillingMode          int                                    `pulumi:"billingMode"`
	CertificateClusters  []GetClustersClusterCertificateCluster `pulumi:"certificateClusters"`
	CertificateUsers     []GetClustersClusterCertificateUser    `pulumi:"certificateUsers"`
	ClusterType          string                                 `pulumi:"clusterType"`
	ClusterVersion       string                                 `pulumi:"clusterVersion"`
	ContainerNetworkCidr string                                 `pulumi:"containerNetworkCidr"`
	ContainerNetworkType string                                 `pulumi:"containerNetworkType"`
	Description          string                                 `pulumi:"description"`
	Endpoints            []GetClustersClusterEndpoint           `pulumi:"endpoints"`
	EniSubnetCidr        string                                 `pulumi:"eniSubnetCidr"`
	EniSubnetId          string                                 `pulumi:"eniSubnetId"`
	EnterpriseProjectId  string                                 `pulumi:"enterpriseProjectId"`
	FlavorId             string                                 `pulumi:"flavorId"`
	Id                   string                                 `pulumi:"id"`
	KubeConfigRaw        string                                 `pulumi:"kubeConfigRaw"`
	Masters              []GetClustersClusterMaster             `pulumi:"masters"`
	Name                 string                                 `pulumi:"name"`
	SecurityGroupId      string                                 `pulumi:"securityGroupId"`
	ServiceNetworkCidr   string                                 `pulumi:"serviceNetworkCidr"`
	Status               string                                 `pulumi:"status"`
	SubnetId             string                                 `pulumi:"subnetId"`
	VpcId                string                                 `pulumi:"vpcId"`
}

// GetClustersClusterInput is an input type that accepts GetClustersClusterArgs and GetClustersClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterInput` via:
//
//	GetClustersClusterArgs{...}
type GetClustersClusterInput interface {
	pulumi.Input

	ToGetClustersClusterOutput() GetClustersClusterOutput
	ToGetClustersClusterOutputWithContext(context.Context) GetClustersClusterOutput
}

type GetClustersClusterArgs struct {
	AuthenticationMode   pulumi.StringInput                             `pulumi:"authenticationMode"`
	BillingMode          pulumi.IntInput                                `pulumi:"billingMode"`
	CertificateClusters  GetClustersClusterCertificateClusterArrayInput `pulumi:"certificateClusters"`
	CertificateUsers     GetClustersClusterCertificateUserArrayInput    `pulumi:"certificateUsers"`
	ClusterType          pulumi.StringInput                             `pulumi:"clusterType"`
	ClusterVersion       pulumi.StringInput                             `pulumi:"clusterVersion"`
	ContainerNetworkCidr pulumi.StringInput                             `pulumi:"containerNetworkCidr"`
	ContainerNetworkType pulumi.StringInput                             `pulumi:"containerNetworkType"`
	Description          pulumi.StringInput                             `pulumi:"description"`
	Endpoints            GetClustersClusterEndpointArrayInput           `pulumi:"endpoints"`
	EniSubnetCidr        pulumi.StringInput                             `pulumi:"eniSubnetCidr"`
	EniSubnetId          pulumi.StringInput                             `pulumi:"eniSubnetId"`
	EnterpriseProjectId  pulumi.StringInput                             `pulumi:"enterpriseProjectId"`
	FlavorId             pulumi.StringInput                             `pulumi:"flavorId"`
	Id                   pulumi.StringInput                             `pulumi:"id"`
	KubeConfigRaw        pulumi.StringInput                             `pulumi:"kubeConfigRaw"`
	Masters              GetClustersClusterMasterArrayInput             `pulumi:"masters"`
	Name                 pulumi.StringInput                             `pulumi:"name"`
	SecurityGroupId      pulumi.StringInput                             `pulumi:"securityGroupId"`
	ServiceNetworkCidr   pulumi.StringInput                             `pulumi:"serviceNetworkCidr"`
	Status               pulumi.StringInput                             `pulumi:"status"`
	SubnetId             pulumi.StringInput                             `pulumi:"subnetId"`
	VpcId                pulumi.StringInput                             `pulumi:"vpcId"`
}

func (GetClustersClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return i.ToGetClustersClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterArgs) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterOutput)
}

// GetClustersClusterArrayInput is an input type that accepts GetClustersClusterArray and GetClustersClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterArrayInput` via:
//
//	GetClustersClusterArray{ GetClustersClusterArgs{...} }
type GetClustersClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput
	ToGetClustersClusterArrayOutputWithContext(context.Context) GetClustersClusterArrayOutput
}

type GetClustersClusterArray []GetClustersClusterInput

func (GetClustersClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return i.ToGetClustersClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterArray) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterArrayOutput)
}

type GetClustersClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutput() GetClustersClusterOutput {
	return o
}

func (o GetClustersClusterOutput) ToGetClustersClusterOutputWithContext(ctx context.Context) GetClustersClusterOutput {
	return o
}

func (o GetClustersClusterOutput) AuthenticationMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.AuthenticationMode }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) BillingMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetClustersCluster) int { return v.BillingMode }).(pulumi.IntOutput)
}

func (o GetClustersClusterOutput) CertificateClusters() GetClustersClusterCertificateClusterArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterCertificateCluster { return v.CertificateClusters }).(GetClustersClusterCertificateClusterArrayOutput)
}

func (o GetClustersClusterOutput) CertificateUsers() GetClustersClusterCertificateUserArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterCertificateUser { return v.CertificateUsers }).(GetClustersClusterCertificateUserArrayOutput)
}

func (o GetClustersClusterOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ClusterType }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) ClusterVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ClusterVersion }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) ContainerNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ContainerNetworkCidr }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) ContainerNetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ContainerNetworkType }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) Endpoints() GetClustersClusterEndpointArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterEndpoint { return v.Endpoints }).(GetClustersClusterEndpointArrayOutput)
}

func (o GetClustersClusterOutput) EniSubnetCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.EniSubnetCidr }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) EniSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.EniSubnetId }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.FlavorId }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) KubeConfigRaw() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.KubeConfigRaw }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) Masters() GetClustersClusterMasterArrayOutput {
	return o.ApplyT(func(v GetClustersCluster) []GetClustersClusterMaster { return v.Masters }).(GetClustersClusterMasterArrayOutput)
}

func (o GetClustersClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) ServiceNetworkCidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.ServiceNetworkCidr }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o GetClustersClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersCluster) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetClustersClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersCluster)(nil)).Elem()
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutput() GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) ToGetClustersClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterArrayOutput {
	return o
}

func (o GetClustersClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersCluster {
		return vs[0].([]GetClustersCluster)[vs[1].(int)]
	}).(GetClustersClusterOutput)
}

type GetClustersClusterCertificateCluster struct {
	CertificateAuthorityData string `pulumi:"certificateAuthorityData"`
	Name                     string `pulumi:"name"`
	Server                   string `pulumi:"server"`
}

// GetClustersClusterCertificateClusterInput is an input type that accepts GetClustersClusterCertificateClusterArgs and GetClustersClusterCertificateClusterOutput values.
// You can construct a concrete instance of `GetClustersClusterCertificateClusterInput` via:
//
//	GetClustersClusterCertificateClusterArgs{...}
type GetClustersClusterCertificateClusterInput interface {
	pulumi.Input

	ToGetClustersClusterCertificateClusterOutput() GetClustersClusterCertificateClusterOutput
	ToGetClustersClusterCertificateClusterOutputWithContext(context.Context) GetClustersClusterCertificateClusterOutput
}

type GetClustersClusterCertificateClusterArgs struct {
	CertificateAuthorityData pulumi.StringInput `pulumi:"certificateAuthorityData"`
	Name                     pulumi.StringInput `pulumi:"name"`
	Server                   pulumi.StringInput `pulumi:"server"`
}

func (GetClustersClusterCertificateClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterCertificateCluster)(nil)).Elem()
}

func (i GetClustersClusterCertificateClusterArgs) ToGetClustersClusterCertificateClusterOutput() GetClustersClusterCertificateClusterOutput {
	return i.ToGetClustersClusterCertificateClusterOutputWithContext(context.Background())
}

func (i GetClustersClusterCertificateClusterArgs) ToGetClustersClusterCertificateClusterOutputWithContext(ctx context.Context) GetClustersClusterCertificateClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterCertificateClusterOutput)
}

// GetClustersClusterCertificateClusterArrayInput is an input type that accepts GetClustersClusterCertificateClusterArray and GetClustersClusterCertificateClusterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterCertificateClusterArrayInput` via:
//
//	GetClustersClusterCertificateClusterArray{ GetClustersClusterCertificateClusterArgs{...} }
type GetClustersClusterCertificateClusterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterCertificateClusterArrayOutput() GetClustersClusterCertificateClusterArrayOutput
	ToGetClustersClusterCertificateClusterArrayOutputWithContext(context.Context) GetClustersClusterCertificateClusterArrayOutput
}

type GetClustersClusterCertificateClusterArray []GetClustersClusterCertificateClusterInput

func (GetClustersClusterCertificateClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterCertificateCluster)(nil)).Elem()
}

func (i GetClustersClusterCertificateClusterArray) ToGetClustersClusterCertificateClusterArrayOutput() GetClustersClusterCertificateClusterArrayOutput {
	return i.ToGetClustersClusterCertificateClusterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterCertificateClusterArray) ToGetClustersClusterCertificateClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterCertificateClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterCertificateClusterArrayOutput)
}

type GetClustersClusterCertificateClusterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterCertificateClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterCertificateCluster)(nil)).Elem()
}

func (o GetClustersClusterCertificateClusterOutput) ToGetClustersClusterCertificateClusterOutput() GetClustersClusterCertificateClusterOutput {
	return o
}

func (o GetClustersClusterCertificateClusterOutput) ToGetClustersClusterCertificateClusterOutputWithContext(ctx context.Context) GetClustersClusterCertificateClusterOutput {
	return o
}

func (o GetClustersClusterCertificateClusterOutput) CertificateAuthorityData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateCluster) string { return v.CertificateAuthorityData }).(pulumi.StringOutput)
}

func (o GetClustersClusterCertificateClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateCluster) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetClustersClusterCertificateClusterOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateCluster) string { return v.Server }).(pulumi.StringOutput)
}

type GetClustersClusterCertificateClusterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterCertificateClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterCertificateCluster)(nil)).Elem()
}

func (o GetClustersClusterCertificateClusterArrayOutput) ToGetClustersClusterCertificateClusterArrayOutput() GetClustersClusterCertificateClusterArrayOutput {
	return o
}

func (o GetClustersClusterCertificateClusterArrayOutput) ToGetClustersClusterCertificateClusterArrayOutputWithContext(ctx context.Context) GetClustersClusterCertificateClusterArrayOutput {
	return o
}

func (o GetClustersClusterCertificateClusterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterCertificateClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterCertificateCluster {
		return vs[0].([]GetClustersClusterCertificateCluster)[vs[1].(int)]
	}).(GetClustersClusterCertificateClusterOutput)
}

type GetClustersClusterCertificateUser struct {
	ClientCertificateData string `pulumi:"clientCertificateData"`
	ClientKeyData         string `pulumi:"clientKeyData"`
	Name                  string `pulumi:"name"`
}

// GetClustersClusterCertificateUserInput is an input type that accepts GetClustersClusterCertificateUserArgs and GetClustersClusterCertificateUserOutput values.
// You can construct a concrete instance of `GetClustersClusterCertificateUserInput` via:
//
//	GetClustersClusterCertificateUserArgs{...}
type GetClustersClusterCertificateUserInput interface {
	pulumi.Input

	ToGetClustersClusterCertificateUserOutput() GetClustersClusterCertificateUserOutput
	ToGetClustersClusterCertificateUserOutputWithContext(context.Context) GetClustersClusterCertificateUserOutput
}

type GetClustersClusterCertificateUserArgs struct {
	ClientCertificateData pulumi.StringInput `pulumi:"clientCertificateData"`
	ClientKeyData         pulumi.StringInput `pulumi:"clientKeyData"`
	Name                  pulumi.StringInput `pulumi:"name"`
}

func (GetClustersClusterCertificateUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterCertificateUser)(nil)).Elem()
}

func (i GetClustersClusterCertificateUserArgs) ToGetClustersClusterCertificateUserOutput() GetClustersClusterCertificateUserOutput {
	return i.ToGetClustersClusterCertificateUserOutputWithContext(context.Background())
}

func (i GetClustersClusterCertificateUserArgs) ToGetClustersClusterCertificateUserOutputWithContext(ctx context.Context) GetClustersClusterCertificateUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterCertificateUserOutput)
}

// GetClustersClusterCertificateUserArrayInput is an input type that accepts GetClustersClusterCertificateUserArray and GetClustersClusterCertificateUserArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterCertificateUserArrayInput` via:
//
//	GetClustersClusterCertificateUserArray{ GetClustersClusterCertificateUserArgs{...} }
type GetClustersClusterCertificateUserArrayInput interface {
	pulumi.Input

	ToGetClustersClusterCertificateUserArrayOutput() GetClustersClusterCertificateUserArrayOutput
	ToGetClustersClusterCertificateUserArrayOutputWithContext(context.Context) GetClustersClusterCertificateUserArrayOutput
}

type GetClustersClusterCertificateUserArray []GetClustersClusterCertificateUserInput

func (GetClustersClusterCertificateUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterCertificateUser)(nil)).Elem()
}

func (i GetClustersClusterCertificateUserArray) ToGetClustersClusterCertificateUserArrayOutput() GetClustersClusterCertificateUserArrayOutput {
	return i.ToGetClustersClusterCertificateUserArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterCertificateUserArray) ToGetClustersClusterCertificateUserArrayOutputWithContext(ctx context.Context) GetClustersClusterCertificateUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterCertificateUserArrayOutput)
}

type GetClustersClusterCertificateUserOutput struct{ *pulumi.OutputState }

func (GetClustersClusterCertificateUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterCertificateUser)(nil)).Elem()
}

func (o GetClustersClusterCertificateUserOutput) ToGetClustersClusterCertificateUserOutput() GetClustersClusterCertificateUserOutput {
	return o
}

func (o GetClustersClusterCertificateUserOutput) ToGetClustersClusterCertificateUserOutputWithContext(ctx context.Context) GetClustersClusterCertificateUserOutput {
	return o
}

func (o GetClustersClusterCertificateUserOutput) ClientCertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateUser) string { return v.ClientCertificateData }).(pulumi.StringOutput)
}

func (o GetClustersClusterCertificateUserOutput) ClientKeyData() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateUser) string { return v.ClientKeyData }).(pulumi.StringOutput)
}

func (o GetClustersClusterCertificateUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterCertificateUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetClustersClusterCertificateUserArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterCertificateUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterCertificateUser)(nil)).Elem()
}

func (o GetClustersClusterCertificateUserArrayOutput) ToGetClustersClusterCertificateUserArrayOutput() GetClustersClusterCertificateUserArrayOutput {
	return o
}

func (o GetClustersClusterCertificateUserArrayOutput) ToGetClustersClusterCertificateUserArrayOutputWithContext(ctx context.Context) GetClustersClusterCertificateUserArrayOutput {
	return o
}

func (o GetClustersClusterCertificateUserArrayOutput) Index(i pulumi.IntInput) GetClustersClusterCertificateUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterCertificateUser {
		return vs[0].([]GetClustersClusterCertificateUser)[vs[1].(int)]
	}).(GetClustersClusterCertificateUserOutput)
}

type GetClustersClusterEndpoint struct {
	Type string `pulumi:"type"`
	Url  string `pulumi:"url"`
}

// GetClustersClusterEndpointInput is an input type that accepts GetClustersClusterEndpointArgs and GetClustersClusterEndpointOutput values.
// You can construct a concrete instance of `GetClustersClusterEndpointInput` via:
//
//	GetClustersClusterEndpointArgs{...}
type GetClustersClusterEndpointInput interface {
	pulumi.Input

	ToGetClustersClusterEndpointOutput() GetClustersClusterEndpointOutput
	ToGetClustersClusterEndpointOutputWithContext(context.Context) GetClustersClusterEndpointOutput
}

type GetClustersClusterEndpointArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
	Url  pulumi.StringInput `pulumi:"url"`
}

func (GetClustersClusterEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterEndpoint)(nil)).Elem()
}

func (i GetClustersClusterEndpointArgs) ToGetClustersClusterEndpointOutput() GetClustersClusterEndpointOutput {
	return i.ToGetClustersClusterEndpointOutputWithContext(context.Background())
}

func (i GetClustersClusterEndpointArgs) ToGetClustersClusterEndpointOutputWithContext(ctx context.Context) GetClustersClusterEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterEndpointOutput)
}

// GetClustersClusterEndpointArrayInput is an input type that accepts GetClustersClusterEndpointArray and GetClustersClusterEndpointArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterEndpointArrayInput` via:
//
//	GetClustersClusterEndpointArray{ GetClustersClusterEndpointArgs{...} }
type GetClustersClusterEndpointArrayInput interface {
	pulumi.Input

	ToGetClustersClusterEndpointArrayOutput() GetClustersClusterEndpointArrayOutput
	ToGetClustersClusterEndpointArrayOutputWithContext(context.Context) GetClustersClusterEndpointArrayOutput
}

type GetClustersClusterEndpointArray []GetClustersClusterEndpointInput

func (GetClustersClusterEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterEndpoint)(nil)).Elem()
}

func (i GetClustersClusterEndpointArray) ToGetClustersClusterEndpointArrayOutput() GetClustersClusterEndpointArrayOutput {
	return i.ToGetClustersClusterEndpointArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterEndpointArray) ToGetClustersClusterEndpointArrayOutputWithContext(ctx context.Context) GetClustersClusterEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterEndpointArrayOutput)
}

type GetClustersClusterEndpointOutput struct{ *pulumi.OutputState }

func (GetClustersClusterEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterEndpoint)(nil)).Elem()
}

func (o GetClustersClusterEndpointOutput) ToGetClustersClusterEndpointOutput() GetClustersClusterEndpointOutput {
	return o
}

func (o GetClustersClusterEndpointOutput) ToGetClustersClusterEndpointOutputWithContext(ctx context.Context) GetClustersClusterEndpointOutput {
	return o
}

func (o GetClustersClusterEndpointOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterEndpoint) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetClustersClusterEndpointOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterEndpoint) string { return v.Url }).(pulumi.StringOutput)
}

type GetClustersClusterEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterEndpoint)(nil)).Elem()
}

func (o GetClustersClusterEndpointArrayOutput) ToGetClustersClusterEndpointArrayOutput() GetClustersClusterEndpointArrayOutput {
	return o
}

func (o GetClustersClusterEndpointArrayOutput) ToGetClustersClusterEndpointArrayOutputWithContext(ctx context.Context) GetClustersClusterEndpointArrayOutput {
	return o
}

func (o GetClustersClusterEndpointArrayOutput) Index(i pulumi.IntInput) GetClustersClusterEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterEndpoint {
		return vs[0].([]GetClustersClusterEndpoint)[vs[1].(int)]
	}).(GetClustersClusterEndpointOutput)
}

type GetClustersClusterMaster struct {
	AvailabilityZone string `pulumi:"availabilityZone"`
}

// GetClustersClusterMasterInput is an input type that accepts GetClustersClusterMasterArgs and GetClustersClusterMasterOutput values.
// You can construct a concrete instance of `GetClustersClusterMasterInput` via:
//
//	GetClustersClusterMasterArgs{...}
type GetClustersClusterMasterInput interface {
	pulumi.Input

	ToGetClustersClusterMasterOutput() GetClustersClusterMasterOutput
	ToGetClustersClusterMasterOutputWithContext(context.Context) GetClustersClusterMasterOutput
}

type GetClustersClusterMasterArgs struct {
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
}

func (GetClustersClusterMasterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterMaster)(nil)).Elem()
}

func (i GetClustersClusterMasterArgs) ToGetClustersClusterMasterOutput() GetClustersClusterMasterOutput {
	return i.ToGetClustersClusterMasterOutputWithContext(context.Background())
}

func (i GetClustersClusterMasterArgs) ToGetClustersClusterMasterOutputWithContext(ctx context.Context) GetClustersClusterMasterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterMasterOutput)
}

// GetClustersClusterMasterArrayInput is an input type that accepts GetClustersClusterMasterArray and GetClustersClusterMasterArrayOutput values.
// You can construct a concrete instance of `GetClustersClusterMasterArrayInput` via:
//
//	GetClustersClusterMasterArray{ GetClustersClusterMasterArgs{...} }
type GetClustersClusterMasterArrayInput interface {
	pulumi.Input

	ToGetClustersClusterMasterArrayOutput() GetClustersClusterMasterArrayOutput
	ToGetClustersClusterMasterArrayOutputWithContext(context.Context) GetClustersClusterMasterArrayOutput
}

type GetClustersClusterMasterArray []GetClustersClusterMasterInput

func (GetClustersClusterMasterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterMaster)(nil)).Elem()
}

func (i GetClustersClusterMasterArray) ToGetClustersClusterMasterArrayOutput() GetClustersClusterMasterArrayOutput {
	return i.ToGetClustersClusterMasterArrayOutputWithContext(context.Background())
}

func (i GetClustersClusterMasterArray) ToGetClustersClusterMasterArrayOutputWithContext(ctx context.Context) GetClustersClusterMasterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClustersClusterMasterArrayOutput)
}

type GetClustersClusterMasterOutput struct{ *pulumi.OutputState }

func (GetClustersClusterMasterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClustersClusterMaster)(nil)).Elem()
}

func (o GetClustersClusterMasterOutput) ToGetClustersClusterMasterOutput() GetClustersClusterMasterOutput {
	return o
}

func (o GetClustersClusterMasterOutput) ToGetClustersClusterMasterOutputWithContext(ctx context.Context) GetClustersClusterMasterOutput {
	return o
}

func (o GetClustersClusterMasterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetClustersClusterMaster) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

type GetClustersClusterMasterArrayOutput struct{ *pulumi.OutputState }

func (GetClustersClusterMasterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClustersClusterMaster)(nil)).Elem()
}

func (o GetClustersClusterMasterArrayOutput) ToGetClustersClusterMasterArrayOutput() GetClustersClusterMasterArrayOutput {
	return o
}

func (o GetClustersClusterMasterArrayOutput) ToGetClustersClusterMasterArrayOutputWithContext(ctx context.Context) GetClustersClusterMasterArrayOutput {
	return o
}

func (o GetClustersClusterMasterArrayOutput) Index(i pulumi.IntInput) GetClustersClusterMasterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClustersClusterMaster {
		return vs[0].([]GetClustersClusterMaster)[vs[1].(int)]
	}).(GetClustersClusterMasterOutput)
}

type GetNodeDataVolume struct {
	ExtendParams map[string]string `pulumi:"extendParams"`
	Size         int               `pulumi:"size"`
	Volumetype   string            `pulumi:"volumetype"`
}

// GetNodeDataVolumeInput is an input type that accepts GetNodeDataVolumeArgs and GetNodeDataVolumeOutput values.
// You can construct a concrete instance of `GetNodeDataVolumeInput` via:
//
//	GetNodeDataVolumeArgs{...}
type GetNodeDataVolumeInput interface {
	pulumi.Input

	ToGetNodeDataVolumeOutput() GetNodeDataVolumeOutput
	ToGetNodeDataVolumeOutputWithContext(context.Context) GetNodeDataVolumeOutput
}

type GetNodeDataVolumeArgs struct {
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	Size         pulumi.IntInput       `pulumi:"size"`
	Volumetype   pulumi.StringInput    `pulumi:"volumetype"`
}

func (GetNodeDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeDataVolume)(nil)).Elem()
}

func (i GetNodeDataVolumeArgs) ToGetNodeDataVolumeOutput() GetNodeDataVolumeOutput {
	return i.ToGetNodeDataVolumeOutputWithContext(context.Background())
}

func (i GetNodeDataVolumeArgs) ToGetNodeDataVolumeOutputWithContext(ctx context.Context) GetNodeDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeDataVolumeOutput)
}

// GetNodeDataVolumeArrayInput is an input type that accepts GetNodeDataVolumeArray and GetNodeDataVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodeDataVolumeArrayInput` via:
//
//	GetNodeDataVolumeArray{ GetNodeDataVolumeArgs{...} }
type GetNodeDataVolumeArrayInput interface {
	pulumi.Input

	ToGetNodeDataVolumeArrayOutput() GetNodeDataVolumeArrayOutput
	ToGetNodeDataVolumeArrayOutputWithContext(context.Context) GetNodeDataVolumeArrayOutput
}

type GetNodeDataVolumeArray []GetNodeDataVolumeInput

func (GetNodeDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeDataVolume)(nil)).Elem()
}

func (i GetNodeDataVolumeArray) ToGetNodeDataVolumeArrayOutput() GetNodeDataVolumeArrayOutput {
	return i.ToGetNodeDataVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodeDataVolumeArray) ToGetNodeDataVolumeArrayOutputWithContext(ctx context.Context) GetNodeDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeDataVolumeArrayOutput)
}

type GetNodeDataVolumeOutput struct{ *pulumi.OutputState }

func (GetNodeDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeDataVolume)(nil)).Elem()
}

func (o GetNodeDataVolumeOutput) ToGetNodeDataVolumeOutput() GetNodeDataVolumeOutput {
	return o
}

func (o GetNodeDataVolumeOutput) ToGetNodeDataVolumeOutputWithContext(ctx context.Context) GetNodeDataVolumeOutput {
	return o
}

func (o GetNodeDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodeDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o GetNodeDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetNodeDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodeDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodeDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeDataVolume)(nil)).Elem()
}

func (o GetNodeDataVolumeArrayOutput) ToGetNodeDataVolumeArrayOutput() GetNodeDataVolumeArrayOutput {
	return o
}

func (o GetNodeDataVolumeArrayOutput) ToGetNodeDataVolumeArrayOutputWithContext(ctx context.Context) GetNodeDataVolumeArrayOutput {
	return o
}

func (o GetNodeDataVolumeArrayOutput) Index(i pulumi.IntInput) GetNodeDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeDataVolume {
		return vs[0].([]GetNodeDataVolume)[vs[1].(int)]
	}).(GetNodeDataVolumeOutput)
}

type GetNodeHostnameConfig struct {
	Type string `pulumi:"type"`
}

// GetNodeHostnameConfigInput is an input type that accepts GetNodeHostnameConfigArgs and GetNodeHostnameConfigOutput values.
// You can construct a concrete instance of `GetNodeHostnameConfigInput` via:
//
//	GetNodeHostnameConfigArgs{...}
type GetNodeHostnameConfigInput interface {
	pulumi.Input

	ToGetNodeHostnameConfigOutput() GetNodeHostnameConfigOutput
	ToGetNodeHostnameConfigOutputWithContext(context.Context) GetNodeHostnameConfigOutput
}

type GetNodeHostnameConfigArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetNodeHostnameConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeHostnameConfig)(nil)).Elem()
}

func (i GetNodeHostnameConfigArgs) ToGetNodeHostnameConfigOutput() GetNodeHostnameConfigOutput {
	return i.ToGetNodeHostnameConfigOutputWithContext(context.Background())
}

func (i GetNodeHostnameConfigArgs) ToGetNodeHostnameConfigOutputWithContext(ctx context.Context) GetNodeHostnameConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeHostnameConfigOutput)
}

// GetNodeHostnameConfigArrayInput is an input type that accepts GetNodeHostnameConfigArray and GetNodeHostnameConfigArrayOutput values.
// You can construct a concrete instance of `GetNodeHostnameConfigArrayInput` via:
//
//	GetNodeHostnameConfigArray{ GetNodeHostnameConfigArgs{...} }
type GetNodeHostnameConfigArrayInput interface {
	pulumi.Input

	ToGetNodeHostnameConfigArrayOutput() GetNodeHostnameConfigArrayOutput
	ToGetNodeHostnameConfigArrayOutputWithContext(context.Context) GetNodeHostnameConfigArrayOutput
}

type GetNodeHostnameConfigArray []GetNodeHostnameConfigInput

func (GetNodeHostnameConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeHostnameConfig)(nil)).Elem()
}

func (i GetNodeHostnameConfigArray) ToGetNodeHostnameConfigArrayOutput() GetNodeHostnameConfigArrayOutput {
	return i.ToGetNodeHostnameConfigArrayOutputWithContext(context.Background())
}

func (i GetNodeHostnameConfigArray) ToGetNodeHostnameConfigArrayOutputWithContext(ctx context.Context) GetNodeHostnameConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeHostnameConfigArrayOutput)
}

type GetNodeHostnameConfigOutput struct{ *pulumi.OutputState }

func (GetNodeHostnameConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeHostnameConfig)(nil)).Elem()
}

func (o GetNodeHostnameConfigOutput) ToGetNodeHostnameConfigOutput() GetNodeHostnameConfigOutput {
	return o
}

func (o GetNodeHostnameConfigOutput) ToGetNodeHostnameConfigOutputWithContext(ctx context.Context) GetNodeHostnameConfigOutput {
	return o
}

func (o GetNodeHostnameConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeHostnameConfig) string { return v.Type }).(pulumi.StringOutput)
}

type GetNodeHostnameConfigArrayOutput struct{ *pulumi.OutputState }

func (GetNodeHostnameConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeHostnameConfig)(nil)).Elem()
}

func (o GetNodeHostnameConfigArrayOutput) ToGetNodeHostnameConfigArrayOutput() GetNodeHostnameConfigArrayOutput {
	return o
}

func (o GetNodeHostnameConfigArrayOutput) ToGetNodeHostnameConfigArrayOutputWithContext(ctx context.Context) GetNodeHostnameConfigArrayOutput {
	return o
}

func (o GetNodeHostnameConfigArrayOutput) Index(i pulumi.IntInput) GetNodeHostnameConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeHostnameConfig {
		return vs[0].([]GetNodeHostnameConfig)[vs[1].(int)]
	}).(GetNodeHostnameConfigOutput)
}

type GetNodePoolDataVolume struct {
	ExtendParams map[string]string `pulumi:"extendParams"`
	Size         int               `pulumi:"size"`
	Volumetype   string            `pulumi:"volumetype"`
}

// GetNodePoolDataVolumeInput is an input type that accepts GetNodePoolDataVolumeArgs and GetNodePoolDataVolumeOutput values.
// You can construct a concrete instance of `GetNodePoolDataVolumeInput` via:
//
//	GetNodePoolDataVolumeArgs{...}
type GetNodePoolDataVolumeInput interface {
	pulumi.Input

	ToGetNodePoolDataVolumeOutput() GetNodePoolDataVolumeOutput
	ToGetNodePoolDataVolumeOutputWithContext(context.Context) GetNodePoolDataVolumeOutput
}

type GetNodePoolDataVolumeArgs struct {
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	Size         pulumi.IntInput       `pulumi:"size"`
	Volumetype   pulumi.StringInput    `pulumi:"volumetype"`
}

func (GetNodePoolDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolDataVolume)(nil)).Elem()
}

func (i GetNodePoolDataVolumeArgs) ToGetNodePoolDataVolumeOutput() GetNodePoolDataVolumeOutput {
	return i.ToGetNodePoolDataVolumeOutputWithContext(context.Background())
}

func (i GetNodePoolDataVolumeArgs) ToGetNodePoolDataVolumeOutputWithContext(ctx context.Context) GetNodePoolDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolDataVolumeOutput)
}

// GetNodePoolDataVolumeArrayInput is an input type that accepts GetNodePoolDataVolumeArray and GetNodePoolDataVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodePoolDataVolumeArrayInput` via:
//
//	GetNodePoolDataVolumeArray{ GetNodePoolDataVolumeArgs{...} }
type GetNodePoolDataVolumeArrayInput interface {
	pulumi.Input

	ToGetNodePoolDataVolumeArrayOutput() GetNodePoolDataVolumeArrayOutput
	ToGetNodePoolDataVolumeArrayOutputWithContext(context.Context) GetNodePoolDataVolumeArrayOutput
}

type GetNodePoolDataVolumeArray []GetNodePoolDataVolumeInput

func (GetNodePoolDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolDataVolume)(nil)).Elem()
}

func (i GetNodePoolDataVolumeArray) ToGetNodePoolDataVolumeArrayOutput() GetNodePoolDataVolumeArrayOutput {
	return i.ToGetNodePoolDataVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodePoolDataVolumeArray) ToGetNodePoolDataVolumeArrayOutputWithContext(ctx context.Context) GetNodePoolDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolDataVolumeArrayOutput)
}

type GetNodePoolDataVolumeOutput struct{ *pulumi.OutputState }

func (GetNodePoolDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolDataVolume)(nil)).Elem()
}

func (o GetNodePoolDataVolumeOutput) ToGetNodePoolDataVolumeOutput() GetNodePoolDataVolumeOutput {
	return o
}

func (o GetNodePoolDataVolumeOutput) ToGetNodePoolDataVolumeOutputWithContext(ctx context.Context) GetNodePoolDataVolumeOutput {
	return o
}

func (o GetNodePoolDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodePoolDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o GetNodePoolDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetNodePoolDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodePoolDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolDataVolume)(nil)).Elem()
}

func (o GetNodePoolDataVolumeArrayOutput) ToGetNodePoolDataVolumeArrayOutput() GetNodePoolDataVolumeArrayOutput {
	return o
}

func (o GetNodePoolDataVolumeArrayOutput) ToGetNodePoolDataVolumeArrayOutputWithContext(ctx context.Context) GetNodePoolDataVolumeArrayOutput {
	return o
}

func (o GetNodePoolDataVolumeArrayOutput) Index(i pulumi.IntInput) GetNodePoolDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolDataVolume {
		return vs[0].([]GetNodePoolDataVolume)[vs[1].(int)]
	}).(GetNodePoolDataVolumeOutput)
}

type GetNodePoolHostnameConfig struct {
	Type string `pulumi:"type"`
}

// GetNodePoolHostnameConfigInput is an input type that accepts GetNodePoolHostnameConfigArgs and GetNodePoolHostnameConfigOutput values.
// You can construct a concrete instance of `GetNodePoolHostnameConfigInput` via:
//
//	GetNodePoolHostnameConfigArgs{...}
type GetNodePoolHostnameConfigInput interface {
	pulumi.Input

	ToGetNodePoolHostnameConfigOutput() GetNodePoolHostnameConfigOutput
	ToGetNodePoolHostnameConfigOutputWithContext(context.Context) GetNodePoolHostnameConfigOutput
}

type GetNodePoolHostnameConfigArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetNodePoolHostnameConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolHostnameConfig)(nil)).Elem()
}

func (i GetNodePoolHostnameConfigArgs) ToGetNodePoolHostnameConfigOutput() GetNodePoolHostnameConfigOutput {
	return i.ToGetNodePoolHostnameConfigOutputWithContext(context.Background())
}

func (i GetNodePoolHostnameConfigArgs) ToGetNodePoolHostnameConfigOutputWithContext(ctx context.Context) GetNodePoolHostnameConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolHostnameConfigOutput)
}

// GetNodePoolHostnameConfigArrayInput is an input type that accepts GetNodePoolHostnameConfigArray and GetNodePoolHostnameConfigArrayOutput values.
// You can construct a concrete instance of `GetNodePoolHostnameConfigArrayInput` via:
//
//	GetNodePoolHostnameConfigArray{ GetNodePoolHostnameConfigArgs{...} }
type GetNodePoolHostnameConfigArrayInput interface {
	pulumi.Input

	ToGetNodePoolHostnameConfigArrayOutput() GetNodePoolHostnameConfigArrayOutput
	ToGetNodePoolHostnameConfigArrayOutputWithContext(context.Context) GetNodePoolHostnameConfigArrayOutput
}

type GetNodePoolHostnameConfigArray []GetNodePoolHostnameConfigInput

func (GetNodePoolHostnameConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolHostnameConfig)(nil)).Elem()
}

func (i GetNodePoolHostnameConfigArray) ToGetNodePoolHostnameConfigArrayOutput() GetNodePoolHostnameConfigArrayOutput {
	return i.ToGetNodePoolHostnameConfigArrayOutputWithContext(context.Background())
}

func (i GetNodePoolHostnameConfigArray) ToGetNodePoolHostnameConfigArrayOutputWithContext(ctx context.Context) GetNodePoolHostnameConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolHostnameConfigArrayOutput)
}

type GetNodePoolHostnameConfigOutput struct{ *pulumi.OutputState }

func (GetNodePoolHostnameConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolHostnameConfig)(nil)).Elem()
}

func (o GetNodePoolHostnameConfigOutput) ToGetNodePoolHostnameConfigOutput() GetNodePoolHostnameConfigOutput {
	return o
}

func (o GetNodePoolHostnameConfigOutput) ToGetNodePoolHostnameConfigOutputWithContext(ctx context.Context) GetNodePoolHostnameConfigOutput {
	return o
}

func (o GetNodePoolHostnameConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolHostnameConfig) string { return v.Type }).(pulumi.StringOutput)
}

type GetNodePoolHostnameConfigArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolHostnameConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolHostnameConfig)(nil)).Elem()
}

func (o GetNodePoolHostnameConfigArrayOutput) ToGetNodePoolHostnameConfigArrayOutput() GetNodePoolHostnameConfigArrayOutput {
	return o
}

func (o GetNodePoolHostnameConfigArrayOutput) ToGetNodePoolHostnameConfigArrayOutputWithContext(ctx context.Context) GetNodePoolHostnameConfigArrayOutput {
	return o
}

func (o GetNodePoolHostnameConfigArrayOutput) Index(i pulumi.IntInput) GetNodePoolHostnameConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolHostnameConfig {
		return vs[0].([]GetNodePoolHostnameConfig)[vs[1].(int)]
	}).(GetNodePoolHostnameConfigOutput)
}

type GetNodePoolRootVolume struct {
	ExtendParams map[string]string `pulumi:"extendParams"`
	Size         int               `pulumi:"size"`
	Volumetype   string            `pulumi:"volumetype"`
}

// GetNodePoolRootVolumeInput is an input type that accepts GetNodePoolRootVolumeArgs and GetNodePoolRootVolumeOutput values.
// You can construct a concrete instance of `GetNodePoolRootVolumeInput` via:
//
//	GetNodePoolRootVolumeArgs{...}
type GetNodePoolRootVolumeInput interface {
	pulumi.Input

	ToGetNodePoolRootVolumeOutput() GetNodePoolRootVolumeOutput
	ToGetNodePoolRootVolumeOutputWithContext(context.Context) GetNodePoolRootVolumeOutput
}

type GetNodePoolRootVolumeArgs struct {
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	Size         pulumi.IntInput       `pulumi:"size"`
	Volumetype   pulumi.StringInput    `pulumi:"volumetype"`
}

func (GetNodePoolRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolRootVolume)(nil)).Elem()
}

func (i GetNodePoolRootVolumeArgs) ToGetNodePoolRootVolumeOutput() GetNodePoolRootVolumeOutput {
	return i.ToGetNodePoolRootVolumeOutputWithContext(context.Background())
}

func (i GetNodePoolRootVolumeArgs) ToGetNodePoolRootVolumeOutputWithContext(ctx context.Context) GetNodePoolRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolRootVolumeOutput)
}

// GetNodePoolRootVolumeArrayInput is an input type that accepts GetNodePoolRootVolumeArray and GetNodePoolRootVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodePoolRootVolumeArrayInput` via:
//
//	GetNodePoolRootVolumeArray{ GetNodePoolRootVolumeArgs{...} }
type GetNodePoolRootVolumeArrayInput interface {
	pulumi.Input

	ToGetNodePoolRootVolumeArrayOutput() GetNodePoolRootVolumeArrayOutput
	ToGetNodePoolRootVolumeArrayOutputWithContext(context.Context) GetNodePoolRootVolumeArrayOutput
}

type GetNodePoolRootVolumeArray []GetNodePoolRootVolumeInput

func (GetNodePoolRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolRootVolume)(nil)).Elem()
}

func (i GetNodePoolRootVolumeArray) ToGetNodePoolRootVolumeArrayOutput() GetNodePoolRootVolumeArrayOutput {
	return i.ToGetNodePoolRootVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodePoolRootVolumeArray) ToGetNodePoolRootVolumeArrayOutputWithContext(ctx context.Context) GetNodePoolRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodePoolRootVolumeArrayOutput)
}

type GetNodePoolRootVolumeOutput struct{ *pulumi.OutputState }

func (GetNodePoolRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodePoolRootVolume)(nil)).Elem()
}

func (o GetNodePoolRootVolumeOutput) ToGetNodePoolRootVolumeOutput() GetNodePoolRootVolumeOutput {
	return o
}

func (o GetNodePoolRootVolumeOutput) ToGetNodePoolRootVolumeOutputWithContext(ctx context.Context) GetNodePoolRootVolumeOutput {
	return o
}

func (o GetNodePoolRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodePoolRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o GetNodePoolRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodePoolRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetNodePoolRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodePoolRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodePoolRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodePoolRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodePoolRootVolume)(nil)).Elem()
}

func (o GetNodePoolRootVolumeArrayOutput) ToGetNodePoolRootVolumeArrayOutput() GetNodePoolRootVolumeArrayOutput {
	return o
}

func (o GetNodePoolRootVolumeArrayOutput) ToGetNodePoolRootVolumeArrayOutputWithContext(ctx context.Context) GetNodePoolRootVolumeArrayOutput {
	return o
}

func (o GetNodePoolRootVolumeArrayOutput) Index(i pulumi.IntInput) GetNodePoolRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodePoolRootVolume {
		return vs[0].([]GetNodePoolRootVolume)[vs[1].(int)]
	}).(GetNodePoolRootVolumeOutput)
}

type GetNodeRootVolume struct {
	ExtendParams map[string]string `pulumi:"extendParams"`
	Size         int               `pulumi:"size"`
	Volumetype   string            `pulumi:"volumetype"`
}

// GetNodeRootVolumeInput is an input type that accepts GetNodeRootVolumeArgs and GetNodeRootVolumeOutput values.
// You can construct a concrete instance of `GetNodeRootVolumeInput` via:
//
//	GetNodeRootVolumeArgs{...}
type GetNodeRootVolumeInput interface {
	pulumi.Input

	ToGetNodeRootVolumeOutput() GetNodeRootVolumeOutput
	ToGetNodeRootVolumeOutputWithContext(context.Context) GetNodeRootVolumeOutput
}

type GetNodeRootVolumeArgs struct {
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	Size         pulumi.IntInput       `pulumi:"size"`
	Volumetype   pulumi.StringInput    `pulumi:"volumetype"`
}

func (GetNodeRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeRootVolume)(nil)).Elem()
}

func (i GetNodeRootVolumeArgs) ToGetNodeRootVolumeOutput() GetNodeRootVolumeOutput {
	return i.ToGetNodeRootVolumeOutputWithContext(context.Background())
}

func (i GetNodeRootVolumeArgs) ToGetNodeRootVolumeOutputWithContext(ctx context.Context) GetNodeRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeRootVolumeOutput)
}

// GetNodeRootVolumeArrayInput is an input type that accepts GetNodeRootVolumeArray and GetNodeRootVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodeRootVolumeArrayInput` via:
//
//	GetNodeRootVolumeArray{ GetNodeRootVolumeArgs{...} }
type GetNodeRootVolumeArrayInput interface {
	pulumi.Input

	ToGetNodeRootVolumeArrayOutput() GetNodeRootVolumeArrayOutput
	ToGetNodeRootVolumeArrayOutputWithContext(context.Context) GetNodeRootVolumeArrayOutput
}

type GetNodeRootVolumeArray []GetNodeRootVolumeInput

func (GetNodeRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeRootVolume)(nil)).Elem()
}

func (i GetNodeRootVolumeArray) ToGetNodeRootVolumeArrayOutput() GetNodeRootVolumeArrayOutput {
	return i.ToGetNodeRootVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodeRootVolumeArray) ToGetNodeRootVolumeArrayOutputWithContext(ctx context.Context) GetNodeRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodeRootVolumeArrayOutput)
}

type GetNodeRootVolumeOutput struct{ *pulumi.OutputState }

func (GetNodeRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodeRootVolume)(nil)).Elem()
}

func (o GetNodeRootVolumeOutput) ToGetNodeRootVolumeOutput() GetNodeRootVolumeOutput {
	return o
}

func (o GetNodeRootVolumeOutput) ToGetNodeRootVolumeOutputWithContext(ctx context.Context) GetNodeRootVolumeOutput {
	return o
}

func (o GetNodeRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodeRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o GetNodeRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodeRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetNodeRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodeRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodeRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodeRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodeRootVolume)(nil)).Elem()
}

func (o GetNodeRootVolumeArrayOutput) ToGetNodeRootVolumeArrayOutput() GetNodeRootVolumeArrayOutput {
	return o
}

func (o GetNodeRootVolumeArrayOutput) ToGetNodeRootVolumeArrayOutputWithContext(ctx context.Context) GetNodeRootVolumeArrayOutput {
	return o
}

func (o GetNodeRootVolumeArrayOutput) Index(i pulumi.IntInput) GetNodeRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodeRootVolume {
		return vs[0].([]GetNodeRootVolume)[vs[1].(int)]
	}).(GetNodeRootVolumeOutput)
}

type GetNodesNode struct {
	AvailabilityZone    string                       `pulumi:"availabilityZone"`
	BillingMode         int                          `pulumi:"billingMode"`
	DataVolumes         []GetNodesNodeDataVolume     `pulumi:"dataVolumes"`
	EcsGroupId          string                       `pulumi:"ecsGroupId"`
	EnterpriseProjectId string                       `pulumi:"enterpriseProjectId"`
	FlavorId            string                       `pulumi:"flavorId"`
	HostnameConfigs     []GetNodesNodeHostnameConfig `pulumi:"hostnameConfigs"`
	Id                  string                       `pulumi:"id"`
	KeyPair             string                       `pulumi:"keyPair"`
	Name                string                       `pulumi:"name"`
	Os                  string                       `pulumi:"os"`
	PrivateIp           string                       `pulumi:"privateIp"`
	PublicIp            string                       `pulumi:"publicIp"`
	RootVolumes         []GetNodesNodeRootVolume     `pulumi:"rootVolumes"`
	ServerId            string                       `pulumi:"serverId"`
	Status              string                       `pulumi:"status"`
	SubnetId            string                       `pulumi:"subnetId"`
	Tags                map[string]string            `pulumi:"tags"`
}

// GetNodesNodeInput is an input type that accepts GetNodesNodeArgs and GetNodesNodeOutput values.
// You can construct a concrete instance of `GetNodesNodeInput` via:
//
//	GetNodesNodeArgs{...}
type GetNodesNodeInput interface {
	pulumi.Input

	ToGetNodesNodeOutput() GetNodesNodeOutput
	ToGetNodesNodeOutputWithContext(context.Context) GetNodesNodeOutput
}

type GetNodesNodeArgs struct {
	AvailabilityZone    pulumi.StringInput                   `pulumi:"availabilityZone"`
	BillingMode         pulumi.IntInput                      `pulumi:"billingMode"`
	DataVolumes         GetNodesNodeDataVolumeArrayInput     `pulumi:"dataVolumes"`
	EcsGroupId          pulumi.StringInput                   `pulumi:"ecsGroupId"`
	EnterpriseProjectId pulumi.StringInput                   `pulumi:"enterpriseProjectId"`
	FlavorId            pulumi.StringInput                   `pulumi:"flavorId"`
	HostnameConfigs     GetNodesNodeHostnameConfigArrayInput `pulumi:"hostnameConfigs"`
	Id                  pulumi.StringInput                   `pulumi:"id"`
	KeyPair             pulumi.StringInput                   `pulumi:"keyPair"`
	Name                pulumi.StringInput                   `pulumi:"name"`
	Os                  pulumi.StringInput                   `pulumi:"os"`
	PrivateIp           pulumi.StringInput                   `pulumi:"privateIp"`
	PublicIp            pulumi.StringInput                   `pulumi:"publicIp"`
	RootVolumes         GetNodesNodeRootVolumeArrayInput     `pulumi:"rootVolumes"`
	ServerId            pulumi.StringInput                   `pulumi:"serverId"`
	Status              pulumi.StringInput                   `pulumi:"status"`
	SubnetId            pulumi.StringInput                   `pulumi:"subnetId"`
	Tags                pulumi.StringMapInput                `pulumi:"tags"`
}

func (GetNodesNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNode)(nil)).Elem()
}

func (i GetNodesNodeArgs) ToGetNodesNodeOutput() GetNodesNodeOutput {
	return i.ToGetNodesNodeOutputWithContext(context.Background())
}

func (i GetNodesNodeArgs) ToGetNodesNodeOutputWithContext(ctx context.Context) GetNodesNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeOutput)
}

// GetNodesNodeArrayInput is an input type that accepts GetNodesNodeArray and GetNodesNodeArrayOutput values.
// You can construct a concrete instance of `GetNodesNodeArrayInput` via:
//
//	GetNodesNodeArray{ GetNodesNodeArgs{...} }
type GetNodesNodeArrayInput interface {
	pulumi.Input

	ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput
	ToGetNodesNodeArrayOutputWithContext(context.Context) GetNodesNodeArrayOutput
}

type GetNodesNodeArray []GetNodesNodeInput

func (GetNodesNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNode)(nil)).Elem()
}

func (i GetNodesNodeArray) ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput {
	return i.ToGetNodesNodeArrayOutputWithContext(context.Background())
}

func (i GetNodesNodeArray) ToGetNodesNodeArrayOutputWithContext(ctx context.Context) GetNodesNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeArrayOutput)
}

type GetNodesNodeOutput struct{ *pulumi.OutputState }

func (GetNodesNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNode)(nil)).Elem()
}

func (o GetNodesNodeOutput) ToGetNodesNodeOutput() GetNodesNodeOutput {
	return o
}

func (o GetNodesNodeOutput) ToGetNodesNodeOutputWithContext(ctx context.Context) GetNodesNodeOutput {
	return o
}

func (o GetNodesNodeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) BillingMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodesNode) int { return v.BillingMode }).(pulumi.IntOutput)
}

func (o GetNodesNodeOutput) DataVolumes() GetNodesNodeDataVolumeArrayOutput {
	return o.ApplyT(func(v GetNodesNode) []GetNodesNodeDataVolume { return v.DataVolumes }).(GetNodesNodeDataVolumeArrayOutput)
}

func (o GetNodesNodeOutput) EcsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.EcsGroupId }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.FlavorId }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) HostnameConfigs() GetNodesNodeHostnameConfigArrayOutput {
	return o.ApplyT(func(v GetNodesNode) []GetNodesNodeHostnameConfig { return v.HostnameConfigs }).(GetNodesNodeHostnameConfigArrayOutput)
}

func (o GetNodesNodeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) KeyPair() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.KeyPair }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Os }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) RootVolumes() GetNodesNodeRootVolumeArrayOutput {
	return o.ApplyT(func(v GetNodesNode) []GetNodesNodeRootVolume { return v.RootVolumes }).(GetNodesNodeRootVolumeArrayOutput)
}

func (o GetNodesNodeOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.ServerId }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNode) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o GetNodesNodeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesNode) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

type GetNodesNodeArrayOutput struct{ *pulumi.OutputState }

func (GetNodesNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNode)(nil)).Elem()
}

func (o GetNodesNodeArrayOutput) ToGetNodesNodeArrayOutput() GetNodesNodeArrayOutput {
	return o
}

func (o GetNodesNodeArrayOutput) ToGetNodesNodeArrayOutputWithContext(ctx context.Context) GetNodesNodeArrayOutput {
	return o
}

func (o GetNodesNodeArrayOutput) Index(i pulumi.IntInput) GetNodesNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesNode {
		return vs[0].([]GetNodesNode)[vs[1].(int)]
	}).(GetNodesNodeOutput)
}

type GetNodesNodeDataVolume struct {
	ExtendParams map[string]string `pulumi:"extendParams"`
	Size         int               `pulumi:"size"`
	Volumetype   string            `pulumi:"volumetype"`
}

// GetNodesNodeDataVolumeInput is an input type that accepts GetNodesNodeDataVolumeArgs and GetNodesNodeDataVolumeOutput values.
// You can construct a concrete instance of `GetNodesNodeDataVolumeInput` via:
//
//	GetNodesNodeDataVolumeArgs{...}
type GetNodesNodeDataVolumeInput interface {
	pulumi.Input

	ToGetNodesNodeDataVolumeOutput() GetNodesNodeDataVolumeOutput
	ToGetNodesNodeDataVolumeOutputWithContext(context.Context) GetNodesNodeDataVolumeOutput
}

type GetNodesNodeDataVolumeArgs struct {
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	Size         pulumi.IntInput       `pulumi:"size"`
	Volumetype   pulumi.StringInput    `pulumi:"volumetype"`
}

func (GetNodesNodeDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeDataVolume)(nil)).Elem()
}

func (i GetNodesNodeDataVolumeArgs) ToGetNodesNodeDataVolumeOutput() GetNodesNodeDataVolumeOutput {
	return i.ToGetNodesNodeDataVolumeOutputWithContext(context.Background())
}

func (i GetNodesNodeDataVolumeArgs) ToGetNodesNodeDataVolumeOutputWithContext(ctx context.Context) GetNodesNodeDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeDataVolumeOutput)
}

// GetNodesNodeDataVolumeArrayInput is an input type that accepts GetNodesNodeDataVolumeArray and GetNodesNodeDataVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodesNodeDataVolumeArrayInput` via:
//
//	GetNodesNodeDataVolumeArray{ GetNodesNodeDataVolumeArgs{...} }
type GetNodesNodeDataVolumeArrayInput interface {
	pulumi.Input

	ToGetNodesNodeDataVolumeArrayOutput() GetNodesNodeDataVolumeArrayOutput
	ToGetNodesNodeDataVolumeArrayOutputWithContext(context.Context) GetNodesNodeDataVolumeArrayOutput
}

type GetNodesNodeDataVolumeArray []GetNodesNodeDataVolumeInput

func (GetNodesNodeDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeDataVolume)(nil)).Elem()
}

func (i GetNodesNodeDataVolumeArray) ToGetNodesNodeDataVolumeArrayOutput() GetNodesNodeDataVolumeArrayOutput {
	return i.ToGetNodesNodeDataVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodesNodeDataVolumeArray) ToGetNodesNodeDataVolumeArrayOutputWithContext(ctx context.Context) GetNodesNodeDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeDataVolumeArrayOutput)
}

type GetNodesNodeDataVolumeOutput struct{ *pulumi.OutputState }

func (GetNodesNodeDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeDataVolume)(nil)).Elem()
}

func (o GetNodesNodeDataVolumeOutput) ToGetNodesNodeDataVolumeOutput() GetNodesNodeDataVolumeOutput {
	return o
}

func (o GetNodesNodeDataVolumeOutput) ToGetNodesNodeDataVolumeOutputWithContext(ctx context.Context) GetNodesNodeDataVolumeOutput {
	return o
}

func (o GetNodesNodeDataVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesNodeDataVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o GetNodesNodeDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodesNodeDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetNodesNodeDataVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNodeDataVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodesNodeDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodesNodeDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeDataVolume)(nil)).Elem()
}

func (o GetNodesNodeDataVolumeArrayOutput) ToGetNodesNodeDataVolumeArrayOutput() GetNodesNodeDataVolumeArrayOutput {
	return o
}

func (o GetNodesNodeDataVolumeArrayOutput) ToGetNodesNodeDataVolumeArrayOutputWithContext(ctx context.Context) GetNodesNodeDataVolumeArrayOutput {
	return o
}

func (o GetNodesNodeDataVolumeArrayOutput) Index(i pulumi.IntInput) GetNodesNodeDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesNodeDataVolume {
		return vs[0].([]GetNodesNodeDataVolume)[vs[1].(int)]
	}).(GetNodesNodeDataVolumeOutput)
}

type GetNodesNodeHostnameConfig struct {
	Type string `pulumi:"type"`
}

// GetNodesNodeHostnameConfigInput is an input type that accepts GetNodesNodeHostnameConfigArgs and GetNodesNodeHostnameConfigOutput values.
// You can construct a concrete instance of `GetNodesNodeHostnameConfigInput` via:
//
//	GetNodesNodeHostnameConfigArgs{...}
type GetNodesNodeHostnameConfigInput interface {
	pulumi.Input

	ToGetNodesNodeHostnameConfigOutput() GetNodesNodeHostnameConfigOutput
	ToGetNodesNodeHostnameConfigOutputWithContext(context.Context) GetNodesNodeHostnameConfigOutput
}

type GetNodesNodeHostnameConfigArgs struct {
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetNodesNodeHostnameConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeHostnameConfig)(nil)).Elem()
}

func (i GetNodesNodeHostnameConfigArgs) ToGetNodesNodeHostnameConfigOutput() GetNodesNodeHostnameConfigOutput {
	return i.ToGetNodesNodeHostnameConfigOutputWithContext(context.Background())
}

func (i GetNodesNodeHostnameConfigArgs) ToGetNodesNodeHostnameConfigOutputWithContext(ctx context.Context) GetNodesNodeHostnameConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeHostnameConfigOutput)
}

// GetNodesNodeHostnameConfigArrayInput is an input type that accepts GetNodesNodeHostnameConfigArray and GetNodesNodeHostnameConfigArrayOutput values.
// You can construct a concrete instance of `GetNodesNodeHostnameConfigArrayInput` via:
//
//	GetNodesNodeHostnameConfigArray{ GetNodesNodeHostnameConfigArgs{...} }
type GetNodesNodeHostnameConfigArrayInput interface {
	pulumi.Input

	ToGetNodesNodeHostnameConfigArrayOutput() GetNodesNodeHostnameConfigArrayOutput
	ToGetNodesNodeHostnameConfigArrayOutputWithContext(context.Context) GetNodesNodeHostnameConfigArrayOutput
}

type GetNodesNodeHostnameConfigArray []GetNodesNodeHostnameConfigInput

func (GetNodesNodeHostnameConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeHostnameConfig)(nil)).Elem()
}

func (i GetNodesNodeHostnameConfigArray) ToGetNodesNodeHostnameConfigArrayOutput() GetNodesNodeHostnameConfigArrayOutput {
	return i.ToGetNodesNodeHostnameConfigArrayOutputWithContext(context.Background())
}

func (i GetNodesNodeHostnameConfigArray) ToGetNodesNodeHostnameConfigArrayOutputWithContext(ctx context.Context) GetNodesNodeHostnameConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeHostnameConfigArrayOutput)
}

type GetNodesNodeHostnameConfigOutput struct{ *pulumi.OutputState }

func (GetNodesNodeHostnameConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeHostnameConfig)(nil)).Elem()
}

func (o GetNodesNodeHostnameConfigOutput) ToGetNodesNodeHostnameConfigOutput() GetNodesNodeHostnameConfigOutput {
	return o
}

func (o GetNodesNodeHostnameConfigOutput) ToGetNodesNodeHostnameConfigOutputWithContext(ctx context.Context) GetNodesNodeHostnameConfigOutput {
	return o
}

func (o GetNodesNodeHostnameConfigOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNodeHostnameConfig) string { return v.Type }).(pulumi.StringOutput)
}

type GetNodesNodeHostnameConfigArrayOutput struct{ *pulumi.OutputState }

func (GetNodesNodeHostnameConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeHostnameConfig)(nil)).Elem()
}

func (o GetNodesNodeHostnameConfigArrayOutput) ToGetNodesNodeHostnameConfigArrayOutput() GetNodesNodeHostnameConfigArrayOutput {
	return o
}

func (o GetNodesNodeHostnameConfigArrayOutput) ToGetNodesNodeHostnameConfigArrayOutputWithContext(ctx context.Context) GetNodesNodeHostnameConfigArrayOutput {
	return o
}

func (o GetNodesNodeHostnameConfigArrayOutput) Index(i pulumi.IntInput) GetNodesNodeHostnameConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesNodeHostnameConfig {
		return vs[0].([]GetNodesNodeHostnameConfig)[vs[1].(int)]
	}).(GetNodesNodeHostnameConfigOutput)
}

type GetNodesNodeRootVolume struct {
	ExtendParams map[string]string `pulumi:"extendParams"`
	Size         int               `pulumi:"size"`
	Volumetype   string            `pulumi:"volumetype"`
}

// GetNodesNodeRootVolumeInput is an input type that accepts GetNodesNodeRootVolumeArgs and GetNodesNodeRootVolumeOutput values.
// You can construct a concrete instance of `GetNodesNodeRootVolumeInput` via:
//
//	GetNodesNodeRootVolumeArgs{...}
type GetNodesNodeRootVolumeInput interface {
	pulumi.Input

	ToGetNodesNodeRootVolumeOutput() GetNodesNodeRootVolumeOutput
	ToGetNodesNodeRootVolumeOutputWithContext(context.Context) GetNodesNodeRootVolumeOutput
}

type GetNodesNodeRootVolumeArgs struct {
	ExtendParams pulumi.StringMapInput `pulumi:"extendParams"`
	Size         pulumi.IntInput       `pulumi:"size"`
	Volumetype   pulumi.StringInput    `pulumi:"volumetype"`
}

func (GetNodesNodeRootVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeRootVolume)(nil)).Elem()
}

func (i GetNodesNodeRootVolumeArgs) ToGetNodesNodeRootVolumeOutput() GetNodesNodeRootVolumeOutput {
	return i.ToGetNodesNodeRootVolumeOutputWithContext(context.Background())
}

func (i GetNodesNodeRootVolumeArgs) ToGetNodesNodeRootVolumeOutputWithContext(ctx context.Context) GetNodesNodeRootVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeRootVolumeOutput)
}

// GetNodesNodeRootVolumeArrayInput is an input type that accepts GetNodesNodeRootVolumeArray and GetNodesNodeRootVolumeArrayOutput values.
// You can construct a concrete instance of `GetNodesNodeRootVolumeArrayInput` via:
//
//	GetNodesNodeRootVolumeArray{ GetNodesNodeRootVolumeArgs{...} }
type GetNodesNodeRootVolumeArrayInput interface {
	pulumi.Input

	ToGetNodesNodeRootVolumeArrayOutput() GetNodesNodeRootVolumeArrayOutput
	ToGetNodesNodeRootVolumeArrayOutputWithContext(context.Context) GetNodesNodeRootVolumeArrayOutput
}

type GetNodesNodeRootVolumeArray []GetNodesNodeRootVolumeInput

func (GetNodesNodeRootVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeRootVolume)(nil)).Elem()
}

func (i GetNodesNodeRootVolumeArray) ToGetNodesNodeRootVolumeArrayOutput() GetNodesNodeRootVolumeArrayOutput {
	return i.ToGetNodesNodeRootVolumeArrayOutputWithContext(context.Background())
}

func (i GetNodesNodeRootVolumeArray) ToGetNodesNodeRootVolumeArrayOutputWithContext(ctx context.Context) GetNodesNodeRootVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNodesNodeRootVolumeArrayOutput)
}

type GetNodesNodeRootVolumeOutput struct{ *pulumi.OutputState }

func (GetNodesNodeRootVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesNodeRootVolume)(nil)).Elem()
}

func (o GetNodesNodeRootVolumeOutput) ToGetNodesNodeRootVolumeOutput() GetNodesNodeRootVolumeOutput {
	return o
}

func (o GetNodesNodeRootVolumeOutput) ToGetNodesNodeRootVolumeOutputWithContext(ctx context.Context) GetNodesNodeRootVolumeOutput {
	return o
}

func (o GetNodesNodeRootVolumeOutput) ExtendParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetNodesNodeRootVolume) map[string]string { return v.ExtendParams }).(pulumi.StringMapOutput)
}

func (o GetNodesNodeRootVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetNodesNodeRootVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetNodesNodeRootVolumeOutput) Volumetype() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesNodeRootVolume) string { return v.Volumetype }).(pulumi.StringOutput)
}

type GetNodesNodeRootVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetNodesNodeRootVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNodesNodeRootVolume)(nil)).Elem()
}

func (o GetNodesNodeRootVolumeArrayOutput) ToGetNodesNodeRootVolumeArrayOutput() GetNodesNodeRootVolumeArrayOutput {
	return o
}

func (o GetNodesNodeRootVolumeArrayOutput) ToGetNodesNodeRootVolumeArrayOutputWithContext(ctx context.Context) GetNodesNodeRootVolumeArrayOutput {
	return o
}

func (o GetNodesNodeRootVolumeArrayOutput) Index(i pulumi.IntInput) GetNodesNodeRootVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNodesNodeRootVolume {
		return vs[0].([]GetNodesNodeRootVolume)[vs[1].(int)]
	}).(GetNodesNodeRootVolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AddonValuesInput)(nil)).Elem(), AddonValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AddonValuesPtrInput)(nil)).Elem(), AddonValuesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCertificateClusterInput)(nil)).Elem(), ClusterCertificateClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCertificateClusterArrayInput)(nil)).Elem(), ClusterCertificateClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCertificateUserInput)(nil)).Elem(), ClusterCertificateUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterCertificateUserArrayInput)(nil)).Elem(), ClusterCertificateUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterComponentConfigurationInput)(nil)).Elem(), ClusterComponentConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterComponentConfigurationArrayInput)(nil)).Elem(), ClusterComponentConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionConfigInput)(nil)).Elem(), ClusterEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEncryptionConfigPtrInput)(nil)).Elem(), ClusterEncryptionConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExtendParamInput)(nil)).Elem(), ClusterExtendParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterExtendParamArrayInput)(nil)).Elem(), ClusterExtendParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMasterInput)(nil)).Elem(), ClusterMasterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMasterArrayInput)(nil)).Elem(), ClusterMasterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachDataVolumeInput)(nil)).Elem(), NodeAttachDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachDataVolumeArrayInput)(nil)).Elem(), NodeAttachDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachExtensionNicInput)(nil)).Elem(), NodeAttachExtensionNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachExtensionNicArrayInput)(nil)).Elem(), NodeAttachExtensionNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachHostnameConfigInput)(nil)).Elem(), NodeAttachHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachHostnameConfigPtrInput)(nil)).Elem(), NodeAttachHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachRootVolumeInput)(nil)).Elem(), NodeAttachRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachRootVolumeArrayInput)(nil)).Elem(), NodeAttachRootVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachStorageInput)(nil)).Elem(), NodeAttachStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachStoragePtrInput)(nil)).Elem(), NodeAttachStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachStorageGroupInput)(nil)).Elem(), NodeAttachStorageGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachStorageGroupArrayInput)(nil)).Elem(), NodeAttachStorageGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachStorageGroupVirtualSpaceInput)(nil)).Elem(), NodeAttachStorageGroupVirtualSpaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachStorageGroupVirtualSpaceArrayInput)(nil)).Elem(), NodeAttachStorageGroupVirtualSpaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachStorageSelectorInput)(nil)).Elem(), NodeAttachStorageSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachStorageSelectorArrayInput)(nil)).Elem(), NodeAttachStorageSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachTaintInput)(nil)).Elem(), NodeAttachTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachTaintArrayInput)(nil)).Elem(), NodeAttachTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeDataVolumeInput)(nil)).Elem(), NodeDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeDataVolumeArrayInput)(nil)).Elem(), NodeDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeExtendParamsInput)(nil)).Elem(), NodeExtendParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeExtendParamsPtrInput)(nil)).Elem(), NodeExtendParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeExtensionNicInput)(nil)).Elem(), NodeExtensionNicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeExtensionNicArrayInput)(nil)).Elem(), NodeExtensionNicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeHostnameConfigInput)(nil)).Elem(), NodeHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeHostnameConfigPtrInput)(nil)).Elem(), NodeHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolDataVolumeInput)(nil)).Elem(), NodePoolDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolDataVolumeArrayInput)(nil)).Elem(), NodePoolDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtendParamsInput)(nil)).Elem(), NodePoolExtendParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtendParamsPtrInput)(nil)).Elem(), NodePoolExtendParamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupInput)(nil)).Elem(), NodePoolExtensionScaleGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupArrayInput)(nil)).Elem(), NodePoolExtensionScaleGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupMetadataInput)(nil)).Elem(), NodePoolExtensionScaleGroupMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupMetadataPtrInput)(nil)).Elem(), NodePoolExtensionScaleGroupMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupSpecInput)(nil)).Elem(), NodePoolExtensionScaleGroupSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupSpecPtrInput)(nil)).Elem(), NodePoolExtensionScaleGroupSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupSpecAutoscalingInput)(nil)).Elem(), NodePoolExtensionScaleGroupSpecAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupSpecAutoscalingPtrInput)(nil)).Elem(), NodePoolExtensionScaleGroupSpecAutoscalingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationInput)(nil)).Elem(), NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrInput)(nil)).Elem(), NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolHostnameConfigInput)(nil)).Elem(), NodePoolHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolHostnameConfigPtrInput)(nil)).Elem(), NodePoolHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolRootVolumeInput)(nil)).Elem(), NodePoolRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolRootVolumePtrInput)(nil)).Elem(), NodePoolRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolStorageInput)(nil)).Elem(), NodePoolStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolStoragePtrInput)(nil)).Elem(), NodePoolStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolStorageGroupInput)(nil)).Elem(), NodePoolStorageGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolStorageGroupArrayInput)(nil)).Elem(), NodePoolStorageGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolStorageGroupVirtualSpaceInput)(nil)).Elem(), NodePoolStorageGroupVirtualSpaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolStorageGroupVirtualSpaceArrayInput)(nil)).Elem(), NodePoolStorageGroupVirtualSpaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolStorageSelectorInput)(nil)).Elem(), NodePoolStorageSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolStorageSelectorArrayInput)(nil)).Elem(), NodePoolStorageSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolTaintInput)(nil)).Elem(), NodePoolTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolTaintArrayInput)(nil)).Elem(), NodePoolTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeRootVolumeInput)(nil)).Elem(), NodeRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeRootVolumePtrInput)(nil)).Elem(), NodeRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageInput)(nil)).Elem(), NodeStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStoragePtrInput)(nil)).Elem(), NodeStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageGroupInput)(nil)).Elem(), NodeStorageGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageGroupArrayInput)(nil)).Elem(), NodeStorageGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageGroupVirtualSpaceInput)(nil)).Elem(), NodeStorageGroupVirtualSpaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageGroupVirtualSpaceArrayInput)(nil)).Elem(), NodeStorageGroupVirtualSpaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageSelectorInput)(nil)).Elem(), NodeStorageSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeStorageSelectorArrayInput)(nil)).Elem(), NodeStorageSelectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTaintInput)(nil)).Elem(), NodeTaintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeTaintArrayInput)(nil)).Elem(), NodeTaintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAddonTemplateSupportVersionInput)(nil)).Elem(), GetAddonTemplateSupportVersionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAddonTemplateSupportVersionArrayInput)(nil)).Elem(), GetAddonTemplateSupportVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificateClusterInput)(nil)).Elem(), GetClusterCertificateClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificateClusterArrayInput)(nil)).Elem(), GetClusterCertificateClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificateUserInput)(nil)).Elem(), GetClusterCertificateUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificateUserArrayInput)(nil)).Elem(), GetClusterCertificateUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificatesClusterInput)(nil)).Elem(), GetClusterCertificatesClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificatesClusterArrayInput)(nil)).Elem(), GetClusterCertificatesClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificatesContextInput)(nil)).Elem(), GetClusterCertificatesContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificatesContextArrayInput)(nil)).Elem(), GetClusterCertificatesContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificatesUserInput)(nil)).Elem(), GetClusterCertificatesUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterCertificatesUserArrayInput)(nil)).Elem(), GetClusterCertificatesUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterEndpointInput)(nil)).Elem(), GetClusterEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterEndpointArrayInput)(nil)).Elem(), GetClusterEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterMasterInput)(nil)).Elem(), GetClusterMasterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClusterMasterArrayInput)(nil)).Elem(), GetClusterMasterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterInput)(nil)).Elem(), GetClustersClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterArrayInput)(nil)).Elem(), GetClustersClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterCertificateClusterInput)(nil)).Elem(), GetClustersClusterCertificateClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterCertificateClusterArrayInput)(nil)).Elem(), GetClustersClusterCertificateClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterCertificateUserInput)(nil)).Elem(), GetClustersClusterCertificateUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterCertificateUserArrayInput)(nil)).Elem(), GetClustersClusterCertificateUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterEndpointInput)(nil)).Elem(), GetClustersClusterEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterEndpointArrayInput)(nil)).Elem(), GetClustersClusterEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterMasterInput)(nil)).Elem(), GetClustersClusterMasterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClustersClusterMasterArrayInput)(nil)).Elem(), GetClustersClusterMasterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeDataVolumeInput)(nil)).Elem(), GetNodeDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeDataVolumeArrayInput)(nil)).Elem(), GetNodeDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeHostnameConfigInput)(nil)).Elem(), GetNodeHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeHostnameConfigArrayInput)(nil)).Elem(), GetNodeHostnameConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolDataVolumeInput)(nil)).Elem(), GetNodePoolDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolDataVolumeArrayInput)(nil)).Elem(), GetNodePoolDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolHostnameConfigInput)(nil)).Elem(), GetNodePoolHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolHostnameConfigArrayInput)(nil)).Elem(), GetNodePoolHostnameConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolRootVolumeInput)(nil)).Elem(), GetNodePoolRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodePoolRootVolumeArrayInput)(nil)).Elem(), GetNodePoolRootVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeRootVolumeInput)(nil)).Elem(), GetNodeRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodeRootVolumeArrayInput)(nil)).Elem(), GetNodeRootVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeInput)(nil)).Elem(), GetNodesNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeArrayInput)(nil)).Elem(), GetNodesNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeDataVolumeInput)(nil)).Elem(), GetNodesNodeDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeDataVolumeArrayInput)(nil)).Elem(), GetNodesNodeDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeHostnameConfigInput)(nil)).Elem(), GetNodesNodeHostnameConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeHostnameConfigArrayInput)(nil)).Elem(), GetNodesNodeHostnameConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeRootVolumeInput)(nil)).Elem(), GetNodesNodeRootVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNodesNodeRootVolumeArrayInput)(nil)).Elem(), GetNodesNodeRootVolumeArray{})
	pulumi.RegisterOutputType(AddonValuesOutput{})
	pulumi.RegisterOutputType(AddonValuesPtrOutput{})
	pulumi.RegisterOutputType(ClusterCertificateClusterOutput{})
	pulumi.RegisterOutputType(ClusterCertificateClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterCertificateUserOutput{})
	pulumi.RegisterOutputType(ClusterCertificateUserArrayOutput{})
	pulumi.RegisterOutputType(ClusterComponentConfigurationOutput{})
	pulumi.RegisterOutputType(ClusterComponentConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigOutput{})
	pulumi.RegisterOutputType(ClusterEncryptionConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterExtendParamOutput{})
	pulumi.RegisterOutputType(ClusterExtendParamArrayOutput{})
	pulumi.RegisterOutputType(ClusterMasterOutput{})
	pulumi.RegisterOutputType(ClusterMasterArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachDataVolumeOutput{})
	pulumi.RegisterOutputType(NodeAttachDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachExtensionNicOutput{})
	pulumi.RegisterOutputType(NodeAttachExtensionNicArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachHostnameConfigOutput{})
	pulumi.RegisterOutputType(NodeAttachHostnameConfigPtrOutput{})
	pulumi.RegisterOutputType(NodeAttachRootVolumeOutput{})
	pulumi.RegisterOutputType(NodeAttachRootVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachStorageOutput{})
	pulumi.RegisterOutputType(NodeAttachStoragePtrOutput{})
	pulumi.RegisterOutputType(NodeAttachStorageGroupOutput{})
	pulumi.RegisterOutputType(NodeAttachStorageGroupArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachStorageGroupVirtualSpaceOutput{})
	pulumi.RegisterOutputType(NodeAttachStorageGroupVirtualSpaceArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachStorageSelectorOutput{})
	pulumi.RegisterOutputType(NodeAttachStorageSelectorArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachTaintOutput{})
	pulumi.RegisterOutputType(NodeAttachTaintArrayOutput{})
	pulumi.RegisterOutputType(NodeDataVolumeOutput{})
	pulumi.RegisterOutputType(NodeDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodeExtendParamsOutput{})
	pulumi.RegisterOutputType(NodeExtendParamsPtrOutput{})
	pulumi.RegisterOutputType(NodeExtensionNicOutput{})
	pulumi.RegisterOutputType(NodeExtensionNicArrayOutput{})
	pulumi.RegisterOutputType(NodeHostnameConfigOutput{})
	pulumi.RegisterOutputType(NodeHostnameConfigPtrOutput{})
	pulumi.RegisterOutputType(NodePoolDataVolumeOutput{})
	pulumi.RegisterOutputType(NodePoolDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(NodePoolExtendParamsOutput{})
	pulumi.RegisterOutputType(NodePoolExtendParamsPtrOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupArrayOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupMetadataOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupMetadataPtrOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupSpecOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupSpecPtrOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupSpecAutoscalingOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupSpecAutoscalingPtrOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationOutput{})
	pulumi.RegisterOutputType(NodePoolExtensionScaleGroupSpecCapacityReservationSpecificationPtrOutput{})
	pulumi.RegisterOutputType(NodePoolHostnameConfigOutput{})
	pulumi.RegisterOutputType(NodePoolHostnameConfigPtrOutput{})
	pulumi.RegisterOutputType(NodePoolRootVolumeOutput{})
	pulumi.RegisterOutputType(NodePoolRootVolumePtrOutput{})
	pulumi.RegisterOutputType(NodePoolStorageOutput{})
	pulumi.RegisterOutputType(NodePoolStoragePtrOutput{})
	pulumi.RegisterOutputType(NodePoolStorageGroupOutput{})
	pulumi.RegisterOutputType(NodePoolStorageGroupArrayOutput{})
	pulumi.RegisterOutputType(NodePoolStorageGroupVirtualSpaceOutput{})
	pulumi.RegisterOutputType(NodePoolStorageGroupVirtualSpaceArrayOutput{})
	pulumi.RegisterOutputType(NodePoolStorageSelectorOutput{})
	pulumi.RegisterOutputType(NodePoolStorageSelectorArrayOutput{})
	pulumi.RegisterOutputType(NodePoolTaintOutput{})
	pulumi.RegisterOutputType(NodePoolTaintArrayOutput{})
	pulumi.RegisterOutputType(NodeRootVolumeOutput{})
	pulumi.RegisterOutputType(NodeRootVolumePtrOutput{})
	pulumi.RegisterOutputType(NodeStorageOutput{})
	pulumi.RegisterOutputType(NodeStoragePtrOutput{})
	pulumi.RegisterOutputType(NodeStorageGroupOutput{})
	pulumi.RegisterOutputType(NodeStorageGroupArrayOutput{})
	pulumi.RegisterOutputType(NodeStorageGroupVirtualSpaceOutput{})
	pulumi.RegisterOutputType(NodeStorageGroupVirtualSpaceArrayOutput{})
	pulumi.RegisterOutputType(NodeStorageSelectorOutput{})
	pulumi.RegisterOutputType(NodeStorageSelectorArrayOutput{})
	pulumi.RegisterOutputType(NodeTaintOutput{})
	pulumi.RegisterOutputType(NodeTaintArrayOutput{})
	pulumi.RegisterOutputType(GetAddonTemplateSupportVersionOutput{})
	pulumi.RegisterOutputType(GetAddonTemplateSupportVersionArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateClusterOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateUserOutput{})
	pulumi.RegisterOutputType(GetClusterCertificateUserArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCertificatesClusterOutput{})
	pulumi.RegisterOutputType(GetClusterCertificatesClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCertificatesContextOutput{})
	pulumi.RegisterOutputType(GetClusterCertificatesContextArrayOutput{})
	pulumi.RegisterOutputType(GetClusterCertificatesUserOutput{})
	pulumi.RegisterOutputType(GetClusterCertificatesUserArrayOutput{})
	pulumi.RegisterOutputType(GetClusterEndpointOutput{})
	pulumi.RegisterOutputType(GetClusterEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetClusterMasterOutput{})
	pulumi.RegisterOutputType(GetClusterMasterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterCertificateClusterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterCertificateClusterArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterCertificateUserOutput{})
	pulumi.RegisterOutputType(GetClustersClusterCertificateUserArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterEndpointOutput{})
	pulumi.RegisterOutputType(GetClustersClusterEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetClustersClusterMasterOutput{})
	pulumi.RegisterOutputType(GetClustersClusterMasterArrayOutput{})
	pulumi.RegisterOutputType(GetNodeDataVolumeOutput{})
	pulumi.RegisterOutputType(GetNodeDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodeHostnameConfigOutput{})
	pulumi.RegisterOutputType(GetNodeHostnameConfigArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolDataVolumeOutput{})
	pulumi.RegisterOutputType(GetNodePoolDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolHostnameConfigOutput{})
	pulumi.RegisterOutputType(GetNodePoolHostnameConfigArrayOutput{})
	pulumi.RegisterOutputType(GetNodePoolRootVolumeOutput{})
	pulumi.RegisterOutputType(GetNodePoolRootVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodeRootVolumeOutput{})
	pulumi.RegisterOutputType(GetNodeRootVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodesNodeOutput{})
	pulumi.RegisterOutputType(GetNodesNodeArrayOutput{})
	pulumi.RegisterOutputType(GetNodesNodeDataVolumeOutput{})
	pulumi.RegisterOutputType(GetNodesNodeDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetNodesNodeHostnameConfigOutput{})
	pulumi.RegisterOutputType(GetNodesNodeHostnameConfigArrayOutput{})
	pulumi.RegisterOutputType(GetNodesNodeRootVolumeOutput{})
	pulumi.RegisterOutputType(GetNodesNodeRootVolumeArrayOutput{})
}

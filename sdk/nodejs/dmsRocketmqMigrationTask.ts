// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DmsRocketmqMigrationTask extends pulumi.CustomResource {
    /**
     * Get an existing DmsRocketmqMigrationTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsRocketmqMigrationTaskState, opts?: pulumi.CustomResourceOptions): DmsRocketmqMigrationTask {
        return new DmsRocketmqMigrationTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dmsRocketmqMigrationTask:DmsRocketmqMigrationTask';

    /**
     * Returns true if the given object is an instance of DmsRocketmqMigrationTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsRocketmqMigrationTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsRocketmqMigrationTask.__pulumiType;
    }

    /**
     * Specifies the binding metadata.
     */
    declare public readonly bindings: pulumi.Output<outputs.DmsRocketmqMigrationTaskBinding[]>;
    /**
     * Specifies the exchange metadata.
     */
    declare public readonly exchanges: pulumi.Output<outputs.DmsRocketmqMigrationTaskExchange[]>;
    /**
     * Specifies the ID of the RocketMQ instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Specifies the name of the migration task.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies whether to overwrite configurations with the same name.
     */
    declare public readonly overwrite: pulumi.Output<string>;
    /**
     * Specifies the queue metadata.
     */
    declare public readonly queues: pulumi.Output<outputs.DmsRocketmqMigrationTaskQueue[]>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * Indicates the start time of the migration task.
     */
    declare public /*out*/ readonly startDate: pulumi.Output<string>;
    /**
     * Indicates the status of the migration task.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Specifies the consumer group metadata.
     */
    declare public readonly subscriptionGroups: pulumi.Output<outputs.DmsRocketmqMigrationTaskSubscriptionGroup[]>;
    /**
     * Specifies the topic metadata.
     */
    declare public readonly topicConfigs: pulumi.Output<outputs.DmsRocketmqMigrationTaskTopicConfig[]>;
    /**
     * Specifies the migration task type.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Specifies the virtual hosts metadata.
     */
    declare public readonly vhosts: pulumi.Output<outputs.DmsRocketmqMigrationTaskVhost[]>;

    /**
     * Create a DmsRocketmqMigrationTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsRocketmqMigrationTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsRocketmqMigrationTaskArgs | DmsRocketmqMigrationTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsRocketmqMigrationTaskState | undefined;
            resourceInputs["bindings"] = state?.bindings;
            resourceInputs["exchanges"] = state?.exchanges;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["name"] = state?.name;
            resourceInputs["overwrite"] = state?.overwrite;
            resourceInputs["queues"] = state?.queues;
            resourceInputs["region"] = state?.region;
            resourceInputs["startDate"] = state?.startDate;
            resourceInputs["status"] = state?.status;
            resourceInputs["subscriptionGroups"] = state?.subscriptionGroups;
            resourceInputs["topicConfigs"] = state?.topicConfigs;
            resourceInputs["type"] = state?.type;
            resourceInputs["vhosts"] = state?.vhosts;
        } else {
            const args = argsOrState as DmsRocketmqMigrationTaskArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.overwrite === undefined && !opts.urn) {
                throw new Error("Missing required property 'overwrite'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bindings"] = args?.bindings;
            resourceInputs["exchanges"] = args?.exchanges;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["name"] = args?.name;
            resourceInputs["overwrite"] = args?.overwrite;
            resourceInputs["queues"] = args?.queues;
            resourceInputs["region"] = args?.region;
            resourceInputs["subscriptionGroups"] = args?.subscriptionGroups;
            resourceInputs["topicConfigs"] = args?.topicConfigs;
            resourceInputs["type"] = args?.type;
            resourceInputs["vhosts"] = args?.vhosts;
            resourceInputs["startDate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsRocketmqMigrationTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DmsRocketmqMigrationTask resources.
 */
export interface DmsRocketmqMigrationTaskState {
    /**
     * Specifies the binding metadata.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskBinding>[]>;
    /**
     * Specifies the exchange metadata.
     */
    exchanges?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskExchange>[]>;
    /**
     * Specifies the ID of the RocketMQ instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the name of the migration task.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether to overwrite configurations with the same name.
     */
    overwrite?: pulumi.Input<string>;
    /**
     * Specifies the queue metadata.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskQueue>[]>;
    region?: pulumi.Input<string>;
    /**
     * Indicates the start time of the migration task.
     */
    startDate?: pulumi.Input<string>;
    /**
     * Indicates the status of the migration task.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the consumer group metadata.
     */
    subscriptionGroups?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskSubscriptionGroup>[]>;
    /**
     * Specifies the topic metadata.
     */
    topicConfigs?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskTopicConfig>[]>;
    /**
     * Specifies the migration task type.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the virtual hosts metadata.
     */
    vhosts?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskVhost>[]>;
}

/**
 * The set of arguments for constructing a DmsRocketmqMigrationTask resource.
 */
export interface DmsRocketmqMigrationTaskArgs {
    /**
     * Specifies the binding metadata.
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskBinding>[]>;
    /**
     * Specifies the exchange metadata.
     */
    exchanges?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskExchange>[]>;
    /**
     * Specifies the ID of the RocketMQ instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the name of the migration task.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether to overwrite configurations with the same name.
     */
    overwrite: pulumi.Input<string>;
    /**
     * Specifies the queue metadata.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskQueue>[]>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the consumer group metadata.
     */
    subscriptionGroups?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskSubscriptionGroup>[]>;
    /**
     * Specifies the topic metadata.
     */
    topicConfigs?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskTopicConfig>[]>;
    /**
     * Specifies the migration task type.
     */
    type: pulumi.Input<string>;
    /**
     * Specifies the virtual hosts metadata.
     */
    vhosts?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskVhost>[]>;
}

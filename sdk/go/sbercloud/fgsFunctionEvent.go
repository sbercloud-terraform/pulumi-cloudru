// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages an event for testing specified function within SberCloud.
//
// ## Example Usage
//
// ## Import
//
// Function event can be imported using the `function_urn` and `name`, separated by a slash, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:index/fgsFunctionEvent:FgsFunctionEvent test <function_urn>/<name>
// ```
type FgsFunctionEvent struct {
	pulumi.CustomResourceState

	// Specifies the function event content.\
	// The value is the base64 encoding of the JSON string.
	Content pulumi.StringOutput `pulumi:"content"`
	// Specifies the URN of the function to which the event blongs.\
	// Changing this parameter will create a new resource.
	FunctionUrn pulumi.StringOutput `pulumi:"functionUrn"`
	// Specifies the function event name.\
	// The name can contain a maximum of `25` characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region where the function event is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The latest update (UTC) time of the function event, in RFC3339 format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewFgsFunctionEvent registers a new resource with the given unique name, arguments, and options.
func NewFgsFunctionEvent(ctx *pulumi.Context,
	name string, args *FgsFunctionEventArgs, opts ...pulumi.ResourceOption) (*FgsFunctionEvent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.FunctionUrn == nil {
		return nil, errors.New("invalid value for required argument 'FunctionUrn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FgsFunctionEvent
	err := ctx.RegisterResource("sbercloud:index/fgsFunctionEvent:FgsFunctionEvent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFgsFunctionEvent gets an existing FgsFunctionEvent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFgsFunctionEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FgsFunctionEventState, opts ...pulumi.ResourceOption) (*FgsFunctionEvent, error) {
	var resource FgsFunctionEvent
	err := ctx.ReadResource("sbercloud:index/fgsFunctionEvent:FgsFunctionEvent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FgsFunctionEvent resources.
type fgsFunctionEventState struct {
	// Specifies the function event content.\
	// The value is the base64 encoding of the JSON string.
	Content *string `pulumi:"content"`
	// Specifies the URN of the function to which the event blongs.\
	// Changing this parameter will create a new resource.
	FunctionUrn *string `pulumi:"functionUrn"`
	// Specifies the function event name.\
	// The name can contain a maximum of `25` characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the region where the function event is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The latest update (UTC) time of the function event, in RFC3339 format.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type FgsFunctionEventState struct {
	// Specifies the function event content.\
	// The value is the base64 encoding of the JSON string.
	Content pulumi.StringPtrInput
	// Specifies the URN of the function to which the event blongs.\
	// Changing this parameter will create a new resource.
	FunctionUrn pulumi.StringPtrInput
	// Specifies the function event name.\
	// The name can contain a maximum of `25` characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the region where the function event is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The latest update (UTC) time of the function event, in RFC3339 format.
	UpdatedAt pulumi.StringPtrInput
}

func (FgsFunctionEventState) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionEventState)(nil)).Elem()
}

type fgsFunctionEventArgs struct {
	// Specifies the function event content.\
	// The value is the base64 encoding of the JSON string.
	Content string `pulumi:"content"`
	// Specifies the URN of the function to which the event blongs.\
	// Changing this parameter will create a new resource.
	FunctionUrn string `pulumi:"functionUrn"`
	// Specifies the function event name.\
	// The name can contain a maximum of `25` characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name *string `pulumi:"name"`
	// Specifies the region where the function event is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a FgsFunctionEvent resource.
type FgsFunctionEventArgs struct {
	// Specifies the function event content.\
	// The value is the base64 encoding of the JSON string.
	Content pulumi.StringInput
	// Specifies the URN of the function to which the event blongs.\
	// Changing this parameter will create a new resource.
	FunctionUrn pulumi.StringInput
	// Specifies the function event name.\
	// The name can contain a maximum of `25` characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	Name pulumi.StringPtrInput
	// Specifies the region where the function event is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (FgsFunctionEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionEventArgs)(nil)).Elem()
}

type FgsFunctionEventInput interface {
	pulumi.Input

	ToFgsFunctionEventOutput() FgsFunctionEventOutput
	ToFgsFunctionEventOutputWithContext(ctx context.Context) FgsFunctionEventOutput
}

func (*FgsFunctionEvent) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunctionEvent)(nil)).Elem()
}

func (i *FgsFunctionEvent) ToFgsFunctionEventOutput() FgsFunctionEventOutput {
	return i.ToFgsFunctionEventOutputWithContext(context.Background())
}

func (i *FgsFunctionEvent) ToFgsFunctionEventOutputWithContext(ctx context.Context) FgsFunctionEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionEventOutput)
}

// FgsFunctionEventArrayInput is an input type that accepts FgsFunctionEventArray and FgsFunctionEventArrayOutput values.
// You can construct a concrete instance of `FgsFunctionEventArrayInput` via:
//
//	FgsFunctionEventArray{ FgsFunctionEventArgs{...} }
type FgsFunctionEventArrayInput interface {
	pulumi.Input

	ToFgsFunctionEventArrayOutput() FgsFunctionEventArrayOutput
	ToFgsFunctionEventArrayOutputWithContext(context.Context) FgsFunctionEventArrayOutput
}

type FgsFunctionEventArray []FgsFunctionEventInput

func (FgsFunctionEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunctionEvent)(nil)).Elem()
}

func (i FgsFunctionEventArray) ToFgsFunctionEventArrayOutput() FgsFunctionEventArrayOutput {
	return i.ToFgsFunctionEventArrayOutputWithContext(context.Background())
}

func (i FgsFunctionEventArray) ToFgsFunctionEventArrayOutputWithContext(ctx context.Context) FgsFunctionEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionEventArrayOutput)
}

// FgsFunctionEventMapInput is an input type that accepts FgsFunctionEventMap and FgsFunctionEventMapOutput values.
// You can construct a concrete instance of `FgsFunctionEventMapInput` via:
//
//	FgsFunctionEventMap{ "key": FgsFunctionEventArgs{...} }
type FgsFunctionEventMapInput interface {
	pulumi.Input

	ToFgsFunctionEventMapOutput() FgsFunctionEventMapOutput
	ToFgsFunctionEventMapOutputWithContext(context.Context) FgsFunctionEventMapOutput
}

type FgsFunctionEventMap map[string]FgsFunctionEventInput

func (FgsFunctionEventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunctionEvent)(nil)).Elem()
}

func (i FgsFunctionEventMap) ToFgsFunctionEventMapOutput() FgsFunctionEventMapOutput {
	return i.ToFgsFunctionEventMapOutputWithContext(context.Background())
}

func (i FgsFunctionEventMap) ToFgsFunctionEventMapOutputWithContext(ctx context.Context) FgsFunctionEventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionEventMapOutput)
}

type FgsFunctionEventOutput struct{ *pulumi.OutputState }

func (FgsFunctionEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunctionEvent)(nil)).Elem()
}

func (o FgsFunctionEventOutput) ToFgsFunctionEventOutput() FgsFunctionEventOutput {
	return o
}

func (o FgsFunctionEventOutput) ToFgsFunctionEventOutputWithContext(ctx context.Context) FgsFunctionEventOutput {
	return o
}

// Specifies the function event content.\
// The value is the base64 encoding of the JSON string.
func (o FgsFunctionEventOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionEvent) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Specifies the URN of the function to which the event blongs.\
// Changing this parameter will create a new resource.
func (o FgsFunctionEventOutput) FunctionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionEvent) pulumi.StringOutput { return v.FunctionUrn }).(pulumi.StringOutput)
}

// Specifies the function event name.\
// The name can contain a maximum of `25` characters and must start with a letter and end with a letter or digit.
// Only letters, digits, underscores (_) and hyphens (-) are allowed.
func (o FgsFunctionEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionEvent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region where the function event is located.\
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o FgsFunctionEventOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionEvent) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The latest update (UTC) time of the function event, in RFC3339 format.
func (o FgsFunctionEventOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionEvent) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type FgsFunctionEventArrayOutput struct{ *pulumi.OutputState }

func (FgsFunctionEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunctionEvent)(nil)).Elem()
}

func (o FgsFunctionEventArrayOutput) ToFgsFunctionEventArrayOutput() FgsFunctionEventArrayOutput {
	return o
}

func (o FgsFunctionEventArrayOutput) ToFgsFunctionEventArrayOutputWithContext(ctx context.Context) FgsFunctionEventArrayOutput {
	return o
}

func (o FgsFunctionEventArrayOutput) Index(i pulumi.IntInput) FgsFunctionEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FgsFunctionEvent {
		return vs[0].([]*FgsFunctionEvent)[vs[1].(int)]
	}).(FgsFunctionEventOutput)
}

type FgsFunctionEventMapOutput struct{ *pulumi.OutputState }

func (FgsFunctionEventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunctionEvent)(nil)).Elem()
}

func (o FgsFunctionEventMapOutput) ToFgsFunctionEventMapOutput() FgsFunctionEventMapOutput {
	return o
}

func (o FgsFunctionEventMapOutput) ToFgsFunctionEventMapOutputWithContext(ctx context.Context) FgsFunctionEventMapOutput {
	return o
}

func (o FgsFunctionEventMapOutput) MapIndex(k pulumi.StringInput) FgsFunctionEventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FgsFunctionEvent {
		return vs[0].(map[string]*FgsFunctionEvent)[vs[1].(string)]
	}).(FgsFunctionEventOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionEventInput)(nil)).Elem(), &FgsFunctionEvent{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionEventArrayInput)(nil)).Elem(), FgsFunctionEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionEventMapInput)(nil)).Elem(), FgsFunctionEventMap{})
	pulumi.RegisterOutputType(FgsFunctionEventOutput{})
	pulumi.RegisterOutputType(FgsFunctionEventArrayOutput{})
	pulumi.RegisterOutputType(FgsFunctionEventMapOutput{})
}

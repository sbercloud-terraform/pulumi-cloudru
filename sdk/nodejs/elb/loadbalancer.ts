// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Loadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing Loadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerState, opts?: pulumi.CustomResourceOptions): Loadbalancer {
        return new Loadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Elb/loadbalancer:Loadbalancer';

    /**
     * Returns true if the given object is an instance of Loadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Loadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Loadbalancer.__pulumiType;
    }

    /**
     * schema: Deprecated
     */
    declare public readonly adminStateUp: pulumi.Output<boolean | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly chargeMode: pulumi.Output<string>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    declare public readonly flavor: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly frozenScene: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    declare public readonly loadbalancerProvider: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly protectionReason: pulumi.Output<string | undefined>;
    declare public readonly protectionStatus: pulumi.Output<string>;
    declare public /*out*/ readonly publicIp: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    /**
     * @deprecated tenant_id is deprecated
     */
    declare public readonly tenantId: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public readonly vipAddress: pulumi.Output<string>;
    declare public /*out*/ readonly vipPortId: pulumi.Output<string>;
    /**
     * the IPv4 subnet ID of the subnet where the load balancer works
     */
    declare public readonly vipSubnetId: pulumi.Output<string>;

    /**
     * Create a Loadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerArgs | LoadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerState | undefined;
            resourceInputs["adminStateUp"] = state?.adminStateUp;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["chargeMode"] = state?.chargeMode;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["flavor"] = state?.flavor;
            resourceInputs["frozenScene"] = state?.frozenScene;
            resourceInputs["loadbalancerProvider"] = state?.loadbalancerProvider;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["protectionReason"] = state?.protectionReason;
            resourceInputs["protectionStatus"] = state?.protectionStatus;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vipAddress"] = state?.vipAddress;
            resourceInputs["vipPortId"] = state?.vipPortId;
            resourceInputs["vipSubnetId"] = state?.vipSubnetId;
        } else {
            const args = argsOrState as LoadbalancerArgs | undefined;
            if (args?.vipSubnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vipSubnetId'");
            }
            resourceInputs["adminStateUp"] = args?.adminStateUp;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["description"] = args?.description;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["flavor"] = args?.flavor;
            resourceInputs["loadbalancerProvider"] = args?.loadbalancerProvider;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["protectionReason"] = args?.protectionReason;
            resourceInputs["protectionStatus"] = args?.protectionStatus;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["vipAddress"] = args?.vipAddress;
            resourceInputs["vipSubnetId"] = args?.vipSubnetId;
            resourceInputs["chargeMode"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["frozenScene"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["vipPortId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Loadbalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Loadbalancer resources.
 */
export interface LoadbalancerState {
    /**
     * schema: Deprecated
     */
    adminStateUp?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<string>;
    chargeMode?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    flavor?: pulumi.Input<string>;
    frozenScene?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    loadbalancerProvider?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    protectionReason?: pulumi.Input<string>;
    protectionStatus?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated tenant_id is deprecated
     */
    tenantId?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    vipAddress?: pulumi.Input<string>;
    vipPortId?: pulumi.Input<string>;
    /**
     * the IPv4 subnet ID of the subnet where the load balancer works
     */
    vipSubnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Loadbalancer resource.
 */
export interface LoadbalancerArgs {
    /**
     * schema: Deprecated
     */
    adminStateUp?: pulumi.Input<boolean>;
    autoRenew?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    flavor?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    loadbalancerProvider?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    protectionReason?: pulumi.Input<string>;
    protectionStatus?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated tenant_id is deprecated
     */
    tenantId?: pulumi.Input<string>;
    vipAddress?: pulumi.Input<string>;
    /**
     * the IPv4 subnet ID of the subnet where the load balancer works
     */
    vipSubnetId: pulumi.Input<string>;
}

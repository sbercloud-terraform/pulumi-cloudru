// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DnsResolution struct {
	pulumi.CustomResourceState

	// The custom DNS servers.
	CustomDnsServers pulumi.StringArrayOutput `pulumi:"customDnsServers"`
	// The default DNS servers.
	DefaultDnsServers pulumi.StringArrayOutput `pulumi:"defaultDnsServers"`
	// The ID of the firewall.
	FwInstanceId pulumi.StringOutput `pulumi:"fwInstanceId"`
	// The health check domain name.
	HealthCheckDomainName pulumi.StringOutput `pulumi:"healthCheckDomainName"`
	Region                pulumi.StringOutput `pulumi:"region"`
}

// NewDnsResolution registers a new resource with the given unique name, arguments, and options.
func NewDnsResolution(ctx *pulumi.Context,
	name string, args *DnsResolutionArgs, opts ...pulumi.ResourceOption) (*DnsResolution, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FwInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'FwInstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsResolution
	err := ctx.RegisterResource("sbercloud:Cfw/dnsResolution:DnsResolution", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsResolution gets an existing DnsResolution resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsResolution(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsResolutionState, opts ...pulumi.ResourceOption) (*DnsResolution, error) {
	var resource DnsResolution
	err := ctx.ReadResource("sbercloud:Cfw/dnsResolution:DnsResolution", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsResolution resources.
type dnsResolutionState struct {
	// The custom DNS servers.
	CustomDnsServers []string `pulumi:"customDnsServers"`
	// The default DNS servers.
	DefaultDnsServers []string `pulumi:"defaultDnsServers"`
	// The ID of the firewall.
	FwInstanceId *string `pulumi:"fwInstanceId"`
	// The health check domain name.
	HealthCheckDomainName *string `pulumi:"healthCheckDomainName"`
	Region                *string `pulumi:"region"`
}

type DnsResolutionState struct {
	// The custom DNS servers.
	CustomDnsServers pulumi.StringArrayInput
	// The default DNS servers.
	DefaultDnsServers pulumi.StringArrayInput
	// The ID of the firewall.
	FwInstanceId pulumi.StringPtrInput
	// The health check domain name.
	HealthCheckDomainName pulumi.StringPtrInput
	Region                pulumi.StringPtrInput
}

func (DnsResolutionState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsResolutionState)(nil)).Elem()
}

type dnsResolutionArgs struct {
	// The custom DNS servers.
	CustomDnsServers []string `pulumi:"customDnsServers"`
	// The default DNS servers.
	DefaultDnsServers []string `pulumi:"defaultDnsServers"`
	// The ID of the firewall.
	FwInstanceId string `pulumi:"fwInstanceId"`
	// The health check domain name.
	HealthCheckDomainName *string `pulumi:"healthCheckDomainName"`
	Region                *string `pulumi:"region"`
}

// The set of arguments for constructing a DnsResolution resource.
type DnsResolutionArgs struct {
	// The custom DNS servers.
	CustomDnsServers pulumi.StringArrayInput
	// The default DNS servers.
	DefaultDnsServers pulumi.StringArrayInput
	// The ID of the firewall.
	FwInstanceId pulumi.StringInput
	// The health check domain name.
	HealthCheckDomainName pulumi.StringPtrInput
	Region                pulumi.StringPtrInput
}

func (DnsResolutionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsResolutionArgs)(nil)).Elem()
}

type DnsResolutionInput interface {
	pulumi.Input

	ToDnsResolutionOutput() DnsResolutionOutput
	ToDnsResolutionOutputWithContext(ctx context.Context) DnsResolutionOutput
}

func (*DnsResolution) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsResolution)(nil)).Elem()
}

func (i *DnsResolution) ToDnsResolutionOutput() DnsResolutionOutput {
	return i.ToDnsResolutionOutputWithContext(context.Background())
}

func (i *DnsResolution) ToDnsResolutionOutputWithContext(ctx context.Context) DnsResolutionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsResolutionOutput)
}

// DnsResolutionArrayInput is an input type that accepts DnsResolutionArray and DnsResolutionArrayOutput values.
// You can construct a concrete instance of `DnsResolutionArrayInput` via:
//
//	DnsResolutionArray{ DnsResolutionArgs{...} }
type DnsResolutionArrayInput interface {
	pulumi.Input

	ToDnsResolutionArrayOutput() DnsResolutionArrayOutput
	ToDnsResolutionArrayOutputWithContext(context.Context) DnsResolutionArrayOutput
}

type DnsResolutionArray []DnsResolutionInput

func (DnsResolutionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsResolution)(nil)).Elem()
}

func (i DnsResolutionArray) ToDnsResolutionArrayOutput() DnsResolutionArrayOutput {
	return i.ToDnsResolutionArrayOutputWithContext(context.Background())
}

func (i DnsResolutionArray) ToDnsResolutionArrayOutputWithContext(ctx context.Context) DnsResolutionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsResolutionArrayOutput)
}

// DnsResolutionMapInput is an input type that accepts DnsResolutionMap and DnsResolutionMapOutput values.
// You can construct a concrete instance of `DnsResolutionMapInput` via:
//
//	DnsResolutionMap{ "key": DnsResolutionArgs{...} }
type DnsResolutionMapInput interface {
	pulumi.Input

	ToDnsResolutionMapOutput() DnsResolutionMapOutput
	ToDnsResolutionMapOutputWithContext(context.Context) DnsResolutionMapOutput
}

type DnsResolutionMap map[string]DnsResolutionInput

func (DnsResolutionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsResolution)(nil)).Elem()
}

func (i DnsResolutionMap) ToDnsResolutionMapOutput() DnsResolutionMapOutput {
	return i.ToDnsResolutionMapOutputWithContext(context.Background())
}

func (i DnsResolutionMap) ToDnsResolutionMapOutputWithContext(ctx context.Context) DnsResolutionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsResolutionMapOutput)
}

type DnsResolutionOutput struct{ *pulumi.OutputState }

func (DnsResolutionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsResolution)(nil)).Elem()
}

func (o DnsResolutionOutput) ToDnsResolutionOutput() DnsResolutionOutput {
	return o
}

func (o DnsResolutionOutput) ToDnsResolutionOutputWithContext(ctx context.Context) DnsResolutionOutput {
	return o
}

// The custom DNS servers.
func (o DnsResolutionOutput) CustomDnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsResolution) pulumi.StringArrayOutput { return v.CustomDnsServers }).(pulumi.StringArrayOutput)
}

// The default DNS servers.
func (o DnsResolutionOutput) DefaultDnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsResolution) pulumi.StringArrayOutput { return v.DefaultDnsServers }).(pulumi.StringArrayOutput)
}

// The ID of the firewall.
func (o DnsResolutionOutput) FwInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsResolution) pulumi.StringOutput { return v.FwInstanceId }).(pulumi.StringOutput)
}

// The health check domain name.
func (o DnsResolutionOutput) HealthCheckDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsResolution) pulumi.StringOutput { return v.HealthCheckDomainName }).(pulumi.StringOutput)
}

func (o DnsResolutionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsResolution) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type DnsResolutionArrayOutput struct{ *pulumi.OutputState }

func (DnsResolutionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsResolution)(nil)).Elem()
}

func (o DnsResolutionArrayOutput) ToDnsResolutionArrayOutput() DnsResolutionArrayOutput {
	return o
}

func (o DnsResolutionArrayOutput) ToDnsResolutionArrayOutputWithContext(ctx context.Context) DnsResolutionArrayOutput {
	return o
}

func (o DnsResolutionArrayOutput) Index(i pulumi.IntInput) DnsResolutionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsResolution {
		return vs[0].([]*DnsResolution)[vs[1].(int)]
	}).(DnsResolutionOutput)
}

type DnsResolutionMapOutput struct{ *pulumi.OutputState }

func (DnsResolutionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsResolution)(nil)).Elem()
}

func (o DnsResolutionMapOutput) ToDnsResolutionMapOutput() DnsResolutionMapOutput {
	return o
}

func (o DnsResolutionMapOutput) ToDnsResolutionMapOutputWithContext(ctx context.Context) DnsResolutionMapOutput {
	return o
}

func (o DnsResolutionMapOutput) MapIndex(k pulumi.StringInput) DnsResolutionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsResolution {
		return vs[0].(map[string]*DnsResolution)[vs[1].(string)]
	}).(DnsResolutionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsResolutionInput)(nil)).Elem(), &DnsResolution{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsResolutionArrayInput)(nil)).Elem(), DnsResolutionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsResolutionMapInput)(nil)).Elem(), DnsResolutionMap{})
	pulumi.RegisterOutputType(DnsResolutionOutput{})
	pulumi.RegisterOutputType(DnsResolutionArrayOutput{})
	pulumi.RegisterOutputType(DnsResolutionMapOutput{})
}

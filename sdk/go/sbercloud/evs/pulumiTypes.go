// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

var _ = internal.GetEnvOrDefault

type VolumeAttachment struct {
	AttachedAt       *string `pulumi:"attachedAt"`
	AttachedVolumeId *string `pulumi:"attachedVolumeId"`
	Device           *string `pulumi:"device"`
	HostName         *string `pulumi:"hostName"`
	// Specifies a resource ID in UUID format.
	Id         *string `pulumi:"id"`
	InstanceId *string `pulumi:"instanceId"`
	VolumeId   *string `pulumi:"volumeId"`
}

// VolumeAttachmentInput is an input type that accepts VolumeAttachmentArgs and VolumeAttachmentOutput values.
// You can construct a concrete instance of `VolumeAttachmentInput` via:
//
//	VolumeAttachmentArgs{...}
type VolumeAttachmentInput interface {
	pulumi.Input

	ToVolumeAttachmentOutput() VolumeAttachmentOutput
	ToVolumeAttachmentOutputWithContext(context.Context) VolumeAttachmentOutput
}

type VolumeAttachmentArgs struct {
	AttachedAt       pulumi.StringPtrInput `pulumi:"attachedAt"`
	AttachedVolumeId pulumi.StringPtrInput `pulumi:"attachedVolumeId"`
	Device           pulumi.StringPtrInput `pulumi:"device"`
	HostName         pulumi.StringPtrInput `pulumi:"hostName"`
	// Specifies a resource ID in UUID format.
	Id         pulumi.StringPtrInput `pulumi:"id"`
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	VolumeId   pulumi.StringPtrInput `pulumi:"volumeId"`
}

func (VolumeAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArgs) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return i.ToVolumeAttachmentOutputWithContext(context.Background())
}

func (i VolumeAttachmentArgs) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentOutput)
}

// VolumeAttachmentArrayInput is an input type that accepts VolumeAttachmentArray and VolumeAttachmentArrayOutput values.
// You can construct a concrete instance of `VolumeAttachmentArrayInput` via:
//
//	VolumeAttachmentArray{ VolumeAttachmentArgs{...} }
type VolumeAttachmentArrayInput interface {
	pulumi.Input

	ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput
	ToVolumeAttachmentArrayOutputWithContext(context.Context) VolumeAttachmentArrayOutput
}

type VolumeAttachmentArray []VolumeAttachmentInput

func (VolumeAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachment)(nil)).Elem()
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return i.ToVolumeAttachmentArrayOutputWithContext(context.Background())
}

func (i VolumeAttachmentArray) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachmentArrayOutput)
}

type VolumeAttachmentOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutput() VolumeAttachmentOutput {
	return o
}

func (o VolumeAttachmentOutput) ToVolumeAttachmentOutputWithContext(ctx context.Context) VolumeAttachmentOutput {
	return o
}

func (o VolumeAttachmentOutput) AttachedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.AttachedAt }).(pulumi.StringPtrOutput)
}

func (o VolumeAttachmentOutput) AttachedVolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.AttachedVolumeId }).(pulumi.StringPtrOutput)
}

func (o VolumeAttachmentOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o VolumeAttachmentOutput) HostName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.HostName }).(pulumi.StringPtrOutput)
}

// Specifies a resource ID in UUID format.
func (o VolumeAttachmentOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o VolumeAttachmentOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o VolumeAttachmentOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeAttachment) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

type VolumeAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeAttachment)(nil)).Elem()
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutput() VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) ToVolumeAttachmentArrayOutputWithContext(ctx context.Context) VolumeAttachmentArrayOutput {
	return o
}

func (o VolumeAttachmentArrayOutput) Index(i pulumi.IntInput) VolumeAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeAttachment {
		return vs[0].([]VolumeAttachment)[vs[1].(int)]
	}).(VolumeAttachmentOutput)
}

type VolumeIopsAttribute struct {
	Frozened *bool `pulumi:"frozened"`
	// Specifies a resource ID in UUID format.
	Id       *string `pulumi:"id"`
	TotalVal *int    `pulumi:"totalVal"`
}

// VolumeIopsAttributeInput is an input type that accepts VolumeIopsAttributeArgs and VolumeIopsAttributeOutput values.
// You can construct a concrete instance of `VolumeIopsAttributeInput` via:
//
//	VolumeIopsAttributeArgs{...}
type VolumeIopsAttributeInput interface {
	pulumi.Input

	ToVolumeIopsAttributeOutput() VolumeIopsAttributeOutput
	ToVolumeIopsAttributeOutputWithContext(context.Context) VolumeIopsAttributeOutput
}

type VolumeIopsAttributeArgs struct {
	Frozened pulumi.BoolPtrInput `pulumi:"frozened"`
	// Specifies a resource ID in UUID format.
	Id       pulumi.StringPtrInput `pulumi:"id"`
	TotalVal pulumi.IntPtrInput    `pulumi:"totalVal"`
}

func (VolumeIopsAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeIopsAttribute)(nil)).Elem()
}

func (i VolumeIopsAttributeArgs) ToVolumeIopsAttributeOutput() VolumeIopsAttributeOutput {
	return i.ToVolumeIopsAttributeOutputWithContext(context.Background())
}

func (i VolumeIopsAttributeArgs) ToVolumeIopsAttributeOutputWithContext(ctx context.Context) VolumeIopsAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeIopsAttributeOutput)
}

// VolumeIopsAttributeArrayInput is an input type that accepts VolumeIopsAttributeArray and VolumeIopsAttributeArrayOutput values.
// You can construct a concrete instance of `VolumeIopsAttributeArrayInput` via:
//
//	VolumeIopsAttributeArray{ VolumeIopsAttributeArgs{...} }
type VolumeIopsAttributeArrayInput interface {
	pulumi.Input

	ToVolumeIopsAttributeArrayOutput() VolumeIopsAttributeArrayOutput
	ToVolumeIopsAttributeArrayOutputWithContext(context.Context) VolumeIopsAttributeArrayOutput
}

type VolumeIopsAttributeArray []VolumeIopsAttributeInput

func (VolumeIopsAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeIopsAttribute)(nil)).Elem()
}

func (i VolumeIopsAttributeArray) ToVolumeIopsAttributeArrayOutput() VolumeIopsAttributeArrayOutput {
	return i.ToVolumeIopsAttributeArrayOutputWithContext(context.Background())
}

func (i VolumeIopsAttributeArray) ToVolumeIopsAttributeArrayOutputWithContext(ctx context.Context) VolumeIopsAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeIopsAttributeArrayOutput)
}

type VolumeIopsAttributeOutput struct{ *pulumi.OutputState }

func (VolumeIopsAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeIopsAttribute)(nil)).Elem()
}

func (o VolumeIopsAttributeOutput) ToVolumeIopsAttributeOutput() VolumeIopsAttributeOutput {
	return o
}

func (o VolumeIopsAttributeOutput) ToVolumeIopsAttributeOutputWithContext(ctx context.Context) VolumeIopsAttributeOutput {
	return o
}

func (o VolumeIopsAttributeOutput) Frozened() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeIopsAttribute) *bool { return v.Frozened }).(pulumi.BoolPtrOutput)
}

// Specifies a resource ID in UUID format.
func (o VolumeIopsAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeIopsAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o VolumeIopsAttributeOutput) TotalVal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeIopsAttribute) *int { return v.TotalVal }).(pulumi.IntPtrOutput)
}

type VolumeIopsAttributeArrayOutput struct{ *pulumi.OutputState }

func (VolumeIopsAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeIopsAttribute)(nil)).Elem()
}

func (o VolumeIopsAttributeArrayOutput) ToVolumeIopsAttributeArrayOutput() VolumeIopsAttributeArrayOutput {
	return o
}

func (o VolumeIopsAttributeArrayOutput) ToVolumeIopsAttributeArrayOutputWithContext(ctx context.Context) VolumeIopsAttributeArrayOutput {
	return o
}

func (o VolumeIopsAttributeArrayOutput) Index(i pulumi.IntInput) VolumeIopsAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeIopsAttribute {
		return vs[0].([]VolumeIopsAttribute)[vs[1].(int)]
	}).(VolumeIopsAttributeOutput)
}

type VolumeLink struct {
	Href *string `pulumi:"href"`
	Rel  *string `pulumi:"rel"`
}

// VolumeLinkInput is an input type that accepts VolumeLinkArgs and VolumeLinkOutput values.
// You can construct a concrete instance of `VolumeLinkInput` via:
//
//	VolumeLinkArgs{...}
type VolumeLinkInput interface {
	pulumi.Input

	ToVolumeLinkOutput() VolumeLinkOutput
	ToVolumeLinkOutputWithContext(context.Context) VolumeLinkOutput
}

type VolumeLinkArgs struct {
	Href pulumi.StringPtrInput `pulumi:"href"`
	Rel  pulumi.StringPtrInput `pulumi:"rel"`
}

func (VolumeLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeLink)(nil)).Elem()
}

func (i VolumeLinkArgs) ToVolumeLinkOutput() VolumeLinkOutput {
	return i.ToVolumeLinkOutputWithContext(context.Background())
}

func (i VolumeLinkArgs) ToVolumeLinkOutputWithContext(ctx context.Context) VolumeLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeLinkOutput)
}

// VolumeLinkArrayInput is an input type that accepts VolumeLinkArray and VolumeLinkArrayOutput values.
// You can construct a concrete instance of `VolumeLinkArrayInput` via:
//
//	VolumeLinkArray{ VolumeLinkArgs{...} }
type VolumeLinkArrayInput interface {
	pulumi.Input

	ToVolumeLinkArrayOutput() VolumeLinkArrayOutput
	ToVolumeLinkArrayOutputWithContext(context.Context) VolumeLinkArrayOutput
}

type VolumeLinkArray []VolumeLinkInput

func (VolumeLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeLink)(nil)).Elem()
}

func (i VolumeLinkArray) ToVolumeLinkArrayOutput() VolumeLinkArrayOutput {
	return i.ToVolumeLinkArrayOutputWithContext(context.Background())
}

func (i VolumeLinkArray) ToVolumeLinkArrayOutputWithContext(ctx context.Context) VolumeLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeLinkArrayOutput)
}

type VolumeLinkOutput struct{ *pulumi.OutputState }

func (VolumeLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeLink)(nil)).Elem()
}

func (o VolumeLinkOutput) ToVolumeLinkOutput() VolumeLinkOutput {
	return o
}

func (o VolumeLinkOutput) ToVolumeLinkOutputWithContext(ctx context.Context) VolumeLinkOutput {
	return o
}

func (o VolumeLinkOutput) Href() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeLink) *string { return v.Href }).(pulumi.StringPtrOutput)
}

func (o VolumeLinkOutput) Rel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeLink) *string { return v.Rel }).(pulumi.StringPtrOutput)
}

type VolumeLinkArrayOutput struct{ *pulumi.OutputState }

func (VolumeLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeLink)(nil)).Elem()
}

func (o VolumeLinkArrayOutput) ToVolumeLinkArrayOutput() VolumeLinkArrayOutput {
	return o
}

func (o VolumeLinkArrayOutput) ToVolumeLinkArrayOutputWithContext(ctx context.Context) VolumeLinkArrayOutput {
	return o
}

func (o VolumeLinkArrayOutput) Index(i pulumi.IntInput) VolumeLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeLink {
		return vs[0].([]VolumeLink)[vs[1].(int)]
	}).(VolumeLinkOutput)
}

type VolumeThroughputAttribute struct {
	Frozened *bool `pulumi:"frozened"`
	// Specifies a resource ID in UUID format.
	Id       *string `pulumi:"id"`
	TotalVal *int    `pulumi:"totalVal"`
}

// VolumeThroughputAttributeInput is an input type that accepts VolumeThroughputAttributeArgs and VolumeThroughputAttributeOutput values.
// You can construct a concrete instance of `VolumeThroughputAttributeInput` via:
//
//	VolumeThroughputAttributeArgs{...}
type VolumeThroughputAttributeInput interface {
	pulumi.Input

	ToVolumeThroughputAttributeOutput() VolumeThroughputAttributeOutput
	ToVolumeThroughputAttributeOutputWithContext(context.Context) VolumeThroughputAttributeOutput
}

type VolumeThroughputAttributeArgs struct {
	Frozened pulumi.BoolPtrInput `pulumi:"frozened"`
	// Specifies a resource ID in UUID format.
	Id       pulumi.StringPtrInput `pulumi:"id"`
	TotalVal pulumi.IntPtrInput    `pulumi:"totalVal"`
}

func (VolumeThroughputAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeThroughputAttribute)(nil)).Elem()
}

func (i VolumeThroughputAttributeArgs) ToVolumeThroughputAttributeOutput() VolumeThroughputAttributeOutput {
	return i.ToVolumeThroughputAttributeOutputWithContext(context.Background())
}

func (i VolumeThroughputAttributeArgs) ToVolumeThroughputAttributeOutputWithContext(ctx context.Context) VolumeThroughputAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeThroughputAttributeOutput)
}

// VolumeThroughputAttributeArrayInput is an input type that accepts VolumeThroughputAttributeArray and VolumeThroughputAttributeArrayOutput values.
// You can construct a concrete instance of `VolumeThroughputAttributeArrayInput` via:
//
//	VolumeThroughputAttributeArray{ VolumeThroughputAttributeArgs{...} }
type VolumeThroughputAttributeArrayInput interface {
	pulumi.Input

	ToVolumeThroughputAttributeArrayOutput() VolumeThroughputAttributeArrayOutput
	ToVolumeThroughputAttributeArrayOutputWithContext(context.Context) VolumeThroughputAttributeArrayOutput
}

type VolumeThroughputAttributeArray []VolumeThroughputAttributeInput

func (VolumeThroughputAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeThroughputAttribute)(nil)).Elem()
}

func (i VolumeThroughputAttributeArray) ToVolumeThroughputAttributeArrayOutput() VolumeThroughputAttributeArrayOutput {
	return i.ToVolumeThroughputAttributeArrayOutputWithContext(context.Background())
}

func (i VolumeThroughputAttributeArray) ToVolumeThroughputAttributeArrayOutputWithContext(ctx context.Context) VolumeThroughputAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeThroughputAttributeArrayOutput)
}

type VolumeThroughputAttributeOutput struct{ *pulumi.OutputState }

func (VolumeThroughputAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeThroughputAttribute)(nil)).Elem()
}

func (o VolumeThroughputAttributeOutput) ToVolumeThroughputAttributeOutput() VolumeThroughputAttributeOutput {
	return o
}

func (o VolumeThroughputAttributeOutput) ToVolumeThroughputAttributeOutputWithContext(ctx context.Context) VolumeThroughputAttributeOutput {
	return o
}

func (o VolumeThroughputAttributeOutput) Frozened() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VolumeThroughputAttribute) *bool { return v.Frozened }).(pulumi.BoolPtrOutput)
}

// Specifies a resource ID in UUID format.
func (o VolumeThroughputAttributeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeThroughputAttribute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o VolumeThroughputAttributeOutput) TotalVal() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VolumeThroughputAttribute) *int { return v.TotalVal }).(pulumi.IntPtrOutput)
}

type VolumeThroughputAttributeArrayOutput struct{ *pulumi.OutputState }

func (VolumeThroughputAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VolumeThroughputAttribute)(nil)).Elem()
}

func (o VolumeThroughputAttributeArrayOutput) ToVolumeThroughputAttributeArrayOutput() VolumeThroughputAttributeArrayOutput {
	return o
}

func (o VolumeThroughputAttributeArrayOutput) ToVolumeThroughputAttributeArrayOutputWithContext(ctx context.Context) VolumeThroughputAttributeArrayOutput {
	return o
}

func (o VolumeThroughputAttributeArrayOutput) Index(i pulumi.IntInput) VolumeThroughputAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VolumeThroughputAttribute {
		return vs[0].([]VolumeThroughputAttribute)[vs[1].(int)]
	}).(VolumeThroughputAttributeOutput)
}

type GetVolumesVolume struct {
	// The disk attachment information. Structure is documented below.
	Attachments []GetVolumesVolumeAttachment `pulumi:"attachments"`
	// Specifies the availability zone for the disks.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Whether the disk is bootable.
	Bootable bool `pulumi:"bootable"`
	// The time when the disk was created.
	CreateAt             string `pulumi:"createAt"`
	DedicatedStorageId   string `pulumi:"dedicatedStorageId"`
	DedicatedStorageName string `pulumi:"dedicatedStorageName"`
	// The disk description.
	Description string `pulumi:"description"`
	// Specifies the enterprise project ID for filtering.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// The ID of the attached resource in UUID format.
	Id             string                          `pulumi:"id"`
	Iops           int                             `pulumi:"iops"`
	IopsAttributes []GetVolumesVolumeIopsAttribute `pulumi:"iopsAttributes"`
	Links          []GetVolumesVolumeLink          `pulumi:"links"`
	Metadata       map[string]string               `pulumi:"metadata"`
	// The disk name.
	Name         string `pulumi:"name"`
	SerialNumber string `pulumi:"serialNumber"`
	// The service type, such as EVS, DSS or DESS.
	ServiceType string `pulumi:"serviceType"`
	// Specifies whether the disk is shareable.
	Shareable bool `pulumi:"shareable"`
	// The disk size, in GB.
	Size       int    `pulumi:"size"`
	SnapshotId string `pulumi:"snapshotId"`
	// Specifies the disk status. The valid values are as following:
	// + **FREEZED**
	// + **BIND_ERROR**
	// + **BINDING**
	// + **PENDING_DELETE**
	// + **PENDING_CREATE**
	// + **NOTIFYING**
	// + **NOTIFY_DELETE**
	// + **PENDING_UPDATE**
	// + **DOWN**
	// + **ACTIVE**
	// + **ELB**
	// + **ERROR**
	// + **VPN**
	Status string `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired disk.
	Tags                 map[string]string                     `pulumi:"tags"`
	Throughput           int                                   `pulumi:"throughput"`
	ThroughputAttributes []GetVolumesVolumeThroughputAttribute `pulumi:"throughputAttributes"`
	// The time when the disk was updated.
	// w
	UpdateAt            string            `pulumi:"updateAt"`
	VolumeImageMetadata map[string]string `pulumi:"volumeImageMetadata"`
	VolumeType          string            `pulumi:"volumeType"`
	// The unique identifier used when attaching the disk.
	Wwn string `pulumi:"wwn"`
}

// GetVolumesVolumeInput is an input type that accepts GetVolumesVolumeArgs and GetVolumesVolumeOutput values.
// You can construct a concrete instance of `GetVolumesVolumeInput` via:
//
//	GetVolumesVolumeArgs{...}
type GetVolumesVolumeInput interface {
	pulumi.Input

	ToGetVolumesVolumeOutput() GetVolumesVolumeOutput
	ToGetVolumesVolumeOutputWithContext(context.Context) GetVolumesVolumeOutput
}

type GetVolumesVolumeArgs struct {
	// The disk attachment information. Structure is documented below.
	Attachments GetVolumesVolumeAttachmentArrayInput `pulumi:"attachments"`
	// Specifies the availability zone for the disks.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// Whether the disk is bootable.
	Bootable pulumi.BoolInput `pulumi:"bootable"`
	// The time when the disk was created.
	CreateAt             pulumi.StringInput `pulumi:"createAt"`
	DedicatedStorageId   pulumi.StringInput `pulumi:"dedicatedStorageId"`
	DedicatedStorageName pulumi.StringInput `pulumi:"dedicatedStorageName"`
	// The disk description.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the enterprise project ID for filtering.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// The ID of the attached resource in UUID format.
	Id             pulumi.StringInput                      `pulumi:"id"`
	Iops           pulumi.IntInput                         `pulumi:"iops"`
	IopsAttributes GetVolumesVolumeIopsAttributeArrayInput `pulumi:"iopsAttributes"`
	Links          GetVolumesVolumeLinkArrayInput          `pulumi:"links"`
	Metadata       pulumi.StringMapInput                   `pulumi:"metadata"`
	// The disk name.
	Name         pulumi.StringInput `pulumi:"name"`
	SerialNumber pulumi.StringInput `pulumi:"serialNumber"`
	// The service type, such as EVS, DSS or DESS.
	ServiceType pulumi.StringInput `pulumi:"serviceType"`
	// Specifies whether the disk is shareable.
	Shareable pulumi.BoolInput `pulumi:"shareable"`
	// The disk size, in GB.
	Size       pulumi.IntInput    `pulumi:"size"`
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// Specifies the disk status. The valid values are as following:
	// + **FREEZED**
	// + **BIND_ERROR**
	// + **BINDING**
	// + **PENDING_DELETE**
	// + **PENDING_CREATE**
	// + **NOTIFYING**
	// + **NOTIFY_DELETE**
	// + **PENDING_UPDATE**
	// + **DOWN**
	// + **ACTIVE**
	// + **ELB**
	// + **ERROR**
	// + **VPN**
	Status pulumi.StringInput `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired disk.
	Tags                 pulumi.StringMapInput                         `pulumi:"tags"`
	Throughput           pulumi.IntInput                               `pulumi:"throughput"`
	ThroughputAttributes GetVolumesVolumeThroughputAttributeArrayInput `pulumi:"throughputAttributes"`
	// The time when the disk was updated.
	// w
	UpdateAt            pulumi.StringInput    `pulumi:"updateAt"`
	VolumeImageMetadata pulumi.StringMapInput `pulumi:"volumeImageMetadata"`
	VolumeType          pulumi.StringInput    `pulumi:"volumeType"`
	// The unique identifier used when attaching the disk.
	Wwn pulumi.StringInput `pulumi:"wwn"`
}

func (GetVolumesVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolume)(nil)).Elem()
}

func (i GetVolumesVolumeArgs) ToGetVolumesVolumeOutput() GetVolumesVolumeOutput {
	return i.ToGetVolumesVolumeOutputWithContext(context.Background())
}

func (i GetVolumesVolumeArgs) ToGetVolumesVolumeOutputWithContext(ctx context.Context) GetVolumesVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeOutput)
}

// GetVolumesVolumeArrayInput is an input type that accepts GetVolumesVolumeArray and GetVolumesVolumeArrayOutput values.
// You can construct a concrete instance of `GetVolumesVolumeArrayInput` via:
//
//	GetVolumesVolumeArray{ GetVolumesVolumeArgs{...} }
type GetVolumesVolumeArrayInput interface {
	pulumi.Input

	ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput
	ToGetVolumesVolumeArrayOutputWithContext(context.Context) GetVolumesVolumeArrayOutput
}

type GetVolumesVolumeArray []GetVolumesVolumeInput

func (GetVolumesVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolume)(nil)).Elem()
}

func (i GetVolumesVolumeArray) ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput {
	return i.ToGetVolumesVolumeArrayOutputWithContext(context.Background())
}

func (i GetVolumesVolumeArray) ToGetVolumesVolumeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeArrayOutput)
}

type GetVolumesVolumeOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolume)(nil)).Elem()
}

func (o GetVolumesVolumeOutput) ToGetVolumesVolumeOutput() GetVolumesVolumeOutput {
	return o
}

func (o GetVolumesVolumeOutput) ToGetVolumesVolumeOutputWithContext(ctx context.Context) GetVolumesVolumeOutput {
	return o
}

// The disk attachment information. Structure is documented below.
func (o GetVolumesVolumeOutput) Attachments() GetVolumesVolumeAttachmentArrayOutput {
	return o.ApplyT(func(v GetVolumesVolume) []GetVolumesVolumeAttachment { return v.Attachments }).(GetVolumesVolumeAttachmentArrayOutput)
}

// Specifies the availability zone for the disks.
func (o GetVolumesVolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Whether the disk is bootable.
func (o GetVolumesVolumeOutput) Bootable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumesVolume) bool { return v.Bootable }).(pulumi.BoolOutput)
}

// The time when the disk was created.
func (o GetVolumesVolumeOutput) CreateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.CreateAt }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeOutput) DedicatedStorageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.DedicatedStorageId }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeOutput) DedicatedStorageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.DedicatedStorageName }).(pulumi.StringOutput)
}

// The disk description.
func (o GetVolumesVolumeOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID for filtering.
func (o GetVolumesVolumeOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The ID of the attached resource in UUID format.
func (o GetVolumesVolumeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolume) int { return v.Iops }).(pulumi.IntOutput)
}

func (o GetVolumesVolumeOutput) IopsAttributes() GetVolumesVolumeIopsAttributeArrayOutput {
	return o.ApplyT(func(v GetVolumesVolume) []GetVolumesVolumeIopsAttribute { return v.IopsAttributes }).(GetVolumesVolumeIopsAttributeArrayOutput)
}

func (o GetVolumesVolumeOutput) Links() GetVolumesVolumeLinkArrayOutput {
	return o.ApplyT(func(v GetVolumesVolume) []GetVolumesVolumeLink { return v.Links }).(GetVolumesVolumeLinkArrayOutput)
}

func (o GetVolumesVolumeOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVolumesVolume) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

// The disk name.
func (o GetVolumesVolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.SerialNumber }).(pulumi.StringOutput)
}

// The service type, such as EVS, DSS or DESS.
func (o GetVolumesVolumeOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.ServiceType }).(pulumi.StringOutput)
}

// Specifies whether the disk is shareable.
func (o GetVolumesVolumeOutput) Shareable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumesVolume) bool { return v.Shareable }).(pulumi.BoolOutput)
}

// The disk size, in GB.
func (o GetVolumesVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolume) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetVolumesVolumeOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// Specifies the disk status. The valid values are as following:
// + **FREEZED**
// + **BIND_ERROR**
// + **BINDING**
// + **PENDING_DELETE**
// + **PENDING_CREATE**
// + **NOTIFYING**
// + **NOTIFY_DELETE**
// + **PENDING_UPDATE**
// + **DOWN**
// + **ACTIVE**
// + **ELB**
// + **ERROR**
// + **VPN**
func (o GetVolumesVolumeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies the included key/value pairs which associated with the desired disk.
func (o GetVolumesVolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVolumesVolume) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetVolumesVolumeOutput) Throughput() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolume) int { return v.Throughput }).(pulumi.IntOutput)
}

func (o GetVolumesVolumeOutput) ThroughputAttributes() GetVolumesVolumeThroughputAttributeArrayOutput {
	return o.ApplyT(func(v GetVolumesVolume) []GetVolumesVolumeThroughputAttribute { return v.ThroughputAttributes }).(GetVolumesVolumeThroughputAttributeArrayOutput)
}

// The time when the disk was updated.
// w
func (o GetVolumesVolumeOutput) UpdateAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.UpdateAt }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeOutput) VolumeImageMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVolumesVolume) map[string]string { return v.VolumeImageMetadata }).(pulumi.StringMapOutput)
}

func (o GetVolumesVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

// The unique identifier used when attaching the disk.
func (o GetVolumesVolumeOutput) Wwn() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolume) string { return v.Wwn }).(pulumi.StringOutput)
}

type GetVolumesVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolume)(nil)).Elem()
}

func (o GetVolumesVolumeArrayOutput) ToGetVolumesVolumeArrayOutput() GetVolumesVolumeArrayOutput {
	return o
}

func (o GetVolumesVolumeArrayOutput) ToGetVolumesVolumeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeArrayOutput {
	return o
}

func (o GetVolumesVolumeArrayOutput) Index(i pulumi.IntInput) GetVolumesVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumesVolume {
		return vs[0].([]GetVolumesVolume)[vs[1].(int)]
	}).(GetVolumesVolumeOutput)
}

type GetVolumesVolumeAttachment struct {
	// The time when the disk was attached.
	AttachedAt string `pulumi:"attachedAt"`
	// The ID of the attachment information.
	AttachedMode     string `pulumi:"attachedMode"`
	AttachedVolumeId string `pulumi:"attachedVolumeId"`
	// The device name to which the disk is attached.
	DeviceName string `pulumi:"deviceName"`
	HostName   string `pulumi:"hostName"`
	// The ID of the attached resource in UUID format.
	Id string `pulumi:"id"`
	// Specifies the server ID to which the disks are attached.
	ServerId string `pulumi:"serverId"`
	VolumeId string `pulumi:"volumeId"`
}

// GetVolumesVolumeAttachmentInput is an input type that accepts GetVolumesVolumeAttachmentArgs and GetVolumesVolumeAttachmentOutput values.
// You can construct a concrete instance of `GetVolumesVolumeAttachmentInput` via:
//
//	GetVolumesVolumeAttachmentArgs{...}
type GetVolumesVolumeAttachmentInput interface {
	pulumi.Input

	ToGetVolumesVolumeAttachmentOutput() GetVolumesVolumeAttachmentOutput
	ToGetVolumesVolumeAttachmentOutputWithContext(context.Context) GetVolumesVolumeAttachmentOutput
}

type GetVolumesVolumeAttachmentArgs struct {
	// The time when the disk was attached.
	AttachedAt pulumi.StringInput `pulumi:"attachedAt"`
	// The ID of the attachment information.
	AttachedMode     pulumi.StringInput `pulumi:"attachedMode"`
	AttachedVolumeId pulumi.StringInput `pulumi:"attachedVolumeId"`
	// The device name to which the disk is attached.
	DeviceName pulumi.StringInput `pulumi:"deviceName"`
	HostName   pulumi.StringInput `pulumi:"hostName"`
	// The ID of the attached resource in UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the server ID to which the disks are attached.
	ServerId pulumi.StringInput `pulumi:"serverId"`
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
}

func (GetVolumesVolumeAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeAttachment)(nil)).Elem()
}

func (i GetVolumesVolumeAttachmentArgs) ToGetVolumesVolumeAttachmentOutput() GetVolumesVolumeAttachmentOutput {
	return i.ToGetVolumesVolumeAttachmentOutputWithContext(context.Background())
}

func (i GetVolumesVolumeAttachmentArgs) ToGetVolumesVolumeAttachmentOutputWithContext(ctx context.Context) GetVolumesVolumeAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeAttachmentOutput)
}

// GetVolumesVolumeAttachmentArrayInput is an input type that accepts GetVolumesVolumeAttachmentArray and GetVolumesVolumeAttachmentArrayOutput values.
// You can construct a concrete instance of `GetVolumesVolumeAttachmentArrayInput` via:
//
//	GetVolumesVolumeAttachmentArray{ GetVolumesVolumeAttachmentArgs{...} }
type GetVolumesVolumeAttachmentArrayInput interface {
	pulumi.Input

	ToGetVolumesVolumeAttachmentArrayOutput() GetVolumesVolumeAttachmentArrayOutput
	ToGetVolumesVolumeAttachmentArrayOutputWithContext(context.Context) GetVolumesVolumeAttachmentArrayOutput
}

type GetVolumesVolumeAttachmentArray []GetVolumesVolumeAttachmentInput

func (GetVolumesVolumeAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeAttachment)(nil)).Elem()
}

func (i GetVolumesVolumeAttachmentArray) ToGetVolumesVolumeAttachmentArrayOutput() GetVolumesVolumeAttachmentArrayOutput {
	return i.ToGetVolumesVolumeAttachmentArrayOutputWithContext(context.Background())
}

func (i GetVolumesVolumeAttachmentArray) ToGetVolumesVolumeAttachmentArrayOutputWithContext(ctx context.Context) GetVolumesVolumeAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeAttachmentArrayOutput)
}

type GetVolumesVolumeAttachmentOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeAttachment)(nil)).Elem()
}

func (o GetVolumesVolumeAttachmentOutput) ToGetVolumesVolumeAttachmentOutput() GetVolumesVolumeAttachmentOutput {
	return o
}

func (o GetVolumesVolumeAttachmentOutput) ToGetVolumesVolumeAttachmentOutputWithContext(ctx context.Context) GetVolumesVolumeAttachmentOutput {
	return o
}

// The time when the disk was attached.
func (o GetVolumesVolumeAttachmentOutput) AttachedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.AttachedAt }).(pulumi.StringOutput)
}

// The ID of the attachment information.
func (o GetVolumesVolumeAttachmentOutput) AttachedMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.AttachedMode }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeAttachmentOutput) AttachedVolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.AttachedVolumeId }).(pulumi.StringOutput)
}

// The device name to which the disk is attached.
func (o GetVolumesVolumeAttachmentOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.DeviceName }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeAttachmentOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.HostName }).(pulumi.StringOutput)
}

// The ID of the attached resource in UUID format.
func (o GetVolumesVolumeAttachmentOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the server ID to which the disks are attached.
func (o GetVolumesVolumeAttachmentOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.ServerId }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeAttachmentOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeAttachment) string { return v.VolumeId }).(pulumi.StringOutput)
}

type GetVolumesVolumeAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeAttachment)(nil)).Elem()
}

func (o GetVolumesVolumeAttachmentArrayOutput) ToGetVolumesVolumeAttachmentArrayOutput() GetVolumesVolumeAttachmentArrayOutput {
	return o
}

func (o GetVolumesVolumeAttachmentArrayOutput) ToGetVolumesVolumeAttachmentArrayOutputWithContext(ctx context.Context) GetVolumesVolumeAttachmentArrayOutput {
	return o
}

func (o GetVolumesVolumeAttachmentArrayOutput) Index(i pulumi.IntInput) GetVolumesVolumeAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumesVolumeAttachment {
		return vs[0].([]GetVolumesVolumeAttachment)[vs[1].(int)]
	}).(GetVolumesVolumeAttachmentOutput)
}

type GetVolumesVolumeIopsAttribute struct {
	Frozened bool `pulumi:"frozened"`
	// The ID of the attached resource in UUID format.
	Id       string `pulumi:"id"`
	TotalVal int    `pulumi:"totalVal"`
}

// GetVolumesVolumeIopsAttributeInput is an input type that accepts GetVolumesVolumeIopsAttributeArgs and GetVolumesVolumeIopsAttributeOutput values.
// You can construct a concrete instance of `GetVolumesVolumeIopsAttributeInput` via:
//
//	GetVolumesVolumeIopsAttributeArgs{...}
type GetVolumesVolumeIopsAttributeInput interface {
	pulumi.Input

	ToGetVolumesVolumeIopsAttributeOutput() GetVolumesVolumeIopsAttributeOutput
	ToGetVolumesVolumeIopsAttributeOutputWithContext(context.Context) GetVolumesVolumeIopsAttributeOutput
}

type GetVolumesVolumeIopsAttributeArgs struct {
	Frozened pulumi.BoolInput `pulumi:"frozened"`
	// The ID of the attached resource in UUID format.
	Id       pulumi.StringInput `pulumi:"id"`
	TotalVal pulumi.IntInput    `pulumi:"totalVal"`
}

func (GetVolumesVolumeIopsAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeIopsAttribute)(nil)).Elem()
}

func (i GetVolumesVolumeIopsAttributeArgs) ToGetVolumesVolumeIopsAttributeOutput() GetVolumesVolumeIopsAttributeOutput {
	return i.ToGetVolumesVolumeIopsAttributeOutputWithContext(context.Background())
}

func (i GetVolumesVolumeIopsAttributeArgs) ToGetVolumesVolumeIopsAttributeOutputWithContext(ctx context.Context) GetVolumesVolumeIopsAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeIopsAttributeOutput)
}

// GetVolumesVolumeIopsAttributeArrayInput is an input type that accepts GetVolumesVolumeIopsAttributeArray and GetVolumesVolumeIopsAttributeArrayOutput values.
// You can construct a concrete instance of `GetVolumesVolumeIopsAttributeArrayInput` via:
//
//	GetVolumesVolumeIopsAttributeArray{ GetVolumesVolumeIopsAttributeArgs{...} }
type GetVolumesVolumeIopsAttributeArrayInput interface {
	pulumi.Input

	ToGetVolumesVolumeIopsAttributeArrayOutput() GetVolumesVolumeIopsAttributeArrayOutput
	ToGetVolumesVolumeIopsAttributeArrayOutputWithContext(context.Context) GetVolumesVolumeIopsAttributeArrayOutput
}

type GetVolumesVolumeIopsAttributeArray []GetVolumesVolumeIopsAttributeInput

func (GetVolumesVolumeIopsAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeIopsAttribute)(nil)).Elem()
}

func (i GetVolumesVolumeIopsAttributeArray) ToGetVolumesVolumeIopsAttributeArrayOutput() GetVolumesVolumeIopsAttributeArrayOutput {
	return i.ToGetVolumesVolumeIopsAttributeArrayOutputWithContext(context.Background())
}

func (i GetVolumesVolumeIopsAttributeArray) ToGetVolumesVolumeIopsAttributeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeIopsAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeIopsAttributeArrayOutput)
}

type GetVolumesVolumeIopsAttributeOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeIopsAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeIopsAttribute)(nil)).Elem()
}

func (o GetVolumesVolumeIopsAttributeOutput) ToGetVolumesVolumeIopsAttributeOutput() GetVolumesVolumeIopsAttributeOutput {
	return o
}

func (o GetVolumesVolumeIopsAttributeOutput) ToGetVolumesVolumeIopsAttributeOutputWithContext(ctx context.Context) GetVolumesVolumeIopsAttributeOutput {
	return o
}

func (o GetVolumesVolumeIopsAttributeOutput) Frozened() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumesVolumeIopsAttribute) bool { return v.Frozened }).(pulumi.BoolOutput)
}

// The ID of the attached resource in UUID format.
func (o GetVolumesVolumeIopsAttributeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeIopsAttribute) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeIopsAttributeOutput) TotalVal() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolumeIopsAttribute) int { return v.TotalVal }).(pulumi.IntOutput)
}

type GetVolumesVolumeIopsAttributeArrayOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeIopsAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeIopsAttribute)(nil)).Elem()
}

func (o GetVolumesVolumeIopsAttributeArrayOutput) ToGetVolumesVolumeIopsAttributeArrayOutput() GetVolumesVolumeIopsAttributeArrayOutput {
	return o
}

func (o GetVolumesVolumeIopsAttributeArrayOutput) ToGetVolumesVolumeIopsAttributeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeIopsAttributeArrayOutput {
	return o
}

func (o GetVolumesVolumeIopsAttributeArrayOutput) Index(i pulumi.IntInput) GetVolumesVolumeIopsAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumesVolumeIopsAttribute {
		return vs[0].([]GetVolumesVolumeIopsAttribute)[vs[1].(int)]
	}).(GetVolumesVolumeIopsAttributeOutput)
}

type GetVolumesVolumeLink struct {
	Href string `pulumi:"href"`
	Rel  string `pulumi:"rel"`
}

// GetVolumesVolumeLinkInput is an input type that accepts GetVolumesVolumeLinkArgs and GetVolumesVolumeLinkOutput values.
// You can construct a concrete instance of `GetVolumesVolumeLinkInput` via:
//
//	GetVolumesVolumeLinkArgs{...}
type GetVolumesVolumeLinkInput interface {
	pulumi.Input

	ToGetVolumesVolumeLinkOutput() GetVolumesVolumeLinkOutput
	ToGetVolumesVolumeLinkOutputWithContext(context.Context) GetVolumesVolumeLinkOutput
}

type GetVolumesVolumeLinkArgs struct {
	Href pulumi.StringInput `pulumi:"href"`
	Rel  pulumi.StringInput `pulumi:"rel"`
}

func (GetVolumesVolumeLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeLink)(nil)).Elem()
}

func (i GetVolumesVolumeLinkArgs) ToGetVolumesVolumeLinkOutput() GetVolumesVolumeLinkOutput {
	return i.ToGetVolumesVolumeLinkOutputWithContext(context.Background())
}

func (i GetVolumesVolumeLinkArgs) ToGetVolumesVolumeLinkOutputWithContext(ctx context.Context) GetVolumesVolumeLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeLinkOutput)
}

// GetVolumesVolumeLinkArrayInput is an input type that accepts GetVolumesVolumeLinkArray and GetVolumesVolumeLinkArrayOutput values.
// You can construct a concrete instance of `GetVolumesVolumeLinkArrayInput` via:
//
//	GetVolumesVolumeLinkArray{ GetVolumesVolumeLinkArgs{...} }
type GetVolumesVolumeLinkArrayInput interface {
	pulumi.Input

	ToGetVolumesVolumeLinkArrayOutput() GetVolumesVolumeLinkArrayOutput
	ToGetVolumesVolumeLinkArrayOutputWithContext(context.Context) GetVolumesVolumeLinkArrayOutput
}

type GetVolumesVolumeLinkArray []GetVolumesVolumeLinkInput

func (GetVolumesVolumeLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeLink)(nil)).Elem()
}

func (i GetVolumesVolumeLinkArray) ToGetVolumesVolumeLinkArrayOutput() GetVolumesVolumeLinkArrayOutput {
	return i.ToGetVolumesVolumeLinkArrayOutputWithContext(context.Background())
}

func (i GetVolumesVolumeLinkArray) ToGetVolumesVolumeLinkArrayOutputWithContext(ctx context.Context) GetVolumesVolumeLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeLinkArrayOutput)
}

type GetVolumesVolumeLinkOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeLink)(nil)).Elem()
}

func (o GetVolumesVolumeLinkOutput) ToGetVolumesVolumeLinkOutput() GetVolumesVolumeLinkOutput {
	return o
}

func (o GetVolumesVolumeLinkOutput) ToGetVolumesVolumeLinkOutputWithContext(ctx context.Context) GetVolumesVolumeLinkOutput {
	return o
}

func (o GetVolumesVolumeLinkOutput) Href() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeLink) string { return v.Href }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeLinkOutput) Rel() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeLink) string { return v.Rel }).(pulumi.StringOutput)
}

type GetVolumesVolumeLinkArrayOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeLink)(nil)).Elem()
}

func (o GetVolumesVolumeLinkArrayOutput) ToGetVolumesVolumeLinkArrayOutput() GetVolumesVolumeLinkArrayOutput {
	return o
}

func (o GetVolumesVolumeLinkArrayOutput) ToGetVolumesVolumeLinkArrayOutputWithContext(ctx context.Context) GetVolumesVolumeLinkArrayOutput {
	return o
}

func (o GetVolumesVolumeLinkArrayOutput) Index(i pulumi.IntInput) GetVolumesVolumeLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumesVolumeLink {
		return vs[0].([]GetVolumesVolumeLink)[vs[1].(int)]
	}).(GetVolumesVolumeLinkOutput)
}

type GetVolumesVolumeThroughputAttribute struct {
	Frozened bool `pulumi:"frozened"`
	// The ID of the attached resource in UUID format.
	Id       string `pulumi:"id"`
	TotalVal int    `pulumi:"totalVal"`
}

// GetVolumesVolumeThroughputAttributeInput is an input type that accepts GetVolumesVolumeThroughputAttributeArgs and GetVolumesVolumeThroughputAttributeOutput values.
// You can construct a concrete instance of `GetVolumesVolumeThroughputAttributeInput` via:
//
//	GetVolumesVolumeThroughputAttributeArgs{...}
type GetVolumesVolumeThroughputAttributeInput interface {
	pulumi.Input

	ToGetVolumesVolumeThroughputAttributeOutput() GetVolumesVolumeThroughputAttributeOutput
	ToGetVolumesVolumeThroughputAttributeOutputWithContext(context.Context) GetVolumesVolumeThroughputAttributeOutput
}

type GetVolumesVolumeThroughputAttributeArgs struct {
	Frozened pulumi.BoolInput `pulumi:"frozened"`
	// The ID of the attached resource in UUID format.
	Id       pulumi.StringInput `pulumi:"id"`
	TotalVal pulumi.IntInput    `pulumi:"totalVal"`
}

func (GetVolumesVolumeThroughputAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeThroughputAttribute)(nil)).Elem()
}

func (i GetVolumesVolumeThroughputAttributeArgs) ToGetVolumesVolumeThroughputAttributeOutput() GetVolumesVolumeThroughputAttributeOutput {
	return i.ToGetVolumesVolumeThroughputAttributeOutputWithContext(context.Background())
}

func (i GetVolumesVolumeThroughputAttributeArgs) ToGetVolumesVolumeThroughputAttributeOutputWithContext(ctx context.Context) GetVolumesVolumeThroughputAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeThroughputAttributeOutput)
}

// GetVolumesVolumeThroughputAttributeArrayInput is an input type that accepts GetVolumesVolumeThroughputAttributeArray and GetVolumesVolumeThroughputAttributeArrayOutput values.
// You can construct a concrete instance of `GetVolumesVolumeThroughputAttributeArrayInput` via:
//
//	GetVolumesVolumeThroughputAttributeArray{ GetVolumesVolumeThroughputAttributeArgs{...} }
type GetVolumesVolumeThroughputAttributeArrayInput interface {
	pulumi.Input

	ToGetVolumesVolumeThroughputAttributeArrayOutput() GetVolumesVolumeThroughputAttributeArrayOutput
	ToGetVolumesVolumeThroughputAttributeArrayOutputWithContext(context.Context) GetVolumesVolumeThroughputAttributeArrayOutput
}

type GetVolumesVolumeThroughputAttributeArray []GetVolumesVolumeThroughputAttributeInput

func (GetVolumesVolumeThroughputAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeThroughputAttribute)(nil)).Elem()
}

func (i GetVolumesVolumeThroughputAttributeArray) ToGetVolumesVolumeThroughputAttributeArrayOutput() GetVolumesVolumeThroughputAttributeArrayOutput {
	return i.ToGetVolumesVolumeThroughputAttributeArrayOutputWithContext(context.Background())
}

func (i GetVolumesVolumeThroughputAttributeArray) ToGetVolumesVolumeThroughputAttributeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeThroughputAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumesVolumeThroughputAttributeArrayOutput)
}

type GetVolumesVolumeThroughputAttributeOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeThroughputAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesVolumeThroughputAttribute)(nil)).Elem()
}

func (o GetVolumesVolumeThroughputAttributeOutput) ToGetVolumesVolumeThroughputAttributeOutput() GetVolumesVolumeThroughputAttributeOutput {
	return o
}

func (o GetVolumesVolumeThroughputAttributeOutput) ToGetVolumesVolumeThroughputAttributeOutputWithContext(ctx context.Context) GetVolumesVolumeThroughputAttributeOutput {
	return o
}

func (o GetVolumesVolumeThroughputAttributeOutput) Frozened() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVolumesVolumeThroughputAttribute) bool { return v.Frozened }).(pulumi.BoolOutput)
}

// The ID of the attached resource in UUID format.
func (o GetVolumesVolumeThroughputAttributeOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesVolumeThroughputAttribute) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVolumesVolumeThroughputAttributeOutput) TotalVal() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesVolumeThroughputAttribute) int { return v.TotalVal }).(pulumi.IntOutput)
}

type GetVolumesVolumeThroughputAttributeArrayOutput struct{ *pulumi.OutputState }

func (GetVolumesVolumeThroughputAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVolumesVolumeThroughputAttribute)(nil)).Elem()
}

func (o GetVolumesVolumeThroughputAttributeArrayOutput) ToGetVolumesVolumeThroughputAttributeArrayOutput() GetVolumesVolumeThroughputAttributeArrayOutput {
	return o
}

func (o GetVolumesVolumeThroughputAttributeArrayOutput) ToGetVolumesVolumeThroughputAttributeArrayOutputWithContext(ctx context.Context) GetVolumesVolumeThroughputAttributeArrayOutput {
	return o
}

func (o GetVolumesVolumeThroughputAttributeArrayOutput) Index(i pulumi.IntInput) GetVolumesVolumeThroughputAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVolumesVolumeThroughputAttribute {
		return vs[0].([]GetVolumesVolumeThroughputAttribute)[vs[1].(int)]
	}).(GetVolumesVolumeThroughputAttributeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentInput)(nil)).Elem(), VolumeAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachmentArrayInput)(nil)).Elem(), VolumeAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeIopsAttributeInput)(nil)).Elem(), VolumeIopsAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeIopsAttributeArrayInput)(nil)).Elem(), VolumeIopsAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeLinkInput)(nil)).Elem(), VolumeLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeLinkArrayInput)(nil)).Elem(), VolumeLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeThroughputAttributeInput)(nil)).Elem(), VolumeThroughputAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeThroughputAttributeArrayInput)(nil)).Elem(), VolumeThroughputAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeInput)(nil)).Elem(), GetVolumesVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeArrayInput)(nil)).Elem(), GetVolumesVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeAttachmentInput)(nil)).Elem(), GetVolumesVolumeAttachmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeAttachmentArrayInput)(nil)).Elem(), GetVolumesVolumeAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeIopsAttributeInput)(nil)).Elem(), GetVolumesVolumeIopsAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeIopsAttributeArrayInput)(nil)).Elem(), GetVolumesVolumeIopsAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeLinkInput)(nil)).Elem(), GetVolumesVolumeLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeLinkArrayInput)(nil)).Elem(), GetVolumesVolumeLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeThroughputAttributeInput)(nil)).Elem(), GetVolumesVolumeThroughputAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumesVolumeThroughputAttributeArrayInput)(nil)).Elem(), GetVolumesVolumeThroughputAttributeArray{})
	pulumi.RegisterOutputType(VolumeAttachmentOutput{})
	pulumi.RegisterOutputType(VolumeAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VolumeIopsAttributeOutput{})
	pulumi.RegisterOutputType(VolumeIopsAttributeArrayOutput{})
	pulumi.RegisterOutputType(VolumeLinkOutput{})
	pulumi.RegisterOutputType(VolumeLinkArrayOutput{})
	pulumi.RegisterOutputType(VolumeThroughputAttributeOutput{})
	pulumi.RegisterOutputType(VolumeThroughputAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeAttachmentOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeIopsAttributeOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeIopsAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeLinkOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeLinkArrayOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeThroughputAttributeOutput{})
	pulumi.RegisterOutputType(GetVolumesVolumeThroughputAttributeArrayOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DomainNameGroup struct {
	pulumi.CustomResourceState

	// The config status of the domain name group.
	ConfigStatus pulumi.IntOutput `pulumi:"configStatus"`
	// Specifies the description of the domain name group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the list of domain names.
	DomainNames DomainNameGroupDomainNameArrayOutput `pulumi:"domainNames"`
	// Specifies the firewall instance ID.
	FwInstanceId pulumi.StringOutput `pulumi:"fwInstanceId"`
	// The message of the domain name group.
	Message pulumi.StringOutput `pulumi:"message"`
	// Specifies the name of the domain name group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the protected object ID.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// The reference count of the domain name group.
	RefCount pulumi.IntOutput    `pulumi:"refCount"`
	Region   pulumi.StringOutput `pulumi:"region"`
	// Specifies the type of the domain name group.
	Type pulumi.IntOutput `pulumi:"type"`
}

// NewDomainNameGroup registers a new resource with the given unique name, arguments, and options.
func NewDomainNameGroup(ctx *pulumi.Context,
	name string, args *DomainNameGroupArgs, opts ...pulumi.ResourceOption) (*DomainNameGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FwInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'FwInstanceId'")
	}
	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainNameGroup
	err := ctx.RegisterResource("cloudru:Cfw/domainNameGroup:DomainNameGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainNameGroup gets an existing DomainNameGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainNameGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainNameGroupState, opts ...pulumi.ResourceOption) (*DomainNameGroup, error) {
	var resource DomainNameGroup
	err := ctx.ReadResource("cloudru:Cfw/domainNameGroup:DomainNameGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainNameGroup resources.
type domainNameGroupState struct {
	// The config status of the domain name group.
	ConfigStatus *int `pulumi:"configStatus"`
	// Specifies the description of the domain name group.
	Description *string `pulumi:"description"`
	// Specifies the list of domain names.
	DomainNames []DomainNameGroupDomainName `pulumi:"domainNames"`
	// Specifies the firewall instance ID.
	FwInstanceId *string `pulumi:"fwInstanceId"`
	// The message of the domain name group.
	Message *string `pulumi:"message"`
	// Specifies the name of the domain name group.
	Name *string `pulumi:"name"`
	// Specifies the protected object ID.
	ObjectId *string `pulumi:"objectId"`
	// The reference count of the domain name group.
	RefCount *int    `pulumi:"refCount"`
	Region   *string `pulumi:"region"`
	// Specifies the type of the domain name group.
	Type *int `pulumi:"type"`
}

type DomainNameGroupState struct {
	// The config status of the domain name group.
	ConfigStatus pulumi.IntPtrInput
	// Specifies the description of the domain name group.
	Description pulumi.StringPtrInput
	// Specifies the list of domain names.
	DomainNames DomainNameGroupDomainNameArrayInput
	// Specifies the firewall instance ID.
	FwInstanceId pulumi.StringPtrInput
	// The message of the domain name group.
	Message pulumi.StringPtrInput
	// Specifies the name of the domain name group.
	Name pulumi.StringPtrInput
	// Specifies the protected object ID.
	ObjectId pulumi.StringPtrInput
	// The reference count of the domain name group.
	RefCount pulumi.IntPtrInput
	Region   pulumi.StringPtrInput
	// Specifies the type of the domain name group.
	Type pulumi.IntPtrInput
}

func (DomainNameGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameGroupState)(nil)).Elem()
}

type domainNameGroupArgs struct {
	// Specifies the description of the domain name group.
	Description *string `pulumi:"description"`
	// Specifies the list of domain names.
	DomainNames []DomainNameGroupDomainName `pulumi:"domainNames"`
	// Specifies the firewall instance ID.
	FwInstanceId string `pulumi:"fwInstanceId"`
	// Specifies the name of the domain name group.
	Name *string `pulumi:"name"`
	// Specifies the protected object ID.
	ObjectId string  `pulumi:"objectId"`
	Region   *string `pulumi:"region"`
	// Specifies the type of the domain name group.
	Type int `pulumi:"type"`
}

// The set of arguments for constructing a DomainNameGroup resource.
type DomainNameGroupArgs struct {
	// Specifies the description of the domain name group.
	Description pulumi.StringPtrInput
	// Specifies the list of domain names.
	DomainNames DomainNameGroupDomainNameArrayInput
	// Specifies the firewall instance ID.
	FwInstanceId pulumi.StringInput
	// Specifies the name of the domain name group.
	Name pulumi.StringPtrInput
	// Specifies the protected object ID.
	ObjectId pulumi.StringInput
	Region   pulumi.StringPtrInput
	// Specifies the type of the domain name group.
	Type pulumi.IntInput
}

func (DomainNameGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainNameGroupArgs)(nil)).Elem()
}

type DomainNameGroupInput interface {
	pulumi.Input

	ToDomainNameGroupOutput() DomainNameGroupOutput
	ToDomainNameGroupOutputWithContext(ctx context.Context) DomainNameGroupOutput
}

func (*DomainNameGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameGroup)(nil)).Elem()
}

func (i *DomainNameGroup) ToDomainNameGroupOutput() DomainNameGroupOutput {
	return i.ToDomainNameGroupOutputWithContext(context.Background())
}

func (i *DomainNameGroup) ToDomainNameGroupOutputWithContext(ctx context.Context) DomainNameGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameGroupOutput)
}

// DomainNameGroupArrayInput is an input type that accepts DomainNameGroupArray and DomainNameGroupArrayOutput values.
// You can construct a concrete instance of `DomainNameGroupArrayInput` via:
//
//	DomainNameGroupArray{ DomainNameGroupArgs{...} }
type DomainNameGroupArrayInput interface {
	pulumi.Input

	ToDomainNameGroupArrayOutput() DomainNameGroupArrayOutput
	ToDomainNameGroupArrayOutputWithContext(context.Context) DomainNameGroupArrayOutput
}

type DomainNameGroupArray []DomainNameGroupInput

func (DomainNameGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainNameGroup)(nil)).Elem()
}

func (i DomainNameGroupArray) ToDomainNameGroupArrayOutput() DomainNameGroupArrayOutput {
	return i.ToDomainNameGroupArrayOutputWithContext(context.Background())
}

func (i DomainNameGroupArray) ToDomainNameGroupArrayOutputWithContext(ctx context.Context) DomainNameGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameGroupArrayOutput)
}

// DomainNameGroupMapInput is an input type that accepts DomainNameGroupMap and DomainNameGroupMapOutput values.
// You can construct a concrete instance of `DomainNameGroupMapInput` via:
//
//	DomainNameGroupMap{ "key": DomainNameGroupArgs{...} }
type DomainNameGroupMapInput interface {
	pulumi.Input

	ToDomainNameGroupMapOutput() DomainNameGroupMapOutput
	ToDomainNameGroupMapOutputWithContext(context.Context) DomainNameGroupMapOutput
}

type DomainNameGroupMap map[string]DomainNameGroupInput

func (DomainNameGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainNameGroup)(nil)).Elem()
}

func (i DomainNameGroupMap) ToDomainNameGroupMapOutput() DomainNameGroupMapOutput {
	return i.ToDomainNameGroupMapOutputWithContext(context.Background())
}

func (i DomainNameGroupMap) ToDomainNameGroupMapOutputWithContext(ctx context.Context) DomainNameGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainNameGroupMapOutput)
}

type DomainNameGroupOutput struct{ *pulumi.OutputState }

func (DomainNameGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainNameGroup)(nil)).Elem()
}

func (o DomainNameGroupOutput) ToDomainNameGroupOutput() DomainNameGroupOutput {
	return o
}

func (o DomainNameGroupOutput) ToDomainNameGroupOutputWithContext(ctx context.Context) DomainNameGroupOutput {
	return o
}

// The config status of the domain name group.
func (o DomainNameGroupOutput) ConfigStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.IntOutput { return v.ConfigStatus }).(pulumi.IntOutput)
}

// Specifies the description of the domain name group.
func (o DomainNameGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the list of domain names.
func (o DomainNameGroupOutput) DomainNames() DomainNameGroupDomainNameArrayOutput {
	return o.ApplyT(func(v *DomainNameGroup) DomainNameGroupDomainNameArrayOutput { return v.DomainNames }).(DomainNameGroupDomainNameArrayOutput)
}

// Specifies the firewall instance ID.
func (o DomainNameGroupOutput) FwInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.StringOutput { return v.FwInstanceId }).(pulumi.StringOutput)
}

// The message of the domain name group.
func (o DomainNameGroupOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// Specifies the name of the domain name group.
func (o DomainNameGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the protected object ID.
func (o DomainNameGroupOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// The reference count of the domain name group.
func (o DomainNameGroupOutput) RefCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.IntOutput { return v.RefCount }).(pulumi.IntOutput)
}

func (o DomainNameGroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the type of the domain name group.
func (o DomainNameGroupOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainNameGroup) pulumi.IntOutput { return v.Type }).(pulumi.IntOutput)
}

type DomainNameGroupArrayOutput struct{ *pulumi.OutputState }

func (DomainNameGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainNameGroup)(nil)).Elem()
}

func (o DomainNameGroupArrayOutput) ToDomainNameGroupArrayOutput() DomainNameGroupArrayOutput {
	return o
}

func (o DomainNameGroupArrayOutput) ToDomainNameGroupArrayOutputWithContext(ctx context.Context) DomainNameGroupArrayOutput {
	return o
}

func (o DomainNameGroupArrayOutput) Index(i pulumi.IntInput) DomainNameGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainNameGroup {
		return vs[0].([]*DomainNameGroup)[vs[1].(int)]
	}).(DomainNameGroupOutput)
}

type DomainNameGroupMapOutput struct{ *pulumi.OutputState }

func (DomainNameGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainNameGroup)(nil)).Elem()
}

func (o DomainNameGroupMapOutput) ToDomainNameGroupMapOutput() DomainNameGroupMapOutput {
	return o
}

func (o DomainNameGroupMapOutput) ToDomainNameGroupMapOutputWithContext(ctx context.Context) DomainNameGroupMapOutput {
	return o
}

func (o DomainNameGroupMapOutput) MapIndex(k pulumi.StringInput) DomainNameGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainNameGroup {
		return vs[0].(map[string]*DomainNameGroup)[vs[1].(string)]
	}).(DomainNameGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameGroupInput)(nil)).Elem(), &DomainNameGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameGroupArrayInput)(nil)).Elem(), DomainNameGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainNameGroupMapInput)(nil)).Elem(), DomainNameGroupMap{})
	pulumi.RegisterOutputType(DomainNameGroupOutput{})
	pulumi.RegisterOutputType(DomainNameGroupArrayOutput{})
	pulumi.RegisterOutputType(DomainNameGroupMapOutput{})
}

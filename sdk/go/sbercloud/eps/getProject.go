// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eps

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use this data source to get an enterprise project from SberCloud
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/eps"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := eps.GetProject(ctx, &eps.GetProjectArgs{
//				Name: pulumi.StringRef("test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Resources Supported Currently
//
// <!-- markdownlint-disable MD033 -->
// Service Name | Resource Name | Sub Resource Name
// ---- | --- | ---
// AS  | As.Group |
// CBR | Cbr.Vault |
// CCE | Cce.Cluster | sbercloud_cce_node<br>sbercloud_cce_node_pool
// CDM | Cdm.Cluster |
// CES | Ces.Alarmrule |
// DCS | Dcs.Instance |
// DDS | Dds.Instance |
// DMS | sbercloud_dms_kafka_instance<br>sbercloud_dms_rabbitmq_instance |
// DNS | sbercloud_dns_ptrrecord<br>sbercloud_dns_zone |
// ECS | Ecs.Instance |
// EIP | sbercloud_vpc_eip<br>sbercloud_vpc_bandwidth |
// ELB | Elb.Loadbalancer |
// EVS | Evs.Volume |
// FGS | FunctionGraph.Function |
// IMS | Ims.Image |
// NAT | Nat.Gateway | sbercloud_nat_snat_rule<br>sbercloud_nat_dnat_rule
// OBS | Obs.Bucket | sbercloud_obs_bucket_object<br>sbercloud_obs_bucket_policy
// RDS | sbercloud_rds_instance<br>sbercloud_rds_read_replica_instance |
// SFS | sbercloud_sfs_file_system<br>sbercloud_sfs_turbo | Sfs.AccessRule
// VPC | sbercloud_vpc<br>sbercloud_networking_secgroup | sbercloud_vpc_subnet<br>sbercloud_vpc_route<br>sbercloud_networking_secgroup_rule
// <!-- markdownlint-enable MD033 -->
func LookupProject(ctx *pulumi.Context, args *LookupProjectArgs, opts ...pulumi.InvokeOption) (*LookupProjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectResult
	err := ctx.Invoke("sbercloud:Eps/getProject:getProject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProject.
type LookupProjectArgs struct {
	// Specifies the ID of an enterprise project. The value 0 indicates enterprise project default.
	Id *string `pulumi:"id"`
	// Specifies the enterprise project name. Fuzzy search is supported.
	Name *string `pulumi:"name"`
	// Specifies the status of an enterprise project.
	// + 1 indicates Enabled.
	// + 2 indicates Disabled.
	Status *int `pulumi:"status"`
}

// A collection of values returned by getProject.
type LookupProjectResult struct {
	// Specifies the time (UTC) when the enterprise project was created. Example: 2018-05-18T06:49:06Z
	CreatedAt string `pulumi:"createdAt"`
	// Provides supplementary information about the enterprise project.
	Description string `pulumi:"description"`
	Id          string `pulumi:"id"`
	Name        string `pulumi:"name"`
	Status      int    `pulumi:"status"`
	// Specifies the time (UTC) when the enterprise project was modified. Example: 2018-05-28T02:21:36Z
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupProjectOutput(ctx *pulumi.Context, args LookupProjectOutputArgs, opts ...pulumi.InvokeOption) LookupProjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectResultOutput, error) {
			args := v.(LookupProjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Eps/getProject:getProject", args, LookupProjectResultOutput{}, options).(LookupProjectResultOutput), nil
		}).(LookupProjectResultOutput)
}

// A collection of arguments for invoking getProject.
type LookupProjectOutputArgs struct {
	// Specifies the ID of an enterprise project. The value 0 indicates enterprise project default.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the enterprise project name. Fuzzy search is supported.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the status of an enterprise project.
	// + 1 indicates Enabled.
	// + 2 indicates Disabled.
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (LookupProjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectArgs)(nil)).Elem()
}

// A collection of values returned by getProject.
type LookupProjectResultOutput struct{ *pulumi.OutputState }

func (LookupProjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectResult)(nil)).Elem()
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutput() LookupProjectResultOutput {
	return o
}

func (o LookupProjectResultOutput) ToLookupProjectResultOutputWithContext(ctx context.Context) LookupProjectResultOutput {
	return o
}

// Specifies the time (UTC) when the enterprise project was created. Example: 2018-05-18T06:49:06Z
func (o LookupProjectResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Provides supplementary information about the enterprise project.
func (o LookupProjectResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupProjectResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupProjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupProjectResultOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectResult) int { return v.Status }).(pulumi.IntOutput)
}

// Specifies the time (UTC) when the enterprise project was modified. Example: 2018-05-28T02:21:36Z
func (o LookupProjectResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectResultOutput{})
}

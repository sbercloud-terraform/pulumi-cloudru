# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAccessControlLogsResult',
    'AwaitableGetAccessControlLogsResult',
    'get_access_control_logs',
    'get_access_control_logs_output',
]

@pulumi.output_type
class GetAccessControlLogsResult:
    """
    A collection of values returned by getAccessControlLogs.
    """
    def __init__(__self__, action=None, app=None, dst_city_name=None, dst_ip=None, dst_port=None, dst_province_name=None, dst_region_name=None, end_time=None, enterprise_project_id=None, fw_instance_id=None, id=None, records=None, region=None, rule_name=None, src_city_name=None, src_ip=None, src_port=None, src_province_name=None, src_region_name=None, start_time=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if app and not isinstance(app, str):
            raise TypeError("Expected argument 'app' to be a str")
        pulumi.set(__self__, "app", app)
        if dst_city_name and not isinstance(dst_city_name, str):
            raise TypeError("Expected argument 'dst_city_name' to be a str")
        pulumi.set(__self__, "dst_city_name", dst_city_name)
        if dst_ip and not isinstance(dst_ip, str):
            raise TypeError("Expected argument 'dst_ip' to be a str")
        pulumi.set(__self__, "dst_ip", dst_ip)
        if dst_port and not isinstance(dst_port, int):
            raise TypeError("Expected argument 'dst_port' to be a int")
        pulumi.set(__self__, "dst_port", dst_port)
        if dst_province_name and not isinstance(dst_province_name, str):
            raise TypeError("Expected argument 'dst_province_name' to be a str")
        pulumi.set(__self__, "dst_province_name", dst_province_name)
        if dst_region_name and not isinstance(dst_region_name, str):
            raise TypeError("Expected argument 'dst_region_name' to be a str")
        pulumi.set(__self__, "dst_region_name", dst_region_name)
        if end_time and not isinstance(end_time, str):
            raise TypeError("Expected argument 'end_time' to be a str")
        pulumi.set(__self__, "end_time", end_time)
        if enterprise_project_id and not isinstance(enterprise_project_id, str):
            raise TypeError("Expected argument 'enterprise_project_id' to be a str")
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if fw_instance_id and not isinstance(fw_instance_id, str):
            raise TypeError("Expected argument 'fw_instance_id' to be a str")
        pulumi.set(__self__, "fw_instance_id", fw_instance_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rule_name and not isinstance(rule_name, str):
            raise TypeError("Expected argument 'rule_name' to be a str")
        pulumi.set(__self__, "rule_name", rule_name)
        if src_city_name and not isinstance(src_city_name, str):
            raise TypeError("Expected argument 'src_city_name' to be a str")
        pulumi.set(__self__, "src_city_name", src_city_name)
        if src_ip and not isinstance(src_ip, str):
            raise TypeError("Expected argument 'src_ip' to be a str")
        pulumi.set(__self__, "src_ip", src_ip)
        if src_port and not isinstance(src_port, int):
            raise TypeError("Expected argument 'src_port' to be a int")
        pulumi.set(__self__, "src_port", src_port)
        if src_province_name and not isinstance(src_province_name, str):
            raise TypeError("Expected argument 'src_province_name' to be a str")
        pulumi.set(__self__, "src_province_name", src_province_name)
        if src_region_name and not isinstance(src_region_name, str):
            raise TypeError("Expected argument 'src_region_name' to be a str")
        pulumi.set(__self__, "src_region_name", src_region_name)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[_builtins.str]:
        """
        The action.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def app(self) -> Optional[_builtins.str]:
        """
        The application protocol.
        """
        return pulumi.get(self, "app")

    @_builtins.property
    @pulumi.getter(name="dstCityName")
    def dst_city_name(self) -> Optional[_builtins.str]:
        """
        The destination city name.
        """
        return pulumi.get(self, "dst_city_name")

    @_builtins.property
    @pulumi.getter(name="dstIp")
    def dst_ip(self) -> Optional[_builtins.str]:
        """
        The destination IP address.
        """
        return pulumi.get(self, "dst_ip")

    @_builtins.property
    @pulumi.getter(name="dstPort")
    def dst_port(self) -> Optional[_builtins.int]:
        """
        The destination port.
        """
        return pulumi.get(self, "dst_port")

    @_builtins.property
    @pulumi.getter(name="dstProvinceName")
    def dst_province_name(self) -> Optional[_builtins.str]:
        """
        The destination province name.
        """
        return pulumi.get(self, "dst_province_name")

    @_builtins.property
    @pulumi.getter(name="dstRegionName")
    def dst_region_name(self) -> Optional[_builtins.str]:
        """
        The destination region name.
        """
        return pulumi.get(self, "dst_region_name")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="fwInstanceId")
    def fw_instance_id(self) -> _builtins.str:
        return pulumi.get(self, "fw_instance_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetAccessControlLogsRecordResult']:
        """
        The access control log records.
        """
        return pulumi.get(self, "records")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[_builtins.str]:
        """
        The rule name.
        """
        return pulumi.get(self, "rule_name")

    @_builtins.property
    @pulumi.getter(name="srcCityName")
    def src_city_name(self) -> Optional[_builtins.str]:
        """
        The source city name.
        """
        return pulumi.get(self, "src_city_name")

    @_builtins.property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> Optional[_builtins.str]:
        """
        The source IP address.
        """
        return pulumi.get(self, "src_ip")

    @_builtins.property
    @pulumi.getter(name="srcPort")
    def src_port(self) -> Optional[_builtins.int]:
        """
        The source port.
        """
        return pulumi.get(self, "src_port")

    @_builtins.property
    @pulumi.getter(name="srcProvinceName")
    def src_province_name(self) -> Optional[_builtins.str]:
        """
        The source province name.
        """
        return pulumi.get(self, "src_province_name")

    @_builtins.property
    @pulumi.getter(name="srcRegionName")
    def src_region_name(self) -> Optional[_builtins.str]:
        """
        The source region name.
        """
        return pulumi.get(self, "src_region_name")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")


class AwaitableGetAccessControlLogsResult(GetAccessControlLogsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessControlLogsResult(
            action=self.action,
            app=self.app,
            dst_city_name=self.dst_city_name,
            dst_ip=self.dst_ip,
            dst_port=self.dst_port,
            dst_province_name=self.dst_province_name,
            dst_region_name=self.dst_region_name,
            end_time=self.end_time,
            enterprise_project_id=self.enterprise_project_id,
            fw_instance_id=self.fw_instance_id,
            id=self.id,
            records=self.records,
            region=self.region,
            rule_name=self.rule_name,
            src_city_name=self.src_city_name,
            src_ip=self.src_ip,
            src_port=self.src_port,
            src_province_name=self.src_province_name,
            src_region_name=self.src_region_name,
            start_time=self.start_time)


def get_access_control_logs(action: Optional[_builtins.str] = None,
                            app: Optional[_builtins.str] = None,
                            dst_city_name: Optional[_builtins.str] = None,
                            dst_ip: Optional[_builtins.str] = None,
                            dst_port: Optional[_builtins.int] = None,
                            dst_province_name: Optional[_builtins.str] = None,
                            dst_region_name: Optional[_builtins.str] = None,
                            end_time: Optional[_builtins.str] = None,
                            enterprise_project_id: Optional[_builtins.str] = None,
                            fw_instance_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            rule_name: Optional[_builtins.str] = None,
                            src_city_name: Optional[_builtins.str] = None,
                            src_ip: Optional[_builtins.str] = None,
                            src_port: Optional[_builtins.int] = None,
                            src_province_name: Optional[_builtins.str] = None,
                            src_region_name: Optional[_builtins.str] = None,
                            start_time: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessControlLogsResult:
    """
    Use this data source to get the list of CFW access control logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    fw_instance_id = config.require_object("fwInstanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = sbercloud.Cfw.get_access_control_logs(fw_instance_id=fw_instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str action: Specifies the action. The values can be **allow** and **deny**.
    :param _builtins.str app: Specifies the application protocol.
    :param _builtins.str dst_city_name: Specifies the destination city name.
    :param _builtins.str dst_ip: Specifies the destination IP address.
    :param _builtins.int dst_port: Specifies the destination port.
    :param _builtins.str dst_province_name: Specifies the destination province name.
    :param _builtins.str dst_region_name: Specifies the destination region name.
    :param _builtins.str end_time: Specifies the end time. The time is in UTC.
           The format is **yyyy-MM-dd HH:mm:ss**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str fw_instance_id: Specifies the firewall instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_name: Specifies the rule name.
    :param _builtins.str src_city_name: Specifies the source city name.
    :param _builtins.str src_ip: Specifies the source IP address.
    :param _builtins.int src_port: Specifies the source port.
    :param _builtins.str src_province_name: Specifies the source province name.
    :param _builtins.str src_region_name: Specifies the source region name.
    :param _builtins.str start_time: Specifies the start time. The time is in UTC.
           The format is **yyyy-MM-dd HH:mm:ss**.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['app'] = app
    __args__['dstCityName'] = dst_city_name
    __args__['dstIp'] = dst_ip
    __args__['dstPort'] = dst_port
    __args__['dstProvinceName'] = dst_province_name
    __args__['dstRegionName'] = dst_region_name
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fwInstanceId'] = fw_instance_id
    __args__['region'] = region
    __args__['ruleName'] = rule_name
    __args__['srcCityName'] = src_city_name
    __args__['srcIp'] = src_ip
    __args__['srcPort'] = src_port
    __args__['srcProvinceName'] = src_province_name
    __args__['srcRegionName'] = src_region_name
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:Cfw/getAccessControlLogs:getAccessControlLogs', __args__, opts=opts, typ=GetAccessControlLogsResult).value

    return AwaitableGetAccessControlLogsResult(
        action=pulumi.get(__ret__, 'action'),
        app=pulumi.get(__ret__, 'app'),
        dst_city_name=pulumi.get(__ret__, 'dst_city_name'),
        dst_ip=pulumi.get(__ret__, 'dst_ip'),
        dst_port=pulumi.get(__ret__, 'dst_port'),
        dst_province_name=pulumi.get(__ret__, 'dst_province_name'),
        dst_region_name=pulumi.get(__ret__, 'dst_region_name'),
        end_time=pulumi.get(__ret__, 'end_time'),
        enterprise_project_id=pulumi.get(__ret__, 'enterprise_project_id'),
        fw_instance_id=pulumi.get(__ret__, 'fw_instance_id'),
        id=pulumi.get(__ret__, 'id'),
        records=pulumi.get(__ret__, 'records'),
        region=pulumi.get(__ret__, 'region'),
        rule_name=pulumi.get(__ret__, 'rule_name'),
        src_city_name=pulumi.get(__ret__, 'src_city_name'),
        src_ip=pulumi.get(__ret__, 'src_ip'),
        src_port=pulumi.get(__ret__, 'src_port'),
        src_province_name=pulumi.get(__ret__, 'src_province_name'),
        src_region_name=pulumi.get(__ret__, 'src_region_name'),
        start_time=pulumi.get(__ret__, 'start_time'))
def get_access_control_logs_output(action: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   app: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   dst_city_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   dst_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   dst_port: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                   dst_province_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   dst_region_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   end_time: Optional[pulumi.Input[_builtins.str]] = None,
                                   enterprise_project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   fw_instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   rule_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   src_city_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   src_ip: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   src_port: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                   src_province_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   src_region_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   start_time: Optional[pulumi.Input[_builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAccessControlLogsResult]:
    """
    Use this data source to get the list of CFW access control logs.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    fw_instance_id = config.require_object("fwInstanceId")
    start_time = config.require_object("startTime")
    end_time = config.require_object("endTime")
    test = sbercloud.Cfw.get_access_control_logs(fw_instance_id=fw_instance_id,
        start_time=start_time,
        end_time=end_time)
    ```


    :param _builtins.str action: Specifies the action. The values can be **allow** and **deny**.
    :param _builtins.str app: Specifies the application protocol.
    :param _builtins.str dst_city_name: Specifies the destination city name.
    :param _builtins.str dst_ip: Specifies the destination IP address.
    :param _builtins.int dst_port: Specifies the destination port.
    :param _builtins.str dst_province_name: Specifies the destination province name.
    :param _builtins.str dst_region_name: Specifies the destination region name.
    :param _builtins.str end_time: Specifies the end time. The time is in UTC.
           The format is **yyyy-MM-dd HH:mm:ss**.
    :param _builtins.str enterprise_project_id: Specifies the enterprise project ID.
    :param _builtins.str fw_instance_id: Specifies the firewall instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str rule_name: Specifies the rule name.
    :param _builtins.str src_city_name: Specifies the source city name.
    :param _builtins.str src_ip: Specifies the source IP address.
    :param _builtins.int src_port: Specifies the source port.
    :param _builtins.str src_province_name: Specifies the source province name.
    :param _builtins.str src_region_name: Specifies the source region name.
    :param _builtins.str start_time: Specifies the start time. The time is in UTC.
           The format is **yyyy-MM-dd HH:mm:ss**.
    """
    __args__ = dict()
    __args__['action'] = action
    __args__['app'] = app
    __args__['dstCityName'] = dst_city_name
    __args__['dstIp'] = dst_ip
    __args__['dstPort'] = dst_port
    __args__['dstProvinceName'] = dst_province_name
    __args__['dstRegionName'] = dst_region_name
    __args__['endTime'] = end_time
    __args__['enterpriseProjectId'] = enterprise_project_id
    __args__['fwInstanceId'] = fw_instance_id
    __args__['region'] = region
    __args__['ruleName'] = rule_name
    __args__['srcCityName'] = src_city_name
    __args__['srcIp'] = src_ip
    __args__['srcPort'] = src_port
    __args__['srcProvinceName'] = src_province_name
    __args__['srcRegionName'] = src_region_name
    __args__['startTime'] = start_time
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:Cfw/getAccessControlLogs:getAccessControlLogs', __args__, opts=opts, typ=GetAccessControlLogsResult)
    return __ret__.apply(lambda __response__: GetAccessControlLogsResult(
        action=pulumi.get(__response__, 'action'),
        app=pulumi.get(__response__, 'app'),
        dst_city_name=pulumi.get(__response__, 'dst_city_name'),
        dst_ip=pulumi.get(__response__, 'dst_ip'),
        dst_port=pulumi.get(__response__, 'dst_port'),
        dst_province_name=pulumi.get(__response__, 'dst_province_name'),
        dst_region_name=pulumi.get(__response__, 'dst_region_name'),
        end_time=pulumi.get(__response__, 'end_time'),
        enterprise_project_id=pulumi.get(__response__, 'enterprise_project_id'),
        fw_instance_id=pulumi.get(__response__, 'fw_instance_id'),
        id=pulumi.get(__response__, 'id'),
        records=pulumi.get(__response__, 'records'),
        region=pulumi.get(__response__, 'region'),
        rule_name=pulumi.get(__response__, 'rule_name'),
        src_city_name=pulumi.get(__response__, 'src_city_name'),
        src_ip=pulumi.get(__response__, 'src_ip'),
        src_port=pulumi.get(__response__, 'src_port'),
        src_province_name=pulumi.get(__response__, 'src_province_name'),
        src_region_name=pulumi.get(__response__, 'src_region_name'),
        start_time=pulumi.get(__response__, 'start_time')))

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages dds instance resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### Creating A Cluster Community Edition
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const instance = new sbercloud.dds.Instance("instance", {
 *     name: "dds-instance",
 *     datastore: {
 *         type: "DDS-Community",
 *         version: "3.4",
 *         storageEngine: "wiredTiger",
 *     },
 *     availabilityZone: "{{ availability_zone }}",
 *     vpcId: "{{ vpc_id }}",
 *     subnetId: "{{ subnet_network_id }}}",
 *     securityGroupId: "{{ security_group_id }}",
 *     password: "Test@123",
 *     mode: "Sharding",
 *     flavors: [
 *         {
 *             type: "mongos",
 *             num: 2,
 *             specCode: "dds.mongodb.c3.medium.4.mongos",
 *         },
 *         {
 *             type: "shard",
 *             num: 2,
 *             storage: "ULTRAHIGH",
 *             size: 20,
 *             specCode: "dds.mongodb.c3.medium.4.shard",
 *         },
 *         {
 *             type: "config",
 *             num: 1,
 *             storage: "ULTRAHIGH",
 *             size: 20,
 *             specCode: "dds.mongodb.c3.large.2.config",
 *         },
 *     ],
 *     backupStrategy: {
 *         startTime: "08:00-09:00",
 *         keepDays: 8,
 *     },
 * });
 * ```
 *
 * ### Creating A Replica Set Community Edition
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const instance = new sbercloud.dds.Instance("instance", {
 *     name: "dds-instance",
 *     datastore: {
 *         type: "DDS-Community",
 *         version: "3.4",
 *         storageEngine: "wiredTiger",
 *     },
 *     availabilityZone: "{{ availability_zone }}",
 *     vpcId: "{{ vpc_id }}",
 *     subnetId: "{{ subnet_network_id }}}",
 *     securityGroupId: "{{ security_group_id }}",
 *     password: "Test@123",
 *     mode: "ReplicaSet",
 *     flavors: [{
 *         type: "replica",
 *         num: 1,
 *         storage: "ULTRAHIGH",
 *         size: 30,
 *         specCode: "dds.mongodb.c6.2xlarge.4.repset",
 *     }],
 * });
 * ```
 *
 * ### Creating A Single Community Edition
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const instance = new sbercloud.dds.Instance("instance", {
 *     name: "dds-instance",
 *     datastore: {
 *         type: "DDS-Community",
 *         version: "3.4",
 *         storageEngine: "wiredTiger",
 *     },
 *     availabilityZone: "{{ availability_zone }}",
 *     vpcId: "{{ vpc_id }}",
 *     subnetId: "{{ subnet_network_id }}}",
 *     securityGroupId: "{{ security_group_id }}",
 *     password: "Test@123",
 *     mode: "Single",
 *     flavors: [{
 *         type: "single",
 *         num: 1,
 *         storage: "ULTRAHIGH",
 *         size: 30,
 *         specCode: "dds.mongodb.c6.2xlarge.4.repset",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DDS instance can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Dds/instance:Instance instance 9c6d6ff2cba3434293fd479571517e16in02
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason.
 *
 * The missing attributes include: `password`, `availability_zone`, `flavor`, configuration.
 *
 * It is generally recommended running `pulumi preview` after importing an instance.
 *
 * You can then decide if changes should be applied to the instance, or the resource definition should be updated to
 *
 * align with the instance. Also you can ignore changes as below.
 *
 * resource "sbercloud_dds_instance" "instance" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       password, availability_zone, flavor, configuration,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Dds/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether auto-renew is enabled.
     * Valid values are `true` and `false`, defaults to `false`.
     * Changing this creates a new instance.
     */
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the ID of the availability zone. Changing this creates a
     * new instance.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Specifies the advanced backup policy. The structure is described below.
     */
    public readonly backupStrategy!: pulumi.Output<outputs.Dds.InstanceBackupStrategy>;
    public readonly balancerActiveBegin!: pulumi.Output<string | undefined>;
    public readonly balancerActiveEnd!: pulumi.Output<string | undefined>;
    public readonly balancerStatus!: pulumi.Output<string>;
    /**
     * Specifies the charging mode of the instance.
     * The valid values are as follows:
     * + `prePaid`: indicates the yearly/monthly billing mode.
     * + `postPaid`: indicates the pay-per-use billing mode.
     *
     * Default value is `postPaid`.
     * Changing this creates a new instance.
     */
    public readonly chargingMode!: pulumi.Output<string>;
    public readonly clientNetworkRanges!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the configuration information.
     * The structure is described below. Changing this creates a new instance.
     */
    public readonly configurations!: pulumi.Output<outputs.Dds.InstanceConfiguration[] | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies database information. The structure is described below. Changing
     * this creates a new instance.
     */
    public readonly datastore!: pulumi.Output<outputs.Dds.InstanceDatastore>;
    /**
     * Indicates the DB Administator name.
     */
    public /*out*/ readonly dbUsername!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the disk encryption ID of the instance. Changing this
     * creates a new instance.
     */
    public readonly diskEncryptionId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the enterprise project id of the dds instance.
     * Changing this creates a new instance.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the flavors information. The structure is described below. Changing
     * this creates a new instance.
     */
    public readonly flavors!: pulumi.Output<outputs.Dds.InstanceFlavor[]>;
    public /*out*/ readonly groups!: pulumi.Output<outputs.Dds.InstanceGroup[]>;
    public readonly maintainBegin!: pulumi.Output<string>;
    public readonly maintainEnd!: pulumi.Output<string>;
    /**
     * Specifies the mode of the database instance. **Sharding**, **ReplicaSet**,
     * **Single** are supported. Changing this creates a new instance.
     */
    public readonly mode!: pulumi.Output<string>;
    /**
     * Specifies the DB instance name. The DB instance name of the same type is unique in the
     * same tenant.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Indicates the instance nodes information. Structure is documented below.
     */
    public /*out*/ readonly nodes!: pulumi.Output<outputs.Dds.InstanceNode[]>;
    /**
     * Specifies the Administrator password of the database instance.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Specifies the charging period of the instance.
     * If `periodUnit` is set to *month*, the value ranges from 1 to 9.
     * If `periodUnit` is set to *year*, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new instance.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the instance.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new instance.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the database access port. The valid values are range from `2100` to `9500` and
     * `27017`, `27018`, `27019`. Defaults to `8635`.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Specifies the region of the DDS instance. Changing this creates a new
     * instance.
     */
    public readonly region!: pulumi.Output<string>;
    public readonly replicaSetName!: pulumi.Output<string>;
    public readonly secondLevelMonitoringEnabled!: pulumi.Output<boolean>;
    /**
     * Specifies the security group ID of the DDS instance.
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    public readonly slowLogDesensitization!: pulumi.Output<string>;
    /**
     * Specifies whether to enable or disable SSL. Defaults to true.
     *
     * **NOTE:** The instance will be restarted in the background when switching SSL. Please operate with caution.
     */
    public readonly ssl!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates the node status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the subnet Network ID. Changing this creates a new instance.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The key/value pairs to associate with the DDS instance.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly timeZone!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Specifies the VPC ID. Changing this creates a new instance.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["backupStrategy"] = state ? state.backupStrategy : undefined;
            resourceInputs["balancerActiveBegin"] = state ? state.balancerActiveBegin : undefined;
            resourceInputs["balancerActiveEnd"] = state ? state.balancerActiveEnd : undefined;
            resourceInputs["balancerStatus"] = state ? state.balancerStatus : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clientNetworkRanges"] = state ? state.clientNetworkRanges : undefined;
            resourceInputs["configurations"] = state ? state.configurations : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["datastore"] = state ? state.datastore : undefined;
            resourceInputs["dbUsername"] = state ? state.dbUsername : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskEncryptionId"] = state ? state.diskEncryptionId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["flavors"] = state ? state.flavors : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["maintainBegin"] = state ? state.maintainBegin : undefined;
            resourceInputs["maintainEnd"] = state ? state.maintainEnd : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["replicaSetName"] = state ? state.replicaSetName : undefined;
            resourceInputs["secondLevelMonitoringEnabled"] = state ? state.secondLevelMonitoringEnabled : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["slowLogDesensitization"] = state ? state.slowLogDesensitization : undefined;
            resourceInputs["ssl"] = state ? state.ssl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.datastore === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datastore'");
            }
            if ((!args || args.flavors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavors'");
            }
            if ((!args || args.mode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["backupStrategy"] = args ? args.backupStrategy : undefined;
            resourceInputs["balancerActiveBegin"] = args ? args.balancerActiveBegin : undefined;
            resourceInputs["balancerActiveEnd"] = args ? args.balancerActiveEnd : undefined;
            resourceInputs["balancerStatus"] = args ? args.balancerStatus : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["clientNetworkRanges"] = args ? args.clientNetworkRanges : undefined;
            resourceInputs["configurations"] = args ? args.configurations : undefined;
            resourceInputs["datastore"] = args ? args.datastore : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskEncryptionId"] = args ? args.diskEncryptionId : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["flavors"] = args ? args.flavors : undefined;
            resourceInputs["maintainBegin"] = args ? args.maintainBegin : undefined;
            resourceInputs["maintainEnd"] = args ? args.maintainEnd : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["replicaSetName"] = args ? args.replicaSetName : undefined;
            resourceInputs["secondLevelMonitoringEnabled"] = args ? args.secondLevelMonitoringEnabled : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["slowLogDesensitization"] = args ? args.slowLogDesensitization : undefined;
            resourceInputs["ssl"] = args ? args.ssl : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dbUsername"] = undefined /*out*/;
            resourceInputs["groups"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["timeZone"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto-renew is enabled.
     * Valid values are `true` and `false`, defaults to `false`.
     * Changing this creates a new instance.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the ID of the availability zone. Changing this creates a
     * new instance.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the advanced backup policy. The structure is described below.
     */
    backupStrategy?: pulumi.Input<inputs.Dds.InstanceBackupStrategy>;
    balancerActiveBegin?: pulumi.Input<string>;
    balancerActiveEnd?: pulumi.Input<string>;
    balancerStatus?: pulumi.Input<string>;
    /**
     * Specifies the charging mode of the instance.
     * The valid values are as follows:
     * + `prePaid`: indicates the yearly/monthly billing mode.
     * + `postPaid`: indicates the pay-per-use billing mode.
     *
     * Default value is `postPaid`.
     * Changing this creates a new instance.
     */
    chargingMode?: pulumi.Input<string>;
    clientNetworkRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the configuration information.
     * The structure is described below. Changing this creates a new instance.
     */
    configurations?: pulumi.Input<pulumi.Input<inputs.Dds.InstanceConfiguration>[]>;
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies database information. The structure is described below. Changing
     * this creates a new instance.
     */
    datastore?: pulumi.Input<inputs.Dds.InstanceDatastore>;
    /**
     * Indicates the DB Administator name.
     */
    dbUsername?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Specifies the disk encryption ID of the instance. Changing this
     * creates a new instance.
     */
    diskEncryptionId?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project id of the dds instance.
     * Changing this creates a new instance.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the flavors information. The structure is described below. Changing
     * this creates a new instance.
     */
    flavors?: pulumi.Input<pulumi.Input<inputs.Dds.InstanceFlavor>[]>;
    groups?: pulumi.Input<pulumi.Input<inputs.Dds.InstanceGroup>[]>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    /**
     * Specifies the mode of the database instance. **Sharding**, **ReplicaSet**,
     * **Single** are supported. Changing this creates a new instance.
     */
    mode?: pulumi.Input<string>;
    /**
     * Specifies the DB instance name. The DB instance name of the same type is unique in the
     * same tenant.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates the instance nodes information. Structure is documented below.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.Dds.InstanceNode>[]>;
    /**
     * Specifies the Administrator password of the database instance.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the instance.
     * If `periodUnit` is set to *month*, the value ranges from 1 to 9.
     * If `periodUnit` is set to *year*, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new instance.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the instance.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new instance.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the database access port. The valid values are range from `2100` to `9500` and
     * `27017`, `27018`, `27019`. Defaults to `8635`.
     */
    port?: pulumi.Input<number>;
    /**
     * Specifies the region of the DDS instance. Changing this creates a new
     * instance.
     */
    region?: pulumi.Input<string>;
    replicaSetName?: pulumi.Input<string>;
    secondLevelMonitoringEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the security group ID of the DDS instance.
     */
    securityGroupId?: pulumi.Input<string>;
    slowLogDesensitization?: pulumi.Input<string>;
    /**
     * Specifies whether to enable or disable SSL. Defaults to true.
     *
     * **NOTE:** The instance will be restarted in the background when switching SSL. Please operate with caution.
     */
    ssl?: pulumi.Input<boolean>;
    /**
     * Indicates the node status.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the subnet Network ID. Changing this creates a new instance.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the DDS instance.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeZone?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    /**
     * Specifies the VPC ID. Changing this creates a new instance.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto-renew is enabled.
     * Valid values are `true` and `false`, defaults to `false`.
     * Changing this creates a new instance.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the ID of the availability zone. Changing this creates a
     * new instance.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Specifies the advanced backup policy. The structure is described below.
     */
    backupStrategy?: pulumi.Input<inputs.Dds.InstanceBackupStrategy>;
    balancerActiveBegin?: pulumi.Input<string>;
    balancerActiveEnd?: pulumi.Input<string>;
    balancerStatus?: pulumi.Input<string>;
    /**
     * Specifies the charging mode of the instance.
     * The valid values are as follows:
     * + `prePaid`: indicates the yearly/monthly billing mode.
     * + `postPaid`: indicates the pay-per-use billing mode.
     *
     * Default value is `postPaid`.
     * Changing this creates a new instance.
     */
    chargingMode?: pulumi.Input<string>;
    clientNetworkRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the configuration information.
     * The structure is described below. Changing this creates a new instance.
     */
    configurations?: pulumi.Input<pulumi.Input<inputs.Dds.InstanceConfiguration>[]>;
    /**
     * Specifies database information. The structure is described below. Changing
     * this creates a new instance.
     */
    datastore: pulumi.Input<inputs.Dds.InstanceDatastore>;
    description?: pulumi.Input<string>;
    /**
     * Specifies the disk encryption ID of the instance. Changing this
     * creates a new instance.
     */
    diskEncryptionId?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project id of the dds instance.
     * Changing this creates a new instance.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the flavors information. The structure is described below. Changing
     * this creates a new instance.
     */
    flavors: pulumi.Input<pulumi.Input<inputs.Dds.InstanceFlavor>[]>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    /**
     * Specifies the mode of the database instance. **Sharding**, **ReplicaSet**,
     * **Single** are supported. Changing this creates a new instance.
     */
    mode: pulumi.Input<string>;
    /**
     * Specifies the DB instance name. The DB instance name of the same type is unique in the
     * same tenant.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the Administrator password of the database instance.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the instance.
     * If `periodUnit` is set to *month*, the value ranges from 1 to 9.
     * If `periodUnit` is set to *year*, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new instance.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the instance.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new instance.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the database access port. The valid values are range from `2100` to `9500` and
     * `27017`, `27018`, `27019`. Defaults to `8635`.
     */
    port?: pulumi.Input<number>;
    /**
     * Specifies the region of the DDS instance. Changing this creates a new
     * instance.
     */
    region?: pulumi.Input<string>;
    replicaSetName?: pulumi.Input<string>;
    secondLevelMonitoringEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the security group ID of the DDS instance.
     */
    securityGroupId: pulumi.Input<string>;
    slowLogDesensitization?: pulumi.Input<string>;
    /**
     * Specifies whether to enable or disable SSL. Defaults to true.
     *
     * **NOTE:** The instance will be restarted in the background when switching SSL. Please operate with caution.
     */
    ssl?: pulumi.Input<boolean>;
    /**
     * Specifies the subnet Network ID. Changing this creates a new instance.
     */
    subnetId: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the DDS instance.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the VPC ID. Changing this creates a new instance.
     */
    vpcId: pulumi.Input<string>;
}

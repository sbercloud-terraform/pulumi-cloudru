// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type KafkaInstanceCrossVpcAccess struct {
	AdvertisedIp *string `pulumi:"advertisedIp"`
	// Deprecated: typo in lisenter_ip, please use "listenerIp" instead.
	LisenterIp *string `pulumi:"lisenterIp"`
	ListenerIp *string `pulumi:"listenerIp"`
	Port       *int    `pulumi:"port"`
	PortId     *string `pulumi:"portId"`
}

// KafkaInstanceCrossVpcAccessInput is an input type that accepts KafkaInstanceCrossVpcAccessArgs and KafkaInstanceCrossVpcAccessOutput values.
// You can construct a concrete instance of `KafkaInstanceCrossVpcAccessInput` via:
//
//	KafkaInstanceCrossVpcAccessArgs{...}
type KafkaInstanceCrossVpcAccessInput interface {
	pulumi.Input

	ToKafkaInstanceCrossVpcAccessOutput() KafkaInstanceCrossVpcAccessOutput
	ToKafkaInstanceCrossVpcAccessOutputWithContext(context.Context) KafkaInstanceCrossVpcAccessOutput
}

type KafkaInstanceCrossVpcAccessArgs struct {
	AdvertisedIp pulumi.StringPtrInput `pulumi:"advertisedIp"`
	// Deprecated: typo in lisenter_ip, please use "listenerIp" instead.
	LisenterIp pulumi.StringPtrInput `pulumi:"lisenterIp"`
	ListenerIp pulumi.StringPtrInput `pulumi:"listenerIp"`
	Port       pulumi.IntPtrInput    `pulumi:"port"`
	PortId     pulumi.StringPtrInput `pulumi:"portId"`
}

func (KafkaInstanceCrossVpcAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaInstanceCrossVpcAccess)(nil)).Elem()
}

func (i KafkaInstanceCrossVpcAccessArgs) ToKafkaInstanceCrossVpcAccessOutput() KafkaInstanceCrossVpcAccessOutput {
	return i.ToKafkaInstanceCrossVpcAccessOutputWithContext(context.Background())
}

func (i KafkaInstanceCrossVpcAccessArgs) ToKafkaInstanceCrossVpcAccessOutputWithContext(ctx context.Context) KafkaInstanceCrossVpcAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaInstanceCrossVpcAccessOutput)
}

// KafkaInstanceCrossVpcAccessArrayInput is an input type that accepts KafkaInstanceCrossVpcAccessArray and KafkaInstanceCrossVpcAccessArrayOutput values.
// You can construct a concrete instance of `KafkaInstanceCrossVpcAccessArrayInput` via:
//
//	KafkaInstanceCrossVpcAccessArray{ KafkaInstanceCrossVpcAccessArgs{...} }
type KafkaInstanceCrossVpcAccessArrayInput interface {
	pulumi.Input

	ToKafkaInstanceCrossVpcAccessArrayOutput() KafkaInstanceCrossVpcAccessArrayOutput
	ToKafkaInstanceCrossVpcAccessArrayOutputWithContext(context.Context) KafkaInstanceCrossVpcAccessArrayOutput
}

type KafkaInstanceCrossVpcAccessArray []KafkaInstanceCrossVpcAccessInput

func (KafkaInstanceCrossVpcAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaInstanceCrossVpcAccess)(nil)).Elem()
}

func (i KafkaInstanceCrossVpcAccessArray) ToKafkaInstanceCrossVpcAccessArrayOutput() KafkaInstanceCrossVpcAccessArrayOutput {
	return i.ToKafkaInstanceCrossVpcAccessArrayOutputWithContext(context.Background())
}

func (i KafkaInstanceCrossVpcAccessArray) ToKafkaInstanceCrossVpcAccessArrayOutputWithContext(ctx context.Context) KafkaInstanceCrossVpcAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaInstanceCrossVpcAccessArrayOutput)
}

type KafkaInstanceCrossVpcAccessOutput struct{ *pulumi.OutputState }

func (KafkaInstanceCrossVpcAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaInstanceCrossVpcAccess)(nil)).Elem()
}

func (o KafkaInstanceCrossVpcAccessOutput) ToKafkaInstanceCrossVpcAccessOutput() KafkaInstanceCrossVpcAccessOutput {
	return o
}

func (o KafkaInstanceCrossVpcAccessOutput) ToKafkaInstanceCrossVpcAccessOutputWithContext(ctx context.Context) KafkaInstanceCrossVpcAccessOutput {
	return o
}

func (o KafkaInstanceCrossVpcAccessOutput) AdvertisedIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstanceCrossVpcAccess) *string { return v.AdvertisedIp }).(pulumi.StringPtrOutput)
}

// Deprecated: typo in lisenter_ip, please use "listenerIp" instead.
func (o KafkaInstanceCrossVpcAccessOutput) LisenterIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstanceCrossVpcAccess) *string { return v.LisenterIp }).(pulumi.StringPtrOutput)
}

func (o KafkaInstanceCrossVpcAccessOutput) ListenerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstanceCrossVpcAccess) *string { return v.ListenerIp }).(pulumi.StringPtrOutput)
}

func (o KafkaInstanceCrossVpcAccessOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v KafkaInstanceCrossVpcAccess) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o KafkaInstanceCrossVpcAccessOutput) PortId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstanceCrossVpcAccess) *string { return v.PortId }).(pulumi.StringPtrOutput)
}

type KafkaInstanceCrossVpcAccessArrayOutput struct{ *pulumi.OutputState }

func (KafkaInstanceCrossVpcAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaInstanceCrossVpcAccess)(nil)).Elem()
}

func (o KafkaInstanceCrossVpcAccessArrayOutput) ToKafkaInstanceCrossVpcAccessArrayOutput() KafkaInstanceCrossVpcAccessArrayOutput {
	return o
}

func (o KafkaInstanceCrossVpcAccessArrayOutput) ToKafkaInstanceCrossVpcAccessArrayOutputWithContext(ctx context.Context) KafkaInstanceCrossVpcAccessArrayOutput {
	return o
}

func (o KafkaInstanceCrossVpcAccessArrayOutput) Index(i pulumi.IntInput) KafkaInstanceCrossVpcAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaInstanceCrossVpcAccess {
		return vs[0].([]KafkaInstanceCrossVpcAccess)[vs[1].(int)]
	}).(KafkaInstanceCrossVpcAccessOutput)
}

type KafkaInstanceParameter struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// KafkaInstanceParameterInput is an input type that accepts KafkaInstanceParameterArgs and KafkaInstanceParameterOutput values.
// You can construct a concrete instance of `KafkaInstanceParameterInput` via:
//
//	KafkaInstanceParameterArgs{...}
type KafkaInstanceParameterInput interface {
	pulumi.Input

	ToKafkaInstanceParameterOutput() KafkaInstanceParameterOutput
	ToKafkaInstanceParameterOutputWithContext(context.Context) KafkaInstanceParameterOutput
}

type KafkaInstanceParameterArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (KafkaInstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaInstanceParameter)(nil)).Elem()
}

func (i KafkaInstanceParameterArgs) ToKafkaInstanceParameterOutput() KafkaInstanceParameterOutput {
	return i.ToKafkaInstanceParameterOutputWithContext(context.Background())
}

func (i KafkaInstanceParameterArgs) ToKafkaInstanceParameterOutputWithContext(ctx context.Context) KafkaInstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaInstanceParameterOutput)
}

// KafkaInstanceParameterArrayInput is an input type that accepts KafkaInstanceParameterArray and KafkaInstanceParameterArrayOutput values.
// You can construct a concrete instance of `KafkaInstanceParameterArrayInput` via:
//
//	KafkaInstanceParameterArray{ KafkaInstanceParameterArgs{...} }
type KafkaInstanceParameterArrayInput interface {
	pulumi.Input

	ToKafkaInstanceParameterArrayOutput() KafkaInstanceParameterArrayOutput
	ToKafkaInstanceParameterArrayOutputWithContext(context.Context) KafkaInstanceParameterArrayOutput
}

type KafkaInstanceParameterArray []KafkaInstanceParameterInput

func (KafkaInstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaInstanceParameter)(nil)).Elem()
}

func (i KafkaInstanceParameterArray) ToKafkaInstanceParameterArrayOutput() KafkaInstanceParameterArrayOutput {
	return i.ToKafkaInstanceParameterArrayOutputWithContext(context.Background())
}

func (i KafkaInstanceParameterArray) ToKafkaInstanceParameterArrayOutputWithContext(ctx context.Context) KafkaInstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaInstanceParameterArrayOutput)
}

type KafkaInstanceParameterOutput struct{ *pulumi.OutputState }

func (KafkaInstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaInstanceParameter)(nil)).Elem()
}

func (o KafkaInstanceParameterOutput) ToKafkaInstanceParameterOutput() KafkaInstanceParameterOutput {
	return o
}

func (o KafkaInstanceParameterOutput) ToKafkaInstanceParameterOutputWithContext(ctx context.Context) KafkaInstanceParameterOutput {
	return o
}

func (o KafkaInstanceParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaInstanceParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o KafkaInstanceParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaInstanceParameter) string { return v.Value }).(pulumi.StringOutput)
}

type KafkaInstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (KafkaInstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaInstanceParameter)(nil)).Elem()
}

func (o KafkaInstanceParameterArrayOutput) ToKafkaInstanceParameterArrayOutput() KafkaInstanceParameterArrayOutput {
	return o
}

func (o KafkaInstanceParameterArrayOutput) ToKafkaInstanceParameterArrayOutputWithContext(ctx context.Context) KafkaInstanceParameterArrayOutput {
	return o
}

func (o KafkaInstanceParameterArrayOutput) Index(i pulumi.IntInput) KafkaInstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaInstanceParameter {
		return vs[0].([]KafkaInstanceParameter)[vs[1].(int)]
	}).(KafkaInstanceParameterOutput)
}

type KafkaInstancePortProtocol struct {
	PrivatePlainAddress            *string `pulumi:"privatePlainAddress"`
	PrivatePlainDomainName         *string `pulumi:"privatePlainDomainName"`
	PrivatePlainEnable             *bool   `pulumi:"privatePlainEnable"`
	PrivateSaslPlaintextAddress    *string `pulumi:"privateSaslPlaintextAddress"`
	PrivateSaslPlaintextDomainName *string `pulumi:"privateSaslPlaintextDomainName"`
	PrivateSaslPlaintextEnable     *bool   `pulumi:"privateSaslPlaintextEnable"`
	PrivateSaslSslAddress          *string `pulumi:"privateSaslSslAddress"`
	PrivateSaslSslDomainName       *string `pulumi:"privateSaslSslDomainName"`
	PrivateSaslSslEnable           *bool   `pulumi:"privateSaslSslEnable"`
	PublicPlainAddress             *string `pulumi:"publicPlainAddress"`
	PublicPlainDomainName          *string `pulumi:"publicPlainDomainName"`
	PublicPlainEnable              *bool   `pulumi:"publicPlainEnable"`
	PublicSaslPlaintextAddress     *string `pulumi:"publicSaslPlaintextAddress"`
	PublicSaslPlaintextDomainName  *string `pulumi:"publicSaslPlaintextDomainName"`
	PublicSaslPlaintextEnable      *bool   `pulumi:"publicSaslPlaintextEnable"`
	PublicSaslSslAddress           *string `pulumi:"publicSaslSslAddress"`
	PublicSaslSslDomainName        *string `pulumi:"publicSaslSslDomainName"`
	PublicSaslSslEnable            *bool   `pulumi:"publicSaslSslEnable"`
}

// KafkaInstancePortProtocolInput is an input type that accepts KafkaInstancePortProtocolArgs and KafkaInstancePortProtocolOutput values.
// You can construct a concrete instance of `KafkaInstancePortProtocolInput` via:
//
//	KafkaInstancePortProtocolArgs{...}
type KafkaInstancePortProtocolInput interface {
	pulumi.Input

	ToKafkaInstancePortProtocolOutput() KafkaInstancePortProtocolOutput
	ToKafkaInstancePortProtocolOutputWithContext(context.Context) KafkaInstancePortProtocolOutput
}

type KafkaInstancePortProtocolArgs struct {
	PrivatePlainAddress            pulumi.StringPtrInput `pulumi:"privatePlainAddress"`
	PrivatePlainDomainName         pulumi.StringPtrInput `pulumi:"privatePlainDomainName"`
	PrivatePlainEnable             pulumi.BoolPtrInput   `pulumi:"privatePlainEnable"`
	PrivateSaslPlaintextAddress    pulumi.StringPtrInput `pulumi:"privateSaslPlaintextAddress"`
	PrivateSaslPlaintextDomainName pulumi.StringPtrInput `pulumi:"privateSaslPlaintextDomainName"`
	PrivateSaslPlaintextEnable     pulumi.BoolPtrInput   `pulumi:"privateSaslPlaintextEnable"`
	PrivateSaslSslAddress          pulumi.StringPtrInput `pulumi:"privateSaslSslAddress"`
	PrivateSaslSslDomainName       pulumi.StringPtrInput `pulumi:"privateSaslSslDomainName"`
	PrivateSaslSslEnable           pulumi.BoolPtrInput   `pulumi:"privateSaslSslEnable"`
	PublicPlainAddress             pulumi.StringPtrInput `pulumi:"publicPlainAddress"`
	PublicPlainDomainName          pulumi.StringPtrInput `pulumi:"publicPlainDomainName"`
	PublicPlainEnable              pulumi.BoolPtrInput   `pulumi:"publicPlainEnable"`
	PublicSaslPlaintextAddress     pulumi.StringPtrInput `pulumi:"publicSaslPlaintextAddress"`
	PublicSaslPlaintextDomainName  pulumi.StringPtrInput `pulumi:"publicSaslPlaintextDomainName"`
	PublicSaslPlaintextEnable      pulumi.BoolPtrInput   `pulumi:"publicSaslPlaintextEnable"`
	PublicSaslSslAddress           pulumi.StringPtrInput `pulumi:"publicSaslSslAddress"`
	PublicSaslSslDomainName        pulumi.StringPtrInput `pulumi:"publicSaslSslDomainName"`
	PublicSaslSslEnable            pulumi.BoolPtrInput   `pulumi:"publicSaslSslEnable"`
}

func (KafkaInstancePortProtocolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaInstancePortProtocol)(nil)).Elem()
}

func (i KafkaInstancePortProtocolArgs) ToKafkaInstancePortProtocolOutput() KafkaInstancePortProtocolOutput {
	return i.ToKafkaInstancePortProtocolOutputWithContext(context.Background())
}

func (i KafkaInstancePortProtocolArgs) ToKafkaInstancePortProtocolOutputWithContext(ctx context.Context) KafkaInstancePortProtocolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaInstancePortProtocolOutput)
}

func (i KafkaInstancePortProtocolArgs) ToKafkaInstancePortProtocolPtrOutput() KafkaInstancePortProtocolPtrOutput {
	return i.ToKafkaInstancePortProtocolPtrOutputWithContext(context.Background())
}

func (i KafkaInstancePortProtocolArgs) ToKafkaInstancePortProtocolPtrOutputWithContext(ctx context.Context) KafkaInstancePortProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaInstancePortProtocolOutput).ToKafkaInstancePortProtocolPtrOutputWithContext(ctx)
}

// KafkaInstancePortProtocolPtrInput is an input type that accepts KafkaInstancePortProtocolArgs, KafkaInstancePortProtocolPtr and KafkaInstancePortProtocolPtrOutput values.
// You can construct a concrete instance of `KafkaInstancePortProtocolPtrInput` via:
//
//	        KafkaInstancePortProtocolArgs{...}
//
//	or:
//
//	        nil
type KafkaInstancePortProtocolPtrInput interface {
	pulumi.Input

	ToKafkaInstancePortProtocolPtrOutput() KafkaInstancePortProtocolPtrOutput
	ToKafkaInstancePortProtocolPtrOutputWithContext(context.Context) KafkaInstancePortProtocolPtrOutput
}

type kafkaInstancePortProtocolPtrType KafkaInstancePortProtocolArgs

func KafkaInstancePortProtocolPtr(v *KafkaInstancePortProtocolArgs) KafkaInstancePortProtocolPtrInput {
	return (*kafkaInstancePortProtocolPtrType)(v)
}

func (*kafkaInstancePortProtocolPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaInstancePortProtocol)(nil)).Elem()
}

func (i *kafkaInstancePortProtocolPtrType) ToKafkaInstancePortProtocolPtrOutput() KafkaInstancePortProtocolPtrOutput {
	return i.ToKafkaInstancePortProtocolPtrOutputWithContext(context.Background())
}

func (i *kafkaInstancePortProtocolPtrType) ToKafkaInstancePortProtocolPtrOutputWithContext(ctx context.Context) KafkaInstancePortProtocolPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaInstancePortProtocolPtrOutput)
}

// KafkaInstancePortProtocolArrayInput is an input type that accepts KafkaInstancePortProtocolArray and KafkaInstancePortProtocolArrayOutput values.
// You can construct a concrete instance of `KafkaInstancePortProtocolArrayInput` via:
//
//	KafkaInstancePortProtocolArray{ KafkaInstancePortProtocolArgs{...} }
type KafkaInstancePortProtocolArrayInput interface {
	pulumi.Input

	ToKafkaInstancePortProtocolArrayOutput() KafkaInstancePortProtocolArrayOutput
	ToKafkaInstancePortProtocolArrayOutputWithContext(context.Context) KafkaInstancePortProtocolArrayOutput
}

type KafkaInstancePortProtocolArray []KafkaInstancePortProtocolInput

func (KafkaInstancePortProtocolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaInstancePortProtocol)(nil)).Elem()
}

func (i KafkaInstancePortProtocolArray) ToKafkaInstancePortProtocolArrayOutput() KafkaInstancePortProtocolArrayOutput {
	return i.ToKafkaInstancePortProtocolArrayOutputWithContext(context.Background())
}

func (i KafkaInstancePortProtocolArray) ToKafkaInstancePortProtocolArrayOutputWithContext(ctx context.Context) KafkaInstancePortProtocolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaInstancePortProtocolArrayOutput)
}

type KafkaInstancePortProtocolOutput struct{ *pulumi.OutputState }

func (KafkaInstancePortProtocolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaInstancePortProtocol)(nil)).Elem()
}

func (o KafkaInstancePortProtocolOutput) ToKafkaInstancePortProtocolOutput() KafkaInstancePortProtocolOutput {
	return o
}

func (o KafkaInstancePortProtocolOutput) ToKafkaInstancePortProtocolOutputWithContext(ctx context.Context) KafkaInstancePortProtocolOutput {
	return o
}

func (o KafkaInstancePortProtocolOutput) ToKafkaInstancePortProtocolPtrOutput() KafkaInstancePortProtocolPtrOutput {
	return o.ToKafkaInstancePortProtocolPtrOutputWithContext(context.Background())
}

func (o KafkaInstancePortProtocolOutput) ToKafkaInstancePortProtocolPtrOutputWithContext(ctx context.Context) KafkaInstancePortProtocolPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KafkaInstancePortProtocol) *KafkaInstancePortProtocol {
		return &v
	}).(KafkaInstancePortProtocolPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivatePlainAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PrivatePlainAddress }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivatePlainDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PrivatePlainDomainName }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivatePlainEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *bool { return v.PrivatePlainEnable }).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivateSaslPlaintextAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PrivateSaslPlaintextAddress }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivateSaslPlaintextDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PrivateSaslPlaintextDomainName }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivateSaslPlaintextEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *bool { return v.PrivateSaslPlaintextEnable }).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivateSaslSslAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PrivateSaslSslAddress }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivateSaslSslDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PrivateSaslSslDomainName }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PrivateSaslSslEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *bool { return v.PrivateSaslSslEnable }).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicPlainAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PublicPlainAddress }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicPlainDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PublicPlainDomainName }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicPlainEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *bool { return v.PublicPlainEnable }).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicSaslPlaintextAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PublicSaslPlaintextAddress }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicSaslPlaintextDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PublicSaslPlaintextDomainName }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicSaslPlaintextEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *bool { return v.PublicSaslPlaintextEnable }).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicSaslSslAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PublicSaslSslAddress }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicSaslSslDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *string { return v.PublicSaslSslDomainName }).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolOutput) PublicSaslSslEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v KafkaInstancePortProtocol) *bool { return v.PublicSaslSslEnable }).(pulumi.BoolPtrOutput)
}

type KafkaInstancePortProtocolPtrOutput struct{ *pulumi.OutputState }

func (KafkaInstancePortProtocolPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaInstancePortProtocol)(nil)).Elem()
}

func (o KafkaInstancePortProtocolPtrOutput) ToKafkaInstancePortProtocolPtrOutput() KafkaInstancePortProtocolPtrOutput {
	return o
}

func (o KafkaInstancePortProtocolPtrOutput) ToKafkaInstancePortProtocolPtrOutputWithContext(ctx context.Context) KafkaInstancePortProtocolPtrOutput {
	return o
}

func (o KafkaInstancePortProtocolPtrOutput) Elem() KafkaInstancePortProtocolOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) KafkaInstancePortProtocol {
		if v != nil {
			return *v
		}
		var ret KafkaInstancePortProtocol
		return ret
	}).(KafkaInstancePortProtocolOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivatePlainAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PrivatePlainAddress
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivatePlainDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PrivatePlainDomainName
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivatePlainEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *bool {
		if v == nil {
			return nil
		}
		return v.PrivatePlainEnable
	}).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivateSaslPlaintextAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PrivateSaslPlaintextAddress
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivateSaslPlaintextDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PrivateSaslPlaintextDomainName
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivateSaslPlaintextEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *bool {
		if v == nil {
			return nil
		}
		return v.PrivateSaslPlaintextEnable
	}).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivateSaslSslAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PrivateSaslSslAddress
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivateSaslSslDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PrivateSaslSslDomainName
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PrivateSaslSslEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *bool {
		if v == nil {
			return nil
		}
		return v.PrivateSaslSslEnable
	}).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicPlainAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PublicPlainAddress
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicPlainDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PublicPlainDomainName
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicPlainEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *bool {
		if v == nil {
			return nil
		}
		return v.PublicPlainEnable
	}).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicSaslPlaintextAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PublicSaslPlaintextAddress
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicSaslPlaintextDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PublicSaslPlaintextDomainName
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicSaslPlaintextEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *bool {
		if v == nil {
			return nil
		}
		return v.PublicSaslPlaintextEnable
	}).(pulumi.BoolPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicSaslSslAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PublicSaslSslAddress
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicSaslSslDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *string {
		if v == nil {
			return nil
		}
		return v.PublicSaslSslDomainName
	}).(pulumi.StringPtrOutput)
}

func (o KafkaInstancePortProtocolPtrOutput) PublicSaslSslEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KafkaInstancePortProtocol) *bool {
		if v == nil {
			return nil
		}
		return v.PublicSaslSslEnable
	}).(pulumi.BoolPtrOutput)
}

type KafkaInstancePortProtocolArrayOutput struct{ *pulumi.OutputState }

func (KafkaInstancePortProtocolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaInstancePortProtocol)(nil)).Elem()
}

func (o KafkaInstancePortProtocolArrayOutput) ToKafkaInstancePortProtocolArrayOutput() KafkaInstancePortProtocolArrayOutput {
	return o
}

func (o KafkaInstancePortProtocolArrayOutput) ToKafkaInstancePortProtocolArrayOutputWithContext(ctx context.Context) KafkaInstancePortProtocolArrayOutput {
	return o
}

func (o KafkaInstancePortProtocolArrayOutput) Index(i pulumi.IntInput) KafkaInstancePortProtocolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaInstancePortProtocol {
		return vs[0].([]KafkaInstancePortProtocol)[vs[1].(int)]
	}).(KafkaInstancePortProtocolOutput)
}

type KafkaPermissionsPolicy struct {
	AccessPolicy string `pulumi:"accessPolicy"`
	UserName     string `pulumi:"userName"`
}

// KafkaPermissionsPolicyInput is an input type that accepts KafkaPermissionsPolicyArgs and KafkaPermissionsPolicyOutput values.
// You can construct a concrete instance of `KafkaPermissionsPolicyInput` via:
//
//	KafkaPermissionsPolicyArgs{...}
type KafkaPermissionsPolicyInput interface {
	pulumi.Input

	ToKafkaPermissionsPolicyOutput() KafkaPermissionsPolicyOutput
	ToKafkaPermissionsPolicyOutputWithContext(context.Context) KafkaPermissionsPolicyOutput
}

type KafkaPermissionsPolicyArgs struct {
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	UserName     pulumi.StringInput `pulumi:"userName"`
}

func (KafkaPermissionsPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaPermissionsPolicy)(nil)).Elem()
}

func (i KafkaPermissionsPolicyArgs) ToKafkaPermissionsPolicyOutput() KafkaPermissionsPolicyOutput {
	return i.ToKafkaPermissionsPolicyOutputWithContext(context.Background())
}

func (i KafkaPermissionsPolicyArgs) ToKafkaPermissionsPolicyOutputWithContext(ctx context.Context) KafkaPermissionsPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPermissionsPolicyOutput)
}

// KafkaPermissionsPolicyArrayInput is an input type that accepts KafkaPermissionsPolicyArray and KafkaPermissionsPolicyArrayOutput values.
// You can construct a concrete instance of `KafkaPermissionsPolicyArrayInput` via:
//
//	KafkaPermissionsPolicyArray{ KafkaPermissionsPolicyArgs{...} }
type KafkaPermissionsPolicyArrayInput interface {
	pulumi.Input

	ToKafkaPermissionsPolicyArrayOutput() KafkaPermissionsPolicyArrayOutput
	ToKafkaPermissionsPolicyArrayOutputWithContext(context.Context) KafkaPermissionsPolicyArrayOutput
}

type KafkaPermissionsPolicyArray []KafkaPermissionsPolicyInput

func (KafkaPermissionsPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaPermissionsPolicy)(nil)).Elem()
}

func (i KafkaPermissionsPolicyArray) ToKafkaPermissionsPolicyArrayOutput() KafkaPermissionsPolicyArrayOutput {
	return i.ToKafkaPermissionsPolicyArrayOutputWithContext(context.Background())
}

func (i KafkaPermissionsPolicyArray) ToKafkaPermissionsPolicyArrayOutputWithContext(ctx context.Context) KafkaPermissionsPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPermissionsPolicyArrayOutput)
}

type KafkaPermissionsPolicyOutput struct{ *pulumi.OutputState }

func (KafkaPermissionsPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaPermissionsPolicy)(nil)).Elem()
}

func (o KafkaPermissionsPolicyOutput) ToKafkaPermissionsPolicyOutput() KafkaPermissionsPolicyOutput {
	return o
}

func (o KafkaPermissionsPolicyOutput) ToKafkaPermissionsPolicyOutputWithContext(ctx context.Context) KafkaPermissionsPolicyOutput {
	return o
}

func (o KafkaPermissionsPolicyOutput) AccessPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaPermissionsPolicy) string { return v.AccessPolicy }).(pulumi.StringOutput)
}

func (o KafkaPermissionsPolicyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaPermissionsPolicy) string { return v.UserName }).(pulumi.StringOutput)
}

type KafkaPermissionsPolicyArrayOutput struct{ *pulumi.OutputState }

func (KafkaPermissionsPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaPermissionsPolicy)(nil)).Elem()
}

func (o KafkaPermissionsPolicyArrayOutput) ToKafkaPermissionsPolicyArrayOutput() KafkaPermissionsPolicyArrayOutput {
	return o
}

func (o KafkaPermissionsPolicyArrayOutput) ToKafkaPermissionsPolicyArrayOutputWithContext(ctx context.Context) KafkaPermissionsPolicyArrayOutput {
	return o
}

func (o KafkaPermissionsPolicyArrayOutput) Index(i pulumi.IntInput) KafkaPermissionsPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaPermissionsPolicy {
		return vs[0].([]KafkaPermissionsPolicy)[vs[1].(int)]
	}).(KafkaPermissionsPolicyOutput)
}

type KafkaTopicConfig struct {
	Name  string `pulumi:"name"`
	Value string `pulumi:"value"`
}

// KafkaTopicConfigInput is an input type that accepts KafkaTopicConfigArgs and KafkaTopicConfigOutput values.
// You can construct a concrete instance of `KafkaTopicConfigInput` via:
//
//	KafkaTopicConfigArgs{...}
type KafkaTopicConfigInput interface {
	pulumi.Input

	ToKafkaTopicConfigOutput() KafkaTopicConfigOutput
	ToKafkaTopicConfigOutputWithContext(context.Context) KafkaTopicConfigOutput
}

type KafkaTopicConfigArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (KafkaTopicConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicConfig)(nil)).Elem()
}

func (i KafkaTopicConfigArgs) ToKafkaTopicConfigOutput() KafkaTopicConfigOutput {
	return i.ToKafkaTopicConfigOutputWithContext(context.Background())
}

func (i KafkaTopicConfigArgs) ToKafkaTopicConfigOutputWithContext(ctx context.Context) KafkaTopicConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicConfigOutput)
}

// KafkaTopicConfigArrayInput is an input type that accepts KafkaTopicConfigArray and KafkaTopicConfigArrayOutput values.
// You can construct a concrete instance of `KafkaTopicConfigArrayInput` via:
//
//	KafkaTopicConfigArray{ KafkaTopicConfigArgs{...} }
type KafkaTopicConfigArrayInput interface {
	pulumi.Input

	ToKafkaTopicConfigArrayOutput() KafkaTopicConfigArrayOutput
	ToKafkaTopicConfigArrayOutputWithContext(context.Context) KafkaTopicConfigArrayOutput
}

type KafkaTopicConfigArray []KafkaTopicConfigInput

func (KafkaTopicConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicConfig)(nil)).Elem()
}

func (i KafkaTopicConfigArray) ToKafkaTopicConfigArrayOutput() KafkaTopicConfigArrayOutput {
	return i.ToKafkaTopicConfigArrayOutputWithContext(context.Background())
}

func (i KafkaTopicConfigArray) ToKafkaTopicConfigArrayOutputWithContext(ctx context.Context) KafkaTopicConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicConfigArrayOutput)
}

type KafkaTopicConfigOutput struct{ *pulumi.OutputState }

func (KafkaTopicConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KafkaTopicConfig)(nil)).Elem()
}

func (o KafkaTopicConfigOutput) ToKafkaTopicConfigOutput() KafkaTopicConfigOutput {
	return o
}

func (o KafkaTopicConfigOutput) ToKafkaTopicConfigOutputWithContext(ctx context.Context) KafkaTopicConfigOutput {
	return o
}

func (o KafkaTopicConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaTopicConfig) string { return v.Name }).(pulumi.StringOutput)
}

func (o KafkaTopicConfigOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KafkaTopicConfig) string { return v.Value }).(pulumi.StringOutput)
}

type KafkaTopicConfigArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KafkaTopicConfig)(nil)).Elem()
}

func (o KafkaTopicConfigArrayOutput) ToKafkaTopicConfigArrayOutput() KafkaTopicConfigArrayOutput {
	return o
}

func (o KafkaTopicConfigArrayOutput) ToKafkaTopicConfigArrayOutputWithContext(ctx context.Context) KafkaTopicConfigArrayOutput {
	return o
}

func (o KafkaTopicConfigArrayOutput) Index(i pulumi.IntInput) KafkaTopicConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KafkaTopicConfig {
		return vs[0].([]KafkaTopicConfig)[vs[1].(int)]
	}).(KafkaTopicConfigOutput)
}

type GetFlavorsFlavor struct {
	ArchTypes       []string                         `pulumi:"archTypes"`
	ChargingModes   []string                         `pulumi:"chargingModes"`
	Id              string                           `pulumi:"id"`
	Ios             []GetFlavorsFlavorIo             `pulumi:"ios"`
	Properties      []GetFlavorsFlavorProperty       `pulumi:"properties"`
	SupportFeatures []GetFlavorsFlavorSupportFeature `pulumi:"supportFeatures"`
	Type            string                           `pulumi:"type"`
	VmSpecification string                           `pulumi:"vmSpecification"`
}

// GetFlavorsFlavorInput is an input type that accepts GetFlavorsFlavorArgs and GetFlavorsFlavorOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorInput` via:
//
//	GetFlavorsFlavorArgs{...}
type GetFlavorsFlavorInput interface {
	pulumi.Input

	ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput
	ToGetFlavorsFlavorOutputWithContext(context.Context) GetFlavorsFlavorOutput
}

type GetFlavorsFlavorArgs struct {
	ArchTypes       pulumi.StringArrayInput                  `pulumi:"archTypes"`
	ChargingModes   pulumi.StringArrayInput                  `pulumi:"chargingModes"`
	Id              pulumi.StringInput                       `pulumi:"id"`
	Ios             GetFlavorsFlavorIoArrayInput             `pulumi:"ios"`
	Properties      GetFlavorsFlavorPropertyArrayInput       `pulumi:"properties"`
	SupportFeatures GetFlavorsFlavorSupportFeatureArrayInput `pulumi:"supportFeatures"`
	Type            pulumi.StringInput                       `pulumi:"type"`
	VmSpecification pulumi.StringInput                       `pulumi:"vmSpecification"`
}

func (GetFlavorsFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return i.ToGetFlavorsFlavorOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorOutput)
}

// GetFlavorsFlavorArrayInput is an input type that accepts GetFlavorsFlavorArray and GetFlavorsFlavorArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorArrayInput` via:
//
//	GetFlavorsFlavorArray{ GetFlavorsFlavorArgs{...} }
type GetFlavorsFlavorArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput
	ToGetFlavorsFlavorArrayOutputWithContext(context.Context) GetFlavorsFlavorArrayOutput
}

type GetFlavorsFlavorArray []GetFlavorsFlavorInput

func (GetFlavorsFlavorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return i.ToGetFlavorsFlavorArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorArrayOutput)
}

type GetFlavorsFlavorOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) ArchTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) []string { return v.ArchTypes }).(pulumi.StringArrayOutput)
}

func (o GetFlavorsFlavorOutput) ChargingModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) []string { return v.ChargingModes }).(pulumi.StringArrayOutput)
}

func (o GetFlavorsFlavorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorOutput) Ios() GetFlavorsFlavorIoArrayOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) []GetFlavorsFlavorIo { return v.Ios }).(GetFlavorsFlavorIoArrayOutput)
}

func (o GetFlavorsFlavorOutput) Properties() GetFlavorsFlavorPropertyArrayOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) []GetFlavorsFlavorProperty { return v.Properties }).(GetFlavorsFlavorPropertyArrayOutput)
}

func (o GetFlavorsFlavorOutput) SupportFeatures() GetFlavorsFlavorSupportFeatureArrayOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) []GetFlavorsFlavorSupportFeature { return v.SupportFeatures }).(GetFlavorsFlavorSupportFeatureArrayOutput)
}

func (o GetFlavorsFlavorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorOutput) VmSpecification() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.VmSpecification }).(pulumi.StringOutput)
}

type GetFlavorsFlavorArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavor {
		return vs[0].([]GetFlavorsFlavor)[vs[1].(int)]
	}).(GetFlavorsFlavorOutput)
}

type GetFlavorsFlavorIo struct {
	AvailabilityZones   []string `pulumi:"availabilityZones"`
	StorageSpecCode     string   `pulumi:"storageSpecCode"`
	Type                string   `pulumi:"type"`
	UnavailabilityZones []string `pulumi:"unavailabilityZones"`
}

// GetFlavorsFlavorIoInput is an input type that accepts GetFlavorsFlavorIoArgs and GetFlavorsFlavorIoOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorIoInput` via:
//
//	GetFlavorsFlavorIoArgs{...}
type GetFlavorsFlavorIoInput interface {
	pulumi.Input

	ToGetFlavorsFlavorIoOutput() GetFlavorsFlavorIoOutput
	ToGetFlavorsFlavorIoOutputWithContext(context.Context) GetFlavorsFlavorIoOutput
}

type GetFlavorsFlavorIoArgs struct {
	AvailabilityZones   pulumi.StringArrayInput `pulumi:"availabilityZones"`
	StorageSpecCode     pulumi.StringInput      `pulumi:"storageSpecCode"`
	Type                pulumi.StringInput      `pulumi:"type"`
	UnavailabilityZones pulumi.StringArrayInput `pulumi:"unavailabilityZones"`
}

func (GetFlavorsFlavorIoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavorIo)(nil)).Elem()
}

func (i GetFlavorsFlavorIoArgs) ToGetFlavorsFlavorIoOutput() GetFlavorsFlavorIoOutput {
	return i.ToGetFlavorsFlavorIoOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorIoArgs) ToGetFlavorsFlavorIoOutputWithContext(ctx context.Context) GetFlavorsFlavorIoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorIoOutput)
}

// GetFlavorsFlavorIoArrayInput is an input type that accepts GetFlavorsFlavorIoArray and GetFlavorsFlavorIoArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorIoArrayInput` via:
//
//	GetFlavorsFlavorIoArray{ GetFlavorsFlavorIoArgs{...} }
type GetFlavorsFlavorIoArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorIoArrayOutput() GetFlavorsFlavorIoArrayOutput
	ToGetFlavorsFlavorIoArrayOutputWithContext(context.Context) GetFlavorsFlavorIoArrayOutput
}

type GetFlavorsFlavorIoArray []GetFlavorsFlavorIoInput

func (GetFlavorsFlavorIoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavorIo)(nil)).Elem()
}

func (i GetFlavorsFlavorIoArray) ToGetFlavorsFlavorIoArrayOutput() GetFlavorsFlavorIoArrayOutput {
	return i.ToGetFlavorsFlavorIoArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorIoArray) ToGetFlavorsFlavorIoArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorIoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorIoArrayOutput)
}

type GetFlavorsFlavorIoOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorIoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavorIo)(nil)).Elem()
}

func (o GetFlavorsFlavorIoOutput) ToGetFlavorsFlavorIoOutput() GetFlavorsFlavorIoOutput {
	return o
}

func (o GetFlavorsFlavorIoOutput) ToGetFlavorsFlavorIoOutputWithContext(ctx context.Context) GetFlavorsFlavorIoOutput {
	return o
}

func (o GetFlavorsFlavorIoOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlavorsFlavorIo) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o GetFlavorsFlavorIoOutput) StorageSpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavorIo) string { return v.StorageSpecCode }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorIoOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavorIo) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorIoOutput) UnavailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlavorsFlavorIo) []string { return v.UnavailabilityZones }).(pulumi.StringArrayOutput)
}

type GetFlavorsFlavorIoArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorIoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavorIo)(nil)).Elem()
}

func (o GetFlavorsFlavorIoArrayOutput) ToGetFlavorsFlavorIoArrayOutput() GetFlavorsFlavorIoArrayOutput {
	return o
}

func (o GetFlavorsFlavorIoArrayOutput) ToGetFlavorsFlavorIoArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorIoArrayOutput {
	return o
}

func (o GetFlavorsFlavorIoArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorIoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavorIo {
		return vs[0].([]GetFlavorsFlavorIo)[vs[1].(int)]
	}).(GetFlavorsFlavorIoOutput)
}

type GetFlavorsFlavorProperty struct {
	FlavorAlias           string `pulumi:"flavorAlias"`
	MaxBandwidthPerBroker int    `pulumi:"maxBandwidthPerBroker"`
	MaxBroker             int    `pulumi:"maxBroker"`
	MaxConsumerPerBroker  int    `pulumi:"maxConsumerPerBroker"`
	MaxPartitionPerBroker int    `pulumi:"maxPartitionPerBroker"`
	MaxStoragePerNode     int    `pulumi:"maxStoragePerNode"`
	MaxTpsPerBroker       int    `pulumi:"maxTpsPerBroker"`
	MinBroker             int    `pulumi:"minBroker"`
	MinStoragePerNode     int    `pulumi:"minStoragePerNode"`
}

// GetFlavorsFlavorPropertyInput is an input type that accepts GetFlavorsFlavorPropertyArgs and GetFlavorsFlavorPropertyOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorPropertyInput` via:
//
//	GetFlavorsFlavorPropertyArgs{...}
type GetFlavorsFlavorPropertyInput interface {
	pulumi.Input

	ToGetFlavorsFlavorPropertyOutput() GetFlavorsFlavorPropertyOutput
	ToGetFlavorsFlavorPropertyOutputWithContext(context.Context) GetFlavorsFlavorPropertyOutput
}

type GetFlavorsFlavorPropertyArgs struct {
	FlavorAlias           pulumi.StringInput `pulumi:"flavorAlias"`
	MaxBandwidthPerBroker pulumi.IntInput    `pulumi:"maxBandwidthPerBroker"`
	MaxBroker             pulumi.IntInput    `pulumi:"maxBroker"`
	MaxConsumerPerBroker  pulumi.IntInput    `pulumi:"maxConsumerPerBroker"`
	MaxPartitionPerBroker pulumi.IntInput    `pulumi:"maxPartitionPerBroker"`
	MaxStoragePerNode     pulumi.IntInput    `pulumi:"maxStoragePerNode"`
	MaxTpsPerBroker       pulumi.IntInput    `pulumi:"maxTpsPerBroker"`
	MinBroker             pulumi.IntInput    `pulumi:"minBroker"`
	MinStoragePerNode     pulumi.IntInput    `pulumi:"minStoragePerNode"`
}

func (GetFlavorsFlavorPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavorProperty)(nil)).Elem()
}

func (i GetFlavorsFlavorPropertyArgs) ToGetFlavorsFlavorPropertyOutput() GetFlavorsFlavorPropertyOutput {
	return i.ToGetFlavorsFlavorPropertyOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorPropertyArgs) ToGetFlavorsFlavorPropertyOutputWithContext(ctx context.Context) GetFlavorsFlavorPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorPropertyOutput)
}

// GetFlavorsFlavorPropertyArrayInput is an input type that accepts GetFlavorsFlavorPropertyArray and GetFlavorsFlavorPropertyArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorPropertyArrayInput` via:
//
//	GetFlavorsFlavorPropertyArray{ GetFlavorsFlavorPropertyArgs{...} }
type GetFlavorsFlavorPropertyArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorPropertyArrayOutput() GetFlavorsFlavorPropertyArrayOutput
	ToGetFlavorsFlavorPropertyArrayOutputWithContext(context.Context) GetFlavorsFlavorPropertyArrayOutput
}

type GetFlavorsFlavorPropertyArray []GetFlavorsFlavorPropertyInput

func (GetFlavorsFlavorPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavorProperty)(nil)).Elem()
}

func (i GetFlavorsFlavorPropertyArray) ToGetFlavorsFlavorPropertyArrayOutput() GetFlavorsFlavorPropertyArrayOutput {
	return i.ToGetFlavorsFlavorPropertyArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorPropertyArray) ToGetFlavorsFlavorPropertyArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorPropertyArrayOutput)
}

type GetFlavorsFlavorPropertyOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavorProperty)(nil)).Elem()
}

func (o GetFlavorsFlavorPropertyOutput) ToGetFlavorsFlavorPropertyOutput() GetFlavorsFlavorPropertyOutput {
	return o
}

func (o GetFlavorsFlavorPropertyOutput) ToGetFlavorsFlavorPropertyOutputWithContext(ctx context.Context) GetFlavorsFlavorPropertyOutput {
	return o
}

func (o GetFlavorsFlavorPropertyOutput) FlavorAlias() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) string { return v.FlavorAlias }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorPropertyOutput) MaxBandwidthPerBroker() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) int { return v.MaxBandwidthPerBroker }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorPropertyOutput) MaxBroker() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) int { return v.MaxBroker }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorPropertyOutput) MaxConsumerPerBroker() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) int { return v.MaxConsumerPerBroker }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorPropertyOutput) MaxPartitionPerBroker() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) int { return v.MaxPartitionPerBroker }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorPropertyOutput) MaxStoragePerNode() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) int { return v.MaxStoragePerNode }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorPropertyOutput) MaxTpsPerBroker() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) int { return v.MaxTpsPerBroker }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorPropertyOutput) MinBroker() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) int { return v.MinBroker }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorPropertyOutput) MinStoragePerNode() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorProperty) int { return v.MinStoragePerNode }).(pulumi.IntOutput)
}

type GetFlavorsFlavorPropertyArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavorProperty)(nil)).Elem()
}

func (o GetFlavorsFlavorPropertyArrayOutput) ToGetFlavorsFlavorPropertyArrayOutput() GetFlavorsFlavorPropertyArrayOutput {
	return o
}

func (o GetFlavorsFlavorPropertyArrayOutput) ToGetFlavorsFlavorPropertyArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorPropertyArrayOutput {
	return o
}

func (o GetFlavorsFlavorPropertyArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavorProperty {
		return vs[0].([]GetFlavorsFlavorProperty)[vs[1].(int)]
	}).(GetFlavorsFlavorPropertyOutput)
}

type GetFlavorsFlavorSupportFeature struct {
	Name       string                                   `pulumi:"name"`
	Properties []GetFlavorsFlavorSupportFeatureProperty `pulumi:"properties"`
}

// GetFlavorsFlavorSupportFeatureInput is an input type that accepts GetFlavorsFlavorSupportFeatureArgs and GetFlavorsFlavorSupportFeatureOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorSupportFeatureInput` via:
//
//	GetFlavorsFlavorSupportFeatureArgs{...}
type GetFlavorsFlavorSupportFeatureInput interface {
	pulumi.Input

	ToGetFlavorsFlavorSupportFeatureOutput() GetFlavorsFlavorSupportFeatureOutput
	ToGetFlavorsFlavorSupportFeatureOutputWithContext(context.Context) GetFlavorsFlavorSupportFeatureOutput
}

type GetFlavorsFlavorSupportFeatureArgs struct {
	Name       pulumi.StringInput                               `pulumi:"name"`
	Properties GetFlavorsFlavorSupportFeaturePropertyArrayInput `pulumi:"properties"`
}

func (GetFlavorsFlavorSupportFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavorSupportFeature)(nil)).Elem()
}

func (i GetFlavorsFlavorSupportFeatureArgs) ToGetFlavorsFlavorSupportFeatureOutput() GetFlavorsFlavorSupportFeatureOutput {
	return i.ToGetFlavorsFlavorSupportFeatureOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorSupportFeatureArgs) ToGetFlavorsFlavorSupportFeatureOutputWithContext(ctx context.Context) GetFlavorsFlavorSupportFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorSupportFeatureOutput)
}

// GetFlavorsFlavorSupportFeatureArrayInput is an input type that accepts GetFlavorsFlavorSupportFeatureArray and GetFlavorsFlavorSupportFeatureArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorSupportFeatureArrayInput` via:
//
//	GetFlavorsFlavorSupportFeatureArray{ GetFlavorsFlavorSupportFeatureArgs{...} }
type GetFlavorsFlavorSupportFeatureArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorSupportFeatureArrayOutput() GetFlavorsFlavorSupportFeatureArrayOutput
	ToGetFlavorsFlavorSupportFeatureArrayOutputWithContext(context.Context) GetFlavorsFlavorSupportFeatureArrayOutput
}

type GetFlavorsFlavorSupportFeatureArray []GetFlavorsFlavorSupportFeatureInput

func (GetFlavorsFlavorSupportFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavorSupportFeature)(nil)).Elem()
}

func (i GetFlavorsFlavorSupportFeatureArray) ToGetFlavorsFlavorSupportFeatureArrayOutput() GetFlavorsFlavorSupportFeatureArrayOutput {
	return i.ToGetFlavorsFlavorSupportFeatureArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorSupportFeatureArray) ToGetFlavorsFlavorSupportFeatureArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorSupportFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorSupportFeatureArrayOutput)
}

type GetFlavorsFlavorSupportFeatureOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorSupportFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavorSupportFeature)(nil)).Elem()
}

func (o GetFlavorsFlavorSupportFeatureOutput) ToGetFlavorsFlavorSupportFeatureOutput() GetFlavorsFlavorSupportFeatureOutput {
	return o
}

func (o GetFlavorsFlavorSupportFeatureOutput) ToGetFlavorsFlavorSupportFeatureOutputWithContext(ctx context.Context) GetFlavorsFlavorSupportFeatureOutput {
	return o
}

func (o GetFlavorsFlavorSupportFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavorSupportFeature) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorSupportFeatureOutput) Properties() GetFlavorsFlavorSupportFeaturePropertyArrayOutput {
	return o.ApplyT(func(v GetFlavorsFlavorSupportFeature) []GetFlavorsFlavorSupportFeatureProperty { return v.Properties }).(GetFlavorsFlavorSupportFeaturePropertyArrayOutput)
}

type GetFlavorsFlavorSupportFeatureArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorSupportFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavorSupportFeature)(nil)).Elem()
}

func (o GetFlavorsFlavorSupportFeatureArrayOutput) ToGetFlavorsFlavorSupportFeatureArrayOutput() GetFlavorsFlavorSupportFeatureArrayOutput {
	return o
}

func (o GetFlavorsFlavorSupportFeatureArrayOutput) ToGetFlavorsFlavorSupportFeatureArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorSupportFeatureArrayOutput {
	return o
}

func (o GetFlavorsFlavorSupportFeatureArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorSupportFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavorSupportFeature {
		return vs[0].([]GetFlavorsFlavorSupportFeature)[vs[1].(int)]
	}).(GetFlavorsFlavorSupportFeatureOutput)
}

type GetFlavorsFlavorSupportFeatureProperty struct {
	MaxNode int `pulumi:"maxNode"`
	MaxTask int `pulumi:"maxTask"`
	MinNode int `pulumi:"minNode"`
	MinTask int `pulumi:"minTask"`
}

// GetFlavorsFlavorSupportFeaturePropertyInput is an input type that accepts GetFlavorsFlavorSupportFeaturePropertyArgs and GetFlavorsFlavorSupportFeaturePropertyOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorSupportFeaturePropertyInput` via:
//
//	GetFlavorsFlavorSupportFeaturePropertyArgs{...}
type GetFlavorsFlavorSupportFeaturePropertyInput interface {
	pulumi.Input

	ToGetFlavorsFlavorSupportFeaturePropertyOutput() GetFlavorsFlavorSupportFeaturePropertyOutput
	ToGetFlavorsFlavorSupportFeaturePropertyOutputWithContext(context.Context) GetFlavorsFlavorSupportFeaturePropertyOutput
}

type GetFlavorsFlavorSupportFeaturePropertyArgs struct {
	MaxNode pulumi.IntInput `pulumi:"maxNode"`
	MaxTask pulumi.IntInput `pulumi:"maxTask"`
	MinNode pulumi.IntInput `pulumi:"minNode"`
	MinTask pulumi.IntInput `pulumi:"minTask"`
}

func (GetFlavorsFlavorSupportFeaturePropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavorSupportFeatureProperty)(nil)).Elem()
}

func (i GetFlavorsFlavorSupportFeaturePropertyArgs) ToGetFlavorsFlavorSupportFeaturePropertyOutput() GetFlavorsFlavorSupportFeaturePropertyOutput {
	return i.ToGetFlavorsFlavorSupportFeaturePropertyOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorSupportFeaturePropertyArgs) ToGetFlavorsFlavorSupportFeaturePropertyOutputWithContext(ctx context.Context) GetFlavorsFlavorSupportFeaturePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorSupportFeaturePropertyOutput)
}

// GetFlavorsFlavorSupportFeaturePropertyArrayInput is an input type that accepts GetFlavorsFlavorSupportFeaturePropertyArray and GetFlavorsFlavorSupportFeaturePropertyArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorSupportFeaturePropertyArrayInput` via:
//
//	GetFlavorsFlavorSupportFeaturePropertyArray{ GetFlavorsFlavorSupportFeaturePropertyArgs{...} }
type GetFlavorsFlavorSupportFeaturePropertyArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorSupportFeaturePropertyArrayOutput() GetFlavorsFlavorSupportFeaturePropertyArrayOutput
	ToGetFlavorsFlavorSupportFeaturePropertyArrayOutputWithContext(context.Context) GetFlavorsFlavorSupportFeaturePropertyArrayOutput
}

type GetFlavorsFlavorSupportFeaturePropertyArray []GetFlavorsFlavorSupportFeaturePropertyInput

func (GetFlavorsFlavorSupportFeaturePropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavorSupportFeatureProperty)(nil)).Elem()
}

func (i GetFlavorsFlavorSupportFeaturePropertyArray) ToGetFlavorsFlavorSupportFeaturePropertyArrayOutput() GetFlavorsFlavorSupportFeaturePropertyArrayOutput {
	return i.ToGetFlavorsFlavorSupportFeaturePropertyArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorSupportFeaturePropertyArray) ToGetFlavorsFlavorSupportFeaturePropertyArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorSupportFeaturePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorSupportFeaturePropertyArrayOutput)
}

type GetFlavorsFlavorSupportFeaturePropertyOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorSupportFeaturePropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavorSupportFeatureProperty)(nil)).Elem()
}

func (o GetFlavorsFlavorSupportFeaturePropertyOutput) ToGetFlavorsFlavorSupportFeaturePropertyOutput() GetFlavorsFlavorSupportFeaturePropertyOutput {
	return o
}

func (o GetFlavorsFlavorSupportFeaturePropertyOutput) ToGetFlavorsFlavorSupportFeaturePropertyOutputWithContext(ctx context.Context) GetFlavorsFlavorSupportFeaturePropertyOutput {
	return o
}

func (o GetFlavorsFlavorSupportFeaturePropertyOutput) MaxNode() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorSupportFeatureProperty) int { return v.MaxNode }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorSupportFeaturePropertyOutput) MaxTask() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorSupportFeatureProperty) int { return v.MaxTask }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorSupportFeaturePropertyOutput) MinNode() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorSupportFeatureProperty) int { return v.MinNode }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorSupportFeaturePropertyOutput) MinTask() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavorSupportFeatureProperty) int { return v.MinTask }).(pulumi.IntOutput)
}

type GetFlavorsFlavorSupportFeaturePropertyArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorSupportFeaturePropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavorSupportFeatureProperty)(nil)).Elem()
}

func (o GetFlavorsFlavorSupportFeaturePropertyArrayOutput) ToGetFlavorsFlavorSupportFeaturePropertyArrayOutput() GetFlavorsFlavorSupportFeaturePropertyArrayOutput {
	return o
}

func (o GetFlavorsFlavorSupportFeaturePropertyArrayOutput) ToGetFlavorsFlavorSupportFeaturePropertyArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorSupportFeaturePropertyArrayOutput {
	return o
}

func (o GetFlavorsFlavorSupportFeaturePropertyArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorSupportFeaturePropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavorSupportFeatureProperty {
		return vs[0].([]GetFlavorsFlavorSupportFeatureProperty)[vs[1].(int)]
	}).(GetFlavorsFlavorSupportFeaturePropertyOutput)
}

type GetInstancesInstance struct {
	AccessUser               string                               `pulumi:"accessUser"`
	AvailabilityZones        []string                             `pulumi:"availabilityZones"`
	ConnectAddress           string                               `pulumi:"connectAddress"`
	CrossVpcAccesses         []GetInstancesInstanceCrossVpcAccess `pulumi:"crossVpcAccesses"`
	Description              string                               `pulumi:"description"`
	Dumping                  bool                                 `pulumi:"dumping"`
	EnableAutoTopic          bool                                 `pulumi:"enableAutoTopic"`
	EnablePublicIp           bool                                 `pulumi:"enablePublicIp"`
	EnabledMechanisms        []string                             `pulumi:"enabledMechanisms"`
	EngineVersion            string                               `pulumi:"engineVersion"`
	EnterpriseProjectId      string                               `pulumi:"enterpriseProjectId"`
	Id                       string                               `pulumi:"id"`
	MaintainBegin            string                               `pulumi:"maintainBegin"`
	MaintainEnd              string                               `pulumi:"maintainEnd"`
	ManagementConnectAddress string                               `pulumi:"managementConnectAddress"`
	ManagerUser              string                               `pulumi:"managerUser"`
	// Deprecated: typo in manegement_connect_address, please use "managementConnectAddress" instead.
	ManegementConnectAddress string            `pulumi:"manegementConnectAddress"`
	Name                     string            `pulumi:"name"`
	NetworkId                string            `pulumi:"networkId"`
	PartitionNum             int               `pulumi:"partitionNum"`
	Port                     int               `pulumi:"port"`
	ProductId                string            `pulumi:"productId"`
	PublicConnAddresses      string            `pulumi:"publicConnAddresses"`
	PublicIpIds              []string          `pulumi:"publicIpIds"`
	ResourceSpecCode         string            `pulumi:"resourceSpecCode"`
	RetentionPolicy          string            `pulumi:"retentionPolicy"`
	SecurityGroupId          string            `pulumi:"securityGroupId"`
	SecurityProtocol         string            `pulumi:"securityProtocol"`
	SslEnable                bool              `pulumi:"sslEnable"`
	Status                   string            `pulumi:"status"`
	StorageSpace             int               `pulumi:"storageSpace"`
	StorageSpecCode          string            `pulumi:"storageSpecCode"`
	Tags                     map[string]string `pulumi:"tags"`
	Type                     string            `pulumi:"type"`
	UsedStorageSpace         int               `pulumi:"usedStorageSpace"`
	UserId                   string            `pulumi:"userId"`
	UserName                 string            `pulumi:"userName"`
	VpcId                    string            `pulumi:"vpcId"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	AccessUser               pulumi.StringInput                           `pulumi:"accessUser"`
	AvailabilityZones        pulumi.StringArrayInput                      `pulumi:"availabilityZones"`
	ConnectAddress           pulumi.StringInput                           `pulumi:"connectAddress"`
	CrossVpcAccesses         GetInstancesInstanceCrossVpcAccessArrayInput `pulumi:"crossVpcAccesses"`
	Description              pulumi.StringInput                           `pulumi:"description"`
	Dumping                  pulumi.BoolInput                             `pulumi:"dumping"`
	EnableAutoTopic          pulumi.BoolInput                             `pulumi:"enableAutoTopic"`
	EnablePublicIp           pulumi.BoolInput                             `pulumi:"enablePublicIp"`
	EnabledMechanisms        pulumi.StringArrayInput                      `pulumi:"enabledMechanisms"`
	EngineVersion            pulumi.StringInput                           `pulumi:"engineVersion"`
	EnterpriseProjectId      pulumi.StringInput                           `pulumi:"enterpriseProjectId"`
	Id                       pulumi.StringInput                           `pulumi:"id"`
	MaintainBegin            pulumi.StringInput                           `pulumi:"maintainBegin"`
	MaintainEnd              pulumi.StringInput                           `pulumi:"maintainEnd"`
	ManagementConnectAddress pulumi.StringInput                           `pulumi:"managementConnectAddress"`
	ManagerUser              pulumi.StringInput                           `pulumi:"managerUser"`
	// Deprecated: typo in manegement_connect_address, please use "managementConnectAddress" instead.
	ManegementConnectAddress pulumi.StringInput      `pulumi:"manegementConnectAddress"`
	Name                     pulumi.StringInput      `pulumi:"name"`
	NetworkId                pulumi.StringInput      `pulumi:"networkId"`
	PartitionNum             pulumi.IntInput         `pulumi:"partitionNum"`
	Port                     pulumi.IntInput         `pulumi:"port"`
	ProductId                pulumi.StringInput      `pulumi:"productId"`
	PublicConnAddresses      pulumi.StringInput      `pulumi:"publicConnAddresses"`
	PublicIpIds              pulumi.StringArrayInput `pulumi:"publicIpIds"`
	ResourceSpecCode         pulumi.StringInput      `pulumi:"resourceSpecCode"`
	RetentionPolicy          pulumi.StringInput      `pulumi:"retentionPolicy"`
	SecurityGroupId          pulumi.StringInput      `pulumi:"securityGroupId"`
	SecurityProtocol         pulumi.StringInput      `pulumi:"securityProtocol"`
	SslEnable                pulumi.BoolInput        `pulumi:"sslEnable"`
	Status                   pulumi.StringInput      `pulumi:"status"`
	StorageSpace             pulumi.IntInput         `pulumi:"storageSpace"`
	StorageSpecCode          pulumi.StringInput      `pulumi:"storageSpecCode"`
	Tags                     pulumi.StringMapInput   `pulumi:"tags"`
	Type                     pulumi.StringInput      `pulumi:"type"`
	UsedStorageSpace         pulumi.IntInput         `pulumi:"usedStorageSpace"`
	UserId                   pulumi.StringInput      `pulumi:"userId"`
	UserName                 pulumi.StringInput      `pulumi:"userName"`
	VpcId                    pulumi.StringInput      `pulumi:"vpcId"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) AccessUser() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.AccessUser }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

func (o GetInstancesInstanceOutput) ConnectAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ConnectAddress }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) CrossVpcAccesses() GetInstancesInstanceCrossVpcAccessArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceCrossVpcAccess { return v.CrossVpcAccesses }).(GetInstancesInstanceCrossVpcAccessArrayOutput)
}

func (o GetInstancesInstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) Dumping() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstance) bool { return v.Dumping }).(pulumi.BoolOutput)
}

func (o GetInstancesInstanceOutput) EnableAutoTopic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstance) bool { return v.EnableAutoTopic }).(pulumi.BoolOutput)
}

func (o GetInstancesInstanceOutput) EnablePublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstance) bool { return v.EnablePublicIp }).(pulumi.BoolOutput)
}

func (o GetInstancesInstanceOutput) EnabledMechanisms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.EnabledMechanisms }).(pulumi.StringArrayOutput)
}

func (o GetInstancesInstanceOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.EngineVersion }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) MaintainBegin() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.MaintainBegin }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) MaintainEnd() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.MaintainEnd }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) ManagementConnectAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ManagementConnectAddress }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) ManagerUser() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ManagerUser }).(pulumi.StringOutput)
}

// Deprecated: typo in manegement_connect_address, please use "managementConnectAddress" instead.
func (o GetInstancesInstanceOutput) ManegementConnectAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ManegementConnectAddress }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.NetworkId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) PartitionNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.PartitionNum }).(pulumi.IntOutput)
}

func (o GetInstancesInstanceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetInstancesInstanceOutput) ProductId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ProductId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) PublicConnAddresses() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.PublicConnAddresses }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) PublicIpIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.PublicIpIds }).(pulumi.StringArrayOutput)
}

func (o GetInstancesInstanceOutput) ResourceSpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ResourceSpecCode }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) RetentionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.RetentionPolicy }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) SecurityProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.SecurityProtocol }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) SslEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstance) bool { return v.SslEnable }).(pulumi.BoolOutput)
}

func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

func (o GetInstancesInstanceOutput) StorageSpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.StorageSpecCode }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetInstancesInstance) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetInstancesInstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

func (o GetInstancesInstanceOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.UserId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.UserName }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetInstancesInstanceCrossVpcAccess struct {
	AdvertisedIp string `pulumi:"advertisedIp"`
	// Deprecated: typo in lisenter_ip, please use "listenerIp" instead.
	LisenterIp string `pulumi:"lisenterIp"`
	ListenerIp string `pulumi:"listenerIp"`
	Port       int    `pulumi:"port"`
	PortId     string `pulumi:"portId"`
}

// GetInstancesInstanceCrossVpcAccessInput is an input type that accepts GetInstancesInstanceCrossVpcAccessArgs and GetInstancesInstanceCrossVpcAccessOutput values.
// You can construct a concrete instance of `GetInstancesInstanceCrossVpcAccessInput` via:
//
//	GetInstancesInstanceCrossVpcAccessArgs{...}
type GetInstancesInstanceCrossVpcAccessInput interface {
	pulumi.Input

	ToGetInstancesInstanceCrossVpcAccessOutput() GetInstancesInstanceCrossVpcAccessOutput
	ToGetInstancesInstanceCrossVpcAccessOutputWithContext(context.Context) GetInstancesInstanceCrossVpcAccessOutput
}

type GetInstancesInstanceCrossVpcAccessArgs struct {
	AdvertisedIp pulumi.StringInput `pulumi:"advertisedIp"`
	// Deprecated: typo in lisenter_ip, please use "listenerIp" instead.
	LisenterIp pulumi.StringInput `pulumi:"lisenterIp"`
	ListenerIp pulumi.StringInput `pulumi:"listenerIp"`
	Port       pulumi.IntInput    `pulumi:"port"`
	PortId     pulumi.StringInput `pulumi:"portId"`
}

func (GetInstancesInstanceCrossVpcAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceCrossVpcAccess)(nil)).Elem()
}

func (i GetInstancesInstanceCrossVpcAccessArgs) ToGetInstancesInstanceCrossVpcAccessOutput() GetInstancesInstanceCrossVpcAccessOutput {
	return i.ToGetInstancesInstanceCrossVpcAccessOutputWithContext(context.Background())
}

func (i GetInstancesInstanceCrossVpcAccessArgs) ToGetInstancesInstanceCrossVpcAccessOutputWithContext(ctx context.Context) GetInstancesInstanceCrossVpcAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceCrossVpcAccessOutput)
}

// GetInstancesInstanceCrossVpcAccessArrayInput is an input type that accepts GetInstancesInstanceCrossVpcAccessArray and GetInstancesInstanceCrossVpcAccessArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceCrossVpcAccessArrayInput` via:
//
//	GetInstancesInstanceCrossVpcAccessArray{ GetInstancesInstanceCrossVpcAccessArgs{...} }
type GetInstancesInstanceCrossVpcAccessArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceCrossVpcAccessArrayOutput() GetInstancesInstanceCrossVpcAccessArrayOutput
	ToGetInstancesInstanceCrossVpcAccessArrayOutputWithContext(context.Context) GetInstancesInstanceCrossVpcAccessArrayOutput
}

type GetInstancesInstanceCrossVpcAccessArray []GetInstancesInstanceCrossVpcAccessInput

func (GetInstancesInstanceCrossVpcAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceCrossVpcAccess)(nil)).Elem()
}

func (i GetInstancesInstanceCrossVpcAccessArray) ToGetInstancesInstanceCrossVpcAccessArrayOutput() GetInstancesInstanceCrossVpcAccessArrayOutput {
	return i.ToGetInstancesInstanceCrossVpcAccessArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceCrossVpcAccessArray) ToGetInstancesInstanceCrossVpcAccessArrayOutputWithContext(ctx context.Context) GetInstancesInstanceCrossVpcAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceCrossVpcAccessArrayOutput)
}

type GetInstancesInstanceCrossVpcAccessOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceCrossVpcAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceCrossVpcAccess)(nil)).Elem()
}

func (o GetInstancesInstanceCrossVpcAccessOutput) ToGetInstancesInstanceCrossVpcAccessOutput() GetInstancesInstanceCrossVpcAccessOutput {
	return o
}

func (o GetInstancesInstanceCrossVpcAccessOutput) ToGetInstancesInstanceCrossVpcAccessOutputWithContext(ctx context.Context) GetInstancesInstanceCrossVpcAccessOutput {
	return o
}

func (o GetInstancesInstanceCrossVpcAccessOutput) AdvertisedIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceCrossVpcAccess) string { return v.AdvertisedIp }).(pulumi.StringOutput)
}

// Deprecated: typo in lisenter_ip, please use "listenerIp" instead.
func (o GetInstancesInstanceCrossVpcAccessOutput) LisenterIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceCrossVpcAccess) string { return v.LisenterIp }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceCrossVpcAccessOutput) ListenerIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceCrossVpcAccess) string { return v.ListenerIp }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceCrossVpcAccessOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstanceCrossVpcAccess) int { return v.Port }).(pulumi.IntOutput)
}

func (o GetInstancesInstanceCrossVpcAccessOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceCrossVpcAccess) string { return v.PortId }).(pulumi.StringOutput)
}

type GetInstancesInstanceCrossVpcAccessArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceCrossVpcAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceCrossVpcAccess)(nil)).Elem()
}

func (o GetInstancesInstanceCrossVpcAccessArrayOutput) ToGetInstancesInstanceCrossVpcAccessArrayOutput() GetInstancesInstanceCrossVpcAccessArrayOutput {
	return o
}

func (o GetInstancesInstanceCrossVpcAccessArrayOutput) ToGetInstancesInstanceCrossVpcAccessArrayOutputWithContext(ctx context.Context) GetInstancesInstanceCrossVpcAccessArrayOutput {
	return o
}

func (o GetInstancesInstanceCrossVpcAccessArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceCrossVpcAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceCrossVpcAccess {
		return vs[0].([]GetInstancesInstanceCrossVpcAccess)[vs[1].(int)]
	}).(GetInstancesInstanceCrossVpcAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInstanceCrossVpcAccessInput)(nil)).Elem(), KafkaInstanceCrossVpcAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInstanceCrossVpcAccessArrayInput)(nil)).Elem(), KafkaInstanceCrossVpcAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInstanceParameterInput)(nil)).Elem(), KafkaInstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInstanceParameterArrayInput)(nil)).Elem(), KafkaInstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInstancePortProtocolInput)(nil)).Elem(), KafkaInstancePortProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInstancePortProtocolPtrInput)(nil)).Elem(), KafkaInstancePortProtocolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaInstancePortProtocolArrayInput)(nil)).Elem(), KafkaInstancePortProtocolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPermissionsPolicyInput)(nil)).Elem(), KafkaPermissionsPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPermissionsPolicyArrayInput)(nil)).Elem(), KafkaPermissionsPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicConfigInput)(nil)).Elem(), KafkaTopicConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicConfigArrayInput)(nil)).Elem(), KafkaTopicConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorInput)(nil)).Elem(), GetFlavorsFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorArrayInput)(nil)).Elem(), GetFlavorsFlavorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorIoInput)(nil)).Elem(), GetFlavorsFlavorIoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorIoArrayInput)(nil)).Elem(), GetFlavorsFlavorIoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorPropertyInput)(nil)).Elem(), GetFlavorsFlavorPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorPropertyArrayInput)(nil)).Elem(), GetFlavorsFlavorPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorSupportFeatureInput)(nil)).Elem(), GetFlavorsFlavorSupportFeatureArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorSupportFeatureArrayInput)(nil)).Elem(), GetFlavorsFlavorSupportFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorSupportFeaturePropertyInput)(nil)).Elem(), GetFlavorsFlavorSupportFeaturePropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorSupportFeaturePropertyArrayInput)(nil)).Elem(), GetFlavorsFlavorSupportFeaturePropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceCrossVpcAccessInput)(nil)).Elem(), GetInstancesInstanceCrossVpcAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceCrossVpcAccessArrayInput)(nil)).Elem(), GetInstancesInstanceCrossVpcAccessArray{})
	pulumi.RegisterOutputType(KafkaInstanceCrossVpcAccessOutput{})
	pulumi.RegisterOutputType(KafkaInstanceCrossVpcAccessArrayOutput{})
	pulumi.RegisterOutputType(KafkaInstanceParameterOutput{})
	pulumi.RegisterOutputType(KafkaInstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(KafkaInstancePortProtocolOutput{})
	pulumi.RegisterOutputType(KafkaInstancePortProtocolPtrOutput{})
	pulumi.RegisterOutputType(KafkaInstancePortProtocolArrayOutput{})
	pulumi.RegisterOutputType(KafkaPermissionsPolicyOutput{})
	pulumi.RegisterOutputType(KafkaPermissionsPolicyArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicConfigOutput{})
	pulumi.RegisterOutputType(KafkaTopicConfigArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorIoOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorIoArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorPropertyOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorPropertyArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorSupportFeatureOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorSupportFeatureArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorSupportFeaturePropertyOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorSupportFeaturePropertyArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceCrossVpcAccessOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceCrossVpcAccessArrayOutput{})
}

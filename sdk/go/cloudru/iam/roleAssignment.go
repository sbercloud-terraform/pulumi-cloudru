// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a Role assignment within group on SberCloud IAM Service.
//
// Note: You _must_ have admin privileges in your SberCloud cloud to use this resource.
//
// ## Example Usage
//
// ### Assign Role On Project Level
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			role1, err := iam.GetRole(ctx, &iam.GetRoleArgs{
//				Name: pulumi.StringRef("rds_adm"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			group1, err := iam.NewGroup(ctx, "group_1", &iam.GroupArgs{
//				Name: pulumi.String("group_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewRoleAssignment(ctx, "role_assignment_1", &iam.RoleAssignmentArgs{
//				RoleId:    pulumi.String(role1.Id),
//				GroupId:   group1.ID(),
//				ProjectId: pulumi.Any(projectId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Assign Role On Domain Level
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			role1, err := iam.GetRole(ctx, &iam.GetRoleArgs{
//				Name: pulumi.StringRef("secu_admin"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			group1, err := iam.NewGroup(ctx, "group_1", &iam.GroupArgs{
//				Name: pulumi.String("group_1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewRoleAssignment(ctx, "role_assignment_1", &iam.RoleAssignmentArgs{
//				RoleId:   pulumi.String(role1.Id),
//				GroupId:  group1.ID(),
//				DomainId: pulumi.Any(domainId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RoleAssignment struct {
	pulumi.CustomResourceState

	// Specifies the domain to assign the role
	// in.
	DomainId            pulumi.StringPtrOutput `pulumi:"domainId"`
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// Specifies the group to assign the role to.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Specifies the project to assign the role
	// in.
	ProjectId pulumi.StringPtrOutput `pulumi:"projectId"`
	// Specifies the role to assign.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
}

// NewRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewRoleAssignment(ctx *pulumi.Context,
	name string, args *RoleAssignmentArgs, opts ...pulumi.ResourceOption) (*RoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleAssignment
	err := ctx.RegisterResource("sbercloud:Iam/roleAssignment:RoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleAssignment gets an existing RoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleAssignmentState, opts ...pulumi.ResourceOption) (*RoleAssignment, error) {
	var resource RoleAssignment
	err := ctx.ReadResource("sbercloud:Iam/roleAssignment:RoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleAssignment resources.
type roleAssignmentState struct {
	// Specifies the domain to assign the role
	// in.
	DomainId            *string `pulumi:"domainId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the group to assign the role to.
	GroupId *string `pulumi:"groupId"`
	// Specifies the project to assign the role
	// in.
	ProjectId *string `pulumi:"projectId"`
	// Specifies the role to assign.
	RoleId *string `pulumi:"roleId"`
}

type RoleAssignmentState struct {
	// Specifies the domain to assign the role
	// in.
	DomainId            pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the group to assign the role to.
	GroupId pulumi.StringPtrInput
	// Specifies the project to assign the role
	// in.
	ProjectId pulumi.StringPtrInput
	// Specifies the role to assign.
	RoleId pulumi.StringPtrInput
}

func (RoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAssignmentState)(nil)).Elem()
}

type roleAssignmentArgs struct {
	// Specifies the domain to assign the role
	// in.
	DomainId            *string `pulumi:"domainId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the group to assign the role to.
	GroupId string `pulumi:"groupId"`
	// Specifies the project to assign the role
	// in.
	ProjectId *string `pulumi:"projectId"`
	// Specifies the role to assign.
	RoleId string `pulumi:"roleId"`
}

// The set of arguments for constructing a RoleAssignment resource.
type RoleAssignmentArgs struct {
	// Specifies the domain to assign the role
	// in.
	DomainId            pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the group to assign the role to.
	GroupId pulumi.StringInput
	// Specifies the project to assign the role
	// in.
	ProjectId pulumi.StringPtrInput
	// Specifies the role to assign.
	RoleId pulumi.StringInput
}

func (RoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAssignmentArgs)(nil)).Elem()
}

type RoleAssignmentInput interface {
	pulumi.Input

	ToRoleAssignmentOutput() RoleAssignmentOutput
	ToRoleAssignmentOutputWithContext(ctx context.Context) RoleAssignmentOutput
}

func (*RoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignment)(nil)).Elem()
}

func (i *RoleAssignment) ToRoleAssignmentOutput() RoleAssignmentOutput {
	return i.ToRoleAssignmentOutputWithContext(context.Background())
}

func (i *RoleAssignment) ToRoleAssignmentOutputWithContext(ctx context.Context) RoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentOutput)
}

// RoleAssignmentArrayInput is an input type that accepts RoleAssignmentArray and RoleAssignmentArrayOutput values.
// You can construct a concrete instance of `RoleAssignmentArrayInput` via:
//
//	RoleAssignmentArray{ RoleAssignmentArgs{...} }
type RoleAssignmentArrayInput interface {
	pulumi.Input

	ToRoleAssignmentArrayOutput() RoleAssignmentArrayOutput
	ToRoleAssignmentArrayOutputWithContext(context.Context) RoleAssignmentArrayOutput
}

type RoleAssignmentArray []RoleAssignmentInput

func (RoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleAssignment)(nil)).Elem()
}

func (i RoleAssignmentArray) ToRoleAssignmentArrayOutput() RoleAssignmentArrayOutput {
	return i.ToRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i RoleAssignmentArray) ToRoleAssignmentArrayOutputWithContext(ctx context.Context) RoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentArrayOutput)
}

// RoleAssignmentMapInput is an input type that accepts RoleAssignmentMap and RoleAssignmentMapOutput values.
// You can construct a concrete instance of `RoleAssignmentMapInput` via:
//
//	RoleAssignmentMap{ "key": RoleAssignmentArgs{...} }
type RoleAssignmentMapInput interface {
	pulumi.Input

	ToRoleAssignmentMapOutput() RoleAssignmentMapOutput
	ToRoleAssignmentMapOutputWithContext(context.Context) RoleAssignmentMapOutput
}

type RoleAssignmentMap map[string]RoleAssignmentInput

func (RoleAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleAssignment)(nil)).Elem()
}

func (i RoleAssignmentMap) ToRoleAssignmentMapOutput() RoleAssignmentMapOutput {
	return i.ToRoleAssignmentMapOutputWithContext(context.Background())
}

func (i RoleAssignmentMap) ToRoleAssignmentMapOutputWithContext(ctx context.Context) RoleAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentMapOutput)
}

type RoleAssignmentOutput struct{ *pulumi.OutputState }

func (RoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignment)(nil)).Elem()
}

func (o RoleAssignmentOutput) ToRoleAssignmentOutput() RoleAssignmentOutput {
	return o
}

func (o RoleAssignmentOutput) ToRoleAssignmentOutputWithContext(ctx context.Context) RoleAssignmentOutput {
	return o
}

// Specifies the domain to assign the role
// in.
func (o RoleAssignmentOutput) DomainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignment) pulumi.StringPtrOutput { return v.DomainId }).(pulumi.StringPtrOutput)
}

func (o RoleAssignmentOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignment) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Specifies the group to assign the role to.
func (o RoleAssignmentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleAssignment) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Specifies the project to assign the role
// in.
func (o RoleAssignmentOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignment) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Specifies the role to assign.
func (o RoleAssignmentOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleAssignment) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type RoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (RoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleAssignment)(nil)).Elem()
}

func (o RoleAssignmentArrayOutput) ToRoleAssignmentArrayOutput() RoleAssignmentArrayOutput {
	return o
}

func (o RoleAssignmentArrayOutput) ToRoleAssignmentArrayOutputWithContext(ctx context.Context) RoleAssignmentArrayOutput {
	return o
}

func (o RoleAssignmentArrayOutput) Index(i pulumi.IntInput) RoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleAssignment {
		return vs[0].([]*RoleAssignment)[vs[1].(int)]
	}).(RoleAssignmentOutput)
}

type RoleAssignmentMapOutput struct{ *pulumi.OutputState }

func (RoleAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleAssignment)(nil)).Elem()
}

func (o RoleAssignmentMapOutput) ToRoleAssignmentMapOutput() RoleAssignmentMapOutput {
	return o
}

func (o RoleAssignmentMapOutput) ToRoleAssignmentMapOutputWithContext(ctx context.Context) RoleAssignmentMapOutput {
	return o
}

func (o RoleAssignmentMapOutput) MapIndex(k pulumi.StringInput) RoleAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleAssignment {
		return vs[0].(map[string]*RoleAssignment)[vs[1].(string)]
	}).(RoleAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentInput)(nil)).Elem(), &RoleAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentArrayInput)(nil)).Elem(), RoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentMapInput)(nil)).Elem(), RoleAssignmentMap{})
	pulumi.RegisterOutputType(RoleAssignmentOutput{})
	pulumi.RegisterOutputType(RoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(RoleAssignmentMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DmsKafkaConsumerGroup struct {
	pulumi.CustomResourceState

	// Indicates the coordinator id of the consumer group.
	CoordinatorId pulumi.IntOutput `pulumi:"coordinatorId"`
	// Indicates the created time of the consumer group.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the consumer group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the Kafka instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Indicates the lag number of the consumer group.
	Lag pulumi.IntOutput `pulumi:"lag"`
	// Specifies the name of the consumer group.
	Name   pulumi.StringOutput `pulumi:"name"`
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates the state of the consumer group.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDmsKafkaConsumerGroup registers a new resource with the given unique name, arguments, and options.
func NewDmsKafkaConsumerGroup(ctx *pulumi.Context,
	name string, args *DmsKafkaConsumerGroupArgs, opts ...pulumi.ResourceOption) (*DmsKafkaConsumerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsKafkaConsumerGroup
	err := ctx.RegisterResource("cloudru:index/dmsKafkaConsumerGroup:DmsKafkaConsumerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsKafkaConsumerGroup gets an existing DmsKafkaConsumerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsKafkaConsumerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsKafkaConsumerGroupState, opts ...pulumi.ResourceOption) (*DmsKafkaConsumerGroup, error) {
	var resource DmsKafkaConsumerGroup
	err := ctx.ReadResource("cloudru:index/dmsKafkaConsumerGroup:DmsKafkaConsumerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsKafkaConsumerGroup resources.
type dmsKafkaConsumerGroupState struct {
	// Indicates the coordinator id of the consumer group.
	CoordinatorId *int `pulumi:"coordinatorId"`
	// Indicates the created time of the consumer group.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of the consumer group.
	Description *string `pulumi:"description"`
	// Specifies the ID of the Kafka instance.
	InstanceId *string `pulumi:"instanceId"`
	// Indicates the lag number of the consumer group.
	Lag *int `pulumi:"lag"`
	// Specifies the name of the consumer group.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// Indicates the state of the consumer group.
	State *string `pulumi:"state"`
}

type DmsKafkaConsumerGroupState struct {
	// Indicates the coordinator id of the consumer group.
	CoordinatorId pulumi.IntPtrInput
	// Indicates the created time of the consumer group.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the consumer group.
	Description pulumi.StringPtrInput
	// Specifies the ID of the Kafka instance.
	InstanceId pulumi.StringPtrInput
	// Indicates the lag number of the consumer group.
	Lag pulumi.IntPtrInput
	// Specifies the name of the consumer group.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Indicates the state of the consumer group.
	State pulumi.StringPtrInput
}

func (DmsKafkaConsumerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaConsumerGroupState)(nil)).Elem()
}

type dmsKafkaConsumerGroupArgs struct {
	// Specifies the description of the consumer group.
	Description *string `pulumi:"description"`
	// Specifies the ID of the Kafka instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the name of the consumer group.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a DmsKafkaConsumerGroup resource.
type DmsKafkaConsumerGroupArgs struct {
	// Specifies the description of the consumer group.
	Description pulumi.StringPtrInput
	// Specifies the ID of the Kafka instance.
	InstanceId pulumi.StringInput
	// Specifies the name of the consumer group.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
}

func (DmsKafkaConsumerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaConsumerGroupArgs)(nil)).Elem()
}

type DmsKafkaConsumerGroupInput interface {
	pulumi.Input

	ToDmsKafkaConsumerGroupOutput() DmsKafkaConsumerGroupOutput
	ToDmsKafkaConsumerGroupOutputWithContext(ctx context.Context) DmsKafkaConsumerGroupOutput
}

func (*DmsKafkaConsumerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaConsumerGroup)(nil)).Elem()
}

func (i *DmsKafkaConsumerGroup) ToDmsKafkaConsumerGroupOutput() DmsKafkaConsumerGroupOutput {
	return i.ToDmsKafkaConsumerGroupOutputWithContext(context.Background())
}

func (i *DmsKafkaConsumerGroup) ToDmsKafkaConsumerGroupOutputWithContext(ctx context.Context) DmsKafkaConsumerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaConsumerGroupOutput)
}

// DmsKafkaConsumerGroupArrayInput is an input type that accepts DmsKafkaConsumerGroupArray and DmsKafkaConsumerGroupArrayOutput values.
// You can construct a concrete instance of `DmsKafkaConsumerGroupArrayInput` via:
//
//	DmsKafkaConsumerGroupArray{ DmsKafkaConsumerGroupArgs{...} }
type DmsKafkaConsumerGroupArrayInput interface {
	pulumi.Input

	ToDmsKafkaConsumerGroupArrayOutput() DmsKafkaConsumerGroupArrayOutput
	ToDmsKafkaConsumerGroupArrayOutputWithContext(context.Context) DmsKafkaConsumerGroupArrayOutput
}

type DmsKafkaConsumerGroupArray []DmsKafkaConsumerGroupInput

func (DmsKafkaConsumerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaConsumerGroup)(nil)).Elem()
}

func (i DmsKafkaConsumerGroupArray) ToDmsKafkaConsumerGroupArrayOutput() DmsKafkaConsumerGroupArrayOutput {
	return i.ToDmsKafkaConsumerGroupArrayOutputWithContext(context.Background())
}

func (i DmsKafkaConsumerGroupArray) ToDmsKafkaConsumerGroupArrayOutputWithContext(ctx context.Context) DmsKafkaConsumerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaConsumerGroupArrayOutput)
}

// DmsKafkaConsumerGroupMapInput is an input type that accepts DmsKafkaConsumerGroupMap and DmsKafkaConsumerGroupMapOutput values.
// You can construct a concrete instance of `DmsKafkaConsumerGroupMapInput` via:
//
//	DmsKafkaConsumerGroupMap{ "key": DmsKafkaConsumerGroupArgs{...} }
type DmsKafkaConsumerGroupMapInput interface {
	pulumi.Input

	ToDmsKafkaConsumerGroupMapOutput() DmsKafkaConsumerGroupMapOutput
	ToDmsKafkaConsumerGroupMapOutputWithContext(context.Context) DmsKafkaConsumerGroupMapOutput
}

type DmsKafkaConsumerGroupMap map[string]DmsKafkaConsumerGroupInput

func (DmsKafkaConsumerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaConsumerGroup)(nil)).Elem()
}

func (i DmsKafkaConsumerGroupMap) ToDmsKafkaConsumerGroupMapOutput() DmsKafkaConsumerGroupMapOutput {
	return i.ToDmsKafkaConsumerGroupMapOutputWithContext(context.Background())
}

func (i DmsKafkaConsumerGroupMap) ToDmsKafkaConsumerGroupMapOutputWithContext(ctx context.Context) DmsKafkaConsumerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaConsumerGroupMapOutput)
}

type DmsKafkaConsumerGroupOutput struct{ *pulumi.OutputState }

func (DmsKafkaConsumerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaConsumerGroup)(nil)).Elem()
}

func (o DmsKafkaConsumerGroupOutput) ToDmsKafkaConsumerGroupOutput() DmsKafkaConsumerGroupOutput {
	return o
}

func (o DmsKafkaConsumerGroupOutput) ToDmsKafkaConsumerGroupOutputWithContext(ctx context.Context) DmsKafkaConsumerGroupOutput {
	return o
}

// Indicates the coordinator id of the consumer group.
func (o DmsKafkaConsumerGroupOutput) CoordinatorId() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsKafkaConsumerGroup) pulumi.IntOutput { return v.CoordinatorId }).(pulumi.IntOutput)
}

// Indicates the created time of the consumer group.
func (o DmsKafkaConsumerGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaConsumerGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the consumer group.
func (o DmsKafkaConsumerGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DmsKafkaConsumerGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the Kafka instance.
func (o DmsKafkaConsumerGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaConsumerGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates the lag number of the consumer group.
func (o DmsKafkaConsumerGroupOutput) Lag() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsKafkaConsumerGroup) pulumi.IntOutput { return v.Lag }).(pulumi.IntOutput)
}

// Specifies the name of the consumer group.
func (o DmsKafkaConsumerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaConsumerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DmsKafkaConsumerGroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaConsumerGroup) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the state of the consumer group.
func (o DmsKafkaConsumerGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaConsumerGroup) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type DmsKafkaConsumerGroupArrayOutput struct{ *pulumi.OutputState }

func (DmsKafkaConsumerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaConsumerGroup)(nil)).Elem()
}

func (o DmsKafkaConsumerGroupArrayOutput) ToDmsKafkaConsumerGroupArrayOutput() DmsKafkaConsumerGroupArrayOutput {
	return o
}

func (o DmsKafkaConsumerGroupArrayOutput) ToDmsKafkaConsumerGroupArrayOutputWithContext(ctx context.Context) DmsKafkaConsumerGroupArrayOutput {
	return o
}

func (o DmsKafkaConsumerGroupArrayOutput) Index(i pulumi.IntInput) DmsKafkaConsumerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsKafkaConsumerGroup {
		return vs[0].([]*DmsKafkaConsumerGroup)[vs[1].(int)]
	}).(DmsKafkaConsumerGroupOutput)
}

type DmsKafkaConsumerGroupMapOutput struct{ *pulumi.OutputState }

func (DmsKafkaConsumerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaConsumerGroup)(nil)).Elem()
}

func (o DmsKafkaConsumerGroupMapOutput) ToDmsKafkaConsumerGroupMapOutput() DmsKafkaConsumerGroupMapOutput {
	return o
}

func (o DmsKafkaConsumerGroupMapOutput) ToDmsKafkaConsumerGroupMapOutputWithContext(ctx context.Context) DmsKafkaConsumerGroupMapOutput {
	return o
}

func (o DmsKafkaConsumerGroupMapOutput) MapIndex(k pulumi.StringInput) DmsKafkaConsumerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsKafkaConsumerGroup {
		return vs[0].(map[string]*DmsKafkaConsumerGroup)[vs[1].(string)]
	}).(DmsKafkaConsumerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaConsumerGroupInput)(nil)).Elem(), &DmsKafkaConsumerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaConsumerGroupArrayInput)(nil)).Elem(), DmsKafkaConsumerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaConsumerGroupMapInput)(nil)).Elem(), DmsKafkaConsumerGroupMap{})
	pulumi.RegisterOutputType(DmsKafkaConsumerGroupOutput{})
	pulumi.RegisterOutputType(DmsKafkaConsumerGroupArrayOutput{})
	pulumi.RegisterOutputType(DmsKafkaConsumerGroupMapOutput{})
}

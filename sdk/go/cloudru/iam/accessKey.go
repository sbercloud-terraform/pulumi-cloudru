// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a permanent Access Key resource within SberCloud IAM service.
//
// > **NOTE:** You _must_ have admin privileges in your SberCloud cloud to use this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			user1, err := iam.NewUser(ctx, "user_1", &iam.UserArgs{
//				Name:        pulumi.String("user_1"),
//				Description: pulumi.String("A user"),
//				Password:    pulumi.String("password123!"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewAccessKey(ctx, "key_1", &iam.AccessKeyArgs{
//				UserId: user1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AccessKey struct {
	pulumi.CustomResourceState

	// The time when the access key was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the description of the access key.
	Description     pulumi.StringPtrOutput `pulumi:"description"`
	EncryptedSecret pulumi.StringOutput    `pulumi:"encryptedSecret"`
	// The fingerprint of the PGP key used to encrypt the secret
	KeyFingerprint pulumi.StringOutput `pulumi:"keyFingerprint"`
	// Either a base-64 encoded PGP public key, or a keybase username in the form
	// `keybase:some_person_that_exists`. Changing this creates a new resource.
	PgpKey pulumi.StringPtrOutput `pulumi:"pgpKey"`
	// The access secret key. Setting the value only when writing to `secretFile` failed.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// Specifies the file name that can save access key and access secret key.
	// Defaults to *./credentials-{{user name}}.csv*. Changing this creates a new resource.
	SecretFile pulumi.StringPtrOutput `pulumi:"secretFile"`
	// Specifies the status of the access key. It must be *active* or *inactive*. Default value
	// is *active*.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the ID of the user who is requesting to create an access key.
	// Changing this creates a new resource.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The name of IAM user.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewAccessKey registers a new resource with the given unique name, arguments, and options.
func NewAccessKey(ctx *pulumi.Context,
	name string, args *AccessKeyArgs, opts ...pulumi.ResourceOption) (*AccessKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessKey
	err := ctx.RegisterResource("sbercloud:Iam/accessKey:AccessKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessKey gets an existing AccessKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessKeyState, opts ...pulumi.ResourceOption) (*AccessKey, error) {
	var resource AccessKey
	err := ctx.ReadResource("sbercloud:Iam/accessKey:AccessKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessKey resources.
type accessKeyState struct {
	// The time when the access key was created.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the description of the access key.
	Description     *string `pulumi:"description"`
	EncryptedSecret *string `pulumi:"encryptedSecret"`
	// The fingerprint of the PGP key used to encrypt the secret
	KeyFingerprint *string `pulumi:"keyFingerprint"`
	// Either a base-64 encoded PGP public key, or a keybase username in the form
	// `keybase:some_person_that_exists`. Changing this creates a new resource.
	PgpKey *string `pulumi:"pgpKey"`
	// The access secret key. Setting the value only when writing to `secretFile` failed.
	Secret *string `pulumi:"secret"`
	// Specifies the file name that can save access key and access secret key.
	// Defaults to *./credentials-{{user name}}.csv*. Changing this creates a new resource.
	SecretFile *string `pulumi:"secretFile"`
	// Specifies the status of the access key. It must be *active* or *inactive*. Default value
	// is *active*.
	Status *string `pulumi:"status"`
	// Specifies the ID of the user who is requesting to create an access key.
	// Changing this creates a new resource.
	UserId *string `pulumi:"userId"`
	// The name of IAM user.
	UserName *string `pulumi:"userName"`
}

type AccessKeyState struct {
	// The time when the access key was created.
	CreateTime pulumi.StringPtrInput
	// Specifies the description of the access key.
	Description     pulumi.StringPtrInput
	EncryptedSecret pulumi.StringPtrInput
	// The fingerprint of the PGP key used to encrypt the secret
	KeyFingerprint pulumi.StringPtrInput
	// Either a base-64 encoded PGP public key, or a keybase username in the form
	// `keybase:some_person_that_exists`. Changing this creates a new resource.
	PgpKey pulumi.StringPtrInput
	// The access secret key. Setting the value only when writing to `secretFile` failed.
	Secret pulumi.StringPtrInput
	// Specifies the file name that can save access key and access secret key.
	// Defaults to *./credentials-{{user name}}.csv*. Changing this creates a new resource.
	SecretFile pulumi.StringPtrInput
	// Specifies the status of the access key. It must be *active* or *inactive*. Default value
	// is *active*.
	Status pulumi.StringPtrInput
	// Specifies the ID of the user who is requesting to create an access key.
	// Changing this creates a new resource.
	UserId pulumi.StringPtrInput
	// The name of IAM user.
	UserName pulumi.StringPtrInput
}

func (AccessKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessKeyState)(nil)).Elem()
}

type accessKeyArgs struct {
	// Specifies the description of the access key.
	Description *string `pulumi:"description"`
	// Either a base-64 encoded PGP public key, or a keybase username in the form
	// `keybase:some_person_that_exists`. Changing this creates a new resource.
	PgpKey *string `pulumi:"pgpKey"`
	// Specifies the file name that can save access key and access secret key.
	// Defaults to *./credentials-{{user name}}.csv*. Changing this creates a new resource.
	SecretFile *string `pulumi:"secretFile"`
	// Specifies the status of the access key. It must be *active* or *inactive*. Default value
	// is *active*.
	Status *string `pulumi:"status"`
	// Specifies the ID of the user who is requesting to create an access key.
	// Changing this creates a new resource.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a AccessKey resource.
type AccessKeyArgs struct {
	// Specifies the description of the access key.
	Description pulumi.StringPtrInput
	// Either a base-64 encoded PGP public key, or a keybase username in the form
	// `keybase:some_person_that_exists`. Changing this creates a new resource.
	PgpKey pulumi.StringPtrInput
	// Specifies the file name that can save access key and access secret key.
	// Defaults to *./credentials-{{user name}}.csv*. Changing this creates a new resource.
	SecretFile pulumi.StringPtrInput
	// Specifies the status of the access key. It must be *active* or *inactive*. Default value
	// is *active*.
	Status pulumi.StringPtrInput
	// Specifies the ID of the user who is requesting to create an access key.
	// Changing this creates a new resource.
	UserId pulumi.StringInput
}

func (AccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessKeyArgs)(nil)).Elem()
}

type AccessKeyInput interface {
	pulumi.Input

	ToAccessKeyOutput() AccessKeyOutput
	ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput
}

func (*AccessKey) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKey)(nil)).Elem()
}

func (i *AccessKey) ToAccessKeyOutput() AccessKeyOutput {
	return i.ToAccessKeyOutputWithContext(context.Background())
}

func (i *AccessKey) ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyOutput)
}

// AccessKeyArrayInput is an input type that accepts AccessKeyArray and AccessKeyArrayOutput values.
// You can construct a concrete instance of `AccessKeyArrayInput` via:
//
//	AccessKeyArray{ AccessKeyArgs{...} }
type AccessKeyArrayInput interface {
	pulumi.Input

	ToAccessKeyArrayOutput() AccessKeyArrayOutput
	ToAccessKeyArrayOutputWithContext(context.Context) AccessKeyArrayOutput
}

type AccessKeyArray []AccessKeyInput

func (AccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessKey)(nil)).Elem()
}

func (i AccessKeyArray) ToAccessKeyArrayOutput() AccessKeyArrayOutput {
	return i.ToAccessKeyArrayOutputWithContext(context.Background())
}

func (i AccessKeyArray) ToAccessKeyArrayOutputWithContext(ctx context.Context) AccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyArrayOutput)
}

// AccessKeyMapInput is an input type that accepts AccessKeyMap and AccessKeyMapOutput values.
// You can construct a concrete instance of `AccessKeyMapInput` via:
//
//	AccessKeyMap{ "key": AccessKeyArgs{...} }
type AccessKeyMapInput interface {
	pulumi.Input

	ToAccessKeyMapOutput() AccessKeyMapOutput
	ToAccessKeyMapOutputWithContext(context.Context) AccessKeyMapOutput
}

type AccessKeyMap map[string]AccessKeyInput

func (AccessKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessKey)(nil)).Elem()
}

func (i AccessKeyMap) ToAccessKeyMapOutput() AccessKeyMapOutput {
	return i.ToAccessKeyMapOutputWithContext(context.Background())
}

func (i AccessKeyMap) ToAccessKeyMapOutputWithContext(ctx context.Context) AccessKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyMapOutput)
}

type AccessKeyOutput struct{ *pulumi.OutputState }

func (AccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKey)(nil)).Elem()
}

func (o AccessKeyOutput) ToAccessKeyOutput() AccessKeyOutput {
	return o
}

func (o AccessKeyOutput) ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput {
	return o
}

// The time when the access key was created.
func (o AccessKeyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the description of the access key.
func (o AccessKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AccessKeyOutput) EncryptedSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.EncryptedSecret }).(pulumi.StringOutput)
}

// The fingerprint of the PGP key used to encrypt the secret
func (o AccessKeyOutput) KeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.KeyFingerprint }).(pulumi.StringOutput)
}

// Either a base-64 encoded PGP public key, or a keybase username in the form
// `keybase:some_person_that_exists`. Changing this creates a new resource.
func (o AccessKeyOutput) PgpKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringPtrOutput { return v.PgpKey }).(pulumi.StringPtrOutput)
}

// The access secret key. Setting the value only when writing to `secretFile` failed.
func (o AccessKeyOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// Specifies the file name that can save access key and access secret key.
// Defaults to *./credentials-{{user name}}.csv*. Changing this creates a new resource.
func (o AccessKeyOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringPtrOutput { return v.SecretFile }).(pulumi.StringPtrOutput)
}

// Specifies the status of the access key. It must be *active* or *inactive*. Default value
// is *active*.
func (o AccessKeyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the ID of the user who is requesting to create an access key.
// Changing this creates a new resource.
func (o AccessKeyOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// The name of IAM user.
func (o AccessKeyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type AccessKeyArrayOutput struct{ *pulumi.OutputState }

func (AccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessKey)(nil)).Elem()
}

func (o AccessKeyArrayOutput) ToAccessKeyArrayOutput() AccessKeyArrayOutput {
	return o
}

func (o AccessKeyArrayOutput) ToAccessKeyArrayOutputWithContext(ctx context.Context) AccessKeyArrayOutput {
	return o
}

func (o AccessKeyArrayOutput) Index(i pulumi.IntInput) AccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessKey {
		return vs[0].([]*AccessKey)[vs[1].(int)]
	}).(AccessKeyOutput)
}

type AccessKeyMapOutput struct{ *pulumi.OutputState }

func (AccessKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessKey)(nil)).Elem()
}

func (o AccessKeyMapOutput) ToAccessKeyMapOutput() AccessKeyMapOutput {
	return o
}

func (o AccessKeyMapOutput) ToAccessKeyMapOutputWithContext(ctx context.Context) AccessKeyMapOutput {
	return o
}

func (o AccessKeyMapOutput) MapIndex(k pulumi.StringInput) AccessKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessKey {
		return vs[0].(map[string]*AccessKey)[vs[1].(string)]
	}).(AccessKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyInput)(nil)).Elem(), &AccessKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyArrayInput)(nil)).Elem(), AccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyMapInput)(nil)).Elem(), AccessKeyMap{})
	pulumi.RegisterOutputType(AccessKeyOutput{})
	pulumi.RegisterOutputType(AccessKeyArrayOutput{})
	pulumi.RegisterOutputType(AccessKeyMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ObsBucketAcl struct {
	pulumi.CustomResourceState

	// Specifies the account permissions.
	AccountPermissions ObsBucketAclAccountPermissionArrayOutput `pulumi:"accountPermissions"`
	// Specifies the name of the bucket to which to set the acl.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Specifies the log delivery user permission.
	LogDeliveryUserPermission ObsBucketAclLogDeliveryUserPermissionPtrOutput `pulumi:"logDeliveryUserPermission"`
	// Specifies the bucket owner permission.
	OwnerPermission ObsBucketAclOwnerPermissionOutput `pulumi:"ownerPermission"`
	// Specifies the public permission.
	PublicPermission ObsBucketAclPublicPermissionPtrOutput `pulumi:"publicPermission"`
	Region           pulumi.StringOutput                   `pulumi:"region"`
}

// NewObsBucketAcl registers a new resource with the given unique name, arguments, and options.
func NewObsBucketAcl(ctx *pulumi.Context,
	name string, args *ObsBucketAclArgs, opts ...pulumi.ResourceOption) (*ObsBucketAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ObsBucketAcl
	err := ctx.RegisterResource("cloudru:index/obsBucketAcl:ObsBucketAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObsBucketAcl gets an existing ObsBucketAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObsBucketAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObsBucketAclState, opts ...pulumi.ResourceOption) (*ObsBucketAcl, error) {
	var resource ObsBucketAcl
	err := ctx.ReadResource("cloudru:index/obsBucketAcl:ObsBucketAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObsBucketAcl resources.
type obsBucketAclState struct {
	// Specifies the account permissions.
	AccountPermissions []ObsBucketAclAccountPermission `pulumi:"accountPermissions"`
	// Specifies the name of the bucket to which to set the acl.
	Bucket *string `pulumi:"bucket"`
	// Specifies the log delivery user permission.
	LogDeliveryUserPermission *ObsBucketAclLogDeliveryUserPermission `pulumi:"logDeliveryUserPermission"`
	// Specifies the bucket owner permission.
	OwnerPermission *ObsBucketAclOwnerPermission `pulumi:"ownerPermission"`
	// Specifies the public permission.
	PublicPermission *ObsBucketAclPublicPermission `pulumi:"publicPermission"`
	Region           *string                       `pulumi:"region"`
}

type ObsBucketAclState struct {
	// Specifies the account permissions.
	AccountPermissions ObsBucketAclAccountPermissionArrayInput
	// Specifies the name of the bucket to which to set the acl.
	Bucket pulumi.StringPtrInput
	// Specifies the log delivery user permission.
	LogDeliveryUserPermission ObsBucketAclLogDeliveryUserPermissionPtrInput
	// Specifies the bucket owner permission.
	OwnerPermission ObsBucketAclOwnerPermissionPtrInput
	// Specifies the public permission.
	PublicPermission ObsBucketAclPublicPermissionPtrInput
	Region           pulumi.StringPtrInput
}

func (ObsBucketAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*obsBucketAclState)(nil)).Elem()
}

type obsBucketAclArgs struct {
	// Specifies the account permissions.
	AccountPermissions []ObsBucketAclAccountPermission `pulumi:"accountPermissions"`
	// Specifies the name of the bucket to which to set the acl.
	Bucket string `pulumi:"bucket"`
	// Specifies the log delivery user permission.
	LogDeliveryUserPermission *ObsBucketAclLogDeliveryUserPermission `pulumi:"logDeliveryUserPermission"`
	// Specifies the bucket owner permission.
	OwnerPermission *ObsBucketAclOwnerPermission `pulumi:"ownerPermission"`
	// Specifies the public permission.
	PublicPermission *ObsBucketAclPublicPermission `pulumi:"publicPermission"`
	Region           *string                       `pulumi:"region"`
}

// The set of arguments for constructing a ObsBucketAcl resource.
type ObsBucketAclArgs struct {
	// Specifies the account permissions.
	AccountPermissions ObsBucketAclAccountPermissionArrayInput
	// Specifies the name of the bucket to which to set the acl.
	Bucket pulumi.StringInput
	// Specifies the log delivery user permission.
	LogDeliveryUserPermission ObsBucketAclLogDeliveryUserPermissionPtrInput
	// Specifies the bucket owner permission.
	OwnerPermission ObsBucketAclOwnerPermissionPtrInput
	// Specifies the public permission.
	PublicPermission ObsBucketAclPublicPermissionPtrInput
	Region           pulumi.StringPtrInput
}

func (ObsBucketAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*obsBucketAclArgs)(nil)).Elem()
}

type ObsBucketAclInput interface {
	pulumi.Input

	ToObsBucketAclOutput() ObsBucketAclOutput
	ToObsBucketAclOutputWithContext(ctx context.Context) ObsBucketAclOutput
}

func (*ObsBucketAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**ObsBucketAcl)(nil)).Elem()
}

func (i *ObsBucketAcl) ToObsBucketAclOutput() ObsBucketAclOutput {
	return i.ToObsBucketAclOutputWithContext(context.Background())
}

func (i *ObsBucketAcl) ToObsBucketAclOutputWithContext(ctx context.Context) ObsBucketAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsBucketAclOutput)
}

// ObsBucketAclArrayInput is an input type that accepts ObsBucketAclArray and ObsBucketAclArrayOutput values.
// You can construct a concrete instance of `ObsBucketAclArrayInput` via:
//
//	ObsBucketAclArray{ ObsBucketAclArgs{...} }
type ObsBucketAclArrayInput interface {
	pulumi.Input

	ToObsBucketAclArrayOutput() ObsBucketAclArrayOutput
	ToObsBucketAclArrayOutputWithContext(context.Context) ObsBucketAclArrayOutput
}

type ObsBucketAclArray []ObsBucketAclInput

func (ObsBucketAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObsBucketAcl)(nil)).Elem()
}

func (i ObsBucketAclArray) ToObsBucketAclArrayOutput() ObsBucketAclArrayOutput {
	return i.ToObsBucketAclArrayOutputWithContext(context.Background())
}

func (i ObsBucketAclArray) ToObsBucketAclArrayOutputWithContext(ctx context.Context) ObsBucketAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsBucketAclArrayOutput)
}

// ObsBucketAclMapInput is an input type that accepts ObsBucketAclMap and ObsBucketAclMapOutput values.
// You can construct a concrete instance of `ObsBucketAclMapInput` via:
//
//	ObsBucketAclMap{ "key": ObsBucketAclArgs{...} }
type ObsBucketAclMapInput interface {
	pulumi.Input

	ToObsBucketAclMapOutput() ObsBucketAclMapOutput
	ToObsBucketAclMapOutputWithContext(context.Context) ObsBucketAclMapOutput
}

type ObsBucketAclMap map[string]ObsBucketAclInput

func (ObsBucketAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObsBucketAcl)(nil)).Elem()
}

func (i ObsBucketAclMap) ToObsBucketAclMapOutput() ObsBucketAclMapOutput {
	return i.ToObsBucketAclMapOutputWithContext(context.Background())
}

func (i ObsBucketAclMap) ToObsBucketAclMapOutputWithContext(ctx context.Context) ObsBucketAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObsBucketAclMapOutput)
}

type ObsBucketAclOutput struct{ *pulumi.OutputState }

func (ObsBucketAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObsBucketAcl)(nil)).Elem()
}

func (o ObsBucketAclOutput) ToObsBucketAclOutput() ObsBucketAclOutput {
	return o
}

func (o ObsBucketAclOutput) ToObsBucketAclOutputWithContext(ctx context.Context) ObsBucketAclOutput {
	return o
}

// Specifies the account permissions.
func (o ObsBucketAclOutput) AccountPermissions() ObsBucketAclAccountPermissionArrayOutput {
	return o.ApplyT(func(v *ObsBucketAcl) ObsBucketAclAccountPermissionArrayOutput { return v.AccountPermissions }).(ObsBucketAclAccountPermissionArrayOutput)
}

// Specifies the name of the bucket to which to set the acl.
func (o ObsBucketAclOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketAcl) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Specifies the log delivery user permission.
func (o ObsBucketAclOutput) LogDeliveryUserPermission() ObsBucketAclLogDeliveryUserPermissionPtrOutput {
	return o.ApplyT(func(v *ObsBucketAcl) ObsBucketAclLogDeliveryUserPermissionPtrOutput {
		return v.LogDeliveryUserPermission
	}).(ObsBucketAclLogDeliveryUserPermissionPtrOutput)
}

// Specifies the bucket owner permission.
func (o ObsBucketAclOutput) OwnerPermission() ObsBucketAclOwnerPermissionOutput {
	return o.ApplyT(func(v *ObsBucketAcl) ObsBucketAclOwnerPermissionOutput { return v.OwnerPermission }).(ObsBucketAclOwnerPermissionOutput)
}

// Specifies the public permission.
func (o ObsBucketAclOutput) PublicPermission() ObsBucketAclPublicPermissionPtrOutput {
	return o.ApplyT(func(v *ObsBucketAcl) ObsBucketAclPublicPermissionPtrOutput { return v.PublicPermission }).(ObsBucketAclPublicPermissionPtrOutput)
}

func (o ObsBucketAclOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ObsBucketAcl) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ObsBucketAclArrayOutput struct{ *pulumi.OutputState }

func (ObsBucketAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObsBucketAcl)(nil)).Elem()
}

func (o ObsBucketAclArrayOutput) ToObsBucketAclArrayOutput() ObsBucketAclArrayOutput {
	return o
}

func (o ObsBucketAclArrayOutput) ToObsBucketAclArrayOutputWithContext(ctx context.Context) ObsBucketAclArrayOutput {
	return o
}

func (o ObsBucketAclArrayOutput) Index(i pulumi.IntInput) ObsBucketAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObsBucketAcl {
		return vs[0].([]*ObsBucketAcl)[vs[1].(int)]
	}).(ObsBucketAclOutput)
}

type ObsBucketAclMapOutput struct{ *pulumi.OutputState }

func (ObsBucketAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObsBucketAcl)(nil)).Elem()
}

func (o ObsBucketAclMapOutput) ToObsBucketAclMapOutput() ObsBucketAclMapOutput {
	return o
}

func (o ObsBucketAclMapOutput) ToObsBucketAclMapOutputWithContext(ctx context.Context) ObsBucketAclMapOutput {
	return o
}

func (o ObsBucketAclMapOutput) MapIndex(k pulumi.StringInput) ObsBucketAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObsBucketAcl {
		return vs[0].(map[string]*ObsBucketAcl)[vs[1].(string)]
	}).(ObsBucketAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObsBucketAclInput)(nil)).Elem(), &ObsBucketAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObsBucketAclArrayInput)(nil)).Elem(), ObsBucketAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObsBucketAclMapInput)(nil)).Elem(), ObsBucketAclMap{})
	pulumi.RegisterOutputType(ObsBucketAclOutput{})
	pulumi.RegisterOutputType(ObsBucketAclArrayOutput{})
	pulumi.RegisterOutputType(ObsBucketAclMapOutput{})
}

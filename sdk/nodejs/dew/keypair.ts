// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Keypair extends pulumi.CustomResource {
    /**
     * Get an existing Keypair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeypairState, opts?: pulumi.CustomResourceOptions): Keypair {
        return new Keypair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Dew/keypair:Keypair';

    /**
     * Returns true if the given object is an instance of Keypair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Keypair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Keypair.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly encryptionType: pulumi.Output<string>;
    declare public /*out*/ readonly fingerprint: pulumi.Output<string>;
    declare public /*out*/ readonly isManaged: pulumi.Output<boolean>;
    declare public readonly keyFile: pulumi.Output<string>;
    declare public readonly kmsKeyId: pulumi.Output<string | undefined>;
    declare public readonly kmsKeyName: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    declare public readonly publicKey: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly scope: pulumi.Output<string>;
    declare public readonly userId: pulumi.Output<string>;

    /**
     * Create a Keypair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeypairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeypairArgs | KeypairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeypairState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["encryptionType"] = state?.encryptionType;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["isManaged"] = state?.isManaged;
            resourceInputs["keyFile"] = state?.keyFile;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["kmsKeyName"] = state?.kmsKeyName;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["publicKey"] = state?.publicKey;
            resourceInputs["region"] = state?.region;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as KeypairArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["encryptionType"] = args?.encryptionType;
            resourceInputs["keyFile"] = args?.keyFile;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["kmsKeyName"] = args?.kmsKeyName;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["publicKey"] = args?.publicKey;
            resourceInputs["region"] = args?.region;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["userId"] = args?.userId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["isManaged"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Keypair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Keypair resources.
 */
export interface KeypairState {
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    isManaged?: pulumi.Input<boolean>;
    keyFile?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Keypair resource.
 */
export interface KeypairArgs {
    description?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    keyFile?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyName?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    scope?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages CTS key event notification resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### Complete Notification
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const topicUrn = config.requireObject<any>("topicUrn");
 * const notify = new sbercloud.cts.Notification("notify", {
 *     name: "keyOperate_test",
 *     operationType: "complete",
 *     smnTopic: topicUrn,
 * });
 * ```
 *
 * ### Customized Notification
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const topicUrn = config.requireObject<any>("topicUrn");
 * const notify = new sbercloud.cts.Notification("notify", {
 *     name: "keyOperate_test",
 *     operationType: "customized",
 *     smnTopic: topicUrn,
 *     operations: [{
 *         service: "ECS",
 *         resource: "ecs",
 *         traceNames: [
 *             "createServer",
 *             "deleteServer",
 *         ],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * CTS notifications can be imported using `name`, e.g.:
 *
 * ```sh
 * $ pulumi import sbercloud:Cts/notification:Notification tracker your_notification
 * ```
 */
export class Notification extends pulumi.CustomResource {
    /**
     * Get an existing Notification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationState, opts?: pulumi.CustomResourceOptions): Notification {
        return new Notification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cts/notification:Notification';

    /**
     * Returns true if the given object is an instance of Notification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notification.__pulumiType;
    }

    declare public readonly agencyName: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specifies whether notification is enabled, defaults to true.
     *
     * <a name="notificationOperationsObject"></a>
     * The `operations` block supports:
     */
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    declare public readonly filter: pulumi.Output<outputs.Cts.NotificationFilter | undefined>;
    /**
     * Specifies the notification name. The value contains a maximum of 64 characters,
     * and only letters, digits, underscores(_), and Chinese characters are allowed.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The notification ID in UUID format.
     */
    declare public /*out*/ readonly notificationId: pulumi.Output<string>;
    /**
     * Specifies the operation type, possible options include **complete** and
     * **customized**.
     */
    declare public readonly operationType: pulumi.Output<string>;
    /**
     * Specifies an array of users. Notifications will be sent when specified users
     * perform specified operations. All users are selected by default.
     * The object structure is documented below.
     */
    declare public readonly operationUsers: pulumi.Output<outputs.Cts.NotificationOperationUser[] | undefined>;
    /**
     * Specifies an array of operations that will trigger notifications.
     * For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
     * The object structure is documented below.
     */
    declare public readonly operations: pulumi.Output<outputs.Cts.NotificationOperation[] | undefined>;
    /**
     * Specifies the region in which to manage the CTS notification resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the URN of a topic.
     */
    declare public readonly smnTopic: pulumi.Output<string | undefined>;
    /**
     * The notification status, the value can be **enabled** or **disabled**.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a Notification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationArgs | NotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationState | undefined;
            resourceInputs["agencyName"] = state?.agencyName;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["filter"] = state?.filter;
            resourceInputs["name"] = state?.name;
            resourceInputs["notificationId"] = state?.notificationId;
            resourceInputs["operationType"] = state?.operationType;
            resourceInputs["operationUsers"] = state?.operationUsers;
            resourceInputs["operations"] = state?.operations;
            resourceInputs["region"] = state?.region;
            resourceInputs["smnTopic"] = state?.smnTopic;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as NotificationArgs | undefined;
            if (args?.operationType === undefined && !opts.urn) {
                throw new Error("Missing required property 'operationType'");
            }
            resourceInputs["agencyName"] = args?.agencyName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["filter"] = args?.filter;
            resourceInputs["name"] = args?.name;
            resourceInputs["operationType"] = args?.operationType;
            resourceInputs["operationUsers"] = args?.operationUsers;
            resourceInputs["operations"] = args?.operations;
            resourceInputs["region"] = args?.region;
            resourceInputs["smnTopic"] = args?.smnTopic;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["notificationId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Notification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Notification resources.
 */
export interface NotificationState {
    agencyName?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies whether notification is enabled, defaults to true.
     *
     * <a name="notificationOperationsObject"></a>
     * The `operations` block supports:
     */
    enabled?: pulumi.Input<boolean>;
    filter?: pulumi.Input<inputs.Cts.NotificationFilter>;
    /**
     * Specifies the notification name. The value contains a maximum of 64 characters,
     * and only letters, digits, underscores(_), and Chinese characters are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * The notification ID in UUID format.
     */
    notificationId?: pulumi.Input<string>;
    /**
     * Specifies the operation type, possible options include **complete** and
     * **customized**.
     */
    operationType?: pulumi.Input<string>;
    /**
     * Specifies an array of users. Notifications will be sent when specified users
     * perform specified operations. All users are selected by default.
     * The object structure is documented below.
     */
    operationUsers?: pulumi.Input<pulumi.Input<inputs.Cts.NotificationOperationUser>[]>;
    /**
     * Specifies an array of operations that will trigger notifications.
     * For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
     * The object structure is documented below.
     */
    operations?: pulumi.Input<pulumi.Input<inputs.Cts.NotificationOperation>[]>;
    /**
     * Specifies the region in which to manage the CTS notification resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the URN of a topic.
     */
    smnTopic?: pulumi.Input<string>;
    /**
     * The notification status, the value can be **enabled** or **disabled**.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Notification resource.
 */
export interface NotificationArgs {
    agencyName?: pulumi.Input<string>;
    /**
     * Specifies whether notification is enabled, defaults to true.
     *
     * <a name="notificationOperationsObject"></a>
     * The `operations` block supports:
     */
    enabled?: pulumi.Input<boolean>;
    filter?: pulumi.Input<inputs.Cts.NotificationFilter>;
    /**
     * Specifies the notification name. The value contains a maximum of 64 characters,
     * and only letters, digits, underscores(_), and Chinese characters are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the operation type, possible options include **complete** and
     * **customized**.
     */
    operationType: pulumi.Input<string>;
    /**
     * Specifies an array of users. Notifications will be sent when specified users
     * perform specified operations. All users are selected by default.
     * The object structure is documented below.
     */
    operationUsers?: pulumi.Input<pulumi.Input<inputs.Cts.NotificationOperationUser>[]>;
    /**
     * Specifies an array of operations that will trigger notifications.
     * For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
     * The object structure is documented below.
     */
    operations?: pulumi.Input<pulumi.Input<inputs.Cts.NotificationOperation>[]>;
    /**
     * Specifies the region in which to manage the CTS notification resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the URN of a topic.
     */
    smnTopic?: pulumi.Input<string>;
}

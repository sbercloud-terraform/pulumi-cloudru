// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Key struct {
	pulumi.CustomResourceState

	CreationDate          pulumi.StringOutput    `pulumi:"creationDate"`
	DefaultKeyFlag        pulumi.StringOutput    `pulumi:"defaultKeyFlag"`
	DomainId              pulumi.StringOutput    `pulumi:"domainId"`
	EnterpriseProjectId   pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	ExpirationTime        pulumi.StringOutput    `pulumi:"expirationTime"`
	IsEnabled             pulumi.BoolPtrOutput   `pulumi:"isEnabled"`
	KeyAlgorithm          pulumi.StringOutput    `pulumi:"keyAlgorithm"`
	KeyAlias              pulumi.StringOutput    `pulumi:"keyAlias"`
	KeyDescription        pulumi.StringPtrOutput `pulumi:"keyDescription"`
	KeyId                 pulumi.StringOutput    `pulumi:"keyId"`
	KeyState              pulumi.StringOutput    `pulumi:"keyState"`
	KeyUsage              pulumi.StringOutput    `pulumi:"keyUsage"`
	KeystoreId            pulumi.StringOutput    `pulumi:"keystoreId"`
	Origin                pulumi.StringOutput    `pulumi:"origin"`
	PendingDays           pulumi.StringPtrOutput `pulumi:"pendingDays"`
	Region                pulumi.StringOutput    `pulumi:"region"`
	RotationEnabled       pulumi.BoolPtrOutput   `pulumi:"rotationEnabled"`
	RotationInterval      pulumi.IntOutput       `pulumi:"rotationInterval"`
	RotationNumber        pulumi.IntOutput       `pulumi:"rotationNumber"`
	ScheduledDeletionDate pulumi.StringOutput    `pulumi:"scheduledDeletionDate"`
	Tags                  pulumi.StringMapOutput `pulumi:"tags"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyAlias == nil {
		return nil, errors.New("invalid value for required argument 'KeyAlias'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Key
	err := ctx.RegisterResource("sbercloud:Dew/key:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("sbercloud:Dew/key:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
	CreationDate          *string           `pulumi:"creationDate"`
	DefaultKeyFlag        *string           `pulumi:"defaultKeyFlag"`
	DomainId              *string           `pulumi:"domainId"`
	EnterpriseProjectId   *string           `pulumi:"enterpriseProjectId"`
	ExpirationTime        *string           `pulumi:"expirationTime"`
	IsEnabled             *bool             `pulumi:"isEnabled"`
	KeyAlgorithm          *string           `pulumi:"keyAlgorithm"`
	KeyAlias              *string           `pulumi:"keyAlias"`
	KeyDescription        *string           `pulumi:"keyDescription"`
	KeyId                 *string           `pulumi:"keyId"`
	KeyState              *string           `pulumi:"keyState"`
	KeyUsage              *string           `pulumi:"keyUsage"`
	KeystoreId            *string           `pulumi:"keystoreId"`
	Origin                *string           `pulumi:"origin"`
	PendingDays           *string           `pulumi:"pendingDays"`
	Region                *string           `pulumi:"region"`
	RotationEnabled       *bool             `pulumi:"rotationEnabled"`
	RotationInterval      *int              `pulumi:"rotationInterval"`
	RotationNumber        *int              `pulumi:"rotationNumber"`
	ScheduledDeletionDate *string           `pulumi:"scheduledDeletionDate"`
	Tags                  map[string]string `pulumi:"tags"`
}

type KeyState struct {
	CreationDate          pulumi.StringPtrInput
	DefaultKeyFlag        pulumi.StringPtrInput
	DomainId              pulumi.StringPtrInput
	EnterpriseProjectId   pulumi.StringPtrInput
	ExpirationTime        pulumi.StringPtrInput
	IsEnabled             pulumi.BoolPtrInput
	KeyAlgorithm          pulumi.StringPtrInput
	KeyAlias              pulumi.StringPtrInput
	KeyDescription        pulumi.StringPtrInput
	KeyId                 pulumi.StringPtrInput
	KeyState              pulumi.StringPtrInput
	KeyUsage              pulumi.StringPtrInput
	KeystoreId            pulumi.StringPtrInput
	Origin                pulumi.StringPtrInput
	PendingDays           pulumi.StringPtrInput
	Region                pulumi.StringPtrInput
	RotationEnabled       pulumi.BoolPtrInput
	RotationInterval      pulumi.IntPtrInput
	RotationNumber        pulumi.IntPtrInput
	ScheduledDeletionDate pulumi.StringPtrInput
	Tags                  pulumi.StringMapInput
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	IsEnabled           *bool             `pulumi:"isEnabled"`
	KeyAlgorithm        *string           `pulumi:"keyAlgorithm"`
	KeyAlias            string            `pulumi:"keyAlias"`
	KeyDescription      *string           `pulumi:"keyDescription"`
	KeyUsage            *string           `pulumi:"keyUsage"`
	KeystoreId          *string           `pulumi:"keystoreId"`
	Origin              *string           `pulumi:"origin"`
	PendingDays         *string           `pulumi:"pendingDays"`
	Region              *string           `pulumi:"region"`
	RotationEnabled     *bool             `pulumi:"rotationEnabled"`
	RotationInterval    *int              `pulumi:"rotationInterval"`
	Tags                map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	EnterpriseProjectId pulumi.StringPtrInput
	IsEnabled           pulumi.BoolPtrInput
	KeyAlgorithm        pulumi.StringPtrInput
	KeyAlias            pulumi.StringInput
	KeyDescription      pulumi.StringPtrInput
	KeyUsage            pulumi.StringPtrInput
	KeystoreId          pulumi.StringPtrInput
	Origin              pulumi.StringPtrInput
	PendingDays         pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	RotationEnabled     pulumi.BoolPtrInput
	RotationInterval    pulumi.IntPtrInput
	Tags                pulumi.StringMapInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (*Key) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (i *Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i *Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

// KeyArrayInput is an input type that accepts KeyArray and KeyArrayOutput values.
// You can construct a concrete instance of `KeyArrayInput` via:
//
//	KeyArray{ KeyArgs{...} }
type KeyArrayInput interface {
	pulumi.Input

	ToKeyArrayOutput() KeyArrayOutput
	ToKeyArrayOutputWithContext(context.Context) KeyArrayOutput
}

type KeyArray []KeyInput

func (KeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (i KeyArray) ToKeyArrayOutput() KeyArrayOutput {
	return i.ToKeyArrayOutputWithContext(context.Background())
}

func (i KeyArray) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyArrayOutput)
}

// KeyMapInput is an input type that accepts KeyMap and KeyMapOutput values.
// You can construct a concrete instance of `KeyMapInput` via:
//
//	KeyMap{ "key": KeyArgs{...} }
type KeyMapInput interface {
	pulumi.Input

	ToKeyMapOutput() KeyMapOutput
	ToKeyMapOutputWithContext(context.Context) KeyMapOutput
}

type KeyMap map[string]KeyInput

func (KeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (i KeyMap) ToKeyMapOutput() KeyMapOutput {
	return i.ToKeyMapOutputWithContext(context.Background())
}

func (i KeyMap) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMapOutput)
}

type KeyOutput struct{ *pulumi.OutputState }

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

func (o KeyOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

func (o KeyOutput) DefaultKeyFlag() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.DefaultKeyFlag }).(pulumi.StringOutput)
}

func (o KeyOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

func (o KeyOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o KeyOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

func (o KeyOutput) IsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolPtrOutput { return v.IsEnabled }).(pulumi.BoolPtrOutput)
}

func (o KeyOutput) KeyAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyAlgorithm }).(pulumi.StringOutput)
}

func (o KeyOutput) KeyAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyAlias }).(pulumi.StringOutput)
}

func (o KeyOutput) KeyDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.KeyDescription }).(pulumi.StringPtrOutput)
}

func (o KeyOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

func (o KeyOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyState }).(pulumi.StringOutput)
}

func (o KeyOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyUsage }).(pulumi.StringOutput)
}

func (o KeyOutput) KeystoreId() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeystoreId }).(pulumi.StringOutput)
}

func (o KeyOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

func (o KeyOutput) PendingDays() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.PendingDays }).(pulumi.StringPtrOutput)
}

func (o KeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o KeyOutput) RotationEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolPtrOutput { return v.RotationEnabled }).(pulumi.BoolPtrOutput)
}

func (o KeyOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.RotationInterval }).(pulumi.IntOutput)
}

func (o KeyOutput) RotationNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.RotationNumber }).(pulumi.IntOutput)
}

func (o KeyOutput) ScheduledDeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.ScheduledDeletionDate }).(pulumi.StringOutput)
}

func (o KeyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Key) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type KeyArrayOutput struct{ *pulumi.OutputState }

func (KeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (o KeyArrayOutput) ToKeyArrayOutput() KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) Index(i pulumi.IntInput) KeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Key {
		return vs[0].([]*Key)[vs[1].(int)]
	}).(KeyOutput)
}

type KeyMapOutput struct{ *pulumi.OutputState }

func (KeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (o KeyMapOutput) ToKeyMapOutput() KeyMapOutput {
	return o
}

func (o KeyMapOutput) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return o
}

func (o KeyMapOutput) MapIndex(k pulumi.StringInput) KeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Key {
		return vs[0].(map[string]*Key)[vs[1].(string)]
	}).(KeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyInput)(nil)).Elem(), &Key{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyArrayInput)(nil)).Elem(), KeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMapInput)(nil)).Elem(), KeyMap{})
	pulumi.RegisterOutputType(KeyOutput{})
	pulumi.RegisterOutputType(KeyArrayOutput{})
	pulumi.RegisterOutputType(KeyMapOutput{})
}

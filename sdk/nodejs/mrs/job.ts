// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobState, opts?: pulumi.CustomResourceOptions): Job {
        return new Job(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Mrs/job:Job';

    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }

    declare public readonly clusterId: pulumi.Output<string>;
    declare public /*out*/ readonly finishTime: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly parameters: pulumi.Output<string | undefined>;
    declare public readonly programParameters: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly programPath: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly serviceParameters: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly sql: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly startTime: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public /*out*/ readonly submitTime: pulumi.Output<string>;
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobArgs | JobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["finishTime"] = state?.finishTime;
            resourceInputs["name"] = state?.name;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["programParameters"] = state?.programParameters;
            resourceInputs["programPath"] = state?.programPath;
            resourceInputs["region"] = state?.region;
            resourceInputs["serviceParameters"] = state?.serviceParameters;
            resourceInputs["sql"] = state?.sql;
            resourceInputs["startTime"] = state?.startTime;
            resourceInputs["status"] = state?.status;
            resourceInputs["submitTime"] = state?.submitTime;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as JobArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["name"] = args?.name;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["programParameters"] = args?.programParameters;
            resourceInputs["programPath"] = args?.programPath;
            resourceInputs["region"] = args?.region;
            resourceInputs["serviceParameters"] = args?.serviceParameters;
            resourceInputs["sql"] = args?.sql;
            resourceInputs["type"] = args?.type;
            resourceInputs["finishTime"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["submitTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Job.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Job resources.
 */
export interface JobState {
    clusterId?: pulumi.Input<string>;
    finishTime?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<string>;
    programParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    programPath?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sql?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    submitTime?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Job resource.
 */
export interface JobArgs {
    clusterId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<string>;
    programParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    programPath?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sql?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'NotificationFilter',
    'NotificationOperation',
    'NotificationOperationUser',
]

@pulumi.output_type
class NotificationFilter(dict):
    def __init__(__self__, *,
                 condition: _builtins.str,
                 rules: Sequence[_builtins.str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> _builtins.str:
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class NotificationOperation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "traceNames":
            suggest = "trace_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationOperation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationOperation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationOperation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource: _builtins.str,
                 service: _builtins.str,
                 trace_names: Sequence[_builtins.str]):
        """
        :param _builtins.str resource: Specifies the resource type.
        :param _builtins.str service: Specifies the cloud service.
        :param Sequence[_builtins.str] trace_names: Specifies an array of trace names.
               
               <a name="notification_operation_users_object"></a>
               The `operation_users` block supports:
        """
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "trace_names", trace_names)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> _builtins.str:
        """
        Specifies the resource type.
        """
        return pulumi.get(self, "resource")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        """
        Specifies the cloud service.
        """
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="traceNames")
    def trace_names(self) -> Sequence[_builtins.str]:
        """
        Specifies an array of trace names.

        <a name="notification_operation_users_object"></a>
        The `operation_users` block supports:
        """
        return pulumi.get(self, "trace_names")


@pulumi.output_type
class NotificationOperationUser(dict):
    def __init__(__self__, *,
                 group: _builtins.str,
                 users: Sequence[_builtins.str]):
        """
        :param _builtins.str group: Specifies the IAM user group name.
        :param Sequence[_builtins.str] users: Specifies an array of IAM users in the group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def group(self) -> _builtins.str:
        """
        Specifies the IAM user group name.
        """
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence[_builtins.str]:
        """
        Specifies an array of IAM users in the group.
        """
        return pulumi.get(self, "users")



// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a cluster resource within SberCloud MRS.
 *
 * ## Example Usage
 *
 * ### Create an analysis cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const test = sbercloud.getAvailabilityZones({});
 * const config = new pulumi.Config();
 * const clusterName = config.requireObject<any>("clusterName");
 * const password = config.requireObject<any>("password");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const testCluster = new sbercloud.mrs.Cluster("test", {
 *     availabilityZone: test.then(test => test.names?.[0]),
 *     name: clusterName,
 *     version: "MRS 2.1.0",
 *     type: "ANALYSIS",
 *     componentLists: [
 *         "Hadoop",
 *         "Hive",
 *         "Tez",
 *     ],
 *     managerAdminPass: password,
 *     nodeAdminPass: password,
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     masterNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     analysisCoreNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     analysisTaskNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 1,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ### Create a stream cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const test = sbercloud.getAvailabilityZones({});
 * const config = new pulumi.Config();
 * const clusterName = config.requireObject<any>("clusterName");
 * const password = config.requireObject<any>("password");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const testCluster = new sbercloud.mrs.Cluster("test", {
 *     availabilityZone: test.then(test => test.names?.[0]),
 *     name: clusterName,
 *     type: "STREAMING",
 *     version: "MRS 2.1.0",
 *     managerAdminPass: password,
 *     nodeAdminPass: password,
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     componentLists: ["Storm"],
 *     masterNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     streamingCoreNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ### Create a hybrid cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const test = sbercloud.getAvailabilityZones({});
 * const config = new pulumi.Config();
 * const clusterName = config.requireObject<any>("clusterName");
 * const password = config.requireObject<any>("password");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const testCluster = new sbercloud.mrs.Cluster("test", {
 *     availabilityZone: test.then(test => test.names?.[0]),
 *     name: clusterName,
 *     version: "MRS 3.0.5",
 *     type: "MIXED",
 *     componentLists: [
 *         "Hadoop",
 *         "Spark",
 *         "Hive",
 *         "Tez",
 *         "Storm",
 *     ],
 *     managerAdminPass: password,
 *     nodeAdminPass: password,
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     masterNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     analysisCoreNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     streamingCoreNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     analysisTaskNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 1,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     streamingTaskNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 1,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ### Create a custom cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const test = sbercloud.getAvailabilityZones({});
 * const config = new pulumi.Config();
 * const clusterName = config.requireObject<any>("clusterName");
 * const password = config.requireObject<any>("password");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const testCluster = new sbercloud.mrs.Cluster("test", {
 *     availabilityZone: test.then(test => test.names?.[0]),
 *     name: clusterName,
 *     version: "MRS 3.1.0",
 *     type: "CUSTOM",
 *     safeMode: true,
 *     managerAdminPass: password,
 *     nodeAdminPass: password,
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     templateId: "mgmt_control_combined_v4",
 *     componentLists: [
 *         "DBService",
 *         "Hadoop",
 *         "ZooKeeper",
 *         "Ranger",
 *     ],
 *     masterNodes: {
 *         flavor: "c6.4xlarge.4.linux.bigdata",
 *         nodeNumber: 3,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 480,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 600,
 *         dataVolumeCount: 1,
 *         assignedRoles: [
 *             "OMSServer:1,2",
 *             "SlapdServer:1,2",
 *             "KerberosServer:1,2",
 *             "KerberosAdmin:1,2",
 *             "quorumpeer:1,2,3",
 *             "NameNode:2,3",
 *             "Zkfc:2,3",
 *             "JournalNode:1,2,3",
 *             "ResourceManager:2,3",
 *             "JobHistoryServer:3",
 *             "DBServer:1,3",
 *             "HttpFS:1,3",
 *             "TimelineServer:3",
 *             "RangerAdmin:1,2",
 *             "UserSync:2",
 *             "TagSync:2",
 *             "KerberosClient",
 *             "SlapdClient",
 *             "meta",
 *         ],
 *     },
 *     customNodes: [{
 *         groupName: "node_group_1",
 *         flavor: "c6.4xlarge.4.linux.bigdata",
 *         nodeNumber: 4,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 480,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 600,
 *         dataVolumeCount: 1,
 *         assignedRoles: [
 *             "DataNode",
 *             "NodeManager",
 *             "KerberosClient",
 *             "SlapdClient",
 *             "meta",
 *         ],
 *     }],
 * });
 * ```
 *
 * ### Create an analysis cluster and bind public IP
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const test = sbercloud.getAvailabilityZones({});
 * const config = new pulumi.Config();
 * const clusterName = config.requireObject<any>("clusterName");
 * const password = config.requireObject<any>("password");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const publicIp = config.requireObject<any>("publicIp");
 * const testCluster = new sbercloud.mrs.Cluster("test", {
 *     availabilityZone: test.then(test => test.names?.[0]),
 *     name: clusterName,
 *     version: "MRS 2.1.0",
 *     type: "ANALYSIS",
 *     componentLists: [
 *         "Hadoop",
 *         "Hive",
 *         "Tez",
 *     ],
 *     managerAdminPass: password,
 *     nodeAdminPass: password,
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     publicIp: publicIp,
 *     masterNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     analysisCoreNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 2,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     analysisTaskNodes: {
 *         flavor: "c6.2xlarge.4.linux.bigdata",
 *         nodeNumber: 1,
 *         rootVolumeType: "SAS",
 *         rootVolumeSize: 300,
 *         dataVolumeType: "SAS",
 *         dataVolumeSize: 480,
 *         dataVolumeCount: 1,
 *     },
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Clusters can be imported by their `id`. For example,
 *
 * ```sh
 * $ pulumi import sbercloud:Mrs/cluster:cluster test b11b407c-e604-4e8d-8bc4-92398320b847
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attrubutes missing from the
 *
 * API response, security or some other reason. The missing attributes include:
 *
 * `manager_admin_pass`, `node_admin_pass`,`template_id` and `assigned_roles`.
 *
 * It is generally recommended running `pulumi preview` after importing a cluster.
 *
 * You can then decide if changes should be applied to the cluster, or the resource definition
 *
 * should be updated to align with the cluster. Also you can ignore changes as below.
 *
 * resource "sbercloud_mapreduce_cluster" "test" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       manager_admin_pass, node_admin_pass,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Mrs/cluster:cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Specifies a list of the informations about the analysis core nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `analysisCoreNodes` is documented below.
     */
    declare public readonly analysisCoreNodes: pulumi.Output<outputs.Mrs.ClusterAnalysisCoreNodes | undefined>;
    /**
     * Specifies a list of the informations about the analysis task nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `analysisTaskNodes` is documented below.
     */
    declare public readonly analysisTaskNodes: pulumi.Output<outputs.Mrs.ClusterAnalysisTaskNodes | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * Specifies the availability zone in which to create the cluster.
     * For more information about regions and AZs, see [Regions and Endpoints](https://support.hc.sbercloud.ru/en-us/endpoint/index.html).
     * Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public readonly bootstrapScripts: pulumi.Output<outputs.Mrs.ClusterBootstrapScript[] | undefined>;
    declare public readonly chargingMode: pulumi.Output<string>;
    /**
     * The charging start time which is the start time of billing, in RFC-3339 format.
     */
    declare public /*out*/ readonly chargingStartTime: pulumi.Output<string>;
    declare public readonly componentConfigs: pulumi.Output<outputs.Mrs.ClusterComponentConfig[] | undefined>;
    /**
     * Specifies the list of component names. For the components supported by
     * the cluster, please following [reference](https://support.hc.sbercloud.ru/api/mrs/mrs_02_0101.html)
     * Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly componentLists: pulumi.Output<string[]>;
    /**
     * The cluster creation time, in RFC-3339 format.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Specifies a list of the informations about the custom nodes in the MapReduce
     * cluster.
     * The `nodes` object structure of the `customNodes` is documented below.
     * `Unlike other nodes, it needs to specify groupName`
     */
    declare public readonly customNodes: pulumi.Output<outputs.Mrs.ClusterCustomNode[] | undefined>;
    /**
     * Specifies the EIP ID which bound to the MapReduce cluster.
     * The EIP must have been created and must be in the same region as the cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly eipId: pulumi.Output<string>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly externalDatasources: pulumi.Output<outputs.Mrs.ClusterExternalDatasource[] | undefined>;
    /**
     * Specifies whether logs are collected when cluster installation fails.
     * Default to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
     * record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly logCollection: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the administrator password, which is used to log in to
     * the cluster management page. The password can contain 8 to 26 charactors and cannot be the username or the username
     * spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
     * characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly managerAdminPass: pulumi.Output<string>;
    /**
     * The IP address of the master node.
     */
    declare public /*out*/ readonly masterNodeIp: pulumi.Output<string>;
    /**
     * Specifies a list of the information about the master nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `masterNodes` is documented below.
     * Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly masterNodes: pulumi.Output<outputs.Mrs.ClusterMasterNodes>;
    /**
     * Specifies the name of the MapReduce cluster. The name can contain 2 to 64
     * characters, which may consist of letters, digits, underscores (_) and hyphens (-). Changing this will create a new
     * MapReduce cluster resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the administrator password, which is used to log in to the
     * each nodes(/ECSs). The password can contain 8 to 26 charactors and cannot be the username or the username spelled
     * backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
     * characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
     * and `nodeKeyPair` are alternative.
     */
    declare public readonly nodeAdminPass: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of a key pair, which is used to log in to the each
     * nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly nodeKeyPair: pulumi.Output<string | undefined>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * The preferred private IP address of the master node.
     */
    declare public /*out*/ readonly privateIp: pulumi.Output<string>;
    /**
     * Specifies the EIP address which bound to the MapReduce cluster.
     * The EIP must have been created and must be in the same region as the cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly publicIp: pulumi.Output<string>;
    /**
     * The region in which to create the MapReduce cluster resource. If omitted, the
     * provider-level region will be used. Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies whether the running mode of the MapReduce cluster is secure,
     * default to true.
     * + true: enable Kerberos authentication.
     * + false: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly safeMode: pulumi.Output<boolean | undefined>;
    /**
     * Specifies an array of one or more security group ID to attach to the
     * MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
     */
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    declare public readonly smnNotify: pulumi.Output<outputs.Mrs.ClusterSmnNotify | undefined>;
    /**
     * The cluster state, which include: running, frozen, abnormal and failed.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Specifies a list of the informations about the streaming core nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `streamingCoreNodes` is documented below.
     */
    declare public readonly streamingCoreNodes: pulumi.Output<outputs.Mrs.ClusterStreamingCoreNodes | undefined>;
    /**
     * Specifies a list of the informations about the streaming task nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `streamingTaskNodes` is documented below.
     */
    declare public readonly streamingTaskNodes: pulumi.Output<outputs.Mrs.ClusterStreamingTaskNodes | undefined>;
    /**
     * Specifies the network ID of a subnet which bound to the MapReduce cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the cluster.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the template used for node deployment when the cluster type is
     * CUSTOM.
     * + mgmt_control_combined_v2: template for jointly deploying the management and control nodes. The management and
     * control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
     * deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
     * + mgmt_control_separated_v2: The management and control roles are deployed on different master nodes, and data
     * instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
     * and delivers better performance in high-concurrency load scenarios.
     * + mgmt_control_data_separated_v2: The management role and control role are deployed on different Master nodes,
     * and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
     * than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
     */
    declare public readonly templateId: pulumi.Output<string | undefined>;
    /**
     * The total number of nodes deployed in the cluster.
     */
    declare public /*out*/ readonly totalNodeNumber: pulumi.Output<number>;
    /**
     * Specifies the type of the MapReduce cluster. The valid values are *ANALYSIS*,
     * *STREAMING* and *MIXED*, default to *ANALYSIS*. Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * The cluster update time, in RFC-3339 format.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    /**
     * Specifies the MapReduce cluster version. The valid values are `MRS 2.1.0`
     * , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
     */
    declare public readonly version: pulumi.Output<string>;
    /**
     * Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
     * this will create a new MapReduce cluster resource.
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["analysisCoreNodes"] = state?.analysisCoreNodes;
            resourceInputs["analysisTaskNodes"] = state?.analysisTaskNodes;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["bootstrapScripts"] = state?.bootstrapScripts;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["chargingStartTime"] = state?.chargingStartTime;
            resourceInputs["componentConfigs"] = state?.componentConfigs;
            resourceInputs["componentLists"] = state?.componentLists;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["customNodes"] = state?.customNodes;
            resourceInputs["eipId"] = state?.eipId;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["externalDatasources"] = state?.externalDatasources;
            resourceInputs["logCollection"] = state?.logCollection;
            resourceInputs["managerAdminPass"] = state?.managerAdminPass;
            resourceInputs["masterNodeIp"] = state?.masterNodeIp;
            resourceInputs["masterNodes"] = state?.masterNodes;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeAdminPass"] = state?.nodeAdminPass;
            resourceInputs["nodeKeyPair"] = state?.nodeKeyPair;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["privateIp"] = state?.privateIp;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["region"] = state?.region;
            resourceInputs["safeMode"] = state?.safeMode;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["smnNotify"] = state?.smnNotify;
            resourceInputs["status"] = state?.status;
            resourceInputs["streamingCoreNodes"] = state?.streamingCoreNodes;
            resourceInputs["streamingTaskNodes"] = state?.streamingTaskNodes;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["templateId"] = state?.templateId;
            resourceInputs["totalNodeNumber"] = state?.totalNodeNumber;
            resourceInputs["type"] = state?.type;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["version"] = state?.version;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if (args?.componentLists === undefined && !opts.urn) {
                throw new Error("Missing required property 'componentLists'");
            }
            if (args?.managerAdminPass === undefined && !opts.urn) {
                throw new Error("Missing required property 'managerAdminPass'");
            }
            if (args?.masterNodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterNodes'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["analysisCoreNodes"] = args?.analysisCoreNodes;
            resourceInputs["analysisTaskNodes"] = args?.analysisTaskNodes;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["bootstrapScripts"] = args?.bootstrapScripts;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["componentConfigs"] = args?.componentConfigs;
            resourceInputs["componentLists"] = args?.componentLists;
            resourceInputs["customNodes"] = args?.customNodes;
            resourceInputs["eipId"] = args?.eipId;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["externalDatasources"] = args?.externalDatasources;
            resourceInputs["logCollection"] = args?.logCollection;
            resourceInputs["managerAdminPass"] = args?.managerAdminPass ? pulumi.secret(args.managerAdminPass) : undefined;
            resourceInputs["masterNodes"] = args?.masterNodes;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeAdminPass"] = args?.nodeAdminPass ? pulumi.secret(args.nodeAdminPass) : undefined;
            resourceInputs["nodeKeyPair"] = args?.nodeKeyPair;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["publicIp"] = args?.publicIp;
            resourceInputs["region"] = args?.region;
            resourceInputs["safeMode"] = args?.safeMode;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["smnNotify"] = args?.smnNotify;
            resourceInputs["streamingCoreNodes"] = args?.streamingCoreNodes;
            resourceInputs["streamingTaskNodes"] = args?.streamingTaskNodes;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateId"] = args?.templateId;
            resourceInputs["type"] = args?.type;
            resourceInputs["version"] = args?.version;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["chargingStartTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["masterNodeIp"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["totalNodeNumber"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["managerAdminPass", "nodeAdminPass"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering cluster resources.
 */
export interface ClusterState {
    /**
     * Specifies a list of the informations about the analysis core nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `analysisCoreNodes` is documented below.
     */
    analysisCoreNodes?: pulumi.Input<inputs.Mrs.ClusterAnalysisCoreNodes>;
    /**
     * Specifies a list of the informations about the analysis task nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `analysisTaskNodes` is documented below.
     */
    analysisTaskNodes?: pulumi.Input<inputs.Mrs.ClusterAnalysisTaskNodes>;
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the availability zone in which to create the cluster.
     * For more information about regions and AZs, see [Regions and Endpoints](https://support.hc.sbercloud.ru/en-us/endpoint/index.html).
     * Changing this will create a new MapReduce cluster resource.
     */
    availabilityZone?: pulumi.Input<string>;
    bootstrapScripts?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterBootstrapScript>[]>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The charging start time which is the start time of billing, in RFC-3339 format.
     */
    chargingStartTime?: pulumi.Input<string>;
    componentConfigs?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterComponentConfig>[]>;
    /**
     * Specifies the list of component names. For the components supported by
     * the cluster, please following [reference](https://support.hc.sbercloud.ru/api/mrs/mrs_02_0101.html)
     * Changing this will create a new MapReduce cluster resource.
     */
    componentLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cluster creation time, in RFC-3339 format.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specifies a list of the informations about the custom nodes in the MapReduce
     * cluster.
     * The `nodes` object structure of the `customNodes` is documented below.
     * `Unlike other nodes, it needs to specify groupName`
     */
    customNodes?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterCustomNode>[]>;
    /**
     * Specifies the EIP ID which bound to the MapReduce cluster.
     * The EIP must have been created and must be in the same region as the cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    eipId?: pulumi.Input<string>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new MapReduce cluster resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    externalDatasources?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterExternalDatasource>[]>;
    /**
     * Specifies whether logs are collected when cluster installation fails.
     * Default to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
     * record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
     */
    logCollection?: pulumi.Input<boolean>;
    /**
     * Specifies the administrator password, which is used to log in to
     * the cluster management page. The password can contain 8 to 26 charactors and cannot be the username or the username
     * spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
     * characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
     */
    managerAdminPass?: pulumi.Input<string>;
    /**
     * The IP address of the master node.
     */
    masterNodeIp?: pulumi.Input<string>;
    /**
     * Specifies a list of the information about the master nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `masterNodes` is documented below.
     * Changing this will create a new MapReduce cluster resource.
     */
    masterNodes?: pulumi.Input<inputs.Mrs.ClusterMasterNodes>;
    /**
     * Specifies the name of the MapReduce cluster. The name can contain 2 to 64
     * characters, which may consist of letters, digits, underscores (_) and hyphens (-). Changing this will create a new
     * MapReduce cluster resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the administrator password, which is used to log in to the
     * each nodes(/ECSs). The password can contain 8 to 26 charactors and cannot be the username or the username spelled
     * backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
     * characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
     * and `nodeKeyPair` are alternative.
     */
    nodeAdminPass?: pulumi.Input<string>;
    /**
     * Specifies the name of a key pair, which is used to log in to the each
     * nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
     */
    nodeKeyPair?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The preferred private IP address of the master node.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * Specifies the EIP address which bound to the MapReduce cluster.
     * The EIP must have been created and must be in the same region as the cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The region in which to create the MapReduce cluster resource. If omitted, the
     * provider-level region will be used. Changing this will create a new MapReduce cluster resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies whether the running mode of the MapReduce cluster is secure,
     * default to true.
     * + true: enable Kerberos authentication.
     * + false: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
     */
    safeMode?: pulumi.Input<boolean>;
    /**
     * Specifies an array of one or more security group ID to attach to the
     * MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    smnNotify?: pulumi.Input<inputs.Mrs.ClusterSmnNotify>;
    /**
     * The cluster state, which include: running, frozen, abnormal and failed.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies a list of the informations about the streaming core nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `streamingCoreNodes` is documented below.
     */
    streamingCoreNodes?: pulumi.Input<inputs.Mrs.ClusterStreamingCoreNodes>;
    /**
     * Specifies a list of the informations about the streaming task nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `streamingTaskNodes` is documented below.
     */
    streamingTaskNodes?: pulumi.Input<inputs.Mrs.ClusterStreamingTaskNodes>;
    /**
     * Specifies the network ID of a subnet which bound to the MapReduce cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the template used for node deployment when the cluster type is
     * CUSTOM.
     * + mgmt_control_combined_v2: template for jointly deploying the management and control nodes. The management and
     * control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
     * deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
     * + mgmt_control_separated_v2: The management and control roles are deployed on different master nodes, and data
     * instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
     * and delivers better performance in high-concurrency load scenarios.
     * + mgmt_control_data_separated_v2: The management role and control role are deployed on different Master nodes,
     * and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
     * than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
     */
    templateId?: pulumi.Input<string>;
    /**
     * The total number of nodes deployed in the cluster.
     */
    totalNodeNumber?: pulumi.Input<number>;
    /**
     * Specifies the type of the MapReduce cluster. The valid values are *ANALYSIS*,
     * *STREAMING* and *MIXED*, default to *ANALYSIS*. Changing this will create a new MapReduce cluster resource.
     */
    type?: pulumi.Input<string>;
    /**
     * The cluster update time, in RFC-3339 format.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * Specifies the MapReduce cluster version. The valid values are `MRS 2.1.0`
     * , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
     */
    version?: pulumi.Input<string>;
    /**
     * Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
     * this will create a new MapReduce cluster resource.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Specifies a list of the informations about the analysis core nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `analysisCoreNodes` is documented below.
     */
    analysisCoreNodes?: pulumi.Input<inputs.Mrs.ClusterAnalysisCoreNodes>;
    /**
     * Specifies a list of the informations about the analysis task nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `analysisTaskNodes` is documented below.
     */
    analysisTaskNodes?: pulumi.Input<inputs.Mrs.ClusterAnalysisTaskNodes>;
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the availability zone in which to create the cluster.
     * For more information about regions and AZs, see [Regions and Endpoints](https://support.hc.sbercloud.ru/en-us/endpoint/index.html).
     * Changing this will create a new MapReduce cluster resource.
     */
    availabilityZone: pulumi.Input<string>;
    bootstrapScripts?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterBootstrapScript>[]>;
    chargingMode?: pulumi.Input<string>;
    componentConfigs?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterComponentConfig>[]>;
    /**
     * Specifies the list of component names. For the components supported by
     * the cluster, please following [reference](https://support.hc.sbercloud.ru/api/mrs/mrs_02_0101.html)
     * Changing this will create a new MapReduce cluster resource.
     */
    componentLists: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a list of the informations about the custom nodes in the MapReduce
     * cluster.
     * The `nodes` object structure of the `customNodes` is documented below.
     * `Unlike other nodes, it needs to specify groupName`
     */
    customNodes?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterCustomNode>[]>;
    /**
     * Specifies the EIP ID which bound to the MapReduce cluster.
     * The EIP must have been created and must be in the same region as the cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    eipId?: pulumi.Input<string>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new MapReduce cluster resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    externalDatasources?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterExternalDatasource>[]>;
    /**
     * Specifies whether logs are collected when cluster installation fails.
     * Default to true. If `logCollection` set true, the OBS buckets will be created and only used to collect logs that
     * record MapReduce cluster creation failures. Changing this will create a new MapReduce cluster resource.
     */
    logCollection?: pulumi.Input<boolean>;
    /**
     * Specifies the administrator password, which is used to log in to
     * the cluster management page. The password can contain 8 to 26 charactors and cannot be the username or the username
     * spelled backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
     * characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource.
     */
    managerAdminPass: pulumi.Input<string>;
    /**
     * Specifies a list of the information about the master nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `masterNodes` is documented below.
     * Changing this will create a new MapReduce cluster resource.
     */
    masterNodes: pulumi.Input<inputs.Mrs.ClusterMasterNodes>;
    /**
     * Specifies the name of the MapReduce cluster. The name can contain 2 to 64
     * characters, which may consist of letters, digits, underscores (_) and hyphens (-). Changing this will create a new
     * MapReduce cluster resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the administrator password, which is used to log in to the
     * each nodes(/ECSs). The password can contain 8 to 26 charactors and cannot be the username or the username spelled
     * backwards. The password must contain lowercase letters, uppercase letters, digits, spaces and the special
     * characters: `!?,.:-_{}[]@$^+=/`. Changing this will create a new MapReduce cluster resource. This parameter
     * and `nodeKeyPair` are alternative.
     */
    nodeAdminPass?: pulumi.Input<string>;
    /**
     * Specifies the name of a key pair, which is used to log in to the each
     * nodes(/ECSs). Changing this will create a new MapReduce cluster resource.
     */
    nodeKeyPair?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the EIP address which bound to the MapReduce cluster.
     * The EIP must have been created and must be in the same region as the cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The region in which to create the MapReduce cluster resource. If omitted, the
     * provider-level region will be used. Changing this will create a new MapReduce cluster resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies whether the running mode of the MapReduce cluster is secure,
     * default to true.
     * + true: enable Kerberos authentication.
     * + false: disable Kerberos authentication. Changing this will create a new MapReduce cluster resource.
     */
    safeMode?: pulumi.Input<boolean>;
    /**
     * Specifies an array of one or more security group ID to attach to the
     * MapReduce cluster. If using the specified security group, the group need to open the specified port (9022) rules.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    smnNotify?: pulumi.Input<inputs.Mrs.ClusterSmnNotify>;
    /**
     * Specifies a list of the informations about the streaming core nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `streamingCoreNodes` is documented below.
     */
    streamingCoreNodes?: pulumi.Input<inputs.Mrs.ClusterStreamingCoreNodes>;
    /**
     * Specifies a list of the informations about the streaming task nodes in the
     * MapReduce cluster.
     * The `nodes` object structure of the `streamingTaskNodes` is documented below.
     */
    streamingTaskNodes?: pulumi.Input<inputs.Mrs.ClusterStreamingTaskNodes>;
    /**
     * Specifies the network ID of a subnet which bound to the MapReduce cluster.
     * Changing this will create a new MapReduce cluster resource.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the cluster.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the template used for node deployment when the cluster type is
     * CUSTOM.
     * + mgmt_control_combined_v2: template for jointly deploying the management and control nodes. The management and
     * control roles are co-deployed on the Master node, and data instances are deployed in the same node group. This
     * deployment mode applies to scenarios where the number of control nodes is less than 100, reducing costs.
     * + mgmt_control_separated_v2: The management and control roles are deployed on different master nodes, and data
     * instances are deployed in the same node group. This deployment mode is applicable to a cluster with 100 to 500 nodes
     * and delivers better performance in high-concurrency load scenarios.
     * + mgmt_control_data_separated_v2: The management role and control role are deployed on different Master nodes,
     * and data instances are deployed in different node groups. This deployment mode is applicable to a cluster with more
     * than 500 nodes. Components can be deployed separately, which can be used for a larger cluster scale.
     */
    templateId?: pulumi.Input<string>;
    /**
     * Specifies the type of the MapReduce cluster. The valid values are *ANALYSIS*,
     * *STREAMING* and *MIXED*, default to *ANALYSIS*. Changing this will create a new MapReduce cluster resource.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the MapReduce cluster version. The valid values are `MRS 2.1.0`
     * , `MRS 3.0.5` and `MRS 3.1.0`. Changing this will create a new MapReduce cluster resource.
     */
    version: pulumi.Input<string>;
    /**
     * Specifies the ID of the VPC which bound to the MapReduce cluster. Changing
     * this will create a new MapReduce cluster resource.
     */
    vpcId: pulumi.Input<string>;
}

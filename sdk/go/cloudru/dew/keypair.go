// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a keypair resource within SberCloud.
//
// By default, keypair use the SSH-2 (RSA, 2048) algorithm for encryption and decryption.
//
// Keys imported support the following cryptographic algorithms:
//
//   - RSA-1024
//   - RSA-2048
//   - RSA-4096
//
// ## Example Usage
//
// ### Create a new KPS keypair
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/dew"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			kmsKeyId := cfg.RequireObject("kmsKeyId")
//			kmsKeyName := cfg.RequireObject("kmsKeyName")
//			keyFile := cfg.RequireObject("keyFile")
//			_, err := dew.NewKeypair(ctx, "test", &dew.KeypairArgs{
//				Name:           pulumi.String("test-name"),
//				Scope:          pulumi.String("user"),
//				EncryptionType: pulumi.String("kms"),
//				KmsKeyId:       pulumi.Any(kmsKeyId),
//				KmsKeyName:     pulumi.Any(kmsKeyName),
//				Description:    pulumi.String("test description"),
//				KeyFile:        pulumi.Any(keyFile),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Import an existing KPS keypair
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/dew"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			publicKey := cfg.RequireObject("publicKey")
//			privateKey := cfg.RequireObject("privateKey")
//			_, err := dew.NewKeypair(ctx, "test", &dew.KeypairArgs{
//				Name:           pulumi.String("test-name"),
//				Scope:          pulumi.String("account"),
//				EncryptionType: pulumi.String("default"),
//				Description:    pulumi.String("test description"),
//				PublicKey:      pulumi.Any(publicKey),
//				PrivateKey:     pulumi.Any(privateKey),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Import an existing KPS keypair without private key
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/dew"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			publicKey := cfg.RequireObject("publicKey")
//			_, err := dew.NewKeypair(ctx, "test", &dew.KeypairArgs{
//				Name:        pulumi.String("test-name"),
//				Scope:       pulumi.String("account"),
//				Description: pulumi.String("test description"),
//				PublicKey:   pulumi.Any(publicKey),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Keypair can be imported using the `name`, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Dew/keypair:Keypair test <name>
// ```
//
// # Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
//
// API response, security or some other reason. The missing attributes include: `encryption_type`, `kms_key_id`,
//
// `kms_key_name`, `key_file` and `private_key`. It is generally recommended running `pulumi preview` after importing a keypair.
//
// # You can then decide if changes should be applied to the keypair, or the resource definition
//
// should be updated to align with the keypair. Also, you can ignore changes as below.
//
// hcl
//
// resource "sbercloud_kps_keypair" "test" {
//
//	  ...
//
//	lifecycle {
//
//	  ignore_changes = [
//
//	    encryption_type, kms_key_id, kms_key_name, key_file, private_key
//
//	  ]
//
//	}
//
// }
type Keypair struct {
	pulumi.CustomResourceState

	// The keypair creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of keypair.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies encryption mode. The options are as follows:
	// + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// + **kms**: KMS encryption mode.
	//
	// > 1. Please configure this field to **default** if the KMS service is not available at the site.
	// >    <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
	EncryptionType pulumi.StringOutput `pulumi:"encryptionType"`
	// Fingerprint information about a keypair.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Whether the private key is managed by sberCloud.
	IsManaged pulumi.BoolOutput `pulumi:"isManaged"`
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only when creating a KPS keypair.
	// Importing an existing keypair will not obtain the private key information.
	//
	// Changing this parameter will create a new resource.
	//
	// ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile pulumi.StringOutput `pulumi:"keyFile"`
	// Specifies the KMS key ID to encrypt private keys.
	KmsKeyId pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	// Specifies the KMS key name to encrypt private keys.
	//
	// > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
	// >    `kmsKeyName`.
	KmsKeyName pulumi.StringPtrOutput `pulumi:"kmsKeyName"`
	// Specifies a unique name for the keypair. The name can contain a maximum of `64`
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted private key.
	//
	// > 1. Setting this field to empty during editing will clear the private key.
	// >    <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Specifies the imported OpenSSH-formatted public key.
	// It is required when import keypair. Changing this parameter will create a new resource.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the scope of keypair. The options are as follows:
	// + **account**: Tenant-level, available to all users under the same account.
	// + **user**: User-level, only available to user.
	//
	// Defaults to `user`. Changing this parameter will create a new resource.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// Specifies the user ID to which the keypair belongs.
	//
	// > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewKeypair registers a new resource with the given unique name, arguments, and options.
func NewKeypair(ctx *pulumi.Context,
	name string, args *KeypairArgs, opts ...pulumi.ResourceOption) (*Keypair, error) {
	if args == nil {
		args = &KeypairArgs{}
	}

	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Keypair
	err := ctx.RegisterResource("sbercloud:Dew/keypair:Keypair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeypair gets an existing Keypair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeypair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeypairState, opts ...pulumi.ResourceOption) (*Keypair, error) {
	var resource Keypair
	err := ctx.ReadResource("sbercloud:Dew/keypair:Keypair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keypair resources.
type keypairState struct {
	// The keypair creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of keypair.
	Description *string `pulumi:"description"`
	// Specifies encryption mode. The options are as follows:
	// + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// + **kms**: KMS encryption mode.
	//
	// > 1. Please configure this field to **default** if the KMS service is not available at the site.
	// >    <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
	EncryptionType *string `pulumi:"encryptionType"`
	// Fingerprint information about a keypair.
	Fingerprint *string `pulumi:"fingerprint"`
	// Whether the private key is managed by sberCloud.
	IsManaged *bool `pulumi:"isManaged"`
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only when creating a KPS keypair.
	// Importing an existing keypair will not obtain the private key information.
	//
	// Changing this parameter will create a new resource.
	//
	// ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile *string `pulumi:"keyFile"`
	// Specifies the KMS key ID to encrypt private keys.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies the KMS key name to encrypt private keys.
	//
	// > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
	// >    `kmsKeyName`.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Specifies a unique name for the keypair. The name can contain a maximum of `64`
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted private key.
	//
	// > 1. Setting this field to empty during editing will clear the private key.
	// >    <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
	PrivateKey *string `pulumi:"privateKey"`
	// Specifies the imported OpenSSH-formatted public key.
	// It is required when import keypair. Changing this parameter will create a new resource.
	PublicKey *string `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the scope of keypair. The options are as follows:
	// + **account**: Tenant-level, available to all users under the same account.
	// + **user**: User-level, only available to user.
	//
	// Defaults to `user`. Changing this parameter will create a new resource.
	Scope *string `pulumi:"scope"`
	// Specifies the user ID to which the keypair belongs.
	//
	// > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
	UserId *string `pulumi:"userId"`
}

type KeypairState struct {
	// The keypair creation time.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of keypair.
	Description pulumi.StringPtrInput
	// Specifies encryption mode. The options are as follows:
	// + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// + **kms**: KMS encryption mode.
	//
	// > 1. Please configure this field to **default** if the KMS service is not available at the site.
	// >    <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
	EncryptionType pulumi.StringPtrInput
	// Fingerprint information about a keypair.
	Fingerprint pulumi.StringPtrInput
	// Whether the private key is managed by sberCloud.
	IsManaged pulumi.BoolPtrInput
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only when creating a KPS keypair.
	// Importing an existing keypair will not obtain the private key information.
	//
	// Changing this parameter will create a new resource.
	//
	// ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile pulumi.StringPtrInput
	// Specifies the KMS key ID to encrypt private keys.
	KmsKeyId pulumi.StringPtrInput
	// Specifies the KMS key name to encrypt private keys.
	//
	// > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
	// >    `kmsKeyName`.
	KmsKeyName pulumi.StringPtrInput
	// Specifies a unique name for the keypair. The name can contain a maximum of `64`
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the imported OpenSSH-formatted private key.
	//
	// > 1. Setting this field to empty during editing will clear the private key.
	// >    <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
	PrivateKey pulumi.StringPtrInput
	// Specifies the imported OpenSSH-formatted public key.
	// It is required when import keypair. Changing this parameter will create a new resource.
	PublicKey pulumi.StringPtrInput
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the scope of keypair. The options are as follows:
	// + **account**: Tenant-level, available to all users under the same account.
	// + **user**: User-level, only available to user.
	//
	// Defaults to `user`. Changing this parameter will create a new resource.
	Scope pulumi.StringPtrInput
	// Specifies the user ID to which the keypair belongs.
	//
	// > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
	UserId pulumi.StringPtrInput
}

func (KeypairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairState)(nil)).Elem()
}

type keypairArgs struct {
	// Specifies the description of keypair.
	Description *string `pulumi:"description"`
	// Specifies encryption mode. The options are as follows:
	// + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// + **kms**: KMS encryption mode.
	//
	// > 1. Please configure this field to **default** if the KMS service is not available at the site.
	// >    <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
	EncryptionType *string `pulumi:"encryptionType"`
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only when creating a KPS keypair.
	// Importing an existing keypair will not obtain the private key information.
	//
	// Changing this parameter will create a new resource.
	//
	// ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile *string `pulumi:"keyFile"`
	// Specifies the KMS key ID to encrypt private keys.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Specifies the KMS key name to encrypt private keys.
	//
	// > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
	// >    `kmsKeyName`.
	KmsKeyName *string `pulumi:"kmsKeyName"`
	// Specifies a unique name for the keypair. The name can contain a maximum of `64`
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted private key.
	//
	// > 1. Setting this field to empty during editing will clear the private key.
	// >    <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
	PrivateKey *string `pulumi:"privateKey"`
	// Specifies the imported OpenSSH-formatted public key.
	// It is required when import keypair. Changing this parameter will create a new resource.
	PublicKey *string `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the scope of keypair. The options are as follows:
	// + **account**: Tenant-level, available to all users under the same account.
	// + **user**: User-level, only available to user.
	//
	// Defaults to `user`. Changing this parameter will create a new resource.
	Scope *string `pulumi:"scope"`
	// Specifies the user ID to which the keypair belongs.
	//
	// > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a Keypair resource.
type KeypairArgs struct {
	// Specifies the description of keypair.
	Description pulumi.StringPtrInput
	// Specifies encryption mode. The options are as follows:
	// + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
	// + **kms**: KMS encryption mode.
	//
	// > 1. Please configure this field to **default** if the KMS service is not available at the site.
	// >    <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
	EncryptionType pulumi.StringPtrInput
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only when creating a KPS keypair.
	// Importing an existing keypair will not obtain the private key information.
	//
	// Changing this parameter will create a new resource.
	//
	// ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile pulumi.StringPtrInput
	// Specifies the KMS key ID to encrypt private keys.
	KmsKeyId pulumi.StringPtrInput
	// Specifies the KMS key name to encrypt private keys.
	//
	// > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
	// >    `kmsKeyName`.
	KmsKeyName pulumi.StringPtrInput
	// Specifies a unique name for the keypair. The name can contain a maximum of `64`
	// characters, including letters, digits, underscores (_) and hyphens (-).
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the imported OpenSSH-formatted private key.
	//
	// > 1. Setting this field to empty during editing will clear the private key.
	// >    <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
	PrivateKey pulumi.StringPtrInput
	// Specifies the imported OpenSSH-formatted public key.
	// It is required when import keypair. Changing this parameter will create a new resource.
	PublicKey pulumi.StringPtrInput
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the scope of keypair. The options are as follows:
	// + **account**: Tenant-level, available to all users under the same account.
	// + **user**: User-level, only available to user.
	//
	// Defaults to `user`. Changing this parameter will create a new resource.
	Scope pulumi.StringPtrInput
	// Specifies the user ID to which the keypair belongs.
	//
	// > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
	// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
	UserId pulumi.StringPtrInput
}

func (KeypairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairArgs)(nil)).Elem()
}

type KeypairInput interface {
	pulumi.Input

	ToKeypairOutput() KeypairOutput
	ToKeypairOutputWithContext(ctx context.Context) KeypairOutput
}

func (*Keypair) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil)).Elem()
}

func (i *Keypair) ToKeypairOutput() KeypairOutput {
	return i.ToKeypairOutputWithContext(context.Background())
}

func (i *Keypair) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairOutput)
}

// KeypairArrayInput is an input type that accepts KeypairArray and KeypairArrayOutput values.
// You can construct a concrete instance of `KeypairArrayInput` via:
//
//	KeypairArray{ KeypairArgs{...} }
type KeypairArrayInput interface {
	pulumi.Input

	ToKeypairArrayOutput() KeypairArrayOutput
	ToKeypairArrayOutputWithContext(context.Context) KeypairArrayOutput
}

type KeypairArray []KeypairInput

func (KeypairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (i KeypairArray) ToKeypairArrayOutput() KeypairArrayOutput {
	return i.ToKeypairArrayOutputWithContext(context.Background())
}

func (i KeypairArray) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairArrayOutput)
}

// KeypairMapInput is an input type that accepts KeypairMap and KeypairMapOutput values.
// You can construct a concrete instance of `KeypairMapInput` via:
//
//	KeypairMap{ "key": KeypairArgs{...} }
type KeypairMapInput interface {
	pulumi.Input

	ToKeypairMapOutput() KeypairMapOutput
	ToKeypairMapOutputWithContext(context.Context) KeypairMapOutput
}

type KeypairMap map[string]KeypairInput

func (KeypairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (i KeypairMap) ToKeypairMapOutput() KeypairMapOutput {
	return i.ToKeypairMapOutputWithContext(context.Background())
}

func (i KeypairMap) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairMapOutput)
}

type KeypairOutput struct{ *pulumi.OutputState }

func (KeypairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil)).Elem()
}

func (o KeypairOutput) ToKeypairOutput() KeypairOutput {
	return o
}

func (o KeypairOutput) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return o
}

// The keypair creation time.
func (o KeypairOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of keypair.
func (o KeypairOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies encryption mode. The options are as follows:
// + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
// + **kms**: KMS encryption mode.
//
// > 1. Please configure this field to **default** if the KMS service is not available at the site.
// >    <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
func (o KeypairOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.EncryptionType }).(pulumi.StringOutput)
}

// Fingerprint information about a keypair.
func (o KeypairOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Whether the private key is managed by sberCloud.
func (o KeypairOutput) IsManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Keypair) pulumi.BoolOutput { return v.IsManaged }).(pulumi.BoolOutput)
}

// Specifies the path of the created private key.
// The private key file (**.pem**) is created only when creating a KPS keypair.
// Importing an existing keypair will not obtain the private key information.
//
// Changing this parameter will create a new resource.
//
// ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
func (o KeypairOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.KeyFile }).(pulumi.StringOutput)
}

// Specifies the KMS key ID to encrypt private keys.
func (o KeypairOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

// Specifies the KMS key name to encrypt private keys.
//
// > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
// >    `kmsKeyName`.
func (o KeypairOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

// Specifies a unique name for the keypair. The name can contain a maximum of `64`
// characters, including letters, digits, underscores (_) and hyphens (-).
// Changing this parameter will create a new resource.
func (o KeypairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the imported OpenSSH-formatted private key.
//
// > 1. Setting this field to empty during editing will clear the private key.
// >    <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
func (o KeypairOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Specifies the imported OpenSSH-formatted public key.
// It is required when import keypair. Changing this parameter will create a new resource.
func (o KeypairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// Specifies the region in which to create the keypair resource. If omitted, the
// provider-level region will be used. Changing this parameter will create a new resource.
func (o KeypairOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the scope of keypair. The options are as follows:
// + **account**: Tenant-level, available to all users under the same account.
// + **user**: User-level, only available to user.
//
// Defaults to `user`. Changing this parameter will create a new resource.
func (o KeypairOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// Specifies the user ID to which the keypair belongs.
//
// > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
// >    <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
func (o KeypairOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type KeypairArrayOutput struct{ *pulumi.OutputState }

func (KeypairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (o KeypairArrayOutput) ToKeypairArrayOutput() KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) Index(i pulumi.IntInput) KeypairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keypair {
		return vs[0].([]*Keypair)[vs[1].(int)]
	}).(KeypairOutput)
}

type KeypairMapOutput struct{ *pulumi.OutputState }

func (KeypairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (o KeypairMapOutput) ToKeypairMapOutput() KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) MapIndex(k pulumi.StringInput) KeypairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keypair {
		return vs[0].(map[string]*Keypair)[vs[1].(string)]
	}).(KeypairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairInput)(nil)).Elem(), &Keypair{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairArrayInput)(nil)).Elem(), KeypairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairMapInput)(nil)).Elem(), KeypairMap{})
	pulumi.RegisterOutputType(KeypairOutput{})
	pulumi.RegisterOutputType(KeypairArrayOutput{})
	pulumi.RegisterOutputType(KeypairMapOutput{})
}

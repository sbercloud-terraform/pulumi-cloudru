// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type ZoneRouter struct {
	// ID of the associated VPC.
	RouterId string `pulumi:"routerId"`
	// The region of the VPC.
	RouterRegion *string `pulumi:"routerRegion"`
}

// ZoneRouterInput is an input type that accepts ZoneRouterArgs and ZoneRouterOutput values.
// You can construct a concrete instance of `ZoneRouterInput` via:
//
//	ZoneRouterArgs{...}
type ZoneRouterInput interface {
	pulumi.Input

	ToZoneRouterOutput() ZoneRouterOutput
	ToZoneRouterOutputWithContext(context.Context) ZoneRouterOutput
}

type ZoneRouterArgs struct {
	// ID of the associated VPC.
	RouterId pulumi.StringInput `pulumi:"routerId"`
	// The region of the VPC.
	RouterRegion pulumi.StringPtrInput `pulumi:"routerRegion"`
}

func (ZoneRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneRouter)(nil)).Elem()
}

func (i ZoneRouterArgs) ToZoneRouterOutput() ZoneRouterOutput {
	return i.ToZoneRouterOutputWithContext(context.Background())
}

func (i ZoneRouterArgs) ToZoneRouterOutputWithContext(ctx context.Context) ZoneRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneRouterOutput)
}

// ZoneRouterArrayInput is an input type that accepts ZoneRouterArray and ZoneRouterArrayOutput values.
// You can construct a concrete instance of `ZoneRouterArrayInput` via:
//
//	ZoneRouterArray{ ZoneRouterArgs{...} }
type ZoneRouterArrayInput interface {
	pulumi.Input

	ToZoneRouterArrayOutput() ZoneRouterArrayOutput
	ToZoneRouterArrayOutputWithContext(context.Context) ZoneRouterArrayOutput
}

type ZoneRouterArray []ZoneRouterInput

func (ZoneRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneRouter)(nil)).Elem()
}

func (i ZoneRouterArray) ToZoneRouterArrayOutput() ZoneRouterArrayOutput {
	return i.ToZoneRouterArrayOutputWithContext(context.Background())
}

func (i ZoneRouterArray) ToZoneRouterArrayOutputWithContext(ctx context.Context) ZoneRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneRouterArrayOutput)
}

type ZoneRouterOutput struct{ *pulumi.OutputState }

func (ZoneRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneRouter)(nil)).Elem()
}

func (o ZoneRouterOutput) ToZoneRouterOutput() ZoneRouterOutput {
	return o
}

func (o ZoneRouterOutput) ToZoneRouterOutputWithContext(ctx context.Context) ZoneRouterOutput {
	return o
}

// ID of the associated VPC.
func (o ZoneRouterOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneRouter) string { return v.RouterId }).(pulumi.StringOutput)
}

// The region of the VPC.
func (o ZoneRouterOutput) RouterRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ZoneRouter) *string { return v.RouterRegion }).(pulumi.StringPtrOutput)
}

type ZoneRouterArrayOutput struct{ *pulumi.OutputState }

func (ZoneRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneRouter)(nil)).Elem()
}

func (o ZoneRouterArrayOutput) ToZoneRouterArrayOutput() ZoneRouterArrayOutput {
	return o
}

func (o ZoneRouterArrayOutput) ToZoneRouterArrayOutputWithContext(ctx context.Context) ZoneRouterArrayOutput {
	return o
}

func (o ZoneRouterArrayOutput) Index(i pulumi.IntInput) ZoneRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneRouter {
		return vs[0].([]ZoneRouter)[vs[1].(int)]
	}).(ZoneRouterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneRouterInput)(nil)).Elem(), ZoneRouterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneRouterArrayInput)(nil)).Elem(), ZoneRouterArray{})
	pulumi.RegisterOutputType(ZoneRouterOutput{})
	pulumi.RegisterOutputType(ZoneRouterArrayOutput{})
}

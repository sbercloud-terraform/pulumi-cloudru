// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DmsKafkaConsumerGroup extends pulumi.CustomResource {
    /**
     * Get an existing DmsKafkaConsumerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsKafkaConsumerGroupState, opts?: pulumi.CustomResourceOptions): DmsKafkaConsumerGroup {
        return new DmsKafkaConsumerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:index/dmsKafkaConsumerGroup:DmsKafkaConsumerGroup';

    /**
     * Returns true if the given object is an instance of DmsKafkaConsumerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsKafkaConsumerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsKafkaConsumerGroup.__pulumiType;
    }

    /**
     * Indicates the coordinator id of the consumer group.
     */
    declare public /*out*/ readonly coordinatorId: pulumi.Output<number>;
    /**
     * Indicates the created time of the consumer group.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specifies the description of the consumer group.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the ID of the Kafka instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Indicates the lag number of the consumer group.
     */
    declare public /*out*/ readonly lag: pulumi.Output<number>;
    /**
     * Specifies the name of the consumer group.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * Indicates the state of the consumer group.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;

    /**
     * Create a DmsKafkaConsumerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsKafkaConsumerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsKafkaConsumerGroupArgs | DmsKafkaConsumerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsKafkaConsumerGroupState | undefined;
            resourceInputs["coordinatorId"] = state?.coordinatorId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["lag"] = state?.lag;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["state"] = state?.state;
        } else {
            const args = argsOrState as DmsKafkaConsumerGroupArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["coordinatorId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lag"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsKafkaConsumerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DmsKafkaConsumerGroup resources.
 */
export interface DmsKafkaConsumerGroupState {
    /**
     * Indicates the coordinator id of the consumer group.
     */
    coordinatorId?: pulumi.Input<number>;
    /**
     * Indicates the created time of the consumer group.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the description of the consumer group.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Kafka instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Indicates the lag number of the consumer group.
     */
    lag?: pulumi.Input<number>;
    /**
     * Specifies the name of the consumer group.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Indicates the state of the consumer group.
     */
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmsKafkaConsumerGroup resource.
 */
export interface DmsKafkaConsumerGroupArgs {
    /**
     * Specifies the description of the consumer group.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of the Kafka instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the name of the consumer group.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

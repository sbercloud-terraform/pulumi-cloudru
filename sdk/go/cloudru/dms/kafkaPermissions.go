// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type KafkaPermissions struct {
	pulumi.CustomResourceState

	InstanceId pulumi.StringOutput               `pulumi:"instanceId"`
	Policies   KafkaPermissionsPolicyArrayOutput `pulumi:"policies"`
	Region     pulumi.StringOutput               `pulumi:"region"`
	TopicName  pulumi.StringOutput               `pulumi:"topicName"`
}

// NewKafkaPermissions registers a new resource with the given unique name, arguments, and options.
func NewKafkaPermissions(ctx *pulumi.Context,
	name string, args *KafkaPermissionsArgs, opts ...pulumi.ResourceOption) (*KafkaPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaPermissions
	err := ctx.RegisterResource("sbercloud:Dms/kafkaPermissions:KafkaPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaPermissions gets an existing KafkaPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaPermissionsState, opts ...pulumi.ResourceOption) (*KafkaPermissions, error) {
	var resource KafkaPermissions
	err := ctx.ReadResource("sbercloud:Dms/kafkaPermissions:KafkaPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaPermissions resources.
type kafkaPermissionsState struct {
	InstanceId *string                  `pulumi:"instanceId"`
	Policies   []KafkaPermissionsPolicy `pulumi:"policies"`
	Region     *string                  `pulumi:"region"`
	TopicName  *string                  `pulumi:"topicName"`
}

type KafkaPermissionsState struct {
	InstanceId pulumi.StringPtrInput
	Policies   KafkaPermissionsPolicyArrayInput
	Region     pulumi.StringPtrInput
	TopicName  pulumi.StringPtrInput
}

func (KafkaPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaPermissionsState)(nil)).Elem()
}

type kafkaPermissionsArgs struct {
	InstanceId string                   `pulumi:"instanceId"`
	Policies   []KafkaPermissionsPolicy `pulumi:"policies"`
	Region     *string                  `pulumi:"region"`
	TopicName  string                   `pulumi:"topicName"`
}

// The set of arguments for constructing a KafkaPermissions resource.
type KafkaPermissionsArgs struct {
	InstanceId pulumi.StringInput
	Policies   KafkaPermissionsPolicyArrayInput
	Region     pulumi.StringPtrInput
	TopicName  pulumi.StringInput
}

func (KafkaPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaPermissionsArgs)(nil)).Elem()
}

type KafkaPermissionsInput interface {
	pulumi.Input

	ToKafkaPermissionsOutput() KafkaPermissionsOutput
	ToKafkaPermissionsOutputWithContext(ctx context.Context) KafkaPermissionsOutput
}

func (*KafkaPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaPermissions)(nil)).Elem()
}

func (i *KafkaPermissions) ToKafkaPermissionsOutput() KafkaPermissionsOutput {
	return i.ToKafkaPermissionsOutputWithContext(context.Background())
}

func (i *KafkaPermissions) ToKafkaPermissionsOutputWithContext(ctx context.Context) KafkaPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPermissionsOutput)
}

// KafkaPermissionsArrayInput is an input type that accepts KafkaPermissionsArray and KafkaPermissionsArrayOutput values.
// You can construct a concrete instance of `KafkaPermissionsArrayInput` via:
//
//	KafkaPermissionsArray{ KafkaPermissionsArgs{...} }
type KafkaPermissionsArrayInput interface {
	pulumi.Input

	ToKafkaPermissionsArrayOutput() KafkaPermissionsArrayOutput
	ToKafkaPermissionsArrayOutputWithContext(context.Context) KafkaPermissionsArrayOutput
}

type KafkaPermissionsArray []KafkaPermissionsInput

func (KafkaPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaPermissions)(nil)).Elem()
}

func (i KafkaPermissionsArray) ToKafkaPermissionsArrayOutput() KafkaPermissionsArrayOutput {
	return i.ToKafkaPermissionsArrayOutputWithContext(context.Background())
}

func (i KafkaPermissionsArray) ToKafkaPermissionsArrayOutputWithContext(ctx context.Context) KafkaPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPermissionsArrayOutput)
}

// KafkaPermissionsMapInput is an input type that accepts KafkaPermissionsMap and KafkaPermissionsMapOutput values.
// You can construct a concrete instance of `KafkaPermissionsMapInput` via:
//
//	KafkaPermissionsMap{ "key": KafkaPermissionsArgs{...} }
type KafkaPermissionsMapInput interface {
	pulumi.Input

	ToKafkaPermissionsMapOutput() KafkaPermissionsMapOutput
	ToKafkaPermissionsMapOutputWithContext(context.Context) KafkaPermissionsMapOutput
}

type KafkaPermissionsMap map[string]KafkaPermissionsInput

func (KafkaPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaPermissions)(nil)).Elem()
}

func (i KafkaPermissionsMap) ToKafkaPermissionsMapOutput() KafkaPermissionsMapOutput {
	return i.ToKafkaPermissionsMapOutputWithContext(context.Background())
}

func (i KafkaPermissionsMap) ToKafkaPermissionsMapOutputWithContext(ctx context.Context) KafkaPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaPermissionsMapOutput)
}

type KafkaPermissionsOutput struct{ *pulumi.OutputState }

func (KafkaPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaPermissions)(nil)).Elem()
}

func (o KafkaPermissionsOutput) ToKafkaPermissionsOutput() KafkaPermissionsOutput {
	return o
}

func (o KafkaPermissionsOutput) ToKafkaPermissionsOutputWithContext(ctx context.Context) KafkaPermissionsOutput {
	return o
}

func (o KafkaPermissionsOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaPermissions) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o KafkaPermissionsOutput) Policies() KafkaPermissionsPolicyArrayOutput {
	return o.ApplyT(func(v *KafkaPermissions) KafkaPermissionsPolicyArrayOutput { return v.Policies }).(KafkaPermissionsPolicyArrayOutput)
}

func (o KafkaPermissionsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaPermissions) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o KafkaPermissionsOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaPermissions) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type KafkaPermissionsArrayOutput struct{ *pulumi.OutputState }

func (KafkaPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaPermissions)(nil)).Elem()
}

func (o KafkaPermissionsArrayOutput) ToKafkaPermissionsArrayOutput() KafkaPermissionsArrayOutput {
	return o
}

func (o KafkaPermissionsArrayOutput) ToKafkaPermissionsArrayOutputWithContext(ctx context.Context) KafkaPermissionsArrayOutput {
	return o
}

func (o KafkaPermissionsArrayOutput) Index(i pulumi.IntInput) KafkaPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaPermissions {
		return vs[0].([]*KafkaPermissions)[vs[1].(int)]
	}).(KafkaPermissionsOutput)
}

type KafkaPermissionsMapOutput struct{ *pulumi.OutputState }

func (KafkaPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaPermissions)(nil)).Elem()
}

func (o KafkaPermissionsMapOutput) ToKafkaPermissionsMapOutput() KafkaPermissionsMapOutput {
	return o
}

func (o KafkaPermissionsMapOutput) ToKafkaPermissionsMapOutputWithContext(ctx context.Context) KafkaPermissionsMapOutput {
	return o
}

func (o KafkaPermissionsMapOutput) MapIndex(k pulumi.StringInput) KafkaPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaPermissions {
		return vs[0].(map[string]*KafkaPermissions)[vs[1].(string)]
	}).(KafkaPermissionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPermissionsInput)(nil)).Elem(), &KafkaPermissions{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPermissionsArrayInput)(nil)).Elem(), KafkaPermissionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaPermissionsMapInput)(nil)).Elem(), KafkaPermissionsMap{})
	pulumi.RegisterOutputType(KafkaPermissionsOutput{})
	pulumi.RegisterOutputType(KafkaPermissionsArrayOutput{})
	pulumi.RegisterOutputType(KafkaPermissionsMapOutput{})
}

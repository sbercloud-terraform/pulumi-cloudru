// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a CFW lts log resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const ltsAttackLogStreamId = config.requireObject<any>("ltsAttackLogStreamId");
 * const ltsFlowLogStreamId = config.requireObject<any>("ltsFlowLogStreamId");
 * const ltsAccessLogStreamId = config.requireObject<any>("ltsAccessLogStreamId");
 * const fwInstanceId = config.requireObject<any>("fwInstanceId");
 * const ltsLogGroupId = config.requireObject<any>("ltsLogGroupId");
 * const test = new sbercloud.cfw.LtsLog("test", {
 *     fwInstanceId: fwInstanceId,
 *     ltsLogGroupId: ltsLogGroupId,
 *     ltsAttackLogStreamEnable: 1,
 *     ltsAccessLogStreamEnable: 1,
 *     ltsFlowLogStreamEnable: 1,
 *     ltsAttackLogStreamId: ltsAttackLogStreamId,
 *     ltsAccessLogStreamId: ltsAccessLogStreamId,
 *     ltsFlowLogStreamId: ltsFlowLogStreamId,
 * });
 * ```
 *
 * ## Import
 *
 * The lts log resource can be imported using the firewall instance ID, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Cfw/ltsLog:LtsLog test <fw_instance_id>
 * ```
 */
export class LtsLog extends pulumi.CustomResource {
    /**
     * Get an existing LtsLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LtsLogState, opts?: pulumi.CustomResourceOptions): LtsLog {
        return new LtsLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cfw/ltsLog:LtsLog';

    /**
     * Returns true if the given object is an instance of LtsLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LtsLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LtsLog.__pulumiType;
    }

    /**
     * Specifies the ID of the firewall.
     * Changing this creates a new resource.
     */
    public readonly fwInstanceId!: pulumi.Output<string>;
    /**
     * Specifies whether to enable the access log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    public readonly ltsAccessLogStreamEnable!: pulumi.Output<number>;
    /**
     * Specifies the access log stream ID.
     */
    public readonly ltsAccessLogStreamId!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable the attack log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    public readonly ltsAttackLogStreamEnable!: pulumi.Output<number>;
    /**
     * Specifies the attack log stream ID.
     */
    public readonly ltsAttackLogStreamId!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable the flow log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    public readonly ltsFlowLogStreamEnable!: pulumi.Output<number>;
    /**
     * Specifies the flow log stream ID.
     */
    public readonly ltsFlowLogStreamId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the LTS log group ID.
     */
    public readonly ltsLogGroupId!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a LtsLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LtsLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LtsLogArgs | LtsLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LtsLogState | undefined;
            resourceInputs["fwInstanceId"] = state ? state.fwInstanceId : undefined;
            resourceInputs["ltsAccessLogStreamEnable"] = state ? state.ltsAccessLogStreamEnable : undefined;
            resourceInputs["ltsAccessLogStreamId"] = state ? state.ltsAccessLogStreamId : undefined;
            resourceInputs["ltsAttackLogStreamEnable"] = state ? state.ltsAttackLogStreamEnable : undefined;
            resourceInputs["ltsAttackLogStreamId"] = state ? state.ltsAttackLogStreamId : undefined;
            resourceInputs["ltsFlowLogStreamEnable"] = state ? state.ltsFlowLogStreamEnable : undefined;
            resourceInputs["ltsFlowLogStreamId"] = state ? state.ltsFlowLogStreamId : undefined;
            resourceInputs["ltsLogGroupId"] = state ? state.ltsLogGroupId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as LtsLogArgs | undefined;
            if ((!args || args.fwInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fwInstanceId'");
            }
            if ((!args || args.ltsAccessLogStreamEnable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ltsAccessLogStreamEnable'");
            }
            if ((!args || args.ltsAttackLogStreamEnable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ltsAttackLogStreamEnable'");
            }
            if ((!args || args.ltsFlowLogStreamEnable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ltsFlowLogStreamEnable'");
            }
            if ((!args || args.ltsLogGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ltsLogGroupId'");
            }
            resourceInputs["fwInstanceId"] = args ? args.fwInstanceId : undefined;
            resourceInputs["ltsAccessLogStreamEnable"] = args ? args.ltsAccessLogStreamEnable : undefined;
            resourceInputs["ltsAccessLogStreamId"] = args ? args.ltsAccessLogStreamId : undefined;
            resourceInputs["ltsAttackLogStreamEnable"] = args ? args.ltsAttackLogStreamEnable : undefined;
            resourceInputs["ltsAttackLogStreamId"] = args ? args.ltsAttackLogStreamId : undefined;
            resourceInputs["ltsFlowLogStreamEnable"] = args ? args.ltsFlowLogStreamEnable : undefined;
            resourceInputs["ltsFlowLogStreamId"] = args ? args.ltsFlowLogStreamId : undefined;
            resourceInputs["ltsLogGroupId"] = args ? args.ltsLogGroupId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LtsLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LtsLog resources.
 */
export interface LtsLogState {
    /**
     * Specifies the ID of the firewall.
     * Changing this creates a new resource.
     */
    fwInstanceId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the access log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    ltsAccessLogStreamEnable?: pulumi.Input<number>;
    /**
     * Specifies the access log stream ID.
     */
    ltsAccessLogStreamId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the attack log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    ltsAttackLogStreamEnable?: pulumi.Input<number>;
    /**
     * Specifies the attack log stream ID.
     */
    ltsAttackLogStreamId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the flow log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    ltsFlowLogStreamEnable?: pulumi.Input<number>;
    /**
     * Specifies the flow log stream ID.
     */
    ltsFlowLogStreamId?: pulumi.Input<string>;
    /**
     * Specifies the LTS log group ID.
     */
    ltsLogGroupId?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LtsLog resource.
 */
export interface LtsLogArgs {
    /**
     * Specifies the ID of the firewall.
     * Changing this creates a new resource.
     */
    fwInstanceId: pulumi.Input<string>;
    /**
     * Specifies whether to enable the access log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    ltsAccessLogStreamEnable: pulumi.Input<number>;
    /**
     * Specifies the access log stream ID.
     */
    ltsAccessLogStreamId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the attack log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    ltsAttackLogStreamEnable: pulumi.Input<number>;
    /**
     * Specifies the attack log stream ID.
     */
    ltsAttackLogStreamId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the flow log stream.
     * The valid values are `0` and `1`, where `0` means disable and `1` means enable.
     */
    ltsFlowLogStreamEnable: pulumi.Input<number>;
    /**
     * Specifies the flow log stream ID.
     */
    ltsFlowLogStreamId?: pulumi.Input<string>;
    /**
     * Specifies the LTS log group ID.
     */
    ltsLogGroupId: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

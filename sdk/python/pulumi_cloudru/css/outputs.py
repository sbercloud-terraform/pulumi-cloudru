# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ClusterBackupStrategy',
    'ClusterClientNodeConfig',
    'ClusterClientNodeConfigVolume',
    'ClusterColdNodeConfig',
    'ClusterColdNodeConfigVolume',
    'ClusterEssNodeConfig',
    'ClusterEssNodeConfigVolume',
    'ClusterKibanaPublicAccess',
    'ClusterMasterNodeConfig',
    'ClusterMasterNodeConfigVolume',
    'ClusterNode',
    'ClusterNodeConfig',
    'ClusterNodeConfigNetworkInfo',
    'ClusterNodeConfigVolume',
    'ClusterPublicAccess',
    'ClusterVpcepEndpoint',
    'GetFlavorsFlavorResult',
]

@pulumi.output_type
class ClusterBackupStrategy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"
        elif key == "backupPath":
            suggest = "backup_path"
        elif key == "keepDays":
            suggest = "keep_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterBackupStrategy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterBackupStrategy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterBackupStrategy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 start_time: _builtins.str,
                 agency: Optional[_builtins.str] = None,
                 backup_path: Optional[_builtins.str] = None,
                 bucket: Optional[_builtins.str] = None,
                 keep_days: Optional[_builtins.int] = None,
                 prefix: Optional[_builtins.str] = None):
        pulumi.set(__self__, "start_time", start_time)
        if agency is not None:
            pulumi.set(__self__, "agency", agency)
        if backup_path is not None:
            pulumi.set(__self__, "backup_path", backup_path)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def agency(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "agency")

    @_builtins.property
    @pulumi.getter(name="backupPath")
    def backup_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "backup_path")

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "keep_days")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class ClusterClientNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceNumber":
            suggest = "instance_number"
        elif key == "shrinkNodeIds":
            suggest = "shrink_node_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClientNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClientNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClientNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flavor: _builtins.str,
                 instance_number: _builtins.int,
                 volume: 'outputs.ClusterClientNodeConfigVolume',
                 shrink_node_ids: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "volume", volume)
        if shrink_node_ids is not None:
            pulumi.set(__self__, "shrink_node_ids", shrink_node_ids)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> _builtins.int:
        return pulumi.get(self, "instance_number")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> 'outputs.ClusterClientNodeConfigVolume':
        return pulumi.get(self, "volume")

    @_builtins.property
    @pulumi.getter(name="shrinkNodeIds")
    def shrink_node_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "shrink_node_ids")


@pulumi.output_type
class ClusterClientNodeConfigVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterClientNodeConfigVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterClientNodeConfigVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterClientNodeConfigVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 volume_type: _builtins.str):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ClusterColdNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceNumber":
            suggest = "instance_number"
        elif key == "shrinkNodeIds":
            suggest = "shrink_node_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterColdNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterColdNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterColdNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flavor: _builtins.str,
                 instance_number: _builtins.int,
                 shrink_node_ids: Optional[Sequence[_builtins.str]] = None,
                 volume: Optional['outputs.ClusterColdNodeConfigVolume'] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_number", instance_number)
        if shrink_node_ids is not None:
            pulumi.set(__self__, "shrink_node_ids", shrink_node_ids)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> _builtins.int:
        return pulumi.get(self, "instance_number")

    @_builtins.property
    @pulumi.getter(name="shrinkNodeIds")
    def shrink_node_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "shrink_node_ids")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ClusterColdNodeConfigVolume']:
        return pulumi.get(self, "volume")


@pulumi.output_type
class ClusterColdNodeConfigVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterColdNodeConfigVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterColdNodeConfigVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterColdNodeConfigVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 volume_type: _builtins.str):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ClusterEssNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceNumber":
            suggest = "instance_number"
        elif key == "shrinkNodeIds":
            suggest = "shrink_node_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterEssNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterEssNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterEssNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flavor: _builtins.str,
                 instance_number: _builtins.int,
                 shrink_node_ids: Optional[Sequence[_builtins.str]] = None,
                 volume: Optional['outputs.ClusterEssNodeConfigVolume'] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_number", instance_number)
        if shrink_node_ids is not None:
            pulumi.set(__self__, "shrink_node_ids", shrink_node_ids)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> _builtins.int:
        return pulumi.get(self, "instance_number")

    @_builtins.property
    @pulumi.getter(name="shrinkNodeIds")
    def shrink_node_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "shrink_node_ids")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional['outputs.ClusterEssNodeConfigVolume']:
        return pulumi.get(self, "volume")


@pulumi.output_type
class ClusterEssNodeConfigVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterEssNodeConfigVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterEssNodeConfigVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterEssNodeConfigVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 volume_type: _builtins.str):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ClusterKibanaPublicAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "whitelistEnabled":
            suggest = "whitelist_enabled"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKibanaPublicAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKibanaPublicAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKibanaPublicAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 whitelist_enabled: _builtins.bool,
                 public_ip: Optional[_builtins.str] = None,
                 whitelist: Optional[_builtins.str] = None):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "whitelist_enabled", whitelist_enabled)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="whitelistEnabled")
    def whitelist_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "whitelist_enabled")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def whitelist(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "whitelist")


@pulumi.output_type
class ClusterMasterNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceNumber":
            suggest = "instance_number"
        elif key == "shrinkNodeIds":
            suggest = "shrink_node_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMasterNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMasterNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMasterNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 flavor: _builtins.str,
                 instance_number: _builtins.int,
                 volume: 'outputs.ClusterMasterNodeConfigVolume',
                 shrink_node_ids: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "volume", volume)
        if shrink_node_ids is not None:
            pulumi.set(__self__, "shrink_node_ids", shrink_node_ids)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> _builtins.int:
        return pulumi.get(self, "instance_number")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> 'outputs.ClusterMasterNodeConfigVolume':
        return pulumi.get(self, "volume")

    @_builtins.property
    @pulumi.getter(name="shrinkNodeIds")
    def shrink_node_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "shrink_node_ids")


@pulumi.output_type
class ClusterMasterNodeConfigVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMasterNodeConfigVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMasterNodeConfigVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMasterNodeConfigVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 volume_type: _builtins.str):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ClusterNode(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "specCode":
            suggest = "spec_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNode. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNode.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNode.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 spec_code: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_code is not None:
            pulumi.set(__self__, "spec_code", spec_code)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "spec_code")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ClusterNodeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "networkInfo":
            suggest = "network_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 flavor: _builtins.str,
                 network_info: 'outputs.ClusterNodeConfigNetworkInfo',
                 volume: 'outputs.ClusterNodeConfigVolume'):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "network_info", network_info)
        pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="networkInfo")
    def network_info(self) -> 'outputs.ClusterNodeConfigNetworkInfo':
        return pulumi.get(self, "network_info")

    @_builtins.property
    @pulumi.getter
    def volume(self) -> 'outputs.ClusterNodeConfigVolume':
        return pulumi.get(self, "volume")


@pulumi.output_type
class ClusterNodeConfigNetworkInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "vpcId":
            suggest = "vpc_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeConfigNetworkInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeConfigNetworkInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeConfigNetworkInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 subnet_id: _builtins.str,
                 vpc_id: _builtins.str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class ClusterNodeConfigVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeConfigVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeConfigVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeConfigVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: _builtins.int,
                 volume_type: _builtins.str):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ClusterPublicAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "whitelistEnabled":
            suggest = "whitelist_enabled"
        elif key == "publicIp":
            suggest = "public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPublicAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPublicAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPublicAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 whitelist_enabled: _builtins.bool,
                 public_ip: Optional[_builtins.str] = None,
                 whitelist: Optional[_builtins.str] = None):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "whitelist_enabled", whitelist_enabled)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="whitelistEnabled")
    def whitelist_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "whitelist_enabled")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def whitelist(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "whitelist")


@pulumi.output_type
class ClusterVpcepEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointWithDnsName":
            suggest = "endpoint_with_dns_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterVpcepEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterVpcepEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterVpcepEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_with_dns_name: _builtins.bool,
                 whitelists: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "endpoint_with_dns_name", endpoint_with_dns_name)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @_builtins.property
    @pulumi.getter(name="endpointWithDnsName")
    def endpoint_with_dns_name(self) -> _builtins.bool:
        return pulumi.get(self, "endpoint_with_dns_name")

    @_builtins.property
    @pulumi.getter
    def whitelists(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "whitelists")


@pulumi.output_type
class GetFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 availability_zones: _builtins.str,
                 disk_range: _builtins.str,
                 id: _builtins.str,
                 memory: _builtins.int,
                 name: _builtins.str,
                 region: _builtins.str,
                 type: _builtins.str,
                 vcpus: _builtins.int,
                 version: _builtins.str):
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "disk_range", disk_range)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> _builtins.str:
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="diskRange")
    def disk_range(self) -> _builtins.str:
        return pulumi.get(self, "disk_range")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        return pulumi.get(self, "vcpus")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        return pulumi.get(self, "version")



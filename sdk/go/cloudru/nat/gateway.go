// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a Nat gateway resource within SberCloud Nat
//
// ## Import
//
// Nat gateway can be imported using the following format:
//
// ```sh
// $ pulumi import sbercloud:Nat/gateway:Gateway nat_1 d126fb87-43ce-4867-a2ff-cf34af3765d9
// ```
type Gateway struct {
	pulumi.CustomResourceState

	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// The order information of the NAT gateway.
	BillingInfo pulumi.StringOutput `pulumi:"billingInfo"`
	// The bandwidth that the NAT gateway can receive or send per second.
	BpsMax       pulumi.IntOutput    `pulumi:"bpsMax"`
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// The creation time of the NAT gateway.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the nat
	// gateway. The value contains 0 to 255 characters, and angle brackets (<)
	// and (>) are not allowed.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The maximum number of DNAT rules on the NAT gateway.
	DnatRulesLimit pulumi.IntOutput `pulumi:"dnatRulesLimit"`
	// Specifies the
	// enterprise project id of the nat gateway. The value can contains maximum of
	// 36 characters which it is string "0" or in UUID format with hyphens (-).
	// Changing this creates a new nat gateway.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Specifies the nat gateway name. The name can
	// contain only digits, letters, underscores (_), and hyphens(-).
	Name pulumi.StringOutput `pulumi:"name"`
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress pulumi.StringOutput    `pulumi:"ngportIpAddress"`
	Period          pulumi.IntPtrOutput    `pulumi:"period"`
	PeriodUnit      pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax pulumi.IntOutput `pulumi:"ppsMax"`
	// Specifies the region in which to
	// create the Nat gateway resource. If omitted, the provider-level region will
	// be used. Changing this creates a new nat gateway.
	Region pulumi.StringOutput `pulumi:"region"`
	// The session configuration of the NAT gateway.
	SessionConf GatewaySessionConfOutput `pulumi:"sessionConf"`
	// The maximum number of SNAT rules on the NAT gateway.
	SnatRulePublicIpLimit pulumi.IntOutput `pulumi:"snatRulePublicIpLimit"`
	// Specifies the nat gateway type.
	// The value can be:
	Spec pulumi.StringOutput `pulumi:"spec"`
	// The status of the nat gateway.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the NAT geteway.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Gateway
	err := ctx.RegisterResource("sbercloud:Nat/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("sbercloud:Nat/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	AutoRenew *string `pulumi:"autoRenew"`
	// The order information of the NAT gateway.
	BillingInfo *string `pulumi:"billingInfo"`
	// The bandwidth that the NAT gateway can receive or send per second.
	BpsMax       *int    `pulumi:"bpsMax"`
	ChargingMode *string `pulumi:"chargingMode"`
	// The creation time of the NAT gateway.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of the nat
	// gateway. The value contains 0 to 255 characters, and angle brackets (<)
	// and (>) are not allowed.
	Description *string `pulumi:"description"`
	// The maximum number of DNAT rules on the NAT gateway.
	DnatRulesLimit *int `pulumi:"dnatRulesLimit"`
	// Specifies the
	// enterprise project id of the nat gateway. The value can contains maximum of
	// 36 characters which it is string "0" or in UUID format with hyphens (-).
	// Changing this creates a new nat gateway.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the nat gateway name. The name can
	// contain only digits, letters, underscores (_), and hyphens(-).
	Name *string `pulumi:"name"`
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress *string `pulumi:"ngportIpAddress"`
	Period          *int    `pulumi:"period"`
	PeriodUnit      *string `pulumi:"periodUnit"`
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax *int `pulumi:"ppsMax"`
	// Specifies the region in which to
	// create the Nat gateway resource. If omitted, the provider-level region will
	// be used. Changing this creates a new nat gateway.
	Region *string `pulumi:"region"`
	// The session configuration of the NAT gateway.
	SessionConf *GatewaySessionConf `pulumi:"sessionConf"`
	// The maximum number of SNAT rules on the NAT gateway.
	SnatRulePublicIpLimit *int `pulumi:"snatRulePublicIpLimit"`
	// Specifies the nat gateway type.
	// The value can be:
	Spec *string `pulumi:"spec"`
	// The status of the nat gateway.
	Status *string `pulumi:"status"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the NAT geteway.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId *string `pulumi:"vpcId"`
}

type GatewayState struct {
	AutoRenew pulumi.StringPtrInput
	// The order information of the NAT gateway.
	BillingInfo pulumi.StringPtrInput
	// The bandwidth that the NAT gateway can receive or send per second.
	BpsMax       pulumi.IntPtrInput
	ChargingMode pulumi.StringPtrInput
	// The creation time of the NAT gateway.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the nat
	// gateway. The value contains 0 to 255 characters, and angle brackets (<)
	// and (>) are not allowed.
	Description pulumi.StringPtrInput
	// The maximum number of DNAT rules on the NAT gateway.
	DnatRulesLimit pulumi.IntPtrInput
	// Specifies the
	// enterprise project id of the nat gateway. The value can contains maximum of
	// 36 characters which it is string "0" or in UUID format with hyphens (-).
	// Changing this creates a new nat gateway.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the nat gateway name. The name can
	// contain only digits, letters, underscores (_), and hyphens(-).
	Name pulumi.StringPtrInput
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress pulumi.StringPtrInput
	Period          pulumi.IntPtrInput
	PeriodUnit      pulumi.StringPtrInput
	// The number of packets that the NAT gateway can receive or send per second.
	PpsMax pulumi.IntPtrInput
	// Specifies the region in which to
	// create the Nat gateway resource. If omitted, the provider-level region will
	// be used. Changing this creates a new nat gateway.
	Region pulumi.StringPtrInput
	// The session configuration of the NAT gateway.
	SessionConf GatewaySessionConfPtrInput
	// The maximum number of SNAT rules on the NAT gateway.
	SnatRulePublicIpLimit pulumi.IntPtrInput
	// Specifies the nat gateway type.
	// The value can be:
	Spec pulumi.StringPtrInput
	// The status of the nat gateway.
	Status pulumi.StringPtrInput
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the NAT geteway.
	Tags pulumi.StringMapInput
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	AutoRenew    *string `pulumi:"autoRenew"`
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the description of the nat
	// gateway. The value contains 0 to 255 characters, and angle brackets (<)
	// and (>) are not allowed.
	Description *string `pulumi:"description"`
	// Specifies the
	// enterprise project id of the nat gateway. The value can contains maximum of
	// 36 characters which it is string "0" or in UUID format with hyphens (-).
	// Changing this creates a new nat gateway.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the nat gateway name. The name can
	// contain only digits, letters, underscores (_), and hyphens(-).
	Name *string `pulumi:"name"`
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress *string `pulumi:"ngportIpAddress"`
	Period          *int    `pulumi:"period"`
	PeriodUnit      *string `pulumi:"periodUnit"`
	// Specifies the region in which to
	// create the Nat gateway resource. If omitted, the provider-level region will
	// be used. Changing this creates a new nat gateway.
	Region *string `pulumi:"region"`
	// The session configuration of the NAT gateway.
	SessionConf *GatewaySessionConf `pulumi:"sessionConf"`
	// Specifies the nat gateway type.
	// The value can be:
	Spec string `pulumi:"spec"`
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the NAT geteway.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	AutoRenew    pulumi.StringPtrInput
	ChargingMode pulumi.StringPtrInput
	// Specifies the description of the nat
	// gateway. The value contains 0 to 255 characters, and angle brackets (<)
	// and (>) are not allowed.
	Description pulumi.StringPtrInput
	// Specifies the
	// enterprise project id of the nat gateway. The value can contains maximum of
	// 36 characters which it is string "0" or in UUID format with hyphens (-).
	// Changing this creates a new nat gateway.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the nat gateway name. The name can
	// contain only digits, letters, underscores (_), and hyphens(-).
	Name pulumi.StringPtrInput
	// The IP address used for the NG port of the NAT gateway.
	NgportIpAddress pulumi.StringPtrInput
	Period          pulumi.IntPtrInput
	PeriodUnit      pulumi.StringPtrInput
	// Specifies the region in which to
	// create the Nat gateway resource. If omitted, the provider-level region will
	// be used. Changing this creates a new nat gateway.
	Region pulumi.StringPtrInput
	// The session configuration of the NAT gateway.
	SessionConf GatewaySessionConfPtrInput
	// Specifies the nat gateway type.
	// The value can be:
	Spec pulumi.StringInput
	// Specifies the subnet ID of the downstream interface (the next hop of the
	// DVR) of the NAT gateway.
	// Changing this will create a new resource.
	SubnetId pulumi.StringInput
	// Specifies the key/value pairs to associate with the NAT geteway.
	Tags pulumi.StringMapInput
	// Specifies the ID of the VPC to which the NAT gateway belongs.\
	// Changing this will create a new resource.
	VpcId pulumi.StringInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

func (o GatewayOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// The order information of the NAT gateway.
func (o GatewayOutput) BillingInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.BillingInfo }).(pulumi.StringOutput)
}

// The bandwidth that the NAT gateway can receive or send per second.
func (o GatewayOutput) BpsMax() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.BpsMax }).(pulumi.IntOutput)
}

func (o GatewayOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// The creation time of the NAT gateway.
func (o GatewayOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the nat
// gateway. The value contains 0 to 255 characters, and angle brackets (<)
// and (>) are not allowed.
func (o GatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The maximum number of DNAT rules on the NAT gateway.
func (o GatewayOutput) DnatRulesLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.DnatRulesLimit }).(pulumi.IntOutput)
}

// Specifies the
// enterprise project id of the nat gateway. The value can contains maximum of
// 36 characters which it is string "0" or in UUID format with hyphens (-).
// Changing this creates a new nat gateway.
func (o GatewayOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Specifies the nat gateway name. The name can
// contain only digits, letters, underscores (_), and hyphens(-).
func (o GatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The IP address used for the NG port of the NAT gateway.
func (o GatewayOutput) NgportIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.NgportIpAddress }).(pulumi.StringOutput)
}

func (o GatewayOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o GatewayOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The number of packets that the NAT gateway can receive or send per second.
func (o GatewayOutput) PpsMax() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.PpsMax }).(pulumi.IntOutput)
}

// Specifies the region in which to
// create the Nat gateway resource. If omitted, the provider-level region will
// be used. Changing this creates a new nat gateway.
func (o GatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The session configuration of the NAT gateway.
func (o GatewayOutput) SessionConf() GatewaySessionConfOutput {
	return o.ApplyT(func(v *Gateway) GatewaySessionConfOutput { return v.SessionConf }).(GatewaySessionConfOutput)
}

// The maximum number of SNAT rules on the NAT gateway.
func (o GatewayOutput) SnatRulePublicIpLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.SnatRulePublicIpLimit }).(pulumi.IntOutput)
}

// Specifies the nat gateway type.
// The value can be:
func (o GatewayOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Spec }).(pulumi.StringOutput)
}

// The status of the nat gateway.
func (o GatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the subnet ID of the downstream interface (the next hop of the
// DVR) of the NAT gateway.
// Changing this will create a new resource.
func (o GatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the NAT geteway.
func (o GatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the ID of the VPC to which the NAT gateway belongs.\
// Changing this will create a new resource.
func (o GatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}

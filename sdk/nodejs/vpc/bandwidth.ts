// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Bandwidth extends pulumi.CustomResource {
    /**
     * Get an existing Bandwidth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BandwidthState, opts?: pulumi.CustomResourceOptions): Bandwidth {
        return new Bandwidth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Vpc/bandwidth:Bandwidth';

    /**
     * Returns true if the given object is an instance of Bandwidth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bandwidth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bandwidth.__pulumiType;
    }

    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly bandwidthType: pulumi.Output<string>;
    declare public readonly chargeMode: pulumi.Output<string>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly publicBorderGroup: pulumi.Output<string>;
    declare public /*out*/ readonly publicips: pulumi.Output<outputs.Vpc.BandwidthPublicip[]>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly shareType: pulumi.Output<string>;
    declare public readonly size: pulumi.Output<number>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Bandwidth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BandwidthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BandwidthArgs | BandwidthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BandwidthState | undefined;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["bandwidthType"] = state?.bandwidthType;
            resourceInputs["chargeMode"] = state?.chargeMode;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["publicBorderGroup"] = state?.publicBorderGroup;
            resourceInputs["publicips"] = state?.publicips;
            resourceInputs["region"] = state?.region;
            resourceInputs["shareType"] = state?.shareType;
            resourceInputs["size"] = state?.size;
            resourceInputs["status"] = state?.status;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as BandwidthArgs | undefined;
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["bandwidthType"] = args?.bandwidthType;
            resourceInputs["chargeMode"] = args?.chargeMode;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["publicBorderGroup"] = args?.publicBorderGroup;
            resourceInputs["region"] = args?.region;
            resourceInputs["size"] = args?.size;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["publicips"] = undefined /*out*/;
            resourceInputs["shareType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bandwidth.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Bandwidth resources.
 */
export interface BandwidthState {
    autoRenew?: pulumi.Input<string>;
    bandwidthType?: pulumi.Input<string>;
    chargeMode?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    publicBorderGroup?: pulumi.Input<string>;
    publicips?: pulumi.Input<pulumi.Input<inputs.Vpc.BandwidthPublicip>[]>;
    region?: pulumi.Input<string>;
    shareType?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Bandwidth resource.
 */
export interface BandwidthArgs {
    autoRenew?: pulumi.Input<string>;
    bandwidthType?: pulumi.Input<string>;
    chargeMode?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    publicBorderGroup?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size: pulumi.Input<number>;
}

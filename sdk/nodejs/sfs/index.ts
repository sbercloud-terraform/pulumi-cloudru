// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessRuleArgs, AccessRuleState } from "./accessRule";
export type AccessRule = import("./accessRule").AccessRule;
export const AccessRule: typeof import("./accessRule").AccessRule = null as any;
utilities.lazyLoad(exports, ["AccessRule"], () => require("./accessRule"));

export { FileSystemArgs, FileSystemState } from "./fileSystem";
export type FileSystem = import("./fileSystem").FileSystem;
export const FileSystem: typeof import("./fileSystem").FileSystem = null as any;
utilities.lazyLoad(exports, ["FileSystem"], () => require("./fileSystem"));

export { GetFileSystemArgs, GetFileSystemResult, GetFileSystemOutputArgs } from "./getFileSystem";
export const getFileSystem: typeof import("./getFileSystem").getFileSystem = null as any;
export const getFileSystemOutput: typeof import("./getFileSystem").getFileSystemOutput = null as any;
utilities.lazyLoad(exports, ["getFileSystem","getFileSystemOutput"], () => require("./getFileSystem"));

export { GetTurbosArgs, GetTurbosResult, GetTurbosOutputArgs } from "./getTurbos";
export const getTurbos: typeof import("./getTurbos").getTurbos = null as any;
export const getTurbosOutput: typeof import("./getTurbos").getTurbosOutput = null as any;
utilities.lazyLoad(exports, ["getTurbos","getTurbosOutput"], () => require("./getTurbos"));

export { TurboArgs, TurboState } from "./turbo";
export type Turbo = import("./turbo").Turbo;
export const Turbo: typeof import("./turbo").Turbo = null as any;
utilities.lazyLoad(exports, ["Turbo"], () => require("./turbo"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudru:Sfs/accessRule:AccessRule":
                return new AccessRule(name, <any>undefined, { urn })
            case "cloudru:Sfs/fileSystem:FileSystem":
                return new FileSystem(name, <any>undefined, { urn })
            case "cloudru:Sfs/turbo:Turbo":
                return new Turbo(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudru", "Sfs/accessRule", _module)
pulumi.runtime.registerResourceModule("cloudru", "Sfs/fileSystem", _module)
pulumi.runtime.registerResourceModule("cloudru", "Sfs/turbo", _module)

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manage the conversion rules of identity provider within SberCloud IAM service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const providerId = config.requireObject<any>("providerId");
 * const conversion = new sbercloud.iam.ProviderConversion("conversion", {
 *     providerId: providerId,
 *     conversionRules: [
 *         {
 *             locals: [{
 *                 username: "Tom",
 *             }],
 *             remotes: [{
 *                 attribute: "Tom",
 *             }],
 *         },
 *         {
 *             locals: [{
 *                 username: "FederationUser",
 *             }],
 *             remotes: [{
 *                 attribute: "username",
 *                 condition: "any_one_of",
 *                 values: [
 *                     "Tom",
 *                     "Jerry",
 *                 ],
 *             }],
 *         },
 *     ],
 * });
 * ```
 *
 * <!--markdownlint-disable MD033-->
 *
 * ## Import
 *
 * Identity provider conversion rules are imported using the `provider_id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Iam/providerConversion:ProviderConversion conversion example_com_provider_oidc
 * ```
 */
export class ProviderConversion extends pulumi.CustomResource {
    /**
     * Get an existing ProviderConversion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderConversionState, opts?: pulumi.CustomResourceOptions): ProviderConversion {
        return new ProviderConversion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Iam/providerConversion:ProviderConversion';

    /**
     * Returns true if the given object is an instance of ProviderConversion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProviderConversion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProviderConversion.__pulumiType;
    }

    /**
     * Specifies the identity conversion rules of the identity provider.
     * You can use identity conversion rules to map the identities of existing users to Huawei Cloud and manage their access
     * to cloud resources.
     * The object structure is documented below.
     *
     * <a name="conversionRules"></a>
     * The `conversionRules` block supports:
     */
    public readonly conversionRules!: pulumi.Output<outputs.Iam.ProviderConversionConversionRule[]>;
    /**
     * The ID of the identity provider used to manage the conversion rules.
     * Changing this parameter will create a new resource.
     */
    public readonly providerId!: pulumi.Output<string>;

    /**
     * Create a ProviderConversion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderConversionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderConversionArgs | ProviderConversionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderConversionState | undefined;
            resourceInputs["conversionRules"] = state ? state.conversionRules : undefined;
            resourceInputs["providerId"] = state ? state.providerId : undefined;
        } else {
            const args = argsOrState as ProviderConversionArgs | undefined;
            if ((!args || args.conversionRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conversionRules'");
            }
            if ((!args || args.providerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerId'");
            }
            resourceInputs["conversionRules"] = args ? args.conversionRules : undefined;
            resourceInputs["providerId"] = args ? args.providerId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProviderConversion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProviderConversion resources.
 */
export interface ProviderConversionState {
    /**
     * Specifies the identity conversion rules of the identity provider.
     * You can use identity conversion rules to map the identities of existing users to Huawei Cloud and manage their access
     * to cloud resources.
     * The object structure is documented below.
     *
     * <a name="conversionRules"></a>
     * The `conversionRules` block supports:
     */
    conversionRules?: pulumi.Input<pulumi.Input<inputs.Iam.ProviderConversionConversionRule>[]>;
    /**
     * The ID of the identity provider used to manage the conversion rules.
     * Changing this parameter will create a new resource.
     */
    providerId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProviderConversion resource.
 */
export interface ProviderConversionArgs {
    /**
     * Specifies the identity conversion rules of the identity provider.
     * You can use identity conversion rules to map the identities of existing users to Huawei Cloud and manage their access
     * to cloud resources.
     * The object structure is documented below.
     *
     * <a name="conversionRules"></a>
     * The `conversionRules` block supports:
     */
    conversionRules: pulumi.Input<pulumi.Input<inputs.Iam.ProviderConversionConversionRule>[]>;
    /**
     * The ID of the identity provider used to manage the conversion rules.
     * Changing this parameter will create a new resource.
     */
    providerId: pulumi.Input<string>;
}

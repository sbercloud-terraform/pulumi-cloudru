// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Servergroup struct {
	pulumi.CustomResourceState

	// schema: Internal
	FaultDomains pulumi.StringArrayOutput `pulumi:"faultDomains"`
	Members      pulumi.StringArrayOutput `pulumi:"members"`
	Name         pulumi.StringOutput      `pulumi:"name"`
	// schema: Required
	Policies pulumi.StringArrayOutput `pulumi:"policies"`
	Region   pulumi.StringOutput      `pulumi:"region"`
}

// NewServergroup registers a new resource with the given unique name, arguments, and options.
func NewServergroup(ctx *pulumi.Context,
	name string, args *ServergroupArgs, opts ...pulumi.ResourceOption) (*Servergroup, error) {
	if args == nil {
		args = &ServergroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Servergroup
	err := ctx.RegisterResource("sbercloud:Ecs/servergroup:Servergroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServergroup gets an existing Servergroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServergroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServergroupState, opts ...pulumi.ResourceOption) (*Servergroup, error) {
	var resource Servergroup
	err := ctx.ReadResource("sbercloud:Ecs/servergroup:Servergroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Servergroup resources.
type servergroupState struct {
	// schema: Internal
	FaultDomains []string `pulumi:"faultDomains"`
	Members      []string `pulumi:"members"`
	Name         *string  `pulumi:"name"`
	// schema: Required
	Policies []string `pulumi:"policies"`
	Region   *string  `pulumi:"region"`
}

type ServergroupState struct {
	// schema: Internal
	FaultDomains pulumi.StringArrayInput
	Members      pulumi.StringArrayInput
	Name         pulumi.StringPtrInput
	// schema: Required
	Policies pulumi.StringArrayInput
	Region   pulumi.StringPtrInput
}

func (ServergroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*servergroupState)(nil)).Elem()
}

type servergroupArgs struct {
	Members []string `pulumi:"members"`
	Name    *string  `pulumi:"name"`
	// schema: Required
	Policies []string `pulumi:"policies"`
	Region   *string  `pulumi:"region"`
}

// The set of arguments for constructing a Servergroup resource.
type ServergroupArgs struct {
	Members pulumi.StringArrayInput
	Name    pulumi.StringPtrInput
	// schema: Required
	Policies pulumi.StringArrayInput
	Region   pulumi.StringPtrInput
}

func (ServergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*servergroupArgs)(nil)).Elem()
}

type ServergroupInput interface {
	pulumi.Input

	ToServergroupOutput() ServergroupOutput
	ToServergroupOutputWithContext(ctx context.Context) ServergroupOutput
}

func (*Servergroup) ElementType() reflect.Type {
	return reflect.TypeOf((**Servergroup)(nil)).Elem()
}

func (i *Servergroup) ToServergroupOutput() ServergroupOutput {
	return i.ToServergroupOutputWithContext(context.Background())
}

func (i *Servergroup) ToServergroupOutputWithContext(ctx context.Context) ServergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServergroupOutput)
}

// ServergroupArrayInput is an input type that accepts ServergroupArray and ServergroupArrayOutput values.
// You can construct a concrete instance of `ServergroupArrayInput` via:
//
//	ServergroupArray{ ServergroupArgs{...} }
type ServergroupArrayInput interface {
	pulumi.Input

	ToServergroupArrayOutput() ServergroupArrayOutput
	ToServergroupArrayOutputWithContext(context.Context) ServergroupArrayOutput
}

type ServergroupArray []ServergroupInput

func (ServergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Servergroup)(nil)).Elem()
}

func (i ServergroupArray) ToServergroupArrayOutput() ServergroupArrayOutput {
	return i.ToServergroupArrayOutputWithContext(context.Background())
}

func (i ServergroupArray) ToServergroupArrayOutputWithContext(ctx context.Context) ServergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServergroupArrayOutput)
}

// ServergroupMapInput is an input type that accepts ServergroupMap and ServergroupMapOutput values.
// You can construct a concrete instance of `ServergroupMapInput` via:
//
//	ServergroupMap{ "key": ServergroupArgs{...} }
type ServergroupMapInput interface {
	pulumi.Input

	ToServergroupMapOutput() ServergroupMapOutput
	ToServergroupMapOutputWithContext(context.Context) ServergroupMapOutput
}

type ServergroupMap map[string]ServergroupInput

func (ServergroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Servergroup)(nil)).Elem()
}

func (i ServergroupMap) ToServergroupMapOutput() ServergroupMapOutput {
	return i.ToServergroupMapOutputWithContext(context.Background())
}

func (i ServergroupMap) ToServergroupMapOutputWithContext(ctx context.Context) ServergroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServergroupMapOutput)
}

type ServergroupOutput struct{ *pulumi.OutputState }

func (ServergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Servergroup)(nil)).Elem()
}

func (o ServergroupOutput) ToServergroupOutput() ServergroupOutput {
	return o
}

func (o ServergroupOutput) ToServergroupOutputWithContext(ctx context.Context) ServergroupOutput {
	return o
}

// schema: Internal
func (o ServergroupOutput) FaultDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Servergroup) pulumi.StringArrayOutput { return v.FaultDomains }).(pulumi.StringArrayOutput)
}

func (o ServergroupOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Servergroup) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

func (o ServergroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Servergroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// schema: Required
func (o ServergroupOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Servergroup) pulumi.StringArrayOutput { return v.Policies }).(pulumi.StringArrayOutput)
}

func (o ServergroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Servergroup) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type ServergroupArrayOutput struct{ *pulumi.OutputState }

func (ServergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Servergroup)(nil)).Elem()
}

func (o ServergroupArrayOutput) ToServergroupArrayOutput() ServergroupArrayOutput {
	return o
}

func (o ServergroupArrayOutput) ToServergroupArrayOutputWithContext(ctx context.Context) ServergroupArrayOutput {
	return o
}

func (o ServergroupArrayOutput) Index(i pulumi.IntInput) ServergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Servergroup {
		return vs[0].([]*Servergroup)[vs[1].(int)]
	}).(ServergroupOutput)
}

type ServergroupMapOutput struct{ *pulumi.OutputState }

func (ServergroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Servergroup)(nil)).Elem()
}

func (o ServergroupMapOutput) ToServergroupMapOutput() ServergroupMapOutput {
	return o
}

func (o ServergroupMapOutput) ToServergroupMapOutputWithContext(ctx context.Context) ServergroupMapOutput {
	return o
}

func (o ServergroupMapOutput) MapIndex(k pulumi.StringInput) ServergroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Servergroup {
		return vs[0].(map[string]*Servergroup)[vs[1].(string)]
	}).(ServergroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServergroupInput)(nil)).Elem(), &Servergroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServergroupArrayInput)(nil)).Elem(), ServergroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServergroupMapInput)(nil)).Elem(), ServergroupMap{})
	pulumi.RegisterOutputType(ServergroupOutput{})
	pulumi.RegisterOutputType(ServergroupArrayOutput{})
	pulumi.RegisterOutputType(ServergroupMapOutput{})
}

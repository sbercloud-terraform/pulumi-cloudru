// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type IdentityGroupMembershipV3 struct {
	pulumi.CustomResourceState

	Group pulumi.StringOutput      `pulumi:"group"`
	Users pulumi.StringArrayOutput `pulumi:"users"`
}

// NewIdentityGroupMembershipV3 registers a new resource with the given unique name, arguments, and options.
func NewIdentityGroupMembershipV3(ctx *pulumi.Context,
	name string, args *IdentityGroupMembershipV3Args, opts ...pulumi.ResourceOption) (*IdentityGroupMembershipV3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Group == nil {
		return nil, errors.New("invalid value for required argument 'Group'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityGroupMembershipV3
	err := ctx.RegisterResource("sbercloud:index/identityGroupMembershipV3:IdentityGroupMembershipV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityGroupMembershipV3 gets an existing IdentityGroupMembershipV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityGroupMembershipV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityGroupMembershipV3State, opts ...pulumi.ResourceOption) (*IdentityGroupMembershipV3, error) {
	var resource IdentityGroupMembershipV3
	err := ctx.ReadResource("sbercloud:index/identityGroupMembershipV3:IdentityGroupMembershipV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityGroupMembershipV3 resources.
type identityGroupMembershipV3State struct {
	Group *string  `pulumi:"group"`
	Users []string `pulumi:"users"`
}

type IdentityGroupMembershipV3State struct {
	Group pulumi.StringPtrInput
	Users pulumi.StringArrayInput
}

func (IdentityGroupMembershipV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*identityGroupMembershipV3State)(nil)).Elem()
}

type identityGroupMembershipV3Args struct {
	Group string   `pulumi:"group"`
	Users []string `pulumi:"users"`
}

// The set of arguments for constructing a IdentityGroupMembershipV3 resource.
type IdentityGroupMembershipV3Args struct {
	Group pulumi.StringInput
	Users pulumi.StringArrayInput
}

func (IdentityGroupMembershipV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*identityGroupMembershipV3Args)(nil)).Elem()
}

type IdentityGroupMembershipV3Input interface {
	pulumi.Input

	ToIdentityGroupMembershipV3Output() IdentityGroupMembershipV3Output
	ToIdentityGroupMembershipV3OutputWithContext(ctx context.Context) IdentityGroupMembershipV3Output
}

func (*IdentityGroupMembershipV3) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityGroupMembershipV3)(nil)).Elem()
}

func (i *IdentityGroupMembershipV3) ToIdentityGroupMembershipV3Output() IdentityGroupMembershipV3Output {
	return i.ToIdentityGroupMembershipV3OutputWithContext(context.Background())
}

func (i *IdentityGroupMembershipV3) ToIdentityGroupMembershipV3OutputWithContext(ctx context.Context) IdentityGroupMembershipV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGroupMembershipV3Output)
}

// IdentityGroupMembershipV3ArrayInput is an input type that accepts IdentityGroupMembershipV3Array and IdentityGroupMembershipV3ArrayOutput values.
// You can construct a concrete instance of `IdentityGroupMembershipV3ArrayInput` via:
//
//	IdentityGroupMembershipV3Array{ IdentityGroupMembershipV3Args{...} }
type IdentityGroupMembershipV3ArrayInput interface {
	pulumi.Input

	ToIdentityGroupMembershipV3ArrayOutput() IdentityGroupMembershipV3ArrayOutput
	ToIdentityGroupMembershipV3ArrayOutputWithContext(context.Context) IdentityGroupMembershipV3ArrayOutput
}

type IdentityGroupMembershipV3Array []IdentityGroupMembershipV3Input

func (IdentityGroupMembershipV3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityGroupMembershipV3)(nil)).Elem()
}

func (i IdentityGroupMembershipV3Array) ToIdentityGroupMembershipV3ArrayOutput() IdentityGroupMembershipV3ArrayOutput {
	return i.ToIdentityGroupMembershipV3ArrayOutputWithContext(context.Background())
}

func (i IdentityGroupMembershipV3Array) ToIdentityGroupMembershipV3ArrayOutputWithContext(ctx context.Context) IdentityGroupMembershipV3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGroupMembershipV3ArrayOutput)
}

// IdentityGroupMembershipV3MapInput is an input type that accepts IdentityGroupMembershipV3Map and IdentityGroupMembershipV3MapOutput values.
// You can construct a concrete instance of `IdentityGroupMembershipV3MapInput` via:
//
//	IdentityGroupMembershipV3Map{ "key": IdentityGroupMembershipV3Args{...} }
type IdentityGroupMembershipV3MapInput interface {
	pulumi.Input

	ToIdentityGroupMembershipV3MapOutput() IdentityGroupMembershipV3MapOutput
	ToIdentityGroupMembershipV3MapOutputWithContext(context.Context) IdentityGroupMembershipV3MapOutput
}

type IdentityGroupMembershipV3Map map[string]IdentityGroupMembershipV3Input

func (IdentityGroupMembershipV3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityGroupMembershipV3)(nil)).Elem()
}

func (i IdentityGroupMembershipV3Map) ToIdentityGroupMembershipV3MapOutput() IdentityGroupMembershipV3MapOutput {
	return i.ToIdentityGroupMembershipV3MapOutputWithContext(context.Background())
}

func (i IdentityGroupMembershipV3Map) ToIdentityGroupMembershipV3MapOutputWithContext(ctx context.Context) IdentityGroupMembershipV3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGroupMembershipV3MapOutput)
}

type IdentityGroupMembershipV3Output struct{ *pulumi.OutputState }

func (IdentityGroupMembershipV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityGroupMembershipV3)(nil)).Elem()
}

func (o IdentityGroupMembershipV3Output) ToIdentityGroupMembershipV3Output() IdentityGroupMembershipV3Output {
	return o
}

func (o IdentityGroupMembershipV3Output) ToIdentityGroupMembershipV3OutputWithContext(ctx context.Context) IdentityGroupMembershipV3Output {
	return o
}

func (o IdentityGroupMembershipV3Output) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityGroupMembershipV3) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

func (o IdentityGroupMembershipV3Output) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IdentityGroupMembershipV3) pulumi.StringArrayOutput { return v.Users }).(pulumi.StringArrayOutput)
}

type IdentityGroupMembershipV3ArrayOutput struct{ *pulumi.OutputState }

func (IdentityGroupMembershipV3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityGroupMembershipV3)(nil)).Elem()
}

func (o IdentityGroupMembershipV3ArrayOutput) ToIdentityGroupMembershipV3ArrayOutput() IdentityGroupMembershipV3ArrayOutput {
	return o
}

func (o IdentityGroupMembershipV3ArrayOutput) ToIdentityGroupMembershipV3ArrayOutputWithContext(ctx context.Context) IdentityGroupMembershipV3ArrayOutput {
	return o
}

func (o IdentityGroupMembershipV3ArrayOutput) Index(i pulumi.IntInput) IdentityGroupMembershipV3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityGroupMembershipV3 {
		return vs[0].([]*IdentityGroupMembershipV3)[vs[1].(int)]
	}).(IdentityGroupMembershipV3Output)
}

type IdentityGroupMembershipV3MapOutput struct{ *pulumi.OutputState }

func (IdentityGroupMembershipV3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityGroupMembershipV3)(nil)).Elem()
}

func (o IdentityGroupMembershipV3MapOutput) ToIdentityGroupMembershipV3MapOutput() IdentityGroupMembershipV3MapOutput {
	return o
}

func (o IdentityGroupMembershipV3MapOutput) ToIdentityGroupMembershipV3MapOutputWithContext(ctx context.Context) IdentityGroupMembershipV3MapOutput {
	return o
}

func (o IdentityGroupMembershipV3MapOutput) MapIndex(k pulumi.StringInput) IdentityGroupMembershipV3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityGroupMembershipV3 {
		return vs[0].(map[string]*IdentityGroupMembershipV3)[vs[1].(string)]
	}).(IdentityGroupMembershipV3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGroupMembershipV3Input)(nil)).Elem(), &IdentityGroupMembershipV3{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGroupMembershipV3ArrayInput)(nil)).Elem(), IdentityGroupMembershipV3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGroupMembershipV3MapInput)(nil)).Elem(), IdentityGroupMembershipV3Map{})
	pulumi.RegisterOutputType(IdentityGroupMembershipV3Output{})
	pulumi.RegisterOutputType(IdentityGroupMembershipV3ArrayOutput{})
	pulumi.RegisterOutputType(IdentityGroupMembershipV3MapOutput{})
}

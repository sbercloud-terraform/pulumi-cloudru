// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ApigPlugin struct {
	pulumi.CustomResourceState

	// The configuration details for plugin.
	Content pulumi.StringOutput `pulumi:"content"`
	// The creation time of the plugin.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The plugin description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The ID of the dedicated instance to which the plugin belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The plugin name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region where the plugin is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The plugin type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The latest update time of the plugin.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewApigPlugin registers a new resource with the given unique name, arguments, and options.
func NewApigPlugin(ctx *pulumi.Context,
	name string, args *ApigPluginArgs, opts ...pulumi.ResourceOption) (*ApigPlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApigPlugin
	err := ctx.RegisterResource("sbercloud:index/apigPlugin:ApigPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigPlugin gets an existing ApigPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigPluginState, opts ...pulumi.ResourceOption) (*ApigPlugin, error) {
	var resource ApigPlugin
	err := ctx.ReadResource("sbercloud:index/apigPlugin:ApigPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigPlugin resources.
type apigPluginState struct {
	// The configuration details for plugin.
	Content *string `pulumi:"content"`
	// The creation time of the plugin.
	CreatedAt *string `pulumi:"createdAt"`
	// The plugin description.
	Description *string `pulumi:"description"`
	// The ID of the dedicated instance to which the plugin belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The plugin name.
	Name *string `pulumi:"name"`
	// The region where the plugin is located.
	Region *string `pulumi:"region"`
	// The plugin type.
	Type *string `pulumi:"type"`
	// The latest update time of the plugin.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ApigPluginState struct {
	// The configuration details for plugin.
	Content pulumi.StringPtrInput
	// The creation time of the plugin.
	CreatedAt pulumi.StringPtrInput
	// The plugin description.
	Description pulumi.StringPtrInput
	// The ID of the dedicated instance to which the plugin belongs.
	InstanceId pulumi.StringPtrInput
	// The plugin name.
	Name pulumi.StringPtrInput
	// The region where the plugin is located.
	Region pulumi.StringPtrInput
	// The plugin type.
	Type pulumi.StringPtrInput
	// The latest update time of the plugin.
	UpdatedAt pulumi.StringPtrInput
}

func (ApigPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigPluginState)(nil)).Elem()
}

type apigPluginArgs struct {
	// The configuration details for plugin.
	Content string `pulumi:"content"`
	// The plugin description.
	Description *string `pulumi:"description"`
	// The ID of the dedicated instance to which the plugin belongs.
	InstanceId string `pulumi:"instanceId"`
	// The plugin name.
	Name *string `pulumi:"name"`
	// The region where the plugin is located.
	Region *string `pulumi:"region"`
	// The plugin type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ApigPlugin resource.
type ApigPluginArgs struct {
	// The configuration details for plugin.
	Content pulumi.StringInput
	// The plugin description.
	Description pulumi.StringPtrInput
	// The ID of the dedicated instance to which the plugin belongs.
	InstanceId pulumi.StringInput
	// The plugin name.
	Name pulumi.StringPtrInput
	// The region where the plugin is located.
	Region pulumi.StringPtrInput
	// The plugin type.
	Type pulumi.StringInput
}

func (ApigPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigPluginArgs)(nil)).Elem()
}

type ApigPluginInput interface {
	pulumi.Input

	ToApigPluginOutput() ApigPluginOutput
	ToApigPluginOutputWithContext(ctx context.Context) ApigPluginOutput
}

func (*ApigPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigPlugin)(nil)).Elem()
}

func (i *ApigPlugin) ToApigPluginOutput() ApigPluginOutput {
	return i.ToApigPluginOutputWithContext(context.Background())
}

func (i *ApigPlugin) ToApigPluginOutputWithContext(ctx context.Context) ApigPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigPluginOutput)
}

// ApigPluginArrayInput is an input type that accepts ApigPluginArray and ApigPluginArrayOutput values.
// You can construct a concrete instance of `ApigPluginArrayInput` via:
//
//	ApigPluginArray{ ApigPluginArgs{...} }
type ApigPluginArrayInput interface {
	pulumi.Input

	ToApigPluginArrayOutput() ApigPluginArrayOutput
	ToApigPluginArrayOutputWithContext(context.Context) ApigPluginArrayOutput
}

type ApigPluginArray []ApigPluginInput

func (ApigPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigPlugin)(nil)).Elem()
}

func (i ApigPluginArray) ToApigPluginArrayOutput() ApigPluginArrayOutput {
	return i.ToApigPluginArrayOutputWithContext(context.Background())
}

func (i ApigPluginArray) ToApigPluginArrayOutputWithContext(ctx context.Context) ApigPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigPluginArrayOutput)
}

// ApigPluginMapInput is an input type that accepts ApigPluginMap and ApigPluginMapOutput values.
// You can construct a concrete instance of `ApigPluginMapInput` via:
//
//	ApigPluginMap{ "key": ApigPluginArgs{...} }
type ApigPluginMapInput interface {
	pulumi.Input

	ToApigPluginMapOutput() ApigPluginMapOutput
	ToApigPluginMapOutputWithContext(context.Context) ApigPluginMapOutput
}

type ApigPluginMap map[string]ApigPluginInput

func (ApigPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigPlugin)(nil)).Elem()
}

func (i ApigPluginMap) ToApigPluginMapOutput() ApigPluginMapOutput {
	return i.ToApigPluginMapOutputWithContext(context.Background())
}

func (i ApigPluginMap) ToApigPluginMapOutputWithContext(ctx context.Context) ApigPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigPluginMapOutput)
}

type ApigPluginOutput struct{ *pulumi.OutputState }

func (ApigPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigPlugin)(nil)).Elem()
}

func (o ApigPluginOutput) ToApigPluginOutput() ApigPluginOutput {
	return o
}

func (o ApigPluginOutput) ToApigPluginOutputWithContext(ctx context.Context) ApigPluginOutput {
	return o
}

// The configuration details for plugin.
func (o ApigPluginOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigPlugin) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The creation time of the plugin.
func (o ApigPluginOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigPlugin) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The plugin description.
func (o ApigPluginOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigPlugin) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The ID of the dedicated instance to which the plugin belongs.
func (o ApigPluginOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigPlugin) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The plugin name.
func (o ApigPluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigPlugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region where the plugin is located.
func (o ApigPluginOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigPlugin) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The plugin type.
func (o ApigPluginOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigPlugin) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The latest update time of the plugin.
func (o ApigPluginOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigPlugin) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ApigPluginArrayOutput struct{ *pulumi.OutputState }

func (ApigPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigPlugin)(nil)).Elem()
}

func (o ApigPluginArrayOutput) ToApigPluginArrayOutput() ApigPluginArrayOutput {
	return o
}

func (o ApigPluginArrayOutput) ToApigPluginArrayOutputWithContext(ctx context.Context) ApigPluginArrayOutput {
	return o
}

func (o ApigPluginArrayOutput) Index(i pulumi.IntInput) ApigPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApigPlugin {
		return vs[0].([]*ApigPlugin)[vs[1].(int)]
	}).(ApigPluginOutput)
}

type ApigPluginMapOutput struct{ *pulumi.OutputState }

func (ApigPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigPlugin)(nil)).Elem()
}

func (o ApigPluginMapOutput) ToApigPluginMapOutput() ApigPluginMapOutput {
	return o
}

func (o ApigPluginMapOutput) ToApigPluginMapOutputWithContext(ctx context.Context) ApigPluginMapOutput {
	return o
}

func (o ApigPluginMapOutput) MapIndex(k pulumi.StringInput) ApigPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApigPlugin {
		return vs[0].(map[string]*ApigPlugin)[vs[1].(string)]
	}).(ApigPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigPluginInput)(nil)).Elem(), &ApigPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigPluginArrayInput)(nil)).Elem(), ApigPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigPluginMapInput)(nil)).Elem(), ApigPluginMap{})
	pulumi.RegisterOutputType(ApigPluginOutput{})
	pulumi.RegisterOutputType(ApigPluginArrayOutput{})
	pulumi.RegisterOutputType(ApigPluginMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpcep

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Provides a resource to manage a VPC endpoint service resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/vpcep"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			vmPort := cfg.RequireObject("vmPort")
//			_, err := vpcep.NewService(ctx, "demo", &vpcep.ServiceArgs{
//				Name:        pulumi.String("demo-service"),
//				ServerType:  pulumi.String("VM"),
//				VpcId:       pulumi.Any(vpcId),
//				PortId:      pulumi.Any(vmPort),
//				Description: pulumi.String("test description"),
//				PortMappings: vpcep.ServicePortMappingArray{
//					&vpcep.ServicePortMappingArgs{
//						ServicePort:  pulumi.Int(8080),
//						TerminalPort: pulumi.Int(80),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPC endpoint services can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Vpcep/service:Service test_service <id>
// ```
type Service struct {
	pulumi.CustomResourceState

	// Specifies whether connection approval is required. The default value is false.
	Approval pulumi.BoolOutput `pulumi:"approval"`
	// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
	Connections ServiceConnectionArrayOutput `pulumi:"connections"`
	// Specifies the description of the VPC endpoint service.
	Description pulumi.StringOutput `pulumi:"description"`
	// Specifies whether the VPC endpoint policy is enabled. Defaults to **false**.
	// Changing this creates a new VPC endpoint service resource.
	EnablePolicy pulumi.BoolOutput `pulumi:"enablePolicy"`
	// Specifies the name of the VPC endpoint service. The value contains a maximum of 16
	// characters, including letters, digits, underscores (_), and hyphens (-).
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the list of organizations to access the VPC endpoint service.
	// The record is in the `organizations:orgPath::org_path` format, while `organizations:orgPath::*` allows all users in
	// organizations to access the VPC endpoint service.
	OrganizationPermissions pulumi.StringArrayOutput `pulumi:"organizationPermissions"`
	// Specifies the list of accounts to access the VPC endpoint service.
	// The record is in the `iam:domain::domain_id` format, while `*` allows all users to access the VPC endpoint service.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// + If the `serverType` is **VM**, the value is the NIC ID of the ECS where the VPC endpoint service is deployed.
	// + If the `serverType` is **LB**, the value is the ID of the port bound to the private IP address of the load
	//   balancer.
	PortId pulumi.StringOutput `pulumi:"portId"`
	// Specifies the port mappings opened to the VPC endpoint service. Structure is
	// documented below.
	PortMappings ServicePortMappingArrayOutput `pulumi:"portMappings"`
	// The region in which to create the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new VPC endpoint service resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the backend resource type. The valid values are as follows:
	// + **VM**: Indicates the cloud server, which can be used as a server.
	// + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services
	//   that require high reliability and disaster recovery.
	//
	// Changing this creates a new VPC endpoint service.
	ServerType pulumi.StringOutput `pulumi:"serverType"`
	// The full name of the VPC endpoint service in the format: *region.name.id* or *region.id*.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The type of the VPC endpoint service.
	ServiceType pulumi.StringPtrOutput `pulumi:"serviceType"`
	// The connection status of the VPC endpoint.
	Status pulumi.StringOutput `pulumi:"status"`
	// The key/value pairs to associate with the VPC endpoint service.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the ID of the VPC to which the backend resource of the VPC endpoint
	// service belongs. Changing this creates a new VPC endpoint service.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortId == nil {
		return nil, errors.New("invalid value for required argument 'PortId'")
	}
	if args.PortMappings == nil {
		return nil, errors.New("invalid value for required argument 'PortMappings'")
	}
	if args.ServerType == nil {
		return nil, errors.New("invalid value for required argument 'ServerType'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("sbercloud:Vpcep/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("sbercloud:Vpcep/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// Specifies whether connection approval is required. The default value is false.
	Approval *bool `pulumi:"approval"`
	// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
	Connections []ServiceConnection `pulumi:"connections"`
	// Specifies the description of the VPC endpoint service.
	Description *string `pulumi:"description"`
	// Specifies whether the VPC endpoint policy is enabled. Defaults to **false**.
	// Changing this creates a new VPC endpoint service resource.
	EnablePolicy *bool `pulumi:"enablePolicy"`
	// Specifies the name of the VPC endpoint service. The value contains a maximum of 16
	// characters, including letters, digits, underscores (_), and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies the list of organizations to access the VPC endpoint service.
	// The record is in the `organizations:orgPath::org_path` format, while `organizations:orgPath::*` allows all users in
	// organizations to access the VPC endpoint service.
	OrganizationPermissions []string `pulumi:"organizationPermissions"`
	// Specifies the list of accounts to access the VPC endpoint service.
	// The record is in the `iam:domain::domain_id` format, while `*` allows all users to access the VPC endpoint service.
	Permissions []string `pulumi:"permissions"`
	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// + If the `serverType` is **VM**, the value is the NIC ID of the ECS where the VPC endpoint service is deployed.
	// + If the `serverType` is **LB**, the value is the ID of the port bound to the private IP address of the load
	//   balancer.
	PortId *string `pulumi:"portId"`
	// Specifies the port mappings opened to the VPC endpoint service. Structure is
	// documented below.
	PortMappings []ServicePortMapping `pulumi:"portMappings"`
	// The region in which to create the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new VPC endpoint service resource.
	Region *string `pulumi:"region"`
	// Specifies the backend resource type. The valid values are as follows:
	// + **VM**: Indicates the cloud server, which can be used as a server.
	// + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services
	//   that require high reliability and disaster recovery.
	//
	// Changing this creates a new VPC endpoint service.
	ServerType *string `pulumi:"serverType"`
	// The full name of the VPC endpoint service in the format: *region.name.id* or *region.id*.
	ServiceName *string `pulumi:"serviceName"`
	// The type of the VPC endpoint service.
	ServiceType *string `pulumi:"serviceType"`
	// The connection status of the VPC endpoint.
	Status *string `pulumi:"status"`
	// The key/value pairs to associate with the VPC endpoint service.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the ID of the VPC to which the backend resource of the VPC endpoint
	// service belongs. Changing this creates a new VPC endpoint service.
	VpcId *string `pulumi:"vpcId"`
}

type ServiceState struct {
	// Specifies whether connection approval is required. The default value is false.
	Approval pulumi.BoolPtrInput
	// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
	Connections ServiceConnectionArrayInput
	// Specifies the description of the VPC endpoint service.
	Description pulumi.StringPtrInput
	// Specifies whether the VPC endpoint policy is enabled. Defaults to **false**.
	// Changing this creates a new VPC endpoint service resource.
	EnablePolicy pulumi.BoolPtrInput
	// Specifies the name of the VPC endpoint service. The value contains a maximum of 16
	// characters, including letters, digits, underscores (_), and hyphens (-).
	Name pulumi.StringPtrInput
	// Specifies the list of organizations to access the VPC endpoint service.
	// The record is in the `organizations:orgPath::org_path` format, while `organizations:orgPath::*` allows all users in
	// organizations to access the VPC endpoint service.
	OrganizationPermissions pulumi.StringArrayInput
	// Specifies the list of accounts to access the VPC endpoint service.
	// The record is in the `iam:domain::domain_id` format, while `*` allows all users to access the VPC endpoint service.
	Permissions pulumi.StringArrayInput
	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// + If the `serverType` is **VM**, the value is the NIC ID of the ECS where the VPC endpoint service is deployed.
	// + If the `serverType` is **LB**, the value is the ID of the port bound to the private IP address of the load
	//   balancer.
	PortId pulumi.StringPtrInput
	// Specifies the port mappings opened to the VPC endpoint service. Structure is
	// documented below.
	PortMappings ServicePortMappingArrayInput
	// The region in which to create the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new VPC endpoint service resource.
	Region pulumi.StringPtrInput
	// Specifies the backend resource type. The valid values are as follows:
	// + **VM**: Indicates the cloud server, which can be used as a server.
	// + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services
	//   that require high reliability and disaster recovery.
	//
	// Changing this creates a new VPC endpoint service.
	ServerType pulumi.StringPtrInput
	// The full name of the VPC endpoint service in the format: *region.name.id* or *region.id*.
	ServiceName pulumi.StringPtrInput
	// The type of the VPC endpoint service.
	ServiceType pulumi.StringPtrInput
	// The connection status of the VPC endpoint.
	Status pulumi.StringPtrInput
	// The key/value pairs to associate with the VPC endpoint service.
	Tags pulumi.StringMapInput
	// Specifies the ID of the VPC to which the backend resource of the VPC endpoint
	// service belongs. Changing this creates a new VPC endpoint service.
	VpcId pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// Specifies whether connection approval is required. The default value is false.
	Approval *bool `pulumi:"approval"`
	// Specifies the description of the VPC endpoint service.
	Description *string `pulumi:"description"`
	// Specifies whether the VPC endpoint policy is enabled. Defaults to **false**.
	// Changing this creates a new VPC endpoint service resource.
	EnablePolicy *bool `pulumi:"enablePolicy"`
	// Specifies the name of the VPC endpoint service. The value contains a maximum of 16
	// characters, including letters, digits, underscores (_), and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies the list of organizations to access the VPC endpoint service.
	// The record is in the `organizations:orgPath::org_path` format, while `organizations:orgPath::*` allows all users in
	// organizations to access the VPC endpoint service.
	OrganizationPermissions []string `pulumi:"organizationPermissions"`
	// Specifies the list of accounts to access the VPC endpoint service.
	// The record is in the `iam:domain::domain_id` format, while `*` allows all users to access the VPC endpoint service.
	Permissions []string `pulumi:"permissions"`
	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// + If the `serverType` is **VM**, the value is the NIC ID of the ECS where the VPC endpoint service is deployed.
	// + If the `serverType` is **LB**, the value is the ID of the port bound to the private IP address of the load
	//   balancer.
	PortId string `pulumi:"portId"`
	// Specifies the port mappings opened to the VPC endpoint service. Structure is
	// documented below.
	PortMappings []ServicePortMapping `pulumi:"portMappings"`
	// The region in which to create the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new VPC endpoint service resource.
	Region *string `pulumi:"region"`
	// Specifies the backend resource type. The valid values are as follows:
	// + **VM**: Indicates the cloud server, which can be used as a server.
	// + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services
	//   that require high reliability and disaster recovery.
	//
	// Changing this creates a new VPC endpoint service.
	ServerType string `pulumi:"serverType"`
	// The type of the VPC endpoint service.
	ServiceType *string `pulumi:"serviceType"`
	// The key/value pairs to associate with the VPC endpoint service.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the ID of the VPC to which the backend resource of the VPC endpoint
	// service belongs. Changing this creates a new VPC endpoint service.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// Specifies whether connection approval is required. The default value is false.
	Approval pulumi.BoolPtrInput
	// Specifies the description of the VPC endpoint service.
	Description pulumi.StringPtrInput
	// Specifies whether the VPC endpoint policy is enabled. Defaults to **false**.
	// Changing this creates a new VPC endpoint service resource.
	EnablePolicy pulumi.BoolPtrInput
	// Specifies the name of the VPC endpoint service. The value contains a maximum of 16
	// characters, including letters, digits, underscores (_), and hyphens (-).
	Name pulumi.StringPtrInput
	// Specifies the list of organizations to access the VPC endpoint service.
	// The record is in the `organizations:orgPath::org_path` format, while `organizations:orgPath::*` allows all users in
	// organizations to access the VPC endpoint service.
	OrganizationPermissions pulumi.StringArrayInput
	// Specifies the list of accounts to access the VPC endpoint service.
	// The record is in the `iam:domain::domain_id` format, while `*` allows all users to access the VPC endpoint service.
	Permissions pulumi.StringArrayInput
	// Specifies the ID for identifying the backend resource of the VPC endpoint service.
	// + If the `serverType` is **VM**, the value is the NIC ID of the ECS where the VPC endpoint service is deployed.
	// + If the `serverType` is **LB**, the value is the ID of the port bound to the private IP address of the load
	//   balancer.
	PortId pulumi.StringInput
	// Specifies the port mappings opened to the VPC endpoint service. Structure is
	// documented below.
	PortMappings ServicePortMappingArrayInput
	// The region in which to create the VPC endpoint service. If omitted, the
	// provider-level region will be used. Changing this creates a new VPC endpoint service resource.
	Region pulumi.StringPtrInput
	// Specifies the backend resource type. The valid values are as follows:
	// + **VM**: Indicates the cloud server, which can be used as a server.
	// + **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services
	//   that require high reliability and disaster recovery.
	//
	// Changing this creates a new VPC endpoint service.
	ServerType pulumi.StringInput
	// The type of the VPC endpoint service.
	ServiceType pulumi.StringPtrInput
	// The key/value pairs to associate with the VPC endpoint service.
	Tags pulumi.StringMapInput
	// Specifies the ID of the VPC to which the backend resource of the VPC endpoint
	// service belongs. Changing this creates a new VPC endpoint service.
	VpcId pulumi.StringInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// Specifies whether connection approval is required. The default value is false.
func (o ServiceOutput) Approval() pulumi.BoolOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolOutput { return v.Approval }).(pulumi.BoolOutput)
}

// An array of VPC endpoints connect to the VPC endpoint service. Structure is documented below.
func (o ServiceOutput) Connections() ServiceConnectionArrayOutput {
	return o.ApplyT(func(v *Service) ServiceConnectionArrayOutput { return v.Connections }).(ServiceConnectionArrayOutput)
}

// Specifies the description of the VPC endpoint service.
func (o ServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Specifies whether the VPC endpoint policy is enabled. Defaults to **false**.
// Changing this creates a new VPC endpoint service resource.
func (o ServiceOutput) EnablePolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolOutput { return v.EnablePolicy }).(pulumi.BoolOutput)
}

// Specifies the name of the VPC endpoint service. The value contains a maximum of 16
// characters, including letters, digits, underscores (_), and hyphens (-).
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the list of organizations to access the VPC endpoint service.
// The record is in the `organizations:orgPath::org_path` format, while `organizations:orgPath::*` allows all users in
// organizations to access the VPC endpoint service.
func (o ServiceOutput) OrganizationPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.OrganizationPermissions }).(pulumi.StringArrayOutput)
}

// Specifies the list of accounts to access the VPC endpoint service.
// The record is in the `iam:domain::domain_id` format, while `*` allows all users to access the VPC endpoint service.
func (o ServiceOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// Specifies the ID for identifying the backend resource of the VPC endpoint service.
//   - If the `serverType` is **VM**, the value is the NIC ID of the ECS where the VPC endpoint service is deployed.
//   - If the `serverType` is **LB**, the value is the ID of the port bound to the private IP address of the load
//     balancer.
func (o ServiceOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// Specifies the port mappings opened to the VPC endpoint service. Structure is
// documented below.
func (o ServiceOutput) PortMappings() ServicePortMappingArrayOutput {
	return o.ApplyT(func(v *Service) ServicePortMappingArrayOutput { return v.PortMappings }).(ServicePortMappingArrayOutput)
}

// The region in which to create the VPC endpoint service. If omitted, the
// provider-level region will be used. Changing this creates a new VPC endpoint service resource.
func (o ServiceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the backend resource type. The valid values are as follows:
//   - **VM**: Indicates the cloud server, which can be used as a server.
//   - **LB**: Indicates the shared load balancer, which is applicable to services with high access traffic and services
//     that require high reliability and disaster recovery.
//
// Changing this creates a new VPC endpoint service.
func (o ServiceOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServerType }).(pulumi.StringOutput)
}

// The full name of the VPC endpoint service in the format: *region.name.id* or *region.id*.
func (o ServiceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The type of the VPC endpoint service.
func (o ServiceOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.ServiceType }).(pulumi.StringPtrOutput)
}

// The connection status of the VPC endpoint.
func (o ServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the VPC endpoint service.
func (o ServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the ID of the VPC to which the backend resource of the VPC endpoint
// service belongs. Changing this creates a new VPC endpoint service.
func (o ServiceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}

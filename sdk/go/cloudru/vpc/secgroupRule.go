// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SecgroupRule struct {
	pulumi.CustomResourceState

	Action               pulumi.StringOutput    `pulumi:"action"`
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	Direction            pulumi.StringOutput    `pulumi:"direction"`
	Ethertype            pulumi.StringOutput    `pulumi:"ethertype"`
	PortRangeMax         pulumi.IntOutput       `pulumi:"portRangeMax"`
	PortRangeMin         pulumi.IntOutput       `pulumi:"portRangeMin"`
	Ports                pulumi.StringOutput    `pulumi:"ports"`
	Priority             pulumi.IntOutput       `pulumi:"priority"`
	Protocol             pulumi.StringOutput    `pulumi:"protocol"`
	Region               pulumi.StringOutput    `pulumi:"region"`
	RemoteAddressGroupId pulumi.StringOutput    `pulumi:"remoteAddressGroupId"`
	RemoteGroupId        pulumi.StringOutput    `pulumi:"remoteGroupId"`
	RemoteIpPrefix       pulumi.StringOutput    `pulumi:"remoteIpPrefix"`
	SecurityGroupId      pulumi.StringOutput    `pulumi:"securityGroupId"`
}

// NewSecgroupRule registers a new resource with the given unique name, arguments, and options.
func NewSecgroupRule(ctx *pulumi.Context,
	name string, args *SecgroupRuleArgs, opts ...pulumi.ResourceOption) (*SecgroupRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.Ethertype == nil {
		return nil, errors.New("invalid value for required argument 'Ethertype'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecgroupRule
	err := ctx.RegisterResource("sbercloud:Vpc/secgroupRule:SecgroupRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecgroupRule gets an existing SecgroupRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecgroupRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecgroupRuleState, opts ...pulumi.ResourceOption) (*SecgroupRule, error) {
	var resource SecgroupRule
	err := ctx.ReadResource("sbercloud:Vpc/secgroupRule:SecgroupRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecgroupRule resources.
type secgroupRuleState struct {
	Action               *string `pulumi:"action"`
	Description          *string `pulumi:"description"`
	Direction            *string `pulumi:"direction"`
	Ethertype            *string `pulumi:"ethertype"`
	PortRangeMax         *int    `pulumi:"portRangeMax"`
	PortRangeMin         *int    `pulumi:"portRangeMin"`
	Ports                *string `pulumi:"ports"`
	Priority             *int    `pulumi:"priority"`
	Protocol             *string `pulumi:"protocol"`
	Region               *string `pulumi:"region"`
	RemoteAddressGroupId *string `pulumi:"remoteAddressGroupId"`
	RemoteGroupId        *string `pulumi:"remoteGroupId"`
	RemoteIpPrefix       *string `pulumi:"remoteIpPrefix"`
	SecurityGroupId      *string `pulumi:"securityGroupId"`
}

type SecgroupRuleState struct {
	Action               pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	Direction            pulumi.StringPtrInput
	Ethertype            pulumi.StringPtrInput
	PortRangeMax         pulumi.IntPtrInput
	PortRangeMin         pulumi.IntPtrInput
	Ports                pulumi.StringPtrInput
	Priority             pulumi.IntPtrInput
	Protocol             pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	RemoteAddressGroupId pulumi.StringPtrInput
	RemoteGroupId        pulumi.StringPtrInput
	RemoteIpPrefix       pulumi.StringPtrInput
	SecurityGroupId      pulumi.StringPtrInput
}

func (SecgroupRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*secgroupRuleState)(nil)).Elem()
}

type secgroupRuleArgs struct {
	Action               *string `pulumi:"action"`
	Description          *string `pulumi:"description"`
	Direction            string  `pulumi:"direction"`
	Ethertype            string  `pulumi:"ethertype"`
	PortRangeMax         *int    `pulumi:"portRangeMax"`
	PortRangeMin         *int    `pulumi:"portRangeMin"`
	Ports                *string `pulumi:"ports"`
	Priority             *int    `pulumi:"priority"`
	Protocol             *string `pulumi:"protocol"`
	Region               *string `pulumi:"region"`
	RemoteAddressGroupId *string `pulumi:"remoteAddressGroupId"`
	RemoteGroupId        *string `pulumi:"remoteGroupId"`
	RemoteIpPrefix       *string `pulumi:"remoteIpPrefix"`
	SecurityGroupId      string  `pulumi:"securityGroupId"`
}

// The set of arguments for constructing a SecgroupRule resource.
type SecgroupRuleArgs struct {
	Action               pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	Direction            pulumi.StringInput
	Ethertype            pulumi.StringInput
	PortRangeMax         pulumi.IntPtrInput
	PortRangeMin         pulumi.IntPtrInput
	Ports                pulumi.StringPtrInput
	Priority             pulumi.IntPtrInput
	Protocol             pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	RemoteAddressGroupId pulumi.StringPtrInput
	RemoteGroupId        pulumi.StringPtrInput
	RemoteIpPrefix       pulumi.StringPtrInput
	SecurityGroupId      pulumi.StringInput
}

func (SecgroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secgroupRuleArgs)(nil)).Elem()
}

type SecgroupRuleInput interface {
	pulumi.Input

	ToSecgroupRuleOutput() SecgroupRuleOutput
	ToSecgroupRuleOutputWithContext(ctx context.Context) SecgroupRuleOutput
}

func (*SecgroupRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SecgroupRule)(nil)).Elem()
}

func (i *SecgroupRule) ToSecgroupRuleOutput() SecgroupRuleOutput {
	return i.ToSecgroupRuleOutputWithContext(context.Background())
}

func (i *SecgroupRule) ToSecgroupRuleOutputWithContext(ctx context.Context) SecgroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecgroupRuleOutput)
}

// SecgroupRuleArrayInput is an input type that accepts SecgroupRuleArray and SecgroupRuleArrayOutput values.
// You can construct a concrete instance of `SecgroupRuleArrayInput` via:
//
//	SecgroupRuleArray{ SecgroupRuleArgs{...} }
type SecgroupRuleArrayInput interface {
	pulumi.Input

	ToSecgroupRuleArrayOutput() SecgroupRuleArrayOutput
	ToSecgroupRuleArrayOutputWithContext(context.Context) SecgroupRuleArrayOutput
}

type SecgroupRuleArray []SecgroupRuleInput

func (SecgroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecgroupRule)(nil)).Elem()
}

func (i SecgroupRuleArray) ToSecgroupRuleArrayOutput() SecgroupRuleArrayOutput {
	return i.ToSecgroupRuleArrayOutputWithContext(context.Background())
}

func (i SecgroupRuleArray) ToSecgroupRuleArrayOutputWithContext(ctx context.Context) SecgroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecgroupRuleArrayOutput)
}

// SecgroupRuleMapInput is an input type that accepts SecgroupRuleMap and SecgroupRuleMapOutput values.
// You can construct a concrete instance of `SecgroupRuleMapInput` via:
//
//	SecgroupRuleMap{ "key": SecgroupRuleArgs{...} }
type SecgroupRuleMapInput interface {
	pulumi.Input

	ToSecgroupRuleMapOutput() SecgroupRuleMapOutput
	ToSecgroupRuleMapOutputWithContext(context.Context) SecgroupRuleMapOutput
}

type SecgroupRuleMap map[string]SecgroupRuleInput

func (SecgroupRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecgroupRule)(nil)).Elem()
}

func (i SecgroupRuleMap) ToSecgroupRuleMapOutput() SecgroupRuleMapOutput {
	return i.ToSecgroupRuleMapOutputWithContext(context.Background())
}

func (i SecgroupRuleMap) ToSecgroupRuleMapOutputWithContext(ctx context.Context) SecgroupRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecgroupRuleMapOutput)
}

type SecgroupRuleOutput struct{ *pulumi.OutputState }

func (SecgroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecgroupRule)(nil)).Elem()
}

func (o SecgroupRuleOutput) ToSecgroupRuleOutput() SecgroupRuleOutput {
	return o
}

func (o SecgroupRuleOutput) ToSecgroupRuleOutputWithContext(ctx context.Context) SecgroupRuleOutput {
	return o
}

func (o SecgroupRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SecgroupRuleOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) Ethertype() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.Ethertype }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) PortRangeMax() pulumi.IntOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.IntOutput { return v.PortRangeMax }).(pulumi.IntOutput)
}

func (o SecgroupRuleOutput) PortRangeMin() pulumi.IntOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.IntOutput { return v.PortRangeMin }).(pulumi.IntOutput)
}

func (o SecgroupRuleOutput) Ports() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.Ports }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

func (o SecgroupRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) RemoteAddressGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.RemoteAddressGroupId }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) RemoteGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.RemoteGroupId }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) RemoteIpPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.RemoteIpPrefix }).(pulumi.StringOutput)
}

func (o SecgroupRuleOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecgroupRule) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

type SecgroupRuleArrayOutput struct{ *pulumi.OutputState }

func (SecgroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecgroupRule)(nil)).Elem()
}

func (o SecgroupRuleArrayOutput) ToSecgroupRuleArrayOutput() SecgroupRuleArrayOutput {
	return o
}

func (o SecgroupRuleArrayOutput) ToSecgroupRuleArrayOutputWithContext(ctx context.Context) SecgroupRuleArrayOutput {
	return o
}

func (o SecgroupRuleArrayOutput) Index(i pulumi.IntInput) SecgroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecgroupRule {
		return vs[0].([]*SecgroupRule)[vs[1].(int)]
	}).(SecgroupRuleOutput)
}

type SecgroupRuleMapOutput struct{ *pulumi.OutputState }

func (SecgroupRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecgroupRule)(nil)).Elem()
}

func (o SecgroupRuleMapOutput) ToSecgroupRuleMapOutput() SecgroupRuleMapOutput {
	return o
}

func (o SecgroupRuleMapOutput) ToSecgroupRuleMapOutputWithContext(ctx context.Context) SecgroupRuleMapOutput {
	return o
}

func (o SecgroupRuleMapOutput) MapIndex(k pulumi.StringInput) SecgroupRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecgroupRule {
		return vs[0].(map[string]*SecgroupRule)[vs[1].(string)]
	}).(SecgroupRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecgroupRuleInput)(nil)).Elem(), &SecgroupRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecgroupRuleArrayInput)(nil)).Elem(), SecgroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecgroupRuleMapInput)(nil)).Elem(), SecgroupRuleMap{})
	pulumi.RegisterOutputType(SecgroupRuleOutput{})
	pulumi.RegisterOutputType(SecgroupRuleArrayOutput{})
	pulumi.RegisterOutputType(SecgroupRuleMapOutput{})
}

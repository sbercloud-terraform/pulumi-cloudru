// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Provider extends pulumi.CustomResource {
    /**
     * Get an existing Provider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderState, opts?: pulumi.CustomResourceOptions): Provider {
        return new Provider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Iam/provider:Provider';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }

    declare public readonly accessConfig: pulumi.Output<outputs.Iam.ProviderAccessConfig | undefined>;
    declare public /*out*/ readonly conversionRules: pulumi.Output<outputs.Iam.ProviderConversionRule[]>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly loginLink: pulumi.Output<string>;
    declare public readonly metadata: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly protocol: pulumi.Output<string>;
    declare public readonly ssoType: pulumi.Output<string>;
    declare public readonly status: pulumi.Output<boolean | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderArgs | ProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderState | undefined;
            resourceInputs["accessConfig"] = state?.accessConfig;
            resourceInputs["conversionRules"] = state?.conversionRules;
            resourceInputs["description"] = state?.description;
            resourceInputs["loginLink"] = state?.loginLink;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["ssoType"] = state?.ssoType;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as ProviderArgs | undefined;
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["accessConfig"] = args?.accessConfig;
            resourceInputs["description"] = args?.description;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["ssoType"] = args?.ssoType;
            resourceInputs["status"] = args?.status;
            resourceInputs["conversionRules"] = undefined /*out*/;
            resourceInputs["loginLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Provider resources.
 */
export interface ProviderState {
    accessConfig?: pulumi.Input<inputs.Iam.ProviderAccessConfig>;
    conversionRules?: pulumi.Input<pulumi.Input<inputs.Iam.ProviderConversionRule>[]>;
    description?: pulumi.Input<string>;
    loginLink?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    ssoType?: pulumi.Input<string>;
    status?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    accessConfig?: pulumi.Input<inputs.Iam.ProviderAccessConfig>;
    description?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    ssoType?: pulumi.Input<string>;
    status?: pulumi.Input<boolean>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use this data source to query the available instances within sbercloud DMS service.
//
// ## Example Usage
//
// ### Query all instances with the keyword in the name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/dms"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			keyword := cfg.RequireObject("keyword")
//			_, err := dms.GetInstances(ctx, &dms.GetInstancesArgs{
//				Name:       pulumi.StringRef(keyword),
//				FuzzyMatch: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Query the instance with the specified name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/dms"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceName := cfg.RequireObject("instanceName")
//			_, err := dms.GetInstances(ctx, &dms.GetInstancesArgs{
//				Name: pulumi.StringRef(instanceName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetInstances(ctx *pulumi.Context, args *GetInstancesArgs, opts ...pulumi.InvokeOption) (*GetInstancesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInstancesResult
	err := ctx.Invoke("sbercloud:Dms/getInstances:getInstances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstances.
type GetInstancesArgs struct {
	// Specifies the enterprise project ID to which all instances of the list
	// belong.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies whether to match the instance name fuzzily, the default is a exact
	// match (`flase`).
	FuzzyMatch *bool `pulumi:"fuzzyMatch"`
	// Specifies whether the query results contain instances that failed to create.
	IncludeFailure *bool `pulumi:"includeFailure"`
	// Specifies the kafka instance ID to match exactly.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the kafka instance name for data-source queries.
	Name *string `pulumi:"name"`
	// The region in which to query the kafka instance list.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the kafka instance status for data-source queries.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getInstances.
type GetInstancesResult struct {
	// The enterprise project ID to which the instance belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	FuzzyMatch          *bool   `pulumi:"fuzzyMatch"`
	// The provider-assigned unique ID for this managed resource.
	Id             string  `pulumi:"id"`
	IncludeFailure *bool   `pulumi:"includeFailure"`
	InstanceId     *string `pulumi:"instanceId"`
	// The result of the query's list of kafka instances. The structure is documented below.
	Instances []GetInstancesInstance `pulumi:"instances"`
	// The instance name.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// The instance status.
	Status *string `pulumi:"status"`
}

func GetInstancesOutput(ctx *pulumi.Context, args GetInstancesOutputArgs, opts ...pulumi.InvokeOption) GetInstancesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetInstancesResultOutput, error) {
			args := v.(GetInstancesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Dms/getInstances:getInstances", args, GetInstancesResultOutput{}, options).(GetInstancesResultOutput), nil
		}).(GetInstancesResultOutput)
}

// A collection of arguments for invoking getInstances.
type GetInstancesOutputArgs struct {
	// Specifies the enterprise project ID to which all instances of the list
	// belong.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies whether to match the instance name fuzzily, the default is a exact
	// match (`flase`).
	FuzzyMatch pulumi.BoolPtrInput `pulumi:"fuzzyMatch"`
	// Specifies whether the query results contain instances that failed to create.
	IncludeFailure pulumi.BoolPtrInput `pulumi:"includeFailure"`
	// Specifies the kafka instance ID to match exactly.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// Specifies the kafka instance name for data-source queries.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The region in which to query the kafka instance list.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the kafka instance status for data-source queries.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetInstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesArgs)(nil)).Elem()
}

// A collection of values returned by getInstances.
type GetInstancesResultOutput struct{ *pulumi.OutputState }

func (GetInstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesResult)(nil)).Elem()
}

func (o GetInstancesResultOutput) ToGetInstancesResultOutput() GetInstancesResultOutput {
	return o
}

func (o GetInstancesResultOutput) ToGetInstancesResultOutputWithContext(ctx context.Context) GetInstancesResultOutput {
	return o
}

// The enterprise project ID to which the instance belongs.
func (o GetInstancesResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

func (o GetInstancesResultOutput) FuzzyMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *bool { return v.FuzzyMatch }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetInstancesResultOutput) IncludeFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *bool { return v.IncludeFailure }).(pulumi.BoolPtrOutput)
}

func (o GetInstancesResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The result of the query's list of kafka instances. The structure is documented below.
func (o GetInstancesResultOutput) Instances() GetInstancesInstanceArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []GetInstancesInstance { return v.Instances }).(GetInstancesInstanceArrayOutput)
}

// The instance name.
func (o GetInstancesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetInstancesResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The instance status.
func (o GetInstancesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstancesResultOutput{})
}

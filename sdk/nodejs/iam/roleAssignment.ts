// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Role assignment within group on SberCloud IAM Service.
 *
 * Note: You _must_ have admin privileges in your SberCloud cloud to use this resource.
 *
 * ## Example Usage
 *
 * ### Assign Role On Project Level
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const role1 = sbercloud.Iam.getRole({
 *     name: "rds_adm",
 * });
 * const group1 = new sbercloud.iam.Group("group_1", {name: "group_1"});
 * const roleAssignment1 = new sbercloud.iam.RoleAssignment("role_assignment_1", {
 *     roleId: role1.then(role1 => role1.id),
 *     groupId: group1.id,
 *     projectId: projectId,
 * });
 * ```
 *
 * ### Assign Role On Domain Level
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const role1 = sbercloud.Iam.getRole({
 *     name: "secu_admin",
 * });
 * const group1 = new sbercloud.iam.Group("group_1", {name: "group_1"});
 * const roleAssignment1 = new sbercloud.iam.RoleAssignment("role_assignment_1", {
 *     roleId: role1.then(role1 => role1.id),
 *     groupId: group1.id,
 *     domainId: domainId,
 * });
 * ```
 */
export class RoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing RoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleAssignmentState, opts?: pulumi.CustomResourceOptions): RoleAssignment {
        return new RoleAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Iam/roleAssignment:RoleAssignment';

    /**
     * Returns true if the given object is an instance of RoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleAssignment.__pulumiType;
    }

    /**
     * Specifies the domain to assign the role
     * in.
     */
    declare public readonly domainId: pulumi.Output<string | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string | undefined>;
    /**
     * Specifies the group to assign the role to.
     */
    declare public readonly groupId: pulumi.Output<string>;
    /**
     * Specifies the project to assign the role
     * in.
     */
    declare public readonly projectId: pulumi.Output<string | undefined>;
    /**
     * Specifies the role to assign.
     */
    declare public readonly roleId: pulumi.Output<string>;

    /**
     * Create a RoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleAssignmentArgs | RoleAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleAssignmentState | undefined;
            resourceInputs["domainId"] = state?.domainId;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["roleId"] = state?.roleId;
        } else {
            const args = argsOrState as RoleAssignmentArgs | undefined;
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.roleId === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            resourceInputs["domainId"] = args?.domainId;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["roleId"] = args?.roleId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoleAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RoleAssignment resources.
 */
export interface RoleAssignmentState {
    /**
     * Specifies the domain to assign the role
     * in.
     */
    domainId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the group to assign the role to.
     */
    groupId?: pulumi.Input<string>;
    /**
     * Specifies the project to assign the role
     * in.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Specifies the role to assign.
     */
    roleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoleAssignment resource.
 */
export interface RoleAssignmentArgs {
    /**
     * Specifies the domain to assign the role
     * in.
     */
    domainId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the group to assign the role to.
     */
    groupId: pulumi.Input<string>;
    /**
     * Specifies the project to assign the role
     * in.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Specifies the role to assign.
     */
    roleId: pulumi.Input<string>;
}

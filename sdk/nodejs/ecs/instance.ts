// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Ecs/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    declare public /*out*/ readonly accessIpV4: pulumi.Output<string>;
    declare public /*out*/ readonly accessIpV6: pulumi.Output<string>;
    declare public readonly adminPass: pulumi.Output<string | undefined>;
    declare public readonly agencyName: pulumi.Output<string>;
    declare public readonly agentList: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly autoTerminateTime: pulumi.Output<string | undefined>;
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public readonly bandwidth: pulumi.Output<outputs.Ecs.InstanceBandwidth | undefined>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly dataDisks: pulumi.Output<outputs.Ecs.InstanceDataDisk[] | undefined>;
    declare public readonly deleteDisksOnTermination: pulumi.Output<boolean | undefined>;
    declare public readonly deleteEipOnTermination: pulumi.Output<boolean | undefined>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly eipId: pulumi.Output<string | undefined>;
    declare public readonly eipType: pulumi.Output<string | undefined>;
    declare public readonly enclaveOptions: pulumi.Output<outputs.Ecs.InstanceEnclaveOptions>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly expiredTime: pulumi.Output<string>;
    /**
     * schema: Required
     */
    declare public readonly flavorId: pulumi.Output<string>;
    /**
     * schema: Computed
     */
    declare public readonly flavorName: pulumi.Output<string>;
    declare public readonly hostname: pulumi.Output<string>;
    declare public readonly imageId: pulumi.Output<string>;
    declare public readonly imageName: pulumi.Output<string>;
    declare public readonly keyPair: pulumi.Output<string | undefined>;
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networks: pulumi.Output<outputs.Ecs.InstanceNetwork[]>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly powerAction: pulumi.Output<string>;
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly publicIp: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly schedulerHints: pulumi.Output<outputs.Ecs.InstanceSchedulerHint[]>;
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    /**
     * schema: Computed
     */
    declare public readonly securityGroups: pulumi.Output<string[]>;
    declare public readonly spotDuration: pulumi.Output<number | undefined>;
    declare public readonly spotDurationCount: pulumi.Output<number>;
    declare public readonly spotMaximumPrice: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly stopBeforeDestroy: pulumi.Output<boolean | undefined>;
    declare public readonly systemDiskDssPoolId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly systemDiskId: pulumi.Output<string>;
    declare public readonly systemDiskIops: pulumi.Output<number>;
    declare public readonly systemDiskKmsKeyId: pulumi.Output<string>;
    declare public readonly systemDiskSize: pulumi.Output<number>;
    declare public readonly systemDiskThroughput: pulumi.Output<number>;
    declare public readonly systemDiskType: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public readonly userData: pulumi.Output<string | undefined>;
    declare public readonly userId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly volumeAttacheds: pulumi.Output<outputs.Ecs.InstanceVolumeAttached[]>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["accessIpV4"] = state?.accessIpV4;
            resourceInputs["accessIpV6"] = state?.accessIpV6;
            resourceInputs["adminPass"] = state?.adminPass;
            resourceInputs["agencyName"] = state?.agencyName;
            resourceInputs["agentList"] = state?.agentList;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["autoTerminateTime"] = state?.autoTerminateTime;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["bandwidth"] = state?.bandwidth;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["dataDisks"] = state?.dataDisks;
            resourceInputs["deleteDisksOnTermination"] = state?.deleteDisksOnTermination;
            resourceInputs["deleteEipOnTermination"] = state?.deleteEipOnTermination;
            resourceInputs["description"] = state?.description;
            resourceInputs["eipId"] = state?.eipId;
            resourceInputs["eipType"] = state?.eipType;
            resourceInputs["enclaveOptions"] = state?.enclaveOptions;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["expiredTime"] = state?.expiredTime;
            resourceInputs["flavorId"] = state?.flavorId;
            resourceInputs["flavorName"] = state?.flavorName;
            resourceInputs["hostname"] = state?.hostname;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["imageName"] = state?.imageName;
            resourceInputs["keyPair"] = state?.keyPair;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["networks"] = state?.networks;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["powerAction"] = state?.powerAction;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["region"] = state?.region;
            resourceInputs["schedulerHints"] = state?.schedulerHints;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["securityGroups"] = state?.securityGroups;
            resourceInputs["spotDuration"] = state?.spotDuration;
            resourceInputs["spotDurationCount"] = state?.spotDurationCount;
            resourceInputs["spotMaximumPrice"] = state?.spotMaximumPrice;
            resourceInputs["status"] = state?.status;
            resourceInputs["stopBeforeDestroy"] = state?.stopBeforeDestroy;
            resourceInputs["systemDiskDssPoolId"] = state?.systemDiskDssPoolId;
            resourceInputs["systemDiskId"] = state?.systemDiskId;
            resourceInputs["systemDiskIops"] = state?.systemDiskIops;
            resourceInputs["systemDiskKmsKeyId"] = state?.systemDiskKmsKeyId;
            resourceInputs["systemDiskSize"] = state?.systemDiskSize;
            resourceInputs["systemDiskThroughput"] = state?.systemDiskThroughput;
            resourceInputs["systemDiskType"] = state?.systemDiskType;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["userData"] = state?.userData;
            resourceInputs["userId"] = state?.userId;
            resourceInputs["volumeAttacheds"] = state?.volumeAttacheds;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if (args?.networks === undefined && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            resourceInputs["adminPass"] = args?.adminPass ? pulumi.secret(args.adminPass) : undefined;
            resourceInputs["agencyName"] = args?.agencyName;
            resourceInputs["agentList"] = args?.agentList;
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["autoTerminateTime"] = args?.autoTerminateTime;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["bandwidth"] = args?.bandwidth;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["dataDisks"] = args?.dataDisks;
            resourceInputs["deleteDisksOnTermination"] = args?.deleteDisksOnTermination;
            resourceInputs["deleteEipOnTermination"] = args?.deleteEipOnTermination;
            resourceInputs["description"] = args?.description;
            resourceInputs["eipId"] = args?.eipId;
            resourceInputs["eipType"] = args?.eipType;
            resourceInputs["enclaveOptions"] = args?.enclaveOptions;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["flavorId"] = args?.flavorId;
            resourceInputs["flavorName"] = args?.flavorName;
            resourceInputs["hostname"] = args?.hostname;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["imageName"] = args?.imageName;
            resourceInputs["keyPair"] = args?.keyPair;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["networks"] = args?.networks;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["powerAction"] = args?.powerAction;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["region"] = args?.region;
            resourceInputs["schedulerHints"] = args?.schedulerHints;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["securityGroups"] = args?.securityGroups;
            resourceInputs["spotDuration"] = args?.spotDuration;
            resourceInputs["spotDurationCount"] = args?.spotDurationCount;
            resourceInputs["spotMaximumPrice"] = args?.spotMaximumPrice;
            resourceInputs["stopBeforeDestroy"] = args?.stopBeforeDestroy;
            resourceInputs["systemDiskDssPoolId"] = args?.systemDiskDssPoolId;
            resourceInputs["systemDiskIops"] = args?.systemDiskIops;
            resourceInputs["systemDiskKmsKeyId"] = args?.systemDiskKmsKeyId;
            resourceInputs["systemDiskSize"] = args?.systemDiskSize;
            resourceInputs["systemDiskThroughput"] = args?.systemDiskThroughput;
            resourceInputs["systemDiskType"] = args?.systemDiskType;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userData"] = args?.userData;
            resourceInputs["userId"] = args?.userId;
            resourceInputs["accessIpV4"] = undefined /*out*/;
            resourceInputs["accessIpV6"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["expiredTime"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["systemDiskId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["volumeAttacheds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPass", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    accessIpV4?: pulumi.Input<string>;
    accessIpV6?: pulumi.Input<string>;
    adminPass?: pulumi.Input<string>;
    agencyName?: pulumi.Input<string>;
    agentList?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    autoTerminateTime?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<inputs.Ecs.InstanceBandwidth>;
    chargingMode?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceDataDisk>[]>;
    deleteDisksOnTermination?: pulumi.Input<boolean>;
    deleteEipOnTermination?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    eipId?: pulumi.Input<string>;
    eipType?: pulumi.Input<string>;
    enclaveOptions?: pulumi.Input<inputs.Ecs.InstanceEnclaveOptions>;
    enterpriseProjectId?: pulumi.Input<string>;
    expiredTime?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    flavorId?: pulumi.Input<string>;
    /**
     * schema: Computed
     */
    flavorName?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    keyPair?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networks?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceNetwork>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    powerAction?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceSchedulerHint>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Computed
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    spotDuration?: pulumi.Input<number>;
    spotDurationCount?: pulumi.Input<number>;
    spotMaximumPrice?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    stopBeforeDestroy?: pulumi.Input<boolean>;
    systemDiskDssPoolId?: pulumi.Input<string>;
    systemDiskId?: pulumi.Input<string>;
    systemDiskIops?: pulumi.Input<number>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    systemDiskSize?: pulumi.Input<number>;
    systemDiskThroughput?: pulumi.Input<number>;
    systemDiskType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatedAt?: pulumi.Input<string>;
    userData?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    volumeAttacheds?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceVolumeAttached>[]>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    adminPass?: pulumi.Input<string>;
    agencyName?: pulumi.Input<string>;
    agentList?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    autoTerminateTime?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    bandwidth?: pulumi.Input<inputs.Ecs.InstanceBandwidth>;
    chargingMode?: pulumi.Input<string>;
    dataDisks?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceDataDisk>[]>;
    deleteDisksOnTermination?: pulumi.Input<boolean>;
    deleteEipOnTermination?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    eipId?: pulumi.Input<string>;
    eipType?: pulumi.Input<string>;
    enclaveOptions?: pulumi.Input<inputs.Ecs.InstanceEnclaveOptions>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    flavorId?: pulumi.Input<string>;
    /**
     * schema: Computed
     */
    flavorName?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    keyPair?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    networks: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceNetwork>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    powerAction?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceSchedulerHint>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Computed
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    spotDuration?: pulumi.Input<number>;
    spotDurationCount?: pulumi.Input<number>;
    spotMaximumPrice?: pulumi.Input<string>;
    stopBeforeDestroy?: pulumi.Input<boolean>;
    systemDiskDssPoolId?: pulumi.Input<string>;
    systemDiskIops?: pulumi.Input<number>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    systemDiskSize?: pulumi.Input<number>;
    systemDiskThroughput?: pulumi.Input<number>;
    systemDiskType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userData?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
}

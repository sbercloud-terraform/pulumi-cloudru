// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use this data source to get available SberCloud cdm flavors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sbercloud.GetCdmFlavors(ctx, &sbercloud.GetCdmFlavorsArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCdmFlavors(ctx *pulumi.Context, args *GetCdmFlavorsArgs, opts ...pulumi.InvokeOption) (*GetCdmFlavorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCdmFlavorsResult
	err := ctx.Invoke("sbercloud:index/getCdmFlavors:getCdmFlavors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCdmFlavors.
type GetCdmFlavorsArgs struct {
	// The region in which to obtain the CDM flavors. If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getCdmFlavors.
type GetCdmFlavorsResult struct {
	// Indicates the flavors information. Structure is documented below.
	Flavors []GetCdmFlavorsFlavor `pulumi:"flavors"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The region in which to obtain the CDM flavors. If omitted, the provider-level region will be used.
	Region string `pulumi:"region"`
	// The version of the flavor.
	Version string `pulumi:"version"`
}

func GetCdmFlavorsOutput(ctx *pulumi.Context, args GetCdmFlavorsOutputArgs, opts ...pulumi.InvokeOption) GetCdmFlavorsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCdmFlavorsResultOutput, error) {
			args := v.(GetCdmFlavorsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getCdmFlavors:getCdmFlavors", args, GetCdmFlavorsResultOutput{}, options).(GetCdmFlavorsResultOutput), nil
		}).(GetCdmFlavorsResultOutput)
}

// A collection of arguments for invoking getCdmFlavors.
type GetCdmFlavorsOutputArgs struct {
	// The region in which to obtain the CDM flavors. If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetCdmFlavorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdmFlavorsArgs)(nil)).Elem()
}

// A collection of values returned by getCdmFlavors.
type GetCdmFlavorsResultOutput struct{ *pulumi.OutputState }

func (GetCdmFlavorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdmFlavorsResult)(nil)).Elem()
}

func (o GetCdmFlavorsResultOutput) ToGetCdmFlavorsResultOutput() GetCdmFlavorsResultOutput {
	return o
}

func (o GetCdmFlavorsResultOutput) ToGetCdmFlavorsResultOutputWithContext(ctx context.Context) GetCdmFlavorsResultOutput {
	return o
}

// Indicates the flavors information. Structure is documented below.
func (o GetCdmFlavorsResultOutput) Flavors() GetCdmFlavorsFlavorArrayOutput {
	return o.ApplyT(func(v GetCdmFlavorsResult) []GetCdmFlavorsFlavor { return v.Flavors }).(GetCdmFlavorsFlavorArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCdmFlavorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdmFlavorsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The region in which to obtain the CDM flavors. If omitted, the provider-level region will be used.
func (o GetCdmFlavorsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdmFlavorsResult) string { return v.Region }).(pulumi.StringOutput)
}

// The version of the flavor.
func (o GetCdmFlavorsResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdmFlavorsResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCdmFlavorsResultOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApigCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ApigCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigCertificateState, opts?: pulumi.CustomResourceOptions): ApigCertificate {
        return new ApigCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/apigCertificate:ApigCertificate';

    /**
     * Returns true if the given object is an instance of ApigCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigCertificate.__pulumiType;
    }

    /**
     * The certificate content.
     */
    declare public readonly content: pulumi.Output<string>;
    /**
     * The effective time of the certificate.
     */
    declare public /*out*/ readonly effectedAt: pulumi.Output<string>;
    /**
     * The expiration time of the certificate.
     */
    declare public /*out*/ readonly expiresAt: pulumi.Output<string>;
    /**
     * The dedicated instance ID to which the certificate belongs.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The certificate name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The private key of the certificate.
     */
    declare public readonly privateKey: pulumi.Output<string>;
    /**
     * The region where the certificate is located.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The SAN (Subject Alternative Names) of the certificate.
     */
    declare public /*out*/ readonly sans: pulumi.Output<string[]>;
    /**
     * What signature algorithm the certificate uses.
     */
    declare public /*out*/ readonly signatureAlgorithm: pulumi.Output<string>;
    /**
     * The trusted root CA certificate.
     */
    declare public readonly trustedRootCa: pulumi.Output<string | undefined>;
    /**
     * The certificate type.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a ApigCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigCertificateArgs | ApigCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigCertificateState | undefined;
            resourceInputs["content"] = state?.content;
            resourceInputs["effectedAt"] = state?.effectedAt;
            resourceInputs["expiresAt"] = state?.expiresAt;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["region"] = state?.region;
            resourceInputs["sans"] = state?.sans;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["trustedRootCa"] = state?.trustedRootCa;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as ApigCertificateArgs | undefined;
            if (args?.content === undefined && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if (args?.privateKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'privateKey'");
            }
            resourceInputs["content"] = args?.content ? pulumi.secret(args.content) : undefined;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["region"] = args?.region;
            resourceInputs["trustedRootCa"] = args?.trustedRootCa ? pulumi.secret(args.trustedRootCa) : undefined;
            resourceInputs["type"] = args?.type;
            resourceInputs["effectedAt"] = undefined /*out*/;
            resourceInputs["expiresAt"] = undefined /*out*/;
            resourceInputs["sans"] = undefined /*out*/;
            resourceInputs["signatureAlgorithm"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["content", "privateKey", "trustedRootCa"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ApigCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApigCertificate resources.
 */
export interface ApigCertificateState {
    /**
     * The certificate content.
     */
    content?: pulumi.Input<string>;
    /**
     * The effective time of the certificate.
     */
    effectedAt?: pulumi.Input<string>;
    /**
     * The expiration time of the certificate.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * The dedicated instance ID to which the certificate belongs.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The certificate name.
     */
    name?: pulumi.Input<string>;
    /**
     * The private key of the certificate.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The region where the certificate is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The SAN (Subject Alternative Names) of the certificate.
     */
    sans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * What signature algorithm the certificate uses.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The trusted root CA certificate.
     */
    trustedRootCa?: pulumi.Input<string>;
    /**
     * The certificate type.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApigCertificate resource.
 */
export interface ApigCertificateArgs {
    /**
     * The certificate content.
     */
    content: pulumi.Input<string>;
    /**
     * The dedicated instance ID to which the certificate belongs.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The certificate name.
     */
    name?: pulumi.Input<string>;
    /**
     * The private key of the certificate.
     */
    privateKey: pulumi.Input<string>;
    /**
     * The region where the certificate is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The trusted root CA certificate.
     */
    trustedRootCa?: pulumi.Input<string>;
    /**
     * The certificate type.
     */
    type?: pulumi.Input<string>;
}

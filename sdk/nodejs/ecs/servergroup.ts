// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Servergroup extends pulumi.CustomResource {
    /**
     * Get an existing Servergroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServergroupState, opts?: pulumi.CustomResourceOptions): Servergroup {
        return new Servergroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Ecs/servergroup:Servergroup';

    /**
     * Returns true if the given object is an instance of Servergroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Servergroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Servergroup.__pulumiType;
    }

    /**
     * schema: Internal
     */
    declare public /*out*/ readonly faultDomains: pulumi.Output<string[]>;
    declare public readonly members: pulumi.Output<string[]>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * schema: Required
     */
    declare public readonly policies: pulumi.Output<string[] | undefined>;
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a Servergroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServergroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServergroupArgs | ServergroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServergroupState | undefined;
            resourceInputs["faultDomains"] = state?.faultDomains;
            resourceInputs["members"] = state?.members;
            resourceInputs["name"] = state?.name;
            resourceInputs["policies"] = state?.policies;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as ServergroupArgs | undefined;
            resourceInputs["members"] = args?.members;
            resourceInputs["name"] = args?.name;
            resourceInputs["policies"] = args?.policies;
            resourceInputs["region"] = args?.region;
            resourceInputs["faultDomains"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Servergroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Servergroup resources.
 */
export interface ServergroupState {
    /**
     * schema: Internal
     */
    faultDomains?: pulumi.Input<pulumi.Input<string>[]>;
    members?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Servergroup resource.
 */
export interface ServergroupArgs {
    members?: pulumi.Input<pulumi.Input<string>[]>;
    name?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
}

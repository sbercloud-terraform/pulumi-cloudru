// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a Shared File System (SFS) resource.
 *
 * ## Example Usage
 *
 * ### basic example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const shareName = config.requireObject<any>("shareName");
 * const shareDescription = config.requireObject<any>("shareDescription");
 * const vpcId = config.requireObject<any>("vpcId");
 * const share_file = new sbercloud.sfs.FileSystem("share-file", {
 *     name: shareName,
 *     size: 100,
 *     shareProto: "NFS",
 *     accessLevel: "rw",
 *     accessTo: vpcId,
 *     description: shareDescription,
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ### sfs with data encryption
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const shareName = config.requireObject<any>("shareName");
 * const shareDescription = config.requireObject<any>("shareDescription");
 * const vpcId = config.requireObject<any>("vpcId");
 * const mykey = new sbercloud.dew.Key("mykey", {
 *     keyAlias: "kms_sfs",
 *     pendingDays: "7",
 * });
 * const share_file = new sbercloud.sfs.FileSystem("share-file", {
 *     name: shareName,
 *     size: 100,
 *     shareProto: "NFS",
 *     accessLevel: "rw",
 *     accessTo: vpcId,
 *     description: shareDescription,
 *     metadata: {
 *         "#sfs_crypt_key_id": mykey.id,
 *         "#sfs_crypt_domain_id": mykey.domainId,
 *         "#sfs_crypt_alias": mykey.keyAlias,
 *     },
 *     tags: {
 *         "function": "encryption",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * SFS can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Sfs/fileSystem:FileSystem sbercloud_sfs_file_system 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
 * ```
 *
 * Please importing them by sbercloud_sfs_access_rule.
 */
export class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileSystemState, opts?: pulumi.CustomResourceOptions): FileSystem {
        return new FileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Sfs/fileSystem:FileSystem';

    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }

    /**
     * Specifies the access level of the shared file system. Possible values are *ro* (read-only)
     * and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
     */
    declare public readonly accessLevel: pulumi.Output<string>;
    /**
     * The status of the share access rule.
     */
    declare public /*out*/ readonly accessRuleStatus: pulumi.Output<string>;
    /**
     * All access rules of the shared file system. The object includes the following:
     */
    declare public /*out*/ readonly accessRules: pulumi.Output<outputs.Sfs.FileSystemAccessRule[]>;
    /**
     * Specifies the value that defines the access rule. The value contains 1 to 255 characters.
     * Changing this will create a new access rule. The value varies according to the scenario:
     * - Set the VPC ID in VPC authorization scenarios.
     * - Set this parameter in IP address authorization scenario.
     *
     * - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
     * For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
     *
     * - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
     * For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
     *
     * > **NOTE:** If you want to create more access rules, please using sbercloud_sfs_access_rule.
     */
    declare public readonly accessTo: pulumi.Output<string | undefined>;
    /**
     * Specifies the type of the share access rule. The default value is *cert*.
     * Changing this will create a new access rule.
     */
    declare public readonly accessType: pulumi.Output<string>;
    /**
     * The availability zone name. Changing this parameter will create a new resource.
     */
    declare public readonly availabilityZone: pulumi.Output<string>;
    /**
     * Describes the shared file system.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The enterprise project id of the shared file system. Changing this creates a new resource.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * The address for accessing the shared file system.
     */
    declare public /*out*/ readonly exportLocation: pulumi.Output<string>;
    /**
     * The level of visibility for the shared file system.
     */
    declare public readonly isPublic: pulumi.Output<boolean | undefined>;
    /**
     * Metadata key and value pairs as a dictionary of strings.
     * The supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias",
     * and the keys should be exist at the same time to enable the data encryption function.
     * Changing this will create a new resource.
     */
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the shared file system.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The region in which to create the sfs resource. If omitted, the provider-level region will be used. Changing this creates a new sfs resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The UUID of the share access rule.
     */
    declare public /*out*/ readonly shareAccessId: pulumi.Output<string>;
    /**
     * The protocol for sharing file systems. The default value is NFS.
     */
    declare public readonly shareProto: pulumi.Output<string | undefined>;
    /**
     * The size (GB) of the shared file system.
     */
    declare public readonly size: pulumi.Output<number>;
    /**
     * The status of the share access rule.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The key/value pairs to associate with the shared file system.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a FileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileSystemArgs | FileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileSystemState | undefined;
            resourceInputs["accessLevel"] = state?.accessLevel;
            resourceInputs["accessRuleStatus"] = state?.accessRuleStatus;
            resourceInputs["accessRules"] = state?.accessRules;
            resourceInputs["accessTo"] = state?.accessTo;
            resourceInputs["accessType"] = state?.accessType;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["description"] = state?.description;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["exportLocation"] = state?.exportLocation;
            resourceInputs["isPublic"] = state?.isPublic;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["shareAccessId"] = state?.shareAccessId;
            resourceInputs["shareProto"] = state?.shareProto;
            resourceInputs["size"] = state?.size;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as FileSystemArgs | undefined;
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["accessLevel"] = args?.accessLevel;
            resourceInputs["accessTo"] = args?.accessTo;
            resourceInputs["accessType"] = args?.accessType;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["description"] = args?.description;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["isPublic"] = args?.isPublic;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["shareProto"] = args?.shareProto;
            resourceInputs["size"] = args?.size;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["accessRuleStatus"] = undefined /*out*/;
            resourceInputs["accessRules"] = undefined /*out*/;
            resourceInputs["exportLocation"] = undefined /*out*/;
            resourceInputs["shareAccessId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileSystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileSystem resources.
 */
export interface FileSystemState {
    /**
     * Specifies the access level of the shared file system. Possible values are *ro* (read-only)
     * and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * The status of the share access rule.
     */
    accessRuleStatus?: pulumi.Input<string>;
    /**
     * All access rules of the shared file system. The object includes the following:
     */
    accessRules?: pulumi.Input<pulumi.Input<inputs.Sfs.FileSystemAccessRule>[]>;
    /**
     * Specifies the value that defines the access rule. The value contains 1 to 255 characters.
     * Changing this will create a new access rule. The value varies according to the scenario:
     * - Set the VPC ID in VPC authorization scenarios.
     * - Set this parameter in IP address authorization scenario.
     *
     * - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
     * For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
     *
     * - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
     * For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
     *
     * > **NOTE:** If you want to create more access rules, please using sbercloud_sfs_access_rule.
     */
    accessTo?: pulumi.Input<string>;
    /**
     * Specifies the type of the share access rule. The default value is *cert*.
     * Changing this will create a new access rule.
     */
    accessType?: pulumi.Input<string>;
    /**
     * The availability zone name. Changing this parameter will create a new resource.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Describes the shared file system.
     */
    description?: pulumi.Input<string>;
    /**
     * The enterprise project id of the shared file system. Changing this creates a new resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The address for accessing the shared file system.
     */
    exportLocation?: pulumi.Input<string>;
    /**
     * The level of visibility for the shared file system.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Metadata key and value pairs as a dictionary of strings.
     * The supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias",
     * and the keys should be exist at the same time to enable the data encryption function.
     * Changing this will create a new resource.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the shared file system.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to create the sfs resource. If omitted, the provider-level region will be used. Changing this creates a new sfs resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The UUID of the share access rule.
     */
    shareAccessId?: pulumi.Input<string>;
    /**
     * The protocol for sharing file systems. The default value is NFS.
     */
    shareProto?: pulumi.Input<string>;
    /**
     * The size (GB) of the shared file system.
     */
    size?: pulumi.Input<number>;
    /**
     * The status of the share access rule.
     */
    status?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the shared file system.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a FileSystem resource.
 */
export interface FileSystemArgs {
    /**
     * Specifies the access level of the shared file system. Possible values are *ro* (read-only)
     * and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * Specifies the value that defines the access rule. The value contains 1 to 255 characters.
     * Changing this will create a new access rule. The value varies according to the scenario:
     * - Set the VPC ID in VPC authorization scenarios.
     * - Set this parameter in IP address authorization scenario.
     *
     * - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
     * For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
     *
     * - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
     * For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
     *
     * > **NOTE:** If you want to create more access rules, please using sbercloud_sfs_access_rule.
     */
    accessTo?: pulumi.Input<string>;
    /**
     * Specifies the type of the share access rule. The default value is *cert*.
     * Changing this will create a new access rule.
     */
    accessType?: pulumi.Input<string>;
    /**
     * The availability zone name. Changing this parameter will create a new resource.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Describes the shared file system.
     */
    description?: pulumi.Input<string>;
    /**
     * The enterprise project id of the shared file system. Changing this creates a new resource.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The level of visibility for the shared file system.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Metadata key and value pairs as a dictionary of strings.
     * The supported metadata keys are "#sfs_crypt_key_id", "#sfs_crypt_domain_id" and "#sfs_crypt_alias",
     * and the keys should be exist at the same time to enable the data encryption function.
     * Changing this will create a new resource.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the shared file system.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to create the sfs resource. If omitted, the provider-level region will be used. Changing this creates a new sfs resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The protocol for sharing file systems. The default value is NFS.
     */
    shareProto?: pulumi.Input<string>;
    /**
     * The size (GB) of the shared file system.
     */
    size: pulumi.Input<number>;
    /**
     * The key/value pairs to associate with the shared file system.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

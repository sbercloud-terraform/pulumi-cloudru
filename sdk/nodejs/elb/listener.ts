// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an ELB listener resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const listener1 = new sbercloud.elb.Listener("listener_1", {
 *     protocol: "HTTP",
 *     protocolPort: 8080,
 *     loadbalancerId: "d9415786-5f1a-428b-b35f-2f1523e146d2",
 * });
 * ```
 *
 * ## Import
 *
 * ELB listener can be imported using the listener ID, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Elb/listener:Listener listener_1 5c20fdad-7288-11eb-b817-0255ac10158b
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Elb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * The administrative state of the listener. A valid value is true (UP) or false (
     * DOWN).
     *
     * @deprecated admin_state_up is deprecated
     */
    declare public readonly adminStateUp: pulumi.Output<boolean | undefined>;
    declare public readonly clientCaTlsContainerRef: pulumi.Output<string>;
    /**
     * The maximum number of connections allowed for the listener. The value ranges from
     * -1 to 2,147,483,647. This parameter is reserved and has been not used. Only the administrator can specify the maximum
     * number of connections.
     *
     * @deprecated connection_limit is deprecated
     */
    declare public readonly connectionLimit: pulumi.Output<number>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The ID of the default pool with which the listener is associated.
     * Changing this creates a new listener.
     */
    declare public readonly defaultPoolId: pulumi.Output<string>;
    /**
     * Specifies the ID of the server certificate used by the listener. This
     * parameter is mandatory when protocol is set to *TERMINATED_HTTPS*.
     */
    declare public readonly defaultTlsContainerRef: pulumi.Output<string>;
    /**
     * Human-readable description for the listener.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to use HTTP/2. The default value is false. This parameter is valid
     * only when the protocol is set to *TERMINATED_HTTPS*.
     */
    declare public readonly http2Enable: pulumi.Output<boolean | undefined>;
    declare public readonly insertHeaders: pulumi.Output<outputs.Elb.ListenerInsertHeaders>;
    /**
     * The load balancer on which to provision this listener. Changing this
     * creates a new listener.
     */
    declare public readonly loadbalancerId: pulumi.Output<string>;
    /**
     * Human-readable name for the listener. Does not have to be unique.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly protectionReason: pulumi.Output<string | undefined>;
    declare public readonly protectionStatus: pulumi.Output<string>;
    /**
     * The protocol can either be TCP, UDP, HTTP or TERMINATED_HTTPS. Changing this
     * creates a new listener.
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * The port on which to listen for client traffic. Changing this creates a
     * new listener.
     */
    declare public readonly protocolPort: pulumi.Output<number>;
    /**
     * The region in which to create the listener resource. If omitted, the
     * provider-level region will be used. Changing this creates a new listener.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Lists the IDs of SNI certificates (server certificates with a domain name)
     * used by the listener. This parameter is valid when protocol is set to *TERMINATED_HTTPS*.
     */
    declare public readonly sniContainerRefs: pulumi.Output<string[]>;
    /**
     * The key/value pairs to associate with the listener.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated tenant_id is deprecated
     */
    declare public readonly tenantId: pulumi.Output<string>;
    declare public readonly tlsCiphersPolicy: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["adminStateUp"] = state?.adminStateUp;
            resourceInputs["clientCaTlsContainerRef"] = state?.clientCaTlsContainerRef;
            resourceInputs["connectionLimit"] = state?.connectionLimit;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["defaultPoolId"] = state?.defaultPoolId;
            resourceInputs["defaultTlsContainerRef"] = state?.defaultTlsContainerRef;
            resourceInputs["description"] = state?.description;
            resourceInputs["http2Enable"] = state?.http2Enable;
            resourceInputs["insertHeaders"] = state?.insertHeaders;
            resourceInputs["loadbalancerId"] = state?.loadbalancerId;
            resourceInputs["name"] = state?.name;
            resourceInputs["protectionReason"] = state?.protectionReason;
            resourceInputs["protectionStatus"] = state?.protectionStatus;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["protocolPort"] = state?.protocolPort;
            resourceInputs["region"] = state?.region;
            resourceInputs["sniContainerRefs"] = state?.sniContainerRefs;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tenantId"] = state?.tenantId;
            resourceInputs["tlsCiphersPolicy"] = state?.tlsCiphersPolicy;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if (args?.loadbalancerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.protocolPort === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocolPort'");
            }
            resourceInputs["adminStateUp"] = args?.adminStateUp;
            resourceInputs["clientCaTlsContainerRef"] = args?.clientCaTlsContainerRef;
            resourceInputs["connectionLimit"] = args?.connectionLimit;
            resourceInputs["defaultPoolId"] = args?.defaultPoolId;
            resourceInputs["defaultTlsContainerRef"] = args?.defaultTlsContainerRef;
            resourceInputs["description"] = args?.description;
            resourceInputs["http2Enable"] = args?.http2Enable;
            resourceInputs["insertHeaders"] = args?.insertHeaders;
            resourceInputs["loadbalancerId"] = args?.loadbalancerId;
            resourceInputs["name"] = args?.name;
            resourceInputs["protectionReason"] = args?.protectionReason;
            resourceInputs["protectionStatus"] = args?.protectionStatus;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["protocolPort"] = args?.protocolPort;
            resourceInputs["region"] = args?.region;
            resourceInputs["sniContainerRefs"] = args?.sniContainerRefs;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tenantId"] = args?.tenantId;
            resourceInputs["tlsCiphersPolicy"] = args?.tlsCiphersPolicy;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * The administrative state of the listener. A valid value is true (UP) or false (
     * DOWN).
     *
     * @deprecated admin_state_up is deprecated
     */
    adminStateUp?: pulumi.Input<boolean>;
    clientCaTlsContainerRef?: pulumi.Input<string>;
    /**
     * The maximum number of connections allowed for the listener. The value ranges from
     * -1 to 2,147,483,647. This parameter is reserved and has been not used. Only the administrator can specify the maximum
     * number of connections.
     *
     * @deprecated connection_limit is deprecated
     */
    connectionLimit?: pulumi.Input<number>;
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the default pool with which the listener is associated.
     * Changing this creates a new listener.
     */
    defaultPoolId?: pulumi.Input<string>;
    /**
     * Specifies the ID of the server certificate used by the listener. This
     * parameter is mandatory when protocol is set to *TERMINATED_HTTPS*.
     */
    defaultTlsContainerRef?: pulumi.Input<string>;
    /**
     * Human-readable description for the listener.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to use HTTP/2. The default value is false. This parameter is valid
     * only when the protocol is set to *TERMINATED_HTTPS*.
     */
    http2Enable?: pulumi.Input<boolean>;
    insertHeaders?: pulumi.Input<inputs.Elb.ListenerInsertHeaders>;
    /**
     * The load balancer on which to provision this listener. Changing this
     * creates a new listener.
     */
    loadbalancerId?: pulumi.Input<string>;
    /**
     * Human-readable name for the listener. Does not have to be unique.
     */
    name?: pulumi.Input<string>;
    protectionReason?: pulumi.Input<string>;
    protectionStatus?: pulumi.Input<string>;
    /**
     * The protocol can either be TCP, UDP, HTTP or TERMINATED_HTTPS. Changing this
     * creates a new listener.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The port on which to listen for client traffic. Changing this creates a
     * new listener.
     */
    protocolPort?: pulumi.Input<number>;
    /**
     * The region in which to create the listener resource. If omitted, the
     * provider-level region will be used. Changing this creates a new listener.
     */
    region?: pulumi.Input<string>;
    /**
     * Lists the IDs of SNI certificates (server certificates with a domain name)
     * used by the listener. This parameter is valid when protocol is set to *TERMINATED_HTTPS*.
     */
    sniContainerRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The key/value pairs to associate with the listener.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated tenant_id is deprecated
     */
    tenantId?: pulumi.Input<string>;
    tlsCiphersPolicy?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * The administrative state of the listener. A valid value is true (UP) or false (
     * DOWN).
     *
     * @deprecated admin_state_up is deprecated
     */
    adminStateUp?: pulumi.Input<boolean>;
    clientCaTlsContainerRef?: pulumi.Input<string>;
    /**
     * The maximum number of connections allowed for the listener. The value ranges from
     * -1 to 2,147,483,647. This parameter is reserved and has been not used. Only the administrator can specify the maximum
     * number of connections.
     *
     * @deprecated connection_limit is deprecated
     */
    connectionLimit?: pulumi.Input<number>;
    /**
     * The ID of the default pool with which the listener is associated.
     * Changing this creates a new listener.
     */
    defaultPoolId?: pulumi.Input<string>;
    /**
     * Specifies the ID of the server certificate used by the listener. This
     * parameter is mandatory when protocol is set to *TERMINATED_HTTPS*.
     */
    defaultTlsContainerRef?: pulumi.Input<string>;
    /**
     * Human-readable description for the listener.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to use HTTP/2. The default value is false. This parameter is valid
     * only when the protocol is set to *TERMINATED_HTTPS*.
     */
    http2Enable?: pulumi.Input<boolean>;
    insertHeaders?: pulumi.Input<inputs.Elb.ListenerInsertHeaders>;
    /**
     * The load balancer on which to provision this listener. Changing this
     * creates a new listener.
     */
    loadbalancerId: pulumi.Input<string>;
    /**
     * Human-readable name for the listener. Does not have to be unique.
     */
    name?: pulumi.Input<string>;
    protectionReason?: pulumi.Input<string>;
    protectionStatus?: pulumi.Input<string>;
    /**
     * The protocol can either be TCP, UDP, HTTP or TERMINATED_HTTPS. Changing this
     * creates a new listener.
     */
    protocol: pulumi.Input<string>;
    /**
     * The port on which to listen for client traffic. Changing this creates a
     * new listener.
     */
    protocolPort: pulumi.Input<number>;
    /**
     * The region in which to create the listener resource. If omitted, the
     * provider-level region will be used. Changing this creates a new listener.
     */
    region?: pulumi.Input<string>;
    /**
     * Lists the IDs of SNI certificates (server certificates with a domain name)
     * used by the listener. This parameter is valid when protocol is set to *TERMINATED_HTTPS*.
     */
    sniContainerRefs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The key/value pairs to associate with the listener.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated tenant_id is deprecated
     */
    tenantId?: pulumi.Input<string>;
    tlsCiphersPolicy?: pulumi.Input<string>;
}

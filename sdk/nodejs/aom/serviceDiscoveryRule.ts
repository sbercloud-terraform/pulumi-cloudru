// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ServiceDiscoveryRule extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDiscoveryRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDiscoveryRuleState, opts?: pulumi.CustomResourceOptions): ServiceDiscoveryRule {
        return new ServiceDiscoveryRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Aom/serviceDiscoveryRule:ServiceDiscoveryRule';

    /**
     * Returns true if the given object is an instance of ServiceDiscoveryRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDiscoveryRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDiscoveryRule.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly detectLogEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly discoveryRuleEnabled: pulumi.Output<boolean | undefined>;
    declare public readonly discoveryRules: pulumi.Output<outputs.Aom.ServiceDiscoveryRuleDiscoveryRule[]>;
    declare public readonly isDefaultRule: pulumi.Output<boolean | undefined>;
    declare public readonly logFileSuffixes: pulumi.Output<string[]>;
    declare public readonly logPathRules: pulumi.Output<outputs.Aom.ServiceDiscoveryRuleLogPathRule[] | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly nameRules: pulumi.Output<outputs.Aom.ServiceDiscoveryRuleNameRules>;
    declare public readonly priority: pulumi.Output<number | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly ruleId: pulumi.Output<string>;
    declare public readonly serviceType: pulumi.Output<string>;

    /**
     * Create a ServiceDiscoveryRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDiscoveryRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDiscoveryRuleArgs | ServiceDiscoveryRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceDiscoveryRuleState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["detectLogEnabled"] = state?.detectLogEnabled;
            resourceInputs["discoveryRuleEnabled"] = state?.discoveryRuleEnabled;
            resourceInputs["discoveryRules"] = state?.discoveryRules;
            resourceInputs["isDefaultRule"] = state?.isDefaultRule;
            resourceInputs["logFileSuffixes"] = state?.logFileSuffixes;
            resourceInputs["logPathRules"] = state?.logPathRules;
            resourceInputs["name"] = state?.name;
            resourceInputs["nameRules"] = state?.nameRules;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["region"] = state?.region;
            resourceInputs["ruleId"] = state?.ruleId;
            resourceInputs["serviceType"] = state?.serviceType;
        } else {
            const args = argsOrState as ServiceDiscoveryRuleArgs | undefined;
            if (args?.discoveryRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'discoveryRules'");
            }
            if (args?.logFileSuffixes === undefined && !opts.urn) {
                throw new Error("Missing required property 'logFileSuffixes'");
            }
            if (args?.nameRules === undefined && !opts.urn) {
                throw new Error("Missing required property 'nameRules'");
            }
            if (args?.serviceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceType'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["detectLogEnabled"] = args?.detectLogEnabled;
            resourceInputs["discoveryRuleEnabled"] = args?.discoveryRuleEnabled;
            resourceInputs["discoveryRules"] = args?.discoveryRules;
            resourceInputs["isDefaultRule"] = args?.isDefaultRule;
            resourceInputs["logFileSuffixes"] = args?.logFileSuffixes;
            resourceInputs["logPathRules"] = args?.logPathRules;
            resourceInputs["name"] = args?.name;
            resourceInputs["nameRules"] = args?.nameRules;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["region"] = args?.region;
            resourceInputs["serviceType"] = args?.serviceType;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceDiscoveryRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDiscoveryRule resources.
 */
export interface ServiceDiscoveryRuleState {
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    detectLogEnabled?: pulumi.Input<boolean>;
    discoveryRuleEnabled?: pulumi.Input<boolean>;
    discoveryRules?: pulumi.Input<pulumi.Input<inputs.Aom.ServiceDiscoveryRuleDiscoveryRule>[]>;
    isDefaultRule?: pulumi.Input<boolean>;
    logFileSuffixes?: pulumi.Input<pulumi.Input<string>[]>;
    logPathRules?: pulumi.Input<pulumi.Input<inputs.Aom.ServiceDiscoveryRuleLogPathRule>[]>;
    name?: pulumi.Input<string>;
    nameRules?: pulumi.Input<inputs.Aom.ServiceDiscoveryRuleNameRules>;
    priority?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    ruleId?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceDiscoveryRule resource.
 */
export interface ServiceDiscoveryRuleArgs {
    description?: pulumi.Input<string>;
    detectLogEnabled?: pulumi.Input<boolean>;
    discoveryRuleEnabled?: pulumi.Input<boolean>;
    discoveryRules: pulumi.Input<pulumi.Input<inputs.Aom.ServiceDiscoveryRuleDiscoveryRule>[]>;
    isDefaultRule?: pulumi.Input<boolean>;
    logFileSuffixes: pulumi.Input<pulumi.Input<string>[]>;
    logPathRules?: pulumi.Input<pulumi.Input<inputs.Aom.ServiceDiscoveryRuleLogPathRule>[]>;
    name?: pulumi.Input<string>;
    nameRules: pulumi.Input<inputs.Aom.ServiceDiscoveryRuleNameRules>;
    priority?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    serviceType: pulumi.Input<string>;
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClusterBackupStrategyArgs',
    'ClusterBackupStrategyArgsDict',
    'ClusterClientNodeConfigArgs',
    'ClusterClientNodeConfigArgsDict',
    'ClusterClientNodeConfigVolumeArgs',
    'ClusterClientNodeConfigVolumeArgsDict',
    'ClusterColdNodeConfigArgs',
    'ClusterColdNodeConfigArgsDict',
    'ClusterColdNodeConfigVolumeArgs',
    'ClusterColdNodeConfigVolumeArgsDict',
    'ClusterEssNodeConfigArgs',
    'ClusterEssNodeConfigArgsDict',
    'ClusterEssNodeConfigVolumeArgs',
    'ClusterEssNodeConfigVolumeArgsDict',
    'ClusterKibanaPublicAccessArgs',
    'ClusterKibanaPublicAccessArgsDict',
    'ClusterMasterNodeConfigArgs',
    'ClusterMasterNodeConfigArgsDict',
    'ClusterMasterNodeConfigVolumeArgs',
    'ClusterMasterNodeConfigVolumeArgsDict',
    'ClusterNodeArgs',
    'ClusterNodeArgsDict',
    'ClusterNodeConfigArgs',
    'ClusterNodeConfigArgsDict',
    'ClusterNodeConfigNetworkInfoArgs',
    'ClusterNodeConfigNetworkInfoArgsDict',
    'ClusterNodeConfigVolumeArgs',
    'ClusterNodeConfigVolumeArgsDict',
    'ClusterPublicAccessArgs',
    'ClusterPublicAccessArgsDict',
    'ClusterVpcepEndpointArgs',
    'ClusterVpcepEndpointArgsDict',
]

MYPY = False

if not MYPY:
    class ClusterBackupStrategyArgsDict(TypedDict):
        start_time: pulumi.Input[_builtins.str]
        agency: NotRequired[pulumi.Input[_builtins.str]]
        backup_path: NotRequired[pulumi.Input[_builtins.str]]
        bucket: NotRequired[pulumi.Input[_builtins.str]]
        keep_days: NotRequired[pulumi.Input[_builtins.int]]
        prefix: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ClusterBackupStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterBackupStrategyArgs:
    def __init__(__self__, *,
                 start_time: pulumi.Input[_builtins.str],
                 agency: Optional[pulumi.Input[_builtins.str]] = None,
                 backup_path: Optional[pulumi.Input[_builtins.str]] = None,
                 bucket: Optional[pulumi.Input[_builtins.str]] = None,
                 keep_days: Optional[pulumi.Input[_builtins.int]] = None,
                 prefix: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "start_time", start_time)
        if agency is not None:
            pulumi.set(__self__, "agency", agency)
        if backup_path is not None:
            pulumi.set(__self__, "backup_path", backup_path)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if keep_days is not None:
            pulumi.set(__self__, "keep_days", keep_days)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "start_time", value)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "agency")

    @agency.setter
    def agency(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency", value)

    @_builtins.property
    @pulumi.getter(name="backupPath")
    def backup_path(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "backup_path")

    @backup_path.setter
    def backup_path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backup_path", value)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter(name="keepDays")
    def keep_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "keep_days")

    @keep_days.setter
    def keep_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "keep_days", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class ClusterClientNodeConfigArgsDict(TypedDict):
        flavor: pulumi.Input[_builtins.str]
        instance_number: pulumi.Input[_builtins.int]
        volume: pulumi.Input['ClusterClientNodeConfigVolumeArgsDict']
        shrink_node_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    ClusterClientNodeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterClientNodeConfigArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 instance_number: pulumi.Input[_builtins.int],
                 volume: pulumi.Input['ClusterClientNodeConfigVolumeArgs'],
                 shrink_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "volume", volume)
        if shrink_node_ids is not None:
            pulumi.set(__self__, "shrink_node_ids", shrink_node_ids)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "instance_number")

    @instance_number.setter
    def instance_number(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "instance_number", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Input['ClusterClientNodeConfigVolumeArgs']:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input['ClusterClientNodeConfigVolumeArgs']):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter(name="shrinkNodeIds")
    def shrink_node_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "shrink_node_ids")

    @shrink_node_ids.setter
    def shrink_node_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "shrink_node_ids", value)


if not MYPY:
    class ClusterClientNodeConfigVolumeArgsDict(TypedDict):
        size: pulumi.Input[_builtins.int]
        volume_type: pulumi.Input[_builtins.str]
elif False:
    ClusterClientNodeConfigVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterClientNodeConfigVolumeArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_builtins.int],
                 volume_type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class ClusterColdNodeConfigArgsDict(TypedDict):
        flavor: pulumi.Input[_builtins.str]
        instance_number: pulumi.Input[_builtins.int]
        shrink_node_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        volume: NotRequired[pulumi.Input['ClusterColdNodeConfigVolumeArgsDict']]
elif False:
    ClusterColdNodeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterColdNodeConfigArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 instance_number: pulumi.Input[_builtins.int],
                 shrink_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 volume: Optional[pulumi.Input['ClusterColdNodeConfigVolumeArgs']] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_number", instance_number)
        if shrink_node_ids is not None:
            pulumi.set(__self__, "shrink_node_ids", shrink_node_ids)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "instance_number")

    @instance_number.setter
    def instance_number(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "instance_number", value)

    @_builtins.property
    @pulumi.getter(name="shrinkNodeIds")
    def shrink_node_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "shrink_node_ids")

    @shrink_node_ids.setter
    def shrink_node_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "shrink_node_ids", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ClusterColdNodeConfigVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ClusterColdNodeConfigVolumeArgs']]):
        pulumi.set(self, "volume", value)


if not MYPY:
    class ClusterColdNodeConfigVolumeArgsDict(TypedDict):
        size: pulumi.Input[_builtins.int]
        volume_type: pulumi.Input[_builtins.str]
elif False:
    ClusterColdNodeConfigVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterColdNodeConfigVolumeArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_builtins.int],
                 volume_type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class ClusterEssNodeConfigArgsDict(TypedDict):
        flavor: pulumi.Input[_builtins.str]
        instance_number: pulumi.Input[_builtins.int]
        shrink_node_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        volume: NotRequired[pulumi.Input['ClusterEssNodeConfigVolumeArgsDict']]
elif False:
    ClusterEssNodeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterEssNodeConfigArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 instance_number: pulumi.Input[_builtins.int],
                 shrink_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 volume: Optional[pulumi.Input['ClusterEssNodeConfigVolumeArgs']] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_number", instance_number)
        if shrink_node_ids is not None:
            pulumi.set(__self__, "shrink_node_ids", shrink_node_ids)
        if volume is not None:
            pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "instance_number")

    @instance_number.setter
    def instance_number(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "instance_number", value)

    @_builtins.property
    @pulumi.getter(name="shrinkNodeIds")
    def shrink_node_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "shrink_node_ids")

    @shrink_node_ids.setter
    def shrink_node_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "shrink_node_ids", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> Optional[pulumi.Input['ClusterEssNodeConfigVolumeArgs']]:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: Optional[pulumi.Input['ClusterEssNodeConfigVolumeArgs']]):
        pulumi.set(self, "volume", value)


if not MYPY:
    class ClusterEssNodeConfigVolumeArgsDict(TypedDict):
        size: pulumi.Input[_builtins.int]
        volume_type: pulumi.Input[_builtins.str]
elif False:
    ClusterEssNodeConfigVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterEssNodeConfigVolumeArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_builtins.int],
                 volume_type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class ClusterKibanaPublicAccessArgsDict(TypedDict):
        bandwidth: pulumi.Input[_builtins.int]
        whitelist_enabled: pulumi.Input[_builtins.bool]
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        whitelist: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ClusterKibanaPublicAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterKibanaPublicAccessArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[_builtins.int],
                 whitelist_enabled: pulumi.Input[_builtins.bool],
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 whitelist: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "whitelist_enabled", whitelist_enabled)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="whitelistEnabled")
    def whitelist_enabled(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "whitelist_enabled")

    @whitelist_enabled.setter
    def whitelist_enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "whitelist_enabled", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "whitelist", value)


if not MYPY:
    class ClusterMasterNodeConfigArgsDict(TypedDict):
        flavor: pulumi.Input[_builtins.str]
        instance_number: pulumi.Input[_builtins.int]
        volume: pulumi.Input['ClusterMasterNodeConfigVolumeArgsDict']
        shrink_node_ids: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    ClusterMasterNodeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterMasterNodeConfigArgs:
    def __init__(__self__, *,
                 flavor: pulumi.Input[_builtins.str],
                 instance_number: pulumi.Input[_builtins.int],
                 volume: pulumi.Input['ClusterMasterNodeConfigVolumeArgs'],
                 shrink_node_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "instance_number", instance_number)
        pulumi.set(__self__, "volume", volume)
        if shrink_node_ids is not None:
            pulumi.set(__self__, "shrink_node_ids", shrink_node_ids)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="instanceNumber")
    def instance_number(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "instance_number")

    @instance_number.setter
    def instance_number(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "instance_number", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Input['ClusterMasterNodeConfigVolumeArgs']:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input['ClusterMasterNodeConfigVolumeArgs']):
        pulumi.set(self, "volume", value)

    @_builtins.property
    @pulumi.getter(name="shrinkNodeIds")
    def shrink_node_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "shrink_node_ids")

    @shrink_node_ids.setter
    def shrink_node_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "shrink_node_ids", value)


if not MYPY:
    class ClusterMasterNodeConfigVolumeArgsDict(TypedDict):
        size: pulumi.Input[_builtins.int]
        volume_type: pulumi.Input[_builtins.str]
elif False:
    ClusterMasterNodeConfigVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterMasterNodeConfigVolumeArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_builtins.int],
                 volume_type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class ClusterNodeArgsDict(TypedDict):
        availability_zone: NotRequired[pulumi.Input[_builtins.str]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        ip: NotRequired[pulumi.Input[_builtins.str]]
        name: NotRequired[pulumi.Input[_builtins.str]]
        resource_id: NotRequired[pulumi.Input[_builtins.str]]
        spec_code: NotRequired[pulumi.Input[_builtins.str]]
        status: NotRequired[pulumi.Input[_builtins.str]]
        type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ClusterNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNodeArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 ip: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_id: Optional[pulumi.Input[_builtins.str]] = None,
                 spec_code: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if spec_code is not None:
            pulumi.set(__self__, "spec_code", spec_code)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ip", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_id", value)

    @_builtins.property
    @pulumi.getter(name="specCode")
    def spec_code(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "spec_code")

    @spec_code.setter
    def spec_code(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spec_code", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ClusterNodeConfigArgsDict(TypedDict):
        availability_zone: pulumi.Input[_builtins.str]
        flavor: pulumi.Input[_builtins.str]
        network_info: pulumi.Input['ClusterNodeConfigNetworkInfoArgsDict']
        volume: pulumi.Input['ClusterNodeConfigVolumeArgsDict']
elif False:
    ClusterNodeConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNodeConfigArgs:
    def __init__(__self__, *,
                 availability_zone: pulumi.Input[_builtins.str],
                 flavor: pulumi.Input[_builtins.str],
                 network_info: pulumi.Input['ClusterNodeConfigNetworkInfoArgs'],
                 volume: pulumi.Input['ClusterNodeConfigVolumeArgs']):
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "network_info", network_info)
        pulumi.set(__self__, "volume", volume)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "flavor")

    @flavor.setter
    def flavor(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "flavor", value)

    @_builtins.property
    @pulumi.getter(name="networkInfo")
    def network_info(self) -> pulumi.Input['ClusterNodeConfigNetworkInfoArgs']:
        return pulumi.get(self, "network_info")

    @network_info.setter
    def network_info(self, value: pulumi.Input['ClusterNodeConfigNetworkInfoArgs']):
        pulumi.set(self, "network_info", value)

    @_builtins.property
    @pulumi.getter
    def volume(self) -> pulumi.Input['ClusterNodeConfigVolumeArgs']:
        return pulumi.get(self, "volume")

    @volume.setter
    def volume(self, value: pulumi.Input['ClusterNodeConfigVolumeArgs']):
        pulumi.set(self, "volume", value)


if not MYPY:
    class ClusterNodeConfigNetworkInfoArgsDict(TypedDict):
        security_group_id: pulumi.Input[_builtins.str]
        subnet_id: pulumi.Input[_builtins.str]
        vpc_id: pulumi.Input[_builtins.str]
elif False:
    ClusterNodeConfigNetworkInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNodeConfigNetworkInfoArgs:
    def __init__(__self__, *,
                 security_group_id: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 vpc_id: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "security_group_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vpc_id", value)


if not MYPY:
    class ClusterNodeConfigVolumeArgsDict(TypedDict):
        size: pulumi.Input[_builtins.int]
        volume_type: pulumi.Input[_builtins.str]
elif False:
    ClusterNodeConfigVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterNodeConfigVolumeArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_builtins.int],
                 volume_type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_type", value)


if not MYPY:
    class ClusterPublicAccessArgsDict(TypedDict):
        bandwidth: pulumi.Input[_builtins.int]
        whitelist_enabled: pulumi.Input[_builtins.bool]
        public_ip: NotRequired[pulumi.Input[_builtins.str]]
        whitelist: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ClusterPublicAccessArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterPublicAccessArgs:
    def __init__(__self__, *,
                 bandwidth: pulumi.Input[_builtins.int],
                 whitelist_enabled: pulumi.Input[_builtins.bool],
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 whitelist: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "whitelist_enabled", whitelist_enabled)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if whitelist is not None:
            pulumi.set(__self__, "whitelist", whitelist)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="whitelistEnabled")
    def whitelist_enabled(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "whitelist_enabled")

    @whitelist_enabled.setter
    def whitelist_enabled(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "whitelist_enabled", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def whitelist(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "whitelist")

    @whitelist.setter
    def whitelist(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "whitelist", value)


if not MYPY:
    class ClusterVpcepEndpointArgsDict(TypedDict):
        endpoint_with_dns_name: pulumi.Input[_builtins.bool]
        whitelists: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    ClusterVpcepEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClusterVpcepEndpointArgs:
    def __init__(__self__, *,
                 endpoint_with_dns_name: pulumi.Input[_builtins.bool],
                 whitelists: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        pulumi.set(__self__, "endpoint_with_dns_name", endpoint_with_dns_name)
        if whitelists is not None:
            pulumi.set(__self__, "whitelists", whitelists)

    @_builtins.property
    @pulumi.getter(name="endpointWithDnsName")
    def endpoint_with_dns_name(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "endpoint_with_dns_name")

    @endpoint_with_dns_name.setter
    def endpoint_with_dns_name(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "endpoint_with_dns_name", value)

    @_builtins.property
    @pulumi.getter
    def whitelists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "whitelists")

    @whitelists.setter
    def whitelists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "whitelists", value)



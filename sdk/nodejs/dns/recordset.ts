// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Recordset extends pulumi.CustomResource {
    /**
     * Get an existing Recordset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordsetState, opts?: pulumi.CustomResourceOptions): Recordset {
        return new Recordset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Dns/recordset:Recordset';

    /**
     * Returns true if the given object is an instance of Recordset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Recordset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Recordset.__pulumiType;
    }

    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly records: pulumi.Output<string[]>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly ttl: pulumi.Output<number | undefined>;
    declare public readonly type: pulumi.Output<string>;
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a Recordset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordsetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordsetArgs | RecordsetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordsetState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["records"] = state?.records;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as RecordsetArgs | undefined;
            if (args?.records === undefined && !opts.urn) {
                throw new Error("Missing required property 'records'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["records"] = args?.records;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
            resourceInputs["zoneId"] = args?.zoneId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Recordset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Recordset resources.
 */
export interface RecordsetState {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    records?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Recordset resource.
 */
export interface RecordsetArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    records: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ttl?: pulumi.Input<number>;
    type: pulumi.Input<string>;
    zoneId: pulumi.Input<string>;
}

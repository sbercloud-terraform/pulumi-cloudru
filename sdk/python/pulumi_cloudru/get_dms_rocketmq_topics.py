# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDmsRocketmqTopicsResult',
    'AwaitableGetDmsRocketmqTopicsResult',
    'get_dms_rocketmq_topics',
    'get_dms_rocketmq_topics_output',
]

@pulumi.output_type
class GetDmsRocketmqTopicsResult:
    """
    A collection of values returned by getDmsRocketmqTopics.
    """
    def __init__(__self__, id=None, instance_id=None, name=None, permission=None, region=None, topics=None, total_read_queue_num=None, total_write_queue_num=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if permission and not isinstance(permission, str):
            raise TypeError("Expected argument 'permission' to be a str")
        pulumi.set(__self__, "permission", permission)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if topics and not isinstance(topics, list):
            raise TypeError("Expected argument 'topics' to be a list")
        pulumi.set(__self__, "topics", topics)
        if total_read_queue_num and not isinstance(total_read_queue_num, int):
            raise TypeError("Expected argument 'total_read_queue_num' to be a int")
        pulumi.set(__self__, "total_read_queue_num", total_read_queue_num)
        if total_write_queue_num and not isinstance(total_write_queue_num, int):
            raise TypeError("Expected argument 'total_write_queue_num' to be a int")
        pulumi.set(__self__, "total_write_queue_num", total_write_queue_num)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the topic name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permission(self) -> Optional[_builtins.str]:
        """
        Indicates the permission. Value options: **sub**, **pub** or **all**.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def topics(self) -> Sequence['outputs.GetDmsRocketmqTopicsTopicResult']:
        """
        The list of topics.
        The topics structure is documented below.
        """
        return pulumi.get(self, "topics")

    @_builtins.property
    @pulumi.getter(name="totalReadQueueNum")
    def total_read_queue_num(self) -> Optional[_builtins.int]:
        """
        Indicates the number of total read queue.
        """
        return pulumi.get(self, "total_read_queue_num")

    @_builtins.property
    @pulumi.getter(name="totalWriteQueueNum")
    def total_write_queue_num(self) -> Optional[_builtins.int]:
        """
        Indicates the number of total write queue.
        """
        return pulumi.get(self, "total_write_queue_num")


class AwaitableGetDmsRocketmqTopicsResult(GetDmsRocketmqTopicsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDmsRocketmqTopicsResult(
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            permission=self.permission,
            region=self.region,
            topics=self.topics,
            total_read_queue_num=self.total_read_queue_num,
            total_write_queue_num=self.total_write_queue_num)


def get_dms_rocketmq_topics(instance_id: Optional[_builtins.str] = None,
                            name: Optional[_builtins.str] = None,
                            permission: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            total_read_queue_num: Optional[_builtins.int] = None,
                            total_write_queue_num: Optional[_builtins.int] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDmsRocketmqTopicsResult:
    """
    Use this data source to get the list of DMS rocketMQ topics.


    :param _builtins.str instance_id: Specifies the ID of the rocketMQ instance.
    :param _builtins.str name: Specifies the topic name.
    :param _builtins.str permission: Specifies the permission. Value options: **sub**, **pub** or **all**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.int total_read_queue_num: Specifies the number of total read queue.
    :param _builtins.int total_write_queue_num: Specifies the number of total write queue.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['permission'] = permission
    __args__['region'] = region
    __args__['totalReadQueueNum'] = total_read_queue_num
    __args__['totalWriteQueueNum'] = total_write_queue_num
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDmsRocketmqTopics:getDmsRocketmqTopics', __args__, opts=opts, typ=GetDmsRocketmqTopicsResult).value

    return AwaitableGetDmsRocketmqTopicsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        permission=pulumi.get(__ret__, 'permission'),
        region=pulumi.get(__ret__, 'region'),
        topics=pulumi.get(__ret__, 'topics'),
        total_read_queue_num=pulumi.get(__ret__, 'total_read_queue_num'),
        total_write_queue_num=pulumi.get(__ret__, 'total_write_queue_num'))
def get_dms_rocketmq_topics_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   permission: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   total_read_queue_num: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                   total_write_queue_num: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDmsRocketmqTopicsResult]:
    """
    Use this data source to get the list of DMS rocketMQ topics.


    :param _builtins.str instance_id: Specifies the ID of the rocketMQ instance.
    :param _builtins.str name: Specifies the topic name.
    :param _builtins.str permission: Specifies the permission. Value options: **sub**, **pub** or **all**.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.int total_read_queue_num: Specifies the number of total read queue.
    :param _builtins.int total_write_queue_num: Specifies the number of total write queue.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['permission'] = permission
    __args__['region'] = region
    __args__['totalReadQueueNum'] = total_read_queue_num
    __args__['totalWriteQueueNum'] = total_write_queue_num
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDmsRocketmqTopics:getDmsRocketmqTopics', __args__, opts=opts, typ=GetDmsRocketmqTopicsResult)
    return __ret__.apply(lambda __response__: GetDmsRocketmqTopicsResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        permission=pulumi.get(__response__, 'permission'),
        region=pulumi.get(__response__, 'region'),
        topics=pulumi.get(__response__, 'topics'),
        total_read_queue_num=pulumi.get(__response__, 'total_read_queue_num'),
        total_write_queue_num=pulumi.get(__response__, 'total_write_queue_num')))

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sharedapig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type ApiBackendParam struct {
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description *string `pulumi:"description"`
	// Where the parameter is located.
	Location string `pulumi:"location"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name            string  `pulumi:"name"`
	SystemParamType *string `pulumi:"systemParamType"`
	// The parameter type.
	Type string `pulumi:"type"`
	// The value of the parameter
	Value string `pulumi:"value"`
}

// ApiBackendParamInput is an input type that accepts ApiBackendParamArgs and ApiBackendParamOutput values.
// You can construct a concrete instance of `ApiBackendParamInput` via:
//
//	ApiBackendParamArgs{...}
type ApiBackendParamInput interface {
	pulumi.Input

	ToApiBackendParamOutput() ApiBackendParamOutput
	ToApiBackendParamOutputWithContext(context.Context) ApiBackendParamOutput
}

type ApiBackendParamArgs struct {
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Where the parameter is located.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name            pulumi.StringInput    `pulumi:"name"`
	SystemParamType pulumi.StringPtrInput `pulumi:"systemParamType"`
	// The parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the parameter
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiBackendParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiBackendParam)(nil)).Elem()
}

func (i ApiBackendParamArgs) ToApiBackendParamOutput() ApiBackendParamOutput {
	return i.ToApiBackendParamOutputWithContext(context.Background())
}

func (i ApiBackendParamArgs) ToApiBackendParamOutputWithContext(ctx context.Context) ApiBackendParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiBackendParamOutput)
}

// ApiBackendParamArrayInput is an input type that accepts ApiBackendParamArray and ApiBackendParamArrayOutput values.
// You can construct a concrete instance of `ApiBackendParamArrayInput` via:
//
//	ApiBackendParamArray{ ApiBackendParamArgs{...} }
type ApiBackendParamArrayInput interface {
	pulumi.Input

	ToApiBackendParamArrayOutput() ApiBackendParamArrayOutput
	ToApiBackendParamArrayOutputWithContext(context.Context) ApiBackendParamArrayOutput
}

type ApiBackendParamArray []ApiBackendParamInput

func (ApiBackendParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiBackendParam)(nil)).Elem()
}

func (i ApiBackendParamArray) ToApiBackendParamArrayOutput() ApiBackendParamArrayOutput {
	return i.ToApiBackendParamArrayOutputWithContext(context.Background())
}

func (i ApiBackendParamArray) ToApiBackendParamArrayOutputWithContext(ctx context.Context) ApiBackendParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiBackendParamArrayOutput)
}

type ApiBackendParamOutput struct{ *pulumi.OutputState }

func (ApiBackendParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiBackendParam)(nil)).Elem()
}

func (o ApiBackendParamOutput) ToApiBackendParamOutput() ApiBackendParamOutput {
	return o
}

func (o ApiBackendParamOutput) ToApiBackendParamOutputWithContext(ctx context.Context) ApiBackendParamOutput {
	return o
}

// Specifies the description of the API. The description cannot exceed 255 characters.
func (o ApiBackendParamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiBackendParam) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Where the parameter is located.
func (o ApiBackendParamOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ApiBackendParam) string { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
// letter. Only letters, digits, and underscores (_) are allowed.
func (o ApiBackendParamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiBackendParam) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApiBackendParamOutput) SystemParamType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiBackendParam) *string { return v.SystemParamType }).(pulumi.StringPtrOutput)
}

// The parameter type.
func (o ApiBackendParamOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApiBackendParam) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the parameter
func (o ApiBackendParamOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiBackendParam) string { return v.Value }).(pulumi.StringOutput)
}

type ApiBackendParamArrayOutput struct{ *pulumi.OutputState }

func (ApiBackendParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiBackendParam)(nil)).Elem()
}

func (o ApiBackendParamArrayOutput) ToApiBackendParamArrayOutput() ApiBackendParamArrayOutput {
	return o
}

func (o ApiBackendParamArrayOutput) ToApiBackendParamArrayOutputWithContext(ctx context.Context) ApiBackendParamArrayOutput {
	return o
}

func (o ApiBackendParamArrayOutput) Index(i pulumi.IntInput) ApiBackendParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiBackendParam {
		return vs[0].([]ApiBackendParam)[vs[1].(int)]
	}).(ApiBackendParamOutput)
}

type ApiFuncGraph struct {
	// The ID of the backend custom authorization.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The alias URN of the FunctionGraph function.
	FunctionAliasUrn *string `pulumi:"functionAliasUrn"`
	// The URN of the FunctionGraph function.
	FunctionUrn string `pulumi:"functionUrn"`
	// The invocation type.
	InvocationType *string `pulumi:"invocationType"`
	// The network architecture (framework) type of the FunctionGraph function.
	NetworkType *string `pulumi:"networkType"`
	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	RequestProtocol *string `pulumi:"requestProtocol"`
	// The timeout for API requests to backend service.
	Timeout *int `pulumi:"timeout"`
	// Specifies the version of the API. A maximum of 16 characters are allowed.
	Version *string `pulumi:"version"`
}

// ApiFuncGraphInput is an input type that accepts ApiFuncGraphArgs and ApiFuncGraphOutput values.
// You can construct a concrete instance of `ApiFuncGraphInput` via:
//
//	ApiFuncGraphArgs{...}
type ApiFuncGraphInput interface {
	pulumi.Input

	ToApiFuncGraphOutput() ApiFuncGraphOutput
	ToApiFuncGraphOutputWithContext(context.Context) ApiFuncGraphOutput
}

type ApiFuncGraphArgs struct {
	// The ID of the backend custom authorization.
	AuthorizerId pulumi.StringPtrInput `pulumi:"authorizerId"`
	// The alias URN of the FunctionGraph function.
	FunctionAliasUrn pulumi.StringPtrInput `pulumi:"functionAliasUrn"`
	// The URN of the FunctionGraph function.
	FunctionUrn pulumi.StringInput `pulumi:"functionUrn"`
	// The invocation type.
	InvocationType pulumi.StringPtrInput `pulumi:"invocationType"`
	// The network architecture (framework) type of the FunctionGraph function.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	RequestProtocol pulumi.StringPtrInput `pulumi:"requestProtocol"`
	// The timeout for API requests to backend service.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Specifies the version of the API. A maximum of 16 characters are allowed.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApiFuncGraphArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFuncGraph)(nil)).Elem()
}

func (i ApiFuncGraphArgs) ToApiFuncGraphOutput() ApiFuncGraphOutput {
	return i.ToApiFuncGraphOutputWithContext(context.Background())
}

func (i ApiFuncGraphArgs) ToApiFuncGraphOutputWithContext(ctx context.Context) ApiFuncGraphOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphOutput)
}

func (i ApiFuncGraphArgs) ToApiFuncGraphPtrOutput() ApiFuncGraphPtrOutput {
	return i.ToApiFuncGraphPtrOutputWithContext(context.Background())
}

func (i ApiFuncGraphArgs) ToApiFuncGraphPtrOutputWithContext(ctx context.Context) ApiFuncGraphPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphOutput).ToApiFuncGraphPtrOutputWithContext(ctx)
}

// ApiFuncGraphPtrInput is an input type that accepts ApiFuncGraphArgs, ApiFuncGraphPtr and ApiFuncGraphPtrOutput values.
// You can construct a concrete instance of `ApiFuncGraphPtrInput` via:
//
//	        ApiFuncGraphArgs{...}
//
//	or:
//
//	        nil
type ApiFuncGraphPtrInput interface {
	pulumi.Input

	ToApiFuncGraphPtrOutput() ApiFuncGraphPtrOutput
	ToApiFuncGraphPtrOutputWithContext(context.Context) ApiFuncGraphPtrOutput
}

type apiFuncGraphPtrType ApiFuncGraphArgs

func ApiFuncGraphPtr(v *ApiFuncGraphArgs) ApiFuncGraphPtrInput {
	return (*apiFuncGraphPtrType)(v)
}

func (*apiFuncGraphPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiFuncGraph)(nil)).Elem()
}

func (i *apiFuncGraphPtrType) ToApiFuncGraphPtrOutput() ApiFuncGraphPtrOutput {
	return i.ToApiFuncGraphPtrOutputWithContext(context.Background())
}

func (i *apiFuncGraphPtrType) ToApiFuncGraphPtrOutputWithContext(ctx context.Context) ApiFuncGraphPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphPtrOutput)
}

type ApiFuncGraphOutput struct{ *pulumi.OutputState }

func (ApiFuncGraphOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFuncGraph)(nil)).Elem()
}

func (o ApiFuncGraphOutput) ToApiFuncGraphOutput() ApiFuncGraphOutput {
	return o
}

func (o ApiFuncGraphOutput) ToApiFuncGraphOutputWithContext(ctx context.Context) ApiFuncGraphOutput {
	return o
}

func (o ApiFuncGraphOutput) ToApiFuncGraphPtrOutput() ApiFuncGraphPtrOutput {
	return o.ToApiFuncGraphPtrOutputWithContext(context.Background())
}

func (o ApiFuncGraphOutput) ToApiFuncGraphPtrOutputWithContext(ctx context.Context) ApiFuncGraphPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiFuncGraph) *ApiFuncGraph {
		return &v
	}).(ApiFuncGraphPtrOutput)
}

// The ID of the backend custom authorization.
func (o ApiFuncGraphOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraph) *string { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// The alias URN of the FunctionGraph function.
func (o ApiFuncGraphOutput) FunctionAliasUrn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraph) *string { return v.FunctionAliasUrn }).(pulumi.StringPtrOutput)
}

// The URN of the FunctionGraph function.
func (o ApiFuncGraphOutput) FunctionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFuncGraph) string { return v.FunctionUrn }).(pulumi.StringOutput)
}

// The invocation type.
func (o ApiFuncGraphOutput) InvocationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraph) *string { return v.InvocationType }).(pulumi.StringPtrOutput)
}

// The network architecture (framework) type of the FunctionGraph function.
func (o ApiFuncGraphOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraph) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
func (o ApiFuncGraphOutput) RequestProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraph) *string { return v.RequestProtocol }).(pulumi.StringPtrOutput)
}

// The timeout for API requests to backend service.
func (o ApiFuncGraphOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiFuncGraph) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Specifies the version of the API. A maximum of 16 characters are allowed.
func (o ApiFuncGraphOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraph) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApiFuncGraphPtrOutput struct{ *pulumi.OutputState }

func (ApiFuncGraphPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiFuncGraph)(nil)).Elem()
}

func (o ApiFuncGraphPtrOutput) ToApiFuncGraphPtrOutput() ApiFuncGraphPtrOutput {
	return o
}

func (o ApiFuncGraphPtrOutput) ToApiFuncGraphPtrOutputWithContext(ctx context.Context) ApiFuncGraphPtrOutput {
	return o
}

func (o ApiFuncGraphPtrOutput) Elem() ApiFuncGraphOutput {
	return o.ApplyT(func(v *ApiFuncGraph) ApiFuncGraph {
		if v != nil {
			return *v
		}
		var ret ApiFuncGraph
		return ret
	}).(ApiFuncGraphOutput)
}

// The ID of the backend custom authorization.
func (o ApiFuncGraphPtrOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFuncGraph) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizerId
	}).(pulumi.StringPtrOutput)
}

// The alias URN of the FunctionGraph function.
func (o ApiFuncGraphPtrOutput) FunctionAliasUrn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFuncGraph) *string {
		if v == nil {
			return nil
		}
		return v.FunctionAliasUrn
	}).(pulumi.StringPtrOutput)
}

// The URN of the FunctionGraph function.
func (o ApiFuncGraphPtrOutput) FunctionUrn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFuncGraph) *string {
		if v == nil {
			return nil
		}
		return &v.FunctionUrn
	}).(pulumi.StringPtrOutput)
}

// The invocation type.
func (o ApiFuncGraphPtrOutput) InvocationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFuncGraph) *string {
		if v == nil {
			return nil
		}
		return v.InvocationType
	}).(pulumi.StringPtrOutput)
}

// The network architecture (framework) type of the FunctionGraph function.
func (o ApiFuncGraphPtrOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFuncGraph) *string {
		if v == nil {
			return nil
		}
		return v.NetworkType
	}).(pulumi.StringPtrOutput)
}

// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
func (o ApiFuncGraphPtrOutput) RequestProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFuncGraph) *string {
		if v == nil {
			return nil
		}
		return v.RequestProtocol
	}).(pulumi.StringPtrOutput)
}

// The timeout for API requests to backend service.
func (o ApiFuncGraphPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApiFuncGraph) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// Specifies the version of the API. A maximum of 16 characters are allowed.
func (o ApiFuncGraphPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiFuncGraph) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type ApiFuncGraphPolicy struct {
	// The ID of the backend custom authorization.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The configaiton list of the backend parameters.
	BackendParams []ApiFuncGraphPolicyBackendParam `pulumi:"backendParams"`
	// The policy conditions.
	Conditions []ApiFuncGraphPolicyCondition `pulumi:"conditions"`
	// The effective mode of the backend policy.
	EffectiveMode *string `pulumi:"effectiveMode"`
	// The alias URN of the FunctionGraph function.
	FunctionAliasUrn *string `pulumi:"functionAliasUrn"`
	// The URN of the FunctionGraph function.
	FunctionUrn string `pulumi:"functionUrn"`
	// The invocation mode of the FunctionGraph function.
	InvocationMode *string `pulumi:"invocationMode"`
	// The invocation mode of the FunctionGraph function.
	InvocationType *string `pulumi:"invocationType"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name string `pulumi:"name"`
	// The network (framework) type of the FunctionGraph function.
	NetworkType *string `pulumi:"networkType"`
	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	RequestProtocol *string `pulumi:"requestProtocol"`
	// The timeout for API requests to backend service.
	Timeout *int `pulumi:"timeout"`
	// Specifies the version of the API. A maximum of 16 characters are allowed.
	Version *string `pulumi:"version"`
}

// ApiFuncGraphPolicyInput is an input type that accepts ApiFuncGraphPolicyArgs and ApiFuncGraphPolicyOutput values.
// You can construct a concrete instance of `ApiFuncGraphPolicyInput` via:
//
//	ApiFuncGraphPolicyArgs{...}
type ApiFuncGraphPolicyInput interface {
	pulumi.Input

	ToApiFuncGraphPolicyOutput() ApiFuncGraphPolicyOutput
	ToApiFuncGraphPolicyOutputWithContext(context.Context) ApiFuncGraphPolicyOutput
}

type ApiFuncGraphPolicyArgs struct {
	// The ID of the backend custom authorization.
	AuthorizerId pulumi.StringPtrInput `pulumi:"authorizerId"`
	// The configaiton list of the backend parameters.
	BackendParams ApiFuncGraphPolicyBackendParamArrayInput `pulumi:"backendParams"`
	// The policy conditions.
	Conditions ApiFuncGraphPolicyConditionArrayInput `pulumi:"conditions"`
	// The effective mode of the backend policy.
	EffectiveMode pulumi.StringPtrInput `pulumi:"effectiveMode"`
	// The alias URN of the FunctionGraph function.
	FunctionAliasUrn pulumi.StringPtrInput `pulumi:"functionAliasUrn"`
	// The URN of the FunctionGraph function.
	FunctionUrn pulumi.StringInput `pulumi:"functionUrn"`
	// The invocation mode of the FunctionGraph function.
	InvocationMode pulumi.StringPtrInput `pulumi:"invocationMode"`
	// The invocation mode of the FunctionGraph function.
	InvocationType pulumi.StringPtrInput `pulumi:"invocationType"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name pulumi.StringInput `pulumi:"name"`
	// The network (framework) type of the FunctionGraph function.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	RequestProtocol pulumi.StringPtrInput `pulumi:"requestProtocol"`
	// The timeout for API requests to backend service.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Specifies the version of the API. A maximum of 16 characters are allowed.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (ApiFuncGraphPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFuncGraphPolicy)(nil)).Elem()
}

func (i ApiFuncGraphPolicyArgs) ToApiFuncGraphPolicyOutput() ApiFuncGraphPolicyOutput {
	return i.ToApiFuncGraphPolicyOutputWithContext(context.Background())
}

func (i ApiFuncGraphPolicyArgs) ToApiFuncGraphPolicyOutputWithContext(ctx context.Context) ApiFuncGraphPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphPolicyOutput)
}

// ApiFuncGraphPolicyArrayInput is an input type that accepts ApiFuncGraphPolicyArray and ApiFuncGraphPolicyArrayOutput values.
// You can construct a concrete instance of `ApiFuncGraphPolicyArrayInput` via:
//
//	ApiFuncGraphPolicyArray{ ApiFuncGraphPolicyArgs{...} }
type ApiFuncGraphPolicyArrayInput interface {
	pulumi.Input

	ToApiFuncGraphPolicyArrayOutput() ApiFuncGraphPolicyArrayOutput
	ToApiFuncGraphPolicyArrayOutputWithContext(context.Context) ApiFuncGraphPolicyArrayOutput
}

type ApiFuncGraphPolicyArray []ApiFuncGraphPolicyInput

func (ApiFuncGraphPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiFuncGraphPolicy)(nil)).Elem()
}

func (i ApiFuncGraphPolicyArray) ToApiFuncGraphPolicyArrayOutput() ApiFuncGraphPolicyArrayOutput {
	return i.ToApiFuncGraphPolicyArrayOutputWithContext(context.Background())
}

func (i ApiFuncGraphPolicyArray) ToApiFuncGraphPolicyArrayOutputWithContext(ctx context.Context) ApiFuncGraphPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphPolicyArrayOutput)
}

type ApiFuncGraphPolicyOutput struct{ *pulumi.OutputState }

func (ApiFuncGraphPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFuncGraphPolicy)(nil)).Elem()
}

func (o ApiFuncGraphPolicyOutput) ToApiFuncGraphPolicyOutput() ApiFuncGraphPolicyOutput {
	return o
}

func (o ApiFuncGraphPolicyOutput) ToApiFuncGraphPolicyOutputWithContext(ctx context.Context) ApiFuncGraphPolicyOutput {
	return o
}

// The ID of the backend custom authorization.
func (o ApiFuncGraphPolicyOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *string { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// The configaiton list of the backend parameters.
func (o ApiFuncGraphPolicyOutput) BackendParams() ApiFuncGraphPolicyBackendParamArrayOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) []ApiFuncGraphPolicyBackendParam { return v.BackendParams }).(ApiFuncGraphPolicyBackendParamArrayOutput)
}

// The policy conditions.
func (o ApiFuncGraphPolicyOutput) Conditions() ApiFuncGraphPolicyConditionArrayOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) []ApiFuncGraphPolicyCondition { return v.Conditions }).(ApiFuncGraphPolicyConditionArrayOutput)
}

// The effective mode of the backend policy.
func (o ApiFuncGraphPolicyOutput) EffectiveMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *string { return v.EffectiveMode }).(pulumi.StringPtrOutput)
}

// The alias URN of the FunctionGraph function.
func (o ApiFuncGraphPolicyOutput) FunctionAliasUrn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *string { return v.FunctionAliasUrn }).(pulumi.StringPtrOutput)
}

// The URN of the FunctionGraph function.
func (o ApiFuncGraphPolicyOutput) FunctionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) string { return v.FunctionUrn }).(pulumi.StringOutput)
}

// The invocation mode of the FunctionGraph function.
func (o ApiFuncGraphPolicyOutput) InvocationMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *string { return v.InvocationMode }).(pulumi.StringPtrOutput)
}

// The invocation mode of the FunctionGraph function.
func (o ApiFuncGraphPolicyOutput) InvocationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *string { return v.InvocationType }).(pulumi.StringPtrOutput)
}

// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
// letter. Only letters, digits, and underscores (_) are allowed.
func (o ApiFuncGraphPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// The network (framework) type of the FunctionGraph function.
func (o ApiFuncGraphPolicyOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
func (o ApiFuncGraphPolicyOutput) RequestProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *string { return v.RequestProtocol }).(pulumi.StringPtrOutput)
}

// The timeout for API requests to backend service.
func (o ApiFuncGraphPolicyOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Specifies the version of the API. A maximum of 16 characters are allowed.
func (o ApiFuncGraphPolicyOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicy) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type ApiFuncGraphPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApiFuncGraphPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiFuncGraphPolicy)(nil)).Elem()
}

func (o ApiFuncGraphPolicyArrayOutput) ToApiFuncGraphPolicyArrayOutput() ApiFuncGraphPolicyArrayOutput {
	return o
}

func (o ApiFuncGraphPolicyArrayOutput) ToApiFuncGraphPolicyArrayOutputWithContext(ctx context.Context) ApiFuncGraphPolicyArrayOutput {
	return o
}

func (o ApiFuncGraphPolicyArrayOutput) Index(i pulumi.IntInput) ApiFuncGraphPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiFuncGraphPolicy {
		return vs[0].([]ApiFuncGraphPolicy)[vs[1].(int)]
	}).(ApiFuncGraphPolicyOutput)
}

type ApiFuncGraphPolicyBackendParam struct {
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description *string `pulumi:"description"`
	// Where the parameter is located.
	Location string `pulumi:"location"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name            string  `pulumi:"name"`
	SystemParamType *string `pulumi:"systemParamType"`
	// The parameter type.
	Type string `pulumi:"type"`
	// The value of the parameter
	Value string `pulumi:"value"`
}

// ApiFuncGraphPolicyBackendParamInput is an input type that accepts ApiFuncGraphPolicyBackendParamArgs and ApiFuncGraphPolicyBackendParamOutput values.
// You can construct a concrete instance of `ApiFuncGraphPolicyBackendParamInput` via:
//
//	ApiFuncGraphPolicyBackendParamArgs{...}
type ApiFuncGraphPolicyBackendParamInput interface {
	pulumi.Input

	ToApiFuncGraphPolicyBackendParamOutput() ApiFuncGraphPolicyBackendParamOutput
	ToApiFuncGraphPolicyBackendParamOutputWithContext(context.Context) ApiFuncGraphPolicyBackendParamOutput
}

type ApiFuncGraphPolicyBackendParamArgs struct {
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Where the parameter is located.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name            pulumi.StringInput    `pulumi:"name"`
	SystemParamType pulumi.StringPtrInput `pulumi:"systemParamType"`
	// The parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the parameter
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiFuncGraphPolicyBackendParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFuncGraphPolicyBackendParam)(nil)).Elem()
}

func (i ApiFuncGraphPolicyBackendParamArgs) ToApiFuncGraphPolicyBackendParamOutput() ApiFuncGraphPolicyBackendParamOutput {
	return i.ToApiFuncGraphPolicyBackendParamOutputWithContext(context.Background())
}

func (i ApiFuncGraphPolicyBackendParamArgs) ToApiFuncGraphPolicyBackendParamOutputWithContext(ctx context.Context) ApiFuncGraphPolicyBackendParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphPolicyBackendParamOutput)
}

// ApiFuncGraphPolicyBackendParamArrayInput is an input type that accepts ApiFuncGraphPolicyBackendParamArray and ApiFuncGraphPolicyBackendParamArrayOutput values.
// You can construct a concrete instance of `ApiFuncGraphPolicyBackendParamArrayInput` via:
//
//	ApiFuncGraphPolicyBackendParamArray{ ApiFuncGraphPolicyBackendParamArgs{...} }
type ApiFuncGraphPolicyBackendParamArrayInput interface {
	pulumi.Input

	ToApiFuncGraphPolicyBackendParamArrayOutput() ApiFuncGraphPolicyBackendParamArrayOutput
	ToApiFuncGraphPolicyBackendParamArrayOutputWithContext(context.Context) ApiFuncGraphPolicyBackendParamArrayOutput
}

type ApiFuncGraphPolicyBackendParamArray []ApiFuncGraphPolicyBackendParamInput

func (ApiFuncGraphPolicyBackendParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiFuncGraphPolicyBackendParam)(nil)).Elem()
}

func (i ApiFuncGraphPolicyBackendParamArray) ToApiFuncGraphPolicyBackendParamArrayOutput() ApiFuncGraphPolicyBackendParamArrayOutput {
	return i.ToApiFuncGraphPolicyBackendParamArrayOutputWithContext(context.Background())
}

func (i ApiFuncGraphPolicyBackendParamArray) ToApiFuncGraphPolicyBackendParamArrayOutputWithContext(ctx context.Context) ApiFuncGraphPolicyBackendParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphPolicyBackendParamArrayOutput)
}

type ApiFuncGraphPolicyBackendParamOutput struct{ *pulumi.OutputState }

func (ApiFuncGraphPolicyBackendParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFuncGraphPolicyBackendParam)(nil)).Elem()
}

func (o ApiFuncGraphPolicyBackendParamOutput) ToApiFuncGraphPolicyBackendParamOutput() ApiFuncGraphPolicyBackendParamOutput {
	return o
}

func (o ApiFuncGraphPolicyBackendParamOutput) ToApiFuncGraphPolicyBackendParamOutputWithContext(ctx context.Context) ApiFuncGraphPolicyBackendParamOutput {
	return o
}

// Specifies the description of the API. The description cannot exceed 255 characters.
func (o ApiFuncGraphPolicyBackendParamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyBackendParam) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Where the parameter is located.
func (o ApiFuncGraphPolicyBackendParamOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyBackendParam) string { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
// letter. Only letters, digits, and underscores (_) are allowed.
func (o ApiFuncGraphPolicyBackendParamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyBackendParam) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApiFuncGraphPolicyBackendParamOutput) SystemParamType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyBackendParam) *string { return v.SystemParamType }).(pulumi.StringPtrOutput)
}

// The parameter type.
func (o ApiFuncGraphPolicyBackendParamOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyBackendParam) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the parameter
func (o ApiFuncGraphPolicyBackendParamOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyBackendParam) string { return v.Value }).(pulumi.StringOutput)
}

type ApiFuncGraphPolicyBackendParamArrayOutput struct{ *pulumi.OutputState }

func (ApiFuncGraphPolicyBackendParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiFuncGraphPolicyBackendParam)(nil)).Elem()
}

func (o ApiFuncGraphPolicyBackendParamArrayOutput) ToApiFuncGraphPolicyBackendParamArrayOutput() ApiFuncGraphPolicyBackendParamArrayOutput {
	return o
}

func (o ApiFuncGraphPolicyBackendParamArrayOutput) ToApiFuncGraphPolicyBackendParamArrayOutputWithContext(ctx context.Context) ApiFuncGraphPolicyBackendParamArrayOutput {
	return o
}

func (o ApiFuncGraphPolicyBackendParamArrayOutput) Index(i pulumi.IntInput) ApiFuncGraphPolicyBackendParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiFuncGraphPolicyBackendParam {
		return vs[0].([]ApiFuncGraphPolicyBackendParam)[vs[1].(int)]
	}).(ApiFuncGraphPolicyBackendParamOutput)
}

type ApiFuncGraphPolicyCondition struct {
	// The cookie parameter name.
	CookieName *string `pulumi:"cookieName"`
	// The frontend authentication parameter name.
	FrontendAuthorizerName *string `pulumi:"frontendAuthorizerName"`
	// The location of a parameter generated after orchestration.
	MappedParamLocation *string `pulumi:"mappedParamLocation"`
	// The name of a parameter generated after orchestration.
	MappedParamName *string `pulumi:"mappedParamName"`
	// The request parameter name.
	ParamName *string `pulumi:"paramName"`
	// The type of the backend policy.
	Source *string `pulumi:"source"`
	// The gateway built-in parameter name.
	SysName *string `pulumi:"sysName"`
	// The condition type.
	Type *string `pulumi:"type"`
	// The value of the backend policy.
	Value string `pulumi:"value"`
}

// ApiFuncGraphPolicyConditionInput is an input type that accepts ApiFuncGraphPolicyConditionArgs and ApiFuncGraphPolicyConditionOutput values.
// You can construct a concrete instance of `ApiFuncGraphPolicyConditionInput` via:
//
//	ApiFuncGraphPolicyConditionArgs{...}
type ApiFuncGraphPolicyConditionInput interface {
	pulumi.Input

	ToApiFuncGraphPolicyConditionOutput() ApiFuncGraphPolicyConditionOutput
	ToApiFuncGraphPolicyConditionOutputWithContext(context.Context) ApiFuncGraphPolicyConditionOutput
}

type ApiFuncGraphPolicyConditionArgs struct {
	// The cookie parameter name.
	CookieName pulumi.StringPtrInput `pulumi:"cookieName"`
	// The frontend authentication parameter name.
	FrontendAuthorizerName pulumi.StringPtrInput `pulumi:"frontendAuthorizerName"`
	// The location of a parameter generated after orchestration.
	MappedParamLocation pulumi.StringPtrInput `pulumi:"mappedParamLocation"`
	// The name of a parameter generated after orchestration.
	MappedParamName pulumi.StringPtrInput `pulumi:"mappedParamName"`
	// The request parameter name.
	ParamName pulumi.StringPtrInput `pulumi:"paramName"`
	// The type of the backend policy.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The gateway built-in parameter name.
	SysName pulumi.StringPtrInput `pulumi:"sysName"`
	// The condition type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the backend policy.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiFuncGraphPolicyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFuncGraphPolicyCondition)(nil)).Elem()
}

func (i ApiFuncGraphPolicyConditionArgs) ToApiFuncGraphPolicyConditionOutput() ApiFuncGraphPolicyConditionOutput {
	return i.ToApiFuncGraphPolicyConditionOutputWithContext(context.Background())
}

func (i ApiFuncGraphPolicyConditionArgs) ToApiFuncGraphPolicyConditionOutputWithContext(ctx context.Context) ApiFuncGraphPolicyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphPolicyConditionOutput)
}

// ApiFuncGraphPolicyConditionArrayInput is an input type that accepts ApiFuncGraphPolicyConditionArray and ApiFuncGraphPolicyConditionArrayOutput values.
// You can construct a concrete instance of `ApiFuncGraphPolicyConditionArrayInput` via:
//
//	ApiFuncGraphPolicyConditionArray{ ApiFuncGraphPolicyConditionArgs{...} }
type ApiFuncGraphPolicyConditionArrayInput interface {
	pulumi.Input

	ToApiFuncGraphPolicyConditionArrayOutput() ApiFuncGraphPolicyConditionArrayOutput
	ToApiFuncGraphPolicyConditionArrayOutputWithContext(context.Context) ApiFuncGraphPolicyConditionArrayOutput
}

type ApiFuncGraphPolicyConditionArray []ApiFuncGraphPolicyConditionInput

func (ApiFuncGraphPolicyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiFuncGraphPolicyCondition)(nil)).Elem()
}

func (i ApiFuncGraphPolicyConditionArray) ToApiFuncGraphPolicyConditionArrayOutput() ApiFuncGraphPolicyConditionArrayOutput {
	return i.ToApiFuncGraphPolicyConditionArrayOutputWithContext(context.Background())
}

func (i ApiFuncGraphPolicyConditionArray) ToApiFuncGraphPolicyConditionArrayOutputWithContext(ctx context.Context) ApiFuncGraphPolicyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiFuncGraphPolicyConditionArrayOutput)
}

type ApiFuncGraphPolicyConditionOutput struct{ *pulumi.OutputState }

func (ApiFuncGraphPolicyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiFuncGraphPolicyCondition)(nil)).Elem()
}

func (o ApiFuncGraphPolicyConditionOutput) ToApiFuncGraphPolicyConditionOutput() ApiFuncGraphPolicyConditionOutput {
	return o
}

func (o ApiFuncGraphPolicyConditionOutput) ToApiFuncGraphPolicyConditionOutputWithContext(ctx context.Context) ApiFuncGraphPolicyConditionOutput {
	return o
}

// The cookie parameter name.
func (o ApiFuncGraphPolicyConditionOutput) CookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) *string { return v.CookieName }).(pulumi.StringPtrOutput)
}

// The frontend authentication parameter name.
func (o ApiFuncGraphPolicyConditionOutput) FrontendAuthorizerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) *string { return v.FrontendAuthorizerName }).(pulumi.StringPtrOutput)
}

// The location of a parameter generated after orchestration.
func (o ApiFuncGraphPolicyConditionOutput) MappedParamLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) *string { return v.MappedParamLocation }).(pulumi.StringPtrOutput)
}

// The name of a parameter generated after orchestration.
func (o ApiFuncGraphPolicyConditionOutput) MappedParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) *string { return v.MappedParamName }).(pulumi.StringPtrOutput)
}

// The request parameter name.
func (o ApiFuncGraphPolicyConditionOutput) ParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) *string { return v.ParamName }).(pulumi.StringPtrOutput)
}

// The type of the backend policy.
func (o ApiFuncGraphPolicyConditionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The gateway built-in parameter name.
func (o ApiFuncGraphPolicyConditionOutput) SysName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) *string { return v.SysName }).(pulumi.StringPtrOutput)
}

// The condition type.
func (o ApiFuncGraphPolicyConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the backend policy.
func (o ApiFuncGraphPolicyConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiFuncGraphPolicyCondition) string { return v.Value }).(pulumi.StringOutput)
}

type ApiFuncGraphPolicyConditionArrayOutput struct{ *pulumi.OutputState }

func (ApiFuncGraphPolicyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiFuncGraphPolicyCondition)(nil)).Elem()
}

func (o ApiFuncGraphPolicyConditionArrayOutput) ToApiFuncGraphPolicyConditionArrayOutput() ApiFuncGraphPolicyConditionArrayOutput {
	return o
}

func (o ApiFuncGraphPolicyConditionArrayOutput) ToApiFuncGraphPolicyConditionArrayOutputWithContext(ctx context.Context) ApiFuncGraphPolicyConditionArrayOutput {
	return o
}

func (o ApiFuncGraphPolicyConditionArrayOutput) Index(i pulumi.IntInput) ApiFuncGraphPolicyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiFuncGraphPolicyCondition {
		return vs[0].([]ApiFuncGraphPolicyCondition)[vs[1].(int)]
	}).(ApiFuncGraphPolicyConditionOutput)
}

type ApiMock struct {
	// The ID of the backend custom authorization.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The response content of the mock.
	Response *string `pulumi:"response"`
	// The custom status code of the mock response.
	StatusCode *int `pulumi:"statusCode"`
}

// ApiMockInput is an input type that accepts ApiMockArgs and ApiMockOutput values.
// You can construct a concrete instance of `ApiMockInput` via:
//
//	ApiMockArgs{...}
type ApiMockInput interface {
	pulumi.Input

	ToApiMockOutput() ApiMockOutput
	ToApiMockOutputWithContext(context.Context) ApiMockOutput
}

type ApiMockArgs struct {
	// The ID of the backend custom authorization.
	AuthorizerId pulumi.StringPtrInput `pulumi:"authorizerId"`
	// The response content of the mock.
	Response pulumi.StringPtrInput `pulumi:"response"`
	// The custom status code of the mock response.
	StatusCode pulumi.IntPtrInput `pulumi:"statusCode"`
}

func (ApiMockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMock)(nil)).Elem()
}

func (i ApiMockArgs) ToApiMockOutput() ApiMockOutput {
	return i.ToApiMockOutputWithContext(context.Background())
}

func (i ApiMockArgs) ToApiMockOutputWithContext(ctx context.Context) ApiMockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockOutput)
}

func (i ApiMockArgs) ToApiMockPtrOutput() ApiMockPtrOutput {
	return i.ToApiMockPtrOutputWithContext(context.Background())
}

func (i ApiMockArgs) ToApiMockPtrOutputWithContext(ctx context.Context) ApiMockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockOutput).ToApiMockPtrOutputWithContext(ctx)
}

// ApiMockPtrInput is an input type that accepts ApiMockArgs, ApiMockPtr and ApiMockPtrOutput values.
// You can construct a concrete instance of `ApiMockPtrInput` via:
//
//	        ApiMockArgs{...}
//
//	or:
//
//	        nil
type ApiMockPtrInput interface {
	pulumi.Input

	ToApiMockPtrOutput() ApiMockPtrOutput
	ToApiMockPtrOutputWithContext(context.Context) ApiMockPtrOutput
}

type apiMockPtrType ApiMockArgs

func ApiMockPtr(v *ApiMockArgs) ApiMockPtrInput {
	return (*apiMockPtrType)(v)
}

func (*apiMockPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiMock)(nil)).Elem()
}

func (i *apiMockPtrType) ToApiMockPtrOutput() ApiMockPtrOutput {
	return i.ToApiMockPtrOutputWithContext(context.Background())
}

func (i *apiMockPtrType) ToApiMockPtrOutputWithContext(ctx context.Context) ApiMockPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockPtrOutput)
}

type ApiMockOutput struct{ *pulumi.OutputState }

func (ApiMockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMock)(nil)).Elem()
}

func (o ApiMockOutput) ToApiMockOutput() ApiMockOutput {
	return o
}

func (o ApiMockOutput) ToApiMockOutputWithContext(ctx context.Context) ApiMockOutput {
	return o
}

func (o ApiMockOutput) ToApiMockPtrOutput() ApiMockPtrOutput {
	return o.ToApiMockPtrOutputWithContext(context.Background())
}

func (o ApiMockOutput) ToApiMockPtrOutputWithContext(ctx context.Context) ApiMockPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiMock) *ApiMock {
		return &v
	}).(ApiMockPtrOutput)
}

// The ID of the backend custom authorization.
func (o ApiMockOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMock) *string { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// The response content of the mock.
func (o ApiMockOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMock) *string { return v.Response }).(pulumi.StringPtrOutput)
}

// The custom status code of the mock response.
func (o ApiMockOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiMock) *int { return v.StatusCode }).(pulumi.IntPtrOutput)
}

type ApiMockPtrOutput struct{ *pulumi.OutputState }

func (ApiMockPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiMock)(nil)).Elem()
}

func (o ApiMockPtrOutput) ToApiMockPtrOutput() ApiMockPtrOutput {
	return o
}

func (o ApiMockPtrOutput) ToApiMockPtrOutputWithContext(ctx context.Context) ApiMockPtrOutput {
	return o
}

func (o ApiMockPtrOutput) Elem() ApiMockOutput {
	return o.ApplyT(func(v *ApiMock) ApiMock {
		if v != nil {
			return *v
		}
		var ret ApiMock
		return ret
	}).(ApiMockOutput)
}

// The ID of the backend custom authorization.
func (o ApiMockPtrOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiMock) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizerId
	}).(pulumi.StringPtrOutput)
}

// The response content of the mock.
func (o ApiMockPtrOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiMock) *string {
		if v == nil {
			return nil
		}
		return v.Response
	}).(pulumi.StringPtrOutput)
}

// The custom status code of the mock response.
func (o ApiMockPtrOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApiMock) *int {
		if v == nil {
			return nil
		}
		return v.StatusCode
	}).(pulumi.IntPtrOutput)
}

type ApiMockPolicy struct {
	// The ID of the backend custom authorization.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The configuration list of backend parameters.
	BackendParams []ApiMockPolicyBackendParam `pulumi:"backendParams"`
	// The policy conditions.
	Conditions []ApiMockPolicyCondition `pulumi:"conditions"`
	// The effective mode of the backend policy.
	EffectiveMode *string `pulumi:"effectiveMode"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name string `pulumi:"name"`
	// The response content of the mock.
	Response *string `pulumi:"response"`
	// The custom status code of the mock response.
	StatusCode *int `pulumi:"statusCode"`
}

// ApiMockPolicyInput is an input type that accepts ApiMockPolicyArgs and ApiMockPolicyOutput values.
// You can construct a concrete instance of `ApiMockPolicyInput` via:
//
//	ApiMockPolicyArgs{...}
type ApiMockPolicyInput interface {
	pulumi.Input

	ToApiMockPolicyOutput() ApiMockPolicyOutput
	ToApiMockPolicyOutputWithContext(context.Context) ApiMockPolicyOutput
}

type ApiMockPolicyArgs struct {
	// The ID of the backend custom authorization.
	AuthorizerId pulumi.StringPtrInput `pulumi:"authorizerId"`
	// The configuration list of backend parameters.
	BackendParams ApiMockPolicyBackendParamArrayInput `pulumi:"backendParams"`
	// The policy conditions.
	Conditions ApiMockPolicyConditionArrayInput `pulumi:"conditions"`
	// The effective mode of the backend policy.
	EffectiveMode pulumi.StringPtrInput `pulumi:"effectiveMode"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name pulumi.StringInput `pulumi:"name"`
	// The response content of the mock.
	Response pulumi.StringPtrInput `pulumi:"response"`
	// The custom status code of the mock response.
	StatusCode pulumi.IntPtrInput `pulumi:"statusCode"`
}

func (ApiMockPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMockPolicy)(nil)).Elem()
}

func (i ApiMockPolicyArgs) ToApiMockPolicyOutput() ApiMockPolicyOutput {
	return i.ToApiMockPolicyOutputWithContext(context.Background())
}

func (i ApiMockPolicyArgs) ToApiMockPolicyOutputWithContext(ctx context.Context) ApiMockPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockPolicyOutput)
}

// ApiMockPolicyArrayInput is an input type that accepts ApiMockPolicyArray and ApiMockPolicyArrayOutput values.
// You can construct a concrete instance of `ApiMockPolicyArrayInput` via:
//
//	ApiMockPolicyArray{ ApiMockPolicyArgs{...} }
type ApiMockPolicyArrayInput interface {
	pulumi.Input

	ToApiMockPolicyArrayOutput() ApiMockPolicyArrayOutput
	ToApiMockPolicyArrayOutputWithContext(context.Context) ApiMockPolicyArrayOutput
}

type ApiMockPolicyArray []ApiMockPolicyInput

func (ApiMockPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiMockPolicy)(nil)).Elem()
}

func (i ApiMockPolicyArray) ToApiMockPolicyArrayOutput() ApiMockPolicyArrayOutput {
	return i.ToApiMockPolicyArrayOutputWithContext(context.Background())
}

func (i ApiMockPolicyArray) ToApiMockPolicyArrayOutputWithContext(ctx context.Context) ApiMockPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockPolicyArrayOutput)
}

type ApiMockPolicyOutput struct{ *pulumi.OutputState }

func (ApiMockPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMockPolicy)(nil)).Elem()
}

func (o ApiMockPolicyOutput) ToApiMockPolicyOutput() ApiMockPolicyOutput {
	return o
}

func (o ApiMockPolicyOutput) ToApiMockPolicyOutputWithContext(ctx context.Context) ApiMockPolicyOutput {
	return o
}

// The ID of the backend custom authorization.
func (o ApiMockPolicyOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicy) *string { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// The configuration list of backend parameters.
func (o ApiMockPolicyOutput) BackendParams() ApiMockPolicyBackendParamArrayOutput {
	return o.ApplyT(func(v ApiMockPolicy) []ApiMockPolicyBackendParam { return v.BackendParams }).(ApiMockPolicyBackendParamArrayOutput)
}

// The policy conditions.
func (o ApiMockPolicyOutput) Conditions() ApiMockPolicyConditionArrayOutput {
	return o.ApplyT(func(v ApiMockPolicy) []ApiMockPolicyCondition { return v.Conditions }).(ApiMockPolicyConditionArrayOutput)
}

// The effective mode of the backend policy.
func (o ApiMockPolicyOutput) EffectiveMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicy) *string { return v.EffectiveMode }).(pulumi.StringPtrOutput)
}

// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
// letter. Only letters, digits, and underscores (_) are allowed.
func (o ApiMockPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiMockPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// The response content of the mock.
func (o ApiMockPolicyOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicy) *string { return v.Response }).(pulumi.StringPtrOutput)
}

// The custom status code of the mock response.
func (o ApiMockPolicyOutput) StatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiMockPolicy) *int { return v.StatusCode }).(pulumi.IntPtrOutput)
}

type ApiMockPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApiMockPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiMockPolicy)(nil)).Elem()
}

func (o ApiMockPolicyArrayOutput) ToApiMockPolicyArrayOutput() ApiMockPolicyArrayOutput {
	return o
}

func (o ApiMockPolicyArrayOutput) ToApiMockPolicyArrayOutputWithContext(ctx context.Context) ApiMockPolicyArrayOutput {
	return o
}

func (o ApiMockPolicyArrayOutput) Index(i pulumi.IntInput) ApiMockPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiMockPolicy {
		return vs[0].([]ApiMockPolicy)[vs[1].(int)]
	}).(ApiMockPolicyOutput)
}

type ApiMockPolicyBackendParam struct {
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description *string `pulumi:"description"`
	// Where the parameter is located.
	Location string `pulumi:"location"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name            string  `pulumi:"name"`
	SystemParamType *string `pulumi:"systemParamType"`
	// The parameter type.
	Type string `pulumi:"type"`
	// The value of the parameter
	Value string `pulumi:"value"`
}

// ApiMockPolicyBackendParamInput is an input type that accepts ApiMockPolicyBackendParamArgs and ApiMockPolicyBackendParamOutput values.
// You can construct a concrete instance of `ApiMockPolicyBackendParamInput` via:
//
//	ApiMockPolicyBackendParamArgs{...}
type ApiMockPolicyBackendParamInput interface {
	pulumi.Input

	ToApiMockPolicyBackendParamOutput() ApiMockPolicyBackendParamOutput
	ToApiMockPolicyBackendParamOutputWithContext(context.Context) ApiMockPolicyBackendParamOutput
}

type ApiMockPolicyBackendParamArgs struct {
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Where the parameter is located.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name            pulumi.StringInput    `pulumi:"name"`
	SystemParamType pulumi.StringPtrInput `pulumi:"systemParamType"`
	// The parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the parameter
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiMockPolicyBackendParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMockPolicyBackendParam)(nil)).Elem()
}

func (i ApiMockPolicyBackendParamArgs) ToApiMockPolicyBackendParamOutput() ApiMockPolicyBackendParamOutput {
	return i.ToApiMockPolicyBackendParamOutputWithContext(context.Background())
}

func (i ApiMockPolicyBackendParamArgs) ToApiMockPolicyBackendParamOutputWithContext(ctx context.Context) ApiMockPolicyBackendParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockPolicyBackendParamOutput)
}

// ApiMockPolicyBackendParamArrayInput is an input type that accepts ApiMockPolicyBackendParamArray and ApiMockPolicyBackendParamArrayOutput values.
// You can construct a concrete instance of `ApiMockPolicyBackendParamArrayInput` via:
//
//	ApiMockPolicyBackendParamArray{ ApiMockPolicyBackendParamArgs{...} }
type ApiMockPolicyBackendParamArrayInput interface {
	pulumi.Input

	ToApiMockPolicyBackendParamArrayOutput() ApiMockPolicyBackendParamArrayOutput
	ToApiMockPolicyBackendParamArrayOutputWithContext(context.Context) ApiMockPolicyBackendParamArrayOutput
}

type ApiMockPolicyBackendParamArray []ApiMockPolicyBackendParamInput

func (ApiMockPolicyBackendParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiMockPolicyBackendParam)(nil)).Elem()
}

func (i ApiMockPolicyBackendParamArray) ToApiMockPolicyBackendParamArrayOutput() ApiMockPolicyBackendParamArrayOutput {
	return i.ToApiMockPolicyBackendParamArrayOutputWithContext(context.Background())
}

func (i ApiMockPolicyBackendParamArray) ToApiMockPolicyBackendParamArrayOutputWithContext(ctx context.Context) ApiMockPolicyBackendParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockPolicyBackendParamArrayOutput)
}

type ApiMockPolicyBackendParamOutput struct{ *pulumi.OutputState }

func (ApiMockPolicyBackendParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMockPolicyBackendParam)(nil)).Elem()
}

func (o ApiMockPolicyBackendParamOutput) ToApiMockPolicyBackendParamOutput() ApiMockPolicyBackendParamOutput {
	return o
}

func (o ApiMockPolicyBackendParamOutput) ToApiMockPolicyBackendParamOutputWithContext(ctx context.Context) ApiMockPolicyBackendParamOutput {
	return o
}

// Specifies the description of the API. The description cannot exceed 255 characters.
func (o ApiMockPolicyBackendParamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyBackendParam) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Where the parameter is located.
func (o ApiMockPolicyBackendParamOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ApiMockPolicyBackendParam) string { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
// letter. Only letters, digits, and underscores (_) are allowed.
func (o ApiMockPolicyBackendParamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiMockPolicyBackendParam) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApiMockPolicyBackendParamOutput) SystemParamType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyBackendParam) *string { return v.SystemParamType }).(pulumi.StringPtrOutput)
}

// The parameter type.
func (o ApiMockPolicyBackendParamOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApiMockPolicyBackendParam) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the parameter
func (o ApiMockPolicyBackendParamOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiMockPolicyBackendParam) string { return v.Value }).(pulumi.StringOutput)
}

type ApiMockPolicyBackendParamArrayOutput struct{ *pulumi.OutputState }

func (ApiMockPolicyBackendParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiMockPolicyBackendParam)(nil)).Elem()
}

func (o ApiMockPolicyBackendParamArrayOutput) ToApiMockPolicyBackendParamArrayOutput() ApiMockPolicyBackendParamArrayOutput {
	return o
}

func (o ApiMockPolicyBackendParamArrayOutput) ToApiMockPolicyBackendParamArrayOutputWithContext(ctx context.Context) ApiMockPolicyBackendParamArrayOutput {
	return o
}

func (o ApiMockPolicyBackendParamArrayOutput) Index(i pulumi.IntInput) ApiMockPolicyBackendParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiMockPolicyBackendParam {
		return vs[0].([]ApiMockPolicyBackendParam)[vs[1].(int)]
	}).(ApiMockPolicyBackendParamOutput)
}

type ApiMockPolicyCondition struct {
	// The cookie parameter name.
	CookieName *string `pulumi:"cookieName"`
	// The frontend authentication parameter name.
	FrontendAuthorizerName *string `pulumi:"frontendAuthorizerName"`
	// The location of a parameter generated after orchestration.
	MappedParamLocation *string `pulumi:"mappedParamLocation"`
	// The name of a parameter generated after orchestration.
	MappedParamName *string `pulumi:"mappedParamName"`
	// The request parameter name.
	ParamName *string `pulumi:"paramName"`
	// The type of the backend policy.
	Source *string `pulumi:"source"`
	// The gateway built-in parameter name.
	SysName *string `pulumi:"sysName"`
	// The condition type.
	Type *string `pulumi:"type"`
	// The value of the backend policy.
	Value string `pulumi:"value"`
}

// ApiMockPolicyConditionInput is an input type that accepts ApiMockPolicyConditionArgs and ApiMockPolicyConditionOutput values.
// You can construct a concrete instance of `ApiMockPolicyConditionInput` via:
//
//	ApiMockPolicyConditionArgs{...}
type ApiMockPolicyConditionInput interface {
	pulumi.Input

	ToApiMockPolicyConditionOutput() ApiMockPolicyConditionOutput
	ToApiMockPolicyConditionOutputWithContext(context.Context) ApiMockPolicyConditionOutput
}

type ApiMockPolicyConditionArgs struct {
	// The cookie parameter name.
	CookieName pulumi.StringPtrInput `pulumi:"cookieName"`
	// The frontend authentication parameter name.
	FrontendAuthorizerName pulumi.StringPtrInput `pulumi:"frontendAuthorizerName"`
	// The location of a parameter generated after orchestration.
	MappedParamLocation pulumi.StringPtrInput `pulumi:"mappedParamLocation"`
	// The name of a parameter generated after orchestration.
	MappedParamName pulumi.StringPtrInput `pulumi:"mappedParamName"`
	// The request parameter name.
	ParamName pulumi.StringPtrInput `pulumi:"paramName"`
	// The type of the backend policy.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The gateway built-in parameter name.
	SysName pulumi.StringPtrInput `pulumi:"sysName"`
	// The condition type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the backend policy.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiMockPolicyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMockPolicyCondition)(nil)).Elem()
}

func (i ApiMockPolicyConditionArgs) ToApiMockPolicyConditionOutput() ApiMockPolicyConditionOutput {
	return i.ToApiMockPolicyConditionOutputWithContext(context.Background())
}

func (i ApiMockPolicyConditionArgs) ToApiMockPolicyConditionOutputWithContext(ctx context.Context) ApiMockPolicyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockPolicyConditionOutput)
}

// ApiMockPolicyConditionArrayInput is an input type that accepts ApiMockPolicyConditionArray and ApiMockPolicyConditionArrayOutput values.
// You can construct a concrete instance of `ApiMockPolicyConditionArrayInput` via:
//
//	ApiMockPolicyConditionArray{ ApiMockPolicyConditionArgs{...} }
type ApiMockPolicyConditionArrayInput interface {
	pulumi.Input

	ToApiMockPolicyConditionArrayOutput() ApiMockPolicyConditionArrayOutput
	ToApiMockPolicyConditionArrayOutputWithContext(context.Context) ApiMockPolicyConditionArrayOutput
}

type ApiMockPolicyConditionArray []ApiMockPolicyConditionInput

func (ApiMockPolicyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiMockPolicyCondition)(nil)).Elem()
}

func (i ApiMockPolicyConditionArray) ToApiMockPolicyConditionArrayOutput() ApiMockPolicyConditionArrayOutput {
	return i.ToApiMockPolicyConditionArrayOutputWithContext(context.Background())
}

func (i ApiMockPolicyConditionArray) ToApiMockPolicyConditionArrayOutputWithContext(ctx context.Context) ApiMockPolicyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMockPolicyConditionArrayOutput)
}

type ApiMockPolicyConditionOutput struct{ *pulumi.OutputState }

func (ApiMockPolicyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiMockPolicyCondition)(nil)).Elem()
}

func (o ApiMockPolicyConditionOutput) ToApiMockPolicyConditionOutput() ApiMockPolicyConditionOutput {
	return o
}

func (o ApiMockPolicyConditionOutput) ToApiMockPolicyConditionOutputWithContext(ctx context.Context) ApiMockPolicyConditionOutput {
	return o
}

// The cookie parameter name.
func (o ApiMockPolicyConditionOutput) CookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) *string { return v.CookieName }).(pulumi.StringPtrOutput)
}

// The frontend authentication parameter name.
func (o ApiMockPolicyConditionOutput) FrontendAuthorizerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) *string { return v.FrontendAuthorizerName }).(pulumi.StringPtrOutput)
}

// The location of a parameter generated after orchestration.
func (o ApiMockPolicyConditionOutput) MappedParamLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) *string { return v.MappedParamLocation }).(pulumi.StringPtrOutput)
}

// The name of a parameter generated after orchestration.
func (o ApiMockPolicyConditionOutput) MappedParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) *string { return v.MappedParamName }).(pulumi.StringPtrOutput)
}

// The request parameter name.
func (o ApiMockPolicyConditionOutput) ParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) *string { return v.ParamName }).(pulumi.StringPtrOutput)
}

// The type of the backend policy.
func (o ApiMockPolicyConditionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The gateway built-in parameter name.
func (o ApiMockPolicyConditionOutput) SysName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) *string { return v.SysName }).(pulumi.StringPtrOutput)
}

// The condition type.
func (o ApiMockPolicyConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the backend policy.
func (o ApiMockPolicyConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiMockPolicyCondition) string { return v.Value }).(pulumi.StringOutput)
}

type ApiMockPolicyConditionArrayOutput struct{ *pulumi.OutputState }

func (ApiMockPolicyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiMockPolicyCondition)(nil)).Elem()
}

func (o ApiMockPolicyConditionArrayOutput) ToApiMockPolicyConditionArrayOutput() ApiMockPolicyConditionArrayOutput {
	return o
}

func (o ApiMockPolicyConditionArrayOutput) ToApiMockPolicyConditionArrayOutputWithContext(ctx context.Context) ApiMockPolicyConditionArrayOutput {
	return o
}

func (o ApiMockPolicyConditionArrayOutput) Index(i pulumi.IntInput) ApiMockPolicyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiMockPolicyCondition {
		return vs[0].([]ApiMockPolicyCondition)[vs[1].(int)]
	}).(ApiMockPolicyConditionOutput)
}

type ApiRequestParam struct {
	// The default value of the parameter.
	Default *string `pulumi:"default"`
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description *string `pulumi:"description"`
	// The enumerated value.
	Enumeration *string `pulumi:"enumeration"`
	// The parameter example.
	Example *string `pulumi:"example"`
	// Where this parameter is located.
	Location *string `pulumi:"location"`
	// The maximum value or length (string parameter) for parameter.
	Maximum *int `pulumi:"maximum"`
	// The minimum value or length (string parameter) for parameter.
	Minimum *int `pulumi:"minimum"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name string `pulumi:"name"`
	// The list of orchestration rules that parameter used.
	Orchestrations []string `pulumi:"orchestrations"`
	// Whether to transparently transfer the parameter.
	Passthrough *bool `pulumi:"passthrough"`
	// Whether this parameter is required.
	Required *bool `pulumi:"required"`
	// The parameter type.
	Type *string `pulumi:"type"`
	// Whether to enable the parameter validation.
	ValidEnable *int `pulumi:"validEnable"`
}

// ApiRequestParamInput is an input type that accepts ApiRequestParamArgs and ApiRequestParamOutput values.
// You can construct a concrete instance of `ApiRequestParamInput` via:
//
//	ApiRequestParamArgs{...}
type ApiRequestParamInput interface {
	pulumi.Input

	ToApiRequestParamOutput() ApiRequestParamOutput
	ToApiRequestParamOutputWithContext(context.Context) ApiRequestParamOutput
}

type ApiRequestParamArgs struct {
	// The default value of the parameter.
	Default pulumi.StringPtrInput `pulumi:"default"`
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The enumerated value.
	Enumeration pulumi.StringPtrInput `pulumi:"enumeration"`
	// The parameter example.
	Example pulumi.StringPtrInput `pulumi:"example"`
	// Where this parameter is located.
	Location pulumi.StringPtrInput `pulumi:"location"`
	// The maximum value or length (string parameter) for parameter.
	Maximum pulumi.IntPtrInput `pulumi:"maximum"`
	// The minimum value or length (string parameter) for parameter.
	Minimum pulumi.IntPtrInput `pulumi:"minimum"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name pulumi.StringInput `pulumi:"name"`
	// The list of orchestration rules that parameter used.
	Orchestrations pulumi.StringArrayInput `pulumi:"orchestrations"`
	// Whether to transparently transfer the parameter.
	Passthrough pulumi.BoolPtrInput `pulumi:"passthrough"`
	// Whether this parameter is required.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// The parameter type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Whether to enable the parameter validation.
	ValidEnable pulumi.IntPtrInput `pulumi:"validEnable"`
}

func (ApiRequestParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiRequestParam)(nil)).Elem()
}

func (i ApiRequestParamArgs) ToApiRequestParamOutput() ApiRequestParamOutput {
	return i.ToApiRequestParamOutputWithContext(context.Background())
}

func (i ApiRequestParamArgs) ToApiRequestParamOutputWithContext(ctx context.Context) ApiRequestParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiRequestParamOutput)
}

// ApiRequestParamArrayInput is an input type that accepts ApiRequestParamArray and ApiRequestParamArrayOutput values.
// You can construct a concrete instance of `ApiRequestParamArrayInput` via:
//
//	ApiRequestParamArray{ ApiRequestParamArgs{...} }
type ApiRequestParamArrayInput interface {
	pulumi.Input

	ToApiRequestParamArrayOutput() ApiRequestParamArrayOutput
	ToApiRequestParamArrayOutputWithContext(context.Context) ApiRequestParamArrayOutput
}

type ApiRequestParamArray []ApiRequestParamInput

func (ApiRequestParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiRequestParam)(nil)).Elem()
}

func (i ApiRequestParamArray) ToApiRequestParamArrayOutput() ApiRequestParamArrayOutput {
	return i.ToApiRequestParamArrayOutputWithContext(context.Background())
}

func (i ApiRequestParamArray) ToApiRequestParamArrayOutputWithContext(ctx context.Context) ApiRequestParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiRequestParamArrayOutput)
}

type ApiRequestParamOutput struct{ *pulumi.OutputState }

func (ApiRequestParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiRequestParam)(nil)).Elem()
}

func (o ApiRequestParamOutput) ToApiRequestParamOutput() ApiRequestParamOutput {
	return o
}

func (o ApiRequestParamOutput) ToApiRequestParamOutputWithContext(ctx context.Context) ApiRequestParamOutput {
	return o
}

// The default value of the parameter.
func (o ApiRequestParamOutput) Default() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *string { return v.Default }).(pulumi.StringPtrOutput)
}

// Specifies the description of the API. The description cannot exceed 255 characters.
func (o ApiRequestParamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The enumerated value.
func (o ApiRequestParamOutput) Enumeration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *string { return v.Enumeration }).(pulumi.StringPtrOutput)
}

// The parameter example.
func (o ApiRequestParamOutput) Example() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *string { return v.Example }).(pulumi.StringPtrOutput)
}

// Where this parameter is located.
func (o ApiRequestParamOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// The maximum value or length (string parameter) for parameter.
func (o ApiRequestParamOutput) Maximum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *int { return v.Maximum }).(pulumi.IntPtrOutput)
}

// The minimum value or length (string parameter) for parameter.
func (o ApiRequestParamOutput) Minimum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *int { return v.Minimum }).(pulumi.IntPtrOutput)
}

// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
// letter. Only letters, digits, and underscores (_) are allowed.
func (o ApiRequestParamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiRequestParam) string { return v.Name }).(pulumi.StringOutput)
}

// The list of orchestration rules that parameter used.
func (o ApiRequestParamOutput) Orchestrations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ApiRequestParam) []string { return v.Orchestrations }).(pulumi.StringArrayOutput)
}

// Whether to transparently transfer the parameter.
func (o ApiRequestParamOutput) Passthrough() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *bool { return v.Passthrough }).(pulumi.BoolPtrOutput)
}

// Whether this parameter is required.
func (o ApiRequestParamOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// The parameter type.
func (o ApiRequestParamOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// Whether to enable the parameter validation.
func (o ApiRequestParamOutput) ValidEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiRequestParam) *int { return v.ValidEnable }).(pulumi.IntPtrOutput)
}

type ApiRequestParamArrayOutput struct{ *pulumi.OutputState }

func (ApiRequestParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiRequestParam)(nil)).Elem()
}

func (o ApiRequestParamArrayOutput) ToApiRequestParamArrayOutput() ApiRequestParamArrayOutput {
	return o
}

func (o ApiRequestParamArrayOutput) ToApiRequestParamArrayOutputWithContext(ctx context.Context) ApiRequestParamArrayOutput {
	return o
}

func (o ApiRequestParamArrayOutput) Index(i pulumi.IntInput) ApiRequestParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiRequestParam {
		return vs[0].([]ApiRequestParam)[vs[1].(int)]
	}).(ApiRequestParamOutput)
}

type ApiWeb struct {
	// The ID of the backend custom authorization.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The backend service address, which consists of a domain name or IP address, and a port number.
	BackendAddress *string `pulumi:"backendAddress"`
	// The proxy host header.
	HostHeader *string `pulumi:"hostHeader"`
	// The backend request path.
	Path string `pulumi:"path"`
	// Specifies the request method, including 'GET','POST','PUT' and etc..
	RequestMethod *string `pulumi:"requestMethod"`
	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	RequestProtocol *string `pulumi:"requestProtocol"`
	// The number of retry attempts to request the backend service.
	RetryCount *int `pulumi:"retryCount"`
	// Whether to enable two-way authentication.
	SslEnable *bool `pulumi:"sslEnable"`
	// The timeout for API requests to backend service.
	Timeout *int `pulumi:"timeout"`
	// The VPC channel ID.
	VpcChannelId *string `pulumi:"vpcChannelId"`
}

// ApiWebInput is an input type that accepts ApiWebArgs and ApiWebOutput values.
// You can construct a concrete instance of `ApiWebInput` via:
//
//	ApiWebArgs{...}
type ApiWebInput interface {
	pulumi.Input

	ToApiWebOutput() ApiWebOutput
	ToApiWebOutputWithContext(context.Context) ApiWebOutput
}

type ApiWebArgs struct {
	// The ID of the backend custom authorization.
	AuthorizerId pulumi.StringPtrInput `pulumi:"authorizerId"`
	// The backend service address, which consists of a domain name or IP address, and a port number.
	BackendAddress pulumi.StringPtrInput `pulumi:"backendAddress"`
	// The proxy host header.
	HostHeader pulumi.StringPtrInput `pulumi:"hostHeader"`
	// The backend request path.
	Path pulumi.StringInput `pulumi:"path"`
	// Specifies the request method, including 'GET','POST','PUT' and etc..
	RequestMethod pulumi.StringPtrInput `pulumi:"requestMethod"`
	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	RequestProtocol pulumi.StringPtrInput `pulumi:"requestProtocol"`
	// The number of retry attempts to request the backend service.
	RetryCount pulumi.IntPtrInput `pulumi:"retryCount"`
	// Whether to enable two-way authentication.
	SslEnable pulumi.BoolPtrInput `pulumi:"sslEnable"`
	// The timeout for API requests to backend service.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The VPC channel ID.
	VpcChannelId pulumi.StringPtrInput `pulumi:"vpcChannelId"`
}

func (ApiWebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiWeb)(nil)).Elem()
}

func (i ApiWebArgs) ToApiWebOutput() ApiWebOutput {
	return i.ToApiWebOutputWithContext(context.Background())
}

func (i ApiWebArgs) ToApiWebOutputWithContext(ctx context.Context) ApiWebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebOutput)
}

func (i ApiWebArgs) ToApiWebPtrOutput() ApiWebPtrOutput {
	return i.ToApiWebPtrOutputWithContext(context.Background())
}

func (i ApiWebArgs) ToApiWebPtrOutputWithContext(ctx context.Context) ApiWebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebOutput).ToApiWebPtrOutputWithContext(ctx)
}

// ApiWebPtrInput is an input type that accepts ApiWebArgs, ApiWebPtr and ApiWebPtrOutput values.
// You can construct a concrete instance of `ApiWebPtrInput` via:
//
//	        ApiWebArgs{...}
//
//	or:
//
//	        nil
type ApiWebPtrInput interface {
	pulumi.Input

	ToApiWebPtrOutput() ApiWebPtrOutput
	ToApiWebPtrOutputWithContext(context.Context) ApiWebPtrOutput
}

type apiWebPtrType ApiWebArgs

func ApiWebPtr(v *ApiWebArgs) ApiWebPtrInput {
	return (*apiWebPtrType)(v)
}

func (*apiWebPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiWeb)(nil)).Elem()
}

func (i *apiWebPtrType) ToApiWebPtrOutput() ApiWebPtrOutput {
	return i.ToApiWebPtrOutputWithContext(context.Background())
}

func (i *apiWebPtrType) ToApiWebPtrOutputWithContext(ctx context.Context) ApiWebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebPtrOutput)
}

type ApiWebOutput struct{ *pulumi.OutputState }

func (ApiWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiWeb)(nil)).Elem()
}

func (o ApiWebOutput) ToApiWebOutput() ApiWebOutput {
	return o
}

func (o ApiWebOutput) ToApiWebOutputWithContext(ctx context.Context) ApiWebOutput {
	return o
}

func (o ApiWebOutput) ToApiWebPtrOutput() ApiWebPtrOutput {
	return o.ToApiWebPtrOutputWithContext(context.Background())
}

func (o ApiWebOutput) ToApiWebPtrOutputWithContext(ctx context.Context) ApiWebPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ApiWeb) *ApiWeb {
		return &v
	}).(ApiWebPtrOutput)
}

// The ID of the backend custom authorization.
func (o ApiWebOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWeb) *string { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// The backend service address, which consists of a domain name or IP address, and a port number.
func (o ApiWebOutput) BackendAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWeb) *string { return v.BackendAddress }).(pulumi.StringPtrOutput)
}

// The proxy host header.
func (o ApiWebOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWeb) *string { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// The backend request path.
func (o ApiWebOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWeb) string { return v.Path }).(pulumi.StringOutput)
}

// Specifies the request method, including 'GET','POST','PUT' and etc..
func (o ApiWebOutput) RequestMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWeb) *string { return v.RequestMethod }).(pulumi.StringPtrOutput)
}

// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
func (o ApiWebOutput) RequestProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWeb) *string { return v.RequestProtocol }).(pulumi.StringPtrOutput)
}

// The number of retry attempts to request the backend service.
func (o ApiWebOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiWeb) *int { return v.RetryCount }).(pulumi.IntPtrOutput)
}

// Whether to enable two-way authentication.
func (o ApiWebOutput) SslEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ApiWeb) *bool { return v.SslEnable }).(pulumi.BoolPtrOutput)
}

// The timeout for API requests to backend service.
func (o ApiWebOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiWeb) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The VPC channel ID.
func (o ApiWebOutput) VpcChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWeb) *string { return v.VpcChannelId }).(pulumi.StringPtrOutput)
}

type ApiWebPtrOutput struct{ *pulumi.OutputState }

func (ApiWebPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiWeb)(nil)).Elem()
}

func (o ApiWebPtrOutput) ToApiWebPtrOutput() ApiWebPtrOutput {
	return o
}

func (o ApiWebPtrOutput) ToApiWebPtrOutputWithContext(ctx context.Context) ApiWebPtrOutput {
	return o
}

func (o ApiWebPtrOutput) Elem() ApiWebOutput {
	return o.ApplyT(func(v *ApiWeb) ApiWeb {
		if v != nil {
			return *v
		}
		var ret ApiWeb
		return ret
	}).(ApiWebOutput)
}

// The ID of the backend custom authorization.
func (o ApiWebPtrOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizerId
	}).(pulumi.StringPtrOutput)
}

// The backend service address, which consists of a domain name or IP address, and a port number.
func (o ApiWebPtrOutput) BackendAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *string {
		if v == nil {
			return nil
		}
		return v.BackendAddress
	}).(pulumi.StringPtrOutput)
}

// The proxy host header.
func (o ApiWebPtrOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *string {
		if v == nil {
			return nil
		}
		return v.HostHeader
	}).(pulumi.StringPtrOutput)
}

// The backend request path.
func (o ApiWebPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *string {
		if v == nil {
			return nil
		}
		return &v.Path
	}).(pulumi.StringPtrOutput)
}

// Specifies the request method, including 'GET','POST','PUT' and etc..
func (o ApiWebPtrOutput) RequestMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *string {
		if v == nil {
			return nil
		}
		return v.RequestMethod
	}).(pulumi.StringPtrOutput)
}

// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
func (o ApiWebPtrOutput) RequestProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *string {
		if v == nil {
			return nil
		}
		return v.RequestProtocol
	}).(pulumi.StringPtrOutput)
}

// The number of retry attempts to request the backend service.
func (o ApiWebPtrOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *int {
		if v == nil {
			return nil
		}
		return v.RetryCount
	}).(pulumi.IntPtrOutput)
}

// Whether to enable two-way authentication.
func (o ApiWebPtrOutput) SslEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnable
	}).(pulumi.BoolPtrOutput)
}

// The timeout for API requests to backend service.
func (o ApiWebPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The VPC channel ID.
func (o ApiWebPtrOutput) VpcChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApiWeb) *string {
		if v == nil {
			return nil
		}
		return v.VpcChannelId
	}).(pulumi.StringPtrOutput)
}

type ApiWebPolicy struct {
	// The ID of the backend custom authorization.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The backend service address
	BackendAddress *string `pulumi:"backendAddress"`
	// The configuration list of the backend parameters.
	BackendParams []ApiWebPolicyBackendParam `pulumi:"backendParams"`
	// The policy conditions.
	Conditions []ApiWebPolicyCondition `pulumi:"conditions"`
	// The effective mode of the backend policy.
	EffectiveMode *string `pulumi:"effectiveMode"`
	// The proxy host header.
	HostHeader *string `pulumi:"hostHeader"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name string `pulumi:"name"`
	// The backend request address.
	Path string `pulumi:"path"`
	// Specifies the request method, including 'GET','POST','PUT' and etc..
	RequestMethod string `pulumi:"requestMethod"`
	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	RequestProtocol *string `pulumi:"requestProtocol"`
	// The number of retry attempts to request the backend service.
	RetryCount *int `pulumi:"retryCount"`
	// The timeout for API requests to backend service.
	Timeout *int `pulumi:"timeout"`
	// The VPC channel ID.
	VpcChannelId *string `pulumi:"vpcChannelId"`
}

// ApiWebPolicyInput is an input type that accepts ApiWebPolicyArgs and ApiWebPolicyOutput values.
// You can construct a concrete instance of `ApiWebPolicyInput` via:
//
//	ApiWebPolicyArgs{...}
type ApiWebPolicyInput interface {
	pulumi.Input

	ToApiWebPolicyOutput() ApiWebPolicyOutput
	ToApiWebPolicyOutputWithContext(context.Context) ApiWebPolicyOutput
}

type ApiWebPolicyArgs struct {
	// The ID of the backend custom authorization.
	AuthorizerId pulumi.StringPtrInput `pulumi:"authorizerId"`
	// The backend service address
	BackendAddress pulumi.StringPtrInput `pulumi:"backendAddress"`
	// The configuration list of the backend parameters.
	BackendParams ApiWebPolicyBackendParamArrayInput `pulumi:"backendParams"`
	// The policy conditions.
	Conditions ApiWebPolicyConditionArrayInput `pulumi:"conditions"`
	// The effective mode of the backend policy.
	EffectiveMode pulumi.StringPtrInput `pulumi:"effectiveMode"`
	// The proxy host header.
	HostHeader pulumi.StringPtrInput `pulumi:"hostHeader"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name pulumi.StringInput `pulumi:"name"`
	// The backend request address.
	Path pulumi.StringInput `pulumi:"path"`
	// Specifies the request method, including 'GET','POST','PUT' and etc..
	RequestMethod pulumi.StringInput `pulumi:"requestMethod"`
	// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
	// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
	RequestProtocol pulumi.StringPtrInput `pulumi:"requestProtocol"`
	// The number of retry attempts to request the backend service.
	RetryCount pulumi.IntPtrInput `pulumi:"retryCount"`
	// The timeout for API requests to backend service.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The VPC channel ID.
	VpcChannelId pulumi.StringPtrInput `pulumi:"vpcChannelId"`
}

func (ApiWebPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiWebPolicy)(nil)).Elem()
}

func (i ApiWebPolicyArgs) ToApiWebPolicyOutput() ApiWebPolicyOutput {
	return i.ToApiWebPolicyOutputWithContext(context.Background())
}

func (i ApiWebPolicyArgs) ToApiWebPolicyOutputWithContext(ctx context.Context) ApiWebPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebPolicyOutput)
}

// ApiWebPolicyArrayInput is an input type that accepts ApiWebPolicyArray and ApiWebPolicyArrayOutput values.
// You can construct a concrete instance of `ApiWebPolicyArrayInput` via:
//
//	ApiWebPolicyArray{ ApiWebPolicyArgs{...} }
type ApiWebPolicyArrayInput interface {
	pulumi.Input

	ToApiWebPolicyArrayOutput() ApiWebPolicyArrayOutput
	ToApiWebPolicyArrayOutputWithContext(context.Context) ApiWebPolicyArrayOutput
}

type ApiWebPolicyArray []ApiWebPolicyInput

func (ApiWebPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiWebPolicy)(nil)).Elem()
}

func (i ApiWebPolicyArray) ToApiWebPolicyArrayOutput() ApiWebPolicyArrayOutput {
	return i.ToApiWebPolicyArrayOutputWithContext(context.Background())
}

func (i ApiWebPolicyArray) ToApiWebPolicyArrayOutputWithContext(ctx context.Context) ApiWebPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebPolicyArrayOutput)
}

type ApiWebPolicyOutput struct{ *pulumi.OutputState }

func (ApiWebPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiWebPolicy)(nil)).Elem()
}

func (o ApiWebPolicyOutput) ToApiWebPolicyOutput() ApiWebPolicyOutput {
	return o
}

func (o ApiWebPolicyOutput) ToApiWebPolicyOutputWithContext(ctx context.Context) ApiWebPolicyOutput {
	return o
}

// The ID of the backend custom authorization.
func (o ApiWebPolicyOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicy) *string { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// The backend service address
func (o ApiWebPolicyOutput) BackendAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicy) *string { return v.BackendAddress }).(pulumi.StringPtrOutput)
}

// The configuration list of the backend parameters.
func (o ApiWebPolicyOutput) BackendParams() ApiWebPolicyBackendParamArrayOutput {
	return o.ApplyT(func(v ApiWebPolicy) []ApiWebPolicyBackendParam { return v.BackendParams }).(ApiWebPolicyBackendParamArrayOutput)
}

// The policy conditions.
func (o ApiWebPolicyOutput) Conditions() ApiWebPolicyConditionArrayOutput {
	return o.ApplyT(func(v ApiWebPolicy) []ApiWebPolicyCondition { return v.Conditions }).(ApiWebPolicyConditionArrayOutput)
}

// The effective mode of the backend policy.
func (o ApiWebPolicyOutput) EffectiveMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicy) *string { return v.EffectiveMode }).(pulumi.StringPtrOutput)
}

// The proxy host header.
func (o ApiWebPolicyOutput) HostHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicy) *string { return v.HostHeader }).(pulumi.StringPtrOutput)
}

// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
// letter. Only letters, digits, and underscores (_) are allowed.
func (o ApiWebPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWebPolicy) string { return v.Name }).(pulumi.StringOutput)
}

// The backend request address.
func (o ApiWebPolicyOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWebPolicy) string { return v.Path }).(pulumi.StringOutput)
}

// Specifies the request method, including 'GET','POST','PUT' and etc..
func (o ApiWebPolicyOutput) RequestMethod() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWebPolicy) string { return v.RequestMethod }).(pulumi.StringOutput)
}

// Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
// which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
func (o ApiWebPolicyOutput) RequestProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicy) *string { return v.RequestProtocol }).(pulumi.StringPtrOutput)
}

// The number of retry attempts to request the backend service.
func (o ApiWebPolicyOutput) RetryCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiWebPolicy) *int { return v.RetryCount }).(pulumi.IntPtrOutput)
}

// The timeout for API requests to backend service.
func (o ApiWebPolicyOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ApiWebPolicy) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The VPC channel ID.
func (o ApiWebPolicyOutput) VpcChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicy) *string { return v.VpcChannelId }).(pulumi.StringPtrOutput)
}

type ApiWebPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApiWebPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiWebPolicy)(nil)).Elem()
}

func (o ApiWebPolicyArrayOutput) ToApiWebPolicyArrayOutput() ApiWebPolicyArrayOutput {
	return o
}

func (o ApiWebPolicyArrayOutput) ToApiWebPolicyArrayOutputWithContext(ctx context.Context) ApiWebPolicyArrayOutput {
	return o
}

func (o ApiWebPolicyArrayOutput) Index(i pulumi.IntInput) ApiWebPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiWebPolicy {
		return vs[0].([]ApiWebPolicy)[vs[1].(int)]
	}).(ApiWebPolicyOutput)
}

type ApiWebPolicyBackendParam struct {
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description *string `pulumi:"description"`
	// Where the parameter is located.
	Location string `pulumi:"location"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name            string  `pulumi:"name"`
	SystemParamType *string `pulumi:"systemParamType"`
	// The parameter type.
	Type string `pulumi:"type"`
	// The value of the parameter
	Value string `pulumi:"value"`
}

// ApiWebPolicyBackendParamInput is an input type that accepts ApiWebPolicyBackendParamArgs and ApiWebPolicyBackendParamOutput values.
// You can construct a concrete instance of `ApiWebPolicyBackendParamInput` via:
//
//	ApiWebPolicyBackendParamArgs{...}
type ApiWebPolicyBackendParamInput interface {
	pulumi.Input

	ToApiWebPolicyBackendParamOutput() ApiWebPolicyBackendParamOutput
	ToApiWebPolicyBackendParamOutputWithContext(context.Context) ApiWebPolicyBackendParamOutput
}

type ApiWebPolicyBackendParamArgs struct {
	// Specifies the description of the API. The description cannot exceed 255 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Where the parameter is located.
	Location pulumi.StringInput `pulumi:"location"`
	// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
	// letter. Only letters, digits, and underscores (_) are allowed.
	Name            pulumi.StringInput    `pulumi:"name"`
	SystemParamType pulumi.StringPtrInput `pulumi:"systemParamType"`
	// The parameter type.
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the parameter
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiWebPolicyBackendParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiWebPolicyBackendParam)(nil)).Elem()
}

func (i ApiWebPolicyBackendParamArgs) ToApiWebPolicyBackendParamOutput() ApiWebPolicyBackendParamOutput {
	return i.ToApiWebPolicyBackendParamOutputWithContext(context.Background())
}

func (i ApiWebPolicyBackendParamArgs) ToApiWebPolicyBackendParamOutputWithContext(ctx context.Context) ApiWebPolicyBackendParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebPolicyBackendParamOutput)
}

// ApiWebPolicyBackendParamArrayInput is an input type that accepts ApiWebPolicyBackendParamArray and ApiWebPolicyBackendParamArrayOutput values.
// You can construct a concrete instance of `ApiWebPolicyBackendParamArrayInput` via:
//
//	ApiWebPolicyBackendParamArray{ ApiWebPolicyBackendParamArgs{...} }
type ApiWebPolicyBackendParamArrayInput interface {
	pulumi.Input

	ToApiWebPolicyBackendParamArrayOutput() ApiWebPolicyBackendParamArrayOutput
	ToApiWebPolicyBackendParamArrayOutputWithContext(context.Context) ApiWebPolicyBackendParamArrayOutput
}

type ApiWebPolicyBackendParamArray []ApiWebPolicyBackendParamInput

func (ApiWebPolicyBackendParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiWebPolicyBackendParam)(nil)).Elem()
}

func (i ApiWebPolicyBackendParamArray) ToApiWebPolicyBackendParamArrayOutput() ApiWebPolicyBackendParamArrayOutput {
	return i.ToApiWebPolicyBackendParamArrayOutputWithContext(context.Background())
}

func (i ApiWebPolicyBackendParamArray) ToApiWebPolicyBackendParamArrayOutputWithContext(ctx context.Context) ApiWebPolicyBackendParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebPolicyBackendParamArrayOutput)
}

type ApiWebPolicyBackendParamOutput struct{ *pulumi.OutputState }

func (ApiWebPolicyBackendParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiWebPolicyBackendParam)(nil)).Elem()
}

func (o ApiWebPolicyBackendParamOutput) ToApiWebPolicyBackendParamOutput() ApiWebPolicyBackendParamOutput {
	return o
}

func (o ApiWebPolicyBackendParamOutput) ToApiWebPolicyBackendParamOutputWithContext(ctx context.Context) ApiWebPolicyBackendParamOutput {
	return o
}

// Specifies the description of the API. The description cannot exceed 255 characters.
func (o ApiWebPolicyBackendParamOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyBackendParam) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Where the parameter is located.
func (o ApiWebPolicyBackendParamOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWebPolicyBackendParam) string { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the API. An API name consists of 3–64 characters, starting with a
// letter. Only letters, digits, and underscores (_) are allowed.
func (o ApiWebPolicyBackendParamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWebPolicyBackendParam) string { return v.Name }).(pulumi.StringOutput)
}

func (o ApiWebPolicyBackendParamOutput) SystemParamType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyBackendParam) *string { return v.SystemParamType }).(pulumi.StringPtrOutput)
}

// The parameter type.
func (o ApiWebPolicyBackendParamOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWebPolicyBackendParam) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the parameter
func (o ApiWebPolicyBackendParamOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWebPolicyBackendParam) string { return v.Value }).(pulumi.StringOutput)
}

type ApiWebPolicyBackendParamArrayOutput struct{ *pulumi.OutputState }

func (ApiWebPolicyBackendParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiWebPolicyBackendParam)(nil)).Elem()
}

func (o ApiWebPolicyBackendParamArrayOutput) ToApiWebPolicyBackendParamArrayOutput() ApiWebPolicyBackendParamArrayOutput {
	return o
}

func (o ApiWebPolicyBackendParamArrayOutput) ToApiWebPolicyBackendParamArrayOutputWithContext(ctx context.Context) ApiWebPolicyBackendParamArrayOutput {
	return o
}

func (o ApiWebPolicyBackendParamArrayOutput) Index(i pulumi.IntInput) ApiWebPolicyBackendParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiWebPolicyBackendParam {
		return vs[0].([]ApiWebPolicyBackendParam)[vs[1].(int)]
	}).(ApiWebPolicyBackendParamOutput)
}

type ApiWebPolicyCondition struct {
	// The cookie parameter name.
	CookieName *string `pulumi:"cookieName"`
	// The frontend authentication parameter name.
	FrontendAuthorizerName *string `pulumi:"frontendAuthorizerName"`
	// The location of a parameter generated after orchestration.
	MappedParamLocation *string `pulumi:"mappedParamLocation"`
	// The name of a parameter generated after orchestration.
	MappedParamName *string `pulumi:"mappedParamName"`
	// The request parameter name.
	ParamName *string `pulumi:"paramName"`
	// The type of the backend policy.
	Source *string `pulumi:"source"`
	// The gateway built-in parameter name.
	SysName *string `pulumi:"sysName"`
	// The condition type.
	Type *string `pulumi:"type"`
	// The value of the backend policy.
	Value string `pulumi:"value"`
}

// ApiWebPolicyConditionInput is an input type that accepts ApiWebPolicyConditionArgs and ApiWebPolicyConditionOutput values.
// You can construct a concrete instance of `ApiWebPolicyConditionInput` via:
//
//	ApiWebPolicyConditionArgs{...}
type ApiWebPolicyConditionInput interface {
	pulumi.Input

	ToApiWebPolicyConditionOutput() ApiWebPolicyConditionOutput
	ToApiWebPolicyConditionOutputWithContext(context.Context) ApiWebPolicyConditionOutput
}

type ApiWebPolicyConditionArgs struct {
	// The cookie parameter name.
	CookieName pulumi.StringPtrInput `pulumi:"cookieName"`
	// The frontend authentication parameter name.
	FrontendAuthorizerName pulumi.StringPtrInput `pulumi:"frontendAuthorizerName"`
	// The location of a parameter generated after orchestration.
	MappedParamLocation pulumi.StringPtrInput `pulumi:"mappedParamLocation"`
	// The name of a parameter generated after orchestration.
	MappedParamName pulumi.StringPtrInput `pulumi:"mappedParamName"`
	// The request parameter name.
	ParamName pulumi.StringPtrInput `pulumi:"paramName"`
	// The type of the backend policy.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The gateway built-in parameter name.
	SysName pulumi.StringPtrInput `pulumi:"sysName"`
	// The condition type.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The value of the backend policy.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ApiWebPolicyConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiWebPolicyCondition)(nil)).Elem()
}

func (i ApiWebPolicyConditionArgs) ToApiWebPolicyConditionOutput() ApiWebPolicyConditionOutput {
	return i.ToApiWebPolicyConditionOutputWithContext(context.Background())
}

func (i ApiWebPolicyConditionArgs) ToApiWebPolicyConditionOutputWithContext(ctx context.Context) ApiWebPolicyConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebPolicyConditionOutput)
}

// ApiWebPolicyConditionArrayInput is an input type that accepts ApiWebPolicyConditionArray and ApiWebPolicyConditionArrayOutput values.
// You can construct a concrete instance of `ApiWebPolicyConditionArrayInput` via:
//
//	ApiWebPolicyConditionArray{ ApiWebPolicyConditionArgs{...} }
type ApiWebPolicyConditionArrayInput interface {
	pulumi.Input

	ToApiWebPolicyConditionArrayOutput() ApiWebPolicyConditionArrayOutput
	ToApiWebPolicyConditionArrayOutputWithContext(context.Context) ApiWebPolicyConditionArrayOutput
}

type ApiWebPolicyConditionArray []ApiWebPolicyConditionInput

func (ApiWebPolicyConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiWebPolicyCondition)(nil)).Elem()
}

func (i ApiWebPolicyConditionArray) ToApiWebPolicyConditionArrayOutput() ApiWebPolicyConditionArrayOutput {
	return i.ToApiWebPolicyConditionArrayOutputWithContext(context.Background())
}

func (i ApiWebPolicyConditionArray) ToApiWebPolicyConditionArrayOutputWithContext(ctx context.Context) ApiWebPolicyConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiWebPolicyConditionArrayOutput)
}

type ApiWebPolicyConditionOutput struct{ *pulumi.OutputState }

func (ApiWebPolicyConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApiWebPolicyCondition)(nil)).Elem()
}

func (o ApiWebPolicyConditionOutput) ToApiWebPolicyConditionOutput() ApiWebPolicyConditionOutput {
	return o
}

func (o ApiWebPolicyConditionOutput) ToApiWebPolicyConditionOutputWithContext(ctx context.Context) ApiWebPolicyConditionOutput {
	return o
}

// The cookie parameter name.
func (o ApiWebPolicyConditionOutput) CookieName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) *string { return v.CookieName }).(pulumi.StringPtrOutput)
}

// The frontend authentication parameter name.
func (o ApiWebPolicyConditionOutput) FrontendAuthorizerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) *string { return v.FrontendAuthorizerName }).(pulumi.StringPtrOutput)
}

// The location of a parameter generated after orchestration.
func (o ApiWebPolicyConditionOutput) MappedParamLocation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) *string { return v.MappedParamLocation }).(pulumi.StringPtrOutput)
}

// The name of a parameter generated after orchestration.
func (o ApiWebPolicyConditionOutput) MappedParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) *string { return v.MappedParamName }).(pulumi.StringPtrOutput)
}

// The request parameter name.
func (o ApiWebPolicyConditionOutput) ParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) *string { return v.ParamName }).(pulumi.StringPtrOutput)
}

// The type of the backend policy.
func (o ApiWebPolicyConditionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The gateway built-in parameter name.
func (o ApiWebPolicyConditionOutput) SysName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) *string { return v.SysName }).(pulumi.StringPtrOutput)
}

// The condition type.
func (o ApiWebPolicyConditionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The value of the backend policy.
func (o ApiWebPolicyConditionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ApiWebPolicyCondition) string { return v.Value }).(pulumi.StringOutput)
}

type ApiWebPolicyConditionArrayOutput struct{ *pulumi.OutputState }

func (ApiWebPolicyConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApiWebPolicyCondition)(nil)).Elem()
}

func (o ApiWebPolicyConditionArrayOutput) ToApiWebPolicyConditionArrayOutput() ApiWebPolicyConditionArrayOutput {
	return o
}

func (o ApiWebPolicyConditionArrayOutput) ToApiWebPolicyConditionArrayOutputWithContext(ctx context.Context) ApiWebPolicyConditionArrayOutput {
	return o
}

func (o ApiWebPolicyConditionArrayOutput) Index(i pulumi.IntInput) ApiWebPolicyConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApiWebPolicyCondition {
		return vs[0].([]ApiWebPolicyCondition)[vs[1].(int)]
	}).(ApiWebPolicyConditionOutput)
}

type GroupEnvironment struct {
	// The ID of the environment to which the variables belongs.
	EnvironmentId string `pulumi:"environmentId"`
	// The array of one or more environment variables. Each `variable` block supports the following:
	Variables []GroupEnvironmentVariable `pulumi:"variables"`
}

// GroupEnvironmentInput is an input type that accepts GroupEnvironmentArgs and GroupEnvironmentOutput values.
// You can construct a concrete instance of `GroupEnvironmentInput` via:
//
//	GroupEnvironmentArgs{...}
type GroupEnvironmentInput interface {
	pulumi.Input

	ToGroupEnvironmentOutput() GroupEnvironmentOutput
	ToGroupEnvironmentOutputWithContext(context.Context) GroupEnvironmentOutput
}

type GroupEnvironmentArgs struct {
	// The ID of the environment to which the variables belongs.
	EnvironmentId pulumi.StringInput `pulumi:"environmentId"`
	// The array of one or more environment variables. Each `variable` block supports the following:
	Variables GroupEnvironmentVariableArrayInput `pulumi:"variables"`
}

func (GroupEnvironmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupEnvironment)(nil)).Elem()
}

func (i GroupEnvironmentArgs) ToGroupEnvironmentOutput() GroupEnvironmentOutput {
	return i.ToGroupEnvironmentOutputWithContext(context.Background())
}

func (i GroupEnvironmentArgs) ToGroupEnvironmentOutputWithContext(ctx context.Context) GroupEnvironmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEnvironmentOutput)
}

// GroupEnvironmentArrayInput is an input type that accepts GroupEnvironmentArray and GroupEnvironmentArrayOutput values.
// You can construct a concrete instance of `GroupEnvironmentArrayInput` via:
//
//	GroupEnvironmentArray{ GroupEnvironmentArgs{...} }
type GroupEnvironmentArrayInput interface {
	pulumi.Input

	ToGroupEnvironmentArrayOutput() GroupEnvironmentArrayOutput
	ToGroupEnvironmentArrayOutputWithContext(context.Context) GroupEnvironmentArrayOutput
}

type GroupEnvironmentArray []GroupEnvironmentInput

func (GroupEnvironmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupEnvironment)(nil)).Elem()
}

func (i GroupEnvironmentArray) ToGroupEnvironmentArrayOutput() GroupEnvironmentArrayOutput {
	return i.ToGroupEnvironmentArrayOutputWithContext(context.Background())
}

func (i GroupEnvironmentArray) ToGroupEnvironmentArrayOutputWithContext(ctx context.Context) GroupEnvironmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEnvironmentArrayOutput)
}

type GroupEnvironmentOutput struct{ *pulumi.OutputState }

func (GroupEnvironmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupEnvironment)(nil)).Elem()
}

func (o GroupEnvironmentOutput) ToGroupEnvironmentOutput() GroupEnvironmentOutput {
	return o
}

func (o GroupEnvironmentOutput) ToGroupEnvironmentOutputWithContext(ctx context.Context) GroupEnvironmentOutput {
	return o
}

// The ID of the environment to which the variables belongs.
func (o GroupEnvironmentOutput) EnvironmentId() pulumi.StringOutput {
	return o.ApplyT(func(v GroupEnvironment) string { return v.EnvironmentId }).(pulumi.StringOutput)
}

// The array of one or more environment variables. Each `variable` block supports the following:
func (o GroupEnvironmentOutput) Variables() GroupEnvironmentVariableArrayOutput {
	return o.ApplyT(func(v GroupEnvironment) []GroupEnvironmentVariable { return v.Variables }).(GroupEnvironmentVariableArrayOutput)
}

type GroupEnvironmentArrayOutput struct{ *pulumi.OutputState }

func (GroupEnvironmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupEnvironment)(nil)).Elem()
}

func (o GroupEnvironmentArrayOutput) ToGroupEnvironmentArrayOutput() GroupEnvironmentArrayOutput {
	return o
}

func (o GroupEnvironmentArrayOutput) ToGroupEnvironmentArrayOutputWithContext(ctx context.Context) GroupEnvironmentArrayOutput {
	return o
}

func (o GroupEnvironmentArrayOutput) Index(i pulumi.IntInput) GroupEnvironmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupEnvironment {
		return vs[0].([]GroupEnvironment)[vs[1].(int)]
	}).(GroupEnvironmentOutput)
}

type GroupEnvironmentVariable struct {
	// The ID of the variable that the group has.
	Id *string `pulumi:"id"`
	// The variable name.
	Name string `pulumi:"name"`
	// The variable value.
	Value string `pulumi:"value"`
	// The ID of the variable that the group has.\
	// _Deprecated: Use `id` instead._
	//
	// Deprecated: Use 'id' instead
	VariableId *string `pulumi:"variableId"`
}

// GroupEnvironmentVariableInput is an input type that accepts GroupEnvironmentVariableArgs and GroupEnvironmentVariableOutput values.
// You can construct a concrete instance of `GroupEnvironmentVariableInput` via:
//
//	GroupEnvironmentVariableArgs{...}
type GroupEnvironmentVariableInput interface {
	pulumi.Input

	ToGroupEnvironmentVariableOutput() GroupEnvironmentVariableOutput
	ToGroupEnvironmentVariableOutputWithContext(context.Context) GroupEnvironmentVariableOutput
}

type GroupEnvironmentVariableArgs struct {
	// The ID of the variable that the group has.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The variable name.
	Name pulumi.StringInput `pulumi:"name"`
	// The variable value.
	Value pulumi.StringInput `pulumi:"value"`
	// The ID of the variable that the group has.\
	// _Deprecated: Use `id` instead._
	//
	// Deprecated: Use 'id' instead
	VariableId pulumi.StringPtrInput `pulumi:"variableId"`
}

func (GroupEnvironmentVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupEnvironmentVariable)(nil)).Elem()
}

func (i GroupEnvironmentVariableArgs) ToGroupEnvironmentVariableOutput() GroupEnvironmentVariableOutput {
	return i.ToGroupEnvironmentVariableOutputWithContext(context.Background())
}

func (i GroupEnvironmentVariableArgs) ToGroupEnvironmentVariableOutputWithContext(ctx context.Context) GroupEnvironmentVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEnvironmentVariableOutput)
}

// GroupEnvironmentVariableArrayInput is an input type that accepts GroupEnvironmentVariableArray and GroupEnvironmentVariableArrayOutput values.
// You can construct a concrete instance of `GroupEnvironmentVariableArrayInput` via:
//
//	GroupEnvironmentVariableArray{ GroupEnvironmentVariableArgs{...} }
type GroupEnvironmentVariableArrayInput interface {
	pulumi.Input

	ToGroupEnvironmentVariableArrayOutput() GroupEnvironmentVariableArrayOutput
	ToGroupEnvironmentVariableArrayOutputWithContext(context.Context) GroupEnvironmentVariableArrayOutput
}

type GroupEnvironmentVariableArray []GroupEnvironmentVariableInput

func (GroupEnvironmentVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupEnvironmentVariable)(nil)).Elem()
}

func (i GroupEnvironmentVariableArray) ToGroupEnvironmentVariableArrayOutput() GroupEnvironmentVariableArrayOutput {
	return i.ToGroupEnvironmentVariableArrayOutputWithContext(context.Background())
}

func (i GroupEnvironmentVariableArray) ToGroupEnvironmentVariableArrayOutputWithContext(ctx context.Context) GroupEnvironmentVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupEnvironmentVariableArrayOutput)
}

type GroupEnvironmentVariableOutput struct{ *pulumi.OutputState }

func (GroupEnvironmentVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupEnvironmentVariable)(nil)).Elem()
}

func (o GroupEnvironmentVariableOutput) ToGroupEnvironmentVariableOutput() GroupEnvironmentVariableOutput {
	return o
}

func (o GroupEnvironmentVariableOutput) ToGroupEnvironmentVariableOutputWithContext(ctx context.Context) GroupEnvironmentVariableOutput {
	return o
}

// The ID of the variable that the group has.
func (o GroupEnvironmentVariableOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupEnvironmentVariable) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// The variable name.
func (o GroupEnvironmentVariableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupEnvironmentVariable) string { return v.Name }).(pulumi.StringOutput)
}

// The variable value.
func (o GroupEnvironmentVariableOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GroupEnvironmentVariable) string { return v.Value }).(pulumi.StringOutput)
}

// The ID of the variable that the group has.\
// _Deprecated: Use `id` instead._
//
// Deprecated: Use 'id' instead
func (o GroupEnvironmentVariableOutput) VariableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupEnvironmentVariable) *string { return v.VariableId }).(pulumi.StringPtrOutput)
}

type GroupEnvironmentVariableArrayOutput struct{ *pulumi.OutputState }

func (GroupEnvironmentVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupEnvironmentVariable)(nil)).Elem()
}

func (o GroupEnvironmentVariableArrayOutput) ToGroupEnvironmentVariableArrayOutput() GroupEnvironmentVariableArrayOutput {
	return o
}

func (o GroupEnvironmentVariableArrayOutput) ToGroupEnvironmentVariableArrayOutputWithContext(ctx context.Context) GroupEnvironmentVariableArrayOutput {
	return o
}

func (o GroupEnvironmentVariableArrayOutput) Index(i pulumi.IntInput) GroupEnvironmentVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupEnvironmentVariable {
		return vs[0].([]GroupEnvironmentVariable)[vs[1].(int)]
	}).(GroupEnvironmentVariableOutput)
}

type GroupUrlDomain struct {
	// Whether to enable redirection from HTTP to HTTPS.
	IsHttpRedirectToHttps *bool `pulumi:"isHttpRedirectToHttps"`
	// The minimum SSL protocol version.
	MinSslVersion *string `pulumi:"minSslVersion"`
	// The group name.
	Name string `pulumi:"name"`
}

// GroupUrlDomainInput is an input type that accepts GroupUrlDomainArgs and GroupUrlDomainOutput values.
// You can construct a concrete instance of `GroupUrlDomainInput` via:
//
//	GroupUrlDomainArgs{...}
type GroupUrlDomainInput interface {
	pulumi.Input

	ToGroupUrlDomainOutput() GroupUrlDomainOutput
	ToGroupUrlDomainOutputWithContext(context.Context) GroupUrlDomainOutput
}

type GroupUrlDomainArgs struct {
	// Whether to enable redirection from HTTP to HTTPS.
	IsHttpRedirectToHttps pulumi.BoolPtrInput `pulumi:"isHttpRedirectToHttps"`
	// The minimum SSL protocol version.
	MinSslVersion pulumi.StringPtrInput `pulumi:"minSslVersion"`
	// The group name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GroupUrlDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupUrlDomain)(nil)).Elem()
}

func (i GroupUrlDomainArgs) ToGroupUrlDomainOutput() GroupUrlDomainOutput {
	return i.ToGroupUrlDomainOutputWithContext(context.Background())
}

func (i GroupUrlDomainArgs) ToGroupUrlDomainOutputWithContext(ctx context.Context) GroupUrlDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupUrlDomainOutput)
}

// GroupUrlDomainArrayInput is an input type that accepts GroupUrlDomainArray and GroupUrlDomainArrayOutput values.
// You can construct a concrete instance of `GroupUrlDomainArrayInput` via:
//
//	GroupUrlDomainArray{ GroupUrlDomainArgs{...} }
type GroupUrlDomainArrayInput interface {
	pulumi.Input

	ToGroupUrlDomainArrayOutput() GroupUrlDomainArrayOutput
	ToGroupUrlDomainArrayOutputWithContext(context.Context) GroupUrlDomainArrayOutput
}

type GroupUrlDomainArray []GroupUrlDomainInput

func (GroupUrlDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupUrlDomain)(nil)).Elem()
}

func (i GroupUrlDomainArray) ToGroupUrlDomainArrayOutput() GroupUrlDomainArrayOutput {
	return i.ToGroupUrlDomainArrayOutputWithContext(context.Background())
}

func (i GroupUrlDomainArray) ToGroupUrlDomainArrayOutputWithContext(ctx context.Context) GroupUrlDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupUrlDomainArrayOutput)
}

type GroupUrlDomainOutput struct{ *pulumi.OutputState }

func (GroupUrlDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupUrlDomain)(nil)).Elem()
}

func (o GroupUrlDomainOutput) ToGroupUrlDomainOutput() GroupUrlDomainOutput {
	return o
}

func (o GroupUrlDomainOutput) ToGroupUrlDomainOutputWithContext(ctx context.Context) GroupUrlDomainOutput {
	return o
}

// Whether to enable redirection from HTTP to HTTPS.
func (o GroupUrlDomainOutput) IsHttpRedirectToHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GroupUrlDomain) *bool { return v.IsHttpRedirectToHttps }).(pulumi.BoolPtrOutput)
}

// The minimum SSL protocol version.
func (o GroupUrlDomainOutput) MinSslVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupUrlDomain) *string { return v.MinSslVersion }).(pulumi.StringPtrOutput)
}

// The group name.
func (o GroupUrlDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GroupUrlDomain) string { return v.Name }).(pulumi.StringOutput)
}

type GroupUrlDomainArrayOutput struct{ *pulumi.OutputState }

func (GroupUrlDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupUrlDomain)(nil)).Elem()
}

func (o GroupUrlDomainArrayOutput) ToGroupUrlDomainArrayOutput() GroupUrlDomainArrayOutput {
	return o
}

func (o GroupUrlDomainArrayOutput) ToGroupUrlDomainArrayOutputWithContext(ctx context.Context) GroupUrlDomainArrayOutput {
	return o
}

func (o GroupUrlDomainArrayOutput) Index(i pulumi.IntInput) GroupUrlDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupUrlDomain {
		return vs[0].([]GroupUrlDomain)[vs[1].(int)]
	}).(GroupUrlDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiBackendParamInput)(nil)).Elem(), ApiBackendParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiBackendParamArrayInput)(nil)).Elem(), ApiBackendParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFuncGraphInput)(nil)).Elem(), ApiFuncGraphArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFuncGraphPtrInput)(nil)).Elem(), ApiFuncGraphArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFuncGraphPolicyInput)(nil)).Elem(), ApiFuncGraphPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFuncGraphPolicyArrayInput)(nil)).Elem(), ApiFuncGraphPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFuncGraphPolicyBackendParamInput)(nil)).Elem(), ApiFuncGraphPolicyBackendParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFuncGraphPolicyBackendParamArrayInput)(nil)).Elem(), ApiFuncGraphPolicyBackendParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFuncGraphPolicyConditionInput)(nil)).Elem(), ApiFuncGraphPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiFuncGraphPolicyConditionArrayInput)(nil)).Elem(), ApiFuncGraphPolicyConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockInput)(nil)).Elem(), ApiMockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockPtrInput)(nil)).Elem(), ApiMockArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockPolicyInput)(nil)).Elem(), ApiMockPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockPolicyArrayInput)(nil)).Elem(), ApiMockPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockPolicyBackendParamInput)(nil)).Elem(), ApiMockPolicyBackendParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockPolicyBackendParamArrayInput)(nil)).Elem(), ApiMockPolicyBackendParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockPolicyConditionInput)(nil)).Elem(), ApiMockPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMockPolicyConditionArrayInput)(nil)).Elem(), ApiMockPolicyConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiRequestParamInput)(nil)).Elem(), ApiRequestParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiRequestParamArrayInput)(nil)).Elem(), ApiRequestParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiWebInput)(nil)).Elem(), ApiWebArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiWebPtrInput)(nil)).Elem(), ApiWebArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiWebPolicyInput)(nil)).Elem(), ApiWebPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiWebPolicyArrayInput)(nil)).Elem(), ApiWebPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiWebPolicyBackendParamInput)(nil)).Elem(), ApiWebPolicyBackendParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiWebPolicyBackendParamArrayInput)(nil)).Elem(), ApiWebPolicyBackendParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiWebPolicyConditionInput)(nil)).Elem(), ApiWebPolicyConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiWebPolicyConditionArrayInput)(nil)).Elem(), ApiWebPolicyConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEnvironmentInput)(nil)).Elem(), GroupEnvironmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEnvironmentArrayInput)(nil)).Elem(), GroupEnvironmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEnvironmentVariableInput)(nil)).Elem(), GroupEnvironmentVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupEnvironmentVariableArrayInput)(nil)).Elem(), GroupEnvironmentVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupUrlDomainInput)(nil)).Elem(), GroupUrlDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupUrlDomainArrayInput)(nil)).Elem(), GroupUrlDomainArray{})
	pulumi.RegisterOutputType(ApiBackendParamOutput{})
	pulumi.RegisterOutputType(ApiBackendParamArrayOutput{})
	pulumi.RegisterOutputType(ApiFuncGraphOutput{})
	pulumi.RegisterOutputType(ApiFuncGraphPtrOutput{})
	pulumi.RegisterOutputType(ApiFuncGraphPolicyOutput{})
	pulumi.RegisterOutputType(ApiFuncGraphPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApiFuncGraphPolicyBackendParamOutput{})
	pulumi.RegisterOutputType(ApiFuncGraphPolicyBackendParamArrayOutput{})
	pulumi.RegisterOutputType(ApiFuncGraphPolicyConditionOutput{})
	pulumi.RegisterOutputType(ApiFuncGraphPolicyConditionArrayOutput{})
	pulumi.RegisterOutputType(ApiMockOutput{})
	pulumi.RegisterOutputType(ApiMockPtrOutput{})
	pulumi.RegisterOutputType(ApiMockPolicyOutput{})
	pulumi.RegisterOutputType(ApiMockPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApiMockPolicyBackendParamOutput{})
	pulumi.RegisterOutputType(ApiMockPolicyBackendParamArrayOutput{})
	pulumi.RegisterOutputType(ApiMockPolicyConditionOutput{})
	pulumi.RegisterOutputType(ApiMockPolicyConditionArrayOutput{})
	pulumi.RegisterOutputType(ApiRequestParamOutput{})
	pulumi.RegisterOutputType(ApiRequestParamArrayOutput{})
	pulumi.RegisterOutputType(ApiWebOutput{})
	pulumi.RegisterOutputType(ApiWebPtrOutput{})
	pulumi.RegisterOutputType(ApiWebPolicyOutput{})
	pulumi.RegisterOutputType(ApiWebPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApiWebPolicyBackendParamOutput{})
	pulumi.RegisterOutputType(ApiWebPolicyBackendParamArrayOutput{})
	pulumi.RegisterOutputType(ApiWebPolicyConditionOutput{})
	pulumi.RegisterOutputType(ApiWebPolicyConditionArrayOutput{})
	pulumi.RegisterOutputType(GroupEnvironmentOutput{})
	pulumi.RegisterOutputType(GroupEnvironmentArrayOutput{})
	pulumi.RegisterOutputType(GroupEnvironmentVariableOutput{})
	pulumi.RegisterOutputType(GroupEnvironmentVariableArrayOutput{})
	pulumi.RegisterOutputType(GroupUrlDomainOutput{})
	pulumi.RegisterOutputType(GroupUrlDomainArrayOutput{})
}

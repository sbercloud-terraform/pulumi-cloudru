// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the ID of an available SberCloud KMS key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/dew"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dew.GetKey(ctx, &dew.GetKeyArgs{
//				KeyAlias:       pulumi.StringRef("test_key"),
//				KeyDescription: pulumi.StringRef("test key description"),
//				KeyState:       pulumi.StringRef("2"),
//				KeyId:          pulumi.StringRef("af650527-a0ff-4527-aef3-c493df1f3012"),
//				DefaultKeyFlag: pulumi.StringRef("0"),
//				DomainId:       pulumi.StringRef("b168fe00ff56492495a7d22974df2d0b"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupKey(ctx *pulumi.Context, args *LookupKeyArgs, opts ...pulumi.InvokeOption) (*LookupKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupKeyResult
	err := ctx.Invoke("sbercloud:Dew/getKey:getKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKey.
type LookupKeyArgs struct {
	// Identification of a Master Key. The value "1" indicates a Default Master Key,
	// and the value "0" indicates a key. Changing this gets a new key.
	DefaultKeyFlag *string `pulumi:"defaultKeyFlag"`
	// ID of a user domain for the key. Changing this gets a new key.
	DomainId *string `pulumi:"domainId"`
	// The enterprise project id of the kms key.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The alias in which to create the key. It is required when we create a new key.
	// Changing this gets the new key.
	KeyAlias *string `pulumi:"keyAlias"`
	// The description of the key as viewed in Huawei console. Changing this gets a
	// new key.
	KeyDescription *string `pulumi:"keyDescription"`
	// The globally unique identifier for the key. Changing this gets the new key.
	KeyId *string `pulumi:"keyId"`
	// The state of a key. "1" indicates that the key is waiting to be activated.
	// "2" indicates that the key is enabled. "3" indicates that the key is disabled. "4" indicates that the key is scheduled
	// for deletion. Changing this gets a new key.
	KeyState *string `pulumi:"keyState"`
	// The region in which to obtain the keys. If omitted, the provider-level region will be
	// used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getKey.
type LookupKeyResult struct {
	// Creation time (time stamp) of a key.
	CreationDate        string `pulumi:"creationDate"`
	DefaultKeyFlag      string `pulumi:"defaultKeyFlag"`
	DomainId            string `pulumi:"domainId"`
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// Expiration time.
	ExpirationTime string `pulumi:"expirationTime"`
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	KeyAlias       string `pulumi:"keyAlias"`
	KeyDescription string `pulumi:"keyDescription"`
	KeyId          string `pulumi:"keyId"`
	KeyState       string `pulumi:"keyState"`
	Region         string `pulumi:"region"`
	// Indicates whether the key rotation is enabled or not.
	RotationEnabled bool `pulumi:"rotationEnabled"`
	// The key rotation interval. It's valid when rotation is enabled.
	RotationInterval int `pulumi:"rotationInterval"`
	// The total number of key rotations. It's valid when rotation is enabled.
	RotationNumber int `pulumi:"rotationNumber"`
	// Scheduled deletion time (time stamp) of a key.
	ScheduledDeletionDate string `pulumi:"scheduledDeletionDate"`
	// The key/value pairs to associate with the kms key.
	Tags map[string]string `pulumi:"tags"`
}

func LookupKeyOutput(ctx *pulumi.Context, args LookupKeyOutputArgs, opts ...pulumi.InvokeOption) LookupKeyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupKeyResultOutput, error) {
			args := v.(LookupKeyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Dew/getKey:getKey", args, LookupKeyResultOutput{}, options).(LookupKeyResultOutput), nil
		}).(LookupKeyResultOutput)
}

// A collection of arguments for invoking getKey.
type LookupKeyOutputArgs struct {
	// Identification of a Master Key. The value "1" indicates a Default Master Key,
	// and the value "0" indicates a key. Changing this gets a new key.
	DefaultKeyFlag pulumi.StringPtrInput `pulumi:"defaultKeyFlag"`
	// ID of a user domain for the key. Changing this gets a new key.
	DomainId pulumi.StringPtrInput `pulumi:"domainId"`
	// The enterprise project id of the kms key.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// The alias in which to create the key. It is required when we create a new key.
	// Changing this gets the new key.
	KeyAlias pulumi.StringPtrInput `pulumi:"keyAlias"`
	// The description of the key as viewed in Huawei console. Changing this gets a
	// new key.
	KeyDescription pulumi.StringPtrInput `pulumi:"keyDescription"`
	// The globally unique identifier for the key. Changing this gets the new key.
	KeyId pulumi.StringPtrInput `pulumi:"keyId"`
	// The state of a key. "1" indicates that the key is waiting to be activated.
	// "2" indicates that the key is enabled. "3" indicates that the key is disabled. "4" indicates that the key is scheduled
	// for deletion. Changing this gets a new key.
	KeyState pulumi.StringPtrInput `pulumi:"keyState"`
	// The region in which to obtain the keys. If omitted, the provider-level region will be
	// used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyArgs)(nil)).Elem()
}

// A collection of values returned by getKey.
type LookupKeyResultOutput struct{ *pulumi.OutputState }

func (LookupKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupKeyResult)(nil)).Elem()
}

func (o LookupKeyResultOutput) ToLookupKeyResultOutput() LookupKeyResultOutput {
	return o
}

func (o LookupKeyResultOutput) ToLookupKeyResultOutputWithContext(ctx context.Context) LookupKeyResultOutput {
	return o
}

// Creation time (time stamp) of a key.
func (o LookupKeyResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

func (o LookupKeyResultOutput) DefaultKeyFlag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.DefaultKeyFlag }).(pulumi.StringOutput)
}

func (o LookupKeyResultOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.DomainId }).(pulumi.StringOutput)
}

func (o LookupKeyResultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Expiration time.
func (o LookupKeyResultOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupKeyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupKeyResultOutput) KeyAlias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.KeyAlias }).(pulumi.StringOutput)
}

func (o LookupKeyResultOutput) KeyDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.KeyDescription }).(pulumi.StringOutput)
}

func (o LookupKeyResultOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.KeyId }).(pulumi.StringOutput)
}

func (o LookupKeyResultOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.KeyState }).(pulumi.StringOutput)
}

func (o LookupKeyResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates whether the key rotation is enabled or not.
func (o LookupKeyResultOutput) RotationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupKeyResult) bool { return v.RotationEnabled }).(pulumi.BoolOutput)
}

// The key rotation interval. It's valid when rotation is enabled.
func (o LookupKeyResultOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKeyResult) int { return v.RotationInterval }).(pulumi.IntOutput)
}

// The total number of key rotations. It's valid when rotation is enabled.
func (o LookupKeyResultOutput) RotationNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LookupKeyResult) int { return v.RotationNumber }).(pulumi.IntOutput)
}

// Scheduled deletion time (time stamp) of a key.
func (o LookupKeyResultOutput) ScheduledDeletionDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupKeyResult) string { return v.ScheduledDeletionDate }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the kms key.
func (o LookupKeyResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupKeyResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupKeyResultOutput{})
}

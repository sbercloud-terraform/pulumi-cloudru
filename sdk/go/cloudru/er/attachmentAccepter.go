// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package er

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type AttachmentAccepter struct {
	pulumi.CustomResourceState

	// The action type.
	Action pulumi.StringOutput `pulumi:"action"`
	// The ID of the attachment to be action.
	AttachmentId pulumi.StringOutput `pulumi:"attachmentId"`
	// The ID of the ER instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Region     pulumi.StringOutput `pulumi:"region"`
}

// NewAttachmentAccepter registers a new resource with the given unique name, arguments, and options.
func NewAttachmentAccepter(ctx *pulumi.Context,
	name string, args *AttachmentAccepterArgs, opts ...pulumi.ResourceOption) (*AttachmentAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.AttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'AttachmentId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttachmentAccepter
	err := ctx.RegisterResource("cloudru:Er/attachmentAccepter:AttachmentAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachmentAccepter gets an existing AttachmentAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachmentAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachmentAccepterState, opts ...pulumi.ResourceOption) (*AttachmentAccepter, error) {
	var resource AttachmentAccepter
	err := ctx.ReadResource("cloudru:Er/attachmentAccepter:AttachmentAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttachmentAccepter resources.
type attachmentAccepterState struct {
	// The action type.
	Action *string `pulumi:"action"`
	// The ID of the attachment to be action.
	AttachmentId *string `pulumi:"attachmentId"`
	// The ID of the ER instance.
	InstanceId *string `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

type AttachmentAccepterState struct {
	// The action type.
	Action pulumi.StringPtrInput
	// The ID of the attachment to be action.
	AttachmentId pulumi.StringPtrInput
	// The ID of the ER instance.
	InstanceId pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
}

func (AttachmentAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentAccepterState)(nil)).Elem()
}

type attachmentAccepterArgs struct {
	// The action type.
	Action string `pulumi:"action"`
	// The ID of the attachment to be action.
	AttachmentId string `pulumi:"attachmentId"`
	// The ID of the ER instance.
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

// The set of arguments for constructing a AttachmentAccepter resource.
type AttachmentAccepterArgs struct {
	// The action type.
	Action pulumi.StringInput
	// The ID of the attachment to be action.
	AttachmentId pulumi.StringInput
	// The ID of the ER instance.
	InstanceId pulumi.StringInput
	Region     pulumi.StringPtrInput
}

func (AttachmentAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachmentAccepterArgs)(nil)).Elem()
}

type AttachmentAccepterInput interface {
	pulumi.Input

	ToAttachmentAccepterOutput() AttachmentAccepterOutput
	ToAttachmentAccepterOutputWithContext(ctx context.Context) AttachmentAccepterOutput
}

func (*AttachmentAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachmentAccepter)(nil)).Elem()
}

func (i *AttachmentAccepter) ToAttachmentAccepterOutput() AttachmentAccepterOutput {
	return i.ToAttachmentAccepterOutputWithContext(context.Background())
}

func (i *AttachmentAccepter) ToAttachmentAccepterOutputWithContext(ctx context.Context) AttachmentAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentAccepterOutput)
}

// AttachmentAccepterArrayInput is an input type that accepts AttachmentAccepterArray and AttachmentAccepterArrayOutput values.
// You can construct a concrete instance of `AttachmentAccepterArrayInput` via:
//
//	AttachmentAccepterArray{ AttachmentAccepterArgs{...} }
type AttachmentAccepterArrayInput interface {
	pulumi.Input

	ToAttachmentAccepterArrayOutput() AttachmentAccepterArrayOutput
	ToAttachmentAccepterArrayOutputWithContext(context.Context) AttachmentAccepterArrayOutput
}

type AttachmentAccepterArray []AttachmentAccepterInput

func (AttachmentAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachmentAccepter)(nil)).Elem()
}

func (i AttachmentAccepterArray) ToAttachmentAccepterArrayOutput() AttachmentAccepterArrayOutput {
	return i.ToAttachmentAccepterArrayOutputWithContext(context.Background())
}

func (i AttachmentAccepterArray) ToAttachmentAccepterArrayOutputWithContext(ctx context.Context) AttachmentAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentAccepterArrayOutput)
}

// AttachmentAccepterMapInput is an input type that accepts AttachmentAccepterMap and AttachmentAccepterMapOutput values.
// You can construct a concrete instance of `AttachmentAccepterMapInput` via:
//
//	AttachmentAccepterMap{ "key": AttachmentAccepterArgs{...} }
type AttachmentAccepterMapInput interface {
	pulumi.Input

	ToAttachmentAccepterMapOutput() AttachmentAccepterMapOutput
	ToAttachmentAccepterMapOutputWithContext(context.Context) AttachmentAccepterMapOutput
}

type AttachmentAccepterMap map[string]AttachmentAccepterInput

func (AttachmentAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachmentAccepter)(nil)).Elem()
}

func (i AttachmentAccepterMap) ToAttachmentAccepterMapOutput() AttachmentAccepterMapOutput {
	return i.ToAttachmentAccepterMapOutputWithContext(context.Background())
}

func (i AttachmentAccepterMap) ToAttachmentAccepterMapOutputWithContext(ctx context.Context) AttachmentAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachmentAccepterMapOutput)
}

type AttachmentAccepterOutput struct{ *pulumi.OutputState }

func (AttachmentAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachmentAccepter)(nil)).Elem()
}

func (o AttachmentAccepterOutput) ToAttachmentAccepterOutput() AttachmentAccepterOutput {
	return o
}

func (o AttachmentAccepterOutput) ToAttachmentAccepterOutputWithContext(ctx context.Context) AttachmentAccepterOutput {
	return o
}

// The action type.
func (o AttachmentAccepterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The ID of the attachment to be action.
func (o AttachmentAccepterOutput) AttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.AttachmentId }).(pulumi.StringOutput)
}

// The ID of the ER instance.
func (o AttachmentAccepterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o AttachmentAccepterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachmentAccepter) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type AttachmentAccepterArrayOutput struct{ *pulumi.OutputState }

func (AttachmentAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachmentAccepter)(nil)).Elem()
}

func (o AttachmentAccepterArrayOutput) ToAttachmentAccepterArrayOutput() AttachmentAccepterArrayOutput {
	return o
}

func (o AttachmentAccepterArrayOutput) ToAttachmentAccepterArrayOutputWithContext(ctx context.Context) AttachmentAccepterArrayOutput {
	return o
}

func (o AttachmentAccepterArrayOutput) Index(i pulumi.IntInput) AttachmentAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttachmentAccepter {
		return vs[0].([]*AttachmentAccepter)[vs[1].(int)]
	}).(AttachmentAccepterOutput)
}

type AttachmentAccepterMapOutput struct{ *pulumi.OutputState }

func (AttachmentAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachmentAccepter)(nil)).Elem()
}

func (o AttachmentAccepterMapOutput) ToAttachmentAccepterMapOutput() AttachmentAccepterMapOutput {
	return o
}

func (o AttachmentAccepterMapOutput) ToAttachmentAccepterMapOutputWithContext(ctx context.Context) AttachmentAccepterMapOutput {
	return o
}

func (o AttachmentAccepterMapOutput) MapIndex(k pulumi.StringInput) AttachmentAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttachmentAccepter {
		return vs[0].(map[string]*AttachmentAccepter)[vs[1].(string)]
	}).(AttachmentAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentAccepterInput)(nil)).Elem(), &AttachmentAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentAccepterArrayInput)(nil)).Elem(), AttachmentAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachmentAccepterMapInput)(nil)).Elem(), AttachmentAccepterMap{})
	pulumi.RegisterOutputType(AttachmentAccepterOutput{})
	pulumi.RegisterOutputType(AttachmentAccepterArrayOutput{})
	pulumi.RegisterOutputType(AttachmentAccepterMapOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AlarmruleAlarmActionArgs',
    'AlarmruleAlarmActionArgsDict',
    'AlarmruleConditionArgs',
    'AlarmruleConditionArgsDict',
    'AlarmruleInsufficientdataActionArgs',
    'AlarmruleInsufficientdataActionArgsDict',
    'AlarmruleMetricArgs',
    'AlarmruleMetricArgsDict',
    'AlarmruleMetricDimensionArgs',
    'AlarmruleMetricDimensionArgsDict',
    'AlarmruleOkActionArgs',
    'AlarmruleOkActionArgsDict',
]

MYPY = False

if not MYPY:
    class AlarmruleAlarmActionArgsDict(TypedDict):
        notification_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        type: pulumi.Input[_builtins.str]
elif False:
    AlarmruleAlarmActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlarmruleAlarmActionArgs:
    def __init__(__self__, *,
                 notification_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "notification_lists")

    @notification_lists.setter
    def notification_lists(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "notification_lists", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class AlarmruleConditionArgsDict(TypedDict):
        comparison_operator: pulumi.Input[_builtins.str]
        count: pulumi.Input[_builtins.int]
        filter: pulumi.Input[_builtins.str]
        period: pulumi.Input[_builtins.int]
        value: pulumi.Input[_builtins.int]
        suppress_duration: NotRequired[pulumi.Input[_builtins.int]]
        unit: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    AlarmruleConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlarmruleConditionArgs:
    def __init__(__self__, *,
                 comparison_operator: pulumi.Input[_builtins.str],
                 count: pulumi.Input[_builtins.int],
                 filter: pulumi.Input[_builtins.str],
                 period: pulumi.Input[_builtins.int],
                 value: pulumi.Input[_builtins.int],
                 suppress_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 unit: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "value", value)
        if suppress_duration is not None:
            pulumi.set(__self__, "suppress_duration", suppress_duration)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "comparison_operator")

    @comparison_operator.setter
    def comparison_operator(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "comparison_operator", value)

    @_builtins.property
    @pulumi.getter
    def count(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "count", value)

    @_builtins.property
    @pulumi.getter
    def filter(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "filter", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "suppress_duration")

    @suppress_duration.setter
    def suppress_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "suppress_duration", value)

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "unit", value)


if not MYPY:
    class AlarmruleInsufficientdataActionArgsDict(TypedDict):
        notification_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        type: pulumi.Input[_builtins.str]
elif False:
    AlarmruleInsufficientdataActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlarmruleInsufficientdataActionArgs:
    def __init__(__self__, *,
                 notification_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "notification_lists")

    @notification_lists.setter
    def notification_lists(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "notification_lists", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class AlarmruleMetricArgsDict(TypedDict):
        metric_name: pulumi.Input[_builtins.str]
        namespace: pulumi.Input[_builtins.str]
        dimensions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AlarmruleMetricDimensionArgsDict']]]]
elif False:
    AlarmruleMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlarmruleMetricArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[_builtins.str],
                 namespace: pulumi.Input[_builtins.str],
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleMetricDimensionArgs']]]] = None):
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "metric_name", value)

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "namespace", value)

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleMetricDimensionArgs']]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AlarmruleMetricDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)


if not MYPY:
    class AlarmruleMetricDimensionArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        value: pulumi.Input[_builtins.str]
elif False:
    AlarmruleMetricDimensionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlarmruleMetricDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AlarmruleOkActionArgsDict(TypedDict):
        notification_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        type: pulumi.Input[_builtins.str]
elif False:
    AlarmruleOkActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlarmruleOkActionArgs:
    def __init__(__self__, *,
                 notification_lists: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 type: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "notification_lists")

    @notification_lists.setter
    def notification_lists(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "notification_lists", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)



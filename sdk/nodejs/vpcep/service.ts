// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Service extends pulumi.CustomResource {
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceState, opts?: pulumi.CustomResourceOptions): Service {
        return new Service(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Vpcep/service:Service';

    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Service {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }

    declare public readonly approval: pulumi.Output<boolean>;
    declare public /*out*/ readonly connections: pulumi.Output<outputs.Vpcep.ServiceConnection[]>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly enablePolicy: pulumi.Output<boolean>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly organizationPermissions: pulumi.Output<string[]>;
    declare public readonly permissions: pulumi.Output<string[] | undefined>;
    declare public readonly portId: pulumi.Output<string>;
    declare public readonly portMappings: pulumi.Output<outputs.Vpcep.ServicePortMapping[]>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly serverType: pulumi.Output<string>;
    declare public /*out*/ readonly serviceName: pulumi.Output<string>;
    /**
     * schema: Computed
     */
    declare public readonly serviceType: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Service resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceArgs | ServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceState | undefined;
            resourceInputs["approval"] = state?.approval;
            resourceInputs["connections"] = state?.connections;
            resourceInputs["description"] = state?.description;
            resourceInputs["enablePolicy"] = state?.enablePolicy;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationPermissions"] = state?.organizationPermissions;
            resourceInputs["permissions"] = state?.permissions;
            resourceInputs["portId"] = state?.portId;
            resourceInputs["portMappings"] = state?.portMappings;
            resourceInputs["region"] = state?.region;
            resourceInputs["serverType"] = state?.serverType;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["serviceType"] = state?.serviceType;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ServiceArgs | undefined;
            if (args?.portId === undefined && !opts.urn) {
                throw new Error("Missing required property 'portId'");
            }
            if (args?.portMappings === undefined && !opts.urn) {
                throw new Error("Missing required property 'portMappings'");
            }
            if (args?.serverType === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverType'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["approval"] = args?.approval;
            resourceInputs["description"] = args?.description;
            resourceInputs["enablePolicy"] = args?.enablePolicy;
            resourceInputs["name"] = args?.name;
            resourceInputs["organizationPermissions"] = args?.organizationPermissions;
            resourceInputs["permissions"] = args?.permissions;
            resourceInputs["portId"] = args?.portId;
            resourceInputs["portMappings"] = args?.portMappings;
            resourceInputs["region"] = args?.region;
            resourceInputs["serverType"] = args?.serverType;
            resourceInputs["serviceType"] = args?.serviceType;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["connections"] = undefined /*out*/;
            resourceInputs["serviceName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Service.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Service resources.
 */
export interface ServiceState {
    approval?: pulumi.Input<boolean>;
    connections?: pulumi.Input<pulumi.Input<inputs.Vpcep.ServiceConnection>[]>;
    description?: pulumi.Input<string>;
    enablePolicy?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    organizationPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    portId?: pulumi.Input<string>;
    portMappings?: pulumi.Input<pulumi.Input<inputs.Vpcep.ServicePortMapping>[]>;
    region?: pulumi.Input<string>;
    serverType?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    /**
     * schema: Computed
     */
    serviceType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Service resource.
 */
export interface ServiceArgs {
    approval?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enablePolicy?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    organizationPermissions?: pulumi.Input<pulumi.Input<string>[]>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    portId: pulumi.Input<string>;
    portMappings: pulumi.Input<pulumi.Input<inputs.Vpcep.ServicePortMapping>[]>;
    region?: pulumi.Input<string>;
    serverType: pulumi.Input<string>;
    /**
     * schema: Computed
     */
    serviceType?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}

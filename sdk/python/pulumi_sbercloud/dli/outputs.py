# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'QueueScalingPolicy',
    'QueueSparkDriver',
    'SparkJobDependentPackage',
    'SparkJobDependentPackagePackage',
]

@pulumi.output_type
class QueueScalingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "impactStartTime":
            suggest = "impact_start_time"
        elif key == "impactStopTime":
            suggest = "impact_stop_time"
        elif key == "maxCu":
            suggest = "max_cu"
        elif key == "minCu":
            suggest = "min_cu"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueScalingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueScalingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueScalingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 impact_start_time: _builtins.str,
                 impact_stop_time: _builtins.str,
                 max_cu: _builtins.int,
                 min_cu: _builtins.int,
                 priority: _builtins.int):
        pulumi.set(__self__, "impact_start_time", impact_start_time)
        pulumi.set(__self__, "impact_stop_time", impact_stop_time)
        pulumi.set(__self__, "max_cu", max_cu)
        pulumi.set(__self__, "min_cu", min_cu)
        pulumi.set(__self__, "priority", priority)

    @_builtins.property
    @pulumi.getter(name="impactStartTime")
    def impact_start_time(self) -> _builtins.str:
        return pulumi.get(self, "impact_start_time")

    @_builtins.property
    @pulumi.getter(name="impactStopTime")
    def impact_stop_time(self) -> _builtins.str:
        return pulumi.get(self, "impact_stop_time")

    @_builtins.property
    @pulumi.getter(name="maxCu")
    def max_cu(self) -> _builtins.int:
        return pulumi.get(self, "max_cu")

    @_builtins.property
    @pulumi.getter(name="minCu")
    def min_cu(self) -> _builtins.int:
        return pulumi.get(self, "min_cu")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class QueueSparkDriver(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrent":
            suggest = "max_concurrent"
        elif key == "maxInstance":
            suggest = "max_instance"
        elif key == "maxPrefetchInstance":
            suggest = "max_prefetch_instance"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueSparkDriver. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueSparkDriver.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueSparkDriver.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrent: Optional[_builtins.int] = None,
                 max_instance: Optional[_builtins.int] = None,
                 max_prefetch_instance: Optional[_builtins.str] = None):
        if max_concurrent is not None:
            pulumi.set(__self__, "max_concurrent", max_concurrent)
        if max_instance is not None:
            pulumi.set(__self__, "max_instance", max_instance)
        if max_prefetch_instance is not None:
            pulumi.set(__self__, "max_prefetch_instance", max_prefetch_instance)

    @_builtins.property
    @pulumi.getter(name="maxConcurrent")
    def max_concurrent(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_concurrent")

    @_builtins.property
    @pulumi.getter(name="maxInstance")
    def max_instance(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "max_instance")

    @_builtins.property
    @pulumi.getter(name="maxPrefetchInstance")
    def max_prefetch_instance(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "max_prefetch_instance")


@pulumi.output_type
class SparkJobDependentPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SparkJobDependentPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SparkJobDependentPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SparkJobDependentPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: _builtins.str,
                 packages: Sequence['outputs.SparkJobDependentPackagePackage']):
        """
        :param _builtins.str group_name: Specifies the user group name.
               Changing this parameter will submit a new spark job.
        :param Sequence['SparkJobDependentPackagePackageArgs'] packages: Specifies the user group resource for details.
               Changing this parameter will submit a new spark job.
               The object structure is documented below.
               
               <a name="dependent_packages_packages"></a>
               The `packages` block supports:
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "packages", packages)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Specifies the user group name.
        Changing this parameter will submit a new spark job.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def packages(self) -> Sequence['outputs.SparkJobDependentPackagePackage']:
        """
        Specifies the user group resource for details.
        Changing this parameter will submit a new spark job.
        The object structure is documented below.

        <a name="dependent_packages_packages"></a>
        The `packages` block supports:
        """
        return pulumi.get(self, "packages")


@pulumi.output_type
class SparkJobDependentPackagePackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "packageName":
            suggest = "package_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SparkJobDependentPackagePackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SparkJobDependentPackagePackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SparkJobDependentPackagePackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 package_name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str package_name: Specifies the resource name of the package.
               Changing this parameter will submit a new spark job.
        :param _builtins.str type: Specifies the resource type of the package.
               Changing this parameter will submit a new spark job.
        """
        pulumi.set(__self__, "package_name", package_name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="packageName")
    def package_name(self) -> _builtins.str:
        """
        Specifies the resource name of the package.
        Changing this parameter will submit a new spark job.
        """
        return pulumi.get(self, "package_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the resource type of the package.
        Changing this parameter will submit a new spark job.
        """
        return pulumi.get(self, "type")



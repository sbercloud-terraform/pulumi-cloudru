# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'StreamPartitionArgs',
    'StreamPartitionArgsDict',
]

MYPY = False

if not MYPY:
    class StreamPartitionArgsDict(TypedDict):
        hash_range: NotRequired[pulumi.Input[_builtins.str]]
        """
        Possible value range of the hash key used by each partition.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the partition.
        """
        sequence_number_range: NotRequired[pulumi.Input[_builtins.str]]
        """
        Sequence number range of each partition.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The status of the partition.
        """
elif False:
    StreamPartitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamPartitionArgs:
    def __init__(__self__, *,
                 hash_range: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 sequence_number_range: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] hash_range: Possible value range of the hash key used by each partition.
        :param pulumi.Input[_builtins.str] id: The ID of the partition.
        :param pulumi.Input[_builtins.str] sequence_number_range: Sequence number range of each partition.
        :param pulumi.Input[_builtins.str] status: The status of the partition.
        """
        if hash_range is not None:
            pulumi.set(__self__, "hash_range", hash_range)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if sequence_number_range is not None:
            pulumi.set(__self__, "sequence_number_range", sequence_number_range)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="hashRange")
    def hash_range(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Possible value range of the hash key used by each partition.
        """
        return pulumi.get(self, "hash_range")

    @hash_range.setter
    def hash_range(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hash_range", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the partition.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="sequenceNumberRange")
    def sequence_number_range(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Sequence number range of each partition.
        """
        return pulumi.get(self, "sequence_number_range")

    @sequence_number_range.setter
    def sequence_number_range(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sequence_number_range", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The status of the partition.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)



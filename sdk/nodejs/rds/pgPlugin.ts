// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class PgPlugin extends pulumi.CustomResource {
    /**
     * Get an existing PgPlugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PgPluginState, opts?: pulumi.CustomResourceOptions): PgPlugin {
        return new PgPlugin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Rds/pgPlugin:PgPlugin';

    /**
     * Returns true if the given object is an instance of PgPlugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PgPlugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PgPlugin.__pulumiType;
    }

    declare public readonly databaseName: pulumi.Output<string>;
    declare public /*out*/ readonly description: pulumi.Output<string>;
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly sharedPreloadLibraries: pulumi.Output<string>;
    declare public /*out*/ readonly version: pulumi.Output<string>;

    /**
     * Create a PgPlugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PgPluginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PgPluginArgs | PgPluginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PgPluginState | undefined;
            resourceInputs["databaseName"] = state?.databaseName;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["sharedPreloadLibraries"] = state?.sharedPreloadLibraries;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as PgPluginArgs | undefined;
            if (args?.databaseName === undefined && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["databaseName"] = args?.databaseName;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["sharedPreloadLibraries"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PgPlugin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PgPlugin resources.
 */
export interface PgPluginState {
    databaseName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sharedPreloadLibraries?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PgPlugin resource.
 */
export interface PgPluginArgs {
    databaseName: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

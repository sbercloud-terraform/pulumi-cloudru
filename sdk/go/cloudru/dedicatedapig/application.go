// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicatedapig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Application struct {
	pulumi.CustomResourceState

	// The array of one or more application codes that the application has.
	AppCodes pulumi.StringArrayOutput `pulumi:"appCodes"`
	// The APP key.
	AppKey pulumi.StringOutput `pulumi:"appKey"`
	// The APP secret.
	AppSecret pulumi.StringOutput `pulumi:"appSecret"`
	// The application description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The ID of the dedicated instance to which the application belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The application name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region where the application is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The registration time.
	RegistrationTime pulumi.StringOutput `pulumi:"registrationTime"`
	// The secret action to be done for the application.
	SecretAction pulumi.StringPtrOutput `pulumi:"secretAction"`
	// The latest update time of the application.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"appSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("cloudru:DedicatedApig/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("cloudru:DedicatedApig/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// The array of one or more application codes that the application has.
	AppCodes []string `pulumi:"appCodes"`
	// The APP key.
	AppKey *string `pulumi:"appKey"`
	// The APP secret.
	AppSecret *string `pulumi:"appSecret"`
	// The application description.
	Description *string `pulumi:"description"`
	// The ID of the dedicated instance to which the application belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The application name.
	Name *string `pulumi:"name"`
	// The region where the application is located.
	Region *string `pulumi:"region"`
	// The registration time.
	RegistrationTime *string `pulumi:"registrationTime"`
	// The secret action to be done for the application.
	SecretAction *string `pulumi:"secretAction"`
	// The latest update time of the application.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ApplicationState struct {
	// The array of one or more application codes that the application has.
	AppCodes pulumi.StringArrayInput
	// The APP key.
	AppKey pulumi.StringPtrInput
	// The APP secret.
	AppSecret pulumi.StringPtrInput
	// The application description.
	Description pulumi.StringPtrInput
	// The ID of the dedicated instance to which the application belongs.
	InstanceId pulumi.StringPtrInput
	// The application name.
	Name pulumi.StringPtrInput
	// The region where the application is located.
	Region pulumi.StringPtrInput
	// The registration time.
	RegistrationTime pulumi.StringPtrInput
	// The secret action to be done for the application.
	SecretAction pulumi.StringPtrInput
	// The latest update time of the application.
	UpdatedAt pulumi.StringPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// The array of one or more application codes that the application has.
	AppCodes []string `pulumi:"appCodes"`
	// The application description.
	Description *string `pulumi:"description"`
	// The ID of the dedicated instance to which the application belongs.
	InstanceId string `pulumi:"instanceId"`
	// The application name.
	Name *string `pulumi:"name"`
	// The region where the application is located.
	Region *string `pulumi:"region"`
	// The secret action to be done for the application.
	SecretAction *string `pulumi:"secretAction"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// The array of one or more application codes that the application has.
	AppCodes pulumi.StringArrayInput
	// The application description.
	Description pulumi.StringPtrInput
	// The ID of the dedicated instance to which the application belongs.
	InstanceId pulumi.StringInput
	// The application name.
	Name pulumi.StringPtrInput
	// The region where the application is located.
	Region pulumi.StringPtrInput
	// The secret action to be done for the application.
	SecretAction pulumi.StringPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// The array of one or more application codes that the application has.
func (o ApplicationOutput) AppCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.AppCodes }).(pulumi.StringArrayOutput)
}

// The APP key.
func (o ApplicationOutput) AppKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.AppKey }).(pulumi.StringOutput)
}

// The APP secret.
func (o ApplicationOutput) AppSecret() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.AppSecret }).(pulumi.StringOutput)
}

// The application description.
func (o ApplicationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The ID of the dedicated instance to which the application belongs.
func (o ApplicationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The application name.
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region where the application is located.
func (o ApplicationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The registration time.
func (o ApplicationOutput) RegistrationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.RegistrationTime }).(pulumi.StringOutput)
}

// The secret action to be done for the application.
func (o ApplicationOutput) SecretAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.SecretAction }).(pulumi.StringPtrOutput)
}

// The latest update time of the application.
func (o ApplicationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StreamArgs', 'Stream']

@pulumi.input_type
class StreamArgs:
    def __init__(__self__, *,
                 partition_count: pulumi.Input[_builtins.int],
                 stream_name: pulumi.Input[_builtins.str],
                 auto_scale_max_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 auto_scale_min_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 compression_format: Optional[pulumi.Input[_builtins.str]] = None,
                 csv_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 data_schema: Optional[pulumi.Input[_builtins.str]] = None,
                 data_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_period: Optional[pulumi.Input[_builtins.int]] = None,
                 stream_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Stream resource.
        """
        pulumi.set(__self__, "partition_count", partition_count)
        pulumi.set(__self__, "stream_name", stream_name)
        if auto_scale_max_partition_count is not None:
            pulumi.set(__self__, "auto_scale_max_partition_count", auto_scale_max_partition_count)
        if auto_scale_min_partition_count is not None:
            pulumi.set(__self__, "auto_scale_min_partition_count", auto_scale_min_partition_count)
        if compression_format is not None:
            pulumi.set(__self__, "compression_format", compression_format)
        if csv_delimiter is not None:
            pulumi.set(__self__, "csv_delimiter", csv_delimiter)
        if data_schema is not None:
            pulumi.set(__self__, "data_schema", data_schema)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)
        if stream_type is not None:
            pulumi.set(__self__, "stream_type", stream_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "partition_count")

    @partition_count.setter
    def partition_count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "partition_count", value)

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "stream_name", value)

    @_builtins.property
    @pulumi.getter(name="autoScaleMaxPartitionCount")
    def auto_scale_max_partition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "auto_scale_max_partition_count")

    @auto_scale_max_partition_count.setter
    def auto_scale_max_partition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "auto_scale_max_partition_count", value)

    @_builtins.property
    @pulumi.getter(name="autoScaleMinPartitionCount")
    def auto_scale_min_partition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "auto_scale_min_partition_count")

    @auto_scale_min_partition_count.setter
    def auto_scale_min_partition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "auto_scale_min_partition_count", value)

    @_builtins.property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compression_format")

    @compression_format.setter
    def compression_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compression_format", value)

    @_builtins.property
    @pulumi.getter(name="csvDelimiter")
    def csv_delimiter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "csv_delimiter")

    @csv_delimiter.setter
    def csv_delimiter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "csv_delimiter", value)

    @_builtins.property
    @pulumi.getter(name="dataSchema")
    def data_schema(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "data_schema")

    @data_schema.setter
    def data_schema(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_schema", value)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_type", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_period", value)

    @_builtins.property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "stream_type")

    @stream_type.setter
    def stream_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stream_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _StreamState:
    def __init__(__self__, *,
                 auto_scale_max_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 auto_scale_min_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 compression_format: Optional[pulumi.Input[_builtins.str]] = None,
                 created: Optional[pulumi.Input[_builtins.int]] = None,
                 csv_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 data_schema: Optional[pulumi.Input[_builtins.str]] = None,
                 data_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 partitions: Optional[pulumi.Input[Sequence[pulumi.Input['StreamPartitionArgs']]]] = None,
                 readable_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_period: Optional[pulumi.Input[_builtins.int]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_id: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 writable_partition_count: Optional[pulumi.Input[_builtins.int]] = None):
        """
        Input properties used for looking up and filtering Stream resources.
        """
        if auto_scale_max_partition_count is not None:
            pulumi.set(__self__, "auto_scale_max_partition_count", auto_scale_max_partition_count)
        if auto_scale_min_partition_count is not None:
            pulumi.set(__self__, "auto_scale_min_partition_count", auto_scale_min_partition_count)
        if compression_format is not None:
            pulumi.set(__self__, "compression_format", compression_format)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if csv_delimiter is not None:
            pulumi.set(__self__, "csv_delimiter", csv_delimiter)
        if data_schema is not None:
            pulumi.set(__self__, "data_schema", data_schema)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if partition_count is not None:
            pulumi.set(__self__, "partition_count", partition_count)
        if partitions is not None:
            pulumi.set(__self__, "partitions", partitions)
        if readable_partition_count is not None:
            pulumi.set(__self__, "readable_partition_count", readable_partition_count)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if retention_period is not None:
            pulumi.set(__self__, "retention_period", retention_period)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stream_id is not None:
            pulumi.set(__self__, "stream_id", stream_id)
        if stream_name is not None:
            pulumi.set(__self__, "stream_name", stream_name)
        if stream_type is not None:
            pulumi.set(__self__, "stream_type", stream_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if writable_partition_count is not None:
            pulumi.set(__self__, "writable_partition_count", writable_partition_count)

    @_builtins.property
    @pulumi.getter(name="autoScaleMaxPartitionCount")
    def auto_scale_max_partition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "auto_scale_max_partition_count")

    @auto_scale_max_partition_count.setter
    def auto_scale_max_partition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "auto_scale_max_partition_count", value)

    @_builtins.property
    @pulumi.getter(name="autoScaleMinPartitionCount")
    def auto_scale_min_partition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "auto_scale_min_partition_count")

    @auto_scale_min_partition_count.setter
    def auto_scale_min_partition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "auto_scale_min_partition_count", value)

    @_builtins.property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "compression_format")

    @compression_format.setter
    def compression_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "compression_format", value)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "created", value)

    @_builtins.property
    @pulumi.getter(name="csvDelimiter")
    def csv_delimiter(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "csv_delimiter")

    @csv_delimiter.setter
    def csv_delimiter(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "csv_delimiter", value)

    @_builtins.property
    @pulumi.getter(name="dataSchema")
    def data_schema(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "data_schema")

    @data_schema.setter
    def data_schema(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_schema", value)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "data_type", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "partition_count")

    @partition_count.setter
    def partition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "partition_count", value)

    @_builtins.property
    @pulumi.getter
    def partitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StreamPartitionArgs']]]]:
        return pulumi.get(self, "partitions")

    @partitions.setter
    def partitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StreamPartitionArgs']]]]):
        pulumi.set(self, "partitions", value)

    @_builtins.property
    @pulumi.getter(name="readablePartitionCount")
    def readable_partition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "readable_partition_count")

    @readable_partition_count.setter
    def readable_partition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "readable_partition_count", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "retention_period")

    @retention_period.setter
    def retention_period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_period", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "stream_id")

    @stream_id.setter
    def stream_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stream_id", value)

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stream_name", value)

    @_builtins.property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "stream_type")

    @stream_type.setter
    def stream_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stream_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="writablePartitionCount")
    def writable_partition_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "writable_partition_count")

    @writable_partition_count.setter
    def writable_partition_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "writable_partition_count", value)


@pulumi.type_token("cloudru:Dis/stream:Stream")
class Stream(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scale_max_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 auto_scale_min_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 compression_format: Optional[pulumi.Input[_builtins.str]] = None,
                 csv_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 data_schema: Optional[pulumi.Input[_builtins.str]] = None,
                 data_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_period: Optional[pulumi.Input[_builtins.int]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Create a Stream resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Stream resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StreamArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_scale_max_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 auto_scale_min_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 compression_format: Optional[pulumi.Input[_builtins.str]] = None,
                 csv_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
                 data_schema: Optional[pulumi.Input[_builtins.str]] = None,
                 data_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 partition_count: Optional[pulumi.Input[_builtins.int]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 retention_period: Optional[pulumi.Input[_builtins.int]] = None,
                 stream_name: Optional[pulumi.Input[_builtins.str]] = None,
                 stream_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamArgs.__new__(StreamArgs)

            __props__.__dict__["auto_scale_max_partition_count"] = auto_scale_max_partition_count
            __props__.__dict__["auto_scale_min_partition_count"] = auto_scale_min_partition_count
            __props__.__dict__["compression_format"] = compression_format
            __props__.__dict__["csv_delimiter"] = csv_delimiter
            __props__.__dict__["data_schema"] = data_schema
            __props__.__dict__["data_type"] = data_type
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            if partition_count is None and not opts.urn:
                raise TypeError("Missing required property 'partition_count'")
            __props__.__dict__["partition_count"] = partition_count
            __props__.__dict__["region"] = region
            __props__.__dict__["retention_period"] = retention_period
            if stream_name is None and not opts.urn:
                raise TypeError("Missing required property 'stream_name'")
            __props__.__dict__["stream_name"] = stream_name
            __props__.__dict__["stream_type"] = stream_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created"] = None
            __props__.__dict__["partitions"] = None
            __props__.__dict__["readable_partition_count"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["stream_id"] = None
            __props__.__dict__["writable_partition_count"] = None
        super(Stream, __self__).__init__(
            'cloudru:Dis/stream:Stream',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_scale_max_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
            auto_scale_min_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
            compression_format: Optional[pulumi.Input[_builtins.str]] = None,
            created: Optional[pulumi.Input[_builtins.int]] = None,
            csv_delimiter: Optional[pulumi.Input[_builtins.str]] = None,
            data_schema: Optional[pulumi.Input[_builtins.str]] = None,
            data_type: Optional[pulumi.Input[_builtins.str]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            partition_count: Optional[pulumi.Input[_builtins.int]] = None,
            partitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['StreamPartitionArgs', 'StreamPartitionArgsDict']]]]] = None,
            readable_partition_count: Optional[pulumi.Input[_builtins.int]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            retention_period: Optional[pulumi.Input[_builtins.int]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            stream_id: Optional[pulumi.Input[_builtins.str]] = None,
            stream_name: Optional[pulumi.Input[_builtins.str]] = None,
            stream_type: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            writable_partition_count: Optional[pulumi.Input[_builtins.int]] = None) -> 'Stream':
        """
        Get an existing Stream resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamState.__new__(_StreamState)

        __props__.__dict__["auto_scale_max_partition_count"] = auto_scale_max_partition_count
        __props__.__dict__["auto_scale_min_partition_count"] = auto_scale_min_partition_count
        __props__.__dict__["compression_format"] = compression_format
        __props__.__dict__["created"] = created
        __props__.__dict__["csv_delimiter"] = csv_delimiter
        __props__.__dict__["data_schema"] = data_schema
        __props__.__dict__["data_type"] = data_type
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["partition_count"] = partition_count
        __props__.__dict__["partitions"] = partitions
        __props__.__dict__["readable_partition_count"] = readable_partition_count
        __props__.__dict__["region"] = region
        __props__.__dict__["retention_period"] = retention_period
        __props__.__dict__["status"] = status
        __props__.__dict__["stream_id"] = stream_id
        __props__.__dict__["stream_name"] = stream_name
        __props__.__dict__["stream_type"] = stream_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["writable_partition_count"] = writable_partition_count
        return Stream(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="autoScaleMaxPartitionCount")
    def auto_scale_max_partition_count(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "auto_scale_max_partition_count")

    @_builtins.property
    @pulumi.getter(name="autoScaleMinPartitionCount")
    def auto_scale_min_partition_count(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "auto_scale_min_partition_count")

    @_builtins.property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "compression_format")

    @_builtins.property
    @pulumi.getter
    def created(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="csvDelimiter")
    def csv_delimiter(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "csv_delimiter")

    @_builtins.property
    @pulumi.getter(name="dataSchema")
    def data_schema(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "data_schema")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="partitionCount")
    def partition_count(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "partition_count")

    @_builtins.property
    @pulumi.getter
    def partitions(self) -> pulumi.Output[Sequence['outputs.StreamPartition']]:
        return pulumi.get(self, "partitions")

    @_builtins.property
    @pulumi.getter(name="readablePartitionCount")
    def readable_partition_count(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "readable_partition_count")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "retention_period")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "stream_id")

    @_builtins.property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "stream_name")

    @_builtins.property
    @pulumi.getter(name="streamType")
    def stream_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "stream_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="writablePartitionCount")
    def writable_partition_count(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "writable_partition_count")


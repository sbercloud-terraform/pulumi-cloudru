// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages an ELB monitor resource within Cloud.ru.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			poolId := cfg.RequireObject("poolId")
//			_, err := sbercloud.NewElbMonitor(ctx, "monitor_1", &sbercloud.ElbMonitorArgs{
//				PoolId:     pulumi.Any(poolId),
//				Protocol:   pulumi.String("HTTPS"),
//				Interval:   pulumi.Int(30),
//				Timeout:    pulumi.Int(20),
//				MaxRetries: pulumi.Int(8),
//				UrlPath:    pulumi.String("/bb"),
//				DomainName: pulumi.String("www.bb.com"),
//				Port:       pulumi.Int(8888),
//				StatusCode: pulumi.String("200,301,404-500,504"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB monitor can be imported using the monitor `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:index/elbMonitor:ElbMonitor test <id>
// ```
type ElbMonitor struct {
	pulumi.CustomResourceState

	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Specifies the interval between health checks, in seconds.
	// Value ranges from **1** to **50**.
	Interval pulumi.IntOutput `pulumi:"interval"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from **1** to **50**.
	MaxRetries pulumi.IntOutput `pulumi:"maxRetries"`
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default.  Value ranges from **1** to **65535**.
	Port pulumi.IntOutput `pulumi:"port"`
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	//
	// Defaults to **200**.
	StatusCode pulumi.StringOutput `pulumi:"statusCode"`
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from **1** to **50**. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath pulumi.StringOutput `pulumi:"urlPath"`
}

// NewElbMonitor registers a new resource with the given unique name, arguments, and options.
func NewElbMonitor(ctx *pulumi.Context,
	name string, args *ElbMonitorArgs, opts ...pulumi.ResourceOption) (*ElbMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.MaxRetries == nil {
		return nil, errors.New("invalid value for required argument 'MaxRetries'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElbMonitor
	err := ctx.RegisterResource("sbercloud:index/elbMonitor:ElbMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbMonitor gets an existing ElbMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbMonitorState, opts ...pulumi.ResourceOption) (*ElbMonitor, error) {
	var resource ElbMonitor
	err := ctx.ReadResource("sbercloud:index/elbMonitor:ElbMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbMonitor resources.
type elbMonitorState struct {
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName *string `pulumi:"domainName"`
	// Specifies the interval between health checks, in seconds.
	// Value ranges from **1** to **50**.
	Interval *int `pulumi:"interval"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from **1** to **50**.
	MaxRetries *int `pulumi:"maxRetries"`
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId *string `pulumi:"poolId"`
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default.  Value ranges from **1** to **65535**.
	Port *int `pulumi:"port"`
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	Protocol *string `pulumi:"protocol"`
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region *string `pulumi:"region"`
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	//
	// Defaults to **200**.
	StatusCode *string `pulumi:"statusCode"`
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from **1** to **50**. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout *int `pulumi:"timeout"`
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath *string `pulumi:"urlPath"`
}

type ElbMonitorState struct {
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName pulumi.StringPtrInput
	// Specifies the interval between health checks, in seconds.
	// Value ranges from **1** to **50**.
	Interval pulumi.IntPtrInput
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from **1** to **50**.
	MaxRetries pulumi.IntPtrInput
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId pulumi.StringPtrInput
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default.  Value ranges from **1** to **65535**.
	Port pulumi.IntPtrInput
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	Protocol pulumi.StringPtrInput
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region pulumi.StringPtrInput
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	//
	// Defaults to **200**.
	StatusCode pulumi.StringPtrInput
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from **1** to **50**. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout pulumi.IntPtrInput
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath pulumi.StringPtrInput
}

func (ElbMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbMonitorState)(nil)).Elem()
}

type elbMonitorArgs struct {
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName *string `pulumi:"domainName"`
	// Specifies the interval between health checks, in seconds.
	// Value ranges from **1** to **50**.
	Interval int `pulumi:"interval"`
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from **1** to **50**.
	MaxRetries int `pulumi:"maxRetries"`
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId string `pulumi:"poolId"`
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default.  Value ranges from **1** to **65535**.
	Port *int `pulumi:"port"`
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	Protocol string `pulumi:"protocol"`
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region *string `pulumi:"region"`
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	//
	// Defaults to **200**.
	StatusCode *string `pulumi:"statusCode"`
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from **1** to **50**. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout int `pulumi:"timeout"`
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath *string `pulumi:"urlPath"`
}

// The set of arguments for constructing a ElbMonitor resource.
type ElbMonitorArgs struct {
	// Specifies the domain name that HTTP requests are sent to during the health check.
	// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
	// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
	// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
	// is set to **HTTP** or **HTTPS**.
	DomainName pulumi.StringPtrInput
	// Specifies the interval between health checks, in seconds.
	// Value ranges from **1** to **50**.
	Interval pulumi.IntInput
	// Specifies the number of consecutive health checks when the health check result of
	// a backend server changes from OFFLINE to ONLINE. Value ranges from **1** to **50**.
	MaxRetries pulumi.IntInput
	// Specifies the ID of the backend server group for which the health check is
	// configured. Changing this creates a new monitor.
	PoolId pulumi.StringInput
	// Specifies the port used for the health check. If this parameter is left blank, a port of
	// the backend server will be used by default.  Value ranges from **1** to **65535**.
	Port pulumi.IntPtrInput
	// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
	// **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
	// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
	Protocol pulumi.StringInput
	// The region in which to create the ELB monitor resource. If omitted, the
	// provider-level region will be used. Changing this creates a new monitor.
	Region pulumi.StringPtrInput
	// Specifies the expected HTTP status code. This parameter will take effect only when
	// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
	// + A specific value, for example: **200**.
	// + A list of values that are separated with commas (,), for example: **200,202**.
	// + A value range, for example: **200-204**.
	//
	// Defaults to **200**.
	StatusCode pulumi.StringPtrInput
	// Specifies the maximum time required for waiting for a response from the health check,
	// in seconds. Value ranges from **1** to **50**. It is recommended that you set the value less than that of
	// parameter `interval`.
	Timeout pulumi.IntInput
	// Specifies the HTTP request path for the health check. The value must start with a
	// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
	// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
	// `protocol` is set to **HTTP** or **HTTPS**.
	UrlPath pulumi.StringPtrInput
}

func (ElbMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbMonitorArgs)(nil)).Elem()
}

type ElbMonitorInput interface {
	pulumi.Input

	ToElbMonitorOutput() ElbMonitorOutput
	ToElbMonitorOutputWithContext(ctx context.Context) ElbMonitorOutput
}

func (*ElbMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbMonitor)(nil)).Elem()
}

func (i *ElbMonitor) ToElbMonitorOutput() ElbMonitorOutput {
	return i.ToElbMonitorOutputWithContext(context.Background())
}

func (i *ElbMonitor) ToElbMonitorOutputWithContext(ctx context.Context) ElbMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMonitorOutput)
}

// ElbMonitorArrayInput is an input type that accepts ElbMonitorArray and ElbMonitorArrayOutput values.
// You can construct a concrete instance of `ElbMonitorArrayInput` via:
//
//	ElbMonitorArray{ ElbMonitorArgs{...} }
type ElbMonitorArrayInput interface {
	pulumi.Input

	ToElbMonitorArrayOutput() ElbMonitorArrayOutput
	ToElbMonitorArrayOutputWithContext(context.Context) ElbMonitorArrayOutput
}

type ElbMonitorArray []ElbMonitorInput

func (ElbMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbMonitor)(nil)).Elem()
}

func (i ElbMonitorArray) ToElbMonitorArrayOutput() ElbMonitorArrayOutput {
	return i.ToElbMonitorArrayOutputWithContext(context.Background())
}

func (i ElbMonitorArray) ToElbMonitorArrayOutputWithContext(ctx context.Context) ElbMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMonitorArrayOutput)
}

// ElbMonitorMapInput is an input type that accepts ElbMonitorMap and ElbMonitorMapOutput values.
// You can construct a concrete instance of `ElbMonitorMapInput` via:
//
//	ElbMonitorMap{ "key": ElbMonitorArgs{...} }
type ElbMonitorMapInput interface {
	pulumi.Input

	ToElbMonitorMapOutput() ElbMonitorMapOutput
	ToElbMonitorMapOutputWithContext(context.Context) ElbMonitorMapOutput
}

type ElbMonitorMap map[string]ElbMonitorInput

func (ElbMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbMonitor)(nil)).Elem()
}

func (i ElbMonitorMap) ToElbMonitorMapOutput() ElbMonitorMapOutput {
	return i.ToElbMonitorMapOutputWithContext(context.Background())
}

func (i ElbMonitorMap) ToElbMonitorMapOutputWithContext(ctx context.Context) ElbMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMonitorMapOutput)
}

type ElbMonitorOutput struct{ *pulumi.OutputState }

func (ElbMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbMonitor)(nil)).Elem()
}

func (o ElbMonitorOutput) ToElbMonitorOutput() ElbMonitorOutput {
	return o
}

func (o ElbMonitorOutput) ToElbMonitorOutputWithContext(ctx context.Context) ElbMonitorOutput {
	return o
}

// Specifies the domain name that HTTP requests are sent to during the health check.
// The domain name consists of 1 to 100 characters, can contain only digits, letters, hyphens (-), and periods (.) and
// must start with a digit or letter. The value is left blank by default, indicating that the virtual IP address of the
// load balancer is used as the destination address of HTTP requests. This parameter is available only when `protocol`
// is set to **HTTP** or **HTTPS**.
func (o ElbMonitorOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Specifies the interval between health checks, in seconds.
// Value ranges from **1** to **50**.
func (o ElbMonitorOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// Specifies the number of consecutive health checks when the health check result of
// a backend server changes from OFFLINE to ONLINE. Value ranges from **1** to **50**.
func (o ElbMonitorOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.IntOutput { return v.MaxRetries }).(pulumi.IntOutput)
}

// Specifies the ID of the backend server group for which the health check is
// configured. Changing this creates a new monitor.
func (o ElbMonitorOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// Specifies the port used for the health check. If this parameter is left blank, a port of
// the backend server will be used by default.  Value ranges from **1** to **65535**.
func (o ElbMonitorOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Specifies the health check protocol. Value options: **TCP**, **UDP_CONNECT**,
// **HTTP**, or **HTTPS**.
// + If the protocol of the backend server is **QUIC**, the value can only be **UDP_CONNECT**.
// + If the protocol of the backend server is **UDP**, the value can only be **UDP_CONNECT**.
// + If the protocol of the backend server is **TCP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
// + If the protocol of the backend server is **HTTP**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
// + If the protocol of the backend server is **HTTPS**, the value can only be **TCP**, **HTTP**, or **HTTPS**.
func (o ElbMonitorOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The region in which to create the ELB monitor resource. If omitted, the
// provider-level region will be used. Changing this creates a new monitor.
func (o ElbMonitorOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the expected HTTP status code. This parameter will take effect only when
// `protocol` is set to **HTTP** or **HTTPS**. Value options are as follows:
// + A specific value, for example: **200**.
// + A list of values that are separated with commas (,), for example: **200,202**.
// + A value range, for example: **200-204**.
//
// Defaults to **200**.
func (o ElbMonitorOutput) StatusCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.StatusCode }).(pulumi.StringOutput)
}

// Specifies the maximum time required for waiting for a response from the health check,
// in seconds. Value ranges from **1** to **50**. It is recommended that you set the value less than that of
// parameter `interval`.
func (o ElbMonitorOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Specifies the HTTP request path for the health check. The value must start with a
// slash (/), can contain letters, digits, hyphens (-), slash (/), periods (.), percent signs (%), hashes(#), and(&)
// and the special characters: `~!()*[]@$^:',+`, and the default value is **/**. This parameter is available only when
// `protocol` is set to **HTTP** or **HTTPS**.
func (o ElbMonitorOutput) UrlPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.UrlPath }).(pulumi.StringOutput)
}

type ElbMonitorArrayOutput struct{ *pulumi.OutputState }

func (ElbMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbMonitor)(nil)).Elem()
}

func (o ElbMonitorArrayOutput) ToElbMonitorArrayOutput() ElbMonitorArrayOutput {
	return o
}

func (o ElbMonitorArrayOutput) ToElbMonitorArrayOutputWithContext(ctx context.Context) ElbMonitorArrayOutput {
	return o
}

func (o ElbMonitorArrayOutput) Index(i pulumi.IntInput) ElbMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbMonitor {
		return vs[0].([]*ElbMonitor)[vs[1].(int)]
	}).(ElbMonitorOutput)
}

type ElbMonitorMapOutput struct{ *pulumi.OutputState }

func (ElbMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbMonitor)(nil)).Elem()
}

func (o ElbMonitorMapOutput) ToElbMonitorMapOutput() ElbMonitorMapOutput {
	return o
}

func (o ElbMonitorMapOutput) ToElbMonitorMapOutputWithContext(ctx context.Context) ElbMonitorMapOutput {
	return o
}

func (o ElbMonitorMapOutput) MapIndex(k pulumi.StringInput) ElbMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbMonitor {
		return vs[0].(map[string]*ElbMonitor)[vs[1].(string)]
	}).(ElbMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMonitorInput)(nil)).Elem(), &ElbMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMonitorArrayInput)(nil)).Elem(), ElbMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMonitorMapInput)(nil)).Elem(), ElbMonitorMap{})
	pulumi.RegisterOutputType(ElbMonitorOutput{})
	pulumi.RegisterOutputType(ElbMonitorArrayOutput{})
	pulumi.RegisterOutputType(ElbMonitorMapOutput{})
}

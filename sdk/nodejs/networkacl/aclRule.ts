// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class AclRule extends pulumi.CustomResource {
    /**
     * Get an existing AclRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclRuleState, opts?: pulumi.CustomResourceOptions): AclRule {
        return new AclRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:NetworkAcl/aclRule:AclRule';

    /**
     * Returns true if the given object is an instance of AclRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclRule.__pulumiType;
    }

    declare public readonly action: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly destinationIpAddress: pulumi.Output<string | undefined>;
    declare public readonly destinationPort: pulumi.Output<string | undefined>;
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    declare public readonly ipVersion: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly protocol: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly sourceIpAddress: pulumi.Output<string | undefined>;
    declare public readonly sourcePort: pulumi.Output<string | undefined>;

    /**
     * Create a AclRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclRuleArgs | AclRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclRuleState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["description"] = state?.description;
            resourceInputs["destinationIpAddress"] = state?.destinationIpAddress;
            resourceInputs["destinationPort"] = state?.destinationPort;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["ipVersion"] = state?.ipVersion;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["region"] = state?.region;
            resourceInputs["sourceIpAddress"] = state?.sourceIpAddress;
            resourceInputs["sourcePort"] = state?.sourcePort;
        } else {
            const args = argsOrState as AclRuleArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["description"] = args?.description;
            resourceInputs["destinationIpAddress"] = args?.destinationIpAddress;
            resourceInputs["destinationPort"] = args?.destinationPort;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["ipVersion"] = args?.ipVersion;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["region"] = args?.region;
            resourceInputs["sourceIpAddress"] = args?.sourceIpAddress;
            resourceInputs["sourcePort"] = args?.sourcePort;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclRule resources.
 */
export interface AclRuleState {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationIpAddress?: pulumi.Input<string>;
    destinationPort?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    ipVersion?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sourceIpAddress?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AclRule resource.
 */
export interface AclRuleArgs {
    action: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationIpAddress?: pulumi.Input<string>;
    destinationPort?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    ipVersion?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    protocol: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sourceIpAddress?: pulumi.Input<string>;
    sourcePort?: pulumi.Input<string>;
}

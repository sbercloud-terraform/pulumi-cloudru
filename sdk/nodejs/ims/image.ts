// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Ims/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    public readonly backupId!: pulumi.Output<string>;
    public /*out*/ readonly checksum!: pulumi.Output<string>;
    public readonly cmkId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly dataOrigin!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly diskFormat!: pulumi.Output<string>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public /*out*/ readonly imageSize!: pulumi.Output<string>;
    public readonly imageUrl!: pulumi.Output<string | undefined>;
    public readonly instanceId!: pulumi.Output<string>;
    public readonly isConfig!: pulumi.Output<boolean | undefined>;
    public readonly maxRam!: pulumi.Output<number>;
    public readonly minDisk!: pulumi.Output<number | undefined>;
    public readonly minRam!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly osVersion!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly vaultId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly visibility!: pulumi.Output<string>;
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["checksum"] = state ? state.checksum : undefined;
            resourceInputs["cmkId"] = state ? state.cmkId : undefined;
            resourceInputs["dataOrigin"] = state ? state.dataOrigin : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskFormat"] = state ? state.diskFormat : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["imageSize"] = state ? state.imageSize : undefined;
            resourceInputs["imageUrl"] = state ? state.imageUrl : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["isConfig"] = state ? state.isConfig : undefined;
            resourceInputs["maxRam"] = state ? state.maxRam : undefined;
            resourceInputs["minDisk"] = state ? state.minDisk : undefined;
            resourceInputs["minRam"] = state ? state.minRam : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["osVersion"] = state ? state.osVersion : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vaultId"] = state ? state.vaultId : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            resourceInputs["backupId"] = args ? args.backupId : undefined;
            resourceInputs["cmkId"] = args ? args.cmkId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["imageUrl"] = args ? args.imageUrl : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["isConfig"] = args ? args.isConfig : undefined;
            resourceInputs["maxRam"] = args ? args.maxRam : undefined;
            resourceInputs["minDisk"] = args ? args.minDisk : undefined;
            resourceInputs["minRam"] = args ? args.minRam : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["osVersion"] = args ? args.osVersion : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vaultId"] = args ? args.vaultId : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["checksum"] = undefined /*out*/;
            resourceInputs["dataOrigin"] = undefined /*out*/;
            resourceInputs["diskFormat"] = undefined /*out*/;
            resourceInputs["imageSize"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    backupId?: pulumi.Input<string>;
    checksum?: pulumi.Input<string>;
    cmkId?: pulumi.Input<string>;
    dataOrigin?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    diskFormat?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    imageSize?: pulumi.Input<string>;
    imageUrl?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    isConfig?: pulumi.Input<boolean>;
    maxRam?: pulumi.Input<number>;
    minDisk?: pulumi.Input<number>;
    minRam?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osVersion?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    visibility?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    backupId?: pulumi.Input<string>;
    cmkId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    imageUrl?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    isConfig?: pulumi.Input<boolean>;
    maxRam?: pulumi.Input<number>;
    minDisk?: pulumi.Input<number>;
    minRam?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    osVersion?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    vaultId?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
}

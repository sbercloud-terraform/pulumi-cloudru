// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SfsTurboDataTask extends pulumi.CustomResource {
    /**
     * Get an existing SfsTurboDataTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SfsTurboDataTaskState, opts?: pulumi.CustomResourceOptions): SfsTurboDataTask {
        return new SfsTurboDataTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/sfsTurboDataTask:SfsTurboDataTask';

    /**
     * Returns true if the given object is an instance of SfsTurboDataTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SfsTurboDataTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SfsTurboDataTask.__pulumiType;
    }

    public readonly destPrefix!: pulumi.Output<string | undefined>;
    public readonly destTarget!: pulumi.Output<string>;
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    public /*out*/ readonly message!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public readonly shareId!: pulumi.Output<string>;
    public readonly srcPrefix!: pulumi.Output<string | undefined>;
    public readonly srcTarget!: pulumi.Output<string>;
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SfsTurboDataTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SfsTurboDataTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SfsTurboDataTaskArgs | SfsTurboDataTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SfsTurboDataTaskState | undefined;
            resourceInputs["destPrefix"] = state ? state.destPrefix : undefined;
            resourceInputs["destTarget"] = state ? state.destTarget : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["shareId"] = state ? state.shareId : undefined;
            resourceInputs["srcPrefix"] = state ? state.srcPrefix : undefined;
            resourceInputs["srcTarget"] = state ? state.srcTarget : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SfsTurboDataTaskArgs | undefined;
            if ((!args || args.destTarget === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destTarget'");
            }
            if ((!args || args.shareId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareId'");
            }
            if ((!args || args.srcTarget === undefined) && !opts.urn) {
                throw new Error("Missing required property 'srcTarget'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["destPrefix"] = args ? args.destPrefix : undefined;
            resourceInputs["destTarget"] = args ? args.destTarget : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["shareId"] = args ? args.shareId : undefined;
            resourceInputs["srcPrefix"] = args ? args.srcPrefix : undefined;
            resourceInputs["srcTarget"] = args ? args.srcTarget : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["message"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SfsTurboDataTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SfsTurboDataTask resources.
 */
export interface SfsTurboDataTaskState {
    destPrefix?: pulumi.Input<string>;
    destTarget?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareId?: pulumi.Input<string>;
    srcPrefix?: pulumi.Input<string>;
    srcTarget?: pulumi.Input<string>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SfsTurboDataTask resource.
 */
export interface SfsTurboDataTaskArgs {
    destPrefix?: pulumi.Input<string>;
    destTarget: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareId: pulumi.Input<string>;
    srcPrefix?: pulumi.Input<string>;
    srcTarget: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

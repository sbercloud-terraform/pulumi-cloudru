// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getVpnConnections(args?: GetVpnConnectionsArgs, opts?: pulumi.InvokeOptions): Promise<GetVpnConnectionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:index/getVpnConnections:getVpnConnections", {
        "connectionId": args.connectionId,
        "gatewayId": args.gatewayId,
        "gatewayIp": args.gatewayIp,
        "name": args.name,
        "region": args.region,
        "status": args.status,
        "vpnType": args.vpnType,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpnConnections.
 */
export interface GetVpnConnectionsArgs {
    connectionId?: string;
    gatewayId?: string;
    gatewayIp?: string;
    name?: string;
    region?: string;
    status?: string;
    vpnType?: string;
}

/**
 * A collection of values returned by getVpnConnections.
 */
export interface GetVpnConnectionsResult {
    readonly connectionId?: string;
    readonly connections: outputs.GetVpnConnectionsConnection[];
    readonly gatewayId?: string;
    readonly gatewayIp?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name?: string;
    readonly region: string;
    readonly status?: string;
    readonly vpnType?: string;
}
export function getVpnConnectionsOutput(args?: GetVpnConnectionsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVpnConnectionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:index/getVpnConnections:getVpnConnections", {
        "connectionId": args.connectionId,
        "gatewayId": args.gatewayId,
        "gatewayIp": args.gatewayIp,
        "name": args.name,
        "region": args.region,
        "status": args.status,
        "vpnType": args.vpnType,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpnConnections.
 */
export interface GetVpnConnectionsOutputArgs {
    connectionId?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    gatewayIp?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    vpnType?: pulumi.Input<string>;
}

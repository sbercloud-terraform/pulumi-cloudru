// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ElbLoadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing ElbLoadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElbLoadbalancerState, opts?: pulumi.CustomResourceOptions): ElbLoadbalancer {
        return new ElbLoadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/elbLoadbalancer:ElbLoadbalancer';

    /**
     * Returns true if the given object is an instance of ElbLoadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElbLoadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElbLoadbalancer.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly autoscalingEnabled: pulumi.Output<boolean>;
    declare public readonly availabilityZones: pulumi.Output<string[]>;
    declare public readonly backendSubnets: pulumi.Output<string[]>;
    declare public readonly bandwidthChargeMode: pulumi.Output<string>;
    declare public readonly bandwidthId: pulumi.Output<string>;
    declare public readonly bandwidthSize: pulumi.Output<number>;
    declare public /*out*/ readonly chargeMode: pulumi.Output<string>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly crossVpcBackend: pulumi.Output<boolean>;
    declare public readonly deletionProtectionEnable: pulumi.Output<boolean | undefined>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly elbVirsubnetType: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly forceDelete: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly frozenScene: pulumi.Output<string>;
    declare public /*out*/ readonly guaranteed: pulumi.Output<boolean>;
    declare public /*out*/ readonly gwFlavorId: pulumi.Output<string>;
    declare public readonly iptype: pulumi.Output<string>;
    declare public readonly ipv4Address: pulumi.Output<string>;
    declare public /*out*/ readonly ipv4Eip: pulumi.Output<string>;
    declare public readonly ipv4EipId: pulumi.Output<string>;
    declare public /*out*/ readonly ipv4PortId: pulumi.Output<string>;
    /**
     * the IPv4 subnet ID of the subnet where the load balancer resides
     */
    declare public readonly ipv4SubnetId: pulumi.Output<string | undefined>;
    declare public readonly ipv6Address: pulumi.Output<string>;
    declare public readonly ipv6BandwidthId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly ipv6Eip: pulumi.Output<string>;
    declare public /*out*/ readonly ipv6EipId: pulumi.Output<string>;
    /**
     * the ID of the subnet where the load balancer resides
     */
    declare public readonly ipv6NetworkId: pulumi.Output<string | undefined>;
    declare public readonly l4FlavorId: pulumi.Output<string>;
    declare public readonly l7FlavorId: pulumi.Output<string>;
    declare public readonly loadbalancerType: pulumi.Output<string>;
    declare public readonly minL7FlavorId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly operatingStatus: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly protectionReason: pulumi.Output<string | undefined>;
    declare public readonly protectionStatus: pulumi.Output<string>;
    declare public /*out*/ readonly publicBorderGroup: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly sharetype: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public readonly vpcId: pulumi.Output<string>;
    declare public readonly wafFailureAction: pulumi.Output<string>;

    /**
     * Create a ElbLoadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElbLoadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElbLoadbalancerArgs | ElbLoadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElbLoadbalancerState | undefined;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["autoscalingEnabled"] = state?.autoscalingEnabled;
            resourceInputs["availabilityZones"] = state?.availabilityZones;
            resourceInputs["backendSubnets"] = state?.backendSubnets;
            resourceInputs["bandwidthChargeMode"] = state?.bandwidthChargeMode;
            resourceInputs["bandwidthId"] = state?.bandwidthId;
            resourceInputs["bandwidthSize"] = state?.bandwidthSize;
            resourceInputs["chargeMode"] = state?.chargeMode;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["crossVpcBackend"] = state?.crossVpcBackend;
            resourceInputs["deletionProtectionEnable"] = state?.deletionProtectionEnable;
            resourceInputs["description"] = state?.description;
            resourceInputs["elbVirsubnetType"] = state?.elbVirsubnetType;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["forceDelete"] = state?.forceDelete;
            resourceInputs["frozenScene"] = state?.frozenScene;
            resourceInputs["guaranteed"] = state?.guaranteed;
            resourceInputs["gwFlavorId"] = state?.gwFlavorId;
            resourceInputs["iptype"] = state?.iptype;
            resourceInputs["ipv4Address"] = state?.ipv4Address;
            resourceInputs["ipv4Eip"] = state?.ipv4Eip;
            resourceInputs["ipv4EipId"] = state?.ipv4EipId;
            resourceInputs["ipv4PortId"] = state?.ipv4PortId;
            resourceInputs["ipv4SubnetId"] = state?.ipv4SubnetId;
            resourceInputs["ipv6Address"] = state?.ipv6Address;
            resourceInputs["ipv6BandwidthId"] = state?.ipv6BandwidthId;
            resourceInputs["ipv6Eip"] = state?.ipv6Eip;
            resourceInputs["ipv6EipId"] = state?.ipv6EipId;
            resourceInputs["ipv6NetworkId"] = state?.ipv6NetworkId;
            resourceInputs["l4FlavorId"] = state?.l4FlavorId;
            resourceInputs["l7FlavorId"] = state?.l7FlavorId;
            resourceInputs["loadbalancerType"] = state?.loadbalancerType;
            resourceInputs["minL7FlavorId"] = state?.minL7FlavorId;
            resourceInputs["name"] = state?.name;
            resourceInputs["operatingStatus"] = state?.operatingStatus;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["protectionReason"] = state?.protectionReason;
            resourceInputs["protectionStatus"] = state?.protectionStatus;
            resourceInputs["publicBorderGroup"] = state?.publicBorderGroup;
            resourceInputs["region"] = state?.region;
            resourceInputs["sharetype"] = state?.sharetype;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["wafFailureAction"] = state?.wafFailureAction;
        } else {
            const args = argsOrState as ElbLoadbalancerArgs | undefined;
            if (args?.availabilityZones === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZones'");
            }
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["autoscalingEnabled"] = args?.autoscalingEnabled;
            resourceInputs["availabilityZones"] = args?.availabilityZones;
            resourceInputs["backendSubnets"] = args?.backendSubnets;
            resourceInputs["bandwidthChargeMode"] = args?.bandwidthChargeMode;
            resourceInputs["bandwidthId"] = args?.bandwidthId;
            resourceInputs["bandwidthSize"] = args?.bandwidthSize;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["crossVpcBackend"] = args?.crossVpcBackend;
            resourceInputs["deletionProtectionEnable"] = args?.deletionProtectionEnable;
            resourceInputs["description"] = args?.description;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["forceDelete"] = args?.forceDelete;
            resourceInputs["iptype"] = args?.iptype;
            resourceInputs["ipv4Address"] = args?.ipv4Address;
            resourceInputs["ipv4EipId"] = args?.ipv4EipId;
            resourceInputs["ipv4SubnetId"] = args?.ipv4SubnetId;
            resourceInputs["ipv6Address"] = args?.ipv6Address;
            resourceInputs["ipv6BandwidthId"] = args?.ipv6BandwidthId;
            resourceInputs["ipv6NetworkId"] = args?.ipv6NetworkId;
            resourceInputs["l4FlavorId"] = args?.l4FlavorId;
            resourceInputs["l7FlavorId"] = args?.l7FlavorId;
            resourceInputs["loadbalancerType"] = args?.loadbalancerType;
            resourceInputs["minL7FlavorId"] = args?.minL7FlavorId;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["protectionReason"] = args?.protectionReason;
            resourceInputs["protectionStatus"] = args?.protectionStatus;
            resourceInputs["region"] = args?.region;
            resourceInputs["sharetype"] = args?.sharetype;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["wafFailureAction"] = args?.wafFailureAction;
            resourceInputs["chargeMode"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["elbVirsubnetType"] = undefined /*out*/;
            resourceInputs["frozenScene"] = undefined /*out*/;
            resourceInputs["guaranteed"] = undefined /*out*/;
            resourceInputs["gwFlavorId"] = undefined /*out*/;
            resourceInputs["ipv4Eip"] = undefined /*out*/;
            resourceInputs["ipv4PortId"] = undefined /*out*/;
            resourceInputs["ipv6Eip"] = undefined /*out*/;
            resourceInputs["ipv6EipId"] = undefined /*out*/;
            resourceInputs["operatingStatus"] = undefined /*out*/;
            resourceInputs["publicBorderGroup"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElbLoadbalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElbLoadbalancer resources.
 */
export interface ElbLoadbalancerState {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    autoscalingEnabled?: pulumi.Input<boolean>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    backendSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    bandwidthChargeMode?: pulumi.Input<string>;
    bandwidthId?: pulumi.Input<string>;
    bandwidthSize?: pulumi.Input<number>;
    chargeMode?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    crossVpcBackend?: pulumi.Input<boolean>;
    deletionProtectionEnable?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    elbVirsubnetType?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDelete?: pulumi.Input<boolean>;
    frozenScene?: pulumi.Input<string>;
    guaranteed?: pulumi.Input<boolean>;
    gwFlavorId?: pulumi.Input<string>;
    iptype?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    ipv4Eip?: pulumi.Input<string>;
    ipv4EipId?: pulumi.Input<string>;
    ipv4PortId?: pulumi.Input<string>;
    /**
     * the IPv4 subnet ID of the subnet where the load balancer resides
     */
    ipv4SubnetId?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    ipv6BandwidthId?: pulumi.Input<string>;
    ipv6Eip?: pulumi.Input<string>;
    ipv6EipId?: pulumi.Input<string>;
    /**
     * the ID of the subnet where the load balancer resides
     */
    ipv6NetworkId?: pulumi.Input<string>;
    l4FlavorId?: pulumi.Input<string>;
    l7FlavorId?: pulumi.Input<string>;
    loadbalancerType?: pulumi.Input<string>;
    minL7FlavorId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    operatingStatus?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    protectionReason?: pulumi.Input<string>;
    protectionStatus?: pulumi.Input<string>;
    publicBorderGroup?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sharetype?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatedAt?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
    wafFailureAction?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElbLoadbalancer resource.
 */
export interface ElbLoadbalancerArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    autoscalingEnabled?: pulumi.Input<boolean>;
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    backendSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    bandwidthChargeMode?: pulumi.Input<string>;
    bandwidthId?: pulumi.Input<string>;
    bandwidthSize?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    crossVpcBackend?: pulumi.Input<boolean>;
    deletionProtectionEnable?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDelete?: pulumi.Input<boolean>;
    iptype?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    ipv4EipId?: pulumi.Input<string>;
    /**
     * the IPv4 subnet ID of the subnet where the load balancer resides
     */
    ipv4SubnetId?: pulumi.Input<string>;
    ipv6Address?: pulumi.Input<string>;
    ipv6BandwidthId?: pulumi.Input<string>;
    /**
     * the ID of the subnet where the load balancer resides
     */
    ipv6NetworkId?: pulumi.Input<string>;
    l4FlavorId?: pulumi.Input<string>;
    l7FlavorId?: pulumi.Input<string>;
    loadbalancerType?: pulumi.Input<string>;
    minL7FlavorId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    protectionReason?: pulumi.Input<string>;
    protectionStatus?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sharetype?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
    wafFailureAction?: pulumi.Input<string>;
}

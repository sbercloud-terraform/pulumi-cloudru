// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DcsAccount struct {
	pulumi.CustomResourceState

	// Specifies the name of the account.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Specifies the password of the account.
	AccountPassword pulumi.StringOutput `pulumi:"accountPassword"`
	// Specifies the role of the account.
	AccountRole pulumi.StringOutput `pulumi:"accountRole"`
	// Indicates the type of the account.
	AccountType pulumi.StringOutput `pulumi:"accountType"`
	// Specifies the description of the account.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the DCS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Region     pulumi.StringOutput `pulumi:"region"`
	// Indicates the status of the account.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDcsAccount registers a new resource with the given unique name, arguments, and options.
func NewDcsAccount(ctx *pulumi.Context,
	name string, args *DcsAccountArgs, opts ...pulumi.ResourceOption) (*DcsAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.AccountPassword == nil {
		return nil, errors.New("invalid value for required argument 'AccountPassword'")
	}
	if args.AccountRole == nil {
		return nil, errors.New("invalid value for required argument 'AccountRole'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.AccountPassword != nil {
		args.AccountPassword = pulumi.ToSecret(args.AccountPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DcsAccount
	err := ctx.RegisterResource("cloudru:index/dcsAccount:DcsAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDcsAccount gets an existing DcsAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDcsAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DcsAccountState, opts ...pulumi.ResourceOption) (*DcsAccount, error) {
	var resource DcsAccount
	err := ctx.ReadResource("cloudru:index/dcsAccount:DcsAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DcsAccount resources.
type dcsAccountState struct {
	// Specifies the name of the account.
	AccountName *string `pulumi:"accountName"`
	// Specifies the password of the account.
	AccountPassword *string `pulumi:"accountPassword"`
	// Specifies the role of the account.
	AccountRole *string `pulumi:"accountRole"`
	// Indicates the type of the account.
	AccountType *string `pulumi:"accountType"`
	// Specifies the description of the account.
	Description *string `pulumi:"description"`
	// Specifies the ID of the DCS instance.
	InstanceId *string `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
	// Indicates the status of the account.
	Status *string `pulumi:"status"`
}

type DcsAccountState struct {
	// Specifies the name of the account.
	AccountName pulumi.StringPtrInput
	// Specifies the password of the account.
	AccountPassword pulumi.StringPtrInput
	// Specifies the role of the account.
	AccountRole pulumi.StringPtrInput
	// Indicates the type of the account.
	AccountType pulumi.StringPtrInput
	// Specifies the description of the account.
	Description pulumi.StringPtrInput
	// Specifies the ID of the DCS instance.
	InstanceId pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	// Indicates the status of the account.
	Status pulumi.StringPtrInput
}

func (DcsAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*dcsAccountState)(nil)).Elem()
}

type dcsAccountArgs struct {
	// Specifies the name of the account.
	AccountName string `pulumi:"accountName"`
	// Specifies the password of the account.
	AccountPassword string `pulumi:"accountPassword"`
	// Specifies the role of the account.
	AccountRole string `pulumi:"accountRole"`
	// Specifies the description of the account.
	Description *string `pulumi:"description"`
	// Specifies the ID of the DCS instance.
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

// The set of arguments for constructing a DcsAccount resource.
type DcsAccountArgs struct {
	// Specifies the name of the account.
	AccountName pulumi.StringInput
	// Specifies the password of the account.
	AccountPassword pulumi.StringInput
	// Specifies the role of the account.
	AccountRole pulumi.StringInput
	// Specifies the description of the account.
	Description pulumi.StringPtrInput
	// Specifies the ID of the DCS instance.
	InstanceId pulumi.StringInput
	Region     pulumi.StringPtrInput
}

func (DcsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dcsAccountArgs)(nil)).Elem()
}

type DcsAccountInput interface {
	pulumi.Input

	ToDcsAccountOutput() DcsAccountOutput
	ToDcsAccountOutputWithContext(ctx context.Context) DcsAccountOutput
}

func (*DcsAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**DcsAccount)(nil)).Elem()
}

func (i *DcsAccount) ToDcsAccountOutput() DcsAccountOutput {
	return i.ToDcsAccountOutputWithContext(context.Background())
}

func (i *DcsAccount) ToDcsAccountOutputWithContext(ctx context.Context) DcsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsAccountOutput)
}

// DcsAccountArrayInput is an input type that accepts DcsAccountArray and DcsAccountArrayOutput values.
// You can construct a concrete instance of `DcsAccountArrayInput` via:
//
//	DcsAccountArray{ DcsAccountArgs{...} }
type DcsAccountArrayInput interface {
	pulumi.Input

	ToDcsAccountArrayOutput() DcsAccountArrayOutput
	ToDcsAccountArrayOutputWithContext(context.Context) DcsAccountArrayOutput
}

type DcsAccountArray []DcsAccountInput

func (DcsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DcsAccount)(nil)).Elem()
}

func (i DcsAccountArray) ToDcsAccountArrayOutput() DcsAccountArrayOutput {
	return i.ToDcsAccountArrayOutputWithContext(context.Background())
}

func (i DcsAccountArray) ToDcsAccountArrayOutputWithContext(ctx context.Context) DcsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsAccountArrayOutput)
}

// DcsAccountMapInput is an input type that accepts DcsAccountMap and DcsAccountMapOutput values.
// You can construct a concrete instance of `DcsAccountMapInput` via:
//
//	DcsAccountMap{ "key": DcsAccountArgs{...} }
type DcsAccountMapInput interface {
	pulumi.Input

	ToDcsAccountMapOutput() DcsAccountMapOutput
	ToDcsAccountMapOutputWithContext(context.Context) DcsAccountMapOutput
}

type DcsAccountMap map[string]DcsAccountInput

func (DcsAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DcsAccount)(nil)).Elem()
}

func (i DcsAccountMap) ToDcsAccountMapOutput() DcsAccountMapOutput {
	return i.ToDcsAccountMapOutputWithContext(context.Background())
}

func (i DcsAccountMap) ToDcsAccountMapOutputWithContext(ctx context.Context) DcsAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsAccountMapOutput)
}

type DcsAccountOutput struct{ *pulumi.OutputState }

func (DcsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DcsAccount)(nil)).Elem()
}

func (o DcsAccountOutput) ToDcsAccountOutput() DcsAccountOutput {
	return o
}

func (o DcsAccountOutput) ToDcsAccountOutputWithContext(ctx context.Context) DcsAccountOutput {
	return o
}

// Specifies the name of the account.
func (o DcsAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsAccount) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// Specifies the password of the account.
func (o DcsAccountOutput) AccountPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsAccount) pulumi.StringOutput { return v.AccountPassword }).(pulumi.StringOutput)
}

// Specifies the role of the account.
func (o DcsAccountOutput) AccountRole() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsAccount) pulumi.StringOutput { return v.AccountRole }).(pulumi.StringOutput)
}

// Indicates the type of the account.
func (o DcsAccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsAccount) pulumi.StringOutput { return v.AccountType }).(pulumi.StringOutput)
}

// Specifies the description of the account.
func (o DcsAccountOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DcsAccount) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the DCS instance.
func (o DcsAccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsAccount) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DcsAccountOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsAccount) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the status of the account.
func (o DcsAccountOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsAccount) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type DcsAccountArrayOutput struct{ *pulumi.OutputState }

func (DcsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DcsAccount)(nil)).Elem()
}

func (o DcsAccountArrayOutput) ToDcsAccountArrayOutput() DcsAccountArrayOutput {
	return o
}

func (o DcsAccountArrayOutput) ToDcsAccountArrayOutputWithContext(ctx context.Context) DcsAccountArrayOutput {
	return o
}

func (o DcsAccountArrayOutput) Index(i pulumi.IntInput) DcsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DcsAccount {
		return vs[0].([]*DcsAccount)[vs[1].(int)]
	}).(DcsAccountOutput)
}

type DcsAccountMapOutput struct{ *pulumi.OutputState }

func (DcsAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DcsAccount)(nil)).Elem()
}

func (o DcsAccountMapOutput) ToDcsAccountMapOutput() DcsAccountMapOutput {
	return o
}

func (o DcsAccountMapOutput) ToDcsAccountMapOutputWithContext(ctx context.Context) DcsAccountMapOutput {
	return o
}

func (o DcsAccountMapOutput) MapIndex(k pulumi.StringInput) DcsAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DcsAccount {
		return vs[0].(map[string]*DcsAccount)[vs[1].(string)]
	}).(DcsAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DcsAccountInput)(nil)).Elem(), &DcsAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*DcsAccountArrayInput)(nil)).Elem(), DcsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DcsAccountMapInput)(nil)).Elem(), DcsAccountMap{})
	pulumi.RegisterOutputType(DcsAccountOutput{})
	pulumi.RegisterOutputType(DcsAccountArrayOutput{})
	pulumi.RegisterOutputType(DcsAccountMapOutput{})
}

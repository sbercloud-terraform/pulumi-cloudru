// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ReadReplicaInstance extends pulumi.CustomResource {
    /**
     * Get an existing ReadReplicaInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReadReplicaInstanceState, opts?: pulumi.CustomResourceOptions): ReadReplicaInstance {
        return new ReadReplicaInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Rds/readReplicaInstance:ReadReplicaInstance';

    /**
     * Returns true if the given object is an instance of ReadReplicaInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReadReplicaInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReadReplicaInstance.__pulumiType;
    }

    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public readonly db: pulumi.Output<outputs.Rds.ReadReplicaInstanceDb>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly fixedIp: pulumi.Output<string>;
    declare public readonly flavor: pulumi.Output<string>;
    declare public readonly maintainBegin: pulumi.Output<string>;
    declare public readonly maintainEnd: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly parameters: pulumi.Output<outputs.Rds.ReadReplicaInstanceParameter[]>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly primaryInstanceId: pulumi.Output<string>;
    declare public /*out*/ readonly privateIps: pulumi.Output<string[]>;
    declare public /*out*/ readonly publicIps: pulumi.Output<string[]>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly securityGroupId: pulumi.Output<string>;
    declare public readonly sslEnable: pulumi.Output<boolean>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public /*out*/ readonly subnetId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public readonly volume: pulumi.Output<outputs.Rds.ReadReplicaInstanceVolume>;
    declare public /*out*/ readonly vpcId: pulumi.Output<string>;

    /**
     * Create a ReadReplicaInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReadReplicaInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReadReplicaInstanceArgs | ReadReplicaInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReadReplicaInstanceState | undefined;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["db"] = state?.db;
            resourceInputs["description"] = state?.description;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["fixedIp"] = state?.fixedIp;
            resourceInputs["flavor"] = state?.flavor;
            resourceInputs["maintainBegin"] = state?.maintainBegin;
            resourceInputs["maintainEnd"] = state?.maintainEnd;
            resourceInputs["name"] = state?.name;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["primaryInstanceId"] = state?.primaryInstanceId;
            resourceInputs["privateIps"] = state?.privateIps;
            resourceInputs["publicIps"] = state?.publicIps;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["sslEnable"] = state?.sslEnable;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["volume"] = state?.volume;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ReadReplicaInstanceArgs | undefined;
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if (args?.flavor === undefined && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if (args?.primaryInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'primaryInstanceId'");
            }
            if (args?.volume === undefined && !opts.urn) {
                throw new Error("Missing required property 'volume'");
            }
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["db"] = args?.db;
            resourceInputs["description"] = args?.description;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["fixedIp"] = args?.fixedIp;
            resourceInputs["flavor"] = args?.flavor;
            resourceInputs["maintainBegin"] = args?.maintainBegin;
            resourceInputs["maintainEnd"] = args?.maintainEnd;
            resourceInputs["name"] = args?.name;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["primaryInstanceId"] = args?.primaryInstanceId;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["sslEnable"] = args?.sslEnable;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["volume"] = args?.volume;
            resourceInputs["privateIps"] = undefined /*out*/;
            resourceInputs["publicIps"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReadReplicaInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReadReplicaInstance resources.
 */
export interface ReadReplicaInstanceState {
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    db?: pulumi.Input<inputs.Rds.ReadReplicaInstanceDb>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    fixedIp?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.Rds.ReadReplicaInstanceParameter>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    primaryInstanceId?: pulumi.Input<string>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    sslEnable?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    volume?: pulumi.Input<inputs.Rds.ReadReplicaInstanceVolume>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ReadReplicaInstance resource.
 */
export interface ReadReplicaInstanceArgs {
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    db?: pulumi.Input<inputs.Rds.ReadReplicaInstanceDb>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    fixedIp?: pulumi.Input<string>;
    flavor: pulumi.Input<string>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.Rds.ReadReplicaInstanceParameter>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    primaryInstanceId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    sslEnable?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    volume: pulumi.Input<inputs.Rds.ReadReplicaInstanceVolume>;
}

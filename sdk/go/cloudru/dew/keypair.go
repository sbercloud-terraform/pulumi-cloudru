// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dew

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Keypair struct {
	pulumi.CustomResourceState

	CreatedAt      pulumi.StringOutput    `pulumi:"createdAt"`
	Description    pulumi.StringPtrOutput `pulumi:"description"`
	EncryptionType pulumi.StringOutput    `pulumi:"encryptionType"`
	Fingerprint    pulumi.StringOutput    `pulumi:"fingerprint"`
	IsManaged      pulumi.BoolOutput      `pulumi:"isManaged"`
	KeyFile        pulumi.StringOutput    `pulumi:"keyFile"`
	KmsKeyId       pulumi.StringPtrOutput `pulumi:"kmsKeyId"`
	KmsKeyName     pulumi.StringPtrOutput `pulumi:"kmsKeyName"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	PrivateKey     pulumi.StringPtrOutput `pulumi:"privateKey"`
	PublicKey      pulumi.StringOutput    `pulumi:"publicKey"`
	Region         pulumi.StringOutput    `pulumi:"region"`
	Scope          pulumi.StringOutput    `pulumi:"scope"`
	UserId         pulumi.StringOutput    `pulumi:"userId"`
}

// NewKeypair registers a new resource with the given unique name, arguments, and options.
func NewKeypair(ctx *pulumi.Context,
	name string, args *KeypairArgs, opts ...pulumi.ResourceOption) (*Keypair, error) {
	if args == nil {
		args = &KeypairArgs{}
	}

	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Keypair
	err := ctx.RegisterResource("sbercloud:Dew/keypair:Keypair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeypair gets an existing Keypair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeypair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeypairState, opts ...pulumi.ResourceOption) (*Keypair, error) {
	var resource Keypair
	err := ctx.ReadResource("sbercloud:Dew/keypair:Keypair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keypair resources.
type keypairState struct {
	CreatedAt      *string `pulumi:"createdAt"`
	Description    *string `pulumi:"description"`
	EncryptionType *string `pulumi:"encryptionType"`
	Fingerprint    *string `pulumi:"fingerprint"`
	IsManaged      *bool   `pulumi:"isManaged"`
	KeyFile        *string `pulumi:"keyFile"`
	KmsKeyId       *string `pulumi:"kmsKeyId"`
	KmsKeyName     *string `pulumi:"kmsKeyName"`
	Name           *string `pulumi:"name"`
	PrivateKey     *string `pulumi:"privateKey"`
	PublicKey      *string `pulumi:"publicKey"`
	Region         *string `pulumi:"region"`
	Scope          *string `pulumi:"scope"`
	UserId         *string `pulumi:"userId"`
}

type KeypairState struct {
	CreatedAt      pulumi.StringPtrInput
	Description    pulumi.StringPtrInput
	EncryptionType pulumi.StringPtrInput
	Fingerprint    pulumi.StringPtrInput
	IsManaged      pulumi.BoolPtrInput
	KeyFile        pulumi.StringPtrInput
	KmsKeyId       pulumi.StringPtrInput
	KmsKeyName     pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	PrivateKey     pulumi.StringPtrInput
	PublicKey      pulumi.StringPtrInput
	Region         pulumi.StringPtrInput
	Scope          pulumi.StringPtrInput
	UserId         pulumi.StringPtrInput
}

func (KeypairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairState)(nil)).Elem()
}

type keypairArgs struct {
	Description    *string `pulumi:"description"`
	EncryptionType *string `pulumi:"encryptionType"`
	KeyFile        *string `pulumi:"keyFile"`
	KmsKeyId       *string `pulumi:"kmsKeyId"`
	KmsKeyName     *string `pulumi:"kmsKeyName"`
	Name           *string `pulumi:"name"`
	PrivateKey     *string `pulumi:"privateKey"`
	PublicKey      *string `pulumi:"publicKey"`
	Region         *string `pulumi:"region"`
	Scope          *string `pulumi:"scope"`
	UserId         *string `pulumi:"userId"`
}

// The set of arguments for constructing a Keypair resource.
type KeypairArgs struct {
	Description    pulumi.StringPtrInput
	EncryptionType pulumi.StringPtrInput
	KeyFile        pulumi.StringPtrInput
	KmsKeyId       pulumi.StringPtrInput
	KmsKeyName     pulumi.StringPtrInput
	Name           pulumi.StringPtrInput
	PrivateKey     pulumi.StringPtrInput
	PublicKey      pulumi.StringPtrInput
	Region         pulumi.StringPtrInput
	Scope          pulumi.StringPtrInput
	UserId         pulumi.StringPtrInput
}

func (KeypairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairArgs)(nil)).Elem()
}

type KeypairInput interface {
	pulumi.Input

	ToKeypairOutput() KeypairOutput
	ToKeypairOutputWithContext(ctx context.Context) KeypairOutput
}

func (*Keypair) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil)).Elem()
}

func (i *Keypair) ToKeypairOutput() KeypairOutput {
	return i.ToKeypairOutputWithContext(context.Background())
}

func (i *Keypair) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairOutput)
}

// KeypairArrayInput is an input type that accepts KeypairArray and KeypairArrayOutput values.
// You can construct a concrete instance of `KeypairArrayInput` via:
//
//	KeypairArray{ KeypairArgs{...} }
type KeypairArrayInput interface {
	pulumi.Input

	ToKeypairArrayOutput() KeypairArrayOutput
	ToKeypairArrayOutputWithContext(context.Context) KeypairArrayOutput
}

type KeypairArray []KeypairInput

func (KeypairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (i KeypairArray) ToKeypairArrayOutput() KeypairArrayOutput {
	return i.ToKeypairArrayOutputWithContext(context.Background())
}

func (i KeypairArray) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairArrayOutput)
}

// KeypairMapInput is an input type that accepts KeypairMap and KeypairMapOutput values.
// You can construct a concrete instance of `KeypairMapInput` via:
//
//	KeypairMap{ "key": KeypairArgs{...} }
type KeypairMapInput interface {
	pulumi.Input

	ToKeypairMapOutput() KeypairMapOutput
	ToKeypairMapOutputWithContext(context.Context) KeypairMapOutput
}

type KeypairMap map[string]KeypairInput

func (KeypairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (i KeypairMap) ToKeypairMapOutput() KeypairMapOutput {
	return i.ToKeypairMapOutputWithContext(context.Background())
}

func (i KeypairMap) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairMapOutput)
}

type KeypairOutput struct{ *pulumi.OutputState }

func (KeypairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil)).Elem()
}

func (o KeypairOutput) ToKeypairOutput() KeypairOutput {
	return o
}

func (o KeypairOutput) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return o
}

func (o KeypairOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o KeypairOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o KeypairOutput) EncryptionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.EncryptionType }).(pulumi.StringOutput)
}

func (o KeypairOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o KeypairOutput) IsManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Keypair) pulumi.BoolOutput { return v.IsManaged }).(pulumi.BoolOutput)
}

func (o KeypairOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.KeyFile }).(pulumi.StringOutput)
}

func (o KeypairOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o KeypairOutput) KmsKeyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.KmsKeyName }).(pulumi.StringPtrOutput)
}

func (o KeypairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KeypairOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o KeypairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

func (o KeypairOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o KeypairOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

func (o KeypairOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type KeypairArrayOutput struct{ *pulumi.OutputState }

func (KeypairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (o KeypairArrayOutput) ToKeypairArrayOutput() KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) Index(i pulumi.IntInput) KeypairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keypair {
		return vs[0].([]*Keypair)[vs[1].(int)]
	}).(KeypairOutput)
}

type KeypairMapOutput struct{ *pulumi.OutputState }

func (KeypairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (o KeypairMapOutput) ToKeypairMapOutput() KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) MapIndex(k pulumi.StringInput) KeypairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keypair {
		return vs[0].(map[string]*Keypair)[vs[1].(string)]
	}).(KeypairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairInput)(nil)).Elem(), &Keypair{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairArrayInput)(nil)).Elem(), KeypairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairMapInput)(nil)).Elem(), KeypairMap{})
	pulumi.RegisterOutputType(KeypairOutput{})
	pulumi.RegisterOutputType(KeypairArrayOutput{})
	pulumi.RegisterOutputType(KeypairMapOutput{})
}

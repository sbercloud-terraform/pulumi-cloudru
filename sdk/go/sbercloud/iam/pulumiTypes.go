// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

var _ = internal.GetEnvOrDefault

type AclIpCidr struct {
	// Specifies the IPv4 CIDR block, for example, __192.168.0.0/24__.
	Cidr string `pulumi:"cidr"`
	// Specifies a description about an IPv4 CIDR block. This parameter can contain a
	// maximum of 255 characters and the following charactors are not allowed:__@#%^&*<>\\__.
	Description *string `pulumi:"description"`
}

// AclIpCidrInput is an input type that accepts AclIpCidrArgs and AclIpCidrOutput values.
// You can construct a concrete instance of `AclIpCidrInput` via:
//
//	AclIpCidrArgs{...}
type AclIpCidrInput interface {
	pulumi.Input

	ToAclIpCidrOutput() AclIpCidrOutput
	ToAclIpCidrOutputWithContext(context.Context) AclIpCidrOutput
}

type AclIpCidrArgs struct {
	// Specifies the IPv4 CIDR block, for example, __192.168.0.0/24__.
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// Specifies a description about an IPv4 CIDR block. This parameter can contain a
	// maximum of 255 characters and the following charactors are not allowed:__@#%^&*<>\\__.
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (AclIpCidrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclIpCidr)(nil)).Elem()
}

func (i AclIpCidrArgs) ToAclIpCidrOutput() AclIpCidrOutput {
	return i.ToAclIpCidrOutputWithContext(context.Background())
}

func (i AclIpCidrArgs) ToAclIpCidrOutputWithContext(ctx context.Context) AclIpCidrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclIpCidrOutput)
}

// AclIpCidrArrayInput is an input type that accepts AclIpCidrArray and AclIpCidrArrayOutput values.
// You can construct a concrete instance of `AclIpCidrArrayInput` via:
//
//	AclIpCidrArray{ AclIpCidrArgs{...} }
type AclIpCidrArrayInput interface {
	pulumi.Input

	ToAclIpCidrArrayOutput() AclIpCidrArrayOutput
	ToAclIpCidrArrayOutputWithContext(context.Context) AclIpCidrArrayOutput
}

type AclIpCidrArray []AclIpCidrInput

func (AclIpCidrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclIpCidr)(nil)).Elem()
}

func (i AclIpCidrArray) ToAclIpCidrArrayOutput() AclIpCidrArrayOutput {
	return i.ToAclIpCidrArrayOutputWithContext(context.Background())
}

func (i AclIpCidrArray) ToAclIpCidrArrayOutputWithContext(ctx context.Context) AclIpCidrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclIpCidrArrayOutput)
}

type AclIpCidrOutput struct{ *pulumi.OutputState }

func (AclIpCidrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclIpCidr)(nil)).Elem()
}

func (o AclIpCidrOutput) ToAclIpCidrOutput() AclIpCidrOutput {
	return o
}

func (o AclIpCidrOutput) ToAclIpCidrOutputWithContext(ctx context.Context) AclIpCidrOutput {
	return o
}

// Specifies the IPv4 CIDR block, for example, __192.168.0.0/24__.
func (o AclIpCidrOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v AclIpCidr) string { return v.Cidr }).(pulumi.StringOutput)
}

// Specifies a description about an IPv4 CIDR block. This parameter can contain a
// maximum of 255 characters and the following charactors are not allowed:__@#%^&*<>\\__.
func (o AclIpCidrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclIpCidr) *string { return v.Description }).(pulumi.StringPtrOutput)
}

type AclIpCidrArrayOutput struct{ *pulumi.OutputState }

func (AclIpCidrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclIpCidr)(nil)).Elem()
}

func (o AclIpCidrArrayOutput) ToAclIpCidrArrayOutput() AclIpCidrArrayOutput {
	return o
}

func (o AclIpCidrArrayOutput) ToAclIpCidrArrayOutputWithContext(ctx context.Context) AclIpCidrArrayOutput {
	return o
}

func (o AclIpCidrArrayOutput) Index(i pulumi.IntInput) AclIpCidrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclIpCidr {
		return vs[0].([]AclIpCidr)[vs[1].(int)]
	}).(AclIpCidrOutput)
}

type AclIpRange struct {
	// Specifies a description about an IP address range. This parameter can contain a
	// maximum of 255 characters and the following charactors are not allowed:__@#%^&*<>\\__.
	//
	// ->**NOTE:** Up to 200 `ipCidrs` and `ipRanges` can be created in total for each access method.
	Description *string `pulumi:"description"`
	// Specifies the Ip address range, for example, __0.0.0.0-255.255.255.0__.
	Range string `pulumi:"range"`
}

// AclIpRangeInput is an input type that accepts AclIpRangeArgs and AclIpRangeOutput values.
// You can construct a concrete instance of `AclIpRangeInput` via:
//
//	AclIpRangeArgs{...}
type AclIpRangeInput interface {
	pulumi.Input

	ToAclIpRangeOutput() AclIpRangeOutput
	ToAclIpRangeOutputWithContext(context.Context) AclIpRangeOutput
}

type AclIpRangeArgs struct {
	// Specifies a description about an IP address range. This parameter can contain a
	// maximum of 255 characters and the following charactors are not allowed:__@#%^&*<>\\__.
	//
	// ->**NOTE:** Up to 200 `ipCidrs` and `ipRanges` can be created in total for each access method.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the Ip address range, for example, __0.0.0.0-255.255.255.0__.
	Range pulumi.StringInput `pulumi:"range"`
}

func (AclIpRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclIpRange)(nil)).Elem()
}

func (i AclIpRangeArgs) ToAclIpRangeOutput() AclIpRangeOutput {
	return i.ToAclIpRangeOutputWithContext(context.Background())
}

func (i AclIpRangeArgs) ToAclIpRangeOutputWithContext(ctx context.Context) AclIpRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclIpRangeOutput)
}

// AclIpRangeArrayInput is an input type that accepts AclIpRangeArray and AclIpRangeArrayOutput values.
// You can construct a concrete instance of `AclIpRangeArrayInput` via:
//
//	AclIpRangeArray{ AclIpRangeArgs{...} }
type AclIpRangeArrayInput interface {
	pulumi.Input

	ToAclIpRangeArrayOutput() AclIpRangeArrayOutput
	ToAclIpRangeArrayOutputWithContext(context.Context) AclIpRangeArrayOutput
}

type AclIpRangeArray []AclIpRangeInput

func (AclIpRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclIpRange)(nil)).Elem()
}

func (i AclIpRangeArray) ToAclIpRangeArrayOutput() AclIpRangeArrayOutput {
	return i.ToAclIpRangeArrayOutputWithContext(context.Background())
}

func (i AclIpRangeArray) ToAclIpRangeArrayOutputWithContext(ctx context.Context) AclIpRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclIpRangeArrayOutput)
}

type AclIpRangeOutput struct{ *pulumi.OutputState }

func (AclIpRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclIpRange)(nil)).Elem()
}

func (o AclIpRangeOutput) ToAclIpRangeOutput() AclIpRangeOutput {
	return o
}

func (o AclIpRangeOutput) ToAclIpRangeOutputWithContext(ctx context.Context) AclIpRangeOutput {
	return o
}

// Specifies a description about an IP address range. This parameter can contain a
// maximum of 255 characters and the following charactors are not allowed:__@#%^&*<>\\__.
//
// ->**NOTE:** Up to 200 `ipCidrs` and `ipRanges` can be created in total for each access method.
func (o AclIpRangeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclIpRange) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the Ip address range, for example, __0.0.0.0-255.255.255.0__.
func (o AclIpRangeOutput) Range() pulumi.StringOutput {
	return o.ApplyT(func(v AclIpRange) string { return v.Range }).(pulumi.StringOutput)
}

type AclIpRangeArrayOutput struct{ *pulumi.OutputState }

func (AclIpRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclIpRange)(nil)).Elem()
}

func (o AclIpRangeArrayOutput) ToAclIpRangeArrayOutput() AclIpRangeArrayOutput {
	return o
}

func (o AclIpRangeArrayOutput) ToAclIpRangeArrayOutputWithContext(ctx context.Context) AclIpRangeArrayOutput {
	return o
}

func (o AclIpRangeArrayOutput) Index(i pulumi.IntInput) AclIpRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclIpRange {
		return vs[0].([]AclIpRange)[vs[1].(int)]
	}).(AclIpRangeOutput)
}

type AgencyProjectRole struct {
	// Specifies the name of project.
	Project string `pulumi:"project"`
	// Specifies an array of role names.
	//
	// > **NOTE**
	// - At least one of `projectRole` and `domainRoles` must be specified when creating an agency.
	// - We can get all **System-Defined Roles** form
	//   [SberCloud](https://support.hc.sbercloud.ru/permissions/index.html).
	Roles []string `pulumi:"roles"`
}

// AgencyProjectRoleInput is an input type that accepts AgencyProjectRoleArgs and AgencyProjectRoleOutput values.
// You can construct a concrete instance of `AgencyProjectRoleInput` via:
//
//	AgencyProjectRoleArgs{...}
type AgencyProjectRoleInput interface {
	pulumi.Input

	ToAgencyProjectRoleOutput() AgencyProjectRoleOutput
	ToAgencyProjectRoleOutputWithContext(context.Context) AgencyProjectRoleOutput
}

type AgencyProjectRoleArgs struct {
	// Specifies the name of project.
	Project pulumi.StringInput `pulumi:"project"`
	// Specifies an array of role names.
	//
	// > **NOTE**
	// - At least one of `projectRole` and `domainRoles` must be specified when creating an agency.
	// - We can get all **System-Defined Roles** form
	//   [SberCloud](https://support.hc.sbercloud.ru/permissions/index.html).
	Roles pulumi.StringArrayInput `pulumi:"roles"`
}

func (AgencyProjectRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AgencyProjectRole)(nil)).Elem()
}

func (i AgencyProjectRoleArgs) ToAgencyProjectRoleOutput() AgencyProjectRoleOutput {
	return i.ToAgencyProjectRoleOutputWithContext(context.Background())
}

func (i AgencyProjectRoleArgs) ToAgencyProjectRoleOutputWithContext(ctx context.Context) AgencyProjectRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgencyProjectRoleOutput)
}

// AgencyProjectRoleArrayInput is an input type that accepts AgencyProjectRoleArray and AgencyProjectRoleArrayOutput values.
// You can construct a concrete instance of `AgencyProjectRoleArrayInput` via:
//
//	AgencyProjectRoleArray{ AgencyProjectRoleArgs{...} }
type AgencyProjectRoleArrayInput interface {
	pulumi.Input

	ToAgencyProjectRoleArrayOutput() AgencyProjectRoleArrayOutput
	ToAgencyProjectRoleArrayOutputWithContext(context.Context) AgencyProjectRoleArrayOutput
}

type AgencyProjectRoleArray []AgencyProjectRoleInput

func (AgencyProjectRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgencyProjectRole)(nil)).Elem()
}

func (i AgencyProjectRoleArray) ToAgencyProjectRoleArrayOutput() AgencyProjectRoleArrayOutput {
	return i.ToAgencyProjectRoleArrayOutputWithContext(context.Background())
}

func (i AgencyProjectRoleArray) ToAgencyProjectRoleArrayOutputWithContext(ctx context.Context) AgencyProjectRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgencyProjectRoleArrayOutput)
}

type AgencyProjectRoleOutput struct{ *pulumi.OutputState }

func (AgencyProjectRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AgencyProjectRole)(nil)).Elem()
}

func (o AgencyProjectRoleOutput) ToAgencyProjectRoleOutput() AgencyProjectRoleOutput {
	return o
}

func (o AgencyProjectRoleOutput) ToAgencyProjectRoleOutputWithContext(ctx context.Context) AgencyProjectRoleOutput {
	return o
}

// Specifies the name of project.
func (o AgencyProjectRoleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v AgencyProjectRole) string { return v.Project }).(pulumi.StringOutput)
}

// Specifies an array of role names.
//
// > **NOTE**
//   - At least one of `projectRole` and `domainRoles` must be specified when creating an agency.
//   - We can get all **System-Defined Roles** form
//     [SberCloud](https://support.hc.sbercloud.ru/permissions/index.html).
func (o AgencyProjectRoleOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AgencyProjectRole) []string { return v.Roles }).(pulumi.StringArrayOutput)
}

type AgencyProjectRoleArrayOutput struct{ *pulumi.OutputState }

func (AgencyProjectRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AgencyProjectRole)(nil)).Elem()
}

func (o AgencyProjectRoleArrayOutput) ToAgencyProjectRoleArrayOutput() AgencyProjectRoleArrayOutput {
	return o
}

func (o AgencyProjectRoleArrayOutput) ToAgencyProjectRoleArrayOutputWithContext(ctx context.Context) AgencyProjectRoleArrayOutput {
	return o
}

func (o AgencyProjectRoleArrayOutput) Index(i pulumi.IntInput) AgencyProjectRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AgencyProjectRole {
		return vs[0].([]AgencyProjectRole)[vs[1].(int)]
	}).(AgencyProjectRoleOutput)
}

type ProviderAccessConfig struct {
	// Specifies the access type of the identity provider.
	// Available options are:
	AccessType string `pulumi:"accessType"`
	// Specifies the authorization endpoint of the OpenID Connect identity
	// provider. This field is required only if the access type is set to `programConsole`.
	AuthorizationEndpoint *string `pulumi:"authorizationEndpoint"`
	// Specifies the ID of a client registered with the OpenID Connect identity provider.
	ClientId string `pulumi:"clientId"`
	// Specifies the URL of the identity provider.
	// This field corresponds to the iss field in the ID token.
	ProviderUrl string `pulumi:"providerUrl"`
	// Response mode.
	// Valid values is *form_post* and *fragment*, default value is *form_post*.
	// This field is required only if the access type is set to `programConsole`.
	ResponseMode *string `pulumi:"responseMode"`
	// Response type. Valid values is *id_token*, default value is *id_token*.
	// This field is required only if the access type is set to `programConsole`.
	ResponseType *string `pulumi:"responseType"`
	// Specifies the scopes of authorization requests. It is an array of one or more scopes.
	// Valid values are *openid*, *email*, *profile* and other values defined by you.
	// This field is required only if the access type is set to `programConsole`.
	//
	// > **NOTE:** 1. *openid* must be specified for this field.
	// <br/>2. A maximum of 10 values can be specified, and they must be separated with spaces.
	// <br/>Example: openid email host.
	Scopes []string `pulumi:"scopes"`
	// Public key used to sign the ID token of the OpenID Connect identity provider.
	// This field is required only if the protocol is set to *oidc*.
	SigningKey string `pulumi:"signingKey"`
}

// ProviderAccessConfigInput is an input type that accepts ProviderAccessConfigArgs and ProviderAccessConfigOutput values.
// You can construct a concrete instance of `ProviderAccessConfigInput` via:
//
//	ProviderAccessConfigArgs{...}
type ProviderAccessConfigInput interface {
	pulumi.Input

	ToProviderAccessConfigOutput() ProviderAccessConfigOutput
	ToProviderAccessConfigOutputWithContext(context.Context) ProviderAccessConfigOutput
}

type ProviderAccessConfigArgs struct {
	// Specifies the access type of the identity provider.
	// Available options are:
	AccessType pulumi.StringInput `pulumi:"accessType"`
	// Specifies the authorization endpoint of the OpenID Connect identity
	// provider. This field is required only if the access type is set to `programConsole`.
	AuthorizationEndpoint pulumi.StringPtrInput `pulumi:"authorizationEndpoint"`
	// Specifies the ID of a client registered with the OpenID Connect identity provider.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Specifies the URL of the identity provider.
	// This field corresponds to the iss field in the ID token.
	ProviderUrl pulumi.StringInput `pulumi:"providerUrl"`
	// Response mode.
	// Valid values is *form_post* and *fragment*, default value is *form_post*.
	// This field is required only if the access type is set to `programConsole`.
	ResponseMode pulumi.StringPtrInput `pulumi:"responseMode"`
	// Response type. Valid values is *id_token*, default value is *id_token*.
	// This field is required only if the access type is set to `programConsole`.
	ResponseType pulumi.StringPtrInput `pulumi:"responseType"`
	// Specifies the scopes of authorization requests. It is an array of one or more scopes.
	// Valid values are *openid*, *email*, *profile* and other values defined by you.
	// This field is required only if the access type is set to `programConsole`.
	//
	// > **NOTE:** 1. *openid* must be specified for this field.
	// <br/>2. A maximum of 10 values can be specified, and they must be separated with spaces.
	// <br/>Example: openid email host.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// Public key used to sign the ID token of the OpenID Connect identity provider.
	// This field is required only if the protocol is set to *oidc*.
	SigningKey pulumi.StringInput `pulumi:"signingKey"`
}

func (ProviderAccessConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAccessConfig)(nil)).Elem()
}

func (i ProviderAccessConfigArgs) ToProviderAccessConfigOutput() ProviderAccessConfigOutput {
	return i.ToProviderAccessConfigOutputWithContext(context.Background())
}

func (i ProviderAccessConfigArgs) ToProviderAccessConfigOutputWithContext(ctx context.Context) ProviderAccessConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAccessConfigOutput)
}

func (i ProviderAccessConfigArgs) ToProviderAccessConfigPtrOutput() ProviderAccessConfigPtrOutput {
	return i.ToProviderAccessConfigPtrOutputWithContext(context.Background())
}

func (i ProviderAccessConfigArgs) ToProviderAccessConfigPtrOutputWithContext(ctx context.Context) ProviderAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAccessConfigOutput).ToProviderAccessConfigPtrOutputWithContext(ctx)
}

// ProviderAccessConfigPtrInput is an input type that accepts ProviderAccessConfigArgs, ProviderAccessConfigPtr and ProviderAccessConfigPtrOutput values.
// You can construct a concrete instance of `ProviderAccessConfigPtrInput` via:
//
//	        ProviderAccessConfigArgs{...}
//
//	or:
//
//	        nil
type ProviderAccessConfigPtrInput interface {
	pulumi.Input

	ToProviderAccessConfigPtrOutput() ProviderAccessConfigPtrOutput
	ToProviderAccessConfigPtrOutputWithContext(context.Context) ProviderAccessConfigPtrOutput
}

type providerAccessConfigPtrType ProviderAccessConfigArgs

func ProviderAccessConfigPtr(v *ProviderAccessConfigArgs) ProviderAccessConfigPtrInput {
	return (*providerAccessConfigPtrType)(v)
}

func (*providerAccessConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAccessConfig)(nil)).Elem()
}

func (i *providerAccessConfigPtrType) ToProviderAccessConfigPtrOutput() ProviderAccessConfigPtrOutput {
	return i.ToProviderAccessConfigPtrOutputWithContext(context.Background())
}

func (i *providerAccessConfigPtrType) ToProviderAccessConfigPtrOutputWithContext(ctx context.Context) ProviderAccessConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAccessConfigPtrOutput)
}

type ProviderAccessConfigOutput struct{ *pulumi.OutputState }

func (ProviderAccessConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAccessConfig)(nil)).Elem()
}

func (o ProviderAccessConfigOutput) ToProviderAccessConfigOutput() ProviderAccessConfigOutput {
	return o
}

func (o ProviderAccessConfigOutput) ToProviderAccessConfigOutputWithContext(ctx context.Context) ProviderAccessConfigOutput {
	return o
}

func (o ProviderAccessConfigOutput) ToProviderAccessConfigPtrOutput() ProviderAccessConfigPtrOutput {
	return o.ToProviderAccessConfigPtrOutputWithContext(context.Background())
}

func (o ProviderAccessConfigOutput) ToProviderAccessConfigPtrOutputWithContext(ctx context.Context) ProviderAccessConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAccessConfig) *ProviderAccessConfig {
		return &v
	}).(ProviderAccessConfigPtrOutput)
}

// Specifies the access type of the identity provider.
// Available options are:
func (o ProviderAccessConfigOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAccessConfig) string { return v.AccessType }).(pulumi.StringOutput)
}

// Specifies the authorization endpoint of the OpenID Connect identity
// provider. This field is required only if the access type is set to `programConsole`.
func (o ProviderAccessConfigOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAccessConfig) *string { return v.AuthorizationEndpoint }).(pulumi.StringPtrOutput)
}

// Specifies the ID of a client registered with the OpenID Connect identity provider.
func (o ProviderAccessConfigOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAccessConfig) string { return v.ClientId }).(pulumi.StringOutput)
}

// Specifies the URL of the identity provider.
// This field corresponds to the iss field in the ID token.
func (o ProviderAccessConfigOutput) ProviderUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAccessConfig) string { return v.ProviderUrl }).(pulumi.StringOutput)
}

// Response mode.
// Valid values is *form_post* and *fragment*, default value is *form_post*.
// This field is required only if the access type is set to `programConsole`.
func (o ProviderAccessConfigOutput) ResponseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAccessConfig) *string { return v.ResponseMode }).(pulumi.StringPtrOutput)
}

// Response type. Valid values is *id_token*, default value is *id_token*.
// This field is required only if the access type is set to `programConsole`.
func (o ProviderAccessConfigOutput) ResponseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAccessConfig) *string { return v.ResponseType }).(pulumi.StringPtrOutput)
}

// Specifies the scopes of authorization requests. It is an array of one or more scopes.
// Valid values are *openid*, *email*, *profile* and other values defined by you.
// This field is required only if the access type is set to `programConsole`.
//
// > **NOTE:** 1. *openid* must be specified for this field.
// <br/>2. A maximum of 10 values can be specified, and they must be separated with spaces.
// <br/>Example: openid email host.
func (o ProviderAccessConfigOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderAccessConfig) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Public key used to sign the ID token of the OpenID Connect identity provider.
// This field is required only if the protocol is set to *oidc*.
func (o ProviderAccessConfigOutput) SigningKey() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAccessConfig) string { return v.SigningKey }).(pulumi.StringOutput)
}

type ProviderAccessConfigPtrOutput struct{ *pulumi.OutputState }

func (ProviderAccessConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAccessConfig)(nil)).Elem()
}

func (o ProviderAccessConfigPtrOutput) ToProviderAccessConfigPtrOutput() ProviderAccessConfigPtrOutput {
	return o
}

func (o ProviderAccessConfigPtrOutput) ToProviderAccessConfigPtrOutputWithContext(ctx context.Context) ProviderAccessConfigPtrOutput {
	return o
}

func (o ProviderAccessConfigPtrOutput) Elem() ProviderAccessConfigOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) ProviderAccessConfig {
		if v != nil {
			return *v
		}
		var ret ProviderAccessConfig
		return ret
	}).(ProviderAccessConfigOutput)
}

// Specifies the access type of the identity provider.
// Available options are:
func (o ProviderAccessConfigPtrOutput) AccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) *string {
		if v == nil {
			return nil
		}
		return &v.AccessType
	}).(pulumi.StringPtrOutput)
}

// Specifies the authorization endpoint of the OpenID Connect identity
// provider. This field is required only if the access type is set to `programConsole`.
func (o ProviderAccessConfigPtrOutput) AuthorizationEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) *string {
		if v == nil {
			return nil
		}
		return v.AuthorizationEndpoint
	}).(pulumi.StringPtrOutput)
}

// Specifies the ID of a client registered with the OpenID Connect identity provider.
func (o ProviderAccessConfigPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Specifies the URL of the identity provider.
// This field corresponds to the iss field in the ID token.
func (o ProviderAccessConfigPtrOutput) ProviderUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) *string {
		if v == nil {
			return nil
		}
		return &v.ProviderUrl
	}).(pulumi.StringPtrOutput)
}

// Response mode.
// Valid values is *form_post* and *fragment*, default value is *form_post*.
// This field is required only if the access type is set to `programConsole`.
func (o ProviderAccessConfigPtrOutput) ResponseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) *string {
		if v == nil {
			return nil
		}
		return v.ResponseMode
	}).(pulumi.StringPtrOutput)
}

// Response type. Valid values is *id_token*, default value is *id_token*.
// This field is required only if the access type is set to `programConsole`.
func (o ProviderAccessConfigPtrOutput) ResponseType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) *string {
		if v == nil {
			return nil
		}
		return v.ResponseType
	}).(pulumi.StringPtrOutput)
}

// Specifies the scopes of authorization requests. It is an array of one or more scopes.
// Valid values are *openid*, *email*, *profile* and other values defined by you.
// This field is required only if the access type is set to `programConsole`.
//
// > **NOTE:** 1. *openid* must be specified for this field.
// <br/>2. A maximum of 10 values can be specified, and they must be separated with spaces.
// <br/>Example: openid email host.
func (o ProviderAccessConfigPtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Public key used to sign the ID token of the OpenID Connect identity provider.
// This field is required only if the protocol is set to *oidc*.
func (o ProviderAccessConfigPtrOutput) SigningKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAccessConfig) *string {
		if v == nil {
			return nil
		}
		return &v.SigningKey
	}).(pulumi.StringPtrOutput)
}

type ProviderConversionConversionRule struct {
	// Specifies the federated user information on the cloud platform.
	Locals []ProviderConversionConversionRuleLocal `pulumi:"locals"`
	// Specifies Federated user information in the IDP system.
	//
	// > **NOTE:** If the protocol of identity provider is SAML, this field is an expression consisting of assertion
	// attributes and operators.
	// If the protocol of identity provider is OIDC, the value of this field is determined by the ID token.
	Remotes []ProviderConversionConversionRuleRemote `pulumi:"remotes"`
}

// ProviderConversionConversionRuleInput is an input type that accepts ProviderConversionConversionRuleArgs and ProviderConversionConversionRuleOutput values.
// You can construct a concrete instance of `ProviderConversionConversionRuleInput` via:
//
//	ProviderConversionConversionRuleArgs{...}
type ProviderConversionConversionRuleInput interface {
	pulumi.Input

	ToProviderConversionConversionRuleOutput() ProviderConversionConversionRuleOutput
	ToProviderConversionConversionRuleOutputWithContext(context.Context) ProviderConversionConversionRuleOutput
}

type ProviderConversionConversionRuleArgs struct {
	// Specifies the federated user information on the cloud platform.
	Locals ProviderConversionConversionRuleLocalArrayInput `pulumi:"locals"`
	// Specifies Federated user information in the IDP system.
	//
	// > **NOTE:** If the protocol of identity provider is SAML, this field is an expression consisting of assertion
	// attributes and operators.
	// If the protocol of identity provider is OIDC, the value of this field is determined by the ID token.
	Remotes ProviderConversionConversionRuleRemoteArrayInput `pulumi:"remotes"`
}

func (ProviderConversionConversionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionConversionRule)(nil)).Elem()
}

func (i ProviderConversionConversionRuleArgs) ToProviderConversionConversionRuleOutput() ProviderConversionConversionRuleOutput {
	return i.ToProviderConversionConversionRuleOutputWithContext(context.Background())
}

func (i ProviderConversionConversionRuleArgs) ToProviderConversionConversionRuleOutputWithContext(ctx context.Context) ProviderConversionConversionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionConversionRuleOutput)
}

// ProviderConversionConversionRuleArrayInput is an input type that accepts ProviderConversionConversionRuleArray and ProviderConversionConversionRuleArrayOutput values.
// You can construct a concrete instance of `ProviderConversionConversionRuleArrayInput` via:
//
//	ProviderConversionConversionRuleArray{ ProviderConversionConversionRuleArgs{...} }
type ProviderConversionConversionRuleArrayInput interface {
	pulumi.Input

	ToProviderConversionConversionRuleArrayOutput() ProviderConversionConversionRuleArrayOutput
	ToProviderConversionConversionRuleArrayOutputWithContext(context.Context) ProviderConversionConversionRuleArrayOutput
}

type ProviderConversionConversionRuleArray []ProviderConversionConversionRuleInput

func (ProviderConversionConversionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionConversionRule)(nil)).Elem()
}

func (i ProviderConversionConversionRuleArray) ToProviderConversionConversionRuleArrayOutput() ProviderConversionConversionRuleArrayOutput {
	return i.ToProviderConversionConversionRuleArrayOutputWithContext(context.Background())
}

func (i ProviderConversionConversionRuleArray) ToProviderConversionConversionRuleArrayOutputWithContext(ctx context.Context) ProviderConversionConversionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionConversionRuleArrayOutput)
}

type ProviderConversionConversionRuleOutput struct{ *pulumi.OutputState }

func (ProviderConversionConversionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionConversionRule)(nil)).Elem()
}

func (o ProviderConversionConversionRuleOutput) ToProviderConversionConversionRuleOutput() ProviderConversionConversionRuleOutput {
	return o
}

func (o ProviderConversionConversionRuleOutput) ToProviderConversionConversionRuleOutputWithContext(ctx context.Context) ProviderConversionConversionRuleOutput {
	return o
}

// Specifies the federated user information on the cloud platform.
func (o ProviderConversionConversionRuleOutput) Locals() ProviderConversionConversionRuleLocalArrayOutput {
	return o.ApplyT(func(v ProviderConversionConversionRule) []ProviderConversionConversionRuleLocal { return v.Locals }).(ProviderConversionConversionRuleLocalArrayOutput)
}

// Specifies Federated user information in the IDP system.
//
// > **NOTE:** If the protocol of identity provider is SAML, this field is an expression consisting of assertion
// attributes and operators.
// If the protocol of identity provider is OIDC, the value of this field is determined by the ID token.
func (o ProviderConversionConversionRuleOutput) Remotes() ProviderConversionConversionRuleRemoteArrayOutput {
	return o.ApplyT(func(v ProviderConversionConversionRule) []ProviderConversionConversionRuleRemote { return v.Remotes }).(ProviderConversionConversionRuleRemoteArrayOutput)
}

type ProviderConversionConversionRuleArrayOutput struct{ *pulumi.OutputState }

func (ProviderConversionConversionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionConversionRule)(nil)).Elem()
}

func (o ProviderConversionConversionRuleArrayOutput) ToProviderConversionConversionRuleArrayOutput() ProviderConversionConversionRuleArrayOutput {
	return o
}

func (o ProviderConversionConversionRuleArrayOutput) ToProviderConversionConversionRuleArrayOutputWithContext(ctx context.Context) ProviderConversionConversionRuleArrayOutput {
	return o
}

func (o ProviderConversionConversionRuleArrayOutput) Index(i pulumi.IntInput) ProviderConversionConversionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderConversionConversionRule {
		return vs[0].([]ProviderConversionConversionRule)[vs[1].(int)]
	}).(ProviderConversionConversionRuleOutput)
}

type ProviderConversionConversionRuleLocal struct {
	// Specifies the user group to which the federated user belongs on the cloud platform.
	Group *string `pulumi:"group"`
	// Specifies the name of a federated user on the cloud platform.
	Username *string `pulumi:"username"`
}

// ProviderConversionConversionRuleLocalInput is an input type that accepts ProviderConversionConversionRuleLocalArgs and ProviderConversionConversionRuleLocalOutput values.
// You can construct a concrete instance of `ProviderConversionConversionRuleLocalInput` via:
//
//	ProviderConversionConversionRuleLocalArgs{...}
type ProviderConversionConversionRuleLocalInput interface {
	pulumi.Input

	ToProviderConversionConversionRuleLocalOutput() ProviderConversionConversionRuleLocalOutput
	ToProviderConversionConversionRuleLocalOutputWithContext(context.Context) ProviderConversionConversionRuleLocalOutput
}

type ProviderConversionConversionRuleLocalArgs struct {
	// Specifies the user group to which the federated user belongs on the cloud platform.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// Specifies the name of a federated user on the cloud platform.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ProviderConversionConversionRuleLocalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionConversionRuleLocal)(nil)).Elem()
}

func (i ProviderConversionConversionRuleLocalArgs) ToProviderConversionConversionRuleLocalOutput() ProviderConversionConversionRuleLocalOutput {
	return i.ToProviderConversionConversionRuleLocalOutputWithContext(context.Background())
}

func (i ProviderConversionConversionRuleLocalArgs) ToProviderConversionConversionRuleLocalOutputWithContext(ctx context.Context) ProviderConversionConversionRuleLocalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionConversionRuleLocalOutput)
}

// ProviderConversionConversionRuleLocalArrayInput is an input type that accepts ProviderConversionConversionRuleLocalArray and ProviderConversionConversionRuleLocalArrayOutput values.
// You can construct a concrete instance of `ProviderConversionConversionRuleLocalArrayInput` via:
//
//	ProviderConversionConversionRuleLocalArray{ ProviderConversionConversionRuleLocalArgs{...} }
type ProviderConversionConversionRuleLocalArrayInput interface {
	pulumi.Input

	ToProviderConversionConversionRuleLocalArrayOutput() ProviderConversionConversionRuleLocalArrayOutput
	ToProviderConversionConversionRuleLocalArrayOutputWithContext(context.Context) ProviderConversionConversionRuleLocalArrayOutput
}

type ProviderConversionConversionRuleLocalArray []ProviderConversionConversionRuleLocalInput

func (ProviderConversionConversionRuleLocalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionConversionRuleLocal)(nil)).Elem()
}

func (i ProviderConversionConversionRuleLocalArray) ToProviderConversionConversionRuleLocalArrayOutput() ProviderConversionConversionRuleLocalArrayOutput {
	return i.ToProviderConversionConversionRuleLocalArrayOutputWithContext(context.Background())
}

func (i ProviderConversionConversionRuleLocalArray) ToProviderConversionConversionRuleLocalArrayOutputWithContext(ctx context.Context) ProviderConversionConversionRuleLocalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionConversionRuleLocalArrayOutput)
}

type ProviderConversionConversionRuleLocalOutput struct{ *pulumi.OutputState }

func (ProviderConversionConversionRuleLocalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionConversionRuleLocal)(nil)).Elem()
}

func (o ProviderConversionConversionRuleLocalOutput) ToProviderConversionConversionRuleLocalOutput() ProviderConversionConversionRuleLocalOutput {
	return o
}

func (o ProviderConversionConversionRuleLocalOutput) ToProviderConversionConversionRuleLocalOutputWithContext(ctx context.Context) ProviderConversionConversionRuleLocalOutput {
	return o
}

// Specifies the user group to which the federated user belongs on the cloud platform.
func (o ProviderConversionConversionRuleLocalOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderConversionConversionRuleLocal) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the name of a federated user on the cloud platform.
func (o ProviderConversionConversionRuleLocalOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderConversionConversionRuleLocal) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ProviderConversionConversionRuleLocalArrayOutput struct{ *pulumi.OutputState }

func (ProviderConversionConversionRuleLocalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionConversionRuleLocal)(nil)).Elem()
}

func (o ProviderConversionConversionRuleLocalArrayOutput) ToProviderConversionConversionRuleLocalArrayOutput() ProviderConversionConversionRuleLocalArrayOutput {
	return o
}

func (o ProviderConversionConversionRuleLocalArrayOutput) ToProviderConversionConversionRuleLocalArrayOutputWithContext(ctx context.Context) ProviderConversionConversionRuleLocalArrayOutput {
	return o
}

func (o ProviderConversionConversionRuleLocalArrayOutput) Index(i pulumi.IntInput) ProviderConversionConversionRuleLocalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderConversionConversionRuleLocal {
		return vs[0].([]ProviderConversionConversionRuleLocal)[vs[1].(int)]
	}).(ProviderConversionConversionRuleLocalOutput)
}

type ProviderConversionConversionRuleRemote struct {
	// Specifies the attribute in the IDP assertion.
	Attribute string `pulumi:"attribute"`
	// Specifies the condition of conversion rule.
	// Available options are:
	Condition *string `pulumi:"condition"`
	// Specifies the rule is matched only if the specified strings appear in the attribute type.
	Values []string `pulumi:"values"`
}

// ProviderConversionConversionRuleRemoteInput is an input type that accepts ProviderConversionConversionRuleRemoteArgs and ProviderConversionConversionRuleRemoteOutput values.
// You can construct a concrete instance of `ProviderConversionConversionRuleRemoteInput` via:
//
//	ProviderConversionConversionRuleRemoteArgs{...}
type ProviderConversionConversionRuleRemoteInput interface {
	pulumi.Input

	ToProviderConversionConversionRuleRemoteOutput() ProviderConversionConversionRuleRemoteOutput
	ToProviderConversionConversionRuleRemoteOutputWithContext(context.Context) ProviderConversionConversionRuleRemoteOutput
}

type ProviderConversionConversionRuleRemoteArgs struct {
	// Specifies the attribute in the IDP assertion.
	Attribute pulumi.StringInput `pulumi:"attribute"`
	// Specifies the condition of conversion rule.
	// Available options are:
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// Specifies the rule is matched only if the specified strings appear in the attribute type.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProviderConversionConversionRuleRemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionConversionRuleRemote)(nil)).Elem()
}

func (i ProviderConversionConversionRuleRemoteArgs) ToProviderConversionConversionRuleRemoteOutput() ProviderConversionConversionRuleRemoteOutput {
	return i.ToProviderConversionConversionRuleRemoteOutputWithContext(context.Background())
}

func (i ProviderConversionConversionRuleRemoteArgs) ToProviderConversionConversionRuleRemoteOutputWithContext(ctx context.Context) ProviderConversionConversionRuleRemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionConversionRuleRemoteOutput)
}

// ProviderConversionConversionRuleRemoteArrayInput is an input type that accepts ProviderConversionConversionRuleRemoteArray and ProviderConversionConversionRuleRemoteArrayOutput values.
// You can construct a concrete instance of `ProviderConversionConversionRuleRemoteArrayInput` via:
//
//	ProviderConversionConversionRuleRemoteArray{ ProviderConversionConversionRuleRemoteArgs{...} }
type ProviderConversionConversionRuleRemoteArrayInput interface {
	pulumi.Input

	ToProviderConversionConversionRuleRemoteArrayOutput() ProviderConversionConversionRuleRemoteArrayOutput
	ToProviderConversionConversionRuleRemoteArrayOutputWithContext(context.Context) ProviderConversionConversionRuleRemoteArrayOutput
}

type ProviderConversionConversionRuleRemoteArray []ProviderConversionConversionRuleRemoteInput

func (ProviderConversionConversionRuleRemoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionConversionRuleRemote)(nil)).Elem()
}

func (i ProviderConversionConversionRuleRemoteArray) ToProviderConversionConversionRuleRemoteArrayOutput() ProviderConversionConversionRuleRemoteArrayOutput {
	return i.ToProviderConversionConversionRuleRemoteArrayOutputWithContext(context.Background())
}

func (i ProviderConversionConversionRuleRemoteArray) ToProviderConversionConversionRuleRemoteArrayOutputWithContext(ctx context.Context) ProviderConversionConversionRuleRemoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionConversionRuleRemoteArrayOutput)
}

type ProviderConversionConversionRuleRemoteOutput struct{ *pulumi.OutputState }

func (ProviderConversionConversionRuleRemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionConversionRuleRemote)(nil)).Elem()
}

func (o ProviderConversionConversionRuleRemoteOutput) ToProviderConversionConversionRuleRemoteOutput() ProviderConversionConversionRuleRemoteOutput {
	return o
}

func (o ProviderConversionConversionRuleRemoteOutput) ToProviderConversionConversionRuleRemoteOutputWithContext(ctx context.Context) ProviderConversionConversionRuleRemoteOutput {
	return o
}

// Specifies the attribute in the IDP assertion.
func (o ProviderConversionConversionRuleRemoteOutput) Attribute() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderConversionConversionRuleRemote) string { return v.Attribute }).(pulumi.StringOutput)
}

// Specifies the condition of conversion rule.
// Available options are:
func (o ProviderConversionConversionRuleRemoteOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderConversionConversionRuleRemote) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// Specifies the rule is matched only if the specified strings appear in the attribute type.
func (o ProviderConversionConversionRuleRemoteOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderConversionConversionRuleRemote) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProviderConversionConversionRuleRemoteArrayOutput struct{ *pulumi.OutputState }

func (ProviderConversionConversionRuleRemoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionConversionRuleRemote)(nil)).Elem()
}

func (o ProviderConversionConversionRuleRemoteArrayOutput) ToProviderConversionConversionRuleRemoteArrayOutput() ProviderConversionConversionRuleRemoteArrayOutput {
	return o
}

func (o ProviderConversionConversionRuleRemoteArrayOutput) ToProviderConversionConversionRuleRemoteArrayOutputWithContext(ctx context.Context) ProviderConversionConversionRuleRemoteArrayOutput {
	return o
}

func (o ProviderConversionConversionRuleRemoteArrayOutput) Index(i pulumi.IntInput) ProviderConversionConversionRuleRemoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderConversionConversionRuleRemote {
		return vs[0].([]ProviderConversionConversionRuleRemote)[vs[1].(int)]
	}).(ProviderConversionConversionRuleRemoteOutput)
}

type ProviderConversionRule struct {
	// The federated user information on the cloud platform.
	Locals []ProviderConversionRuleLocal `pulumi:"locals"`
	// The description of the identity provider.
	Remotes []ProviderConversionRuleRemote `pulumi:"remotes"`
}

// ProviderConversionRuleInput is an input type that accepts ProviderConversionRuleArgs and ProviderConversionRuleOutput values.
// You can construct a concrete instance of `ProviderConversionRuleInput` via:
//
//	ProviderConversionRuleArgs{...}
type ProviderConversionRuleInput interface {
	pulumi.Input

	ToProviderConversionRuleOutput() ProviderConversionRuleOutput
	ToProviderConversionRuleOutputWithContext(context.Context) ProviderConversionRuleOutput
}

type ProviderConversionRuleArgs struct {
	// The federated user information on the cloud platform.
	Locals ProviderConversionRuleLocalArrayInput `pulumi:"locals"`
	// The description of the identity provider.
	Remotes ProviderConversionRuleRemoteArrayInput `pulumi:"remotes"`
}

func (ProviderConversionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionRule)(nil)).Elem()
}

func (i ProviderConversionRuleArgs) ToProviderConversionRuleOutput() ProviderConversionRuleOutput {
	return i.ToProviderConversionRuleOutputWithContext(context.Background())
}

func (i ProviderConversionRuleArgs) ToProviderConversionRuleOutputWithContext(ctx context.Context) ProviderConversionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionRuleOutput)
}

// ProviderConversionRuleArrayInput is an input type that accepts ProviderConversionRuleArray and ProviderConversionRuleArrayOutput values.
// You can construct a concrete instance of `ProviderConversionRuleArrayInput` via:
//
//	ProviderConversionRuleArray{ ProviderConversionRuleArgs{...} }
type ProviderConversionRuleArrayInput interface {
	pulumi.Input

	ToProviderConversionRuleArrayOutput() ProviderConversionRuleArrayOutput
	ToProviderConversionRuleArrayOutputWithContext(context.Context) ProviderConversionRuleArrayOutput
}

type ProviderConversionRuleArray []ProviderConversionRuleInput

func (ProviderConversionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionRule)(nil)).Elem()
}

func (i ProviderConversionRuleArray) ToProviderConversionRuleArrayOutput() ProviderConversionRuleArrayOutput {
	return i.ToProviderConversionRuleArrayOutputWithContext(context.Background())
}

func (i ProviderConversionRuleArray) ToProviderConversionRuleArrayOutputWithContext(ctx context.Context) ProviderConversionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionRuleArrayOutput)
}

type ProviderConversionRuleOutput struct{ *pulumi.OutputState }

func (ProviderConversionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionRule)(nil)).Elem()
}

func (o ProviderConversionRuleOutput) ToProviderConversionRuleOutput() ProviderConversionRuleOutput {
	return o
}

func (o ProviderConversionRuleOutput) ToProviderConversionRuleOutputWithContext(ctx context.Context) ProviderConversionRuleOutput {
	return o
}

// The federated user information on the cloud platform.
func (o ProviderConversionRuleOutput) Locals() ProviderConversionRuleLocalArrayOutput {
	return o.ApplyT(func(v ProviderConversionRule) []ProviderConversionRuleLocal { return v.Locals }).(ProviderConversionRuleLocalArrayOutput)
}

// The description of the identity provider.
func (o ProviderConversionRuleOutput) Remotes() ProviderConversionRuleRemoteArrayOutput {
	return o.ApplyT(func(v ProviderConversionRule) []ProviderConversionRuleRemote { return v.Remotes }).(ProviderConversionRuleRemoteArrayOutput)
}

type ProviderConversionRuleArrayOutput struct{ *pulumi.OutputState }

func (ProviderConversionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionRule)(nil)).Elem()
}

func (o ProviderConversionRuleArrayOutput) ToProviderConversionRuleArrayOutput() ProviderConversionRuleArrayOutput {
	return o
}

func (o ProviderConversionRuleArrayOutput) ToProviderConversionRuleArrayOutputWithContext(ctx context.Context) ProviderConversionRuleArrayOutput {
	return o
}

func (o ProviderConversionRuleArrayOutput) Index(i pulumi.IntInput) ProviderConversionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderConversionRule {
		return vs[0].([]ProviderConversionRule)[vs[1].(int)]
	}).(ProviderConversionRuleOutput)
}

type ProviderConversionRuleLocal struct {
	// The user group to which the federated user belongs on the cloud platform.
	Group *string `pulumi:"group"`
	// The name of a federated user on the cloud platform.
	Username *string `pulumi:"username"`
}

// ProviderConversionRuleLocalInput is an input type that accepts ProviderConversionRuleLocalArgs and ProviderConversionRuleLocalOutput values.
// You can construct a concrete instance of `ProviderConversionRuleLocalInput` via:
//
//	ProviderConversionRuleLocalArgs{...}
type ProviderConversionRuleLocalInput interface {
	pulumi.Input

	ToProviderConversionRuleLocalOutput() ProviderConversionRuleLocalOutput
	ToProviderConversionRuleLocalOutputWithContext(context.Context) ProviderConversionRuleLocalOutput
}

type ProviderConversionRuleLocalArgs struct {
	// The user group to which the federated user belongs on the cloud platform.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The name of a federated user on the cloud platform.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ProviderConversionRuleLocalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionRuleLocal)(nil)).Elem()
}

func (i ProviderConversionRuleLocalArgs) ToProviderConversionRuleLocalOutput() ProviderConversionRuleLocalOutput {
	return i.ToProviderConversionRuleLocalOutputWithContext(context.Background())
}

func (i ProviderConversionRuleLocalArgs) ToProviderConversionRuleLocalOutputWithContext(ctx context.Context) ProviderConversionRuleLocalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionRuleLocalOutput)
}

// ProviderConversionRuleLocalArrayInput is an input type that accepts ProviderConversionRuleLocalArray and ProviderConversionRuleLocalArrayOutput values.
// You can construct a concrete instance of `ProviderConversionRuleLocalArrayInput` via:
//
//	ProviderConversionRuleLocalArray{ ProviderConversionRuleLocalArgs{...} }
type ProviderConversionRuleLocalArrayInput interface {
	pulumi.Input

	ToProviderConversionRuleLocalArrayOutput() ProviderConversionRuleLocalArrayOutput
	ToProviderConversionRuleLocalArrayOutputWithContext(context.Context) ProviderConversionRuleLocalArrayOutput
}

type ProviderConversionRuleLocalArray []ProviderConversionRuleLocalInput

func (ProviderConversionRuleLocalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionRuleLocal)(nil)).Elem()
}

func (i ProviderConversionRuleLocalArray) ToProviderConversionRuleLocalArrayOutput() ProviderConversionRuleLocalArrayOutput {
	return i.ToProviderConversionRuleLocalArrayOutputWithContext(context.Background())
}

func (i ProviderConversionRuleLocalArray) ToProviderConversionRuleLocalArrayOutputWithContext(ctx context.Context) ProviderConversionRuleLocalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionRuleLocalArrayOutput)
}

type ProviderConversionRuleLocalOutput struct{ *pulumi.OutputState }

func (ProviderConversionRuleLocalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionRuleLocal)(nil)).Elem()
}

func (o ProviderConversionRuleLocalOutput) ToProviderConversionRuleLocalOutput() ProviderConversionRuleLocalOutput {
	return o
}

func (o ProviderConversionRuleLocalOutput) ToProviderConversionRuleLocalOutputWithContext(ctx context.Context) ProviderConversionRuleLocalOutput {
	return o
}

// The user group to which the federated user belongs on the cloud platform.
func (o ProviderConversionRuleLocalOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderConversionRuleLocal) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The name of a federated user on the cloud platform.
func (o ProviderConversionRuleLocalOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderConversionRuleLocal) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ProviderConversionRuleLocalArrayOutput struct{ *pulumi.OutputState }

func (ProviderConversionRuleLocalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionRuleLocal)(nil)).Elem()
}

func (o ProviderConversionRuleLocalArrayOutput) ToProviderConversionRuleLocalArrayOutput() ProviderConversionRuleLocalArrayOutput {
	return o
}

func (o ProviderConversionRuleLocalArrayOutput) ToProviderConversionRuleLocalArrayOutputWithContext(ctx context.Context) ProviderConversionRuleLocalArrayOutput {
	return o
}

func (o ProviderConversionRuleLocalArrayOutput) Index(i pulumi.IntInput) ProviderConversionRuleLocalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderConversionRuleLocal {
		return vs[0].([]ProviderConversionRuleLocal)[vs[1].(int)]
	}).(ProviderConversionRuleLocalOutput)
}

type ProviderConversionRuleRemote struct {
	// The attribute in the IDP assertion.
	Attribute *string `pulumi:"attribute"`
	// The condition of conversion rule.
	Condition *string `pulumi:"condition"`
	// The rule is matched only if the specified strings appear in the attribute type.
	Values []string `pulumi:"values"`
}

// ProviderConversionRuleRemoteInput is an input type that accepts ProviderConversionRuleRemoteArgs and ProviderConversionRuleRemoteOutput values.
// You can construct a concrete instance of `ProviderConversionRuleRemoteInput` via:
//
//	ProviderConversionRuleRemoteArgs{...}
type ProviderConversionRuleRemoteInput interface {
	pulumi.Input

	ToProviderConversionRuleRemoteOutput() ProviderConversionRuleRemoteOutput
	ToProviderConversionRuleRemoteOutputWithContext(context.Context) ProviderConversionRuleRemoteOutput
}

type ProviderConversionRuleRemoteArgs struct {
	// The attribute in the IDP assertion.
	Attribute pulumi.StringPtrInput `pulumi:"attribute"`
	// The condition of conversion rule.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The rule is matched only if the specified strings appear in the attribute type.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ProviderConversionRuleRemoteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionRuleRemote)(nil)).Elem()
}

func (i ProviderConversionRuleRemoteArgs) ToProviderConversionRuleRemoteOutput() ProviderConversionRuleRemoteOutput {
	return i.ToProviderConversionRuleRemoteOutputWithContext(context.Background())
}

func (i ProviderConversionRuleRemoteArgs) ToProviderConversionRuleRemoteOutputWithContext(ctx context.Context) ProviderConversionRuleRemoteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionRuleRemoteOutput)
}

// ProviderConversionRuleRemoteArrayInput is an input type that accepts ProviderConversionRuleRemoteArray and ProviderConversionRuleRemoteArrayOutput values.
// You can construct a concrete instance of `ProviderConversionRuleRemoteArrayInput` via:
//
//	ProviderConversionRuleRemoteArray{ ProviderConversionRuleRemoteArgs{...} }
type ProviderConversionRuleRemoteArrayInput interface {
	pulumi.Input

	ToProviderConversionRuleRemoteArrayOutput() ProviderConversionRuleRemoteArrayOutput
	ToProviderConversionRuleRemoteArrayOutputWithContext(context.Context) ProviderConversionRuleRemoteArrayOutput
}

type ProviderConversionRuleRemoteArray []ProviderConversionRuleRemoteInput

func (ProviderConversionRuleRemoteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionRuleRemote)(nil)).Elem()
}

func (i ProviderConversionRuleRemoteArray) ToProviderConversionRuleRemoteArrayOutput() ProviderConversionRuleRemoteArrayOutput {
	return i.ToProviderConversionRuleRemoteArrayOutputWithContext(context.Background())
}

func (i ProviderConversionRuleRemoteArray) ToProviderConversionRuleRemoteArrayOutputWithContext(ctx context.Context) ProviderConversionRuleRemoteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderConversionRuleRemoteArrayOutput)
}

type ProviderConversionRuleRemoteOutput struct{ *pulumi.OutputState }

func (ProviderConversionRuleRemoteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderConversionRuleRemote)(nil)).Elem()
}

func (o ProviderConversionRuleRemoteOutput) ToProviderConversionRuleRemoteOutput() ProviderConversionRuleRemoteOutput {
	return o
}

func (o ProviderConversionRuleRemoteOutput) ToProviderConversionRuleRemoteOutputWithContext(ctx context.Context) ProviderConversionRuleRemoteOutput {
	return o
}

// The attribute in the IDP assertion.
func (o ProviderConversionRuleRemoteOutput) Attribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderConversionRuleRemote) *string { return v.Attribute }).(pulumi.StringPtrOutput)
}

// The condition of conversion rule.
func (o ProviderConversionRuleRemoteOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderConversionRuleRemote) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The rule is matched only if the specified strings appear in the attribute type.
func (o ProviderConversionRuleRemoteOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderConversionRuleRemote) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ProviderConversionRuleRemoteArrayOutput struct{ *pulumi.OutputState }

func (ProviderConversionRuleRemoteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderConversionRuleRemote)(nil)).Elem()
}

func (o ProviderConversionRuleRemoteArrayOutput) ToProviderConversionRuleRemoteArrayOutput() ProviderConversionRuleRemoteArrayOutput {
	return o
}

func (o ProviderConversionRuleRemoteArrayOutput) ToProviderConversionRuleRemoteArrayOutputWithContext(ctx context.Context) ProviderConversionRuleRemoteArrayOutput {
	return o
}

func (o ProviderConversionRuleRemoteArrayOutput) Index(i pulumi.IntInput) ProviderConversionRuleRemoteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderConversionRuleRemote {
		return vs[0].([]ProviderConversionRuleRemote)[vs[1].(int)]
	}).(ProviderConversionRuleRemoteOutput)
}

type GetGroupUser struct {
	// Specifies the description of the identity group.
	Description string `pulumi:"description"`
	// Indicates the whether the IAM user is enabled.
	Enabled bool `pulumi:"enabled"`
	// Specifies the ID of the identity group.
	Id string `pulumi:"id"`
	// Specifies the name of the identity group.
	Name string `pulumi:"name"`
	// Indicates the time when the password will expire.
	// Null indicates that the password has unlimited validity.
	PasswordExpiresAt string `pulumi:"passwordExpiresAt"`
	// Indicates the password status. True means that the password needs to be changed,
	// and false means that the password is normal.
	PasswordStatus bool `pulumi:"passwordStatus"`
	// Indicates the password strength. The value can be high, mid, or low.
	PasswordStrength string `pulumi:"passwordStrength"`
}

// GetGroupUserInput is an input type that accepts GetGroupUserArgs and GetGroupUserOutput values.
// You can construct a concrete instance of `GetGroupUserInput` via:
//
//	GetGroupUserArgs{...}
type GetGroupUserInput interface {
	pulumi.Input

	ToGetGroupUserOutput() GetGroupUserOutput
	ToGetGroupUserOutputWithContext(context.Context) GetGroupUserOutput
}

type GetGroupUserArgs struct {
	// Specifies the description of the identity group.
	Description pulumi.StringInput `pulumi:"description"`
	// Indicates the whether the IAM user is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Specifies the ID of the identity group.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the name of the identity group.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates the time when the password will expire.
	// Null indicates that the password has unlimited validity.
	PasswordExpiresAt pulumi.StringInput `pulumi:"passwordExpiresAt"`
	// Indicates the password status. True means that the password needs to be changed,
	// and false means that the password is normal.
	PasswordStatus pulumi.BoolInput `pulumi:"passwordStatus"`
	// Indicates the password strength. The value can be high, mid, or low.
	PasswordStrength pulumi.StringInput `pulumi:"passwordStrength"`
}

func (GetGroupUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUser)(nil)).Elem()
}

func (i GetGroupUserArgs) ToGetGroupUserOutput() GetGroupUserOutput {
	return i.ToGetGroupUserOutputWithContext(context.Background())
}

func (i GetGroupUserArgs) ToGetGroupUserOutputWithContext(ctx context.Context) GetGroupUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUserOutput)
}

// GetGroupUserArrayInput is an input type that accepts GetGroupUserArray and GetGroupUserArrayOutput values.
// You can construct a concrete instance of `GetGroupUserArrayInput` via:
//
//	GetGroupUserArray{ GetGroupUserArgs{...} }
type GetGroupUserArrayInput interface {
	pulumi.Input

	ToGetGroupUserArrayOutput() GetGroupUserArrayOutput
	ToGetGroupUserArrayOutputWithContext(context.Context) GetGroupUserArrayOutput
}

type GetGroupUserArray []GetGroupUserInput

func (GetGroupUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupUser)(nil)).Elem()
}

func (i GetGroupUserArray) ToGetGroupUserArrayOutput() GetGroupUserArrayOutput {
	return i.ToGetGroupUserArrayOutputWithContext(context.Background())
}

func (i GetGroupUserArray) ToGetGroupUserArrayOutputWithContext(ctx context.Context) GetGroupUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupUserArrayOutput)
}

type GetGroupUserOutput struct{ *pulumi.OutputState }

func (GetGroupUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupUser)(nil)).Elem()
}

func (o GetGroupUserOutput) ToGetGroupUserOutput() GetGroupUserOutput {
	return o
}

func (o GetGroupUserOutput) ToGetGroupUserOutputWithContext(ctx context.Context) GetGroupUserOutput {
	return o
}

// Specifies the description of the identity group.
func (o GetGroupUserOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.Description }).(pulumi.StringOutput)
}

// Indicates the whether the IAM user is enabled.
func (o GetGroupUserOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupUser) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Specifies the ID of the identity group.
func (o GetGroupUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the name of the identity group.
func (o GetGroupUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the time when the password will expire.
// Null indicates that the password has unlimited validity.
func (o GetGroupUserOutput) PasswordExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.PasswordExpiresAt }).(pulumi.StringOutput)
}

// Indicates the password status. True means that the password needs to be changed,
// and false means that the password is normal.
func (o GetGroupUserOutput) PasswordStatus() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupUser) bool { return v.PasswordStatus }).(pulumi.BoolOutput)
}

// Indicates the password strength. The value can be high, mid, or low.
func (o GetGroupUserOutput) PasswordStrength() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupUser) string { return v.PasswordStrength }).(pulumi.StringOutput)
}

type GetGroupUserArrayOutput struct{ *pulumi.OutputState }

func (GetGroupUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupUser)(nil)).Elem()
}

func (o GetGroupUserArrayOutput) ToGetGroupUserArrayOutput() GetGroupUserArrayOutput {
	return o
}

func (o GetGroupUserArrayOutput) ToGetGroupUserArrayOutputWithContext(ctx context.Context) GetGroupUserArrayOutput {
	return o
}

func (o GetGroupUserArrayOutput) Index(i pulumi.IntInput) GetGroupUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupUser {
		return vs[0].([]GetGroupUser)[vs[1].(int)]
	}).(GetGroupUserOutput)
}

type GetProjectsProject struct {
	// Whether project is enabled.
	Enabled bool `pulumi:"enabled"`
	// The project ID.
	Id string `pulumi:"id"`
	// Specifies the project name to query.
	Name string `pulumi:"name"`
}

// GetProjectsProjectInput is an input type that accepts GetProjectsProjectArgs and GetProjectsProjectOutput values.
// You can construct a concrete instance of `GetProjectsProjectInput` via:
//
//	GetProjectsProjectArgs{...}
type GetProjectsProjectInput interface {
	pulumi.Input

	ToGetProjectsProjectOutput() GetProjectsProjectOutput
	ToGetProjectsProjectOutputWithContext(context.Context) GetProjectsProjectOutput
}

type GetProjectsProjectArgs struct {
	// Whether project is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The project ID.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the project name to query.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetProjectsProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return i.ToGetProjectsProjectOutputWithContext(context.Background())
}

func (i GetProjectsProjectArgs) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectOutput)
}

// GetProjectsProjectArrayInput is an input type that accepts GetProjectsProjectArray and GetProjectsProjectArrayOutput values.
// You can construct a concrete instance of `GetProjectsProjectArrayInput` via:
//
//	GetProjectsProjectArray{ GetProjectsProjectArgs{...} }
type GetProjectsProjectArrayInput interface {
	pulumi.Input

	ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput
	ToGetProjectsProjectArrayOutputWithContext(context.Context) GetProjectsProjectArrayOutput
}

type GetProjectsProjectArray []GetProjectsProjectInput

func (GetProjectsProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return i.ToGetProjectsProjectArrayOutputWithContext(context.Background())
}

func (i GetProjectsProjectArray) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetProjectsProjectArrayOutput)
}

type GetProjectsProjectOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutput() GetProjectsProjectOutput {
	return o
}

func (o GetProjectsProjectOutput) ToGetProjectsProjectOutputWithContext(ctx context.Context) GetProjectsProjectOutput {
	return o
}

// Whether project is enabled.
func (o GetProjectsProjectOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetProjectsProject) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The project ID.
func (o GetProjectsProjectOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the project name to query.
func (o GetProjectsProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetProjectsProject) string { return v.Name }).(pulumi.StringOutput)
}

type GetProjectsProjectArrayOutput struct{ *pulumi.OutputState }

func (GetProjectsProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetProjectsProject)(nil)).Elem()
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutput() GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) ToGetProjectsProjectArrayOutputWithContext(ctx context.Context) GetProjectsProjectArrayOutput {
	return o
}

func (o GetProjectsProjectArrayOutput) Index(i pulumi.IntInput) GetProjectsProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetProjectsProject {
		return vs[0].([]GetProjectsProject)[vs[1].(int)]
	}).(GetProjectsProjectOutput)
}

type GetUsersUser struct {
	// Indicates the description of the IAM user.
	Description string `pulumi:"description"`
	// Specifies the status of the IAM user, the default value is **true**.
	Enabled bool `pulumi:"enabled"`
	// Indicates the user groups to which an IAM user belongs.
	Groups []string `pulumi:"groups"`
	// Indicates the ID of the User.
	Id string `pulumi:"id"`
	// Specifies the IAM user name.
	Name string `pulumi:"name"`
	// Indicates the time when the password will expire.
	// Null indicates that the password has unlimited validity.
	PasswordExpiresAt string `pulumi:"passwordExpiresAt"`
	// Indicates the password status. True means that the password needs to be changed,
	// and false means that the password is normal.
	PasswordStatus bool `pulumi:"passwordStatus"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// Indicates the description of the IAM user.
	Description pulumi.StringInput `pulumi:"description"`
	// Specifies the status of the IAM user, the default value is **true**.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Indicates the user groups to which an IAM user belongs.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// Indicates the ID of the User.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the IAM user name.
	Name pulumi.StringInput `pulumi:"name"`
	// Indicates the time when the password will expire.
	// Null indicates that the password has unlimited validity.
	PasswordExpiresAt pulumi.StringInput `pulumi:"passwordExpiresAt"`
	// Indicates the password status. True means that the password needs to be changed,
	// and false means that the password is normal.
	PasswordStatus pulumi.BoolInput `pulumi:"passwordStatus"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// Indicates the description of the IAM user.
func (o GetUsersUserOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Description }).(pulumi.StringOutput)
}

// Specifies the status of the IAM user, the default value is **true**.
func (o GetUsersUserOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Indicates the user groups to which an IAM user belongs.
func (o GetUsersUserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Indicates the ID of the User.
func (o GetUsersUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the IAM user name.
func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the time when the password will expire.
// Null indicates that the password has unlimited validity.
func (o GetUsersUserOutput) PasswordExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.PasswordExpiresAt }).(pulumi.StringOutput)
}

// Indicates the password status. True means that the password needs to be changed,
// and false means that the password is normal.
func (o GetUsersUserOutput) PasswordStatus() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.PasswordStatus }).(pulumi.BoolOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclIpCidrInput)(nil)).Elem(), AclIpCidrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclIpCidrArrayInput)(nil)).Elem(), AclIpCidrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclIpRangeInput)(nil)).Elem(), AclIpRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclIpRangeArrayInput)(nil)).Elem(), AclIpRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgencyProjectRoleInput)(nil)).Elem(), AgencyProjectRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgencyProjectRoleArrayInput)(nil)).Elem(), AgencyProjectRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAccessConfigInput)(nil)).Elem(), ProviderAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAccessConfigPtrInput)(nil)).Elem(), ProviderAccessConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionConversionRuleInput)(nil)).Elem(), ProviderConversionConversionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionConversionRuleArrayInput)(nil)).Elem(), ProviderConversionConversionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionConversionRuleLocalInput)(nil)).Elem(), ProviderConversionConversionRuleLocalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionConversionRuleLocalArrayInput)(nil)).Elem(), ProviderConversionConversionRuleLocalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionConversionRuleRemoteInput)(nil)).Elem(), ProviderConversionConversionRuleRemoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionConversionRuleRemoteArrayInput)(nil)).Elem(), ProviderConversionConversionRuleRemoteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionRuleInput)(nil)).Elem(), ProviderConversionRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionRuleArrayInput)(nil)).Elem(), ProviderConversionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionRuleLocalInput)(nil)).Elem(), ProviderConversionRuleLocalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionRuleLocalArrayInput)(nil)).Elem(), ProviderConversionRuleLocalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionRuleRemoteInput)(nil)).Elem(), ProviderConversionRuleRemoteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderConversionRuleRemoteArrayInput)(nil)).Elem(), ProviderConversionRuleRemoteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupUserInput)(nil)).Elem(), GetGroupUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupUserArrayInput)(nil)).Elem(), GetGroupUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectInput)(nil)).Elem(), GetProjectsProjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetProjectsProjectArrayInput)(nil)).Elem(), GetProjectsProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(AclIpCidrOutput{})
	pulumi.RegisterOutputType(AclIpCidrArrayOutput{})
	pulumi.RegisterOutputType(AclIpRangeOutput{})
	pulumi.RegisterOutputType(AclIpRangeArrayOutput{})
	pulumi.RegisterOutputType(AgencyProjectRoleOutput{})
	pulumi.RegisterOutputType(AgencyProjectRoleArrayOutput{})
	pulumi.RegisterOutputType(ProviderAccessConfigOutput{})
	pulumi.RegisterOutputType(ProviderAccessConfigPtrOutput{})
	pulumi.RegisterOutputType(ProviderConversionConversionRuleOutput{})
	pulumi.RegisterOutputType(ProviderConversionConversionRuleArrayOutput{})
	pulumi.RegisterOutputType(ProviderConversionConversionRuleLocalOutput{})
	pulumi.RegisterOutputType(ProviderConversionConversionRuleLocalArrayOutput{})
	pulumi.RegisterOutputType(ProviderConversionConversionRuleRemoteOutput{})
	pulumi.RegisterOutputType(ProviderConversionConversionRuleRemoteArrayOutput{})
	pulumi.RegisterOutputType(ProviderConversionRuleOutput{})
	pulumi.RegisterOutputType(ProviderConversionRuleArrayOutput{})
	pulumi.RegisterOutputType(ProviderConversionRuleLocalOutput{})
	pulumi.RegisterOutputType(ProviderConversionRuleLocalArrayOutput{})
	pulumi.RegisterOutputType(ProviderConversionRuleRemoteOutput{})
	pulumi.RegisterOutputType(ProviderConversionRuleRemoteArrayOutput{})
	pulumi.RegisterOutputType(GetGroupUserOutput{})
	pulumi.RegisterOutputType(GetGroupUserArrayOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectOutput{})
	pulumi.RegisterOutputType(GetProjectsProjectArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}

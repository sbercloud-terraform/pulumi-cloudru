// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type LtsLog struct {
	pulumi.CustomResourceState

	// The ID of the firewall.
	FwInstanceId pulumi.StringOutput `pulumi:"fwInstanceId"`
	// LTS access log stream switch.
	LtsAccessLogStreamEnable pulumi.IntOutput `pulumi:"ltsAccessLogStreamEnable"`
	// LTS access log stream ID.
	LtsAccessLogStreamId pulumi.StringPtrOutput `pulumi:"ltsAccessLogStreamId"`
	// LTS attack log stream switch.
	LtsAttackLogStreamEnable pulumi.IntOutput `pulumi:"ltsAttackLogStreamEnable"`
	// LTS attack log stream ID.
	LtsAttackLogStreamId pulumi.StringPtrOutput `pulumi:"ltsAttackLogStreamId"`
	// LTS flow log stream switch.
	LtsFlowLogStreamEnable pulumi.IntOutput `pulumi:"ltsFlowLogStreamEnable"`
	// LTS flow log stream ID.
	LtsFlowLogStreamId pulumi.StringPtrOutput `pulumi:"ltsFlowLogStreamId"`
	// LTS log group ID.
	LtsLogGroupId pulumi.StringOutput `pulumi:"ltsLogGroupId"`
	Region        pulumi.StringOutput `pulumi:"region"`
}

// NewLtsLog registers a new resource with the given unique name, arguments, and options.
func NewLtsLog(ctx *pulumi.Context,
	name string, args *LtsLogArgs, opts ...pulumi.ResourceOption) (*LtsLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FwInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'FwInstanceId'")
	}
	if args.LtsAccessLogStreamEnable == nil {
		return nil, errors.New("invalid value for required argument 'LtsAccessLogStreamEnable'")
	}
	if args.LtsAttackLogStreamEnable == nil {
		return nil, errors.New("invalid value for required argument 'LtsAttackLogStreamEnable'")
	}
	if args.LtsFlowLogStreamEnable == nil {
		return nil, errors.New("invalid value for required argument 'LtsFlowLogStreamEnable'")
	}
	if args.LtsLogGroupId == nil {
		return nil, errors.New("invalid value for required argument 'LtsLogGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LtsLog
	err := ctx.RegisterResource("cloudru:Cfw/ltsLog:LtsLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLtsLog gets an existing LtsLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLtsLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LtsLogState, opts ...pulumi.ResourceOption) (*LtsLog, error) {
	var resource LtsLog
	err := ctx.ReadResource("cloudru:Cfw/ltsLog:LtsLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LtsLog resources.
type ltsLogState struct {
	// The ID of the firewall.
	FwInstanceId *string `pulumi:"fwInstanceId"`
	// LTS access log stream switch.
	LtsAccessLogStreamEnable *int `pulumi:"ltsAccessLogStreamEnable"`
	// LTS access log stream ID.
	LtsAccessLogStreamId *string `pulumi:"ltsAccessLogStreamId"`
	// LTS attack log stream switch.
	LtsAttackLogStreamEnable *int `pulumi:"ltsAttackLogStreamEnable"`
	// LTS attack log stream ID.
	LtsAttackLogStreamId *string `pulumi:"ltsAttackLogStreamId"`
	// LTS flow log stream switch.
	LtsFlowLogStreamEnable *int `pulumi:"ltsFlowLogStreamEnable"`
	// LTS flow log stream ID.
	LtsFlowLogStreamId *string `pulumi:"ltsFlowLogStreamId"`
	// LTS log group ID.
	LtsLogGroupId *string `pulumi:"ltsLogGroupId"`
	Region        *string `pulumi:"region"`
}

type LtsLogState struct {
	// The ID of the firewall.
	FwInstanceId pulumi.StringPtrInput
	// LTS access log stream switch.
	LtsAccessLogStreamEnable pulumi.IntPtrInput
	// LTS access log stream ID.
	LtsAccessLogStreamId pulumi.StringPtrInput
	// LTS attack log stream switch.
	LtsAttackLogStreamEnable pulumi.IntPtrInput
	// LTS attack log stream ID.
	LtsAttackLogStreamId pulumi.StringPtrInput
	// LTS flow log stream switch.
	LtsFlowLogStreamEnable pulumi.IntPtrInput
	// LTS flow log stream ID.
	LtsFlowLogStreamId pulumi.StringPtrInput
	// LTS log group ID.
	LtsLogGroupId pulumi.StringPtrInput
	Region        pulumi.StringPtrInput
}

func (LtsLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*ltsLogState)(nil)).Elem()
}

type ltsLogArgs struct {
	// The ID of the firewall.
	FwInstanceId string `pulumi:"fwInstanceId"`
	// LTS access log stream switch.
	LtsAccessLogStreamEnable int `pulumi:"ltsAccessLogStreamEnable"`
	// LTS access log stream ID.
	LtsAccessLogStreamId *string `pulumi:"ltsAccessLogStreamId"`
	// LTS attack log stream switch.
	LtsAttackLogStreamEnable int `pulumi:"ltsAttackLogStreamEnable"`
	// LTS attack log stream ID.
	LtsAttackLogStreamId *string `pulumi:"ltsAttackLogStreamId"`
	// LTS flow log stream switch.
	LtsFlowLogStreamEnable int `pulumi:"ltsFlowLogStreamEnable"`
	// LTS flow log stream ID.
	LtsFlowLogStreamId *string `pulumi:"ltsFlowLogStreamId"`
	// LTS log group ID.
	LtsLogGroupId string  `pulumi:"ltsLogGroupId"`
	Region        *string `pulumi:"region"`
}

// The set of arguments for constructing a LtsLog resource.
type LtsLogArgs struct {
	// The ID of the firewall.
	FwInstanceId pulumi.StringInput
	// LTS access log stream switch.
	LtsAccessLogStreamEnable pulumi.IntInput
	// LTS access log stream ID.
	LtsAccessLogStreamId pulumi.StringPtrInput
	// LTS attack log stream switch.
	LtsAttackLogStreamEnable pulumi.IntInput
	// LTS attack log stream ID.
	LtsAttackLogStreamId pulumi.StringPtrInput
	// LTS flow log stream switch.
	LtsFlowLogStreamEnable pulumi.IntInput
	// LTS flow log stream ID.
	LtsFlowLogStreamId pulumi.StringPtrInput
	// LTS log group ID.
	LtsLogGroupId pulumi.StringInput
	Region        pulumi.StringPtrInput
}

func (LtsLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ltsLogArgs)(nil)).Elem()
}

type LtsLogInput interface {
	pulumi.Input

	ToLtsLogOutput() LtsLogOutput
	ToLtsLogOutputWithContext(ctx context.Context) LtsLogOutput
}

func (*LtsLog) ElementType() reflect.Type {
	return reflect.TypeOf((**LtsLog)(nil)).Elem()
}

func (i *LtsLog) ToLtsLogOutput() LtsLogOutput {
	return i.ToLtsLogOutputWithContext(context.Background())
}

func (i *LtsLog) ToLtsLogOutputWithContext(ctx context.Context) LtsLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsLogOutput)
}

// LtsLogArrayInput is an input type that accepts LtsLogArray and LtsLogArrayOutput values.
// You can construct a concrete instance of `LtsLogArrayInput` via:
//
//	LtsLogArray{ LtsLogArgs{...} }
type LtsLogArrayInput interface {
	pulumi.Input

	ToLtsLogArrayOutput() LtsLogArrayOutput
	ToLtsLogArrayOutputWithContext(context.Context) LtsLogArrayOutput
}

type LtsLogArray []LtsLogInput

func (LtsLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LtsLog)(nil)).Elem()
}

func (i LtsLogArray) ToLtsLogArrayOutput() LtsLogArrayOutput {
	return i.ToLtsLogArrayOutputWithContext(context.Background())
}

func (i LtsLogArray) ToLtsLogArrayOutputWithContext(ctx context.Context) LtsLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsLogArrayOutput)
}

// LtsLogMapInput is an input type that accepts LtsLogMap and LtsLogMapOutput values.
// You can construct a concrete instance of `LtsLogMapInput` via:
//
//	LtsLogMap{ "key": LtsLogArgs{...} }
type LtsLogMapInput interface {
	pulumi.Input

	ToLtsLogMapOutput() LtsLogMapOutput
	ToLtsLogMapOutputWithContext(context.Context) LtsLogMapOutput
}

type LtsLogMap map[string]LtsLogInput

func (LtsLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LtsLog)(nil)).Elem()
}

func (i LtsLogMap) ToLtsLogMapOutput() LtsLogMapOutput {
	return i.ToLtsLogMapOutputWithContext(context.Background())
}

func (i LtsLogMap) ToLtsLogMapOutputWithContext(ctx context.Context) LtsLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LtsLogMapOutput)
}

type LtsLogOutput struct{ *pulumi.OutputState }

func (LtsLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LtsLog)(nil)).Elem()
}

func (o LtsLogOutput) ToLtsLogOutput() LtsLogOutput {
	return o
}

func (o LtsLogOutput) ToLtsLogOutputWithContext(ctx context.Context) LtsLogOutput {
	return o
}

// The ID of the firewall.
func (o LtsLogOutput) FwInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.FwInstanceId }).(pulumi.StringOutput)
}

// LTS access log stream switch.
func (o LtsLogOutput) LtsAccessLogStreamEnable() pulumi.IntOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.IntOutput { return v.LtsAccessLogStreamEnable }).(pulumi.IntOutput)
}

// LTS access log stream ID.
func (o LtsLogOutput) LtsAccessLogStreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringPtrOutput { return v.LtsAccessLogStreamId }).(pulumi.StringPtrOutput)
}

// LTS attack log stream switch.
func (o LtsLogOutput) LtsAttackLogStreamEnable() pulumi.IntOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.IntOutput { return v.LtsAttackLogStreamEnable }).(pulumi.IntOutput)
}

// LTS attack log stream ID.
func (o LtsLogOutput) LtsAttackLogStreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringPtrOutput { return v.LtsAttackLogStreamId }).(pulumi.StringPtrOutput)
}

// LTS flow log stream switch.
func (o LtsLogOutput) LtsFlowLogStreamEnable() pulumi.IntOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.IntOutput { return v.LtsFlowLogStreamEnable }).(pulumi.IntOutput)
}

// LTS flow log stream ID.
func (o LtsLogOutput) LtsFlowLogStreamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringPtrOutput { return v.LtsFlowLogStreamId }).(pulumi.StringPtrOutput)
}

// LTS log group ID.
func (o LtsLogOutput) LtsLogGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.LtsLogGroupId }).(pulumi.StringOutput)
}

func (o LtsLogOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LtsLog) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type LtsLogArrayOutput struct{ *pulumi.OutputState }

func (LtsLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LtsLog)(nil)).Elem()
}

func (o LtsLogArrayOutput) ToLtsLogArrayOutput() LtsLogArrayOutput {
	return o
}

func (o LtsLogArrayOutput) ToLtsLogArrayOutputWithContext(ctx context.Context) LtsLogArrayOutput {
	return o
}

func (o LtsLogArrayOutput) Index(i pulumi.IntInput) LtsLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LtsLog {
		return vs[0].([]*LtsLog)[vs[1].(int)]
	}).(LtsLogOutput)
}

type LtsLogMapOutput struct{ *pulumi.OutputState }

func (LtsLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LtsLog)(nil)).Elem()
}

func (o LtsLogMapOutput) ToLtsLogMapOutput() LtsLogMapOutput {
	return o
}

func (o LtsLogMapOutput) ToLtsLogMapOutputWithContext(ctx context.Context) LtsLogMapOutput {
	return o
}

func (o LtsLogMapOutput) MapIndex(k pulumi.StringInput) LtsLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LtsLog {
		return vs[0].(map[string]*LtsLog)[vs[1].(string)]
	}).(LtsLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LtsLogInput)(nil)).Elem(), &LtsLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*LtsLogArrayInput)(nil)).Elem(), LtsLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LtsLogMapInput)(nil)).Elem(), LtsLogMap{})
	pulumi.RegisterOutputType(LtsLogOutput{})
	pulumi.RegisterOutputType(LtsLogArrayOutput{})
	pulumi.RegisterOutputType(LtsLogMapOutput{})
}

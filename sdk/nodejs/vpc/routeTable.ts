// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a VPC custom route table resource within SberCloud.
 *
 * > **NOTE:** To use a custom route table, you need to submit a service ticket to increase quota.
 *
 * ## Example Usage
 *
 * ### Basic Custom Route Table
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const vpcId = config.requireObject<any>("vpcId");
 * const vpcPeeringId = config.requireObject<any>("vpcPeeringId");
 * const demo = new sbercloud.vpc.RouteTable("demo", {
 *     name: "demo",
 *     vpcId: vpcId,
 *     description: "a custom route table demo",
 *     routes: [{
 *         destination: "172.16.0.0/16",
 *         type: "peering",
 *         nexthop: vpcPeeringId,
 *     }],
 * });
 * ```
 *
 * ### Associating Subnets with a Route Table
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const vpcId = config.requireObject<any>("vpcId");
 * const vpcPeeringId = config.requireObject<any>("vpcPeeringId");
 * const subnetIds = sbercloud.Vpc.getSubnetIds({
 *     vpcId: vpcId,
 * });
 * const demo = new sbercloud.vpc.RouteTable("demo", {
 *     name: "demo",
 *     vpcId: vpcId,
 *     subnets: subnetIds.then(subnetIds => subnetIds.ids),
 *     routes: [
 *         {
 *             destination: "172.16.0.0/16",
 *             type: "peering",
 *             nexthop: vpcPeeringId,
 *         },
 *         {
 *             destination: "192.168.100.0/24",
 *             type: "vip",
 *             nexthop: "192.168.10.200",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * vpc route tables can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Vpc/routeTable:RouteTable demo e1b3208a-544b-42a7-84e6-5d70371dd982
 * ```
 */
export class RouteTable extends pulumi.CustomResource {
    /**
     * Get an existing RouteTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteTableState, opts?: pulumi.CustomResourceOptions): RouteTable {
        return new RouteTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Vpc/routeTable:RouteTable';

    /**
     * Returns true if the given object is an instance of RouteTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteTable.__pulumiType;
    }

    /**
     * Specifies the supplementary information about the route.
     * The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the route table name. The value is a string of no more than
     * 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The region in which to create the vpc route table.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the route object list. The route object
     * is documented below.
     *
     * <a name="routeObject"></a>
     * The `route` block supports:
     */
    declare public readonly routes: pulumi.Output<outputs.Vpc.RouteTableRoute[]>;
    /**
     * Specifies an array of one or more subnets associating with the route table.
     *
     * > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
     * The default route table determines the inbound traffic.
     */
    declare public readonly subnets: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the VPC ID for which a route table is to be added.
     * Changing this creates a new resource.
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a RouteTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteTableArgs | RouteTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteTableState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["routes"] = state?.routes;
            resourceInputs["subnets"] = state?.subnets;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as RouteTableArgs | undefined;
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["routes"] = args?.routes;
            resourceInputs["subnets"] = args?.subnets;
            resourceInputs["vpcId"] = args?.vpcId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteTable resources.
 */
export interface RouteTableState {
    /**
     * Specifies the supplementary information about the route.
     * The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the route table name. The value is a string of no more than
     * 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to create the vpc route table.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the route object list. The route object
     * is documented below.
     *
     * <a name="routeObject"></a>
     * The `route` block supports:
     */
    routes?: pulumi.Input<pulumi.Input<inputs.Vpc.RouteTableRoute>[]>;
    /**
     * Specifies an array of one or more subnets associating with the route table.
     *
     * > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
     * The default route table determines the inbound traffic.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the VPC ID for which a route table is to be added.
     * Changing this creates a new resource.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteTable resource.
 */
export interface RouteTableArgs {
    /**
     * Specifies the supplementary information about the route.
     * The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the route table name. The value is a string of no more than
     * 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to create the vpc route table.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the route object list. The route object
     * is documented below.
     *
     * <a name="routeObject"></a>
     * The `route` block supports:
     */
    routes?: pulumi.Input<pulumi.Input<inputs.Vpc.RouteTableRoute>[]>;
    /**
     * Specifies an array of one or more subnets associating with the route table.
     *
     * > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
     * The default route table determines the inbound traffic.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the VPC ID for which a route table is to be added.
     * Changing this creates a new resource.
     */
    vpcId: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a DCS backup resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const dcsInstanceId = config.requireObject<any>("dcsInstanceId");
 * const test = new sbercloud.DcsBackup("test", {instanceId: dcsInstanceId});
 * ```
 *
 * ## Import
 *
 * The DCS backup can be imported using the DCS instance ID and backup ID separated by a slash, e.g.:
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:index/dcsBackup:DcsBackup test <instance_id>/<backup_id>
 * ```
 */
export class DcsBackup extends pulumi.CustomResource {
    /**
     * Get an existing DcsBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DcsBackupState, opts?: pulumi.CustomResourceOptions): DcsBackup {
        return new DcsBackup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dcsBackup:DcsBackup';

    /**
     * Returns true if the given object is an instance of DcsBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DcsBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DcsBackup.__pulumiType;
    }

    /**
     * Specifies the format of the DCS instance backup.
     * Value options: **aof**, **rdb**. Default to rdb.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly backupFormat!: pulumi.Output<string>;
    /**
     * Indicates the ID of the DCS instance backup.
     */
    public /*out*/ readonly backupId!: pulumi.Output<string>;
    /**
     * Indicates the time when the backup task is created. The format is yyyy-mm-dd hh:mm:ss.
     * The value is in UTC format.
     */
    public /*out*/ readonly beginTime!: pulumi.Output<string>;
    /**
     * Specifies the description of DCS instance backup.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indicates the time at which DCS instance backup is completed. The format is yyyy-mm-dd hh:mm:ss.
     * The value is in UTC format.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    /**
     * Specifies the ID of the DCS instance.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Indicates whether restoration is supported. Value Options: **TRUE**, **FALSE**.
     */
    public /*out*/ readonly isSupportRestore!: pulumi.Output<string>;
    /**
     * Indicates the backup name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Indicates the size of the backup file (byte).
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * Indicates the backup status. Valid value:
     * + **waiting**: The task is waiting to begin.
     * + **backuping**: DCS instance backup is in progress.
     * + **succeed**: DCS instance backup succeeded.
     * + **failed**: DCS instance backup failed.
     * + **expired**: The backup file has expired.
     * + **deleted**: The backup file has been deleted manually.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Indicates the backup type. Valid value:
     * + **manual**: indicates manual backup.
     * + **auto**: indicates automatic backup.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DcsBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DcsBackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DcsBackupArgs | DcsBackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DcsBackupState | undefined;
            resourceInputs["backupFormat"] = state ? state.backupFormat : undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["beginTime"] = state ? state.beginTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["isSupportRestore"] = state ? state.isSupportRestore : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as DcsBackupArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["backupFormat"] = args ? args.backupFormat : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["backupId"] = undefined /*out*/;
            resourceInputs["beginTime"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["isSupportRestore"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DcsBackup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DcsBackup resources.
 */
export interface DcsBackupState {
    /**
     * Specifies the format of the DCS instance backup.
     * Value options: **aof**, **rdb**. Default to rdb.
     *
     * Changing this parameter will create a new resource.
     */
    backupFormat?: pulumi.Input<string>;
    /**
     * Indicates the ID of the DCS instance backup.
     */
    backupId?: pulumi.Input<string>;
    /**
     * Indicates the time when the backup task is created. The format is yyyy-mm-dd hh:mm:ss.
     * The value is in UTC format.
     */
    beginTime?: pulumi.Input<string>;
    /**
     * Specifies the description of DCS instance backup.
     *
     * Changing this parameter will create a new resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates the time at which DCS instance backup is completed. The format is yyyy-mm-dd hh:mm:ss.
     * The value is in UTC format.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Specifies the ID of the DCS instance.
     *
     * Changing this parameter will create a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Indicates whether restoration is supported. Value Options: **TRUE**, **FALSE**.
     */
    isSupportRestore?: pulumi.Input<string>;
    /**
     * Indicates the backup name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Indicates the size of the backup file (byte).
     */
    size?: pulumi.Input<number>;
    /**
     * Indicates the backup status. Valid value:
     * + **waiting**: The task is waiting to begin.
     * + **backuping**: DCS instance backup is in progress.
     * + **succeed**: DCS instance backup succeeded.
     * + **failed**: DCS instance backup failed.
     * + **expired**: The backup file has expired.
     * + **deleted**: The backup file has been deleted manually.
     */
    status?: pulumi.Input<string>;
    /**
     * Indicates the backup type. Valid value:
     * + **manual**: indicates manual backup.
     * + **auto**: indicates automatic backup.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DcsBackup resource.
 */
export interface DcsBackupArgs {
    /**
     * Specifies the format of the DCS instance backup.
     * Value options: **aof**, **rdb**. Default to rdb.
     *
     * Changing this parameter will create a new resource.
     */
    backupFormat?: pulumi.Input<string>;
    /**
     * Specifies the description of DCS instance backup.
     *
     * Changing this parameter will create a new resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of the DCS instance.
     *
     * Changing this parameter will create a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// > **DEPRECATED:**  This resource  has been deprecated.
//
// Manages a keypair resource within SberCloud.
//
// ## Example Usage
//
// ### Create a new keypair and export private key to current folder
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewKeypair(ctx, "test-keypair", &ecs.KeypairArgs{
//				Name:    pulumi.String("my-keypair"),
//				KeyFile: pulumi.String("private_key.pem"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Import an exist keypair
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewKeypair(ctx, "test-keypair", &ecs.KeypairArgs{
//				Name:      pulumi.String("my-keypair"),
//				PublicKey: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAlJq5Pu+eizhou7nFFDxXofr2ySF8k/yuA9OnJdVF9Fbf85Z59CWNZBvcAT... root@terra-dev"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Keypairs can be imported using the `name`, e.g.
//
// ```sh
// $ pulumi import sbercloud:Ecs/keypair:Keypair my-keypair test-keypair
// ```
type Keypair struct {
	pulumi.CustomResourceState

	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// By default, the private key file will be created in the same folder as the current script file.
	// If you need to create it in another folder, please specify the path for `keyFile`.
	// Changing this creates a new keypair.
	//
	// ~>**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile pulumi.StringOutput `pulumi:"keyFile"`
	// Specifies a unique name for the keypair. Changing this creates a new keypair.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted public key. Changing this creates
	// a new keypair.
	// This parameter and `keyFile` are alternative.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this creates a new keypair.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewKeypair registers a new resource with the given unique name, arguments, and options.
func NewKeypair(ctx *pulumi.Context,
	name string, args *KeypairArgs, opts ...pulumi.ResourceOption) (*Keypair, error) {
	if args == nil {
		args = &KeypairArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Keypair
	err := ctx.RegisterResource("sbercloud:Ecs/keypair:Keypair", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeypair gets an existing Keypair resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeypair(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeypairState, opts ...pulumi.ResourceOption) (*Keypair, error) {
	var resource Keypair
	err := ctx.ReadResource("sbercloud:Ecs/keypair:Keypair", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keypair resources.
type keypairState struct {
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// By default, the private key file will be created in the same folder as the current script file.
	// If you need to create it in another folder, please specify the path for `keyFile`.
	// Changing this creates a new keypair.
	//
	// ~>**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile *string `pulumi:"keyFile"`
	// Specifies a unique name for the keypair. Changing this creates a new keypair.
	Name *string `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted public key. Changing this creates
	// a new keypair.
	// This parameter and `keyFile` are alternative.
	PublicKey *string `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this creates a new keypair.
	Region *string `pulumi:"region"`
}

type KeypairState struct {
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// By default, the private key file will be created in the same folder as the current script file.
	// If you need to create it in another folder, please specify the path for `keyFile`.
	// Changing this creates a new keypair.
	//
	// ~>**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile pulumi.StringPtrInput
	// Specifies a unique name for the keypair. Changing this creates a new keypair.
	Name pulumi.StringPtrInput
	// Specifies the imported OpenSSH-formatted public key. Changing this creates
	// a new keypair.
	// This parameter and `keyFile` are alternative.
	PublicKey pulumi.StringPtrInput
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this creates a new keypair.
	Region pulumi.StringPtrInput
}

func (KeypairState) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairState)(nil)).Elem()
}

type keypairArgs struct {
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// By default, the private key file will be created in the same folder as the current script file.
	// If you need to create it in another folder, please specify the path for `keyFile`.
	// Changing this creates a new keypair.
	//
	// ~>**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile *string `pulumi:"keyFile"`
	// Specifies a unique name for the keypair. Changing this creates a new keypair.
	Name *string `pulumi:"name"`
	// Specifies the imported OpenSSH-formatted public key. Changing this creates
	// a new keypair.
	// This parameter and `keyFile` are alternative.
	PublicKey *string `pulumi:"publicKey"`
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this creates a new keypair.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Keypair resource.
type KeypairArgs struct {
	// Specifies the path of the created private key.
	// The private key file (**.pem**) is created only after the resource is created.
	// By default, the private key file will be created in the same folder as the current script file.
	// If you need to create it in another folder, please specify the path for `keyFile`.
	// Changing this creates a new keypair.
	//
	// ~>**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
	KeyFile pulumi.StringPtrInput
	// Specifies a unique name for the keypair. Changing this creates a new keypair.
	Name pulumi.StringPtrInput
	// Specifies the imported OpenSSH-formatted public key. Changing this creates
	// a new keypair.
	// This parameter and `keyFile` are alternative.
	PublicKey pulumi.StringPtrInput
	// Specifies the region in which to create the keypair resource. If omitted, the
	// provider-level region will be used. Changing this creates a new keypair.
	Region pulumi.StringPtrInput
}

func (KeypairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keypairArgs)(nil)).Elem()
}

type KeypairInput interface {
	pulumi.Input

	ToKeypairOutput() KeypairOutput
	ToKeypairOutputWithContext(ctx context.Context) KeypairOutput
}

func (*Keypair) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil)).Elem()
}

func (i *Keypair) ToKeypairOutput() KeypairOutput {
	return i.ToKeypairOutputWithContext(context.Background())
}

func (i *Keypair) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairOutput)
}

// KeypairArrayInput is an input type that accepts KeypairArray and KeypairArrayOutput values.
// You can construct a concrete instance of `KeypairArrayInput` via:
//
//	KeypairArray{ KeypairArgs{...} }
type KeypairArrayInput interface {
	pulumi.Input

	ToKeypairArrayOutput() KeypairArrayOutput
	ToKeypairArrayOutputWithContext(context.Context) KeypairArrayOutput
}

type KeypairArray []KeypairInput

func (KeypairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (i KeypairArray) ToKeypairArrayOutput() KeypairArrayOutput {
	return i.ToKeypairArrayOutputWithContext(context.Background())
}

func (i KeypairArray) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairArrayOutput)
}

// KeypairMapInput is an input type that accepts KeypairMap and KeypairMapOutput values.
// You can construct a concrete instance of `KeypairMapInput` via:
//
//	KeypairMap{ "key": KeypairArgs{...} }
type KeypairMapInput interface {
	pulumi.Input

	ToKeypairMapOutput() KeypairMapOutput
	ToKeypairMapOutputWithContext(context.Context) KeypairMapOutput
}

type KeypairMap map[string]KeypairInput

func (KeypairMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (i KeypairMap) ToKeypairMapOutput() KeypairMapOutput {
	return i.ToKeypairMapOutputWithContext(context.Background())
}

func (i KeypairMap) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairMapOutput)
}

type KeypairOutput struct{ *pulumi.OutputState }

func (KeypairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keypair)(nil)).Elem()
}

func (o KeypairOutput) ToKeypairOutput() KeypairOutput {
	return o
}

func (o KeypairOutput) ToKeypairOutputWithContext(ctx context.Context) KeypairOutput {
	return o
}

// Specifies the path of the created private key.
// The private key file (**.pem**) is created only after the resource is created.
// By default, the private key file will be created in the same folder as the current script file.
// If you need to create it in another folder, please specify the path for `keyFile`.
// Changing this creates a new keypair.
//
// ~>**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
func (o KeypairOutput) KeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.KeyFile }).(pulumi.StringOutput)
}

// Specifies a unique name for the keypair. Changing this creates a new keypair.
func (o KeypairOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the imported OpenSSH-formatted public key. Changing this creates
// a new keypair.
// This parameter and `keyFile` are alternative.
func (o KeypairOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// Specifies the region in which to create the keypair resource. If omitted, the
// provider-level region will be used. Changing this creates a new keypair.
func (o KeypairOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Keypair) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type KeypairArrayOutput struct{ *pulumi.OutputState }

func (KeypairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keypair)(nil)).Elem()
}

func (o KeypairArrayOutput) ToKeypairArrayOutput() KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) ToKeypairArrayOutputWithContext(ctx context.Context) KeypairArrayOutput {
	return o
}

func (o KeypairArrayOutput) Index(i pulumi.IntInput) KeypairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keypair {
		return vs[0].([]*Keypair)[vs[1].(int)]
	}).(KeypairOutput)
}

type KeypairMapOutput struct{ *pulumi.OutputState }

func (KeypairMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keypair)(nil)).Elem()
}

func (o KeypairMapOutput) ToKeypairMapOutput() KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) ToKeypairMapOutputWithContext(ctx context.Context) KeypairMapOutput {
	return o
}

func (o KeypairMapOutput) MapIndex(k pulumi.StringInput) KeypairOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keypair {
		return vs[0].(map[string]*Keypair)[vs[1].(string)]
	}).(KeypairOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairInput)(nil)).Elem(), &Keypair{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairArrayInput)(nil)).Elem(), KeypairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairMapInput)(nil)).Elem(), KeypairMap{})
	pulumi.RegisterOutputType(KeypairOutput{})
	pulumi.RegisterOutputType(KeypairArrayOutput{})
	pulumi.RegisterOutputType(KeypairMapOutput{})
}

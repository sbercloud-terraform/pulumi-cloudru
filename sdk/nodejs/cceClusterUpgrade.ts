// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CceClusterUpgrade extends pulumi.CustomResource {
    /**
     * Get an existing CceClusterUpgrade resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CceClusterUpgradeState, opts?: pulumi.CustomResourceOptions): CceClusterUpgrade {
        return new CceClusterUpgrade(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cceClusterUpgrade:CceClusterUpgrade';

    /**
     * Returns true if the given object is an instance of CceClusterUpgrade.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CceClusterUpgrade {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CceClusterUpgrade.__pulumiType;
    }

    declare public readonly addons: pulumi.Output<outputs.CceClusterUpgradeAddon[] | undefined>;
    declare public readonly clusterId: pulumi.Output<string>;
    declare public readonly currentVersion: pulumi.Output<string | undefined>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    declare public readonly isPostcheck: pulumi.Output<boolean | undefined>;
    declare public readonly isSnapshot: pulumi.Output<boolean | undefined>;
    declare public readonly nodeOrder: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly nodepoolOrder: pulumi.Output<{[key: string]: number} | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly strategy: pulumi.Output<outputs.CceClusterUpgradeStrategy>;
    declare public readonly targetVersion: pulumi.Output<string>;

    /**
     * Create a CceClusterUpgrade resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CceClusterUpgradeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CceClusterUpgradeArgs | CceClusterUpgradeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CceClusterUpgradeState | undefined;
            resourceInputs["addons"] = state?.addons;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["currentVersion"] = state?.currentVersion;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["isPostcheck"] = state?.isPostcheck;
            resourceInputs["isSnapshot"] = state?.isSnapshot;
            resourceInputs["nodeOrder"] = state?.nodeOrder;
            resourceInputs["nodepoolOrder"] = state?.nodepoolOrder;
            resourceInputs["region"] = state?.region;
            resourceInputs["strategy"] = state?.strategy;
            resourceInputs["targetVersion"] = state?.targetVersion;
        } else {
            const args = argsOrState as CceClusterUpgradeArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.strategy === undefined && !opts.urn) {
                throw new Error("Missing required property 'strategy'");
            }
            if (args?.targetVersion === undefined && !opts.urn) {
                throw new Error("Missing required property 'targetVersion'");
            }
            resourceInputs["addons"] = args?.addons;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["currentVersion"] = args?.currentVersion;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["isPostcheck"] = args?.isPostcheck;
            resourceInputs["isSnapshot"] = args?.isSnapshot;
            resourceInputs["nodeOrder"] = args?.nodeOrder;
            resourceInputs["nodepoolOrder"] = args?.nodepoolOrder;
            resourceInputs["region"] = args?.region;
            resourceInputs["strategy"] = args?.strategy;
            resourceInputs["targetVersion"] = args?.targetVersion;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CceClusterUpgrade.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CceClusterUpgrade resources.
 */
export interface CceClusterUpgradeState {
    addons?: pulumi.Input<pulumi.Input<inputs.CceClusterUpgradeAddon>[]>;
    clusterId?: pulumi.Input<string>;
    currentVersion?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    isPostcheck?: pulumi.Input<boolean>;
    isSnapshot?: pulumi.Input<boolean>;
    nodeOrder?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodepoolOrder?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    region?: pulumi.Input<string>;
    strategy?: pulumi.Input<inputs.CceClusterUpgradeStrategy>;
    targetVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CceClusterUpgrade resource.
 */
export interface CceClusterUpgradeArgs {
    addons?: pulumi.Input<pulumi.Input<inputs.CceClusterUpgradeAddon>[]>;
    clusterId: pulumi.Input<string>;
    currentVersion?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    isPostcheck?: pulumi.Input<boolean>;
    isSnapshot?: pulumi.Input<boolean>;
    nodeOrder?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    nodepoolOrder?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    region?: pulumi.Input<string>;
    strategy: pulumi.Input<inputs.CceClusterUpgradeStrategy>;
    targetVersion: pulumi.Input<string>;
}

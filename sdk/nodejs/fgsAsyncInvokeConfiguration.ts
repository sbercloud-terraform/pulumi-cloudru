// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Using this resource to manage the configuration of the asynchronous invocation within HuaweiCloud.
 *
 * > A function only supports configuring one resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const functionUrn = config.requireObject<any>("functionUrn");
 * const bucketName = config.requireObject<any>("bucketName");
 * const topicUrn = config.requireObject<any>("topicUrn");
 * const test = new sbercloud.FgsAsyncInvokeConfiguration("test", {
 *     functionUrn: functionUrn,
 *     maxAsyncEventAgeInSeconds: 3500,
 *     maxAsyncRetryAttempts: 2,
 *     enableAsyncStatusLog: true,
 *     onSuccess: {
 *         destination: "OBS",
 *         param: JSON.stringify({
 *             bucket: bucketName,
 *             prefix: "/success",
 *             expires: 5,
 *         }),
 *     },
 *     onFailure: {
 *         destination: "SMN",
 *         param: JSON.stringify({
 *             topic_urn: topicUrn,
 *         }),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The configurations can be imported using their related `function_urn`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:index/fgsAsyncInvokeConfiguration:FgsAsyncInvokeConfiguration test <function_urn>
 * ```
 */
export class FgsAsyncInvokeConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing FgsAsyncInvokeConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FgsAsyncInvokeConfigurationState, opts?: pulumi.CustomResourceOptions): FgsAsyncInvokeConfiguration {
        return new FgsAsyncInvokeConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/fgsAsyncInvokeConfiguration:FgsAsyncInvokeConfiguration';

    /**
     * Returns true if the given object is an instance of FgsAsyncInvokeConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FgsAsyncInvokeConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FgsAsyncInvokeConfiguration.__pulumiType;
    }

    /**
     * The creation time of the asynchronous invocation, in RFC3339 format.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specifies whether to enable asynchronous invocation status persistence.
     *
     * <a name="functiongraphDestinationConfig"></a>
     * The `onSuccess` and the `onFailure` blocks support:
     */
    declare public readonly enableAsyncStatusLog: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the function URN to which the asynchronous invocation belongs.
     * Changing this will create a new resource.
     */
    declare public readonly functionUrn: pulumi.Output<string>;
    /**
     * Specifies the maximum validity period of a message.  
     * The valid value is range from `1` to `86,400`.
     */
    declare public readonly maxAsyncEventAgeInSeconds: pulumi.Output<number>;
    /**
     * Specifies the maximum number of retry attempts to be made if
     * asynchronous invocation fails.
     * The valid value is range from `0` to `3`.
     */
    declare public readonly maxAsyncRetryAttempts: pulumi.Output<number>;
    /**
     * Specifies the target to be invoked when a function fails to be executed due to a
     * system error or an internal error.
     * The object structure is documented below.
     */
    declare public readonly onFailure: pulumi.Output<outputs.FgsAsyncInvokeConfigurationOnFailure | undefined>;
    /**
     * Specifies the target to be invoked when a function is successfully executed.  
     * The object structure is documented below.
     */
    declare public readonly onSuccess: pulumi.Output<outputs.FgsAsyncInvokeConfigurationOnSuccess | undefined>;
    /**
     * Specifies the region in which to configure the asynchronous invocation.  
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The latest update time of the asynchronous invocation, in RFC3339 format.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a FgsAsyncInvokeConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FgsAsyncInvokeConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FgsAsyncInvokeConfigurationArgs | FgsAsyncInvokeConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FgsAsyncInvokeConfigurationState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enableAsyncStatusLog"] = state?.enableAsyncStatusLog;
            resourceInputs["functionUrn"] = state?.functionUrn;
            resourceInputs["maxAsyncEventAgeInSeconds"] = state?.maxAsyncEventAgeInSeconds;
            resourceInputs["maxAsyncRetryAttempts"] = state?.maxAsyncRetryAttempts;
            resourceInputs["onFailure"] = state?.onFailure;
            resourceInputs["onSuccess"] = state?.onSuccess;
            resourceInputs["region"] = state?.region;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as FgsAsyncInvokeConfigurationArgs | undefined;
            if (args?.functionUrn === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionUrn'");
            }
            if (args?.maxAsyncEventAgeInSeconds === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxAsyncEventAgeInSeconds'");
            }
            if (args?.maxAsyncRetryAttempts === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxAsyncRetryAttempts'");
            }
            resourceInputs["enableAsyncStatusLog"] = args?.enableAsyncStatusLog;
            resourceInputs["functionUrn"] = args?.functionUrn;
            resourceInputs["maxAsyncEventAgeInSeconds"] = args?.maxAsyncEventAgeInSeconds;
            resourceInputs["maxAsyncRetryAttempts"] = args?.maxAsyncRetryAttempts;
            resourceInputs["onFailure"] = args?.onFailure;
            resourceInputs["onSuccess"] = args?.onSuccess;
            resourceInputs["region"] = args?.region;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FgsAsyncInvokeConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FgsAsyncInvokeConfiguration resources.
 */
export interface FgsAsyncInvokeConfigurationState {
    /**
     * The creation time of the asynchronous invocation, in RFC3339 format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies whether to enable asynchronous invocation status persistence.
     *
     * <a name="functiongraphDestinationConfig"></a>
     * The `onSuccess` and the `onFailure` blocks support:
     */
    enableAsyncStatusLog?: pulumi.Input<boolean>;
    /**
     * Specifies the function URN to which the asynchronous invocation belongs.
     * Changing this will create a new resource.
     */
    functionUrn?: pulumi.Input<string>;
    /**
     * Specifies the maximum validity period of a message.  
     * The valid value is range from `1` to `86,400`.
     */
    maxAsyncEventAgeInSeconds?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of retry attempts to be made if
     * asynchronous invocation fails.
     * The valid value is range from `0` to `3`.
     */
    maxAsyncRetryAttempts?: pulumi.Input<number>;
    /**
     * Specifies the target to be invoked when a function fails to be executed due to a
     * system error or an internal error.
     * The object structure is documented below.
     */
    onFailure?: pulumi.Input<inputs.FgsAsyncInvokeConfigurationOnFailure>;
    /**
     * Specifies the target to be invoked when a function is successfully executed.  
     * The object structure is documented below.
     */
    onSuccess?: pulumi.Input<inputs.FgsAsyncInvokeConfigurationOnSuccess>;
    /**
     * Specifies the region in which to configure the asynchronous invocation.  
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The latest update time of the asynchronous invocation, in RFC3339 format.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FgsAsyncInvokeConfiguration resource.
 */
export interface FgsAsyncInvokeConfigurationArgs {
    /**
     * Specifies whether to enable asynchronous invocation status persistence.
     *
     * <a name="functiongraphDestinationConfig"></a>
     * The `onSuccess` and the `onFailure` blocks support:
     */
    enableAsyncStatusLog?: pulumi.Input<boolean>;
    /**
     * Specifies the function URN to which the asynchronous invocation belongs.
     * Changing this will create a new resource.
     */
    functionUrn: pulumi.Input<string>;
    /**
     * Specifies the maximum validity period of a message.  
     * The valid value is range from `1` to `86,400`.
     */
    maxAsyncEventAgeInSeconds: pulumi.Input<number>;
    /**
     * Specifies the maximum number of retry attempts to be made if
     * asynchronous invocation fails.
     * The valid value is range from `0` to `3`.
     */
    maxAsyncRetryAttempts: pulumi.Input<number>;
    /**
     * Specifies the target to be invoked when a function fails to be executed due to a
     * system error or an internal error.
     * The object structure is documented below.
     */
    onFailure?: pulumi.Input<inputs.FgsAsyncInvokeConfigurationOnFailure>;
    /**
     * Specifies the target to be invoked when a function is successfully executed.  
     * The object structure is documented below.
     */
    onSuccess?: pulumi.Input<inputs.FgsAsyncInvokeConfigurationOnSuccess>;
    /**
     * Specifies the region in which to configure the asynchronous invocation.  
     * If omitted, the provider-level region will be used. Changing this will create a new resource.
     */
    region?: pulumi.Input<string>;
}

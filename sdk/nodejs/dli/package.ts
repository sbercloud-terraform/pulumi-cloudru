// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages DLI package resource within SberCloud
 *
 * ## Example Usage
 *
 * ### Upload the specified python script as a resource package
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const groupName = config.requireObject<any>("groupName");
 * const accessDomainName = config.requireObject<any>("accessDomainName");
 * const queue = new sbercloud.dli.Package("queue", {
 *     groupName: groupName,
 *     objectPath: `https://${accessDomainName}/dli/packages/object_file.py`,
 *     type: "pyFile",
 * });
 * ```
 */
export class Package extends pulumi.CustomResource {
    /**
     * Get an existing Package resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PackageState, opts?: pulumi.CustomResourceOptions): Package {
        return new Package(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Dli/package:Package';

    /**
     * Returns true if the given object is an instance of Package.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Package {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Package.__pulumiType;
    }

    /**
     * Time when a queue is created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specifies the group name which the package belongs to.
     * Changing this parameter will delete the current package and upload a new package.
     */
    declare public readonly groupName: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to upload resource packages in asynchronous mode.
     * The default value is **false**. Changing this parameter will delete the current package and upload a new package.
     */
    declare public readonly isAsync: pulumi.Output<boolean>;
    /**
     * The package name.
     */
    declare public /*out*/ readonly objectName: pulumi.Output<string>;
    /**
     * Specifies the OBS storage path where the package is located.
     * Changing this parameter will delete the current package and upload a new package.
     */
    declare public readonly objectPath: pulumi.Output<string>;
    /**
     * Specifies the name of the package owner. The owner must be IAM user.
     */
    declare public readonly owner: pulumi.Output<string>;
    /**
     * Specifies the region in which to upload packages.
     * If omitted, the provider-level region will be used.
     * Changing this parameter will delete the current package and upload a new package.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Status of a package group to be uploaded.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the package type.
     * + **jar**: `.jar` or jar related files.
     * + **pyFile**: `.py` or python related files.
     * + **file**: Other user files.
     *
     * Changing this parameter will delete the current package and upload a new package.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The last time when the package configuration update has complated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Package resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PackageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PackageArgs | PackageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PackageState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["groupName"] = state?.groupName;
            resourceInputs["isAsync"] = state?.isAsync;
            resourceInputs["objectName"] = state?.objectName;
            resourceInputs["objectPath"] = state?.objectPath;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as PackageArgs | undefined;
            if (args?.objectPath === undefined && !opts.urn) {
                throw new Error("Missing required property 'objectPath'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["groupName"] = args?.groupName;
            resourceInputs["isAsync"] = args?.isAsync;
            resourceInputs["objectPath"] = args?.objectPath;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["objectName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Package.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Package resources.
 */
export interface PackageState {
    /**
     * Time when a queue is created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the group name which the package belongs to.
     * Changing this parameter will delete the current package and upload a new package.
     */
    groupName?: pulumi.Input<string>;
    /**
     * Specifies whether to upload resource packages in asynchronous mode.
     * The default value is **false**. Changing this parameter will delete the current package and upload a new package.
     */
    isAsync?: pulumi.Input<boolean>;
    /**
     * The package name.
     */
    objectName?: pulumi.Input<string>;
    /**
     * Specifies the OBS storage path where the package is located.
     * Changing this parameter will delete the current package and upload a new package.
     */
    objectPath?: pulumi.Input<string>;
    /**
     * Specifies the name of the package owner. The owner must be IAM user.
     */
    owner?: pulumi.Input<string>;
    /**
     * Specifies the region in which to upload packages.
     * If omitted, the provider-level region will be used.
     * Changing this parameter will delete the current package and upload a new package.
     */
    region?: pulumi.Input<string>;
    /**
     * Status of a package group to be uploaded.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the package type.
     * + **jar**: `.jar` or jar related files.
     * + **pyFile**: `.py` or python related files.
     * + **file**: Other user files.
     *
     * Changing this parameter will delete the current package and upload a new package.
     */
    type?: pulumi.Input<string>;
    /**
     * The last time when the package configuration update has complated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Package resource.
 */
export interface PackageArgs {
    /**
     * Specifies the group name which the package belongs to.
     * Changing this parameter will delete the current package and upload a new package.
     */
    groupName?: pulumi.Input<string>;
    /**
     * Specifies whether to upload resource packages in asynchronous mode.
     * The default value is **false**. Changing this parameter will delete the current package and upload a new package.
     */
    isAsync?: pulumi.Input<boolean>;
    /**
     * Specifies the OBS storage path where the package is located.
     * Changing this parameter will delete the current package and upload a new package.
     */
    objectPath: pulumi.Input<string>;
    /**
     * Specifies the name of the package owner. The owner must be IAM user.
     */
    owner?: pulumi.Input<string>;
    /**
     * Specifies the region in which to upload packages.
     * If omitted, the provider-level region will be used.
     * Changing this parameter will delete the current package and upload a new package.
     */
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the package type.
     * + **jar**: `.jar` or jar related files.
     * + **pyFile**: `.py` or python related files.
     * + **file**: Other user files.
     *
     * Changing this parameter will delete the current package and upload a new package.
     */
    type: pulumi.Input<string>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sharedapig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Api struct {
	pulumi.CustomResourceState

	// The ID of the authorizer to which the API request used.
	AuthorizerId pulumi.StringPtrOutput `pulumi:"authorizerId"`
	// The configurations of the backend parameters.
	BackendParams ApiBackendParamArrayOutput `pulumi:"backendParams"`
	// The description of the API request body, which can be an example request body, media type or parameters.
	BodyDescription pulumi.StringPtrOutput `pulumi:"bodyDescription"`
	// The content type of the request body.
	ContentType pulumi.StringOutput `pulumi:"contentType"`
	// Whether CORS is supported.
	Cors pulumi.BoolPtrOutput `pulumi:"cors"`
	// The API description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The example response for a failure request.
	FailureResponse pulumi.StringPtrOutput `pulumi:"failureResponse"`
	// The FunctionGraph backend details.
	FuncGraph ApiFuncGraphOutput `pulumi:"funcGraph"`
	// The policy backends of the FunctionGraph function.
	FuncGraphPolicies ApiFuncGraphPolicyArrayOutput `pulumi:"funcGraphPolicies"`
	// The ID of the API group to which the API belongs.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The ID of the instance to which the API belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Whether to perform Base64 encoding on the body for interaction with FunctionGraph.
	IsSendFgBodyBase64 pulumi.BoolPtrOutput `pulumi:"isSendFgBodyBase64"`
	// The matching mode of the API.
	Matching pulumi.StringPtrOutput `pulumi:"matching"`
	// The mock backend details.
	Mock ApiMockOutput `pulumi:"mock"`
	// The mock policy backends.
	MockPolicies ApiMockPolicyArrayOutput `pulumi:"mockPolicies"`
	// The API name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region where the API is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The registered time of the API.
	RegisteredAt pulumi.StringOutput `pulumi:"registeredAt"`
	// The request method of the API.
	RequestMethod pulumi.StringOutput `pulumi:"requestMethod"`
	// The configurations of the front-end parameters.
	RequestParams ApiRequestParamArrayOutput `pulumi:"requestParams"`
	// The request address.
	RequestPath pulumi.StringOutput `pulumi:"requestPath"`
	// The request protocol of the API request.
	RequestProtocol pulumi.StringOutput `pulumi:"requestProtocol"`
	// The ID of the custom response that API used.
	ResponseId pulumi.StringPtrOutput `pulumi:"responseId"`
	// The security authentication mode of the API request.
	SecurityAuthentication pulumi.StringPtrOutput `pulumi:"securityAuthentication"`
	// Whether the authentication of the application code is enabled.
	SimpleAuthentication pulumi.BoolOutput `pulumi:"simpleAuthentication"`
	// The example response for a successful request.
	SuccessResponse pulumi.StringPtrOutput `pulumi:"successResponse"`
	// The list of tags configuration.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The API type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The latest update time of the API.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The web backend details.
	Web ApiWebOutput `pulumi:"web"`
	// The web policy backends.
	WebPolicies ApiWebPolicyArrayOutput `pulumi:"webPolicies"`
}

// NewApi registers a new resource with the given unique name, arguments, and options.
func NewApi(ctx *pulumi.Context,
	name string, args *ApiArgs, opts ...pulumi.ResourceOption) (*Api, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RequestMethod == nil {
		return nil, errors.New("invalid value for required argument 'RequestMethod'")
	}
	if args.RequestPath == nil {
		return nil, errors.New("invalid value for required argument 'RequestPath'")
	}
	if args.RequestProtocol == nil {
		return nil, errors.New("invalid value for required argument 'RequestProtocol'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Api
	err := ctx.RegisterResource("cloudru:SharedApig/api:Api", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApi gets an existing Api resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiState, opts ...pulumi.ResourceOption) (*Api, error) {
	var resource Api
	err := ctx.ReadResource("cloudru:SharedApig/api:Api", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Api resources.
type apiState struct {
	// The ID of the authorizer to which the API request used.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The configurations of the backend parameters.
	BackendParams []ApiBackendParam `pulumi:"backendParams"`
	// The description of the API request body, which can be an example request body, media type or parameters.
	BodyDescription *string `pulumi:"bodyDescription"`
	// The content type of the request body.
	ContentType *string `pulumi:"contentType"`
	// Whether CORS is supported.
	Cors *bool `pulumi:"cors"`
	// The API description.
	Description *string `pulumi:"description"`
	// The example response for a failure request.
	FailureResponse *string `pulumi:"failureResponse"`
	// The FunctionGraph backend details.
	FuncGraph *ApiFuncGraph `pulumi:"funcGraph"`
	// The policy backends of the FunctionGraph function.
	FuncGraphPolicies []ApiFuncGraphPolicy `pulumi:"funcGraphPolicies"`
	// The ID of the API group to which the API belongs.
	GroupId *string `pulumi:"groupId"`
	// The ID of the instance to which the API belongs.
	InstanceId *string `pulumi:"instanceId"`
	// Whether to perform Base64 encoding on the body for interaction with FunctionGraph.
	IsSendFgBodyBase64 *bool `pulumi:"isSendFgBodyBase64"`
	// The matching mode of the API.
	Matching *string `pulumi:"matching"`
	// The mock backend details.
	Mock *ApiMock `pulumi:"mock"`
	// The mock policy backends.
	MockPolicies []ApiMockPolicy `pulumi:"mockPolicies"`
	// The API name.
	Name *string `pulumi:"name"`
	// The region where the API is located.
	Region *string `pulumi:"region"`
	// The registered time of the API.
	RegisteredAt *string `pulumi:"registeredAt"`
	// The request method of the API.
	RequestMethod *string `pulumi:"requestMethod"`
	// The configurations of the front-end parameters.
	RequestParams []ApiRequestParam `pulumi:"requestParams"`
	// The request address.
	RequestPath *string `pulumi:"requestPath"`
	// The request protocol of the API request.
	RequestProtocol *string `pulumi:"requestProtocol"`
	// The ID of the custom response that API used.
	ResponseId *string `pulumi:"responseId"`
	// The security authentication mode of the API request.
	SecurityAuthentication *string `pulumi:"securityAuthentication"`
	// Whether the authentication of the application code is enabled.
	SimpleAuthentication *bool `pulumi:"simpleAuthentication"`
	// The example response for a successful request.
	SuccessResponse *string `pulumi:"successResponse"`
	// The list of tags configuration.
	Tags []string `pulumi:"tags"`
	// The API type.
	Type *string `pulumi:"type"`
	// The latest update time of the API.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The web backend details.
	Web *ApiWeb `pulumi:"web"`
	// The web policy backends.
	WebPolicies []ApiWebPolicy `pulumi:"webPolicies"`
}

type ApiState struct {
	// The ID of the authorizer to which the API request used.
	AuthorizerId pulumi.StringPtrInput
	// The configurations of the backend parameters.
	BackendParams ApiBackendParamArrayInput
	// The description of the API request body, which can be an example request body, media type or parameters.
	BodyDescription pulumi.StringPtrInput
	// The content type of the request body.
	ContentType pulumi.StringPtrInput
	// Whether CORS is supported.
	Cors pulumi.BoolPtrInput
	// The API description.
	Description pulumi.StringPtrInput
	// The example response for a failure request.
	FailureResponse pulumi.StringPtrInput
	// The FunctionGraph backend details.
	FuncGraph ApiFuncGraphPtrInput
	// The policy backends of the FunctionGraph function.
	FuncGraphPolicies ApiFuncGraphPolicyArrayInput
	// The ID of the API group to which the API belongs.
	GroupId pulumi.StringPtrInput
	// The ID of the instance to which the API belongs.
	InstanceId pulumi.StringPtrInput
	// Whether to perform Base64 encoding on the body for interaction with FunctionGraph.
	IsSendFgBodyBase64 pulumi.BoolPtrInput
	// The matching mode of the API.
	Matching pulumi.StringPtrInput
	// The mock backend details.
	Mock ApiMockPtrInput
	// The mock policy backends.
	MockPolicies ApiMockPolicyArrayInput
	// The API name.
	Name pulumi.StringPtrInput
	// The region where the API is located.
	Region pulumi.StringPtrInput
	// The registered time of the API.
	RegisteredAt pulumi.StringPtrInput
	// The request method of the API.
	RequestMethod pulumi.StringPtrInput
	// The configurations of the front-end parameters.
	RequestParams ApiRequestParamArrayInput
	// The request address.
	RequestPath pulumi.StringPtrInput
	// The request protocol of the API request.
	RequestProtocol pulumi.StringPtrInput
	// The ID of the custom response that API used.
	ResponseId pulumi.StringPtrInput
	// The security authentication mode of the API request.
	SecurityAuthentication pulumi.StringPtrInput
	// Whether the authentication of the application code is enabled.
	SimpleAuthentication pulumi.BoolPtrInput
	// The example response for a successful request.
	SuccessResponse pulumi.StringPtrInput
	// The list of tags configuration.
	Tags pulumi.StringArrayInput
	// The API type.
	Type pulumi.StringPtrInput
	// The latest update time of the API.
	UpdatedAt pulumi.StringPtrInput
	// The web backend details.
	Web ApiWebPtrInput
	// The web policy backends.
	WebPolicies ApiWebPolicyArrayInput
}

func (ApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiState)(nil)).Elem()
}

type apiArgs struct {
	// The ID of the authorizer to which the API request used.
	AuthorizerId *string `pulumi:"authorizerId"`
	// The configurations of the backend parameters.
	BackendParams []ApiBackendParam `pulumi:"backendParams"`
	// The description of the API request body, which can be an example request body, media type or parameters.
	BodyDescription *string `pulumi:"bodyDescription"`
	// The content type of the request body.
	ContentType *string `pulumi:"contentType"`
	// Whether CORS is supported.
	Cors *bool `pulumi:"cors"`
	// The API description.
	Description *string `pulumi:"description"`
	// The example response for a failure request.
	FailureResponse *string `pulumi:"failureResponse"`
	// The FunctionGraph backend details.
	FuncGraph *ApiFuncGraph `pulumi:"funcGraph"`
	// The policy backends of the FunctionGraph function.
	FuncGraphPolicies []ApiFuncGraphPolicy `pulumi:"funcGraphPolicies"`
	// The ID of the API group to which the API belongs.
	GroupId string `pulumi:"groupId"`
	// The ID of the instance to which the API belongs.
	InstanceId string `pulumi:"instanceId"`
	// Whether to perform Base64 encoding on the body for interaction with FunctionGraph.
	IsSendFgBodyBase64 *bool `pulumi:"isSendFgBodyBase64"`
	// The matching mode of the API.
	Matching *string `pulumi:"matching"`
	// The mock backend details.
	Mock *ApiMock `pulumi:"mock"`
	// The mock policy backends.
	MockPolicies []ApiMockPolicy `pulumi:"mockPolicies"`
	// The API name.
	Name *string `pulumi:"name"`
	// The region where the API is located.
	Region *string `pulumi:"region"`
	// The request method of the API.
	RequestMethod string `pulumi:"requestMethod"`
	// The configurations of the front-end parameters.
	RequestParams []ApiRequestParam `pulumi:"requestParams"`
	// The request address.
	RequestPath string `pulumi:"requestPath"`
	// The request protocol of the API request.
	RequestProtocol string `pulumi:"requestProtocol"`
	// The ID of the custom response that API used.
	ResponseId *string `pulumi:"responseId"`
	// The security authentication mode of the API request.
	SecurityAuthentication *string `pulumi:"securityAuthentication"`
	// Whether the authentication of the application code is enabled.
	SimpleAuthentication *bool `pulumi:"simpleAuthentication"`
	// The example response for a successful request.
	SuccessResponse *string `pulumi:"successResponse"`
	// The list of tags configuration.
	Tags []string `pulumi:"tags"`
	// The API type.
	Type string `pulumi:"type"`
	// The web backend details.
	Web *ApiWeb `pulumi:"web"`
	// The web policy backends.
	WebPolicies []ApiWebPolicy `pulumi:"webPolicies"`
}

// The set of arguments for constructing a Api resource.
type ApiArgs struct {
	// The ID of the authorizer to which the API request used.
	AuthorizerId pulumi.StringPtrInput
	// The configurations of the backend parameters.
	BackendParams ApiBackendParamArrayInput
	// The description of the API request body, which can be an example request body, media type or parameters.
	BodyDescription pulumi.StringPtrInput
	// The content type of the request body.
	ContentType pulumi.StringPtrInput
	// Whether CORS is supported.
	Cors pulumi.BoolPtrInput
	// The API description.
	Description pulumi.StringPtrInput
	// The example response for a failure request.
	FailureResponse pulumi.StringPtrInput
	// The FunctionGraph backend details.
	FuncGraph ApiFuncGraphPtrInput
	// The policy backends of the FunctionGraph function.
	FuncGraphPolicies ApiFuncGraphPolicyArrayInput
	// The ID of the API group to which the API belongs.
	GroupId pulumi.StringInput
	// The ID of the instance to which the API belongs.
	InstanceId pulumi.StringInput
	// Whether to perform Base64 encoding on the body for interaction with FunctionGraph.
	IsSendFgBodyBase64 pulumi.BoolPtrInput
	// The matching mode of the API.
	Matching pulumi.StringPtrInput
	// The mock backend details.
	Mock ApiMockPtrInput
	// The mock policy backends.
	MockPolicies ApiMockPolicyArrayInput
	// The API name.
	Name pulumi.StringPtrInput
	// The region where the API is located.
	Region pulumi.StringPtrInput
	// The request method of the API.
	RequestMethod pulumi.StringInput
	// The configurations of the front-end parameters.
	RequestParams ApiRequestParamArrayInput
	// The request address.
	RequestPath pulumi.StringInput
	// The request protocol of the API request.
	RequestProtocol pulumi.StringInput
	// The ID of the custom response that API used.
	ResponseId pulumi.StringPtrInput
	// The security authentication mode of the API request.
	SecurityAuthentication pulumi.StringPtrInput
	// Whether the authentication of the application code is enabled.
	SimpleAuthentication pulumi.BoolPtrInput
	// The example response for a successful request.
	SuccessResponse pulumi.StringPtrInput
	// The list of tags configuration.
	Tags pulumi.StringArrayInput
	// The API type.
	Type pulumi.StringInput
	// The web backend details.
	Web ApiWebPtrInput
	// The web policy backends.
	WebPolicies ApiWebPolicyArrayInput
}

func (ApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiArgs)(nil)).Elem()
}

type ApiInput interface {
	pulumi.Input

	ToApiOutput() ApiOutput
	ToApiOutputWithContext(ctx context.Context) ApiOutput
}

func (*Api) ElementType() reflect.Type {
	return reflect.TypeOf((**Api)(nil)).Elem()
}

func (i *Api) ToApiOutput() ApiOutput {
	return i.ToApiOutputWithContext(context.Background())
}

func (i *Api) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiOutput)
}

// ApiArrayInput is an input type that accepts ApiArray and ApiArrayOutput values.
// You can construct a concrete instance of `ApiArrayInput` via:
//
//	ApiArray{ ApiArgs{...} }
type ApiArrayInput interface {
	pulumi.Input

	ToApiArrayOutput() ApiArrayOutput
	ToApiArrayOutputWithContext(context.Context) ApiArrayOutput
}

type ApiArray []ApiInput

func (ApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Api)(nil)).Elem()
}

func (i ApiArray) ToApiArrayOutput() ApiArrayOutput {
	return i.ToApiArrayOutputWithContext(context.Background())
}

func (i ApiArray) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiArrayOutput)
}

// ApiMapInput is an input type that accepts ApiMap and ApiMapOutput values.
// You can construct a concrete instance of `ApiMapInput` via:
//
//	ApiMap{ "key": ApiArgs{...} }
type ApiMapInput interface {
	pulumi.Input

	ToApiMapOutput() ApiMapOutput
	ToApiMapOutputWithContext(context.Context) ApiMapOutput
}

type ApiMap map[string]ApiInput

func (ApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Api)(nil)).Elem()
}

func (i ApiMap) ToApiMapOutput() ApiMapOutput {
	return i.ToApiMapOutputWithContext(context.Background())
}

func (i ApiMap) ToApiMapOutputWithContext(ctx context.Context) ApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiMapOutput)
}

type ApiOutput struct{ *pulumi.OutputState }

func (ApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Api)(nil)).Elem()
}

func (o ApiOutput) ToApiOutput() ApiOutput {
	return o
}

func (o ApiOutput) ToApiOutputWithContext(ctx context.Context) ApiOutput {
	return o
}

// The ID of the authorizer to which the API request used.
func (o ApiOutput) AuthorizerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.AuthorizerId }).(pulumi.StringPtrOutput)
}

// The configurations of the backend parameters.
func (o ApiOutput) BackendParams() ApiBackendParamArrayOutput {
	return o.ApplyT(func(v *Api) ApiBackendParamArrayOutput { return v.BackendParams }).(ApiBackendParamArrayOutput)
}

// The description of the API request body, which can be an example request body, media type or parameters.
func (o ApiOutput) BodyDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.BodyDescription }).(pulumi.StringPtrOutput)
}

// The content type of the request body.
func (o ApiOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

// Whether CORS is supported.
func (o ApiOutput) Cors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.BoolPtrOutput { return v.Cors }).(pulumi.BoolPtrOutput)
}

// The API description.
func (o ApiOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The example response for a failure request.
func (o ApiOutput) FailureResponse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.FailureResponse }).(pulumi.StringPtrOutput)
}

// The FunctionGraph backend details.
func (o ApiOutput) FuncGraph() ApiFuncGraphOutput {
	return o.ApplyT(func(v *Api) ApiFuncGraphOutput { return v.FuncGraph }).(ApiFuncGraphOutput)
}

// The policy backends of the FunctionGraph function.
func (o ApiOutput) FuncGraphPolicies() ApiFuncGraphPolicyArrayOutput {
	return o.ApplyT(func(v *Api) ApiFuncGraphPolicyArrayOutput { return v.FuncGraphPolicies }).(ApiFuncGraphPolicyArrayOutput)
}

// The ID of the API group to which the API belongs.
func (o ApiOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The ID of the instance to which the API belongs.
func (o ApiOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Whether to perform Base64 encoding on the body for interaction with FunctionGraph.
func (o ApiOutput) IsSendFgBodyBase64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.BoolPtrOutput { return v.IsSendFgBodyBase64 }).(pulumi.BoolPtrOutput)
}

// The matching mode of the API.
func (o ApiOutput) Matching() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.Matching }).(pulumi.StringPtrOutput)
}

// The mock backend details.
func (o ApiOutput) Mock() ApiMockOutput {
	return o.ApplyT(func(v *Api) ApiMockOutput { return v.Mock }).(ApiMockOutput)
}

// The mock policy backends.
func (o ApiOutput) MockPolicies() ApiMockPolicyArrayOutput {
	return o.ApplyT(func(v *Api) ApiMockPolicyArrayOutput { return v.MockPolicies }).(ApiMockPolicyArrayOutput)
}

// The API name.
func (o ApiOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region where the API is located.
func (o ApiOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The registered time of the API.
func (o ApiOutput) RegisteredAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.RegisteredAt }).(pulumi.StringOutput)
}

// The request method of the API.
func (o ApiOutput) RequestMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.RequestMethod }).(pulumi.StringOutput)
}

// The configurations of the front-end parameters.
func (o ApiOutput) RequestParams() ApiRequestParamArrayOutput {
	return o.ApplyT(func(v *Api) ApiRequestParamArrayOutput { return v.RequestParams }).(ApiRequestParamArrayOutput)
}

// The request address.
func (o ApiOutput) RequestPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.RequestPath }).(pulumi.StringOutput)
}

// The request protocol of the API request.
func (o ApiOutput) RequestProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.RequestProtocol }).(pulumi.StringOutput)
}

// The ID of the custom response that API used.
func (o ApiOutput) ResponseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.ResponseId }).(pulumi.StringPtrOutput)
}

// The security authentication mode of the API request.
func (o ApiOutput) SecurityAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.SecurityAuthentication }).(pulumi.StringPtrOutput)
}

// Whether the authentication of the application code is enabled.
func (o ApiOutput) SimpleAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v *Api) pulumi.BoolOutput { return v.SimpleAuthentication }).(pulumi.BoolOutput)
}

// The example response for a successful request.
func (o ApiOutput) SuccessResponse() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Api) pulumi.StringPtrOutput { return v.SuccessResponse }).(pulumi.StringPtrOutput)
}

// The list of tags configuration.
func (o ApiOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Api) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The API type.
func (o ApiOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The latest update time of the API.
func (o ApiOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Api) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The web backend details.
func (o ApiOutput) Web() ApiWebOutput {
	return o.ApplyT(func(v *Api) ApiWebOutput { return v.Web }).(ApiWebOutput)
}

// The web policy backends.
func (o ApiOutput) WebPolicies() ApiWebPolicyArrayOutput {
	return o.ApplyT(func(v *Api) ApiWebPolicyArrayOutput { return v.WebPolicies }).(ApiWebPolicyArrayOutput)
}

type ApiArrayOutput struct{ *pulumi.OutputState }

func (ApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Api)(nil)).Elem()
}

func (o ApiArrayOutput) ToApiArrayOutput() ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) ToApiArrayOutputWithContext(ctx context.Context) ApiArrayOutput {
	return o
}

func (o ApiArrayOutput) Index(i pulumi.IntInput) ApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Api {
		return vs[0].([]*Api)[vs[1].(int)]
	}).(ApiOutput)
}

type ApiMapOutput struct{ *pulumi.OutputState }

func (ApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Api)(nil)).Elem()
}

func (o ApiMapOutput) ToApiMapOutput() ApiMapOutput {
	return o
}

func (o ApiMapOutput) ToApiMapOutputWithContext(ctx context.Context) ApiMapOutput {
	return o
}

func (o ApiMapOutput) MapIndex(k pulumi.StringInput) ApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Api {
		return vs[0].(map[string]*Api)[vs[1].(string)]
	}).(ApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiInput)(nil)).Elem(), &Api{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiArrayInput)(nil)).Elem(), ApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiMapInput)(nil)).Elem(), ApiMap{})
	pulumi.RegisterOutputType(ApiOutput{})
	pulumi.RegisterOutputType(ApiArrayOutput{})
	pulumi.RegisterOutputType(ApiMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the list of RocketMQ topic consumer groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			topicName := cfg.RequireObject("topicName")
//			_, err := sbercloud.GetDmsRocketmqTopicConsumerGroups(ctx, &cloudru.GetDmsRocketmqTopicConsumerGroupsArgs{
//				InstanceId: instanceId,
//				TopicName:  topicName,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDmsRocketmqTopicConsumerGroups(ctx *pulumi.Context, args *GetDmsRocketmqTopicConsumerGroupsArgs, opts ...pulumi.InvokeOption) (*GetDmsRocketmqTopicConsumerGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDmsRocketmqTopicConsumerGroupsResult
	err := ctx.Invoke("sbercloud:index/getDmsRocketmqTopicConsumerGroups:getDmsRocketmqTopicConsumerGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDmsRocketmqTopicConsumerGroups.
type GetDmsRocketmqTopicConsumerGroupsArgs struct {
	// Specifies the instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the topic name.
	TopicName string `pulumi:"topicName"`
}

// A collection of values returned by getDmsRocketmqTopicConsumerGroups.
type GetDmsRocketmqTopicConsumerGroupsResult struct {
	// Indicates the consumer group list.
	Groups []string `pulumi:"groups"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	Region     string `pulumi:"region"`
	TopicName  string `pulumi:"topicName"`
}

func GetDmsRocketmqTopicConsumerGroupsOutput(ctx *pulumi.Context, args GetDmsRocketmqTopicConsumerGroupsOutputArgs, opts ...pulumi.InvokeOption) GetDmsRocketmqTopicConsumerGroupsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDmsRocketmqTopicConsumerGroupsResultOutput, error) {
			args := v.(GetDmsRocketmqTopicConsumerGroupsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getDmsRocketmqTopicConsumerGroups:getDmsRocketmqTopicConsumerGroups", args, GetDmsRocketmqTopicConsumerGroupsResultOutput{}, options).(GetDmsRocketmqTopicConsumerGroupsResultOutput), nil
		}).(GetDmsRocketmqTopicConsumerGroupsResultOutput)
}

// A collection of arguments for invoking getDmsRocketmqTopicConsumerGroups.
type GetDmsRocketmqTopicConsumerGroupsOutputArgs struct {
	// Specifies the instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the topic name.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetDmsRocketmqTopicConsumerGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsRocketmqTopicConsumerGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getDmsRocketmqTopicConsumerGroups.
type GetDmsRocketmqTopicConsumerGroupsResultOutput struct{ *pulumi.OutputState }

func (GetDmsRocketmqTopicConsumerGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsRocketmqTopicConsumerGroupsResult)(nil)).Elem()
}

func (o GetDmsRocketmqTopicConsumerGroupsResultOutput) ToGetDmsRocketmqTopicConsumerGroupsResultOutput() GetDmsRocketmqTopicConsumerGroupsResultOutput {
	return o
}

func (o GetDmsRocketmqTopicConsumerGroupsResultOutput) ToGetDmsRocketmqTopicConsumerGroupsResultOutputWithContext(ctx context.Context) GetDmsRocketmqTopicConsumerGroupsResultOutput {
	return o
}

// Indicates the consumer group list.
func (o GetDmsRocketmqTopicConsumerGroupsResultOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicConsumerGroupsResult) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDmsRocketmqTopicConsumerGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicConsumerGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqTopicConsumerGroupsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicConsumerGroupsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqTopicConsumerGroupsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicConsumerGroupsResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqTopicConsumerGroupsResultOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicConsumerGroupsResult) string { return v.TopicName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDmsRocketmqTopicConsumerGroupsResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package er

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Using this data source to query the list of available routes within SberCloud.
//
// Before using enterprise router, define custom endpoint as shown below:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/er"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			routeTableId := cfg.RequireObject("routeTableId")
//			_, err := er.GetAvailableRoutes(ctx, &er.GetAvailableRoutesArgs{
//				RouteTableId: routeTableId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAvailableRoutes(ctx *pulumi.Context, args *GetAvailableRoutesArgs, opts ...pulumi.InvokeOption) (*GetAvailableRoutesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAvailableRoutesResult
	err := ctx.Invoke("sbercloud:Er/getAvailableRoutes:getAvailableRoutes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAvailableRoutes.
type GetAvailableRoutesArgs struct {
	// The destination address of the routes to be queried.
	Destination *string `pulumi:"destination"`
	// Specifies the region in which to query the available routes.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// The attachment type.
	// The valid values are as follows:
	// + **vpc**: VPC attachment.
	// + **vpn**: VPN gateway attachment.
	// + **vgw**: virtual gateway attachment.
	// + **peering**: peering connection attachment.
	// + **ecn**: ECN attachment.
	// + **cfw**: CFW instance attachment.
	ResourceType *string `pulumi:"resourceType"`
	// The route table ID to which the available routes belong.
	RouteTableId string `pulumi:"routeTableId"`
}

// A collection of values returned by getAvailableRoutes.
type GetAvailableRoutesResult struct {
	// The destination address of the route.
	Destination *string `pulumi:"destination"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Region string `pulumi:"region"`
	// The attachment type.
	ResourceType *string `pulumi:"resourceType"`
	RouteTableId string  `pulumi:"routeTableId"`
	// All available routes that match the filter parameters.
	Routes []GetAvailableRoutesRoute `pulumi:"routes"`
}

func GetAvailableRoutesOutput(ctx *pulumi.Context, args GetAvailableRoutesOutputArgs, opts ...pulumi.InvokeOption) GetAvailableRoutesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetAvailableRoutesResultOutput, error) {
			args := v.(GetAvailableRoutesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Er/getAvailableRoutes:getAvailableRoutes", args, GetAvailableRoutesResultOutput{}, options).(GetAvailableRoutesResultOutput), nil
		}).(GetAvailableRoutesResultOutput)
}

// A collection of arguments for invoking getAvailableRoutes.
type GetAvailableRoutesOutputArgs struct {
	// The destination address of the routes to be queried.
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// Specifies the region in which to query the available routes.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The attachment type.
	// The valid values are as follows:
	// + **vpc**: VPC attachment.
	// + **vpn**: VPN gateway attachment.
	// + **vgw**: virtual gateway attachment.
	// + **peering**: peering connection attachment.
	// + **ecn**: ECN attachment.
	// + **cfw**: CFW instance attachment.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// The route table ID to which the available routes belong.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
}

func (GetAvailableRoutesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableRoutesArgs)(nil)).Elem()
}

// A collection of values returned by getAvailableRoutes.
type GetAvailableRoutesResultOutput struct{ *pulumi.OutputState }

func (GetAvailableRoutesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableRoutesResult)(nil)).Elem()
}

func (o GetAvailableRoutesResultOutput) ToGetAvailableRoutesResultOutput() GetAvailableRoutesResultOutput {
	return o
}

func (o GetAvailableRoutesResultOutput) ToGetAvailableRoutesResultOutputWithContext(ctx context.Context) GetAvailableRoutesResultOutput {
	return o
}

// The destination address of the route.
func (o GetAvailableRoutesResultOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAvailableRoutesResult) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAvailableRoutesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableRoutesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAvailableRoutesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableRoutesResult) string { return v.Region }).(pulumi.StringOutput)
}

// The attachment type.
func (o GetAvailableRoutesResultOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAvailableRoutesResult) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

func (o GetAvailableRoutesResultOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableRoutesResult) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// All available routes that match the filter parameters.
func (o GetAvailableRoutesResultOutput) Routes() GetAvailableRoutesRouteArrayOutput {
	return o.ApplyT(func(v GetAvailableRoutesResult) []GetAvailableRoutesRoute { return v.Routes }).(GetAvailableRoutesRouteArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAvailableRoutesResultOutput{})
}

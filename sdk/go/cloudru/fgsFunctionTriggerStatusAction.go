// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type FgsFunctionTriggerStatusAction struct {
	pulumi.CustomResourceState

	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// The event data of the trigger.
	EventData pulumi.StringOutput `pulumi:"eventData"`
	// The URN of the function.
	FunctionUrn pulumi.StringOutput `pulumi:"functionUrn"`
	// The region where the function trigger is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The trigger ID.
	TriggerId pulumi.StringOutput `pulumi:"triggerId"`
	// The status of the trigger. Valid values are ACTIVE and DISABLED.
	TriggerStatus pulumi.StringOutput `pulumi:"triggerStatus"`
	// The trigger type code.
	TriggerTypeCode pulumi.StringOutput `pulumi:"triggerTypeCode"`
}

// NewFgsFunctionTriggerStatusAction registers a new resource with the given unique name, arguments, and options.
func NewFgsFunctionTriggerStatusAction(ctx *pulumi.Context,
	name string, args *FgsFunctionTriggerStatusActionArgs, opts ...pulumi.ResourceOption) (*FgsFunctionTriggerStatusAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventData == nil {
		return nil, errors.New("invalid value for required argument 'EventData'")
	}
	if args.FunctionUrn == nil {
		return nil, errors.New("invalid value for required argument 'FunctionUrn'")
	}
	if args.TriggerId == nil {
		return nil, errors.New("invalid value for required argument 'TriggerId'")
	}
	if args.TriggerStatus == nil {
		return nil, errors.New("invalid value for required argument 'TriggerStatus'")
	}
	if args.TriggerTypeCode == nil {
		return nil, errors.New("invalid value for required argument 'TriggerTypeCode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FgsFunctionTriggerStatusAction
	err := ctx.RegisterResource("sbercloud:index/fgsFunctionTriggerStatusAction:FgsFunctionTriggerStatusAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFgsFunctionTriggerStatusAction gets an existing FgsFunctionTriggerStatusAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFgsFunctionTriggerStatusAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FgsFunctionTriggerStatusActionState, opts ...pulumi.ResourceOption) (*FgsFunctionTriggerStatusAction, error) {
	var resource FgsFunctionTriggerStatusAction
	err := ctx.ReadResource("sbercloud:index/fgsFunctionTriggerStatusAction:FgsFunctionTriggerStatusAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FgsFunctionTriggerStatusAction resources.
type fgsFunctionTriggerStatusActionState struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// The event data of the trigger.
	EventData *string `pulumi:"eventData"`
	// The URN of the function.
	FunctionUrn *string `pulumi:"functionUrn"`
	// The region where the function trigger is located.
	Region *string `pulumi:"region"`
	// The trigger ID.
	TriggerId *string `pulumi:"triggerId"`
	// The status of the trigger. Valid values are ACTIVE and DISABLED.
	TriggerStatus *string `pulumi:"triggerStatus"`
	// The trigger type code.
	TriggerTypeCode *string `pulumi:"triggerTypeCode"`
}

type FgsFunctionTriggerStatusActionState struct {
	EnableForceNew pulumi.StringPtrInput
	// The event data of the trigger.
	EventData pulumi.StringPtrInput
	// The URN of the function.
	FunctionUrn pulumi.StringPtrInput
	// The region where the function trigger is located.
	Region pulumi.StringPtrInput
	// The trigger ID.
	TriggerId pulumi.StringPtrInput
	// The status of the trigger. Valid values are ACTIVE and DISABLED.
	TriggerStatus pulumi.StringPtrInput
	// The trigger type code.
	TriggerTypeCode pulumi.StringPtrInput
}

func (FgsFunctionTriggerStatusActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionTriggerStatusActionState)(nil)).Elem()
}

type fgsFunctionTriggerStatusActionArgs struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// The event data of the trigger.
	EventData string `pulumi:"eventData"`
	// The URN of the function.
	FunctionUrn string `pulumi:"functionUrn"`
	// The region where the function trigger is located.
	Region *string `pulumi:"region"`
	// The trigger ID.
	TriggerId string `pulumi:"triggerId"`
	// The status of the trigger. Valid values are ACTIVE and DISABLED.
	TriggerStatus string `pulumi:"triggerStatus"`
	// The trigger type code.
	TriggerTypeCode string `pulumi:"triggerTypeCode"`
}

// The set of arguments for constructing a FgsFunctionTriggerStatusAction resource.
type FgsFunctionTriggerStatusActionArgs struct {
	EnableForceNew pulumi.StringPtrInput
	// The event data of the trigger.
	EventData pulumi.StringInput
	// The URN of the function.
	FunctionUrn pulumi.StringInput
	// The region where the function trigger is located.
	Region pulumi.StringPtrInput
	// The trigger ID.
	TriggerId pulumi.StringInput
	// The status of the trigger. Valid values are ACTIVE and DISABLED.
	TriggerStatus pulumi.StringInput
	// The trigger type code.
	TriggerTypeCode pulumi.StringInput
}

func (FgsFunctionTriggerStatusActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionTriggerStatusActionArgs)(nil)).Elem()
}

type FgsFunctionTriggerStatusActionInput interface {
	pulumi.Input

	ToFgsFunctionTriggerStatusActionOutput() FgsFunctionTriggerStatusActionOutput
	ToFgsFunctionTriggerStatusActionOutputWithContext(ctx context.Context) FgsFunctionTriggerStatusActionOutput
}

func (*FgsFunctionTriggerStatusAction) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunctionTriggerStatusAction)(nil)).Elem()
}

func (i *FgsFunctionTriggerStatusAction) ToFgsFunctionTriggerStatusActionOutput() FgsFunctionTriggerStatusActionOutput {
	return i.ToFgsFunctionTriggerStatusActionOutputWithContext(context.Background())
}

func (i *FgsFunctionTriggerStatusAction) ToFgsFunctionTriggerStatusActionOutputWithContext(ctx context.Context) FgsFunctionTriggerStatusActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionTriggerStatusActionOutput)
}

// FgsFunctionTriggerStatusActionArrayInput is an input type that accepts FgsFunctionTriggerStatusActionArray and FgsFunctionTriggerStatusActionArrayOutput values.
// You can construct a concrete instance of `FgsFunctionTriggerStatusActionArrayInput` via:
//
//	FgsFunctionTriggerStatusActionArray{ FgsFunctionTriggerStatusActionArgs{...} }
type FgsFunctionTriggerStatusActionArrayInput interface {
	pulumi.Input

	ToFgsFunctionTriggerStatusActionArrayOutput() FgsFunctionTriggerStatusActionArrayOutput
	ToFgsFunctionTriggerStatusActionArrayOutputWithContext(context.Context) FgsFunctionTriggerStatusActionArrayOutput
}

type FgsFunctionTriggerStatusActionArray []FgsFunctionTriggerStatusActionInput

func (FgsFunctionTriggerStatusActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunctionTriggerStatusAction)(nil)).Elem()
}

func (i FgsFunctionTriggerStatusActionArray) ToFgsFunctionTriggerStatusActionArrayOutput() FgsFunctionTriggerStatusActionArrayOutput {
	return i.ToFgsFunctionTriggerStatusActionArrayOutputWithContext(context.Background())
}

func (i FgsFunctionTriggerStatusActionArray) ToFgsFunctionTriggerStatusActionArrayOutputWithContext(ctx context.Context) FgsFunctionTriggerStatusActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionTriggerStatusActionArrayOutput)
}

// FgsFunctionTriggerStatusActionMapInput is an input type that accepts FgsFunctionTriggerStatusActionMap and FgsFunctionTriggerStatusActionMapOutput values.
// You can construct a concrete instance of `FgsFunctionTriggerStatusActionMapInput` via:
//
//	FgsFunctionTriggerStatusActionMap{ "key": FgsFunctionTriggerStatusActionArgs{...} }
type FgsFunctionTriggerStatusActionMapInput interface {
	pulumi.Input

	ToFgsFunctionTriggerStatusActionMapOutput() FgsFunctionTriggerStatusActionMapOutput
	ToFgsFunctionTriggerStatusActionMapOutputWithContext(context.Context) FgsFunctionTriggerStatusActionMapOutput
}

type FgsFunctionTriggerStatusActionMap map[string]FgsFunctionTriggerStatusActionInput

func (FgsFunctionTriggerStatusActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunctionTriggerStatusAction)(nil)).Elem()
}

func (i FgsFunctionTriggerStatusActionMap) ToFgsFunctionTriggerStatusActionMapOutput() FgsFunctionTriggerStatusActionMapOutput {
	return i.ToFgsFunctionTriggerStatusActionMapOutputWithContext(context.Background())
}

func (i FgsFunctionTriggerStatusActionMap) ToFgsFunctionTriggerStatusActionMapOutputWithContext(ctx context.Context) FgsFunctionTriggerStatusActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionTriggerStatusActionMapOutput)
}

type FgsFunctionTriggerStatusActionOutput struct{ *pulumi.OutputState }

func (FgsFunctionTriggerStatusActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunctionTriggerStatusAction)(nil)).Elem()
}

func (o FgsFunctionTriggerStatusActionOutput) ToFgsFunctionTriggerStatusActionOutput() FgsFunctionTriggerStatusActionOutput {
	return o
}

func (o FgsFunctionTriggerStatusActionOutput) ToFgsFunctionTriggerStatusActionOutputWithContext(ctx context.Context) FgsFunctionTriggerStatusActionOutput {
	return o
}

func (o FgsFunctionTriggerStatusActionOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsFunctionTriggerStatusAction) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// The event data of the trigger.
func (o FgsFunctionTriggerStatusActionOutput) EventData() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTriggerStatusAction) pulumi.StringOutput { return v.EventData }).(pulumi.StringOutput)
}

// The URN of the function.
func (o FgsFunctionTriggerStatusActionOutput) FunctionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTriggerStatusAction) pulumi.StringOutput { return v.FunctionUrn }).(pulumi.StringOutput)
}

// The region where the function trigger is located.
func (o FgsFunctionTriggerStatusActionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTriggerStatusAction) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The trigger ID.
func (o FgsFunctionTriggerStatusActionOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTriggerStatusAction) pulumi.StringOutput { return v.TriggerId }).(pulumi.StringOutput)
}

// The status of the trigger. Valid values are ACTIVE and DISABLED.
func (o FgsFunctionTriggerStatusActionOutput) TriggerStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTriggerStatusAction) pulumi.StringOutput { return v.TriggerStatus }).(pulumi.StringOutput)
}

// The trigger type code.
func (o FgsFunctionTriggerStatusActionOutput) TriggerTypeCode() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTriggerStatusAction) pulumi.StringOutput { return v.TriggerTypeCode }).(pulumi.StringOutput)
}

type FgsFunctionTriggerStatusActionArrayOutput struct{ *pulumi.OutputState }

func (FgsFunctionTriggerStatusActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunctionTriggerStatusAction)(nil)).Elem()
}

func (o FgsFunctionTriggerStatusActionArrayOutput) ToFgsFunctionTriggerStatusActionArrayOutput() FgsFunctionTriggerStatusActionArrayOutput {
	return o
}

func (o FgsFunctionTriggerStatusActionArrayOutput) ToFgsFunctionTriggerStatusActionArrayOutputWithContext(ctx context.Context) FgsFunctionTriggerStatusActionArrayOutput {
	return o
}

func (o FgsFunctionTriggerStatusActionArrayOutput) Index(i pulumi.IntInput) FgsFunctionTriggerStatusActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FgsFunctionTriggerStatusAction {
		return vs[0].([]*FgsFunctionTriggerStatusAction)[vs[1].(int)]
	}).(FgsFunctionTriggerStatusActionOutput)
}

type FgsFunctionTriggerStatusActionMapOutput struct{ *pulumi.OutputState }

func (FgsFunctionTriggerStatusActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunctionTriggerStatusAction)(nil)).Elem()
}

func (o FgsFunctionTriggerStatusActionMapOutput) ToFgsFunctionTriggerStatusActionMapOutput() FgsFunctionTriggerStatusActionMapOutput {
	return o
}

func (o FgsFunctionTriggerStatusActionMapOutput) ToFgsFunctionTriggerStatusActionMapOutputWithContext(ctx context.Context) FgsFunctionTriggerStatusActionMapOutput {
	return o
}

func (o FgsFunctionTriggerStatusActionMapOutput) MapIndex(k pulumi.StringInput) FgsFunctionTriggerStatusActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FgsFunctionTriggerStatusAction {
		return vs[0].(map[string]*FgsFunctionTriggerStatusAction)[vs[1].(string)]
	}).(FgsFunctionTriggerStatusActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionTriggerStatusActionInput)(nil)).Elem(), &FgsFunctionTriggerStatusAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionTriggerStatusActionArrayInput)(nil)).Elem(), FgsFunctionTriggerStatusActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionTriggerStatusActionMapInput)(nil)).Elem(), FgsFunctionTriggerStatusActionMap{})
	pulumi.RegisterOutputType(FgsFunctionTriggerStatusActionOutput{})
	pulumi.RegisterOutputType(FgsFunctionTriggerStatusActionArrayOutput{})
	pulumi.RegisterOutputType(FgsFunctionTriggerStatusActionMapOutput{})
}

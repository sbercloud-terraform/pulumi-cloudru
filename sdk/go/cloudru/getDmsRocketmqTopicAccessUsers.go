// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the list of RocketMQ topic access users.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			topic := cfg.RequireObject("topic")
//			_, err := sbercloud.GetDmsRocketmqTopicAccessUsers(ctx, &cloudru.GetDmsRocketmqTopicAccessUsersArgs{
//				InstanceId: instanceId,
//				Topic:      topic,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDmsRocketmqTopicAccessUsers(ctx *pulumi.Context, args *GetDmsRocketmqTopicAccessUsersArgs, opts ...pulumi.InvokeOption) (*GetDmsRocketmqTopicAccessUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDmsRocketmqTopicAccessUsersResult
	err := ctx.Invoke("sbercloud:index/getDmsRocketmqTopicAccessUsers:getDmsRocketmqTopicAccessUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDmsRocketmqTopicAccessUsers.
type GetDmsRocketmqTopicAccessUsersArgs struct {
	// Specifies the instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the topic name.
	Topic string `pulumi:"topic"`
}

// A collection of values returned by getDmsRocketmqTopicAccessUsers.
type GetDmsRocketmqTopicAccessUsersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// Indicates the user list.
	Policies []GetDmsRocketmqTopicAccessUsersPolicy `pulumi:"policies"`
	Region   string                                 `pulumi:"region"`
	Topic    string                                 `pulumi:"topic"`
}

func GetDmsRocketmqTopicAccessUsersOutput(ctx *pulumi.Context, args GetDmsRocketmqTopicAccessUsersOutputArgs, opts ...pulumi.InvokeOption) GetDmsRocketmqTopicAccessUsersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDmsRocketmqTopicAccessUsersResultOutput, error) {
			args := v.(GetDmsRocketmqTopicAccessUsersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getDmsRocketmqTopicAccessUsers:getDmsRocketmqTopicAccessUsers", args, GetDmsRocketmqTopicAccessUsersResultOutput{}, options).(GetDmsRocketmqTopicAccessUsersResultOutput), nil
		}).(GetDmsRocketmqTopicAccessUsersResultOutput)
}

// A collection of arguments for invoking getDmsRocketmqTopicAccessUsers.
type GetDmsRocketmqTopicAccessUsersOutputArgs struct {
	// Specifies the instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the topic name.
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (GetDmsRocketmqTopicAccessUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsRocketmqTopicAccessUsersArgs)(nil)).Elem()
}

// A collection of values returned by getDmsRocketmqTopicAccessUsers.
type GetDmsRocketmqTopicAccessUsersResultOutput struct{ *pulumi.OutputState }

func (GetDmsRocketmqTopicAccessUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsRocketmqTopicAccessUsersResult)(nil)).Elem()
}

func (o GetDmsRocketmqTopicAccessUsersResultOutput) ToGetDmsRocketmqTopicAccessUsersResultOutput() GetDmsRocketmqTopicAccessUsersResultOutput {
	return o
}

func (o GetDmsRocketmqTopicAccessUsersResultOutput) ToGetDmsRocketmqTopicAccessUsersResultOutputWithContext(ctx context.Context) GetDmsRocketmqTopicAccessUsersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetDmsRocketmqTopicAccessUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicAccessUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqTopicAccessUsersResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicAccessUsersResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Indicates the user list.
func (o GetDmsRocketmqTopicAccessUsersResultOutput) Policies() GetDmsRocketmqTopicAccessUsersPolicyArrayOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicAccessUsersResult) []GetDmsRocketmqTopicAccessUsersPolicy { return v.Policies }).(GetDmsRocketmqTopicAccessUsersPolicyArrayOutput)
}

func (o GetDmsRocketmqTopicAccessUsersResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicAccessUsersResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqTopicAccessUsersResultOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqTopicAccessUsersResult) string { return v.Topic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDmsRocketmqTopicAccessUsersResultOutput{})
}

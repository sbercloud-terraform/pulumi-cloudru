// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

func LookupNodePool(ctx *pulumi.Context, args *LookupNodePoolArgs, opts ...pulumi.InvokeOption) (*LookupNodePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNodePoolResult
	err := ctx.Invoke("sbercloud:Cce/getNodePool:getNodePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodePool.
type LookupNodePoolArgs struct {
	ClusterId  string  `pulumi:"clusterId"`
	Name       *string `pulumi:"name"`
	NodePoolId *string `pulumi:"nodePoolId"`
	Region     *string `pulumi:"region"`
	Status     *string `pulumi:"status"`
}

// A collection of values returned by getNodePool.
type LookupNodePoolResult struct {
	AvailabilityZone    string                      `pulumi:"availabilityZone"`
	ClusterId           string                      `pulumi:"clusterId"`
	CurrentNodeCount    int                         `pulumi:"currentNodeCount"`
	DataVolumes         []GetNodePoolDataVolume     `pulumi:"dataVolumes"`
	EnterpriseProjectId string                      `pulumi:"enterpriseProjectId"`
	ExtendParam         map[string]string           `pulumi:"extendParam"`
	FlavorId            string                      `pulumi:"flavorId"`
	HostnameConfigs     []GetNodePoolHostnameConfig `pulumi:"hostnameConfigs"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string                  `pulumi:"id"`
	InitialNodeCount      int                     `pulumi:"initialNodeCount"`
	KeyPair               string                  `pulumi:"keyPair"`
	Labels                map[string]string       `pulumi:"labels"`
	MaxNodeCount          int                     `pulumi:"maxNodeCount"`
	MaxPods               int                     `pulumi:"maxPods"`
	MinNodeCount          int                     `pulumi:"minNodeCount"`
	Name                  string                  `pulumi:"name"`
	NodePoolId            string                  `pulumi:"nodePoolId"`
	Os                    string                  `pulumi:"os"`
	Priority              int                     `pulumi:"priority"`
	Region                string                  `pulumi:"region"`
	RootVolumes           []GetNodePoolRootVolume `pulumi:"rootVolumes"`
	ScaleDownCooldownTime int                     `pulumi:"scaleDownCooldownTime"`
	ScallEnable           bool                    `pulumi:"scallEnable"`
	Status                string                  `pulumi:"status"`
	SubnetId              string                  `pulumi:"subnetId"`
	Tags                  map[string]string       `pulumi:"tags"`
	Type                  string                  `pulumi:"type"`
}

func LookupNodePoolOutput(ctx *pulumi.Context, args LookupNodePoolOutputArgs, opts ...pulumi.InvokeOption) LookupNodePoolResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNodePoolResultOutput, error) {
			args := v.(LookupNodePoolArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Cce/getNodePool:getNodePool", args, LookupNodePoolResultOutput{}, options).(LookupNodePoolResultOutput), nil
		}).(LookupNodePoolResultOutput)
}

// A collection of arguments for invoking getNodePool.
type LookupNodePoolOutputArgs struct {
	ClusterId  pulumi.StringInput    `pulumi:"clusterId"`
	Name       pulumi.StringPtrInput `pulumi:"name"`
	NodePoolId pulumi.StringPtrInput `pulumi:"nodePoolId"`
	Region     pulumi.StringPtrInput `pulumi:"region"`
	Status     pulumi.StringPtrInput `pulumi:"status"`
}

func (LookupNodePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNodePoolArgs)(nil)).Elem()
}

// A collection of values returned by getNodePool.
type LookupNodePoolResultOutput struct{ *pulumi.OutputState }

func (LookupNodePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNodePoolResult)(nil)).Elem()
}

func (o LookupNodePoolResultOutput) ToLookupNodePoolResultOutput() LookupNodePoolResultOutput {
	return o
}

func (o LookupNodePoolResultOutput) ToLookupNodePoolResultOutputWithContext(ctx context.Context) LookupNodePoolResultOutput {
	return o
}

func (o LookupNodePoolResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) CurrentNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNodePoolResult) int { return v.CurrentNodeCount }).(pulumi.IntOutput)
}

func (o LookupNodePoolResultOutput) DataVolumes() GetNodePoolDataVolumeArrayOutput {
	return o.ApplyT(func(v LookupNodePoolResult) []GetNodePoolDataVolume { return v.DataVolumes }).(GetNodePoolDataVolumeArrayOutput)
}

func (o LookupNodePoolResultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) ExtendParam() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNodePoolResult) map[string]string { return v.ExtendParam }).(pulumi.StringMapOutput)
}

func (o LookupNodePoolResultOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.FlavorId }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) HostnameConfigs() GetNodePoolHostnameConfigArrayOutput {
	return o.ApplyT(func(v LookupNodePoolResult) []GetNodePoolHostnameConfig { return v.HostnameConfigs }).(GetNodePoolHostnameConfigArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNodePoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) InitialNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNodePoolResult) int { return v.InitialNodeCount }).(pulumi.IntOutput)
}

func (o LookupNodePoolResultOutput) KeyPair() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.KeyPair }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNodePoolResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupNodePoolResultOutput) MaxNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNodePoolResult) int { return v.MaxNodeCount }).(pulumi.IntOutput)
}

func (o LookupNodePoolResultOutput) MaxPods() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNodePoolResult) int { return v.MaxPods }).(pulumi.IntOutput)
}

func (o LookupNodePoolResultOutput) MinNodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNodePoolResult) int { return v.MinNodeCount }).(pulumi.IntOutput)
}

func (o LookupNodePoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) NodePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.NodePoolId }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.Os }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNodePoolResult) int { return v.Priority }).(pulumi.IntOutput)
}

func (o LookupNodePoolResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) RootVolumes() GetNodePoolRootVolumeArrayOutput {
	return o.ApplyT(func(v LookupNodePoolResult) []GetNodePoolRootVolume { return v.RootVolumes }).(GetNodePoolRootVolumeArrayOutput)
}

func (o LookupNodePoolResultOutput) ScaleDownCooldownTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNodePoolResult) int { return v.ScaleDownCooldownTime }).(pulumi.IntOutput)
}

func (o LookupNodePoolResultOutput) ScallEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNodePoolResult) bool { return v.ScallEnable }).(pulumi.BoolOutput)
}

func (o LookupNodePoolResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o LookupNodePoolResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupNodePoolResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupNodePoolResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNodePoolResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNodePoolResultOutput{})
}

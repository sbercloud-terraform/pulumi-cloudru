// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eip

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type GetBandwidthPublicip struct {
	// The ID of the EIP or IPv6 port that uses the bandwidth.
	Id string `pulumi:"id"`
	// The IPv4 or IPv6 address.
	IpAddress string `pulumi:"ipAddress"`
	// The IP version, either 4 or 6.
	IpVersion int `pulumi:"ipVersion"`
	// The EIP type.
	Type string `pulumi:"type"`
}

// GetBandwidthPublicipInput is an input type that accepts GetBandwidthPublicipArgs and GetBandwidthPublicipOutput values.
// You can construct a concrete instance of `GetBandwidthPublicipInput` via:
//
//	GetBandwidthPublicipArgs{...}
type GetBandwidthPublicipInput interface {
	pulumi.Input

	ToGetBandwidthPublicipOutput() GetBandwidthPublicipOutput
	ToGetBandwidthPublicipOutputWithContext(context.Context) GetBandwidthPublicipOutput
}

type GetBandwidthPublicipArgs struct {
	// The ID of the EIP or IPv6 port that uses the bandwidth.
	Id pulumi.StringInput `pulumi:"id"`
	// The IPv4 or IPv6 address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The IP version, either 4 or 6.
	IpVersion pulumi.IntInput `pulumi:"ipVersion"`
	// The EIP type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetBandwidthPublicipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPublicip)(nil)).Elem()
}

func (i GetBandwidthPublicipArgs) ToGetBandwidthPublicipOutput() GetBandwidthPublicipOutput {
	return i.ToGetBandwidthPublicipOutputWithContext(context.Background())
}

func (i GetBandwidthPublicipArgs) ToGetBandwidthPublicipOutputWithContext(ctx context.Context) GetBandwidthPublicipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPublicipOutput)
}

// GetBandwidthPublicipArrayInput is an input type that accepts GetBandwidthPublicipArray and GetBandwidthPublicipArrayOutput values.
// You can construct a concrete instance of `GetBandwidthPublicipArrayInput` via:
//
//	GetBandwidthPublicipArray{ GetBandwidthPublicipArgs{...} }
type GetBandwidthPublicipArrayInput interface {
	pulumi.Input

	ToGetBandwidthPublicipArrayOutput() GetBandwidthPublicipArrayOutput
	ToGetBandwidthPublicipArrayOutputWithContext(context.Context) GetBandwidthPublicipArrayOutput
}

type GetBandwidthPublicipArray []GetBandwidthPublicipInput

func (GetBandwidthPublicipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPublicip)(nil)).Elem()
}

func (i GetBandwidthPublicipArray) ToGetBandwidthPublicipArrayOutput() GetBandwidthPublicipArrayOutput {
	return i.ToGetBandwidthPublicipArrayOutputWithContext(context.Background())
}

func (i GetBandwidthPublicipArray) ToGetBandwidthPublicipArrayOutputWithContext(ctx context.Context) GetBandwidthPublicipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPublicipArrayOutput)
}

type GetBandwidthPublicipOutput struct{ *pulumi.OutputState }

func (GetBandwidthPublicipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPublicip)(nil)).Elem()
}

func (o GetBandwidthPublicipOutput) ToGetBandwidthPublicipOutput() GetBandwidthPublicipOutput {
	return o
}

func (o GetBandwidthPublicipOutput) ToGetBandwidthPublicipOutputWithContext(ctx context.Context) GetBandwidthPublicipOutput {
	return o
}

// The ID of the EIP or IPv6 port that uses the bandwidth.
func (o GetBandwidthPublicipOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPublicip) string { return v.Id }).(pulumi.StringOutput)
}

// The IPv4 or IPv6 address.
func (o GetBandwidthPublicipOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPublicip) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The IP version, either 4 or 6.
func (o GetBandwidthPublicipOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetBandwidthPublicip) int { return v.IpVersion }).(pulumi.IntOutput)
}

// The EIP type.
func (o GetBandwidthPublicipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPublicip) string { return v.Type }).(pulumi.StringOutput)
}

type GetBandwidthPublicipArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthPublicipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPublicip)(nil)).Elem()
}

func (o GetBandwidthPublicipArrayOutput) ToGetBandwidthPublicipArrayOutput() GetBandwidthPublicipArrayOutput {
	return o
}

func (o GetBandwidthPublicipArrayOutput) ToGetBandwidthPublicipArrayOutputWithContext(ctx context.Context) GetBandwidthPublicipArrayOutput {
	return o
}

func (o GetBandwidthPublicipArrayOutput) Index(i pulumi.IntInput) GetBandwidthPublicipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthPublicip {
		return vs[0].([]GetBandwidthPublicip)[vs[1].(int)]
	}).(GetBandwidthPublicipOutput)
}

type GetEipsEip struct {
	// The bandwidth id of the EIP.
	BandwidthId string `pulumi:"bandwidthId"`
	// The bandwidth name of the EIP.
	BandwidthName string `pulumi:"bandwidthName"`
	// The bandwidth share type of the EIP.
	BandwidthShareType string `pulumi:"bandwidthShareType"`
	// The bandwidth size of the EIP.
	BandwidthSize int    `pulumi:"bandwidthSize"`
	CreatedAt     string `pulumi:"createdAt"`
	// Specifies the enterprise project ID which the desired EIP belongs to.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// The ID of the EIP.
	Id string `pulumi:"id"`
	// Specifies ip version of the desired EIP. The options are:
	IpVersion int `pulumi:"ipVersion"`
	// The name of the EIP.
	Name string `pulumi:"name"`
	// The port id bound to the EIP.
	PortId string `pulumi:"portId"`
	// The private ip address of the EIP.
	PrivateIp string `pulumi:"privateIp"`
	// The public ip address of the EIP.
	PublicIp string `pulumi:"publicIp"`
	// The public ipv6 address of the EIP.
	PublicIpv6 string `pulumi:"publicIpv6"`
	// The status of the EIP.
	Status string `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired EIP.
	//
	// > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
	// The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
	// tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
	// The values are in the OR relationship.
	Tags map[string]string `pulumi:"tags"`
	// The type of the EIP.
	Type string `pulumi:"type"`
}

// GetEipsEipInput is an input type that accepts GetEipsEipArgs and GetEipsEipOutput values.
// You can construct a concrete instance of `GetEipsEipInput` via:
//
//	GetEipsEipArgs{...}
type GetEipsEipInput interface {
	pulumi.Input

	ToGetEipsEipOutput() GetEipsEipOutput
	ToGetEipsEipOutputWithContext(context.Context) GetEipsEipOutput
}

type GetEipsEipArgs struct {
	// The bandwidth id of the EIP.
	BandwidthId pulumi.StringInput `pulumi:"bandwidthId"`
	// The bandwidth name of the EIP.
	BandwidthName pulumi.StringInput `pulumi:"bandwidthName"`
	// The bandwidth share type of the EIP.
	BandwidthShareType pulumi.StringInput `pulumi:"bandwidthShareType"`
	// The bandwidth size of the EIP.
	BandwidthSize pulumi.IntInput    `pulumi:"bandwidthSize"`
	CreatedAt     pulumi.StringInput `pulumi:"createdAt"`
	// Specifies the enterprise project ID which the desired EIP belongs to.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// The ID of the EIP.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies ip version of the desired EIP. The options are:
	IpVersion pulumi.IntInput `pulumi:"ipVersion"`
	// The name of the EIP.
	Name pulumi.StringInput `pulumi:"name"`
	// The port id bound to the EIP.
	PortId pulumi.StringInput `pulumi:"portId"`
	// The private ip address of the EIP.
	PrivateIp pulumi.StringInput `pulumi:"privateIp"`
	// The public ip address of the EIP.
	PublicIp pulumi.StringInput `pulumi:"publicIp"`
	// The public ipv6 address of the EIP.
	PublicIpv6 pulumi.StringInput `pulumi:"publicIpv6"`
	// The status of the EIP.
	Status pulumi.StringInput `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired EIP.
	//
	// > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
	// The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
	// tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
	// The values are in the OR relationship.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// The type of the EIP.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetEipsEipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsEip)(nil)).Elem()
}

func (i GetEipsEipArgs) ToGetEipsEipOutput() GetEipsEipOutput {
	return i.ToGetEipsEipOutputWithContext(context.Background())
}

func (i GetEipsEipArgs) ToGetEipsEipOutputWithContext(ctx context.Context) GetEipsEipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipsEipOutput)
}

// GetEipsEipArrayInput is an input type that accepts GetEipsEipArray and GetEipsEipArrayOutput values.
// You can construct a concrete instance of `GetEipsEipArrayInput` via:
//
//	GetEipsEipArray{ GetEipsEipArgs{...} }
type GetEipsEipArrayInput interface {
	pulumi.Input

	ToGetEipsEipArrayOutput() GetEipsEipArrayOutput
	ToGetEipsEipArrayOutputWithContext(context.Context) GetEipsEipArrayOutput
}

type GetEipsEipArray []GetEipsEipInput

func (GetEipsEipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipsEip)(nil)).Elem()
}

func (i GetEipsEipArray) ToGetEipsEipArrayOutput() GetEipsEipArrayOutput {
	return i.ToGetEipsEipArrayOutputWithContext(context.Background())
}

func (i GetEipsEipArray) ToGetEipsEipArrayOutputWithContext(ctx context.Context) GetEipsEipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipsEipArrayOutput)
}

type GetEipsEipOutput struct{ *pulumi.OutputState }

func (GetEipsEipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsEip)(nil)).Elem()
}

func (o GetEipsEipOutput) ToGetEipsEipOutput() GetEipsEipOutput {
	return o
}

func (o GetEipsEipOutput) ToGetEipsEipOutputWithContext(ctx context.Context) GetEipsEipOutput {
	return o
}

// The bandwidth id of the EIP.
func (o GetEipsEipOutput) BandwidthId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthId }).(pulumi.StringOutput)
}

// The bandwidth name of the EIP.
func (o GetEipsEipOutput) BandwidthName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthName }).(pulumi.StringOutput)
}

// The bandwidth share type of the EIP.
func (o GetEipsEipOutput) BandwidthShareType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthShareType }).(pulumi.StringOutput)
}

// The bandwidth size of the EIP.
func (o GetEipsEipOutput) BandwidthSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetEipsEip) int { return v.BandwidthSize }).(pulumi.IntOutput)
}

func (o GetEipsEipOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID which the desired EIP belongs to.
func (o GetEipsEipOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The ID of the EIP.
func (o GetEipsEipOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies ip version of the desired EIP. The options are:
func (o GetEipsEipOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetEipsEip) int { return v.IpVersion }).(pulumi.IntOutput)
}

// The name of the EIP.
func (o GetEipsEipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Name }).(pulumi.StringOutput)
}

// The port id bound to the EIP.
func (o GetEipsEipOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PortId }).(pulumi.StringOutput)
}

// The private ip address of the EIP.
func (o GetEipsEipOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The public ip address of the EIP.
func (o GetEipsEipOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PublicIp }).(pulumi.StringOutput)
}

// The public ipv6 address of the EIP.
func (o GetEipsEipOutput) PublicIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PublicIpv6 }).(pulumi.StringOutput)
}

// The status of the EIP.
func (o GetEipsEipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies the included key/value pairs which associated with the desired EIP.
//
// > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
// The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
// tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
// The values are in the OR relationship.
func (o GetEipsEipOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetEipsEip) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the EIP.
func (o GetEipsEipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Type }).(pulumi.StringOutput)
}

type GetEipsEipArrayOutput struct{ *pulumi.OutputState }

func (GetEipsEipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipsEip)(nil)).Elem()
}

func (o GetEipsEipArrayOutput) ToGetEipsEipArrayOutput() GetEipsEipArrayOutput {
	return o
}

func (o GetEipsEipArrayOutput) ToGetEipsEipArrayOutputWithContext(ctx context.Context) GetEipsEipArrayOutput {
	return o
}

func (o GetEipsEipArrayOutput) Index(i pulumi.IntInput) GetEipsEipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEipsEip {
		return vs[0].([]GetEipsEip)[vs[1].(int)]
	}).(GetEipsEipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthPublicipInput)(nil)).Elem(), GetBandwidthPublicipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthPublicipArrayInput)(nil)).Elem(), GetBandwidthPublicipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipsEipInput)(nil)).Elem(), GetEipsEipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipsEipArrayInput)(nil)).Elem(), GetEipsEipArray{})
	pulumi.RegisterOutputType(GetBandwidthPublicipOutput{})
	pulumi.RegisterOutputType(GetBandwidthPublicipArrayOutput{})
	pulumi.RegisterOutputType(GetEipsEipOutput{})
	pulumi.RegisterOutputType(GetEipsEipArrayOutput{})
}

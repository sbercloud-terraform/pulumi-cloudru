// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SfsTurboDataTask struct {
	pulumi.CustomResourceState

	DestPrefix pulumi.StringPtrOutput `pulumi:"destPrefix"`
	DestTarget pulumi.StringOutput    `pulumi:"destTarget"`
	EndTime    pulumi.StringOutput    `pulumi:"endTime"`
	Message    pulumi.StringOutput    `pulumi:"message"`
	Region     pulumi.StringOutput    `pulumi:"region"`
	ShareId    pulumi.StringOutput    `pulumi:"shareId"`
	SrcPrefix  pulumi.StringPtrOutput `pulumi:"srcPrefix"`
	SrcTarget  pulumi.StringOutput    `pulumi:"srcTarget"`
	StartTime  pulumi.StringOutput    `pulumi:"startTime"`
	Status     pulumi.StringOutput    `pulumi:"status"`
	Type       pulumi.StringOutput    `pulumi:"type"`
}

// NewSfsTurboDataTask registers a new resource with the given unique name, arguments, and options.
func NewSfsTurboDataTask(ctx *pulumi.Context,
	name string, args *SfsTurboDataTaskArgs, opts ...pulumi.ResourceOption) (*SfsTurboDataTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestTarget == nil {
		return nil, errors.New("invalid value for required argument 'DestTarget'")
	}
	if args.ShareId == nil {
		return nil, errors.New("invalid value for required argument 'ShareId'")
	}
	if args.SrcTarget == nil {
		return nil, errors.New("invalid value for required argument 'SrcTarget'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SfsTurboDataTask
	err := ctx.RegisterResource("cloudru:index/sfsTurboDataTask:SfsTurboDataTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSfsTurboDataTask gets an existing SfsTurboDataTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSfsTurboDataTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SfsTurboDataTaskState, opts ...pulumi.ResourceOption) (*SfsTurboDataTask, error) {
	var resource SfsTurboDataTask
	err := ctx.ReadResource("cloudru:index/sfsTurboDataTask:SfsTurboDataTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SfsTurboDataTask resources.
type sfsTurboDataTaskState struct {
	DestPrefix *string `pulumi:"destPrefix"`
	DestTarget *string `pulumi:"destTarget"`
	EndTime    *string `pulumi:"endTime"`
	Message    *string `pulumi:"message"`
	Region     *string `pulumi:"region"`
	ShareId    *string `pulumi:"shareId"`
	SrcPrefix  *string `pulumi:"srcPrefix"`
	SrcTarget  *string `pulumi:"srcTarget"`
	StartTime  *string `pulumi:"startTime"`
	Status     *string `pulumi:"status"`
	Type       *string `pulumi:"type"`
}

type SfsTurboDataTaskState struct {
	DestPrefix pulumi.StringPtrInput
	DestTarget pulumi.StringPtrInput
	EndTime    pulumi.StringPtrInput
	Message    pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	ShareId    pulumi.StringPtrInput
	SrcPrefix  pulumi.StringPtrInput
	SrcTarget  pulumi.StringPtrInput
	StartTime  pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
	Type       pulumi.StringPtrInput
}

func (SfsTurboDataTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboDataTaskState)(nil)).Elem()
}

type sfsTurboDataTaskArgs struct {
	DestPrefix *string `pulumi:"destPrefix"`
	DestTarget string  `pulumi:"destTarget"`
	Region     *string `pulumi:"region"`
	ShareId    string  `pulumi:"shareId"`
	SrcPrefix  *string `pulumi:"srcPrefix"`
	SrcTarget  string  `pulumi:"srcTarget"`
	Type       string  `pulumi:"type"`
}

// The set of arguments for constructing a SfsTurboDataTask resource.
type SfsTurboDataTaskArgs struct {
	DestPrefix pulumi.StringPtrInput
	DestTarget pulumi.StringInput
	Region     pulumi.StringPtrInput
	ShareId    pulumi.StringInput
	SrcPrefix  pulumi.StringPtrInput
	SrcTarget  pulumi.StringInput
	Type       pulumi.StringInput
}

func (SfsTurboDataTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboDataTaskArgs)(nil)).Elem()
}

type SfsTurboDataTaskInput interface {
	pulumi.Input

	ToSfsTurboDataTaskOutput() SfsTurboDataTaskOutput
	ToSfsTurboDataTaskOutputWithContext(ctx context.Context) SfsTurboDataTaskOutput
}

func (*SfsTurboDataTask) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboDataTask)(nil)).Elem()
}

func (i *SfsTurboDataTask) ToSfsTurboDataTaskOutput() SfsTurboDataTaskOutput {
	return i.ToSfsTurboDataTaskOutputWithContext(context.Background())
}

func (i *SfsTurboDataTask) ToSfsTurboDataTaskOutputWithContext(ctx context.Context) SfsTurboDataTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDataTaskOutput)
}

// SfsTurboDataTaskArrayInput is an input type that accepts SfsTurboDataTaskArray and SfsTurboDataTaskArrayOutput values.
// You can construct a concrete instance of `SfsTurboDataTaskArrayInput` via:
//
//	SfsTurboDataTaskArray{ SfsTurboDataTaskArgs{...} }
type SfsTurboDataTaskArrayInput interface {
	pulumi.Input

	ToSfsTurboDataTaskArrayOutput() SfsTurboDataTaskArrayOutput
	ToSfsTurboDataTaskArrayOutputWithContext(context.Context) SfsTurboDataTaskArrayOutput
}

type SfsTurboDataTaskArray []SfsTurboDataTaskInput

func (SfsTurboDataTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboDataTask)(nil)).Elem()
}

func (i SfsTurboDataTaskArray) ToSfsTurboDataTaskArrayOutput() SfsTurboDataTaskArrayOutput {
	return i.ToSfsTurboDataTaskArrayOutputWithContext(context.Background())
}

func (i SfsTurboDataTaskArray) ToSfsTurboDataTaskArrayOutputWithContext(ctx context.Context) SfsTurboDataTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDataTaskArrayOutput)
}

// SfsTurboDataTaskMapInput is an input type that accepts SfsTurboDataTaskMap and SfsTurboDataTaskMapOutput values.
// You can construct a concrete instance of `SfsTurboDataTaskMapInput` via:
//
//	SfsTurboDataTaskMap{ "key": SfsTurboDataTaskArgs{...} }
type SfsTurboDataTaskMapInput interface {
	pulumi.Input

	ToSfsTurboDataTaskMapOutput() SfsTurboDataTaskMapOutput
	ToSfsTurboDataTaskMapOutputWithContext(context.Context) SfsTurboDataTaskMapOutput
}

type SfsTurboDataTaskMap map[string]SfsTurboDataTaskInput

func (SfsTurboDataTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboDataTask)(nil)).Elem()
}

func (i SfsTurboDataTaskMap) ToSfsTurboDataTaskMapOutput() SfsTurboDataTaskMapOutput {
	return i.ToSfsTurboDataTaskMapOutputWithContext(context.Background())
}

func (i SfsTurboDataTaskMap) ToSfsTurboDataTaskMapOutputWithContext(ctx context.Context) SfsTurboDataTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDataTaskMapOutput)
}

type SfsTurboDataTaskOutput struct{ *pulumi.OutputState }

func (SfsTurboDataTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboDataTask)(nil)).Elem()
}

func (o SfsTurboDataTaskOutput) ToSfsTurboDataTaskOutput() SfsTurboDataTaskOutput {
	return o
}

func (o SfsTurboDataTaskOutput) ToSfsTurboDataTaskOutputWithContext(ctx context.Context) SfsTurboDataTaskOutput {
	return o
}

func (o SfsTurboDataTaskOutput) DestPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringPtrOutput { return v.DestPrefix }).(pulumi.StringPtrOutput)
}

func (o SfsTurboDataTaskOutput) DestTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.DestTarget }).(pulumi.StringOutput)
}

func (o SfsTurboDataTaskOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

func (o SfsTurboDataTaskOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

func (o SfsTurboDataTaskOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SfsTurboDataTaskOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.ShareId }).(pulumi.StringOutput)
}

func (o SfsTurboDataTaskOutput) SrcPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringPtrOutput { return v.SrcPrefix }).(pulumi.StringPtrOutput)
}

func (o SfsTurboDataTaskOutput) SrcTarget() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.SrcTarget }).(pulumi.StringOutput)
}

func (o SfsTurboDataTaskOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

func (o SfsTurboDataTaskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SfsTurboDataTaskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDataTask) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type SfsTurboDataTaskArrayOutput struct{ *pulumi.OutputState }

func (SfsTurboDataTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboDataTask)(nil)).Elem()
}

func (o SfsTurboDataTaskArrayOutput) ToSfsTurboDataTaskArrayOutput() SfsTurboDataTaskArrayOutput {
	return o
}

func (o SfsTurboDataTaskArrayOutput) ToSfsTurboDataTaskArrayOutputWithContext(ctx context.Context) SfsTurboDataTaskArrayOutput {
	return o
}

func (o SfsTurboDataTaskArrayOutput) Index(i pulumi.IntInput) SfsTurboDataTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SfsTurboDataTask {
		return vs[0].([]*SfsTurboDataTask)[vs[1].(int)]
	}).(SfsTurboDataTaskOutput)
}

type SfsTurboDataTaskMapOutput struct{ *pulumi.OutputState }

func (SfsTurboDataTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboDataTask)(nil)).Elem()
}

func (o SfsTurboDataTaskMapOutput) ToSfsTurboDataTaskMapOutput() SfsTurboDataTaskMapOutput {
	return o
}

func (o SfsTurboDataTaskMapOutput) ToSfsTurboDataTaskMapOutputWithContext(ctx context.Context) SfsTurboDataTaskMapOutput {
	return o
}

func (o SfsTurboDataTaskMapOutput) MapIndex(k pulumi.StringInput) SfsTurboDataTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SfsTurboDataTask {
		return vs[0].(map[string]*SfsTurboDataTask)[vs[1].(string)]
	}).(SfsTurboDataTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDataTaskInput)(nil)).Elem(), &SfsTurboDataTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDataTaskArrayInput)(nil)).Elem(), SfsTurboDataTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDataTaskMapInput)(nil)).Elem(), SfsTurboDataTaskMap{})
	pulumi.RegisterOutputType(SfsTurboDataTaskOutput{})
	pulumi.RegisterOutputType(SfsTurboDataTaskArrayOutput{})
	pulumi.RegisterOutputType(SfsTurboDataTaskMapOutput{})
}

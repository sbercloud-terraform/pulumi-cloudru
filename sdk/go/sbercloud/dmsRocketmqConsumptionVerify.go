// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a DMS RocketMQ consumption verify resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			group := cfg.RequireObject("group")
//			topic := cfg.RequireObject("topic")
//			clientId := cfg.RequireObject("clientId")
//			messageIdList := cfg.RequireObject("messageIdList")
//			_, err := sbercloud.NewDmsRocketmqConsumptionVerify(ctx, "test", &sbercloud.DmsRocketmqConsumptionVerifyArgs{
//				InstanceId:     pulumi.Any(instanceId),
//				Group:          pulumi.Any(group),
//				Topic:          pulumi.Any(topic),
//				ClientId:       pulumi.Any(clientId),
//				MessageIdLists: pulumi.Any(messageIdList),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DmsRocketmqConsumptionVerify struct {
	pulumi.CustomResourceState

	// Specifies the client ID.
	// Changing this creates a new resource.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// Specifies the group name.
	// Changing this creates a new resource.
	Group pulumi.StringPtrOutput `pulumi:"group"`
	// Specifies the instance ID.
	// Changing this creates a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the message ID list.
	// Changing this creates a new resource.
	MessageIdLists pulumi.StringArrayOutput `pulumi:"messageIdLists"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates the verify results.
	// The resendResults structure is documented below.
	ResendResults DmsRocketmqConsumptionVerifyResendResultArrayOutput `pulumi:"resendResults"`
	// Specifies the topic name.
	// Changing this creates a new resource.
	Topic pulumi.StringPtrOutput `pulumi:"topic"`
}

// NewDmsRocketmqConsumptionVerify registers a new resource with the given unique name, arguments, and options.
func NewDmsRocketmqConsumptionVerify(ctx *pulumi.Context,
	name string, args *DmsRocketmqConsumptionVerifyArgs, opts ...pulumi.ResourceOption) (*DmsRocketmqConsumptionVerify, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsRocketmqConsumptionVerify
	err := ctx.RegisterResource("sbercloud:index/dmsRocketmqConsumptionVerify:DmsRocketmqConsumptionVerify", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsRocketmqConsumptionVerify gets an existing DmsRocketmqConsumptionVerify resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsRocketmqConsumptionVerify(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsRocketmqConsumptionVerifyState, opts ...pulumi.ResourceOption) (*DmsRocketmqConsumptionVerify, error) {
	var resource DmsRocketmqConsumptionVerify
	err := ctx.ReadResource("sbercloud:index/dmsRocketmqConsumptionVerify:DmsRocketmqConsumptionVerify", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsRocketmqConsumptionVerify resources.
type dmsRocketmqConsumptionVerifyState struct {
	// Specifies the client ID.
	// Changing this creates a new resource.
	ClientId *string `pulumi:"clientId"`
	// Specifies the group name.
	// Changing this creates a new resource.
	Group *string `pulumi:"group"`
	// Specifies the instance ID.
	// Changing this creates a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the message ID list.
	// Changing this creates a new resource.
	MessageIdLists []string `pulumi:"messageIdLists"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Indicates the verify results.
	// The resendResults structure is documented below.
	ResendResults []DmsRocketmqConsumptionVerifyResendResult `pulumi:"resendResults"`
	// Specifies the topic name.
	// Changing this creates a new resource.
	Topic *string `pulumi:"topic"`
}

type DmsRocketmqConsumptionVerifyState struct {
	// Specifies the client ID.
	// Changing this creates a new resource.
	ClientId pulumi.StringPtrInput
	// Specifies the group name.
	// Changing this creates a new resource.
	Group pulumi.StringPtrInput
	// Specifies the instance ID.
	// Changing this creates a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the message ID list.
	// Changing this creates a new resource.
	MessageIdLists pulumi.StringArrayInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Indicates the verify results.
	// The resendResults structure is documented below.
	ResendResults DmsRocketmqConsumptionVerifyResendResultArrayInput
	// Specifies the topic name.
	// Changing this creates a new resource.
	Topic pulumi.StringPtrInput
}

func (DmsRocketmqConsumptionVerifyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsRocketmqConsumptionVerifyState)(nil)).Elem()
}

type dmsRocketmqConsumptionVerifyArgs struct {
	// Specifies the client ID.
	// Changing this creates a new resource.
	ClientId *string `pulumi:"clientId"`
	// Specifies the group name.
	// Changing this creates a new resource.
	Group *string `pulumi:"group"`
	// Specifies the instance ID.
	// Changing this creates a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the message ID list.
	// Changing this creates a new resource.
	MessageIdLists []string `pulumi:"messageIdLists"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the topic name.
	// Changing this creates a new resource.
	Topic *string `pulumi:"topic"`
}

// The set of arguments for constructing a DmsRocketmqConsumptionVerify resource.
type DmsRocketmqConsumptionVerifyArgs struct {
	// Specifies the client ID.
	// Changing this creates a new resource.
	ClientId pulumi.StringPtrInput
	// Specifies the group name.
	// Changing this creates a new resource.
	Group pulumi.StringPtrInput
	// Specifies the instance ID.
	// Changing this creates a new resource.
	InstanceId pulumi.StringInput
	// Specifies the message ID list.
	// Changing this creates a new resource.
	MessageIdLists pulumi.StringArrayInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the topic name.
	// Changing this creates a new resource.
	Topic pulumi.StringPtrInput
}

func (DmsRocketmqConsumptionVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsRocketmqConsumptionVerifyArgs)(nil)).Elem()
}

type DmsRocketmqConsumptionVerifyInput interface {
	pulumi.Input

	ToDmsRocketmqConsumptionVerifyOutput() DmsRocketmqConsumptionVerifyOutput
	ToDmsRocketmqConsumptionVerifyOutputWithContext(ctx context.Context) DmsRocketmqConsumptionVerifyOutput
}

func (*DmsRocketmqConsumptionVerify) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsRocketmqConsumptionVerify)(nil)).Elem()
}

func (i *DmsRocketmqConsumptionVerify) ToDmsRocketmqConsumptionVerifyOutput() DmsRocketmqConsumptionVerifyOutput {
	return i.ToDmsRocketmqConsumptionVerifyOutputWithContext(context.Background())
}

func (i *DmsRocketmqConsumptionVerify) ToDmsRocketmqConsumptionVerifyOutputWithContext(ctx context.Context) DmsRocketmqConsumptionVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqConsumptionVerifyOutput)
}

// DmsRocketmqConsumptionVerifyArrayInput is an input type that accepts DmsRocketmqConsumptionVerifyArray and DmsRocketmqConsumptionVerifyArrayOutput values.
// You can construct a concrete instance of `DmsRocketmqConsumptionVerifyArrayInput` via:
//
//	DmsRocketmqConsumptionVerifyArray{ DmsRocketmqConsumptionVerifyArgs{...} }
type DmsRocketmqConsumptionVerifyArrayInput interface {
	pulumi.Input

	ToDmsRocketmqConsumptionVerifyArrayOutput() DmsRocketmqConsumptionVerifyArrayOutput
	ToDmsRocketmqConsumptionVerifyArrayOutputWithContext(context.Context) DmsRocketmqConsumptionVerifyArrayOutput
}

type DmsRocketmqConsumptionVerifyArray []DmsRocketmqConsumptionVerifyInput

func (DmsRocketmqConsumptionVerifyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsRocketmqConsumptionVerify)(nil)).Elem()
}

func (i DmsRocketmqConsumptionVerifyArray) ToDmsRocketmqConsumptionVerifyArrayOutput() DmsRocketmqConsumptionVerifyArrayOutput {
	return i.ToDmsRocketmqConsumptionVerifyArrayOutputWithContext(context.Background())
}

func (i DmsRocketmqConsumptionVerifyArray) ToDmsRocketmqConsumptionVerifyArrayOutputWithContext(ctx context.Context) DmsRocketmqConsumptionVerifyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqConsumptionVerifyArrayOutput)
}

// DmsRocketmqConsumptionVerifyMapInput is an input type that accepts DmsRocketmqConsumptionVerifyMap and DmsRocketmqConsumptionVerifyMapOutput values.
// You can construct a concrete instance of `DmsRocketmqConsumptionVerifyMapInput` via:
//
//	DmsRocketmqConsumptionVerifyMap{ "key": DmsRocketmqConsumptionVerifyArgs{...} }
type DmsRocketmqConsumptionVerifyMapInput interface {
	pulumi.Input

	ToDmsRocketmqConsumptionVerifyMapOutput() DmsRocketmqConsumptionVerifyMapOutput
	ToDmsRocketmqConsumptionVerifyMapOutputWithContext(context.Context) DmsRocketmqConsumptionVerifyMapOutput
}

type DmsRocketmqConsumptionVerifyMap map[string]DmsRocketmqConsumptionVerifyInput

func (DmsRocketmqConsumptionVerifyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsRocketmqConsumptionVerify)(nil)).Elem()
}

func (i DmsRocketmqConsumptionVerifyMap) ToDmsRocketmqConsumptionVerifyMapOutput() DmsRocketmqConsumptionVerifyMapOutput {
	return i.ToDmsRocketmqConsumptionVerifyMapOutputWithContext(context.Background())
}

func (i DmsRocketmqConsumptionVerifyMap) ToDmsRocketmqConsumptionVerifyMapOutputWithContext(ctx context.Context) DmsRocketmqConsumptionVerifyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqConsumptionVerifyMapOutput)
}

type DmsRocketmqConsumptionVerifyOutput struct{ *pulumi.OutputState }

func (DmsRocketmqConsumptionVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsRocketmqConsumptionVerify)(nil)).Elem()
}

func (o DmsRocketmqConsumptionVerifyOutput) ToDmsRocketmqConsumptionVerifyOutput() DmsRocketmqConsumptionVerifyOutput {
	return o
}

func (o DmsRocketmqConsumptionVerifyOutput) ToDmsRocketmqConsumptionVerifyOutputWithContext(ctx context.Context) DmsRocketmqConsumptionVerifyOutput {
	return o
}

// Specifies the client ID.
// Changing this creates a new resource.
func (o DmsRocketmqConsumptionVerifyOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumptionVerify) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// Specifies the group name.
// Changing this creates a new resource.
func (o DmsRocketmqConsumptionVerifyOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumptionVerify) pulumi.StringPtrOutput { return v.Group }).(pulumi.StringPtrOutput)
}

// Specifies the instance ID.
// Changing this creates a new resource.
func (o DmsRocketmqConsumptionVerifyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumptionVerify) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the message ID list.
// Changing this creates a new resource.
func (o DmsRocketmqConsumptionVerifyOutput) MessageIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumptionVerify) pulumi.StringArrayOutput { return v.MessageIdLists }).(pulumi.StringArrayOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used.
// Changing this creates a new resource.
func (o DmsRocketmqConsumptionVerifyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumptionVerify) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the verify results.
// The resendResults structure is documented below.
func (o DmsRocketmqConsumptionVerifyOutput) ResendResults() DmsRocketmqConsumptionVerifyResendResultArrayOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumptionVerify) DmsRocketmqConsumptionVerifyResendResultArrayOutput {
		return v.ResendResults
	}).(DmsRocketmqConsumptionVerifyResendResultArrayOutput)
}

// Specifies the topic name.
// Changing this creates a new resource.
func (o DmsRocketmqConsumptionVerifyOutput) Topic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumptionVerify) pulumi.StringPtrOutput { return v.Topic }).(pulumi.StringPtrOutput)
}

type DmsRocketmqConsumptionVerifyArrayOutput struct{ *pulumi.OutputState }

func (DmsRocketmqConsumptionVerifyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsRocketmqConsumptionVerify)(nil)).Elem()
}

func (o DmsRocketmqConsumptionVerifyArrayOutput) ToDmsRocketmqConsumptionVerifyArrayOutput() DmsRocketmqConsumptionVerifyArrayOutput {
	return o
}

func (o DmsRocketmqConsumptionVerifyArrayOutput) ToDmsRocketmqConsumptionVerifyArrayOutputWithContext(ctx context.Context) DmsRocketmqConsumptionVerifyArrayOutput {
	return o
}

func (o DmsRocketmqConsumptionVerifyArrayOutput) Index(i pulumi.IntInput) DmsRocketmqConsumptionVerifyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsRocketmqConsumptionVerify {
		return vs[0].([]*DmsRocketmqConsumptionVerify)[vs[1].(int)]
	}).(DmsRocketmqConsumptionVerifyOutput)
}

type DmsRocketmqConsumptionVerifyMapOutput struct{ *pulumi.OutputState }

func (DmsRocketmqConsumptionVerifyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsRocketmqConsumptionVerify)(nil)).Elem()
}

func (o DmsRocketmqConsumptionVerifyMapOutput) ToDmsRocketmqConsumptionVerifyMapOutput() DmsRocketmqConsumptionVerifyMapOutput {
	return o
}

func (o DmsRocketmqConsumptionVerifyMapOutput) ToDmsRocketmqConsumptionVerifyMapOutputWithContext(ctx context.Context) DmsRocketmqConsumptionVerifyMapOutput {
	return o
}

func (o DmsRocketmqConsumptionVerifyMapOutput) MapIndex(k pulumi.StringInput) DmsRocketmqConsumptionVerifyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsRocketmqConsumptionVerify {
		return vs[0].(map[string]*DmsRocketmqConsumptionVerify)[vs[1].(string)]
	}).(DmsRocketmqConsumptionVerifyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqConsumptionVerifyInput)(nil)).Elem(), &DmsRocketmqConsumptionVerify{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqConsumptionVerifyArrayInput)(nil)).Elem(), DmsRocketmqConsumptionVerifyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqConsumptionVerifyMapInput)(nil)).Elem(), DmsRocketmqConsumptionVerifyMap{})
	pulumi.RegisterOutputType(DmsRocketmqConsumptionVerifyOutput{})
	pulumi.RegisterOutputType(DmsRocketmqConsumptionVerifyArrayOutput{})
	pulumi.RegisterOutputType(DmsRocketmqConsumptionVerifyMapOutput{})
}

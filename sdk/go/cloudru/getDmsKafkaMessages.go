// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the list of Kafka messages.
//
// ## Example Usage
//
// ### Query messages by creation time
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			topic := cfg.RequireObject("topic")
//			startTime := cfg.RequireObject("startTime")
//			endTime := cfg.RequireObject("endTime")
//			_, err := sbercloud.GetDmsKafkaMessages(ctx, &cloudru.GetDmsKafkaMessagesArgs{
//				InstanceId: instanceId,
//				Topic:      topic,
//				StartTime:  pulumi.StringRef(startTime),
//				EndTime:    pulumi.StringRef(endTime),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Query messages by content's keyword, a maximum of 10 messages can be returned
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			topic := cfg.RequireObject("topic")
//			startTime := cfg.RequireObject("startTime")
//			endTime := cfg.RequireObject("endTime")
//			keyword := cfg.RequireObject("keyword")
//			_, err := sbercloud.GetDmsKafkaMessages(ctx, &cloudru.GetDmsKafkaMessagesArgs{
//				InstanceId: instanceId,
//				Topic:      topic,
//				StartTime:  pulumi.StringRef(startTime),
//				EndTime:    pulumi.StringRef(endTime),
//				Keyword:    pulumi.StringRef(keyword),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Query messages content by offset
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			topic := cfg.RequireObject("topic")
//			partition := cfg.RequireObject("partition")
//			messageOffset := cfg.RequireObject("messageOffset")
//			_, err := sbercloud.GetDmsKafkaMessages(ctx, &cloudru.GetDmsKafkaMessagesArgs{
//				InstanceId:    instanceId,
//				Topic:         topic,
//				Partition:     pulumi.StringRef(partition),
//				MessageOffset: pulumi.StringRef(messageOffset),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDmsKafkaMessages(ctx *pulumi.Context, args *GetDmsKafkaMessagesArgs, opts ...pulumi.InvokeOption) (*GetDmsKafkaMessagesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDmsKafkaMessagesResult
	err := ctx.Invoke("sbercloud:index/getDmsKafkaMessages:getDmsKafkaMessages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDmsKafkaMessages.
type GetDmsKafkaMessagesArgs struct {
	// Whether download is required.
	// If it is **false**, the big message will be truncated. Defaults to **false**.
	Download *bool `pulumi:"download"`
	// Specifies the end time, a Unix timestamp in millisecond.
	// This parameter is mandatory when you query the message creation time.
	EndTime *string `pulumi:"endTime"`
	// Specifies the instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the keyword.
	// If it's specified, a maximum of **10** messages can be returned.
	Keyword *string `pulumi:"keyword"`
	// Specifies the message offset.
	// This parameter is mandatory when you query the message content by offset.
	MessageOffset *string `pulumi:"messageOffset"`
	// Specifies the partition.
	// This parameter is mandatory when you query the message content by offset.
	Partition *string `pulumi:"partition"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the start time, a Unix timestamp in millisecond.
	// This parameter is mandatory when you query the message creation time.
	StartTime *string `pulumi:"startTime"`
	// Specifies the topic name.
	Topic string `pulumi:"topic"`
}

// A collection of values returned by getDmsKafkaMessages.
type GetDmsKafkaMessagesResult struct {
	Download *bool   `pulumi:"download"`
	EndTime  *string `pulumi:"endTime"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	Keyword    *string `pulumi:"keyword"`
	// Indicates the message offset.
	MessageOffset *string `pulumi:"messageOffset"`
	// Indicates the message list.
	Messages []GetDmsKafkaMessagesMessage `pulumi:"messages"`
	// Indicates the partition where the message is located.
	Partition *string `pulumi:"partition"`
	Region    string  `pulumi:"region"`
	StartTime *string `pulumi:"startTime"`
	Topic     string  `pulumi:"topic"`
}

func GetDmsKafkaMessagesOutput(ctx *pulumi.Context, args GetDmsKafkaMessagesOutputArgs, opts ...pulumi.InvokeOption) GetDmsKafkaMessagesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDmsKafkaMessagesResultOutput, error) {
			args := v.(GetDmsKafkaMessagesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getDmsKafkaMessages:getDmsKafkaMessages", args, GetDmsKafkaMessagesResultOutput{}, options).(GetDmsKafkaMessagesResultOutput), nil
		}).(GetDmsKafkaMessagesResultOutput)
}

// A collection of arguments for invoking getDmsKafkaMessages.
type GetDmsKafkaMessagesOutputArgs struct {
	// Whether download is required.
	// If it is **false**, the big message will be truncated. Defaults to **false**.
	Download pulumi.BoolPtrInput `pulumi:"download"`
	// Specifies the end time, a Unix timestamp in millisecond.
	// This parameter is mandatory when you query the message creation time.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Specifies the instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the keyword.
	// If it's specified, a maximum of **10** messages can be returned.
	Keyword pulumi.StringPtrInput `pulumi:"keyword"`
	// Specifies the message offset.
	// This parameter is mandatory when you query the message content by offset.
	MessageOffset pulumi.StringPtrInput `pulumi:"messageOffset"`
	// Specifies the partition.
	// This parameter is mandatory when you query the message content by offset.
	Partition pulumi.StringPtrInput `pulumi:"partition"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the start time, a Unix timestamp in millisecond.
	// This parameter is mandatory when you query the message creation time.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Specifies the topic name.
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (GetDmsKafkaMessagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsKafkaMessagesArgs)(nil)).Elem()
}

// A collection of values returned by getDmsKafkaMessages.
type GetDmsKafkaMessagesResultOutput struct{ *pulumi.OutputState }

func (GetDmsKafkaMessagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsKafkaMessagesResult)(nil)).Elem()
}

func (o GetDmsKafkaMessagesResultOutput) ToGetDmsKafkaMessagesResultOutput() GetDmsKafkaMessagesResultOutput {
	return o
}

func (o GetDmsKafkaMessagesResultOutput) ToGetDmsKafkaMessagesResultOutputWithContext(ctx context.Context) GetDmsKafkaMessagesResultOutput {
	return o
}

func (o GetDmsKafkaMessagesResultOutput) Download() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) *bool { return v.Download }).(pulumi.BoolPtrOutput)
}

func (o GetDmsKafkaMessagesResultOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDmsKafkaMessagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDmsKafkaMessagesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetDmsKafkaMessagesResultOutput) Keyword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) *string { return v.Keyword }).(pulumi.StringPtrOutput)
}

// Indicates the message offset.
func (o GetDmsKafkaMessagesResultOutput) MessageOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) *string { return v.MessageOffset }).(pulumi.StringPtrOutput)
}

// Indicates the message list.
func (o GetDmsKafkaMessagesResultOutput) Messages() GetDmsKafkaMessagesMessageArrayOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) []GetDmsKafkaMessagesMessage { return v.Messages }).(GetDmsKafkaMessagesMessageArrayOutput)
}

// Indicates the partition where the message is located.
func (o GetDmsKafkaMessagesResultOutput) Partition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) *string { return v.Partition }).(pulumi.StringPtrOutput)
}

func (o GetDmsKafkaMessagesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetDmsKafkaMessagesResultOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

func (o GetDmsKafkaMessagesResultOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsKafkaMessagesResult) string { return v.Topic }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDmsKafkaMessagesResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dli

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type QueueScalingPolicy struct {
	ImpactStartTime string `pulumi:"impactStartTime"`
	ImpactStopTime  string `pulumi:"impactStopTime"`
	MaxCu           int    `pulumi:"maxCu"`
	MinCu           int    `pulumi:"minCu"`
	Priority        int    `pulumi:"priority"`
}

// QueueScalingPolicyInput is an input type that accepts QueueScalingPolicyArgs and QueueScalingPolicyOutput values.
// You can construct a concrete instance of `QueueScalingPolicyInput` via:
//
//	QueueScalingPolicyArgs{...}
type QueueScalingPolicyInput interface {
	pulumi.Input

	ToQueueScalingPolicyOutput() QueueScalingPolicyOutput
	ToQueueScalingPolicyOutputWithContext(context.Context) QueueScalingPolicyOutput
}

type QueueScalingPolicyArgs struct {
	ImpactStartTime pulumi.StringInput `pulumi:"impactStartTime"`
	ImpactStopTime  pulumi.StringInput `pulumi:"impactStopTime"`
	MaxCu           pulumi.IntInput    `pulumi:"maxCu"`
	MinCu           pulumi.IntInput    `pulumi:"minCu"`
	Priority        pulumi.IntInput    `pulumi:"priority"`
}

func (QueueScalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueScalingPolicy)(nil)).Elem()
}

func (i QueueScalingPolicyArgs) ToQueueScalingPolicyOutput() QueueScalingPolicyOutput {
	return i.ToQueueScalingPolicyOutputWithContext(context.Background())
}

func (i QueueScalingPolicyArgs) ToQueueScalingPolicyOutputWithContext(ctx context.Context) QueueScalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueScalingPolicyOutput)
}

// QueueScalingPolicyArrayInput is an input type that accepts QueueScalingPolicyArray and QueueScalingPolicyArrayOutput values.
// You can construct a concrete instance of `QueueScalingPolicyArrayInput` via:
//
//	QueueScalingPolicyArray{ QueueScalingPolicyArgs{...} }
type QueueScalingPolicyArrayInput interface {
	pulumi.Input

	ToQueueScalingPolicyArrayOutput() QueueScalingPolicyArrayOutput
	ToQueueScalingPolicyArrayOutputWithContext(context.Context) QueueScalingPolicyArrayOutput
}

type QueueScalingPolicyArray []QueueScalingPolicyInput

func (QueueScalingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueueScalingPolicy)(nil)).Elem()
}

func (i QueueScalingPolicyArray) ToQueueScalingPolicyArrayOutput() QueueScalingPolicyArrayOutput {
	return i.ToQueueScalingPolicyArrayOutputWithContext(context.Background())
}

func (i QueueScalingPolicyArray) ToQueueScalingPolicyArrayOutputWithContext(ctx context.Context) QueueScalingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueScalingPolicyArrayOutput)
}

type QueueScalingPolicyOutput struct{ *pulumi.OutputState }

func (QueueScalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueScalingPolicy)(nil)).Elem()
}

func (o QueueScalingPolicyOutput) ToQueueScalingPolicyOutput() QueueScalingPolicyOutput {
	return o
}

func (o QueueScalingPolicyOutput) ToQueueScalingPolicyOutputWithContext(ctx context.Context) QueueScalingPolicyOutput {
	return o
}

func (o QueueScalingPolicyOutput) ImpactStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v QueueScalingPolicy) string { return v.ImpactStartTime }).(pulumi.StringOutput)
}

func (o QueueScalingPolicyOutput) ImpactStopTime() pulumi.StringOutput {
	return o.ApplyT(func(v QueueScalingPolicy) string { return v.ImpactStopTime }).(pulumi.StringOutput)
}

func (o QueueScalingPolicyOutput) MaxCu() pulumi.IntOutput {
	return o.ApplyT(func(v QueueScalingPolicy) int { return v.MaxCu }).(pulumi.IntOutput)
}

func (o QueueScalingPolicyOutput) MinCu() pulumi.IntOutput {
	return o.ApplyT(func(v QueueScalingPolicy) int { return v.MinCu }).(pulumi.IntOutput)
}

func (o QueueScalingPolicyOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v QueueScalingPolicy) int { return v.Priority }).(pulumi.IntOutput)
}

type QueueScalingPolicyArrayOutput struct{ *pulumi.OutputState }

func (QueueScalingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QueueScalingPolicy)(nil)).Elem()
}

func (o QueueScalingPolicyArrayOutput) ToQueueScalingPolicyArrayOutput() QueueScalingPolicyArrayOutput {
	return o
}

func (o QueueScalingPolicyArrayOutput) ToQueueScalingPolicyArrayOutputWithContext(ctx context.Context) QueueScalingPolicyArrayOutput {
	return o
}

func (o QueueScalingPolicyArrayOutput) Index(i pulumi.IntInput) QueueScalingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QueueScalingPolicy {
		return vs[0].([]QueueScalingPolicy)[vs[1].(int)]
	}).(QueueScalingPolicyOutput)
}

type QueueSparkDriver struct {
	MaxConcurrent       *int    `pulumi:"maxConcurrent"`
	MaxInstance         *int    `pulumi:"maxInstance"`
	MaxPrefetchInstance *string `pulumi:"maxPrefetchInstance"`
}

// QueueSparkDriverInput is an input type that accepts QueueSparkDriverArgs and QueueSparkDriverOutput values.
// You can construct a concrete instance of `QueueSparkDriverInput` via:
//
//	QueueSparkDriverArgs{...}
type QueueSparkDriverInput interface {
	pulumi.Input

	ToQueueSparkDriverOutput() QueueSparkDriverOutput
	ToQueueSparkDriverOutputWithContext(context.Context) QueueSparkDriverOutput
}

type QueueSparkDriverArgs struct {
	MaxConcurrent       pulumi.IntPtrInput    `pulumi:"maxConcurrent"`
	MaxInstance         pulumi.IntPtrInput    `pulumi:"maxInstance"`
	MaxPrefetchInstance pulumi.StringPtrInput `pulumi:"maxPrefetchInstance"`
}

func (QueueSparkDriverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueSparkDriver)(nil)).Elem()
}

func (i QueueSparkDriverArgs) ToQueueSparkDriverOutput() QueueSparkDriverOutput {
	return i.ToQueueSparkDriverOutputWithContext(context.Background())
}

func (i QueueSparkDriverArgs) ToQueueSparkDriverOutputWithContext(ctx context.Context) QueueSparkDriverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSparkDriverOutput)
}

func (i QueueSparkDriverArgs) ToQueueSparkDriverPtrOutput() QueueSparkDriverPtrOutput {
	return i.ToQueueSparkDriverPtrOutputWithContext(context.Background())
}

func (i QueueSparkDriverArgs) ToQueueSparkDriverPtrOutputWithContext(ctx context.Context) QueueSparkDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSparkDriverOutput).ToQueueSparkDriverPtrOutputWithContext(ctx)
}

// QueueSparkDriverPtrInput is an input type that accepts QueueSparkDriverArgs, QueueSparkDriverPtr and QueueSparkDriverPtrOutput values.
// You can construct a concrete instance of `QueueSparkDriverPtrInput` via:
//
//	        QueueSparkDriverArgs{...}
//
//	or:
//
//	        nil
type QueueSparkDriverPtrInput interface {
	pulumi.Input

	ToQueueSparkDriverPtrOutput() QueueSparkDriverPtrOutput
	ToQueueSparkDriverPtrOutputWithContext(context.Context) QueueSparkDriverPtrOutput
}

type queueSparkDriverPtrType QueueSparkDriverArgs

func QueueSparkDriverPtr(v *QueueSparkDriverArgs) QueueSparkDriverPtrInput {
	return (*queueSparkDriverPtrType)(v)
}

func (*queueSparkDriverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSparkDriver)(nil)).Elem()
}

func (i *queueSparkDriverPtrType) ToQueueSparkDriverPtrOutput() QueueSparkDriverPtrOutput {
	return i.ToQueueSparkDriverPtrOutputWithContext(context.Background())
}

func (i *queueSparkDriverPtrType) ToQueueSparkDriverPtrOutputWithContext(ctx context.Context) QueueSparkDriverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSparkDriverPtrOutput)
}

type QueueSparkDriverOutput struct{ *pulumi.OutputState }

func (QueueSparkDriverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueSparkDriver)(nil)).Elem()
}

func (o QueueSparkDriverOutput) ToQueueSparkDriverOutput() QueueSparkDriverOutput {
	return o
}

func (o QueueSparkDriverOutput) ToQueueSparkDriverOutputWithContext(ctx context.Context) QueueSparkDriverOutput {
	return o
}

func (o QueueSparkDriverOutput) ToQueueSparkDriverPtrOutput() QueueSparkDriverPtrOutput {
	return o.ToQueueSparkDriverPtrOutputWithContext(context.Background())
}

func (o QueueSparkDriverOutput) ToQueueSparkDriverPtrOutputWithContext(ctx context.Context) QueueSparkDriverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueueSparkDriver) *QueueSparkDriver {
		return &v
	}).(QueueSparkDriverPtrOutput)
}

func (o QueueSparkDriverOutput) MaxConcurrent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueSparkDriver) *int { return v.MaxConcurrent }).(pulumi.IntPtrOutput)
}

func (o QueueSparkDriverOutput) MaxInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QueueSparkDriver) *int { return v.MaxInstance }).(pulumi.IntPtrOutput)
}

func (o QueueSparkDriverOutput) MaxPrefetchInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueSparkDriver) *string { return v.MaxPrefetchInstance }).(pulumi.StringPtrOutput)
}

type QueueSparkDriverPtrOutput struct{ *pulumi.OutputState }

func (QueueSparkDriverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSparkDriver)(nil)).Elem()
}

func (o QueueSparkDriverPtrOutput) ToQueueSparkDriverPtrOutput() QueueSparkDriverPtrOutput {
	return o
}

func (o QueueSparkDriverPtrOutput) ToQueueSparkDriverPtrOutputWithContext(ctx context.Context) QueueSparkDriverPtrOutput {
	return o
}

func (o QueueSparkDriverPtrOutput) Elem() QueueSparkDriverOutput {
	return o.ApplyT(func(v *QueueSparkDriver) QueueSparkDriver {
		if v != nil {
			return *v
		}
		var ret QueueSparkDriver
		return ret
	}).(QueueSparkDriverOutput)
}

func (o QueueSparkDriverPtrOutput) MaxConcurrent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueSparkDriver) *int {
		if v == nil {
			return nil
		}
		return v.MaxConcurrent
	}).(pulumi.IntPtrOutput)
}

func (o QueueSparkDriverPtrOutput) MaxInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *QueueSparkDriver) *int {
		if v == nil {
			return nil
		}
		return v.MaxInstance
	}).(pulumi.IntPtrOutput)
}

func (o QueueSparkDriverPtrOutput) MaxPrefetchInstance() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueSparkDriver) *string {
		if v == nil {
			return nil
		}
		return v.MaxPrefetchInstance
	}).(pulumi.StringPtrOutput)
}

type SparkJobDependentPackage struct {
	GroupName string                            `pulumi:"groupName"`
	Packages  []SparkJobDependentPackagePackage `pulumi:"packages"`
}

// SparkJobDependentPackageInput is an input type that accepts SparkJobDependentPackageArgs and SparkJobDependentPackageOutput values.
// You can construct a concrete instance of `SparkJobDependentPackageInput` via:
//
//	SparkJobDependentPackageArgs{...}
type SparkJobDependentPackageInput interface {
	pulumi.Input

	ToSparkJobDependentPackageOutput() SparkJobDependentPackageOutput
	ToSparkJobDependentPackageOutputWithContext(context.Context) SparkJobDependentPackageOutput
}

type SparkJobDependentPackageArgs struct {
	GroupName pulumi.StringInput                        `pulumi:"groupName"`
	Packages  SparkJobDependentPackagePackageArrayInput `pulumi:"packages"`
}

func (SparkJobDependentPackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobDependentPackage)(nil)).Elem()
}

func (i SparkJobDependentPackageArgs) ToSparkJobDependentPackageOutput() SparkJobDependentPackageOutput {
	return i.ToSparkJobDependentPackageOutputWithContext(context.Background())
}

func (i SparkJobDependentPackageArgs) ToSparkJobDependentPackageOutputWithContext(ctx context.Context) SparkJobDependentPackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobDependentPackageOutput)
}

// SparkJobDependentPackageArrayInput is an input type that accepts SparkJobDependentPackageArray and SparkJobDependentPackageArrayOutput values.
// You can construct a concrete instance of `SparkJobDependentPackageArrayInput` via:
//
//	SparkJobDependentPackageArray{ SparkJobDependentPackageArgs{...} }
type SparkJobDependentPackageArrayInput interface {
	pulumi.Input

	ToSparkJobDependentPackageArrayOutput() SparkJobDependentPackageArrayOutput
	ToSparkJobDependentPackageArrayOutputWithContext(context.Context) SparkJobDependentPackageArrayOutput
}

type SparkJobDependentPackageArray []SparkJobDependentPackageInput

func (SparkJobDependentPackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkJobDependentPackage)(nil)).Elem()
}

func (i SparkJobDependentPackageArray) ToSparkJobDependentPackageArrayOutput() SparkJobDependentPackageArrayOutput {
	return i.ToSparkJobDependentPackageArrayOutputWithContext(context.Background())
}

func (i SparkJobDependentPackageArray) ToSparkJobDependentPackageArrayOutputWithContext(ctx context.Context) SparkJobDependentPackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobDependentPackageArrayOutput)
}

type SparkJobDependentPackageOutput struct{ *pulumi.OutputState }

func (SparkJobDependentPackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobDependentPackage)(nil)).Elem()
}

func (o SparkJobDependentPackageOutput) ToSparkJobDependentPackageOutput() SparkJobDependentPackageOutput {
	return o
}

func (o SparkJobDependentPackageOutput) ToSparkJobDependentPackageOutputWithContext(ctx context.Context) SparkJobDependentPackageOutput {
	return o
}

func (o SparkJobDependentPackageOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobDependentPackage) string { return v.GroupName }).(pulumi.StringOutput)
}

func (o SparkJobDependentPackageOutput) Packages() SparkJobDependentPackagePackageArrayOutput {
	return o.ApplyT(func(v SparkJobDependentPackage) []SparkJobDependentPackagePackage { return v.Packages }).(SparkJobDependentPackagePackageArrayOutput)
}

type SparkJobDependentPackageArrayOutput struct{ *pulumi.OutputState }

func (SparkJobDependentPackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkJobDependentPackage)(nil)).Elem()
}

func (o SparkJobDependentPackageArrayOutput) ToSparkJobDependentPackageArrayOutput() SparkJobDependentPackageArrayOutput {
	return o
}

func (o SparkJobDependentPackageArrayOutput) ToSparkJobDependentPackageArrayOutputWithContext(ctx context.Context) SparkJobDependentPackageArrayOutput {
	return o
}

func (o SparkJobDependentPackageArrayOutput) Index(i pulumi.IntInput) SparkJobDependentPackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SparkJobDependentPackage {
		return vs[0].([]SparkJobDependentPackage)[vs[1].(int)]
	}).(SparkJobDependentPackageOutput)
}

type SparkJobDependentPackagePackage struct {
	PackageName string `pulumi:"packageName"`
	Type        string `pulumi:"type"`
}

// SparkJobDependentPackagePackageInput is an input type that accepts SparkJobDependentPackagePackageArgs and SparkJobDependentPackagePackageOutput values.
// You can construct a concrete instance of `SparkJobDependentPackagePackageInput` via:
//
//	SparkJobDependentPackagePackageArgs{...}
type SparkJobDependentPackagePackageInput interface {
	pulumi.Input

	ToSparkJobDependentPackagePackageOutput() SparkJobDependentPackagePackageOutput
	ToSparkJobDependentPackagePackageOutputWithContext(context.Context) SparkJobDependentPackagePackageOutput
}

type SparkJobDependentPackagePackageArgs struct {
	PackageName pulumi.StringInput `pulumi:"packageName"`
	Type        pulumi.StringInput `pulumi:"type"`
}

func (SparkJobDependentPackagePackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobDependentPackagePackage)(nil)).Elem()
}

func (i SparkJobDependentPackagePackageArgs) ToSparkJobDependentPackagePackageOutput() SparkJobDependentPackagePackageOutput {
	return i.ToSparkJobDependentPackagePackageOutputWithContext(context.Background())
}

func (i SparkJobDependentPackagePackageArgs) ToSparkJobDependentPackagePackageOutputWithContext(ctx context.Context) SparkJobDependentPackagePackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobDependentPackagePackageOutput)
}

// SparkJobDependentPackagePackageArrayInput is an input type that accepts SparkJobDependentPackagePackageArray and SparkJobDependentPackagePackageArrayOutput values.
// You can construct a concrete instance of `SparkJobDependentPackagePackageArrayInput` via:
//
//	SparkJobDependentPackagePackageArray{ SparkJobDependentPackagePackageArgs{...} }
type SparkJobDependentPackagePackageArrayInput interface {
	pulumi.Input

	ToSparkJobDependentPackagePackageArrayOutput() SparkJobDependentPackagePackageArrayOutput
	ToSparkJobDependentPackagePackageArrayOutputWithContext(context.Context) SparkJobDependentPackagePackageArrayOutput
}

type SparkJobDependentPackagePackageArray []SparkJobDependentPackagePackageInput

func (SparkJobDependentPackagePackageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkJobDependentPackagePackage)(nil)).Elem()
}

func (i SparkJobDependentPackagePackageArray) ToSparkJobDependentPackagePackageArrayOutput() SparkJobDependentPackagePackageArrayOutput {
	return i.ToSparkJobDependentPackagePackageArrayOutputWithContext(context.Background())
}

func (i SparkJobDependentPackagePackageArray) ToSparkJobDependentPackagePackageArrayOutputWithContext(ctx context.Context) SparkJobDependentPackagePackageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobDependentPackagePackageArrayOutput)
}

type SparkJobDependentPackagePackageOutput struct{ *pulumi.OutputState }

func (SparkJobDependentPackagePackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SparkJobDependentPackagePackage)(nil)).Elem()
}

func (o SparkJobDependentPackagePackageOutput) ToSparkJobDependentPackagePackageOutput() SparkJobDependentPackagePackageOutput {
	return o
}

func (o SparkJobDependentPackagePackageOutput) ToSparkJobDependentPackagePackageOutputWithContext(ctx context.Context) SparkJobDependentPackagePackageOutput {
	return o
}

func (o SparkJobDependentPackagePackageOutput) PackageName() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobDependentPackagePackage) string { return v.PackageName }).(pulumi.StringOutput)
}

func (o SparkJobDependentPackagePackageOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SparkJobDependentPackagePackage) string { return v.Type }).(pulumi.StringOutput)
}

type SparkJobDependentPackagePackageArrayOutput struct{ *pulumi.OutputState }

func (SparkJobDependentPackagePackageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SparkJobDependentPackagePackage)(nil)).Elem()
}

func (o SparkJobDependentPackagePackageArrayOutput) ToSparkJobDependentPackagePackageArrayOutput() SparkJobDependentPackagePackageArrayOutput {
	return o
}

func (o SparkJobDependentPackagePackageArrayOutput) ToSparkJobDependentPackagePackageArrayOutputWithContext(ctx context.Context) SparkJobDependentPackagePackageArrayOutput {
	return o
}

func (o SparkJobDependentPackagePackageArrayOutput) Index(i pulumi.IntInput) SparkJobDependentPackagePackageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SparkJobDependentPackagePackage {
		return vs[0].([]SparkJobDependentPackagePackage)[vs[1].(int)]
	}).(SparkJobDependentPackagePackageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueueScalingPolicyInput)(nil)).Elem(), QueueScalingPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueScalingPolicyArrayInput)(nil)).Elem(), QueueScalingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueSparkDriverInput)(nil)).Elem(), QueueSparkDriverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueSparkDriverPtrInput)(nil)).Elem(), QueueSparkDriverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkJobDependentPackageInput)(nil)).Elem(), SparkJobDependentPackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkJobDependentPackageArrayInput)(nil)).Elem(), SparkJobDependentPackageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkJobDependentPackagePackageInput)(nil)).Elem(), SparkJobDependentPackagePackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkJobDependentPackagePackageArrayInput)(nil)).Elem(), SparkJobDependentPackagePackageArray{})
	pulumi.RegisterOutputType(QueueScalingPolicyOutput{})
	pulumi.RegisterOutputType(QueueScalingPolicyArrayOutput{})
	pulumi.RegisterOutputType(QueueSparkDriverOutput{})
	pulumi.RegisterOutputType(QueueSparkDriverPtrOutput{})
	pulumi.RegisterOutputType(SparkJobDependentPackageOutput{})
	pulumi.RegisterOutputType(SparkJobDependentPackageArrayOutput{})
	pulumi.RegisterOutputType(SparkJobDependentPackagePackageOutput{})
	pulumi.RegisterOutputType(SparkJobDependentPackagePackageArrayOutput{})
}

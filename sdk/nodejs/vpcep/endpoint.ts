// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Vpcep/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    declare public readonly description: pulumi.Output<string>;
    declare public readonly enableDns: pulumi.Output<boolean | undefined>;
    declare public readonly enableWhitelist: pulumi.Output<boolean | undefined>;
    declare public readonly ipAddress: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public /*out*/ readonly packetId: pulumi.Output<number>;
    declare public /*out*/ readonly privateDomainName: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly serviceId: pulumi.Output<string>;
    declare public /*out*/ readonly serviceName: pulumi.Output<string>;
    declare public /*out*/ readonly serviceType: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly vpcId: pulumi.Output<string>;
    declare public readonly whitelists: pulumi.Output<string[] | undefined>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableDns"] = state?.enableDns;
            resourceInputs["enableWhitelist"] = state?.enableWhitelist;
            resourceInputs["ipAddress"] = state?.ipAddress;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["packetId"] = state?.packetId;
            resourceInputs["privateDomainName"] = state?.privateDomainName;
            resourceInputs["region"] = state?.region;
            resourceInputs["serviceId"] = state?.serviceId;
            resourceInputs["serviceName"] = state?.serviceName;
            resourceInputs["serviceType"] = state?.serviceType;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcId"] = state?.vpcId;
            resourceInputs["whitelists"] = state?.whitelists;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.serviceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["enableDns"] = args?.enableDns;
            resourceInputs["enableWhitelist"] = args?.enableWhitelist;
            resourceInputs["ipAddress"] = args?.ipAddress;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["region"] = args?.region;
            resourceInputs["serviceId"] = args?.serviceId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["whitelists"] = args?.whitelists;
            resourceInputs["packetId"] = undefined /*out*/;
            resourceInputs["privateDomainName"] = undefined /*out*/;
            resourceInputs["serviceName"] = undefined /*out*/;
            resourceInputs["serviceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    description?: pulumi.Input<string>;
    enableDns?: pulumi.Input<boolean>;
    enableWhitelist?: pulumi.Input<boolean>;
    ipAddress?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    packetId?: pulumi.Input<number>;
    privateDomainName?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceId?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId?: pulumi.Input<string>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    description?: pulumi.Input<string>;
    enableDns?: pulumi.Input<boolean>;
    enableWhitelist?: pulumi.Input<boolean>;
    ipAddress?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serviceId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
    whitelists?: pulumi.Input<pulumi.Input<string>[]>;
}

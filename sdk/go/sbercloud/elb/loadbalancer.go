// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages an ELB loadbalancer resource within SberCloud.
//
// ## Example Usage
//
// ### Basic Loadbalancer
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/elb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elb.NewLoadbalancer(ctx, "lb_1", &elb.LoadbalancerArgs{
//				VipSubnetId: pulumi.String("d9415786-5f1a-428b-b35f-2f1523e146d2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Loadbalancer With EIP
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/elb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			lb1, err := elb.NewLoadbalancer(ctx, "lb_1", &elb.LoadbalancerArgs{
//				VipSubnetId: pulumi.String("d9415786-5f1a-428b-b35f-2f1523e146d2"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = sbercloud.NewNetworkingEipAssociate(ctx, "eip_1", &sbercloud.NetworkingEipAssociateArgs{
//				PublicIp: pulumi.String("1.2.3.4"),
//				PortId:   lb1.VipPortId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load balancers can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import sbercloud:Elb/loadbalancer:Loadbalancer test 3e3632db-36c6-4b28-a92e-e72e6562daa6
// ```
type Loadbalancer struct {
	pulumi.CustomResourceState

	// The administrative state of the loadbalancer. A valid value is true (UP) or
	// false (DOWN).
	AdminStateUp pulumi.BoolPtrOutput   `pulumi:"adminStateUp"`
	AutoRenew    pulumi.StringPtrOutput `pulumi:"autoRenew"`
	ChargeMode   pulumi.StringOutput    `pulumi:"chargeMode"`
	ChargingMode pulumi.StringOutput    `pulumi:"chargingMode"`
	CreatedAt    pulumi.StringOutput    `pulumi:"createdAt"`
	// Human-readable description for the loadbalancer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The enterprise project id of the loadbalancer. Changing this
	// creates a new loadbalancer.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// schema: Deprecated
	Flavor      pulumi.StringPtrOutput `pulumi:"flavor"`
	FrozenScene pulumi.StringOutput    `pulumi:"frozenScene"`
	// schema: Deprecated
	LoadbalancerProvider pulumi.StringOutput `pulumi:"loadbalancerProvider"`
	// Human-readable name for the loadbalancer. Does not have to be unique.
	Name             pulumi.StringOutput    `pulumi:"name"`
	Period           pulumi.IntPtrOutput    `pulumi:"period"`
	PeriodUnit       pulumi.StringPtrOutput `pulumi:"periodUnit"`
	ProtectionReason pulumi.StringPtrOutput `pulumi:"protectionReason"`
	ProtectionStatus pulumi.StringOutput    `pulumi:"protectionStatus"`
	PublicIp         pulumi.StringOutput    `pulumi:"publicIp"`
	// The region in which to create the loadbalancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new loadbalancer.
	Region pulumi.StringOutput `pulumi:"region"`
	// schema: Deprecated
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The key/value pairs to associate with the loadbalancer.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Deprecated: tenant_id is deprecated
	TenantId  pulumi.StringOutput `pulumi:"tenantId"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The ip address of the load balancer. Changing this creates a new
	// loadbalancer.
	VipAddress pulumi.StringOutput `pulumi:"vipAddress"`
	// The Port ID of the Load Balancer IP.
	VipPortId pulumi.StringOutput `pulumi:"vipPortId"`
	// The network on which to allocate the loadbalancer's address. A tenant
	// can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are
	// shared). Changing this creates a new loadbalancer.
	VipSubnetId pulumi.StringOutput `pulumi:"vipSubnetId"`
}

// NewLoadbalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancer(ctx *pulumi.Context,
	name string, args *LoadbalancerArgs, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VipSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'VipSubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Loadbalancer
	err := ctx.RegisterResource("sbercloud:Elb/loadbalancer:Loadbalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancer gets an existing Loadbalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerState, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	var resource Loadbalancer
	err := ctx.ReadResource("sbercloud:Elb/loadbalancer:Loadbalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Loadbalancer resources.
type loadbalancerState struct {
	// The administrative state of the loadbalancer. A valid value is true (UP) or
	// false (DOWN).
	AdminStateUp *bool   `pulumi:"adminStateUp"`
	AutoRenew    *string `pulumi:"autoRenew"`
	ChargeMode   *string `pulumi:"chargeMode"`
	ChargingMode *string `pulumi:"chargingMode"`
	CreatedAt    *string `pulumi:"createdAt"`
	// Human-readable description for the loadbalancer.
	Description *string `pulumi:"description"`
	// The enterprise project id of the loadbalancer. Changing this
	// creates a new loadbalancer.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Deprecated
	Flavor      *string `pulumi:"flavor"`
	FrozenScene *string `pulumi:"frozenScene"`
	// schema: Deprecated
	LoadbalancerProvider *string `pulumi:"loadbalancerProvider"`
	// Human-readable name for the loadbalancer. Does not have to be unique.
	Name             *string `pulumi:"name"`
	Period           *int    `pulumi:"period"`
	PeriodUnit       *string `pulumi:"periodUnit"`
	ProtectionReason *string `pulumi:"protectionReason"`
	ProtectionStatus *string `pulumi:"protectionStatus"`
	PublicIp         *string `pulumi:"publicIp"`
	// The region in which to create the loadbalancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new loadbalancer.
	Region *string `pulumi:"region"`
	// schema: Deprecated
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The key/value pairs to associate with the loadbalancer.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: tenant_id is deprecated
	TenantId  *string `pulumi:"tenantId"`
	UpdatedAt *string `pulumi:"updatedAt"`
	// The ip address of the load balancer. Changing this creates a new
	// loadbalancer.
	VipAddress *string `pulumi:"vipAddress"`
	// The Port ID of the Load Balancer IP.
	VipPortId *string `pulumi:"vipPortId"`
	// The network on which to allocate the loadbalancer's address. A tenant
	// can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are
	// shared). Changing this creates a new loadbalancer.
	VipSubnetId *string `pulumi:"vipSubnetId"`
}

type LoadbalancerState struct {
	// The administrative state of the loadbalancer. A valid value is true (UP) or
	// false (DOWN).
	AdminStateUp pulumi.BoolPtrInput
	AutoRenew    pulumi.StringPtrInput
	ChargeMode   pulumi.StringPtrInput
	ChargingMode pulumi.StringPtrInput
	CreatedAt    pulumi.StringPtrInput
	// Human-readable description for the loadbalancer.
	Description pulumi.StringPtrInput
	// The enterprise project id of the loadbalancer. Changing this
	// creates a new loadbalancer.
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Deprecated
	Flavor      pulumi.StringPtrInput
	FrozenScene pulumi.StringPtrInput
	// schema: Deprecated
	LoadbalancerProvider pulumi.StringPtrInput
	// Human-readable name for the loadbalancer. Does not have to be unique.
	Name             pulumi.StringPtrInput
	Period           pulumi.IntPtrInput
	PeriodUnit       pulumi.StringPtrInput
	ProtectionReason pulumi.StringPtrInput
	ProtectionStatus pulumi.StringPtrInput
	PublicIp         pulumi.StringPtrInput
	// The region in which to create the loadbalancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new loadbalancer.
	Region pulumi.StringPtrInput
	// schema: Deprecated
	SecurityGroupIds pulumi.StringArrayInput
	// The key/value pairs to associate with the loadbalancer.
	Tags pulumi.StringMapInput
	// Deprecated: tenant_id is deprecated
	TenantId  pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
	// The ip address of the load balancer. Changing this creates a new
	// loadbalancer.
	VipAddress pulumi.StringPtrInput
	// The Port ID of the Load Balancer IP.
	VipPortId pulumi.StringPtrInput
	// The network on which to allocate the loadbalancer's address. A tenant
	// can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are
	// shared). Changing this creates a new loadbalancer.
	VipSubnetId pulumi.StringPtrInput
}

func (LoadbalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerState)(nil)).Elem()
}

type loadbalancerArgs struct {
	// The administrative state of the loadbalancer. A valid value is true (UP) or
	// false (DOWN).
	AdminStateUp *bool   `pulumi:"adminStateUp"`
	AutoRenew    *string `pulumi:"autoRenew"`
	ChargingMode *string `pulumi:"chargingMode"`
	// Human-readable description for the loadbalancer.
	Description *string `pulumi:"description"`
	// The enterprise project id of the loadbalancer. Changing this
	// creates a new loadbalancer.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Deprecated
	Flavor *string `pulumi:"flavor"`
	// schema: Deprecated
	LoadbalancerProvider *string `pulumi:"loadbalancerProvider"`
	// Human-readable name for the loadbalancer. Does not have to be unique.
	Name             *string `pulumi:"name"`
	Period           *int    `pulumi:"period"`
	PeriodUnit       *string `pulumi:"periodUnit"`
	ProtectionReason *string `pulumi:"protectionReason"`
	ProtectionStatus *string `pulumi:"protectionStatus"`
	// The region in which to create the loadbalancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new loadbalancer.
	Region *string `pulumi:"region"`
	// schema: Deprecated
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The key/value pairs to associate with the loadbalancer.
	Tags map[string]string `pulumi:"tags"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	// The ip address of the load balancer. Changing this creates a new
	// loadbalancer.
	VipAddress *string `pulumi:"vipAddress"`
	// The network on which to allocate the loadbalancer's address. A tenant
	// can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are
	// shared). Changing this creates a new loadbalancer.
	VipSubnetId string `pulumi:"vipSubnetId"`
}

// The set of arguments for constructing a Loadbalancer resource.
type LoadbalancerArgs struct {
	// The administrative state of the loadbalancer. A valid value is true (UP) or
	// false (DOWN).
	AdminStateUp pulumi.BoolPtrInput
	AutoRenew    pulumi.StringPtrInput
	ChargingMode pulumi.StringPtrInput
	// Human-readable description for the loadbalancer.
	Description pulumi.StringPtrInput
	// The enterprise project id of the loadbalancer. Changing this
	// creates a new loadbalancer.
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Deprecated
	Flavor pulumi.StringPtrInput
	// schema: Deprecated
	LoadbalancerProvider pulumi.StringPtrInput
	// Human-readable name for the loadbalancer. Does not have to be unique.
	Name             pulumi.StringPtrInput
	Period           pulumi.IntPtrInput
	PeriodUnit       pulumi.StringPtrInput
	ProtectionReason pulumi.StringPtrInput
	ProtectionStatus pulumi.StringPtrInput
	// The region in which to create the loadbalancer resource. If omitted, the
	// provider-level region will be used. Changing this creates a new loadbalancer.
	Region pulumi.StringPtrInput
	// schema: Deprecated
	SecurityGroupIds pulumi.StringArrayInput
	// The key/value pairs to associate with the loadbalancer.
	Tags pulumi.StringMapInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	// The ip address of the load balancer. Changing this creates a new
	// loadbalancer.
	VipAddress pulumi.StringPtrInput
	// The network on which to allocate the loadbalancer's address. A tenant
	// can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are
	// shared). Changing this creates a new loadbalancer.
	VipSubnetId pulumi.StringInput
}

func (LoadbalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerArgs)(nil)).Elem()
}

type LoadbalancerInput interface {
	pulumi.Input

	ToLoadbalancerOutput() LoadbalancerOutput
	ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput
}

func (*Loadbalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (i *Loadbalancer) ToLoadbalancerOutput() LoadbalancerOutput {
	return i.ToLoadbalancerOutputWithContext(context.Background())
}

func (i *Loadbalancer) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOutput)
}

// LoadbalancerArrayInput is an input type that accepts LoadbalancerArray and LoadbalancerArrayOutput values.
// You can construct a concrete instance of `LoadbalancerArrayInput` via:
//
//	LoadbalancerArray{ LoadbalancerArgs{...} }
type LoadbalancerArrayInput interface {
	pulumi.Input

	ToLoadbalancerArrayOutput() LoadbalancerArrayOutput
	ToLoadbalancerArrayOutputWithContext(context.Context) LoadbalancerArrayOutput
}

type LoadbalancerArray []LoadbalancerInput

func (LoadbalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Loadbalancer)(nil)).Elem()
}

func (i LoadbalancerArray) ToLoadbalancerArrayOutput() LoadbalancerArrayOutput {
	return i.ToLoadbalancerArrayOutputWithContext(context.Background())
}

func (i LoadbalancerArray) ToLoadbalancerArrayOutputWithContext(ctx context.Context) LoadbalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerArrayOutput)
}

// LoadbalancerMapInput is an input type that accepts LoadbalancerMap and LoadbalancerMapOutput values.
// You can construct a concrete instance of `LoadbalancerMapInput` via:
//
//	LoadbalancerMap{ "key": LoadbalancerArgs{...} }
type LoadbalancerMapInput interface {
	pulumi.Input

	ToLoadbalancerMapOutput() LoadbalancerMapOutput
	ToLoadbalancerMapOutputWithContext(context.Context) LoadbalancerMapOutput
}

type LoadbalancerMap map[string]LoadbalancerInput

func (LoadbalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Loadbalancer)(nil)).Elem()
}

func (i LoadbalancerMap) ToLoadbalancerMapOutput() LoadbalancerMapOutput {
	return i.ToLoadbalancerMapOutputWithContext(context.Background())
}

func (i LoadbalancerMap) ToLoadbalancerMapOutputWithContext(ctx context.Context) LoadbalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerMapOutput)
}

type LoadbalancerOutput struct{ *pulumi.OutputState }

func (LoadbalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerOutput) ToLoadbalancerOutput() LoadbalancerOutput {
	return o
}

func (o LoadbalancerOutput) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return o
}

// The administrative state of the loadbalancer. A valid value is true (UP) or
// false (DOWN).
func (o LoadbalancerOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o LoadbalancerOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

func (o LoadbalancerOutput) ChargeMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.ChargeMode }).(pulumi.StringOutput)
}

func (o LoadbalancerOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o LoadbalancerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Human-readable description for the loadbalancer.
func (o LoadbalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The enterprise project id of the loadbalancer. Changing this
// creates a new loadbalancer.
func (o LoadbalancerOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// schema: Deprecated
func (o LoadbalancerOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.Flavor }).(pulumi.StringPtrOutput)
}

func (o LoadbalancerOutput) FrozenScene() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.FrozenScene }).(pulumi.StringOutput)
}

// schema: Deprecated
func (o LoadbalancerOutput) LoadbalancerProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.LoadbalancerProvider }).(pulumi.StringOutput)
}

// Human-readable name for the loadbalancer. Does not have to be unique.
func (o LoadbalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o LoadbalancerOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o LoadbalancerOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

func (o LoadbalancerOutput) ProtectionReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.ProtectionReason }).(pulumi.StringPtrOutput)
}

func (o LoadbalancerOutput) ProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.ProtectionStatus }).(pulumi.StringOutput)
}

func (o LoadbalancerOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// The region in which to create the loadbalancer resource. If omitted, the
// provider-level region will be used. Changing this creates a new loadbalancer.
func (o LoadbalancerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// schema: Deprecated
func (o LoadbalancerOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The key/value pairs to associate with the loadbalancer.
func (o LoadbalancerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Deprecated: tenant_id is deprecated
func (o LoadbalancerOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o LoadbalancerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The ip address of the load balancer. Changing this creates a new
// loadbalancer.
func (o LoadbalancerOutput) VipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.VipAddress }).(pulumi.StringOutput)
}

// The Port ID of the Load Balancer IP.
func (o LoadbalancerOutput) VipPortId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.VipPortId }).(pulumi.StringOutput)
}

// The network on which to allocate the loadbalancer's address. A tenant
// can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are
// shared). Changing this creates a new loadbalancer.
func (o LoadbalancerOutput) VipSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.VipSubnetId }).(pulumi.StringOutput)
}

type LoadbalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerArrayOutput) ToLoadbalancerArrayOutput() LoadbalancerArrayOutput {
	return o
}

func (o LoadbalancerArrayOutput) ToLoadbalancerArrayOutputWithContext(ctx context.Context) LoadbalancerArrayOutput {
	return o
}

func (o LoadbalancerArrayOutput) Index(i pulumi.IntInput) LoadbalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Loadbalancer {
		return vs[0].([]*Loadbalancer)[vs[1].(int)]
	}).(LoadbalancerOutput)
}

type LoadbalancerMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerMapOutput) ToLoadbalancerMapOutput() LoadbalancerMapOutput {
	return o
}

func (o LoadbalancerMapOutput) ToLoadbalancerMapOutputWithContext(ctx context.Context) LoadbalancerMapOutput {
	return o
}

func (o LoadbalancerMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Loadbalancer {
		return vs[0].(map[string]*Loadbalancer)[vs[1].(string)]
	}).(LoadbalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerInput)(nil)).Elem(), &Loadbalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerArrayInput)(nil)).Elem(), LoadbalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerMapInput)(nil)).Elem(), LoadbalancerMap{})
	pulumi.RegisterOutputType(LoadbalancerOutput{})
	pulumi.RegisterOutputType(LoadbalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerMapOutput{})
}

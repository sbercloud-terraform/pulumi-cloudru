// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type PgHba struct {
	pulumi.CustomResourceState

	// Specifies the list of host based authentications.
	HostBasedAuthentications PgHbaHostBasedAuthenticationArrayOutput `pulumi:"hostBasedAuthentications"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Region     pulumi.StringOutput `pulumi:"region"`
}

// NewPgHba registers a new resource with the given unique name, arguments, and options.
func NewPgHba(ctx *pulumi.Context,
	name string, args *PgHbaArgs, opts ...pulumi.ResourceOption) (*PgHba, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostBasedAuthentications == nil {
		return nil, errors.New("invalid value for required argument 'HostBasedAuthentications'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PgHba
	err := ctx.RegisterResource("cloudru:Rds/pgHba:PgHba", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgHba gets an existing PgHba resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgHba(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgHbaState, opts ...pulumi.ResourceOption) (*PgHba, error) {
	var resource PgHba
	err := ctx.ReadResource("cloudru:Rds/pgHba:PgHba", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgHba resources.
type pgHbaState struct {
	// Specifies the list of host based authentications.
	HostBasedAuthentications []PgHbaHostBasedAuthentication `pulumi:"hostBasedAuthentications"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId *string `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

type PgHbaState struct {
	// Specifies the list of host based authentications.
	HostBasedAuthentications PgHbaHostBasedAuthenticationArrayInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
}

func (PgHbaState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgHbaState)(nil)).Elem()
}

type pgHbaArgs struct {
	// Specifies the list of host based authentications.
	HostBasedAuthentications []PgHbaHostBasedAuthentication `pulumi:"hostBasedAuthentications"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
}

// The set of arguments for constructing a PgHba resource.
type PgHbaArgs struct {
	// Specifies the list of host based authentications.
	HostBasedAuthentications PgHbaHostBasedAuthenticationArrayInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringInput
	Region     pulumi.StringPtrInput
}

func (PgHbaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgHbaArgs)(nil)).Elem()
}

type PgHbaInput interface {
	pulumi.Input

	ToPgHbaOutput() PgHbaOutput
	ToPgHbaOutputWithContext(ctx context.Context) PgHbaOutput
}

func (*PgHba) ElementType() reflect.Type {
	return reflect.TypeOf((**PgHba)(nil)).Elem()
}

func (i *PgHba) ToPgHbaOutput() PgHbaOutput {
	return i.ToPgHbaOutputWithContext(context.Background())
}

func (i *PgHba) ToPgHbaOutputWithContext(ctx context.Context) PgHbaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgHbaOutput)
}

// PgHbaArrayInput is an input type that accepts PgHbaArray and PgHbaArrayOutput values.
// You can construct a concrete instance of `PgHbaArrayInput` via:
//
//	PgHbaArray{ PgHbaArgs{...} }
type PgHbaArrayInput interface {
	pulumi.Input

	ToPgHbaArrayOutput() PgHbaArrayOutput
	ToPgHbaArrayOutputWithContext(context.Context) PgHbaArrayOutput
}

type PgHbaArray []PgHbaInput

func (PgHbaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgHba)(nil)).Elem()
}

func (i PgHbaArray) ToPgHbaArrayOutput() PgHbaArrayOutput {
	return i.ToPgHbaArrayOutputWithContext(context.Background())
}

func (i PgHbaArray) ToPgHbaArrayOutputWithContext(ctx context.Context) PgHbaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgHbaArrayOutput)
}

// PgHbaMapInput is an input type that accepts PgHbaMap and PgHbaMapOutput values.
// You can construct a concrete instance of `PgHbaMapInput` via:
//
//	PgHbaMap{ "key": PgHbaArgs{...} }
type PgHbaMapInput interface {
	pulumi.Input

	ToPgHbaMapOutput() PgHbaMapOutput
	ToPgHbaMapOutputWithContext(context.Context) PgHbaMapOutput
}

type PgHbaMap map[string]PgHbaInput

func (PgHbaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgHba)(nil)).Elem()
}

func (i PgHbaMap) ToPgHbaMapOutput() PgHbaMapOutput {
	return i.ToPgHbaMapOutputWithContext(context.Background())
}

func (i PgHbaMap) ToPgHbaMapOutputWithContext(ctx context.Context) PgHbaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgHbaMapOutput)
}

type PgHbaOutput struct{ *pulumi.OutputState }

func (PgHbaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgHba)(nil)).Elem()
}

func (o PgHbaOutput) ToPgHbaOutput() PgHbaOutput {
	return o
}

func (o PgHbaOutput) ToPgHbaOutputWithContext(ctx context.Context) PgHbaOutput {
	return o
}

// Specifies the list of host based authentications.
func (o PgHbaOutput) HostBasedAuthentications() PgHbaHostBasedAuthenticationArrayOutput {
	return o.ApplyT(func(v *PgHba) PgHbaHostBasedAuthenticationArrayOutput { return v.HostBasedAuthentications }).(PgHbaHostBasedAuthenticationArrayOutput)
}

// Specifies the ID of the RDS PostgreSQL instance.
func (o PgHbaOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgHba) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o PgHbaOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PgHba) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type PgHbaArrayOutput struct{ *pulumi.OutputState }

func (PgHbaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgHba)(nil)).Elem()
}

func (o PgHbaArrayOutput) ToPgHbaArrayOutput() PgHbaArrayOutput {
	return o
}

func (o PgHbaArrayOutput) ToPgHbaArrayOutputWithContext(ctx context.Context) PgHbaArrayOutput {
	return o
}

func (o PgHbaArrayOutput) Index(i pulumi.IntInput) PgHbaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgHba {
		return vs[0].([]*PgHba)[vs[1].(int)]
	}).(PgHbaOutput)
}

type PgHbaMapOutput struct{ *pulumi.OutputState }

func (PgHbaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgHba)(nil)).Elem()
}

func (o PgHbaMapOutput) ToPgHbaMapOutput() PgHbaMapOutput {
	return o
}

func (o PgHbaMapOutput) ToPgHbaMapOutputWithContext(ctx context.Context) PgHbaMapOutput {
	return o
}

func (o PgHbaMapOutput) MapIndex(k pulumi.StringInput) PgHbaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgHba {
		return vs[0].(map[string]*PgHba)[vs[1].(string)]
	}).(PgHbaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgHbaInput)(nil)).Elem(), &PgHba{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgHbaArrayInput)(nil)).Elem(), PgHbaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgHbaMapInput)(nil)).Elem(), PgHbaMap{})
	pulumi.RegisterOutputType(PgHbaOutput{})
	pulumi.RegisterOutputType(PgHbaArrayOutput{})
	pulumi.RegisterOutputType(PgHbaMapOutput{})
}

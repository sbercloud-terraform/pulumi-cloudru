// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class CustomAuthorizer extends pulumi.CustomResource {
    /**
     * Get an existing CustomAuthorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomAuthorizerState, opts?: pulumi.CustomResourceOptions): CustomAuthorizer {
        return new CustomAuthorizer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:DedicatedApig/customAuthorizer:CustomAuthorizer';

    /**
     * Returns true if the given object is an instance of CustomAuthorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomAuthorizer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomAuthorizer.__pulumiType;
    }

    /**
     * The maximum cache age.
     */
    public readonly cacheAge!: pulumi.Output<number | undefined>;
    /**
     * The creation time of the custom authorizer.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The version alias URI of the FGS function.
     */
    public readonly functionAliasUri!: pulumi.Output<string>;
    /**
     * The URN of the FGS function.
     */
    public readonly functionUrn!: pulumi.Output<string>;
    /**
     * The version of the FGS function.
     */
    public readonly functionVersion!: pulumi.Output<string>;
    /**
     * The array of one or more parameter identities of the custom authorizer.
     */
    public readonly identities!: pulumi.Output<outputs.DedicatedApig.CustomAuthorizerIdentity[] | undefined>;
    /**
     * The ID of the dedicated instance to which the custom authorizer belongs.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Whether to send the body.
     */
    public readonly isBodySend!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the custom authorizer.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The framework type of the function.
     */
    public readonly networkType!: pulumi.Output<string>;
    /**
     * The region where the custom authorizer is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The custom authorization type
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The user data for custom authorizer function.
     */
    public readonly userData!: pulumi.Output<string | undefined>;

    /**
     * Create a CustomAuthorizer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomAuthorizerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomAuthorizerArgs | CustomAuthorizerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomAuthorizerState | undefined;
            resourceInputs["cacheAge"] = state ? state.cacheAge : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["functionAliasUri"] = state ? state.functionAliasUri : undefined;
            resourceInputs["functionUrn"] = state ? state.functionUrn : undefined;
            resourceInputs["functionVersion"] = state ? state.functionVersion : undefined;
            resourceInputs["identities"] = state ? state.identities : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["isBodySend"] = state ? state.isBodySend : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
        } else {
            const args = argsOrState as CustomAuthorizerArgs | undefined;
            if ((!args || args.functionUrn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionUrn'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["cacheAge"] = args ? args.cacheAge : undefined;
            resourceInputs["functionAliasUri"] = args ? args.functionAliasUri : undefined;
            resourceInputs["functionUrn"] = args ? args.functionUrn : undefined;
            resourceInputs["functionVersion"] = args ? args.functionVersion : undefined;
            resourceInputs["identities"] = args ? args.identities : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["isBodySend"] = args ? args.isBodySend : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomAuthorizer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomAuthorizer resources.
 */
export interface CustomAuthorizerState {
    /**
     * The maximum cache age.
     */
    cacheAge?: pulumi.Input<number>;
    /**
     * The creation time of the custom authorizer.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The version alias URI of the FGS function.
     */
    functionAliasUri?: pulumi.Input<string>;
    /**
     * The URN of the FGS function.
     */
    functionUrn?: pulumi.Input<string>;
    /**
     * The version of the FGS function.
     */
    functionVersion?: pulumi.Input<string>;
    /**
     * The array of one or more parameter identities of the custom authorizer.
     */
    identities?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.CustomAuthorizerIdentity>[]>;
    /**
     * The ID of the dedicated instance to which the custom authorizer belongs.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Whether to send the body.
     */
    isBodySend?: pulumi.Input<boolean>;
    /**
     * The name of the custom authorizer.
     */
    name?: pulumi.Input<string>;
    /**
     * The framework type of the function.
     */
    networkType?: pulumi.Input<string>;
    /**
     * The region where the custom authorizer is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The custom authorization type
     */
    type?: pulumi.Input<string>;
    /**
     * The user data for custom authorizer function.
     */
    userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomAuthorizer resource.
 */
export interface CustomAuthorizerArgs {
    /**
     * The maximum cache age.
     */
    cacheAge?: pulumi.Input<number>;
    /**
     * The version alias URI of the FGS function.
     */
    functionAliasUri?: pulumi.Input<string>;
    /**
     * The URN of the FGS function.
     */
    functionUrn: pulumi.Input<string>;
    /**
     * The version of the FGS function.
     */
    functionVersion?: pulumi.Input<string>;
    /**
     * The array of one or more parameter identities of the custom authorizer.
     */
    identities?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.CustomAuthorizerIdentity>[]>;
    /**
     * The ID of the dedicated instance to which the custom authorizer belongs.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Whether to send the body.
     */
    isBodySend?: pulumi.Input<boolean>;
    /**
     * The name of the custom authorizer.
     */
    name?: pulumi.Input<string>;
    /**
     * The framework type of the function.
     */
    networkType?: pulumi.Input<string>;
    /**
     * The region where the custom authorizer is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The custom authorization type
     */
    type?: pulumi.Input<string>;
    /**
     * The user data for custom authorizer function.
     */
    userData?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to filter ER instances within SberCloud.
 *
 * Before using enterprise router, define custom endpoint as shown below:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.Er.getInstances({
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 */
export function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Er/getInstances:getInstances", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "instanceId": args.instanceId,
        "name": args.name,
        "ownedBySelf": args.ownedBySelf,
        "region": args.region,
        "status": args.status,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    /**
     * Specifies the enterprise project ID of the ER instances to be queried.
     */
    enterpriseProjectId?: string;
    /**
     * Specifies the ID used to query specified ER instance.
     */
    instanceId?: string;
    /**
     * Specifies the name used to filter the ER instances.
     * The valid length is limited from `1` to `64`, only Chinese and English letters, digits, underscores (_) and
     * hyphens (-) are allowed.
     */
    name?: string;
    /**
     * Specifies whether resources belong to the current renant.
     */
    ownedBySelf?: boolean;
    /**
     * Specifies the region where the ER instances are located.  
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the status used to filter the ER instances.
     */
    status?: string;
    /**
     * Specifies the key/value pairs used to filter the ER instances.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    /**
     * The ID of enterprise project to which the ER instance belongs.
     */
    readonly enterpriseProjectId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId?: string;
    /**
     * All instances that match the filter parameters.  
     * The object structure is documented below.
     */
    readonly instances: outputs.Er.GetInstancesInstance[];
    /**
     * The name of the ER instance.
     */
    readonly name?: string;
    readonly ownedBySelf?: boolean;
    readonly region?: string;
    /**
     * The current status of the ER instance.
     */
    readonly status?: string;
    /**
     * The key/value pairs to associate with the ER instance.
     */
    readonly tags?: {[key: string]: string};
}
/**
 * Use this data source to filter ER instances within SberCloud.
 *
 * Before using enterprise router, define custom endpoint as shown below:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.Er.getInstances({
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 */
export function getInstancesOutput(args?: GetInstancesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetInstancesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Er/getInstances:getInstances", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "instanceId": args.instanceId,
        "name": args.name,
        "ownedBySelf": args.ownedBySelf,
        "region": args.region,
        "status": args.status,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesOutputArgs {
    /**
     * Specifies the enterprise project ID of the ER instances to be queried.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the ID used to query specified ER instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the name used to filter the ER instances.
     * The valid length is limited from `1` to `64`, only Chinese and English letters, digits, underscores (_) and
     * hyphens (-) are allowed.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether resources belong to the current renant.
     */
    ownedBySelf?: pulumi.Input<boolean>;
    /**
     * Specifies the region where the ER instances are located.  
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the status used to filter the ER instances.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs used to filter the ER instances.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type CceClusterUpgrade struct {
	pulumi.CustomResourceState

	Addons         CceClusterUpgradeAddonArrayOutput `pulumi:"addons"`
	ClusterId      pulumi.StringOutput               `pulumi:"clusterId"`
	CurrentVersion pulumi.StringPtrOutput            `pulumi:"currentVersion"`
	EnableForceNew pulumi.StringPtrOutput            `pulumi:"enableForceNew"`
	IsPostcheck    pulumi.BoolPtrOutput              `pulumi:"isPostcheck"`
	IsSnapshot     pulumi.BoolPtrOutput              `pulumi:"isSnapshot"`
	NodeOrder      pulumi.StringMapOutput            `pulumi:"nodeOrder"`
	NodepoolOrder  pulumi.IntMapOutput               `pulumi:"nodepoolOrder"`
	Region         pulumi.StringOutput               `pulumi:"region"`
	Strategy       CceClusterUpgradeStrategyOutput   `pulumi:"strategy"`
	TargetVersion  pulumi.StringOutput               `pulumi:"targetVersion"`
}

// NewCceClusterUpgrade registers a new resource with the given unique name, arguments, and options.
func NewCceClusterUpgrade(ctx *pulumi.Context,
	name string, args *CceClusterUpgradeArgs, opts ...pulumi.ResourceOption) (*CceClusterUpgrade, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Strategy == nil {
		return nil, errors.New("invalid value for required argument 'Strategy'")
	}
	if args.TargetVersion == nil {
		return nil, errors.New("invalid value for required argument 'TargetVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CceClusterUpgrade
	err := ctx.RegisterResource("cloudru:index/cceClusterUpgrade:CceClusterUpgrade", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCceClusterUpgrade gets an existing CceClusterUpgrade resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCceClusterUpgrade(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CceClusterUpgradeState, opts ...pulumi.ResourceOption) (*CceClusterUpgrade, error) {
	var resource CceClusterUpgrade
	err := ctx.ReadResource("cloudru:index/cceClusterUpgrade:CceClusterUpgrade", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CceClusterUpgrade resources.
type cceClusterUpgradeState struct {
	Addons         []CceClusterUpgradeAddon   `pulumi:"addons"`
	ClusterId      *string                    `pulumi:"clusterId"`
	CurrentVersion *string                    `pulumi:"currentVersion"`
	EnableForceNew *string                    `pulumi:"enableForceNew"`
	IsPostcheck    *bool                      `pulumi:"isPostcheck"`
	IsSnapshot     *bool                      `pulumi:"isSnapshot"`
	NodeOrder      map[string]string          `pulumi:"nodeOrder"`
	NodepoolOrder  map[string]int             `pulumi:"nodepoolOrder"`
	Region         *string                    `pulumi:"region"`
	Strategy       *CceClusterUpgradeStrategy `pulumi:"strategy"`
	TargetVersion  *string                    `pulumi:"targetVersion"`
}

type CceClusterUpgradeState struct {
	Addons         CceClusterUpgradeAddonArrayInput
	ClusterId      pulumi.StringPtrInput
	CurrentVersion pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	IsPostcheck    pulumi.BoolPtrInput
	IsSnapshot     pulumi.BoolPtrInput
	NodeOrder      pulumi.StringMapInput
	NodepoolOrder  pulumi.IntMapInput
	Region         pulumi.StringPtrInput
	Strategy       CceClusterUpgradeStrategyPtrInput
	TargetVersion  pulumi.StringPtrInput
}

func (CceClusterUpgradeState) ElementType() reflect.Type {
	return reflect.TypeOf((*cceClusterUpgradeState)(nil)).Elem()
}

type cceClusterUpgradeArgs struct {
	Addons         []CceClusterUpgradeAddon  `pulumi:"addons"`
	ClusterId      string                    `pulumi:"clusterId"`
	CurrentVersion *string                   `pulumi:"currentVersion"`
	EnableForceNew *string                   `pulumi:"enableForceNew"`
	IsPostcheck    *bool                     `pulumi:"isPostcheck"`
	IsSnapshot     *bool                     `pulumi:"isSnapshot"`
	NodeOrder      map[string]string         `pulumi:"nodeOrder"`
	NodepoolOrder  map[string]int            `pulumi:"nodepoolOrder"`
	Region         *string                   `pulumi:"region"`
	Strategy       CceClusterUpgradeStrategy `pulumi:"strategy"`
	TargetVersion  string                    `pulumi:"targetVersion"`
}

// The set of arguments for constructing a CceClusterUpgrade resource.
type CceClusterUpgradeArgs struct {
	Addons         CceClusterUpgradeAddonArrayInput
	ClusterId      pulumi.StringInput
	CurrentVersion pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	IsPostcheck    pulumi.BoolPtrInput
	IsSnapshot     pulumi.BoolPtrInput
	NodeOrder      pulumi.StringMapInput
	NodepoolOrder  pulumi.IntMapInput
	Region         pulumi.StringPtrInput
	Strategy       CceClusterUpgradeStrategyInput
	TargetVersion  pulumi.StringInput
}

func (CceClusterUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cceClusterUpgradeArgs)(nil)).Elem()
}

type CceClusterUpgradeInput interface {
	pulumi.Input

	ToCceClusterUpgradeOutput() CceClusterUpgradeOutput
	ToCceClusterUpgradeOutputWithContext(ctx context.Context) CceClusterUpgradeOutput
}

func (*CceClusterUpgrade) ElementType() reflect.Type {
	return reflect.TypeOf((**CceClusterUpgrade)(nil)).Elem()
}

func (i *CceClusterUpgrade) ToCceClusterUpgradeOutput() CceClusterUpgradeOutput {
	return i.ToCceClusterUpgradeOutputWithContext(context.Background())
}

func (i *CceClusterUpgrade) ToCceClusterUpgradeOutputWithContext(ctx context.Context) CceClusterUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceClusterUpgradeOutput)
}

// CceClusterUpgradeArrayInput is an input type that accepts CceClusterUpgradeArray and CceClusterUpgradeArrayOutput values.
// You can construct a concrete instance of `CceClusterUpgradeArrayInput` via:
//
//	CceClusterUpgradeArray{ CceClusterUpgradeArgs{...} }
type CceClusterUpgradeArrayInput interface {
	pulumi.Input

	ToCceClusterUpgradeArrayOutput() CceClusterUpgradeArrayOutput
	ToCceClusterUpgradeArrayOutputWithContext(context.Context) CceClusterUpgradeArrayOutput
}

type CceClusterUpgradeArray []CceClusterUpgradeInput

func (CceClusterUpgradeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CceClusterUpgrade)(nil)).Elem()
}

func (i CceClusterUpgradeArray) ToCceClusterUpgradeArrayOutput() CceClusterUpgradeArrayOutput {
	return i.ToCceClusterUpgradeArrayOutputWithContext(context.Background())
}

func (i CceClusterUpgradeArray) ToCceClusterUpgradeArrayOutputWithContext(ctx context.Context) CceClusterUpgradeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceClusterUpgradeArrayOutput)
}

// CceClusterUpgradeMapInput is an input type that accepts CceClusterUpgradeMap and CceClusterUpgradeMapOutput values.
// You can construct a concrete instance of `CceClusterUpgradeMapInput` via:
//
//	CceClusterUpgradeMap{ "key": CceClusterUpgradeArgs{...} }
type CceClusterUpgradeMapInput interface {
	pulumi.Input

	ToCceClusterUpgradeMapOutput() CceClusterUpgradeMapOutput
	ToCceClusterUpgradeMapOutputWithContext(context.Context) CceClusterUpgradeMapOutput
}

type CceClusterUpgradeMap map[string]CceClusterUpgradeInput

func (CceClusterUpgradeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CceClusterUpgrade)(nil)).Elem()
}

func (i CceClusterUpgradeMap) ToCceClusterUpgradeMapOutput() CceClusterUpgradeMapOutput {
	return i.ToCceClusterUpgradeMapOutputWithContext(context.Background())
}

func (i CceClusterUpgradeMap) ToCceClusterUpgradeMapOutputWithContext(ctx context.Context) CceClusterUpgradeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceClusterUpgradeMapOutput)
}

type CceClusterUpgradeOutput struct{ *pulumi.OutputState }

func (CceClusterUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CceClusterUpgrade)(nil)).Elem()
}

func (o CceClusterUpgradeOutput) ToCceClusterUpgradeOutput() CceClusterUpgradeOutput {
	return o
}

func (o CceClusterUpgradeOutput) ToCceClusterUpgradeOutputWithContext(ctx context.Context) CceClusterUpgradeOutput {
	return o
}

func (o CceClusterUpgradeOutput) Addons() CceClusterUpgradeAddonArrayOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) CceClusterUpgradeAddonArrayOutput { return v.Addons }).(CceClusterUpgradeAddonArrayOutput)
}

func (o CceClusterUpgradeOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o CceClusterUpgradeOutput) CurrentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.StringPtrOutput { return v.CurrentVersion }).(pulumi.StringPtrOutput)
}

func (o CceClusterUpgradeOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

func (o CceClusterUpgradeOutput) IsPostcheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.BoolPtrOutput { return v.IsPostcheck }).(pulumi.BoolPtrOutput)
}

func (o CceClusterUpgradeOutput) IsSnapshot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.BoolPtrOutput { return v.IsSnapshot }).(pulumi.BoolPtrOutput)
}

func (o CceClusterUpgradeOutput) NodeOrder() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.StringMapOutput { return v.NodeOrder }).(pulumi.StringMapOutput)
}

func (o CceClusterUpgradeOutput) NodepoolOrder() pulumi.IntMapOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.IntMapOutput { return v.NodepoolOrder }).(pulumi.IntMapOutput)
}

func (o CceClusterUpgradeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o CceClusterUpgradeOutput) Strategy() CceClusterUpgradeStrategyOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) CceClusterUpgradeStrategyOutput { return v.Strategy }).(CceClusterUpgradeStrategyOutput)
}

func (o CceClusterUpgradeOutput) TargetVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CceClusterUpgrade) pulumi.StringOutput { return v.TargetVersion }).(pulumi.StringOutput)
}

type CceClusterUpgradeArrayOutput struct{ *pulumi.OutputState }

func (CceClusterUpgradeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CceClusterUpgrade)(nil)).Elem()
}

func (o CceClusterUpgradeArrayOutput) ToCceClusterUpgradeArrayOutput() CceClusterUpgradeArrayOutput {
	return o
}

func (o CceClusterUpgradeArrayOutput) ToCceClusterUpgradeArrayOutputWithContext(ctx context.Context) CceClusterUpgradeArrayOutput {
	return o
}

func (o CceClusterUpgradeArrayOutput) Index(i pulumi.IntInput) CceClusterUpgradeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CceClusterUpgrade {
		return vs[0].([]*CceClusterUpgrade)[vs[1].(int)]
	}).(CceClusterUpgradeOutput)
}

type CceClusterUpgradeMapOutput struct{ *pulumi.OutputState }

func (CceClusterUpgradeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CceClusterUpgrade)(nil)).Elem()
}

func (o CceClusterUpgradeMapOutput) ToCceClusterUpgradeMapOutput() CceClusterUpgradeMapOutput {
	return o
}

func (o CceClusterUpgradeMapOutput) ToCceClusterUpgradeMapOutputWithContext(ctx context.Context) CceClusterUpgradeMapOutput {
	return o
}

func (o CceClusterUpgradeMapOutput) MapIndex(k pulumi.StringInput) CceClusterUpgradeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CceClusterUpgrade {
		return vs[0].(map[string]*CceClusterUpgrade)[vs[1].(string)]
	}).(CceClusterUpgradeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CceClusterUpgradeInput)(nil)).Elem(), &CceClusterUpgrade{})
	pulumi.RegisterInputType(reflect.TypeOf((*CceClusterUpgradeArrayInput)(nil)).Elem(), CceClusterUpgradeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CceClusterUpgradeMapInput)(nil)).Elem(), CceClusterUpgradeMap{})
	pulumi.RegisterOutputType(CceClusterUpgradeOutput{})
	pulumi.RegisterOutputType(CceClusterUpgradeArrayOutput{})
	pulumi.RegisterOutputType(CceClusterUpgradeMapOutput{})
}

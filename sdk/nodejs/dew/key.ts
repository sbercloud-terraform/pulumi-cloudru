// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a KMS key resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const key1 = new sbercloud.dew.Key("key_1", {
 *     keyAlias: "key_1",
 *     pendingDays: "7",
 *     keyDescription: "first test key",
 *     isEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * KMS Keys can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Dew/key:Key key_1 7056d636-ac60-4663-8a6c-82d3c32c1c64
 * ```
 */
export class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyState, opts?: pulumi.CustomResourceOptions): Key {
        return new Key(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Dew/key:Key';

    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Key {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }

    /**
     * Creation time (time stamp) of a key.
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * Identification of a Master Key. The value 1 indicates a Default
     * Master Key, and the value 0 indicates a key.
     */
    public /*out*/ readonly defaultKeyFlag!: pulumi.Output<string>;
    /**
     * ID of a user domain for the key.
     */
    public /*out*/ readonly domainId!: pulumi.Output<string>;
    /**
     * The enterprise project id of the kms key. Changing this creates a new key.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Expiration time.
     */
    public /*out*/ readonly expirationTime!: pulumi.Output<string>;
    /**
     * Specifies whether the key is enabled. Defaults to true.
     * Changing this updates the state of existing key.
     */
    public readonly isEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The algorithm of the key. Valid values are AES_256, SM4, RSA_2048, RSA_3072,
     * RSA_4096, EC_P256, EC_P384, SM2. Changing this creates a new key.
     */
    public readonly keyAlgorithm!: pulumi.Output<string>;
    /**
     * The alias in which to create the key. It is required when
     * we create a new key. Changing this updates the alias of key.
     */
    public readonly keyAlias!: pulumi.Output<string>;
    /**
     * The description of the key as viewed in Sber console.
     * Changing this updates the description of key.
     */
    public readonly keyDescription!: pulumi.Output<string | undefined>;
    /**
     * The globally unique identifier for the key.
     */
    public /*out*/ readonly keyId!: pulumi.Output<string>;
    public /*out*/ readonly keyState!: pulumi.Output<string>;
    public readonly keyUsage!: pulumi.Output<string>;
    public readonly keystoreId!: pulumi.Output<string>;
    public readonly origin!: pulumi.Output<string>;
    /**
     * Duration in days after which the key is deleted
     * after destruction of the resource, must be between 7 and 1096 days. It doesn't
     * have default value. It only be used when delete a key.
     */
    public readonly pendingDays!: pulumi.Output<string | undefined>;
    /**
     * The region in which to create the KMS key resource. If omitted, the provider-level region will be used. Changing this creates a new KMS key resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies whether the key rotation is enabled. Defaults to false.
     */
    public readonly rotationEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the key rotation interval. The valid value is range from 30 to 365,
     * defaults to 365.
     */
    public readonly rotationInterval!: pulumi.Output<number>;
    /**
     * The total number of key rotations.
     */
    public /*out*/ readonly rotationNumber!: pulumi.Output<number>;
    /**
     * Scheduled deletion time (time stamp) of a key.
     */
    public /*out*/ readonly scheduledDeletionDate!: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the kms key.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyArgs | KeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["defaultKeyFlag"] = state ? state.defaultKeyFlag : undefined;
            resourceInputs["domainId"] = state ? state.domainId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["expirationTime"] = state ? state.expirationTime : undefined;
            resourceInputs["isEnabled"] = state ? state.isEnabled : undefined;
            resourceInputs["keyAlgorithm"] = state ? state.keyAlgorithm : undefined;
            resourceInputs["keyAlias"] = state ? state.keyAlias : undefined;
            resourceInputs["keyDescription"] = state ? state.keyDescription : undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyState"] = state ? state.keyState : undefined;
            resourceInputs["keyUsage"] = state ? state.keyUsage : undefined;
            resourceInputs["keystoreId"] = state ? state.keystoreId : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["pendingDays"] = state ? state.pendingDays : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rotationEnabled"] = state ? state.rotationEnabled : undefined;
            resourceInputs["rotationInterval"] = state ? state.rotationInterval : undefined;
            resourceInputs["rotationNumber"] = state ? state.rotationNumber : undefined;
            resourceInputs["scheduledDeletionDate"] = state ? state.scheduledDeletionDate : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as KeyArgs | undefined;
            if ((!args || args.keyAlias === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyAlias'");
            }
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["isEnabled"] = args ? args.isEnabled : undefined;
            resourceInputs["keyAlgorithm"] = args ? args.keyAlgorithm : undefined;
            resourceInputs["keyAlias"] = args ? args.keyAlias : undefined;
            resourceInputs["keyDescription"] = args ? args.keyDescription : undefined;
            resourceInputs["keyUsage"] = args ? args.keyUsage : undefined;
            resourceInputs["keystoreId"] = args ? args.keystoreId : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["pendingDays"] = args ? args.pendingDays : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rotationEnabled"] = args ? args.rotationEnabled : undefined;
            resourceInputs["rotationInterval"] = args ? args.rotationInterval : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["defaultKeyFlag"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["expirationTime"] = undefined /*out*/;
            resourceInputs["keyId"] = undefined /*out*/;
            resourceInputs["keyState"] = undefined /*out*/;
            resourceInputs["rotationNumber"] = undefined /*out*/;
            resourceInputs["scheduledDeletionDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Key.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Key resources.
 */
export interface KeyState {
    /**
     * Creation time (time stamp) of a key.
     */
    creationDate?: pulumi.Input<string>;
    /**
     * Identification of a Master Key. The value 1 indicates a Default
     * Master Key, and the value 0 indicates a key.
     */
    defaultKeyFlag?: pulumi.Input<string>;
    /**
     * ID of a user domain for the key.
     */
    domainId?: pulumi.Input<string>;
    /**
     * The enterprise project id of the kms key. Changing this creates a new key.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Expiration time.
     */
    expirationTime?: pulumi.Input<string>;
    /**
     * Specifies whether the key is enabled. Defaults to true.
     * Changing this updates the state of existing key.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The algorithm of the key. Valid values are AES_256, SM4, RSA_2048, RSA_3072,
     * RSA_4096, EC_P256, EC_P384, SM2. Changing this creates a new key.
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * The alias in which to create the key. It is required when
     * we create a new key. Changing this updates the alias of key.
     */
    keyAlias?: pulumi.Input<string>;
    /**
     * The description of the key as viewed in Sber console.
     * Changing this updates the description of key.
     */
    keyDescription?: pulumi.Input<string>;
    /**
     * The globally unique identifier for the key.
     */
    keyId?: pulumi.Input<string>;
    keyState?: pulumi.Input<string>;
    keyUsage?: pulumi.Input<string>;
    keystoreId?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    /**
     * Duration in days after which the key is deleted
     * after destruction of the resource, must be between 7 and 1096 days. It doesn't
     * have default value. It only be used when delete a key.
     */
    pendingDays?: pulumi.Input<string>;
    /**
     * The region in which to create the KMS key resource. If omitted, the provider-level region will be used. Changing this creates a new KMS key resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies whether the key rotation is enabled. Defaults to false.
     */
    rotationEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the key rotation interval. The valid value is range from 30 to 365,
     * defaults to 365.
     */
    rotationInterval?: pulumi.Input<number>;
    /**
     * The total number of key rotations.
     */
    rotationNumber?: pulumi.Input<number>;
    /**
     * Scheduled deletion time (time stamp) of a key.
     */
    scheduledDeletionDate?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the kms key.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    /**
     * The enterprise project id of the kms key. Changing this creates a new key.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies whether the key is enabled. Defaults to true.
     * Changing this updates the state of existing key.
     */
    isEnabled?: pulumi.Input<boolean>;
    /**
     * The algorithm of the key. Valid values are AES_256, SM4, RSA_2048, RSA_3072,
     * RSA_4096, EC_P256, EC_P384, SM2. Changing this creates a new key.
     */
    keyAlgorithm?: pulumi.Input<string>;
    /**
     * The alias in which to create the key. It is required when
     * we create a new key. Changing this updates the alias of key.
     */
    keyAlias: pulumi.Input<string>;
    /**
     * The description of the key as viewed in Sber console.
     * Changing this updates the description of key.
     */
    keyDescription?: pulumi.Input<string>;
    keyUsage?: pulumi.Input<string>;
    keystoreId?: pulumi.Input<string>;
    origin?: pulumi.Input<string>;
    /**
     * Duration in days after which the key is deleted
     * after destruction of the resource, must be between 7 and 1096 days. It doesn't
     * have default value. It only be used when delete a key.
     */
    pendingDays?: pulumi.Input<string>;
    /**
     * The region in which to create the KMS key resource. If omitted, the provider-level region will be used. Changing this creates a new KMS key resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies whether the key rotation is enabled. Defaults to false.
     */
    rotationEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies the key rotation interval. The valid value is range from 30 to 365,
     * defaults to 365.
     */
    rotationInterval?: pulumi.Input<number>;
    /**
     * Specifies the key/value pairs to associate with the kms key.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

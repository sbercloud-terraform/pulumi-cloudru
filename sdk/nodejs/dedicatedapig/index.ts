// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApiArgs, ApiState } from "./api";
export type Api = import("./api").Api;
export const Api: typeof import("./api").Api = null as any;
utilities.lazyLoad(exports, ["Api"], () => require("./api"));

export { ApiPublishmentArgs, ApiPublishmentState } from "./apiPublishment";
export type ApiPublishment = import("./apiPublishment").ApiPublishment;
export const ApiPublishment: typeof import("./apiPublishment").ApiPublishment = null as any;
utilities.lazyLoad(exports, ["ApiPublishment"], () => require("./apiPublishment"));

export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { CustomAuthorizerArgs, CustomAuthorizerState } from "./customAuthorizer";
export type CustomAuthorizer = import("./customAuthorizer").CustomAuthorizer;
export const CustomAuthorizer: typeof import("./customAuthorizer").CustomAuthorizer = null as any;
utilities.lazyLoad(exports, ["CustomAuthorizer"], () => require("./customAuthorizer"));

export { EnvironmentArgs, EnvironmentState } from "./environment";
export type Environment = import("./environment").Environment;
export const Environment: typeof import("./environment").Environment = null as any;
utilities.lazyLoad(exports, ["Environment"], () => require("./environment"));

export { GetEnvironmentsArgs, GetEnvironmentsResult, GetEnvironmentsOutputArgs } from "./getEnvironments";
export const getEnvironments: typeof import("./getEnvironments").getEnvironments = null as any;
export const getEnvironmentsOutput: typeof import("./getEnvironments").getEnvironmentsOutput = null as any;
utilities.lazyLoad(exports, ["getEnvironments","getEnvironmentsOutput"], () => require("./getEnvironments"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { ResponseArgs, ResponseState } from "./response";
export type Response = import("./response").Response;
export const Response: typeof import("./response").Response = null as any;
utilities.lazyLoad(exports, ["Response"], () => require("./response"));

export { ThrottlingPolicyArgs, ThrottlingPolicyState } from "./throttlingPolicy";
export type ThrottlingPolicy = import("./throttlingPolicy").ThrottlingPolicy;
export const ThrottlingPolicy: typeof import("./throttlingPolicy").ThrottlingPolicy = null as any;
utilities.lazyLoad(exports, ["ThrottlingPolicy"], () => require("./throttlingPolicy"));

export { ThrottlingPolicyAssociateArgs, ThrottlingPolicyAssociateState } from "./throttlingPolicyAssociate";
export type ThrottlingPolicyAssociate = import("./throttlingPolicyAssociate").ThrottlingPolicyAssociate;
export const ThrottlingPolicyAssociate: typeof import("./throttlingPolicyAssociate").ThrottlingPolicyAssociate = null as any;
utilities.lazyLoad(exports, ["ThrottlingPolicyAssociate"], () => require("./throttlingPolicyAssociate"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sbercloud:DedicatedApig/api:Api":
                return new Api(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/apiPublishment:ApiPublishment":
                return new ApiPublishment(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/customAuthorizer:CustomAuthorizer":
                return new CustomAuthorizer(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/response:Response":
                return new Response(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/throttlingPolicy:ThrottlingPolicy":
                return new ThrottlingPolicy(name, <any>undefined, { urn })
            case "sbercloud:DedicatedApig/throttlingPolicyAssociate:ThrottlingPolicyAssociate":
                return new ThrottlingPolicyAssociate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/api", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/apiPublishment", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/application", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/customAuthorizer", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/environment", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/group", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/instance", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/response", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/throttlingPolicy", _module)
pulumi.runtime.registerResourceModule("sbercloud", "DedicatedApig/throttlingPolicyAssociate", _module)

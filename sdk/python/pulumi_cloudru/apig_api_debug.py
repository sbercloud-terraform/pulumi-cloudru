# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ApigApiDebugArgs', 'ApigApiDebug']

@pulumi.input_type
class ApigApiDebugArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 method: pulumi.Input[_builtins.str],
                 mode: pulumi.Input[_builtins.str],
                 path: pulumi.Input[_builtins.str],
                 scheme: pulumi.Input[_builtins.str],
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 header: Optional[pulumi.Input[_builtins.str]] = None,
                 query: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 stage: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ApigApiDebug resource.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be debugged.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] method: The request method of the API.
        :param pulumi.Input[_builtins.str] mode: The debug mode.
        :param pulumi.Input[_builtins.str] path: The request path of the API.
        :param pulumi.Input[_builtins.str] scheme: The request protocol.
        :param pulumi.Input[_builtins.str] body: The request message body of the API.
        :param pulumi.Input[_builtins.str] header: The request header parameters of the API, in JSON format.
        :param pulumi.Input[_builtins.str] query: The request query parameters of the API, in JSON format.
        :param pulumi.Input[_builtins.str] region: The region where the dedicated instance to which the API belongs is located.
        :param pulumi.Input[_builtins.str] stage: The runtime environment for debug request.
        """
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "scheme", scheme)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the API to be debugged.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> pulumi.Input[_builtins.str]:
        """
        The request method of the API.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Input[_builtins.str]:
        """
        The debug mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        The request path of the API.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> pulumi.Input[_builtins.str]:
        """
        The request protocol.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "scheme", value)

    @_builtins.property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request message body of the API.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request header parameters of the API, in JSON format.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "header", value)

    @_builtins.property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request query parameters of the API, in JSON format.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the dedicated instance to which the API belongs is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def stage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The runtime environment for debug request.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stage", value)


@pulumi.input_type
class _ApigApiDebugState:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 header: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 latency: Optional[pulumi.Input[_builtins.int]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 query: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 request: Optional[pulumi.Input[_builtins.str]] = None,
                 response: Optional[pulumi.Input[_builtins.str]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 stage: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ApigApiDebug resources.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be debugged.
        :param pulumi.Input[_builtins.str] body: The request message body of the API.
        :param pulumi.Input[_builtins.str] header: The request header parameters of the API, in JSON format.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.int] latency: The debug latency in milliseconds.
        :param pulumi.Input[_builtins.str] method: The request method of the API.
        :param pulumi.Input[_builtins.str] mode: The debug mode.
        :param pulumi.Input[_builtins.str] path: The request path of the API.
        :param pulumi.Input[_builtins.str] query: The request query parameters of the API, in JSON format.
        :param pulumi.Input[_builtins.str] region: The region where the dedicated instance to which the API belongs is located.
        :param pulumi.Input[_builtins.str] request: The debug request message content.
        :param pulumi.Input[_builtins.str] response: The debug response message content.
        :param pulumi.Input[_builtins.str] scheme: The request protocol.
        :param pulumi.Input[_builtins.str] stage: The runtime environment for debug request.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if latency is not None:
            pulumi.set(__self__, "latency", latency)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if stage is not None:
            pulumi.set(__self__, "stage", stage)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the API to be debugged.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request message body of the API.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "body", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request header parameters of the API, in JSON format.
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "header", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def latency(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The debug latency in milliseconds.
        """
        return pulumi.get(self, "latency")

    @latency.setter
    def latency(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "latency", value)

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request method of the API.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "method", value)

    @_builtins.property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The debug mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mode", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request path of the API.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request query parameters of the API, in JSON format.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "query", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the dedicated instance to which the API belongs is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The debug request message content.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request", value)

    @_builtins.property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The debug response message content.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response", value)

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request protocol.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scheme", value)

    @_builtins.property
    @pulumi.getter
    def stage(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The runtime environment for debug request.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "stage", value)


@pulumi.type_token("cloudru:index/apigApiDebug:ApigApiDebug")
class ApigApiDebug(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 header: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 query: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 stage: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ApigApiDebug resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be debugged.
        :param pulumi.Input[_builtins.str] body: The request message body of the API.
        :param pulumi.Input[_builtins.str] header: The request header parameters of the API, in JSON format.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] method: The request method of the API.
        :param pulumi.Input[_builtins.str] mode: The debug mode.
        :param pulumi.Input[_builtins.str] path: The request path of the API.
        :param pulumi.Input[_builtins.str] query: The request query parameters of the API, in JSON format.
        :param pulumi.Input[_builtins.str] region: The region where the dedicated instance to which the API belongs is located.
        :param pulumi.Input[_builtins.str] scheme: The request protocol.
        :param pulumi.Input[_builtins.str] stage: The runtime environment for debug request.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigApiDebugArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ApigApiDebug resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApigApiDebugArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigApiDebugArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 body: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 header: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 method: Optional[pulumi.Input[_builtins.str]] = None,
                 mode: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 query: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheme: Optional[pulumi.Input[_builtins.str]] = None,
                 stage: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigApiDebugArgs.__new__(ApigApiDebugArgs)

            if api_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_id'")
            __props__.__dict__["api_id"] = api_id
            __props__.__dict__["body"] = body
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["header"] = header
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            if method is None and not opts.urn:
                raise TypeError("Missing required property 'method'")
            __props__.__dict__["method"] = method
            if mode is None and not opts.urn:
                raise TypeError("Missing required property 'mode'")
            __props__.__dict__["mode"] = mode
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
            __props__.__dict__["query"] = query
            __props__.__dict__["region"] = region
            if scheme is None and not opts.urn:
                raise TypeError("Missing required property 'scheme'")
            __props__.__dict__["scheme"] = scheme
            __props__.__dict__["stage"] = stage
            __props__.__dict__["latency"] = None
            __props__.__dict__["request"] = None
            __props__.__dict__["response"] = None
        super(ApigApiDebug, __self__).__init__(
            'cloudru:index/apigApiDebug:ApigApiDebug',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_id: Optional[pulumi.Input[_builtins.str]] = None,
            body: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            header: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            latency: Optional[pulumi.Input[_builtins.int]] = None,
            method: Optional[pulumi.Input[_builtins.str]] = None,
            mode: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            query: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            request: Optional[pulumi.Input[_builtins.str]] = None,
            response: Optional[pulumi.Input[_builtins.str]] = None,
            scheme: Optional[pulumi.Input[_builtins.str]] = None,
            stage: Optional[pulumi.Input[_builtins.str]] = None) -> 'ApigApiDebug':
        """
        Get an existing ApigApiDebug resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be debugged.
        :param pulumi.Input[_builtins.str] body: The request message body of the API.
        :param pulumi.Input[_builtins.str] header: The request header parameters of the API, in JSON format.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.int] latency: The debug latency in milliseconds.
        :param pulumi.Input[_builtins.str] method: The request method of the API.
        :param pulumi.Input[_builtins.str] mode: The debug mode.
        :param pulumi.Input[_builtins.str] path: The request path of the API.
        :param pulumi.Input[_builtins.str] query: The request query parameters of the API, in JSON format.
        :param pulumi.Input[_builtins.str] region: The region where the dedicated instance to which the API belongs is located.
        :param pulumi.Input[_builtins.str] request: The debug request message content.
        :param pulumi.Input[_builtins.str] response: The debug response message content.
        :param pulumi.Input[_builtins.str] scheme: The request protocol.
        :param pulumi.Input[_builtins.str] stage: The runtime environment for debug request.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigApiDebugState.__new__(_ApigApiDebugState)

        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["body"] = body
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["header"] = header
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["latency"] = latency
        __props__.__dict__["method"] = method
        __props__.__dict__["mode"] = mode
        __props__.__dict__["path"] = path
        __props__.__dict__["query"] = query
        __props__.__dict__["region"] = region
        __props__.__dict__["request"] = request
        __props__.__dict__["response"] = response
        __props__.__dict__["scheme"] = scheme
        __props__.__dict__["stage"] = stage
        return ApigApiDebug(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the API to be debugged.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter
    def body(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The request message body of the API.
        """
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter
    def header(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The request header parameters of the API, in JSON format.
        """
        return pulumi.get(self, "header")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def latency(self) -> pulumi.Output[_builtins.int]:
        """
        The debug latency in milliseconds.
        """
        return pulumi.get(self, "latency")

    @_builtins.property
    @pulumi.getter
    def method(self) -> pulumi.Output[_builtins.str]:
        """
        The request method of the API.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def mode(self) -> pulumi.Output[_builtins.str]:
        """
        The debug mode.
        """
        return pulumi.get(self, "mode")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[_builtins.str]:
        """
        The request path of the API.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def query(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The request query parameters of the API, in JSON format.
        """
        return pulumi.get(self, "query")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region where the dedicated instance to which the API belongs is located.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def request(self) -> pulumi.Output[_builtins.str]:
        """
        The debug request message content.
        """
        return pulumi.get(self, "request")

    @_builtins.property
    @pulumi.getter
    def response(self) -> pulumi.Output[_builtins.str]:
        """
        The debug response message content.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter
    def scheme(self) -> pulumi.Output[_builtins.str]:
        """
        The request protocol.
        """
        return pulumi.get(self, "scheme")

    @_builtins.property
    @pulumi.getter
    def stage(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The runtime environment for debug request.
        """
        return pulumi.get(self, "stage")


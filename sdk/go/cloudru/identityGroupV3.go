// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type IdentityGroupV3 struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	Name        pulumi.StringOutput    `pulumi:"name"`
}

// NewIdentityGroupV3 registers a new resource with the given unique name, arguments, and options.
func NewIdentityGroupV3(ctx *pulumi.Context,
	name string, args *IdentityGroupV3Args, opts ...pulumi.ResourceOption) (*IdentityGroupV3, error) {
	if args == nil {
		args = &IdentityGroupV3Args{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityGroupV3
	err := ctx.RegisterResource("sbercloud:index/identityGroupV3:IdentityGroupV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityGroupV3 gets an existing IdentityGroupV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityGroupV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityGroupV3State, opts ...pulumi.ResourceOption) (*IdentityGroupV3, error) {
	var resource IdentityGroupV3
	err := ctx.ReadResource("sbercloud:index/identityGroupV3:IdentityGroupV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityGroupV3 resources.
type identityGroupV3State struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
}

type IdentityGroupV3State struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
}

func (IdentityGroupV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*identityGroupV3State)(nil)).Elem()
}

type identityGroupV3Args struct {
	Description *string `pulumi:"description"`
	Name        *string `pulumi:"name"`
}

// The set of arguments for constructing a IdentityGroupV3 resource.
type IdentityGroupV3Args struct {
	Description pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
}

func (IdentityGroupV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*identityGroupV3Args)(nil)).Elem()
}

type IdentityGroupV3Input interface {
	pulumi.Input

	ToIdentityGroupV3Output() IdentityGroupV3Output
	ToIdentityGroupV3OutputWithContext(ctx context.Context) IdentityGroupV3Output
}

func (*IdentityGroupV3) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityGroupV3)(nil)).Elem()
}

func (i *IdentityGroupV3) ToIdentityGroupV3Output() IdentityGroupV3Output {
	return i.ToIdentityGroupV3OutputWithContext(context.Background())
}

func (i *IdentityGroupV3) ToIdentityGroupV3OutputWithContext(ctx context.Context) IdentityGroupV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGroupV3Output)
}

// IdentityGroupV3ArrayInput is an input type that accepts IdentityGroupV3Array and IdentityGroupV3ArrayOutput values.
// You can construct a concrete instance of `IdentityGroupV3ArrayInput` via:
//
//	IdentityGroupV3Array{ IdentityGroupV3Args{...} }
type IdentityGroupV3ArrayInput interface {
	pulumi.Input

	ToIdentityGroupV3ArrayOutput() IdentityGroupV3ArrayOutput
	ToIdentityGroupV3ArrayOutputWithContext(context.Context) IdentityGroupV3ArrayOutput
}

type IdentityGroupV3Array []IdentityGroupV3Input

func (IdentityGroupV3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityGroupV3)(nil)).Elem()
}

func (i IdentityGroupV3Array) ToIdentityGroupV3ArrayOutput() IdentityGroupV3ArrayOutput {
	return i.ToIdentityGroupV3ArrayOutputWithContext(context.Background())
}

func (i IdentityGroupV3Array) ToIdentityGroupV3ArrayOutputWithContext(ctx context.Context) IdentityGroupV3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGroupV3ArrayOutput)
}

// IdentityGroupV3MapInput is an input type that accepts IdentityGroupV3Map and IdentityGroupV3MapOutput values.
// You can construct a concrete instance of `IdentityGroupV3MapInput` via:
//
//	IdentityGroupV3Map{ "key": IdentityGroupV3Args{...} }
type IdentityGroupV3MapInput interface {
	pulumi.Input

	ToIdentityGroupV3MapOutput() IdentityGroupV3MapOutput
	ToIdentityGroupV3MapOutputWithContext(context.Context) IdentityGroupV3MapOutput
}

type IdentityGroupV3Map map[string]IdentityGroupV3Input

func (IdentityGroupV3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityGroupV3)(nil)).Elem()
}

func (i IdentityGroupV3Map) ToIdentityGroupV3MapOutput() IdentityGroupV3MapOutput {
	return i.ToIdentityGroupV3MapOutputWithContext(context.Background())
}

func (i IdentityGroupV3Map) ToIdentityGroupV3MapOutputWithContext(ctx context.Context) IdentityGroupV3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityGroupV3MapOutput)
}

type IdentityGroupV3Output struct{ *pulumi.OutputState }

func (IdentityGroupV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityGroupV3)(nil)).Elem()
}

func (o IdentityGroupV3Output) ToIdentityGroupV3Output() IdentityGroupV3Output {
	return o
}

func (o IdentityGroupV3Output) ToIdentityGroupV3OutputWithContext(ctx context.Context) IdentityGroupV3Output {
	return o
}

func (o IdentityGroupV3Output) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityGroupV3) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o IdentityGroupV3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityGroupV3) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IdentityGroupV3ArrayOutput struct{ *pulumi.OutputState }

func (IdentityGroupV3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityGroupV3)(nil)).Elem()
}

func (o IdentityGroupV3ArrayOutput) ToIdentityGroupV3ArrayOutput() IdentityGroupV3ArrayOutput {
	return o
}

func (o IdentityGroupV3ArrayOutput) ToIdentityGroupV3ArrayOutputWithContext(ctx context.Context) IdentityGroupV3ArrayOutput {
	return o
}

func (o IdentityGroupV3ArrayOutput) Index(i pulumi.IntInput) IdentityGroupV3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityGroupV3 {
		return vs[0].([]*IdentityGroupV3)[vs[1].(int)]
	}).(IdentityGroupV3Output)
}

type IdentityGroupV3MapOutput struct{ *pulumi.OutputState }

func (IdentityGroupV3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityGroupV3)(nil)).Elem()
}

func (o IdentityGroupV3MapOutput) ToIdentityGroupV3MapOutput() IdentityGroupV3MapOutput {
	return o
}

func (o IdentityGroupV3MapOutput) ToIdentityGroupV3MapOutputWithContext(ctx context.Context) IdentityGroupV3MapOutput {
	return o
}

func (o IdentityGroupV3MapOutput) MapIndex(k pulumi.StringInput) IdentityGroupV3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityGroupV3 {
		return vs[0].(map[string]*IdentityGroupV3)[vs[1].(string)]
	}).(IdentityGroupV3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGroupV3Input)(nil)).Elem(), &IdentityGroupV3{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGroupV3ArrayInput)(nil)).Elem(), IdentityGroupV3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityGroupV3MapInput)(nil)).Elem(), IdentityGroupV3Map{})
	pulumi.RegisterOutputType(IdentityGroupV3Output{})
	pulumi.RegisterOutputType(IdentityGroupV3ArrayOutput{})
	pulumi.RegisterOutputType(IdentityGroupV3MapOutput{})
}

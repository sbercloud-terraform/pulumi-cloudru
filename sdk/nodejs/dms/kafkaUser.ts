// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class KafkaUser extends pulumi.CustomResource {
    /**
     * Get an existing KafkaUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaUserState, opts?: pulumi.CustomResourceOptions): KafkaUser {
        return new KafkaUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Dms/kafkaUser:KafkaUser';

    /**
     * Returns true if the given object is an instance of KafkaUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaUser.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public /*out*/ readonly defaultApp: pulumi.Output<boolean>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly role: pulumi.Output<string>;

    /**
     * Create a KafkaUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaUserArgs | KafkaUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaUserState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["defaultApp"] = state?.defaultApp;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["name"] = state?.name;
            resourceInputs["password"] = state?.password;
            resourceInputs["region"] = state?.region;
            resourceInputs["role"] = state?.role;
        } else {
            const args = argsOrState as KafkaUserArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.password === undefined && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["name"] = args?.name;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["region"] = args?.region;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["defaultApp"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KafkaUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaUser resources.
 */
export interface KafkaUserState {
    createdAt?: pulumi.Input<string>;
    defaultApp?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaUser resource.
 */
export interface KafkaUserArgs {
    description?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

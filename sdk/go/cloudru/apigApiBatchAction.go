// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ApigApiBatchAction struct {
	pulumi.CustomResourceState

	// The action to perform on the APIs.
	Action pulumi.StringOutput `pulumi:"action"`
	// The list of API IDs to perform the action on.
	Apis           pulumi.StringArrayOutput `pulumi:"apis"`
	EnableForceNew pulumi.StringPtrOutput   `pulumi:"enableForceNew"`
	// The ID of the environment where the action will be performed.
	EnvId pulumi.StringOutput `pulumi:"envId"`
	// The ID of the API group.
	GroupId pulumi.StringPtrOutput `pulumi:"groupId"`
	// The ID of the dedicated instance to which the APIs belong.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region where the APIG instance to which the API belongs is located
	Region pulumi.StringOutput `pulumi:"region"`
	// The remark for the batch operation.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
}

// NewApigApiBatchAction registers a new resource with the given unique name, arguments, and options.
func NewApigApiBatchAction(ctx *pulumi.Context,
	name string, args *ApigApiBatchActionArgs, opts ...pulumi.ResourceOption) (*ApigApiBatchAction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.EnvId == nil {
		return nil, errors.New("invalid value for required argument 'EnvId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApigApiBatchAction
	err := ctx.RegisterResource("sbercloud:index/apigApiBatchAction:ApigApiBatchAction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigApiBatchAction gets an existing ApigApiBatchAction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigApiBatchAction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigApiBatchActionState, opts ...pulumi.ResourceOption) (*ApigApiBatchAction, error) {
	var resource ApigApiBatchAction
	err := ctx.ReadResource("sbercloud:index/apigApiBatchAction:ApigApiBatchAction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigApiBatchAction resources.
type apigApiBatchActionState struct {
	// The action to perform on the APIs.
	Action *string `pulumi:"action"`
	// The list of API IDs to perform the action on.
	Apis           []string `pulumi:"apis"`
	EnableForceNew *string  `pulumi:"enableForceNew"`
	// The ID of the environment where the action will be performed.
	EnvId *string `pulumi:"envId"`
	// The ID of the API group.
	GroupId *string `pulumi:"groupId"`
	// The ID of the dedicated instance to which the APIs belong.
	InstanceId *string `pulumi:"instanceId"`
	// The region where the APIG instance to which the API belongs is located
	Region *string `pulumi:"region"`
	// The remark for the batch operation.
	Remark *string `pulumi:"remark"`
}

type ApigApiBatchActionState struct {
	// The action to perform on the APIs.
	Action pulumi.StringPtrInput
	// The list of API IDs to perform the action on.
	Apis           pulumi.StringArrayInput
	EnableForceNew pulumi.StringPtrInput
	// The ID of the environment where the action will be performed.
	EnvId pulumi.StringPtrInput
	// The ID of the API group.
	GroupId pulumi.StringPtrInput
	// The ID of the dedicated instance to which the APIs belong.
	InstanceId pulumi.StringPtrInput
	// The region where the APIG instance to which the API belongs is located
	Region pulumi.StringPtrInput
	// The remark for the batch operation.
	Remark pulumi.StringPtrInput
}

func (ApigApiBatchActionState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigApiBatchActionState)(nil)).Elem()
}

type apigApiBatchActionArgs struct {
	// The action to perform on the APIs.
	Action string `pulumi:"action"`
	// The list of API IDs to perform the action on.
	Apis           []string `pulumi:"apis"`
	EnableForceNew *string  `pulumi:"enableForceNew"`
	// The ID of the environment where the action will be performed.
	EnvId string `pulumi:"envId"`
	// The ID of the API group.
	GroupId *string `pulumi:"groupId"`
	// The ID of the dedicated instance to which the APIs belong.
	InstanceId string `pulumi:"instanceId"`
	// The region where the APIG instance to which the API belongs is located
	Region *string `pulumi:"region"`
	// The remark for the batch operation.
	Remark *string `pulumi:"remark"`
}

// The set of arguments for constructing a ApigApiBatchAction resource.
type ApigApiBatchActionArgs struct {
	// The action to perform on the APIs.
	Action pulumi.StringInput
	// The list of API IDs to perform the action on.
	Apis           pulumi.StringArrayInput
	EnableForceNew pulumi.StringPtrInput
	// The ID of the environment where the action will be performed.
	EnvId pulumi.StringInput
	// The ID of the API group.
	GroupId pulumi.StringPtrInput
	// The ID of the dedicated instance to which the APIs belong.
	InstanceId pulumi.StringInput
	// The region where the APIG instance to which the API belongs is located
	Region pulumi.StringPtrInput
	// The remark for the batch operation.
	Remark pulumi.StringPtrInput
}

func (ApigApiBatchActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigApiBatchActionArgs)(nil)).Elem()
}

type ApigApiBatchActionInput interface {
	pulumi.Input

	ToApigApiBatchActionOutput() ApigApiBatchActionOutput
	ToApigApiBatchActionOutputWithContext(ctx context.Context) ApigApiBatchActionOutput
}

func (*ApigApiBatchAction) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigApiBatchAction)(nil)).Elem()
}

func (i *ApigApiBatchAction) ToApigApiBatchActionOutput() ApigApiBatchActionOutput {
	return i.ToApigApiBatchActionOutputWithContext(context.Background())
}

func (i *ApigApiBatchAction) ToApigApiBatchActionOutputWithContext(ctx context.Context) ApigApiBatchActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigApiBatchActionOutput)
}

// ApigApiBatchActionArrayInput is an input type that accepts ApigApiBatchActionArray and ApigApiBatchActionArrayOutput values.
// You can construct a concrete instance of `ApigApiBatchActionArrayInput` via:
//
//	ApigApiBatchActionArray{ ApigApiBatchActionArgs{...} }
type ApigApiBatchActionArrayInput interface {
	pulumi.Input

	ToApigApiBatchActionArrayOutput() ApigApiBatchActionArrayOutput
	ToApigApiBatchActionArrayOutputWithContext(context.Context) ApigApiBatchActionArrayOutput
}

type ApigApiBatchActionArray []ApigApiBatchActionInput

func (ApigApiBatchActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigApiBatchAction)(nil)).Elem()
}

func (i ApigApiBatchActionArray) ToApigApiBatchActionArrayOutput() ApigApiBatchActionArrayOutput {
	return i.ToApigApiBatchActionArrayOutputWithContext(context.Background())
}

func (i ApigApiBatchActionArray) ToApigApiBatchActionArrayOutputWithContext(ctx context.Context) ApigApiBatchActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigApiBatchActionArrayOutput)
}

// ApigApiBatchActionMapInput is an input type that accepts ApigApiBatchActionMap and ApigApiBatchActionMapOutput values.
// You can construct a concrete instance of `ApigApiBatchActionMapInput` via:
//
//	ApigApiBatchActionMap{ "key": ApigApiBatchActionArgs{...} }
type ApigApiBatchActionMapInput interface {
	pulumi.Input

	ToApigApiBatchActionMapOutput() ApigApiBatchActionMapOutput
	ToApigApiBatchActionMapOutputWithContext(context.Context) ApigApiBatchActionMapOutput
}

type ApigApiBatchActionMap map[string]ApigApiBatchActionInput

func (ApigApiBatchActionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigApiBatchAction)(nil)).Elem()
}

func (i ApigApiBatchActionMap) ToApigApiBatchActionMapOutput() ApigApiBatchActionMapOutput {
	return i.ToApigApiBatchActionMapOutputWithContext(context.Background())
}

func (i ApigApiBatchActionMap) ToApigApiBatchActionMapOutputWithContext(ctx context.Context) ApigApiBatchActionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigApiBatchActionMapOutput)
}

type ApigApiBatchActionOutput struct{ *pulumi.OutputState }

func (ApigApiBatchActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigApiBatchAction)(nil)).Elem()
}

func (o ApigApiBatchActionOutput) ToApigApiBatchActionOutput() ApigApiBatchActionOutput {
	return o
}

func (o ApigApiBatchActionOutput) ToApigApiBatchActionOutputWithContext(ctx context.Context) ApigApiBatchActionOutput {
	return o
}

// The action to perform on the APIs.
func (o ApigApiBatchActionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigApiBatchAction) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The list of API IDs to perform the action on.
func (o ApigApiBatchActionOutput) Apis() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApigApiBatchAction) pulumi.StringArrayOutput { return v.Apis }).(pulumi.StringArrayOutput)
}

func (o ApigApiBatchActionOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApigApiBatchAction) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// The ID of the environment where the action will be performed.
func (o ApigApiBatchActionOutput) EnvId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigApiBatchAction) pulumi.StringOutput { return v.EnvId }).(pulumi.StringOutput)
}

// The ID of the API group.
func (o ApigApiBatchActionOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApigApiBatchAction) pulumi.StringPtrOutput { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The ID of the dedicated instance to which the APIs belong.
func (o ApigApiBatchActionOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigApiBatchAction) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region where the APIG instance to which the API belongs is located
func (o ApigApiBatchActionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigApiBatchAction) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The remark for the batch operation.
func (o ApigApiBatchActionOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ApigApiBatchAction) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

type ApigApiBatchActionArrayOutput struct{ *pulumi.OutputState }

func (ApigApiBatchActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigApiBatchAction)(nil)).Elem()
}

func (o ApigApiBatchActionArrayOutput) ToApigApiBatchActionArrayOutput() ApigApiBatchActionArrayOutput {
	return o
}

func (o ApigApiBatchActionArrayOutput) ToApigApiBatchActionArrayOutputWithContext(ctx context.Context) ApigApiBatchActionArrayOutput {
	return o
}

func (o ApigApiBatchActionArrayOutput) Index(i pulumi.IntInput) ApigApiBatchActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApigApiBatchAction {
		return vs[0].([]*ApigApiBatchAction)[vs[1].(int)]
	}).(ApigApiBatchActionOutput)
}

type ApigApiBatchActionMapOutput struct{ *pulumi.OutputState }

func (ApigApiBatchActionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigApiBatchAction)(nil)).Elem()
}

func (o ApigApiBatchActionMapOutput) ToApigApiBatchActionMapOutput() ApigApiBatchActionMapOutput {
	return o
}

func (o ApigApiBatchActionMapOutput) ToApigApiBatchActionMapOutputWithContext(ctx context.Context) ApigApiBatchActionMapOutput {
	return o
}

func (o ApigApiBatchActionMapOutput) MapIndex(k pulumi.StringInput) ApigApiBatchActionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApigApiBatchAction {
		return vs[0].(map[string]*ApigApiBatchAction)[vs[1].(string)]
	}).(ApigApiBatchActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigApiBatchActionInput)(nil)).Elem(), &ApigApiBatchAction{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigApiBatchActionArrayInput)(nil)).Elem(), ApigApiBatchActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigApiBatchActionMapInput)(nil)).Elem(), ApigApiBatchActionMap{})
	pulumi.RegisterOutputType(ApigApiBatchActionOutput{})
	pulumi.RegisterOutputType(ApigApiBatchActionArrayOutput{})
	pulumi.RegisterOutputType(ApigApiBatchActionMapOutput{})
}

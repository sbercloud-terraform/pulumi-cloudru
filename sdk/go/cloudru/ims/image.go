// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ims

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Image struct {
	pulumi.CustomResourceState

	BackupId            pulumi.StringOutput    `pulumi:"backupId"`
	Checksum            pulumi.StringOutput    `pulumi:"checksum"`
	CmkId               pulumi.StringPtrOutput `pulumi:"cmkId"`
	DataOrigin          pulumi.StringOutput    `pulumi:"dataOrigin"`
	Description         pulumi.StringPtrOutput `pulumi:"description"`
	DiskFormat          pulumi.StringOutput    `pulumi:"diskFormat"`
	EnterpriseProjectId pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	ImageSize           pulumi.StringOutput    `pulumi:"imageSize"`
	ImageUrl            pulumi.StringPtrOutput `pulumi:"imageUrl"`
	InstanceId          pulumi.StringOutput    `pulumi:"instanceId"`
	IsConfig            pulumi.BoolPtrOutput   `pulumi:"isConfig"`
	MaxRam              pulumi.IntOutput       `pulumi:"maxRam"`
	MinDisk             pulumi.IntPtrOutput    `pulumi:"minDisk"`
	MinRam              pulumi.IntOutput       `pulumi:"minRam"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	OsVersion           pulumi.StringOutput    `pulumi:"osVersion"`
	Region              pulumi.StringOutput    `pulumi:"region"`
	Status              pulumi.StringOutput    `pulumi:"status"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
	Type                pulumi.StringPtrOutput `pulumi:"type"`
	VaultId             pulumi.StringPtrOutput `pulumi:"vaultId"`
	Visibility          pulumi.StringOutput    `pulumi:"visibility"`
	VolumeId            pulumi.StringOutput    `pulumi:"volumeId"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		args = &ImageArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("cloudru:Ims/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("cloudru:Ims/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	BackupId            *string           `pulumi:"backupId"`
	Checksum            *string           `pulumi:"checksum"`
	CmkId               *string           `pulumi:"cmkId"`
	DataOrigin          *string           `pulumi:"dataOrigin"`
	Description         *string           `pulumi:"description"`
	DiskFormat          *string           `pulumi:"diskFormat"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	ImageSize           *string           `pulumi:"imageSize"`
	ImageUrl            *string           `pulumi:"imageUrl"`
	InstanceId          *string           `pulumi:"instanceId"`
	IsConfig            *bool             `pulumi:"isConfig"`
	MaxRam              *int              `pulumi:"maxRam"`
	MinDisk             *int              `pulumi:"minDisk"`
	MinRam              *int              `pulumi:"minRam"`
	Name                *string           `pulumi:"name"`
	OsVersion           *string           `pulumi:"osVersion"`
	Region              *string           `pulumi:"region"`
	Status              *string           `pulumi:"status"`
	Tags                map[string]string `pulumi:"tags"`
	Type                *string           `pulumi:"type"`
	VaultId             *string           `pulumi:"vaultId"`
	Visibility          *string           `pulumi:"visibility"`
	VolumeId            *string           `pulumi:"volumeId"`
}

type ImageState struct {
	BackupId            pulumi.StringPtrInput
	Checksum            pulumi.StringPtrInput
	CmkId               pulumi.StringPtrInput
	DataOrigin          pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	DiskFormat          pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ImageSize           pulumi.StringPtrInput
	ImageUrl            pulumi.StringPtrInput
	InstanceId          pulumi.StringPtrInput
	IsConfig            pulumi.BoolPtrInput
	MaxRam              pulumi.IntPtrInput
	MinDisk             pulumi.IntPtrInput
	MinRam              pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	OsVersion           pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	Type                pulumi.StringPtrInput
	VaultId             pulumi.StringPtrInput
	Visibility          pulumi.StringPtrInput
	VolumeId            pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	BackupId            *string           `pulumi:"backupId"`
	CmkId               *string           `pulumi:"cmkId"`
	Description         *string           `pulumi:"description"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	ImageUrl            *string           `pulumi:"imageUrl"`
	InstanceId          *string           `pulumi:"instanceId"`
	IsConfig            *bool             `pulumi:"isConfig"`
	MaxRam              *int              `pulumi:"maxRam"`
	MinDisk             *int              `pulumi:"minDisk"`
	MinRam              *int              `pulumi:"minRam"`
	Name                *string           `pulumi:"name"`
	OsVersion           *string           `pulumi:"osVersion"`
	Region              *string           `pulumi:"region"`
	Tags                map[string]string `pulumi:"tags"`
	Type                *string           `pulumi:"type"`
	VaultId             *string           `pulumi:"vaultId"`
	VolumeId            *string           `pulumi:"volumeId"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	BackupId            pulumi.StringPtrInput
	CmkId               pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ImageUrl            pulumi.StringPtrInput
	InstanceId          pulumi.StringPtrInput
	IsConfig            pulumi.BoolPtrInput
	MaxRam              pulumi.IntPtrInput
	MinDisk             pulumi.IntPtrInput
	MinRam              pulumi.IntPtrInput
	Name                pulumi.StringPtrInput
	OsVersion           pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	Type                pulumi.StringPtrInput
	VaultId             pulumi.StringPtrInput
	VolumeId            pulumi.StringPtrInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

func (o ImageOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Checksum }).(pulumi.StringOutput)
}

func (o ImageOutput) CmkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.CmkId }).(pulumi.StringPtrOutput)
}

func (o ImageOutput) DataOrigin() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.DataOrigin }).(pulumi.StringOutput)
}

func (o ImageOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ImageOutput) DiskFormat() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.DiskFormat }).(pulumi.StringOutput)
}

func (o ImageOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o ImageOutput) ImageSize() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageSize }).(pulumi.StringOutput)
}

func (o ImageOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

func (o ImageOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ImageOutput) IsConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolPtrOutput { return v.IsConfig }).(pulumi.BoolPtrOutput)
}

func (o ImageOutput) MaxRam() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.MaxRam }).(pulumi.IntOutput)
}

func (o ImageOutput) MinDisk() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.IntPtrOutput { return v.MinDisk }).(pulumi.IntPtrOutput)
}

func (o ImageOutput) MinRam() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.MinRam }).(pulumi.IntOutput)
}

func (o ImageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ImageOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.OsVersion }).(pulumi.StringOutput)
}

func (o ImageOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ImageOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Image) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ImageOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ImageOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.VaultId }).(pulumi.StringPtrOutput)
}

func (o ImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

func (o ImageOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}

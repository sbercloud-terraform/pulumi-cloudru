// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package er

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Propagation struct {
	pulumi.CustomResourceState

	// The ID of the attachment corresponding to the propagation.
	AttachmentId pulumi.StringOutput `pulumi:"attachmentId"`
	// The type of the attachment corresponding to the propagation.
	AttachmentType pulumi.StringOutput `pulumi:"attachmentType"`
	// The creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region where the ER instance and route table are located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the route table to which the propagation belongs.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The current status of the propagation.
	Status pulumi.StringOutput `pulumi:"status"`
	// The latest update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewPropagation registers a new resource with the given unique name, arguments, and options.
func NewPropagation(ctx *pulumi.Context,
	name string, args *PropagationArgs, opts ...pulumi.ResourceOption) (*Propagation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'AttachmentId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Propagation
	err := ctx.RegisterResource("sbercloud:Er/propagation:Propagation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPropagation gets an existing Propagation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPropagation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PropagationState, opts ...pulumi.ResourceOption) (*Propagation, error) {
	var resource Propagation
	err := ctx.ReadResource("sbercloud:Er/propagation:Propagation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Propagation resources.
type propagationState struct {
	// The ID of the attachment corresponding to the propagation.
	AttachmentId *string `pulumi:"attachmentId"`
	// The type of the attachment corresponding to the propagation.
	AttachmentType *string `pulumi:"attachmentType"`
	// The creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The region where the ER instance and route table are located.
	Region *string `pulumi:"region"`
	// The ID of the route table to which the propagation belongs.
	RouteTableId *string `pulumi:"routeTableId"`
	// The current status of the propagation.
	Status *string `pulumi:"status"`
	// The latest update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type PropagationState struct {
	// The ID of the attachment corresponding to the propagation.
	AttachmentId pulumi.StringPtrInput
	// The type of the attachment corresponding to the propagation.
	AttachmentType pulumi.StringPtrInput
	// The creation time.
	CreatedAt pulumi.StringPtrInput
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId pulumi.StringPtrInput
	// The region where the ER instance and route table are located.
	Region pulumi.StringPtrInput
	// The ID of the route table to which the propagation belongs.
	RouteTableId pulumi.StringPtrInput
	// The current status of the propagation.
	Status pulumi.StringPtrInput
	// The latest update time.
	UpdatedAt pulumi.StringPtrInput
}

func (PropagationState) ElementType() reflect.Type {
	return reflect.TypeOf((*propagationState)(nil)).Elem()
}

type propagationArgs struct {
	// The ID of the attachment corresponding to the propagation.
	AttachmentId string `pulumi:"attachmentId"`
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId string `pulumi:"instanceId"`
	// The region where the ER instance and route table are located.
	Region *string `pulumi:"region"`
	// The ID of the route table to which the propagation belongs.
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a Propagation resource.
type PropagationArgs struct {
	// The ID of the attachment corresponding to the propagation.
	AttachmentId pulumi.StringInput
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId pulumi.StringInput
	// The region where the ER instance and route table are located.
	Region pulumi.StringPtrInput
	// The ID of the route table to which the propagation belongs.
	RouteTableId pulumi.StringInput
}

func (PropagationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*propagationArgs)(nil)).Elem()
}

type PropagationInput interface {
	pulumi.Input

	ToPropagationOutput() PropagationOutput
	ToPropagationOutputWithContext(ctx context.Context) PropagationOutput
}

func (*Propagation) ElementType() reflect.Type {
	return reflect.TypeOf((**Propagation)(nil)).Elem()
}

func (i *Propagation) ToPropagationOutput() PropagationOutput {
	return i.ToPropagationOutputWithContext(context.Background())
}

func (i *Propagation) ToPropagationOutputWithContext(ctx context.Context) PropagationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropagationOutput)
}

// PropagationArrayInput is an input type that accepts PropagationArray and PropagationArrayOutput values.
// You can construct a concrete instance of `PropagationArrayInput` via:
//
//	PropagationArray{ PropagationArgs{...} }
type PropagationArrayInput interface {
	pulumi.Input

	ToPropagationArrayOutput() PropagationArrayOutput
	ToPropagationArrayOutputWithContext(context.Context) PropagationArrayOutput
}

type PropagationArray []PropagationInput

func (PropagationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Propagation)(nil)).Elem()
}

func (i PropagationArray) ToPropagationArrayOutput() PropagationArrayOutput {
	return i.ToPropagationArrayOutputWithContext(context.Background())
}

func (i PropagationArray) ToPropagationArrayOutputWithContext(ctx context.Context) PropagationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropagationArrayOutput)
}

// PropagationMapInput is an input type that accepts PropagationMap and PropagationMapOutput values.
// You can construct a concrete instance of `PropagationMapInput` via:
//
//	PropagationMap{ "key": PropagationArgs{...} }
type PropagationMapInput interface {
	pulumi.Input

	ToPropagationMapOutput() PropagationMapOutput
	ToPropagationMapOutputWithContext(context.Context) PropagationMapOutput
}

type PropagationMap map[string]PropagationInput

func (PropagationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Propagation)(nil)).Elem()
}

func (i PropagationMap) ToPropagationMapOutput() PropagationMapOutput {
	return i.ToPropagationMapOutputWithContext(context.Background())
}

func (i PropagationMap) ToPropagationMapOutputWithContext(ctx context.Context) PropagationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PropagationMapOutput)
}

type PropagationOutput struct{ *pulumi.OutputState }

func (PropagationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Propagation)(nil)).Elem()
}

func (o PropagationOutput) ToPropagationOutput() PropagationOutput {
	return o
}

func (o PropagationOutput) ToPropagationOutputWithContext(ctx context.Context) PropagationOutput {
	return o
}

// The ID of the attachment corresponding to the propagation.
func (o PropagationOutput) AttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Propagation) pulumi.StringOutput { return v.AttachmentId }).(pulumi.StringOutput)
}

// The type of the attachment corresponding to the propagation.
func (o PropagationOutput) AttachmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *Propagation) pulumi.StringOutput { return v.AttachmentType }).(pulumi.StringOutput)
}

// The creation time.
func (o PropagationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Propagation) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the ER instance to which the route table and the attachment belongs.
func (o PropagationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Propagation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region where the ER instance and route table are located.
func (o PropagationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Propagation) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the route table to which the propagation belongs.
func (o PropagationOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Propagation) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// The current status of the propagation.
func (o PropagationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Propagation) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The latest update time.
func (o PropagationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Propagation) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type PropagationArrayOutput struct{ *pulumi.OutputState }

func (PropagationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Propagation)(nil)).Elem()
}

func (o PropagationArrayOutput) ToPropagationArrayOutput() PropagationArrayOutput {
	return o
}

func (o PropagationArrayOutput) ToPropagationArrayOutputWithContext(ctx context.Context) PropagationArrayOutput {
	return o
}

func (o PropagationArrayOutput) Index(i pulumi.IntInput) PropagationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Propagation {
		return vs[0].([]*Propagation)[vs[1].(int)]
	}).(PropagationOutput)
}

type PropagationMapOutput struct{ *pulumi.OutputState }

func (PropagationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Propagation)(nil)).Elem()
}

func (o PropagationMapOutput) ToPropagationMapOutput() PropagationMapOutput {
	return o
}

func (o PropagationMapOutput) ToPropagationMapOutputWithContext(ctx context.Context) PropagationMapOutput {
	return o
}

func (o PropagationMapOutput) MapIndex(k pulumi.StringInput) PropagationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Propagation {
		return vs[0].(map[string]*Propagation)[vs[1].(string)]
	}).(PropagationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PropagationInput)(nil)).Elem(), &Propagation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropagationArrayInput)(nil)).Elem(), PropagationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PropagationMapInput)(nil)).Elem(), PropagationMap{})
	pulumi.RegisterOutputType(PropagationOutput{})
	pulumi.RegisterOutputType(PropagationArrayOutput{})
	pulumi.RegisterOutputType(PropagationMapOutput{})
}

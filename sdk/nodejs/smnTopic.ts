// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SmnTopic extends pulumi.CustomResource {
    /**
     * Get an existing SmnTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmnTopicState, opts?: pulumi.CustomResourceOptions): SmnTopic {
        return new SmnTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:index/smnTopic:SmnTopic';

    /**
     * Returns true if the given object is an instance of SmnTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmnTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmnTopic.__pulumiType;
    }

    /**
     * schema: Internal
     */
    declare public readonly accessPolicy: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    declare public readonly displayName: pulumi.Output<string | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly introduction: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly pushPolicy: pulumi.Output<number>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly servicesPublishAllowed: pulumi.Output<string | undefined>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public /*out*/ readonly topicUrn: pulumi.Output<string>;
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    declare public readonly usersPublishAllowed: pulumi.Output<string | undefined>;

    /**
     * Create a SmnTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SmnTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmnTopicArgs | SmnTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmnTopicState | undefined;
            resourceInputs["accessPolicy"] = state?.accessPolicy;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["displayName"] = state?.displayName;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["introduction"] = state?.introduction;
            resourceInputs["name"] = state?.name;
            resourceInputs["pushPolicy"] = state?.pushPolicy;
            resourceInputs["region"] = state?.region;
            resourceInputs["servicesPublishAllowed"] = state?.servicesPublishAllowed;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["topicUrn"] = state?.topicUrn;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["usersPublishAllowed"] = state?.usersPublishAllowed;
        } else {
            const args = argsOrState as SmnTopicArgs | undefined;
            resourceInputs["accessPolicy"] = args?.accessPolicy;
            resourceInputs["displayName"] = args?.displayName;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["introduction"] = args?.introduction;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["servicesPublishAllowed"] = args?.servicesPublishAllowed;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["usersPublishAllowed"] = args?.usersPublishAllowed;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["pushPolicy"] = undefined /*out*/;
            resourceInputs["topicUrn"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmnTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SmnTopic resources.
 */
export interface SmnTopicState {
    /**
     * schema: Internal
     */
    accessPolicy?: pulumi.Input<string>;
    createTime?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    introduction?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    pushPolicy?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    servicesPublishAllowed?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    topicUrn?: pulumi.Input<string>;
    updateTime?: pulumi.Input<string>;
    usersPublishAllowed?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SmnTopic resource.
 */
export interface SmnTopicArgs {
    /**
     * schema: Internal
     */
    accessPolicy?: pulumi.Input<string>;
    displayName?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    introduction?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    servicesPublishAllowed?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    usersPublishAllowed?: pulumi.Input<string>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ces

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

var _ = internal.GetEnvOrDefault

type AlarmruleAlarmAction struct {
	// specifies the list of objects to be notified if the alarm status changes, the
	// maximum length is 5. If `type` is set to *notification*, the value of notificationList cannot be empty. If `type` is
	// set to *autoscaling*, the value of notificationList must be **[]**
	// and the value of namespace must be *SYS.AS*.
	//
	// Note: to enable the *autoscaling* alarm rules take effect, you must bind scaling policies.
	NotificationLists []string `pulumi:"notificationLists"`
	// Specifies the type of action triggered by an alarm. the
	// value can be *notification* or *autoscaling*.
	// + notification: indicates that a notification will be sent to the user.
	// + autoscaling: indicates that a scaling action will be triggered.
	Type string `pulumi:"type"`
}

// AlarmruleAlarmActionInput is an input type that accepts AlarmruleAlarmActionArgs and AlarmruleAlarmActionOutput values.
// You can construct a concrete instance of `AlarmruleAlarmActionInput` via:
//
//	AlarmruleAlarmActionArgs{...}
type AlarmruleAlarmActionInput interface {
	pulumi.Input

	ToAlarmruleAlarmActionOutput() AlarmruleAlarmActionOutput
	ToAlarmruleAlarmActionOutputWithContext(context.Context) AlarmruleAlarmActionOutput
}

type AlarmruleAlarmActionArgs struct {
	// specifies the list of objects to be notified if the alarm status changes, the
	// maximum length is 5. If `type` is set to *notification*, the value of notificationList cannot be empty. If `type` is
	// set to *autoscaling*, the value of notificationList must be **[]**
	// and the value of namespace must be *SYS.AS*.
	//
	// Note: to enable the *autoscaling* alarm rules take effect, you must bind scaling policies.
	NotificationLists pulumi.StringArrayInput `pulumi:"notificationLists"`
	// Specifies the type of action triggered by an alarm. the
	// value can be *notification* or *autoscaling*.
	// + notification: indicates that a notification will be sent to the user.
	// + autoscaling: indicates that a scaling action will be triggered.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AlarmruleAlarmActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleAlarmAction)(nil)).Elem()
}

func (i AlarmruleAlarmActionArgs) ToAlarmruleAlarmActionOutput() AlarmruleAlarmActionOutput {
	return i.ToAlarmruleAlarmActionOutputWithContext(context.Background())
}

func (i AlarmruleAlarmActionArgs) ToAlarmruleAlarmActionOutputWithContext(ctx context.Context) AlarmruleAlarmActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleAlarmActionOutput)
}

// AlarmruleAlarmActionArrayInput is an input type that accepts AlarmruleAlarmActionArray and AlarmruleAlarmActionArrayOutput values.
// You can construct a concrete instance of `AlarmruleAlarmActionArrayInput` via:
//
//	AlarmruleAlarmActionArray{ AlarmruleAlarmActionArgs{...} }
type AlarmruleAlarmActionArrayInput interface {
	pulumi.Input

	ToAlarmruleAlarmActionArrayOutput() AlarmruleAlarmActionArrayOutput
	ToAlarmruleAlarmActionArrayOutputWithContext(context.Context) AlarmruleAlarmActionArrayOutput
}

type AlarmruleAlarmActionArray []AlarmruleAlarmActionInput

func (AlarmruleAlarmActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmruleAlarmAction)(nil)).Elem()
}

func (i AlarmruleAlarmActionArray) ToAlarmruleAlarmActionArrayOutput() AlarmruleAlarmActionArrayOutput {
	return i.ToAlarmruleAlarmActionArrayOutputWithContext(context.Background())
}

func (i AlarmruleAlarmActionArray) ToAlarmruleAlarmActionArrayOutputWithContext(ctx context.Context) AlarmruleAlarmActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleAlarmActionArrayOutput)
}

type AlarmruleAlarmActionOutput struct{ *pulumi.OutputState }

func (AlarmruleAlarmActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleAlarmAction)(nil)).Elem()
}

func (o AlarmruleAlarmActionOutput) ToAlarmruleAlarmActionOutput() AlarmruleAlarmActionOutput {
	return o
}

func (o AlarmruleAlarmActionOutput) ToAlarmruleAlarmActionOutputWithContext(ctx context.Context) AlarmruleAlarmActionOutput {
	return o
}

// specifies the list of objects to be notified if the alarm status changes, the
// maximum length is 5. If `type` is set to *notification*, the value of notificationList cannot be empty. If `type` is
// set to *autoscaling*, the value of notificationList must be **[]**
// and the value of namespace must be *SYS.AS*.
//
// Note: to enable the *autoscaling* alarm rules take effect, you must bind scaling policies.
func (o AlarmruleAlarmActionOutput) NotificationLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlarmruleAlarmAction) []string { return v.NotificationLists }).(pulumi.StringArrayOutput)
}

// Specifies the type of action triggered by an alarm. the
// value can be *notification* or *autoscaling*.
// + notification: indicates that a notification will be sent to the user.
// + autoscaling: indicates that a scaling action will be triggered.
func (o AlarmruleAlarmActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleAlarmAction) string { return v.Type }).(pulumi.StringOutput)
}

type AlarmruleAlarmActionArrayOutput struct{ *pulumi.OutputState }

func (AlarmruleAlarmActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmruleAlarmAction)(nil)).Elem()
}

func (o AlarmruleAlarmActionArrayOutput) ToAlarmruleAlarmActionArrayOutput() AlarmruleAlarmActionArrayOutput {
	return o
}

func (o AlarmruleAlarmActionArrayOutput) ToAlarmruleAlarmActionArrayOutputWithContext(ctx context.Context) AlarmruleAlarmActionArrayOutput {
	return o
}

func (o AlarmruleAlarmActionArrayOutput) Index(i pulumi.IntInput) AlarmruleAlarmActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlarmruleAlarmAction {
		return vs[0].([]AlarmruleAlarmAction)[vs[1].(int)]
	}).(AlarmruleAlarmActionOutput)
}

type AlarmruleCondition struct {
	// Specifies the comparison condition of alarm thresholds. The value can be >,
	// =, <, >=, or <=.
	ComparisonOperator string `pulumi:"comparisonOperator"`
	// Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
	Count int `pulumi:"count"`
	// Specifies the data rollup methods. The value can be max, min, average, sum, and vaiance.
	Filter string `pulumi:"filter"`
	// Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
	// and 86400.
	//
	// Note: If period is set to 1, the raw metric data is used to determine whether to generate an alarm. When the value of
	// `alarmType` is **EVENT.SYS** or **EVENT.CUSTOM**, period can be set to 0.
	Period int `pulumi:"period"`
	// Specifies the interval for triggering an alarm if the alarm persists.
	// Possible values are as follows:
	// + **0**: Cloud Eye triggers the alarm only once;
	// + **300**: Cloud Eye triggers the alarm every 5 minutes;
	// + **600**: Cloud Eye triggers the alarm every 10 minutes;
	// + **900**: Cloud Eye triggers the alarm every 15 minutes;
	// + **1800**: Cloud Eye triggers the alarm every 30 minutes;
	// + **3600**: Cloud Eye triggers the alarm every hour;
	// + **10800**: Cloud Eye triggers the alarm every 3 hours;
	// + **21600**: Cloud Eye triggers the alarm every 6 hours;
	// + **43200**: Cloud Eye triggers the alarm every 12 hour;
	// + **86400**: Cloud Eye triggers the alarm every day.
	//
	// The default value is **0**.
	SuppressDuration *int `pulumi:"suppressDuration"`
	// Specifies the data unit.
	Unit *string `pulumi:"unit"`
	// Specifies the alarm threshold. The value ranges from 0 to Number of
	// 1.7976931348623157e+108.
	Value int `pulumi:"value"`
}

// AlarmruleConditionInput is an input type that accepts AlarmruleConditionArgs and AlarmruleConditionOutput values.
// You can construct a concrete instance of `AlarmruleConditionInput` via:
//
//	AlarmruleConditionArgs{...}
type AlarmruleConditionInput interface {
	pulumi.Input

	ToAlarmruleConditionOutput() AlarmruleConditionOutput
	ToAlarmruleConditionOutputWithContext(context.Context) AlarmruleConditionOutput
}

type AlarmruleConditionArgs struct {
	// Specifies the comparison condition of alarm thresholds. The value can be >,
	// =, <, >=, or <=.
	ComparisonOperator pulumi.StringInput `pulumi:"comparisonOperator"`
	// Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
	Count pulumi.IntInput `pulumi:"count"`
	// Specifies the data rollup methods. The value can be max, min, average, sum, and vaiance.
	Filter pulumi.StringInput `pulumi:"filter"`
	// Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
	// and 86400.
	//
	// Note: If period is set to 1, the raw metric data is used to determine whether to generate an alarm. When the value of
	// `alarmType` is **EVENT.SYS** or **EVENT.CUSTOM**, period can be set to 0.
	Period pulumi.IntInput `pulumi:"period"`
	// Specifies the interval for triggering an alarm if the alarm persists.
	// Possible values are as follows:
	// + **0**: Cloud Eye triggers the alarm only once;
	// + **300**: Cloud Eye triggers the alarm every 5 minutes;
	// + **600**: Cloud Eye triggers the alarm every 10 minutes;
	// + **900**: Cloud Eye triggers the alarm every 15 minutes;
	// + **1800**: Cloud Eye triggers the alarm every 30 minutes;
	// + **3600**: Cloud Eye triggers the alarm every hour;
	// + **10800**: Cloud Eye triggers the alarm every 3 hours;
	// + **21600**: Cloud Eye triggers the alarm every 6 hours;
	// + **43200**: Cloud Eye triggers the alarm every 12 hour;
	// + **86400**: Cloud Eye triggers the alarm every day.
	//
	// The default value is **0**.
	SuppressDuration pulumi.IntPtrInput `pulumi:"suppressDuration"`
	// Specifies the data unit.
	Unit pulumi.StringPtrInput `pulumi:"unit"`
	// Specifies the alarm threshold. The value ranges from 0 to Number of
	// 1.7976931348623157e+108.
	Value pulumi.IntInput `pulumi:"value"`
}

func (AlarmruleConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleCondition)(nil)).Elem()
}

func (i AlarmruleConditionArgs) ToAlarmruleConditionOutput() AlarmruleConditionOutput {
	return i.ToAlarmruleConditionOutputWithContext(context.Background())
}

func (i AlarmruleConditionArgs) ToAlarmruleConditionOutputWithContext(ctx context.Context) AlarmruleConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleConditionOutput)
}

func (i AlarmruleConditionArgs) ToAlarmruleConditionPtrOutput() AlarmruleConditionPtrOutput {
	return i.ToAlarmruleConditionPtrOutputWithContext(context.Background())
}

func (i AlarmruleConditionArgs) ToAlarmruleConditionPtrOutputWithContext(ctx context.Context) AlarmruleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleConditionOutput).ToAlarmruleConditionPtrOutputWithContext(ctx)
}

// AlarmruleConditionPtrInput is an input type that accepts AlarmruleConditionArgs, AlarmruleConditionPtr and AlarmruleConditionPtrOutput values.
// You can construct a concrete instance of `AlarmruleConditionPtrInput` via:
//
//	        AlarmruleConditionArgs{...}
//
//	or:
//
//	        nil
type AlarmruleConditionPtrInput interface {
	pulumi.Input

	ToAlarmruleConditionPtrOutput() AlarmruleConditionPtrOutput
	ToAlarmruleConditionPtrOutputWithContext(context.Context) AlarmruleConditionPtrOutput
}

type alarmruleConditionPtrType AlarmruleConditionArgs

func AlarmruleConditionPtr(v *AlarmruleConditionArgs) AlarmruleConditionPtrInput {
	return (*alarmruleConditionPtrType)(v)
}

func (*alarmruleConditionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmruleCondition)(nil)).Elem()
}

func (i *alarmruleConditionPtrType) ToAlarmruleConditionPtrOutput() AlarmruleConditionPtrOutput {
	return i.ToAlarmruleConditionPtrOutputWithContext(context.Background())
}

func (i *alarmruleConditionPtrType) ToAlarmruleConditionPtrOutputWithContext(ctx context.Context) AlarmruleConditionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleConditionPtrOutput)
}

type AlarmruleConditionOutput struct{ *pulumi.OutputState }

func (AlarmruleConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleCondition)(nil)).Elem()
}

func (o AlarmruleConditionOutput) ToAlarmruleConditionOutput() AlarmruleConditionOutput {
	return o
}

func (o AlarmruleConditionOutput) ToAlarmruleConditionOutputWithContext(ctx context.Context) AlarmruleConditionOutput {
	return o
}

func (o AlarmruleConditionOutput) ToAlarmruleConditionPtrOutput() AlarmruleConditionPtrOutput {
	return o.ToAlarmruleConditionPtrOutputWithContext(context.Background())
}

func (o AlarmruleConditionOutput) ToAlarmruleConditionPtrOutputWithContext(ctx context.Context) AlarmruleConditionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlarmruleCondition) *AlarmruleCondition {
		return &v
	}).(AlarmruleConditionPtrOutput)
}

// Specifies the comparison condition of alarm thresholds. The value can be >,
// =, <, >=, or <=.
func (o AlarmruleConditionOutput) ComparisonOperator() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleCondition) string { return v.ComparisonOperator }).(pulumi.StringOutput)
}

// Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
func (o AlarmruleConditionOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v AlarmruleCondition) int { return v.Count }).(pulumi.IntOutput)
}

// Specifies the data rollup methods. The value can be max, min, average, sum, and vaiance.
func (o AlarmruleConditionOutput) Filter() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleCondition) string { return v.Filter }).(pulumi.StringOutput)
}

// Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
// and 86400.
//
// Note: If period is set to 1, the raw metric data is used to determine whether to generate an alarm. When the value of
// `alarmType` is **EVENT.SYS** or **EVENT.CUSTOM**, period can be set to 0.
func (o AlarmruleConditionOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v AlarmruleCondition) int { return v.Period }).(pulumi.IntOutput)
}

// Specifies the interval for triggering an alarm if the alarm persists.
// Possible values are as follows:
// + **0**: Cloud Eye triggers the alarm only once;
// + **300**: Cloud Eye triggers the alarm every 5 minutes;
// + **600**: Cloud Eye triggers the alarm every 10 minutes;
// + **900**: Cloud Eye triggers the alarm every 15 minutes;
// + **1800**: Cloud Eye triggers the alarm every 30 minutes;
// + **3600**: Cloud Eye triggers the alarm every hour;
// + **10800**: Cloud Eye triggers the alarm every 3 hours;
// + **21600**: Cloud Eye triggers the alarm every 6 hours;
// + **43200**: Cloud Eye triggers the alarm every 12 hour;
// + **86400**: Cloud Eye triggers the alarm every day.
//
// The default value is **0**.
func (o AlarmruleConditionOutput) SuppressDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlarmruleCondition) *int { return v.SuppressDuration }).(pulumi.IntPtrOutput)
}

// Specifies the data unit.
func (o AlarmruleConditionOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlarmruleCondition) *string { return v.Unit }).(pulumi.StringPtrOutput)
}

// Specifies the alarm threshold. The value ranges from 0 to Number of
// 1.7976931348623157e+108.
func (o AlarmruleConditionOutput) Value() pulumi.IntOutput {
	return o.ApplyT(func(v AlarmruleCondition) int { return v.Value }).(pulumi.IntOutput)
}

type AlarmruleConditionPtrOutput struct{ *pulumi.OutputState }

func (AlarmruleConditionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmruleCondition)(nil)).Elem()
}

func (o AlarmruleConditionPtrOutput) ToAlarmruleConditionPtrOutput() AlarmruleConditionPtrOutput {
	return o
}

func (o AlarmruleConditionPtrOutput) ToAlarmruleConditionPtrOutputWithContext(ctx context.Context) AlarmruleConditionPtrOutput {
	return o
}

func (o AlarmruleConditionPtrOutput) Elem() AlarmruleConditionOutput {
	return o.ApplyT(func(v *AlarmruleCondition) AlarmruleCondition {
		if v != nil {
			return *v
		}
		var ret AlarmruleCondition
		return ret
	}).(AlarmruleConditionOutput)
}

// Specifies the comparison condition of alarm thresholds. The value can be >,
// =, <, >=, or <=.
func (o AlarmruleConditionPtrOutput) ComparisonOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmruleCondition) *string {
		if v == nil {
			return nil
		}
		return &v.ComparisonOperator
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
func (o AlarmruleConditionPtrOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmruleCondition) *int {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.IntPtrOutput)
}

// Specifies the data rollup methods. The value can be max, min, average, sum, and vaiance.
func (o AlarmruleConditionPtrOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmruleCondition) *string {
		if v == nil {
			return nil
		}
		return &v.Filter
	}).(pulumi.StringPtrOutput)
}

// Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
// and 86400.
//
// Note: If period is set to 1, the raw metric data is used to determine whether to generate an alarm. When the value of
// `alarmType` is **EVENT.SYS** or **EVENT.CUSTOM**, period can be set to 0.
func (o AlarmruleConditionPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmruleCondition) *int {
		if v == nil {
			return nil
		}
		return &v.Period
	}).(pulumi.IntPtrOutput)
}

// Specifies the interval for triggering an alarm if the alarm persists.
// Possible values are as follows:
// + **0**: Cloud Eye triggers the alarm only once;
// + **300**: Cloud Eye triggers the alarm every 5 minutes;
// + **600**: Cloud Eye triggers the alarm every 10 minutes;
// + **900**: Cloud Eye triggers the alarm every 15 minutes;
// + **1800**: Cloud Eye triggers the alarm every 30 minutes;
// + **3600**: Cloud Eye triggers the alarm every hour;
// + **10800**: Cloud Eye triggers the alarm every 3 hours;
// + **21600**: Cloud Eye triggers the alarm every 6 hours;
// + **43200**: Cloud Eye triggers the alarm every 12 hour;
// + **86400**: Cloud Eye triggers the alarm every day.
//
// The default value is **0**.
func (o AlarmruleConditionPtrOutput) SuppressDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmruleCondition) *int {
		if v == nil {
			return nil
		}
		return v.SuppressDuration
	}).(pulumi.IntPtrOutput)
}

// Specifies the data unit.
func (o AlarmruleConditionPtrOutput) Unit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmruleCondition) *string {
		if v == nil {
			return nil
		}
		return v.Unit
	}).(pulumi.StringPtrOutput)
}

// Specifies the alarm threshold. The value ranges from 0 to Number of
// 1.7976931348623157e+108.
func (o AlarmruleConditionPtrOutput) Value() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmruleCondition) *int {
		if v == nil {
			return nil
		}
		return &v.Value
	}).(pulumi.IntPtrOutput)
}

type AlarmruleInsufficientdataAction struct {
	NotificationLists []string `pulumi:"notificationLists"`
	Type              string   `pulumi:"type"`
}

// AlarmruleInsufficientdataActionInput is an input type that accepts AlarmruleInsufficientdataActionArgs and AlarmruleInsufficientdataActionOutput values.
// You can construct a concrete instance of `AlarmruleInsufficientdataActionInput` via:
//
//	AlarmruleInsufficientdataActionArgs{...}
type AlarmruleInsufficientdataActionInput interface {
	pulumi.Input

	ToAlarmruleInsufficientdataActionOutput() AlarmruleInsufficientdataActionOutput
	ToAlarmruleInsufficientdataActionOutputWithContext(context.Context) AlarmruleInsufficientdataActionOutput
}

type AlarmruleInsufficientdataActionArgs struct {
	NotificationLists pulumi.StringArrayInput `pulumi:"notificationLists"`
	Type              pulumi.StringInput      `pulumi:"type"`
}

func (AlarmruleInsufficientdataActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleInsufficientdataAction)(nil)).Elem()
}

func (i AlarmruleInsufficientdataActionArgs) ToAlarmruleInsufficientdataActionOutput() AlarmruleInsufficientdataActionOutput {
	return i.ToAlarmruleInsufficientdataActionOutputWithContext(context.Background())
}

func (i AlarmruleInsufficientdataActionArgs) ToAlarmruleInsufficientdataActionOutputWithContext(ctx context.Context) AlarmruleInsufficientdataActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleInsufficientdataActionOutput)
}

// AlarmruleInsufficientdataActionArrayInput is an input type that accepts AlarmruleInsufficientdataActionArray and AlarmruleInsufficientdataActionArrayOutput values.
// You can construct a concrete instance of `AlarmruleInsufficientdataActionArrayInput` via:
//
//	AlarmruleInsufficientdataActionArray{ AlarmruleInsufficientdataActionArgs{...} }
type AlarmruleInsufficientdataActionArrayInput interface {
	pulumi.Input

	ToAlarmruleInsufficientdataActionArrayOutput() AlarmruleInsufficientdataActionArrayOutput
	ToAlarmruleInsufficientdataActionArrayOutputWithContext(context.Context) AlarmruleInsufficientdataActionArrayOutput
}

type AlarmruleInsufficientdataActionArray []AlarmruleInsufficientdataActionInput

func (AlarmruleInsufficientdataActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmruleInsufficientdataAction)(nil)).Elem()
}

func (i AlarmruleInsufficientdataActionArray) ToAlarmruleInsufficientdataActionArrayOutput() AlarmruleInsufficientdataActionArrayOutput {
	return i.ToAlarmruleInsufficientdataActionArrayOutputWithContext(context.Background())
}

func (i AlarmruleInsufficientdataActionArray) ToAlarmruleInsufficientdataActionArrayOutputWithContext(ctx context.Context) AlarmruleInsufficientdataActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleInsufficientdataActionArrayOutput)
}

type AlarmruleInsufficientdataActionOutput struct{ *pulumi.OutputState }

func (AlarmruleInsufficientdataActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleInsufficientdataAction)(nil)).Elem()
}

func (o AlarmruleInsufficientdataActionOutput) ToAlarmruleInsufficientdataActionOutput() AlarmruleInsufficientdataActionOutput {
	return o
}

func (o AlarmruleInsufficientdataActionOutput) ToAlarmruleInsufficientdataActionOutputWithContext(ctx context.Context) AlarmruleInsufficientdataActionOutput {
	return o
}

func (o AlarmruleInsufficientdataActionOutput) NotificationLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlarmruleInsufficientdataAction) []string { return v.NotificationLists }).(pulumi.StringArrayOutput)
}

func (o AlarmruleInsufficientdataActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleInsufficientdataAction) string { return v.Type }).(pulumi.StringOutput)
}

type AlarmruleInsufficientdataActionArrayOutput struct{ *pulumi.OutputState }

func (AlarmruleInsufficientdataActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmruleInsufficientdataAction)(nil)).Elem()
}

func (o AlarmruleInsufficientdataActionArrayOutput) ToAlarmruleInsufficientdataActionArrayOutput() AlarmruleInsufficientdataActionArrayOutput {
	return o
}

func (o AlarmruleInsufficientdataActionArrayOutput) ToAlarmruleInsufficientdataActionArrayOutputWithContext(ctx context.Context) AlarmruleInsufficientdataActionArrayOutput {
	return o
}

func (o AlarmruleInsufficientdataActionArrayOutput) Index(i pulumi.IntInput) AlarmruleInsufficientdataActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlarmruleInsufficientdataAction {
		return vs[0].([]AlarmruleInsufficientdataAction)[vs[1].(int)]
	}).(AlarmruleInsufficientdataActionOutput)
}

type AlarmruleMetric struct {
	// Specifies the list of metric dimensions. The structure is described below.
	Dimensions []AlarmruleMetricDimension `pulumi:"dimensions"`
	// Specifies the metric name of the condition. The value can be a string of
	// 1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
	MetricName string `pulumi:"metricName"`
	// Specifies the namespace in **service.item** format. **service** and **item**
	// each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
	// Changing this creates a new resource.
	Namespace string `pulumi:"namespace"`
}

// AlarmruleMetricInput is an input type that accepts AlarmruleMetricArgs and AlarmruleMetricOutput values.
// You can construct a concrete instance of `AlarmruleMetricInput` via:
//
//	AlarmruleMetricArgs{...}
type AlarmruleMetricInput interface {
	pulumi.Input

	ToAlarmruleMetricOutput() AlarmruleMetricOutput
	ToAlarmruleMetricOutputWithContext(context.Context) AlarmruleMetricOutput
}

type AlarmruleMetricArgs struct {
	// Specifies the list of metric dimensions. The structure is described below.
	Dimensions AlarmruleMetricDimensionArrayInput `pulumi:"dimensions"`
	// Specifies the metric name of the condition. The value can be a string of
	// 1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
	MetricName pulumi.StringInput `pulumi:"metricName"`
	// Specifies the namespace in **service.item** format. **service** and **item**
	// each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
	// Changing this creates a new resource.
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (AlarmruleMetricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleMetric)(nil)).Elem()
}

func (i AlarmruleMetricArgs) ToAlarmruleMetricOutput() AlarmruleMetricOutput {
	return i.ToAlarmruleMetricOutputWithContext(context.Background())
}

func (i AlarmruleMetricArgs) ToAlarmruleMetricOutputWithContext(ctx context.Context) AlarmruleMetricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleMetricOutput)
}

func (i AlarmruleMetricArgs) ToAlarmruleMetricPtrOutput() AlarmruleMetricPtrOutput {
	return i.ToAlarmruleMetricPtrOutputWithContext(context.Background())
}

func (i AlarmruleMetricArgs) ToAlarmruleMetricPtrOutputWithContext(ctx context.Context) AlarmruleMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleMetricOutput).ToAlarmruleMetricPtrOutputWithContext(ctx)
}

// AlarmruleMetricPtrInput is an input type that accepts AlarmruleMetricArgs, AlarmruleMetricPtr and AlarmruleMetricPtrOutput values.
// You can construct a concrete instance of `AlarmruleMetricPtrInput` via:
//
//	        AlarmruleMetricArgs{...}
//
//	or:
//
//	        nil
type AlarmruleMetricPtrInput interface {
	pulumi.Input

	ToAlarmruleMetricPtrOutput() AlarmruleMetricPtrOutput
	ToAlarmruleMetricPtrOutputWithContext(context.Context) AlarmruleMetricPtrOutput
}

type alarmruleMetricPtrType AlarmruleMetricArgs

func AlarmruleMetricPtr(v *AlarmruleMetricArgs) AlarmruleMetricPtrInput {
	return (*alarmruleMetricPtrType)(v)
}

func (*alarmruleMetricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmruleMetric)(nil)).Elem()
}

func (i *alarmruleMetricPtrType) ToAlarmruleMetricPtrOutput() AlarmruleMetricPtrOutput {
	return i.ToAlarmruleMetricPtrOutputWithContext(context.Background())
}

func (i *alarmruleMetricPtrType) ToAlarmruleMetricPtrOutputWithContext(ctx context.Context) AlarmruleMetricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleMetricPtrOutput)
}

type AlarmruleMetricOutput struct{ *pulumi.OutputState }

func (AlarmruleMetricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleMetric)(nil)).Elem()
}

func (o AlarmruleMetricOutput) ToAlarmruleMetricOutput() AlarmruleMetricOutput {
	return o
}

func (o AlarmruleMetricOutput) ToAlarmruleMetricOutputWithContext(ctx context.Context) AlarmruleMetricOutput {
	return o
}

func (o AlarmruleMetricOutput) ToAlarmruleMetricPtrOutput() AlarmruleMetricPtrOutput {
	return o.ToAlarmruleMetricPtrOutputWithContext(context.Background())
}

func (o AlarmruleMetricOutput) ToAlarmruleMetricPtrOutputWithContext(ctx context.Context) AlarmruleMetricPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlarmruleMetric) *AlarmruleMetric {
		return &v
	}).(AlarmruleMetricPtrOutput)
}

// Specifies the list of metric dimensions. The structure is described below.
func (o AlarmruleMetricOutput) Dimensions() AlarmruleMetricDimensionArrayOutput {
	return o.ApplyT(func(v AlarmruleMetric) []AlarmruleMetricDimension { return v.Dimensions }).(AlarmruleMetricDimensionArrayOutput)
}

// Specifies the metric name of the condition. The value can be a string of
// 1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
func (o AlarmruleMetricOutput) MetricName() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleMetric) string { return v.MetricName }).(pulumi.StringOutput)
}

// Specifies the namespace in **service.item** format. **service** and **item**
// each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
// Changing this creates a new resource.
func (o AlarmruleMetricOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleMetric) string { return v.Namespace }).(pulumi.StringOutput)
}

type AlarmruleMetricPtrOutput struct{ *pulumi.OutputState }

func (AlarmruleMetricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmruleMetric)(nil)).Elem()
}

func (o AlarmruleMetricPtrOutput) ToAlarmruleMetricPtrOutput() AlarmruleMetricPtrOutput {
	return o
}

func (o AlarmruleMetricPtrOutput) ToAlarmruleMetricPtrOutputWithContext(ctx context.Context) AlarmruleMetricPtrOutput {
	return o
}

func (o AlarmruleMetricPtrOutput) Elem() AlarmruleMetricOutput {
	return o.ApplyT(func(v *AlarmruleMetric) AlarmruleMetric {
		if v != nil {
			return *v
		}
		var ret AlarmruleMetric
		return ret
	}).(AlarmruleMetricOutput)
}

// Specifies the list of metric dimensions. The structure is described below.
func (o AlarmruleMetricPtrOutput) Dimensions() AlarmruleMetricDimensionArrayOutput {
	return o.ApplyT(func(v *AlarmruleMetric) []AlarmruleMetricDimension {
		if v == nil {
			return nil
		}
		return v.Dimensions
	}).(AlarmruleMetricDimensionArrayOutput)
}

// Specifies the metric name of the condition. The value can be a string of
// 1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
func (o AlarmruleMetricPtrOutput) MetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmruleMetric) *string {
		if v == nil {
			return nil
		}
		return &v.MetricName
	}).(pulumi.StringPtrOutput)
}

// Specifies the namespace in **service.item** format. **service** and **item**
// each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
// Changing this creates a new resource.
func (o AlarmruleMetricPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmruleMetric) *string {
		if v == nil {
			return nil
		}
		return &v.Namespace
	}).(pulumi.StringPtrOutput)
}

type AlarmruleMetricDimension struct {
	// Specifies the dimension name. The value can be a string of 1 to 32 characters
	// that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
	Name string `pulumi:"name"`
	// Specifies the dimension value. The value can be a string of 1 to 64 characters
	// that must start with a letter or a number and contain only letters, digits, underscores (_), and hyphens (-).
	Value string `pulumi:"value"`
}

// AlarmruleMetricDimensionInput is an input type that accepts AlarmruleMetricDimensionArgs and AlarmruleMetricDimensionOutput values.
// You can construct a concrete instance of `AlarmruleMetricDimensionInput` via:
//
//	AlarmruleMetricDimensionArgs{...}
type AlarmruleMetricDimensionInput interface {
	pulumi.Input

	ToAlarmruleMetricDimensionOutput() AlarmruleMetricDimensionOutput
	ToAlarmruleMetricDimensionOutputWithContext(context.Context) AlarmruleMetricDimensionOutput
}

type AlarmruleMetricDimensionArgs struct {
	// Specifies the dimension name. The value can be a string of 1 to 32 characters
	// that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the dimension value. The value can be a string of 1 to 64 characters
	// that must start with a letter or a number and contain only letters, digits, underscores (_), and hyphens (-).
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlarmruleMetricDimensionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleMetricDimension)(nil)).Elem()
}

func (i AlarmruleMetricDimensionArgs) ToAlarmruleMetricDimensionOutput() AlarmruleMetricDimensionOutput {
	return i.ToAlarmruleMetricDimensionOutputWithContext(context.Background())
}

func (i AlarmruleMetricDimensionArgs) ToAlarmruleMetricDimensionOutputWithContext(ctx context.Context) AlarmruleMetricDimensionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleMetricDimensionOutput)
}

// AlarmruleMetricDimensionArrayInput is an input type that accepts AlarmruleMetricDimensionArray and AlarmruleMetricDimensionArrayOutput values.
// You can construct a concrete instance of `AlarmruleMetricDimensionArrayInput` via:
//
//	AlarmruleMetricDimensionArray{ AlarmruleMetricDimensionArgs{...} }
type AlarmruleMetricDimensionArrayInput interface {
	pulumi.Input

	ToAlarmruleMetricDimensionArrayOutput() AlarmruleMetricDimensionArrayOutput
	ToAlarmruleMetricDimensionArrayOutputWithContext(context.Context) AlarmruleMetricDimensionArrayOutput
}

type AlarmruleMetricDimensionArray []AlarmruleMetricDimensionInput

func (AlarmruleMetricDimensionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmruleMetricDimension)(nil)).Elem()
}

func (i AlarmruleMetricDimensionArray) ToAlarmruleMetricDimensionArrayOutput() AlarmruleMetricDimensionArrayOutput {
	return i.ToAlarmruleMetricDimensionArrayOutputWithContext(context.Background())
}

func (i AlarmruleMetricDimensionArray) ToAlarmruleMetricDimensionArrayOutputWithContext(ctx context.Context) AlarmruleMetricDimensionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleMetricDimensionArrayOutput)
}

type AlarmruleMetricDimensionOutput struct{ *pulumi.OutputState }

func (AlarmruleMetricDimensionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleMetricDimension)(nil)).Elem()
}

func (o AlarmruleMetricDimensionOutput) ToAlarmruleMetricDimensionOutput() AlarmruleMetricDimensionOutput {
	return o
}

func (o AlarmruleMetricDimensionOutput) ToAlarmruleMetricDimensionOutputWithContext(ctx context.Context) AlarmruleMetricDimensionOutput {
	return o
}

// Specifies the dimension name. The value can be a string of 1 to 32 characters
// that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
func (o AlarmruleMetricDimensionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleMetricDimension) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the dimension value. The value can be a string of 1 to 64 characters
// that must start with a letter or a number and contain only letters, digits, underscores (_), and hyphens (-).
func (o AlarmruleMetricDimensionOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleMetricDimension) string { return v.Value }).(pulumi.StringOutput)
}

type AlarmruleMetricDimensionArrayOutput struct{ *pulumi.OutputState }

func (AlarmruleMetricDimensionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmruleMetricDimension)(nil)).Elem()
}

func (o AlarmruleMetricDimensionArrayOutput) ToAlarmruleMetricDimensionArrayOutput() AlarmruleMetricDimensionArrayOutput {
	return o
}

func (o AlarmruleMetricDimensionArrayOutput) ToAlarmruleMetricDimensionArrayOutputWithContext(ctx context.Context) AlarmruleMetricDimensionArrayOutput {
	return o
}

func (o AlarmruleMetricDimensionArrayOutput) Index(i pulumi.IntInput) AlarmruleMetricDimensionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlarmruleMetricDimension {
		return vs[0].([]AlarmruleMetricDimension)[vs[1].(int)]
	}).(AlarmruleMetricDimensionOutput)
}

type AlarmruleOkAction struct {
	// specifies the list of objects to be notified if the alarm status changes, the
	// maximum length is 5.
	NotificationLists []string `pulumi:"notificationLists"`
	// Specifies the type of action triggered by an alarm. the value is notification.
	// notification: indicates that a notification will be sent to the user.
	Type string `pulumi:"type"`
}

// AlarmruleOkActionInput is an input type that accepts AlarmruleOkActionArgs and AlarmruleOkActionOutput values.
// You can construct a concrete instance of `AlarmruleOkActionInput` via:
//
//	AlarmruleOkActionArgs{...}
type AlarmruleOkActionInput interface {
	pulumi.Input

	ToAlarmruleOkActionOutput() AlarmruleOkActionOutput
	ToAlarmruleOkActionOutputWithContext(context.Context) AlarmruleOkActionOutput
}

type AlarmruleOkActionArgs struct {
	// specifies the list of objects to be notified if the alarm status changes, the
	// maximum length is 5.
	NotificationLists pulumi.StringArrayInput `pulumi:"notificationLists"`
	// Specifies the type of action triggered by an alarm. the value is notification.
	// notification: indicates that a notification will be sent to the user.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AlarmruleOkActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleOkAction)(nil)).Elem()
}

func (i AlarmruleOkActionArgs) ToAlarmruleOkActionOutput() AlarmruleOkActionOutput {
	return i.ToAlarmruleOkActionOutputWithContext(context.Background())
}

func (i AlarmruleOkActionArgs) ToAlarmruleOkActionOutputWithContext(ctx context.Context) AlarmruleOkActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleOkActionOutput)
}

// AlarmruleOkActionArrayInput is an input type that accepts AlarmruleOkActionArray and AlarmruleOkActionArrayOutput values.
// You can construct a concrete instance of `AlarmruleOkActionArrayInput` via:
//
//	AlarmruleOkActionArray{ AlarmruleOkActionArgs{...} }
type AlarmruleOkActionArrayInput interface {
	pulumi.Input

	ToAlarmruleOkActionArrayOutput() AlarmruleOkActionArrayOutput
	ToAlarmruleOkActionArrayOutputWithContext(context.Context) AlarmruleOkActionArrayOutput
}

type AlarmruleOkActionArray []AlarmruleOkActionInput

func (AlarmruleOkActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmruleOkAction)(nil)).Elem()
}

func (i AlarmruleOkActionArray) ToAlarmruleOkActionArrayOutput() AlarmruleOkActionArrayOutput {
	return i.ToAlarmruleOkActionArrayOutputWithContext(context.Background())
}

func (i AlarmruleOkActionArray) ToAlarmruleOkActionArrayOutputWithContext(ctx context.Context) AlarmruleOkActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleOkActionArrayOutput)
}

type AlarmruleOkActionOutput struct{ *pulumi.OutputState }

func (AlarmruleOkActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlarmruleOkAction)(nil)).Elem()
}

func (o AlarmruleOkActionOutput) ToAlarmruleOkActionOutput() AlarmruleOkActionOutput {
	return o
}

func (o AlarmruleOkActionOutput) ToAlarmruleOkActionOutputWithContext(ctx context.Context) AlarmruleOkActionOutput {
	return o
}

// specifies the list of objects to be notified if the alarm status changes, the
// maximum length is 5.
func (o AlarmruleOkActionOutput) NotificationLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlarmruleOkAction) []string { return v.NotificationLists }).(pulumi.StringArrayOutput)
}

// Specifies the type of action triggered by an alarm. the value is notification.
// notification: indicates that a notification will be sent to the user.
func (o AlarmruleOkActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlarmruleOkAction) string { return v.Type }).(pulumi.StringOutput)
}

type AlarmruleOkActionArrayOutput struct{ *pulumi.OutputState }

func (AlarmruleOkActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlarmruleOkAction)(nil)).Elem()
}

func (o AlarmruleOkActionArrayOutput) ToAlarmruleOkActionArrayOutput() AlarmruleOkActionArrayOutput {
	return o
}

func (o AlarmruleOkActionArrayOutput) ToAlarmruleOkActionArrayOutputWithContext(ctx context.Context) AlarmruleOkActionArrayOutput {
	return o
}

func (o AlarmruleOkActionArrayOutput) Index(i pulumi.IntInput) AlarmruleOkActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlarmruleOkAction {
		return vs[0].([]AlarmruleOkAction)[vs[1].(int)]
	}).(AlarmruleOkActionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleAlarmActionInput)(nil)).Elem(), AlarmruleAlarmActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleAlarmActionArrayInput)(nil)).Elem(), AlarmruleAlarmActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleConditionInput)(nil)).Elem(), AlarmruleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleConditionPtrInput)(nil)).Elem(), AlarmruleConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleInsufficientdataActionInput)(nil)).Elem(), AlarmruleInsufficientdataActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleInsufficientdataActionArrayInput)(nil)).Elem(), AlarmruleInsufficientdataActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleMetricInput)(nil)).Elem(), AlarmruleMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleMetricPtrInput)(nil)).Elem(), AlarmruleMetricArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleMetricDimensionInput)(nil)).Elem(), AlarmruleMetricDimensionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleMetricDimensionArrayInput)(nil)).Elem(), AlarmruleMetricDimensionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleOkActionInput)(nil)).Elem(), AlarmruleOkActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleOkActionArrayInput)(nil)).Elem(), AlarmruleOkActionArray{})
	pulumi.RegisterOutputType(AlarmruleAlarmActionOutput{})
	pulumi.RegisterOutputType(AlarmruleAlarmActionArrayOutput{})
	pulumi.RegisterOutputType(AlarmruleConditionOutput{})
	pulumi.RegisterOutputType(AlarmruleConditionPtrOutput{})
	pulumi.RegisterOutputType(AlarmruleInsufficientdataActionOutput{})
	pulumi.RegisterOutputType(AlarmruleInsufficientdataActionArrayOutput{})
	pulumi.RegisterOutputType(AlarmruleMetricOutput{})
	pulumi.RegisterOutputType(AlarmruleMetricPtrOutput{})
	pulumi.RegisterOutputType(AlarmruleMetricDimensionOutput{})
	pulumi.RegisterOutputType(AlarmruleMetricDimensionArrayOutput{})
	pulumi.RegisterOutputType(AlarmruleOkActionOutput{})
	pulumi.RegisterOutputType(AlarmruleOkActionArrayOutput{})
}

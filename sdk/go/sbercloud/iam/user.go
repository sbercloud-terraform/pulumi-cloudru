// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a User resource within SberCloud IAM service.
//
// Note: You _must_ have admin privileges in your SberCloud cloud to use this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewUser(ctx, "user_1", &iam.UserArgs{
//				Name:        pulumi.String("user_1"),
//				Description: pulumi.String("A user"),
//				Password:    pulumi.String("password123!"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Users can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import sbercloud:Iam/user:User user_1 89c60255-9bd6-460c-822a-e2b959ede9d2
// ```
//
// But due to the security reason, `password` can not be imported, you can ignore it as below.
//
// resource "sbercloud_identity_user" "user_1" {
//
//	...
//
//	lifecycle {
//
//	  ignore_changes = [
//
//	    "password",
//
//	  ]
//
//	}
//
// }
type User struct {
	pulumi.CustomResourceState

	// Specifies the access type of the user. Available values are:
	// + default: support both programmatic and management console access.
	// + programmatic: only support programmatic access.
	// + console: only support management console access.
	AccessType pulumi.StringOutput `pulumi:"accessType"`
	// Specifies the country code. The country code of the Chinese mainland is 0086. This
	// parameter must be used together with `phone`.
	CountryCode pulumi.StringPtrOutput `pulumi:"countryCode"`
	// The time when the IAM user was created.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the description of the user.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the email address with a maximum of 255 characters.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
	Enabled              pulumi.BoolPtrOutput   `pulumi:"enabled"`
	ExternalIdentityId   pulumi.StringPtrOutput `pulumi:"externalIdentityId"`
	ExternalIdentityType pulumi.StringOutput    `pulumi:"externalIdentityType"`
	// The tiem when the IAM user last login.
	LastLogin                      pulumi.StringOutput    `pulumi:"lastLogin"`
	LoginProtectVerificationMethod pulumi.StringPtrOutput `pulumi:"loginProtectVerificationMethod"`
	// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Indicates the password strength.
	PasswordStrength pulumi.StringOutput `pulumi:"passwordStrength"`
	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with `countryCode`.
	Phone pulumi.StringPtrOutput `pulumi:"phone"`
	// Specifies whether or not the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset pulumi.BoolPtrOutput `pulumi:"pwdReset"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		args = &UserArgs{}
	}

	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("sbercloud:Iam/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("sbercloud:Iam/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Specifies the access type of the user. Available values are:
	// + default: support both programmatic and management console access.
	// + programmatic: only support programmatic access.
	// + console: only support management console access.
	AccessType *string `pulumi:"accessType"`
	// Specifies the country code. The country code of the Chinese mainland is 0086. This
	// parameter must be used together with `phone`.
	CountryCode *string `pulumi:"countryCode"`
	// The time when the IAM user was created.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the description of the user.
	Description *string `pulumi:"description"`
	// Specifies the email address with a maximum of 255 characters.
	Email *string `pulumi:"email"`
	// Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
	Enabled              *bool   `pulumi:"enabled"`
	ExternalIdentityId   *string `pulumi:"externalIdentityId"`
	ExternalIdentityType *string `pulumi:"externalIdentityType"`
	// The tiem when the IAM user last login.
	LastLogin                      *string `pulumi:"lastLogin"`
	LoginProtectVerificationMethod *string `pulumi:"loginProtectVerificationMethod"`
	// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name *string `pulumi:"name"`
	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	Password *string `pulumi:"password"`
	// Indicates the password strength.
	PasswordStrength *string `pulumi:"passwordStrength"`
	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with `countryCode`.
	Phone *string `pulumi:"phone"`
	// Specifies whether or not the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset *bool `pulumi:"pwdReset"`
}

type UserState struct {
	// Specifies the access type of the user. Available values are:
	// + default: support both programmatic and management console access.
	// + programmatic: only support programmatic access.
	// + console: only support management console access.
	AccessType pulumi.StringPtrInput
	// Specifies the country code. The country code of the Chinese mainland is 0086. This
	// parameter must be used together with `phone`.
	CountryCode pulumi.StringPtrInput
	// The time when the IAM user was created.
	CreateTime pulumi.StringPtrInput
	// Specifies the description of the user.
	Description pulumi.StringPtrInput
	// Specifies the email address with a maximum of 255 characters.
	Email pulumi.StringPtrInput
	// Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
	Enabled              pulumi.BoolPtrInput
	ExternalIdentityId   pulumi.StringPtrInput
	ExternalIdentityType pulumi.StringPtrInput
	// The tiem when the IAM user last login.
	LastLogin                      pulumi.StringPtrInput
	LoginProtectVerificationMethod pulumi.StringPtrInput
	// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name pulumi.StringPtrInput
	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	Password pulumi.StringPtrInput
	// Indicates the password strength.
	PasswordStrength pulumi.StringPtrInput
	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with `countryCode`.
	Phone pulumi.StringPtrInput
	// Specifies whether or not the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset pulumi.BoolPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Specifies the access type of the user. Available values are:
	// + default: support both programmatic and management console access.
	// + programmatic: only support programmatic access.
	// + console: only support management console access.
	AccessType *string `pulumi:"accessType"`
	// Specifies the country code. The country code of the Chinese mainland is 0086. This
	// parameter must be used together with `phone`.
	CountryCode *string `pulumi:"countryCode"`
	// Specifies the description of the user.
	Description *string `pulumi:"description"`
	// Specifies the email address with a maximum of 255 characters.
	Email *string `pulumi:"email"`
	// Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
	Enabled                        *bool   `pulumi:"enabled"`
	ExternalIdentityId             *string `pulumi:"externalIdentityId"`
	ExternalIdentityType           *string `pulumi:"externalIdentityType"`
	LoginProtectVerificationMethod *string `pulumi:"loginProtectVerificationMethod"`
	// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name *string `pulumi:"name"`
	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	Password *string `pulumi:"password"`
	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with `countryCode`.
	Phone *string `pulumi:"phone"`
	// Specifies whether or not the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset *bool `pulumi:"pwdReset"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Specifies the access type of the user. Available values are:
	// + default: support both programmatic and management console access.
	// + programmatic: only support programmatic access.
	// + console: only support management console access.
	AccessType pulumi.StringPtrInput
	// Specifies the country code. The country code of the Chinese mainland is 0086. This
	// parameter must be used together with `phone`.
	CountryCode pulumi.StringPtrInput
	// Specifies the description of the user.
	Description pulumi.StringPtrInput
	// Specifies the email address with a maximum of 255 characters.
	Email pulumi.StringPtrInput
	// Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
	Enabled                        pulumi.BoolPtrInput
	ExternalIdentityId             pulumi.StringPtrInput
	ExternalIdentityType           pulumi.StringPtrInput
	LoginProtectVerificationMethod pulumi.StringPtrInput
	// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
	// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
	// digit.
	Name pulumi.StringPtrInput
	// Specifies the password for the user with 6 to 32 characters. It must contain at least
	// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
	Password pulumi.StringPtrInput
	// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
	// together with `countryCode`.
	Phone pulumi.StringPtrInput
	// Specifies whether or not the password should be reset. By default, the password is asked
	// to reset at the first login.
	PwdReset pulumi.BoolPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Specifies the access type of the user. Available values are:
// + default: support both programmatic and management console access.
// + programmatic: only support programmatic access.
// + console: only support management console access.
func (o UserOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.AccessType }).(pulumi.StringOutput)
}

// Specifies the country code. The country code of the Chinese mainland is 0086. This
// parameter must be used together with `phone`.
func (o UserOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.CountryCode }).(pulumi.StringPtrOutput)
}

// The time when the IAM user was created.
func (o UserOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the description of the user.
func (o UserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the email address with a maximum of 255 characters.
func (o UserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
func (o UserOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o UserOutput) ExternalIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.ExternalIdentityId }).(pulumi.StringPtrOutput)
}

func (o UserOutput) ExternalIdentityType() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.ExternalIdentityType }).(pulumi.StringOutput)
}

// The tiem when the IAM user last login.
func (o UserOutput) LastLogin() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.LastLogin }).(pulumi.StringOutput)
}

func (o UserOutput) LoginProtectVerificationMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.LoginProtectVerificationMethod }).(pulumi.StringPtrOutput)
}

// Specifies the name of the user. The user name consists of 5 to 32 characters. It can
// contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
// digit.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the password for the user with 6 to 32 characters. It must contain at least
// two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Indicates the password strength.
func (o UserOutput) PasswordStrength() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.PasswordStrength }).(pulumi.StringOutput)
}

// Specifies the mobile number with a maximum of 32 digits. This parameter must be used
// together with `countryCode`.
func (o UserOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Phone }).(pulumi.StringPtrOutput)
}

// Specifies whether or not the password should be reset. By default, the password is asked
// to reset at the first login.
func (o UserOutput) PwdReset() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.PwdReset }).(pulumi.BoolPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}

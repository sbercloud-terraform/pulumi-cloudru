# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ZoneDnssecInfoArgs',
    'ZoneDnssecInfoArgsDict',
    'ZoneRouterArgs',
    'ZoneRouterArgsDict',
]

MYPY = False

if not MYPY:
    class ZoneDnssecInfoArgsDict(TypedDict):
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        digest: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the digest.
        """
        digest_algorithm: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the digest algorithm.
        """
        digest_type: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the digest type.
        """
        ds_record: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the DS record.
        """
        flag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the flag.
        """
        key_tag: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the key tag.
        """
        ksk_public_key: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the public key.
        """
        signature: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the signature algorithm.
        """
        signature_type: NotRequired[pulumi.Input[_builtins.int]]
        """
        Indicates the signature type.
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
elif False:
    ZoneDnssecInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ZoneDnssecInfoArgs:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 digest: Optional[pulumi.Input[_builtins.str]] = None,
                 digest_algorithm: Optional[pulumi.Input[_builtins.str]] = None,
                 digest_type: Optional[pulumi.Input[_builtins.int]] = None,
                 ds_record: Optional[pulumi.Input[_builtins.str]] = None,
                 flag: Optional[pulumi.Input[_builtins.int]] = None,
                 key_tag: Optional[pulumi.Input[_builtins.int]] = None,
                 ksk_public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 signature: Optional[pulumi.Input[_builtins.str]] = None,
                 signature_type: Optional[pulumi.Input[_builtins.int]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] created_at: Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        :param pulumi.Input[_builtins.str] digest: Indicates the digest.
        :param pulumi.Input[_builtins.str] digest_algorithm: Indicates the digest algorithm.
        :param pulumi.Input[_builtins.int] digest_type: Indicates the digest type.
        :param pulumi.Input[_builtins.str] ds_record: Indicates the DS record.
        :param pulumi.Input[_builtins.int] flag: Indicates the flag.
        :param pulumi.Input[_builtins.int] key_tag: Indicates the key tag.
        :param pulumi.Input[_builtins.str] ksk_public_key: Indicates the public key.
        :param pulumi.Input[_builtins.str] signature: Indicates the signature algorithm.
        :param pulumi.Input[_builtins.int] signature_type: Indicates the signature type.
        :param pulumi.Input[_builtins.str] updated_at: Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if digest_type is not None:
            pulumi.set(__self__, "digest_type", digest_type)
        if ds_record is not None:
            pulumi.set(__self__, "ds_record", ds_record)
        if flag is not None:
            pulumi.set(__self__, "flag", flag)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)
        if ksk_public_key is not None:
            pulumi.set(__self__, "ksk_public_key", ksk_public_key)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if signature_type is not None:
            pulumi.set(__self__, "signature_type", signature_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the digest.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "digest", value)

    @_builtins.property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the digest algorithm.
        """
        return pulumi.get(self, "digest_algorithm")

    @digest_algorithm.setter
    def digest_algorithm(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "digest_algorithm", value)

    @_builtins.property
    @pulumi.getter(name="digestType")
    def digest_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the digest type.
        """
        return pulumi.get(self, "digest_type")

    @digest_type.setter
    def digest_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "digest_type", value)

    @_builtins.property
    @pulumi.getter(name="dsRecord")
    def ds_record(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the DS record.
        """
        return pulumi.get(self, "ds_record")

    @ds_record.setter
    def ds_record(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ds_record", value)

    @_builtins.property
    @pulumi.getter
    def flag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the flag.
        """
        return pulumi.get(self, "flag")

    @flag.setter
    def flag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "flag", value)

    @_builtins.property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the key tag.
        """
        return pulumi.get(self, "key_tag")

    @key_tag.setter
    def key_tag(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "key_tag", value)

    @_builtins.property
    @pulumi.getter(name="kskPublicKey")
    def ksk_public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the public key.
        """
        return pulumi.get(self, "ksk_public_key")

    @ksk_public_key.setter
    def ksk_public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "ksk_public_key", value)

    @_builtins.property
    @pulumi.getter
    def signature(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the signature algorithm.
        """
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "signature", value)

    @_builtins.property
    @pulumi.getter(name="signatureType")
    def signature_type(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Indicates the signature type.
        """
        return pulumi.get(self, "signature_type")

    @signature_type.setter
    def signature_type(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "signature_type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class ZoneRouterArgsDict(TypedDict):
        router_id: pulumi.Input[_builtins.str]
        """
        The ID of the associated VPC.
        """
        router_region: NotRequired[pulumi.Input[_builtins.str]]
        """
        The region of the VPC.
        """
elif False:
    ZoneRouterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ZoneRouterArgs:
    def __init__(__self__, *,
                 router_id: pulumi.Input[_builtins.str],
                 router_region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] router_id: The ID of the associated VPC.
        :param pulumi.Input[_builtins.str] router_region: The region of the VPC.
        """
        pulumi.set(__self__, "router_id", router_id)
        if router_region is not None:
            pulumi.set(__self__, "router_region", router_region)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the associated VPC.
        """
        return pulumi.get(self, "router_id")

    @router_id.setter
    def router_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "router_id", value)

    @_builtins.property
    @pulumi.getter(name="routerRegion")
    def router_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region of the VPC.
        """
        return pulumi.get(self, "router_region")

    @router_region.setter
    def router_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "router_region", value)



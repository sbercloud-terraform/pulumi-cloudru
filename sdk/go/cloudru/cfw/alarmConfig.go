// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a CFW alarm configuration resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			fwInstanceId := cfg.RequireObject("fwInstanceId")
//			alarmType := cfg.RequireObject("alarmType")
//			alarmTimePeriod := cfg.RequireObject("alarmTimePeriod")
//			severity := cfg.RequireObject("severity")
//			frequencyCount := cfg.RequireObject("frequencyCount")
//			frequencyTime := cfg.RequireObject("frequencyTime")
//			topicUrn := cfg.RequireObject("topicUrn")
//			_, err := cfw.NewAlarmConfig(ctx, "test", &cfw.AlarmConfigArgs{
//				FwInstanceId:    pulumi.Any(fwInstanceId),
//				AlarmType:       pulumi.Any(alarmType),
//				AlarmTimePeriod: pulumi.Any(alarmTimePeriod),
//				FrequencyCount:  pulumi.Any(frequencyCount),
//				FrequencyTime:   pulumi.Any(frequencyTime),
//				Severity:        pulumi.Any(severity),
//				TopicUrn:        pulumi.Any(topicUrn),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The alarm configuration can be imported using `fw_instance_id`, `alarm_type`, separated by a slash, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Cfw/alarmConfig:AlarmConfig test <fw_instance_id>/<alarm_type>
// ```
type AlarmConfig struct {
	pulumi.CustomResourceState

	// Specifies the alarm period.
	// The valid values are as follows:
	// + **0**: 8:00 to 22:00;
	// + **1**: all day;
	AlarmTimePeriod pulumi.IntOutput `pulumi:"alarmTimePeriod"`
	// Specifies the alarm type.
	// The valid values are as follows.
	// + **0**: attack;
	// + **1**: traffic threshold crossing;
	// + **2**: EIP unprotected;
	// + **3**: threat intelligence;
	AlarmType      pulumi.IntOutput       `pulumi:"alarmType"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the alarm triggering frequency.
	// + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
	FrequencyCount pulumi.IntOutput `pulumi:"frequencyCount"`
	// Specifies the alarm frequency time range.
	// + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
	FrequencyTime pulumi.IntOutput `pulumi:"frequencyTime"`
	// Specifies the firewall ID.
	FwInstanceId pulumi.StringOutput `pulumi:"fwInstanceId"`
	// The language.
	Language pulumi.StringOutput `pulumi:"language"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the alarm severity.
	// + If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
	//   **MEDIUM**, and **LOW**, separated by commas.
	// + If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
	// + If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Specifies the alarm URN.
	TopicUrn pulumi.StringOutput `pulumi:"topicUrn"`
	// The username.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewAlarmConfig registers a new resource with the given unique name, arguments, and options.
func NewAlarmConfig(ctx *pulumi.Context,
	name string, args *AlarmConfigArgs, opts ...pulumi.ResourceOption) (*AlarmConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmTimePeriod == nil {
		return nil, errors.New("invalid value for required argument 'AlarmTimePeriod'")
	}
	if args.AlarmType == nil {
		return nil, errors.New("invalid value for required argument 'AlarmType'")
	}
	if args.FrequencyCount == nil {
		return nil, errors.New("invalid value for required argument 'FrequencyCount'")
	}
	if args.FrequencyTime == nil {
		return nil, errors.New("invalid value for required argument 'FrequencyTime'")
	}
	if args.FwInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'FwInstanceId'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	if args.TopicUrn == nil {
		return nil, errors.New("invalid value for required argument 'TopicUrn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlarmConfig
	err := ctx.RegisterResource("sbercloud:Cfw/alarmConfig:AlarmConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlarmConfig gets an existing AlarmConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarmConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlarmConfigState, opts ...pulumi.ResourceOption) (*AlarmConfig, error) {
	var resource AlarmConfig
	err := ctx.ReadResource("sbercloud:Cfw/alarmConfig:AlarmConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlarmConfig resources.
type alarmConfigState struct {
	// Specifies the alarm period.
	// The valid values are as follows:
	// + **0**: 8:00 to 22:00;
	// + **1**: all day;
	AlarmTimePeriod *int `pulumi:"alarmTimePeriod"`
	// Specifies the alarm type.
	// The valid values are as follows.
	// + **0**: attack;
	// + **1**: traffic threshold crossing;
	// + **2**: EIP unprotected;
	// + **3**: threat intelligence;
	AlarmType      *int    `pulumi:"alarmType"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the alarm triggering frequency.
	// + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
	FrequencyCount *int `pulumi:"frequencyCount"`
	// Specifies the alarm frequency time range.
	// + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
	FrequencyTime *int `pulumi:"frequencyTime"`
	// Specifies the firewall ID.
	FwInstanceId *string `pulumi:"fwInstanceId"`
	// The language.
	Language *string `pulumi:"language"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region *string `pulumi:"region"`
	// Specifies the alarm severity.
	// + If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
	//   **MEDIUM**, and **LOW**, separated by commas.
	// + If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
	// + If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
	Severity *string `pulumi:"severity"`
	// Specifies the alarm URN.
	TopicUrn *string `pulumi:"topicUrn"`
	// The username.
	Username *string `pulumi:"username"`
}

type AlarmConfigState struct {
	// Specifies the alarm period.
	// The valid values are as follows:
	// + **0**: 8:00 to 22:00;
	// + **1**: all day;
	AlarmTimePeriod pulumi.IntPtrInput
	// Specifies the alarm type.
	// The valid values are as follows.
	// + **0**: attack;
	// + **1**: traffic threshold crossing;
	// + **2**: EIP unprotected;
	// + **3**: threat intelligence;
	AlarmType      pulumi.IntPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the alarm triggering frequency.
	// + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
	FrequencyCount pulumi.IntPtrInput
	// Specifies the alarm frequency time range.
	// + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
	FrequencyTime pulumi.IntPtrInput
	// Specifies the firewall ID.
	FwInstanceId pulumi.StringPtrInput
	// The language.
	Language pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region pulumi.StringPtrInput
	// Specifies the alarm severity.
	// + If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
	//   **MEDIUM**, and **LOW**, separated by commas.
	// + If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
	// + If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
	Severity pulumi.StringPtrInput
	// Specifies the alarm URN.
	TopicUrn pulumi.StringPtrInput
	// The username.
	Username pulumi.StringPtrInput
}

func (AlarmConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmConfigState)(nil)).Elem()
}

type alarmConfigArgs struct {
	// Specifies the alarm period.
	// The valid values are as follows:
	// + **0**: 8:00 to 22:00;
	// + **1**: all day;
	AlarmTimePeriod int `pulumi:"alarmTimePeriod"`
	// Specifies the alarm type.
	// The valid values are as follows.
	// + **0**: attack;
	// + **1**: traffic threshold crossing;
	// + **2**: EIP unprotected;
	// + **3**: threat intelligence;
	AlarmType      int     `pulumi:"alarmType"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the alarm triggering frequency.
	// + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
	FrequencyCount int `pulumi:"frequencyCount"`
	// Specifies the alarm frequency time range.
	// + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
	FrequencyTime int `pulumi:"frequencyTime"`
	// Specifies the firewall ID.
	FwInstanceId string `pulumi:"fwInstanceId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region *string `pulumi:"region"`
	// Specifies the alarm severity.
	// + If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
	//   **MEDIUM**, and **LOW**, separated by commas.
	// + If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
	// + If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
	Severity string `pulumi:"severity"`
	// Specifies the alarm URN.
	TopicUrn string `pulumi:"topicUrn"`
}

// The set of arguments for constructing a AlarmConfig resource.
type AlarmConfigArgs struct {
	// Specifies the alarm period.
	// The valid values are as follows:
	// + **0**: 8:00 to 22:00;
	// + **1**: all day;
	AlarmTimePeriod pulumi.IntInput
	// Specifies the alarm type.
	// The valid values are as follows.
	// + **0**: attack;
	// + **1**: traffic threshold crossing;
	// + **2**: EIP unprotected;
	// + **3**: threat intelligence;
	AlarmType      pulumi.IntInput
	EnableForceNew pulumi.StringPtrInput
	// Specifies the alarm triggering frequency.
	// + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
	FrequencyCount pulumi.IntInput
	// Specifies the alarm frequency time range.
	// + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
	// + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
	FrequencyTime pulumi.IntInput
	// Specifies the firewall ID.
	FwInstanceId pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region pulumi.StringPtrInput
	// Specifies the alarm severity.
	// + If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
	//   **MEDIUM**, and **LOW**, separated by commas.
	// + If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
	// + If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
	Severity pulumi.StringInput
	// Specifies the alarm URN.
	TopicUrn pulumi.StringInput
}

func (AlarmConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmConfigArgs)(nil)).Elem()
}

type AlarmConfigInput interface {
	pulumi.Input

	ToAlarmConfigOutput() AlarmConfigOutput
	ToAlarmConfigOutputWithContext(ctx context.Context) AlarmConfigOutput
}

func (*AlarmConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmConfig)(nil)).Elem()
}

func (i *AlarmConfig) ToAlarmConfigOutput() AlarmConfigOutput {
	return i.ToAlarmConfigOutputWithContext(context.Background())
}

func (i *AlarmConfig) ToAlarmConfigOutputWithContext(ctx context.Context) AlarmConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmConfigOutput)
}

// AlarmConfigArrayInput is an input type that accepts AlarmConfigArray and AlarmConfigArrayOutput values.
// You can construct a concrete instance of `AlarmConfigArrayInput` via:
//
//	AlarmConfigArray{ AlarmConfigArgs{...} }
type AlarmConfigArrayInput interface {
	pulumi.Input

	ToAlarmConfigArrayOutput() AlarmConfigArrayOutput
	ToAlarmConfigArrayOutputWithContext(context.Context) AlarmConfigArrayOutput
}

type AlarmConfigArray []AlarmConfigInput

func (AlarmConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlarmConfig)(nil)).Elem()
}

func (i AlarmConfigArray) ToAlarmConfigArrayOutput() AlarmConfigArrayOutput {
	return i.ToAlarmConfigArrayOutputWithContext(context.Background())
}

func (i AlarmConfigArray) ToAlarmConfigArrayOutputWithContext(ctx context.Context) AlarmConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmConfigArrayOutput)
}

// AlarmConfigMapInput is an input type that accepts AlarmConfigMap and AlarmConfigMapOutput values.
// You can construct a concrete instance of `AlarmConfigMapInput` via:
//
//	AlarmConfigMap{ "key": AlarmConfigArgs{...} }
type AlarmConfigMapInput interface {
	pulumi.Input

	ToAlarmConfigMapOutput() AlarmConfigMapOutput
	ToAlarmConfigMapOutputWithContext(context.Context) AlarmConfigMapOutput
}

type AlarmConfigMap map[string]AlarmConfigInput

func (AlarmConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlarmConfig)(nil)).Elem()
}

func (i AlarmConfigMap) ToAlarmConfigMapOutput() AlarmConfigMapOutput {
	return i.ToAlarmConfigMapOutputWithContext(context.Background())
}

func (i AlarmConfigMap) ToAlarmConfigMapOutputWithContext(ctx context.Context) AlarmConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmConfigMapOutput)
}

type AlarmConfigOutput struct{ *pulumi.OutputState }

func (AlarmConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmConfig)(nil)).Elem()
}

func (o AlarmConfigOutput) ToAlarmConfigOutput() AlarmConfigOutput {
	return o
}

func (o AlarmConfigOutput) ToAlarmConfigOutputWithContext(ctx context.Context) AlarmConfigOutput {
	return o
}

// Specifies the alarm period.
// The valid values are as follows:
// + **0**: 8:00 to 22:00;
// + **1**: all day;
func (o AlarmConfigOutput) AlarmTimePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.IntOutput { return v.AlarmTimePeriod }).(pulumi.IntOutput)
}

// Specifies the alarm type.
// The valid values are as follows.
// + **0**: attack;
// + **1**: traffic threshold crossing;
// + **2**: EIP unprotected;
// + **3**: threat intelligence;
func (o AlarmConfigOutput) AlarmType() pulumi.IntOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.IntOutput { return v.AlarmType }).(pulumi.IntOutput)
}

func (o AlarmConfigOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the alarm triggering frequency.
// + If `alarmType` is **0** or **3**, the value of `frequencyCount` must be between **1** and **2000**.
// + If `alarmType` is **1** or **2**, the value of `frequencyCount` should be **1**.
func (o AlarmConfigOutput) FrequencyCount() pulumi.IntOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.IntOutput { return v.FrequencyCount }).(pulumi.IntOutput)
}

// Specifies the alarm frequency time range.
// + If `alarmType` is **0** or **3**, the value of `frequencyTime` must be between **1** and **60**.
// + If `alarmType` is **1** or **2**, the value of `frequencyTime` should be **1**.
func (o AlarmConfigOutput) FrequencyTime() pulumi.IntOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.IntOutput { return v.FrequencyTime }).(pulumi.IntOutput)
}

// Specifies the firewall ID.
func (o AlarmConfigOutput) FwInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.StringOutput { return v.FwInstanceId }).(pulumi.StringOutput)
}

// The language.
func (o AlarmConfigOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.StringOutput { return v.Language }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this will create new resource.
func (o AlarmConfigOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the alarm severity.
//   - If `alarmType` is **0** or **3**, the value of `severity` can be a combination of **CRITICAL**, **HIGH**,
//     **MEDIUM**, and **LOW**, separated by commas.
//   - If `alarmType` is **1**, the value of `severity` can be **0** (70%), **1** (80%), or **2** (90%).
//   - If `alarmType` is **2**, the value of `severity` must be **3** (EIP).
func (o AlarmConfigOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Specifies the alarm URN.
func (o AlarmConfigOutput) TopicUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.StringOutput { return v.TopicUrn }).(pulumi.StringOutput)
}

// The username.
func (o AlarmConfigOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmConfig) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type AlarmConfigArrayOutput struct{ *pulumi.OutputState }

func (AlarmConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlarmConfig)(nil)).Elem()
}

func (o AlarmConfigArrayOutput) ToAlarmConfigArrayOutput() AlarmConfigArrayOutput {
	return o
}

func (o AlarmConfigArrayOutput) ToAlarmConfigArrayOutputWithContext(ctx context.Context) AlarmConfigArrayOutput {
	return o
}

func (o AlarmConfigArrayOutput) Index(i pulumi.IntInput) AlarmConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlarmConfig {
		return vs[0].([]*AlarmConfig)[vs[1].(int)]
	}).(AlarmConfigOutput)
}

type AlarmConfigMapOutput struct{ *pulumi.OutputState }

func (AlarmConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlarmConfig)(nil)).Elem()
}

func (o AlarmConfigMapOutput) ToAlarmConfigMapOutput() AlarmConfigMapOutput {
	return o
}

func (o AlarmConfigMapOutput) ToAlarmConfigMapOutputWithContext(ctx context.Context) AlarmConfigMapOutput {
	return o
}

func (o AlarmConfigMapOutput) MapIndex(k pulumi.StringInput) AlarmConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlarmConfig {
		return vs[0].(map[string]*AlarmConfig)[vs[1].(string)]
	}).(AlarmConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmConfigInput)(nil)).Elem(), &AlarmConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmConfigArrayInput)(nil)).Elem(), AlarmConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmConfigMapInput)(nil)).Elem(), AlarmConfigMap{})
	pulumi.RegisterOutputType(AlarmConfigOutput{})
	pulumi.RegisterOutputType(AlarmConfigArrayOutput{})
	pulumi.RegisterOutputType(AlarmConfigMapOutput{})
}

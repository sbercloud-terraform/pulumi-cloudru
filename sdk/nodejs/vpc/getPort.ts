// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to get the ID of an available Sbercloud port.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const port1 = sbercloud.Vpc.getPort({
 *     name: "port_1",
 * });
 * ```
 */
export function getPort(args?: GetPortArgs, opts?: pulumi.InvokeOptions): Promise<GetPortResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Vpc/getPort:getPort", {
        "adminStateUp": args.adminStateUp,
        "deviceId": args.deviceId,
        "deviceOwner": args.deviceOwner,
        "fixedIp": args.fixedIp,
        "macAddress": args.macAddress,
        "name": args.name,
        "networkId": args.networkId,
        "portId": args.portId,
        "projectId": args.projectId,
        "region": args.region,
        "securityGroupIds": args.securityGroupIds,
        "status": args.status,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getPort.
 */
export interface GetPortArgs {
    /**
     * The administrative state of the port.
     *
     * @deprecated this field is deprecated
     */
    adminStateUp?: boolean;
    /**
     * The ID of the device the port belongs to.
     */
    deviceId?: string;
    /**
     * The device owner of the port.
     */
    deviceOwner?: string;
    /**
     * The port IP address filter.
     */
    fixedIp?: string;
    /**
     * The MAC address of the port.
     */
    macAddress?: string;
    /**
     * The name of the port.
     */
    name?: string;
    /**
     * The ID of the network the port belongs to.
     */
    networkId?: string;
    /**
     * The ID of the port.
     */
    portId?: string;
    /**
     * The owner of the port.
     *
     * @deprecated this field is deprecated
     */
    projectId?: string;
    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve port ids. If omitted, the
     * `region` argument of the provider is used.
     */
    region?: string;
    /**
     * The list of port security group IDs to filter.
     */
    securityGroupIds?: string[];
    /**
     * The status of the port.
     */
    status?: string;
    /**
     * @deprecated this field is deprecated
     */
    tenantId?: string;
}

/**
 * A collection of values returned by getPort.
 */
export interface GetPortResult {
    /**
     * @deprecated this field is deprecated
     */
    readonly adminStateUp: boolean;
    readonly allAllowedIps: string[];
    /**
     * The collection of Fixed IP addresses on the port in the
     * order returned by the Network v2 API.
     */
    readonly allFixedIps: string[];
    /**
     * The set of security group IDs applied on the port.
     */
    readonly allSecurityGroupIds: string[];
    readonly deviceId: string;
    readonly deviceOwner: string;
    readonly fixedIp?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly macAddress: string;
    readonly name: string;
    readonly networkId: string;
    readonly portId: string;
    /**
     * @deprecated this field is deprecated
     */
    readonly projectId?: string;
    readonly region: string;
    readonly securityGroupIds?: string[];
    readonly status: string;
    /**
     * @deprecated this field is deprecated
     */
    readonly tenantId?: string;
}
/**
 * Use this data source to get the ID of an available Sbercloud port.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const port1 = sbercloud.Vpc.getPort({
 *     name: "port_1",
 * });
 * ```
 */
export function getPortOutput(args?: GetPortOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPortResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Vpc/getPort:getPort", {
        "adminStateUp": args.adminStateUp,
        "deviceId": args.deviceId,
        "deviceOwner": args.deviceOwner,
        "fixedIp": args.fixedIp,
        "macAddress": args.macAddress,
        "name": args.name,
        "networkId": args.networkId,
        "portId": args.portId,
        "projectId": args.projectId,
        "region": args.region,
        "securityGroupIds": args.securityGroupIds,
        "status": args.status,
        "tenantId": args.tenantId,
    }, opts);
}

/**
 * A collection of arguments for invoking getPort.
 */
export interface GetPortOutputArgs {
    /**
     * The administrative state of the port.
     *
     * @deprecated this field is deprecated
     */
    adminStateUp?: pulumi.Input<boolean>;
    /**
     * The ID of the device the port belongs to.
     */
    deviceId?: pulumi.Input<string>;
    /**
     * The device owner of the port.
     */
    deviceOwner?: pulumi.Input<string>;
    /**
     * The port IP address filter.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * The MAC address of the port.
     */
    macAddress?: pulumi.Input<string>;
    /**
     * The name of the port.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the network the port belongs to.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The ID of the port.
     */
    portId?: pulumi.Input<string>;
    /**
     * The owner of the port.
     *
     * @deprecated this field is deprecated
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 Neutron client.
     * A Neutron client is needed to retrieve port ids. If omitted, the
     * `region` argument of the provider is used.
     */
    region?: pulumi.Input<string>;
    /**
     * The list of port security group IDs to filter.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status of the port.
     */
    status?: pulumi.Input<string>;
    /**
     * @deprecated this field is deprecated
     */
    tenantId?: pulumi.Input<string>;
}

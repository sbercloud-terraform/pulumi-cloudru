// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class RabbitmqInstance extends pulumi.CustomResource {
    /**
     * Get an existing RabbitmqInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RabbitmqInstanceState, opts?: pulumi.CustomResourceOptions): RabbitmqInstance {
        return new RabbitmqInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Dms/rabbitmqInstance:RabbitmqInstance';

    /**
     * Returns true if the given object is an instance of RabbitmqInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RabbitmqInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RabbitmqInstance.__pulumiType;
    }

    declare public readonly accessUser: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * schema: Required
     */
    declare public readonly availabilityZones: pulumi.Output<string[]>;
    /**
     * @deprecated available_zones has deprecated, please use "availabilityZones" instead.
     */
    declare public readonly availableZones: pulumi.Output<string[]>;
    declare public readonly brokerNum: pulumi.Output<number>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public /*out*/ readonly connectAddress: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly enableAcl: pulumi.Output<boolean>;
    declare public /*out*/ readonly enablePublicIp: pulumi.Output<boolean>;
    declare public /*out*/ readonly engine: pulumi.Output<string>;
    declare public readonly engineVersion: pulumi.Output<string | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly extendTimes: pulumi.Output<number>;
    declare public readonly flavorId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly isLogicalVolume: pulumi.Output<boolean>;
    declare public readonly maintainBegin: pulumi.Output<string>;
    declare public readonly maintainEnd: pulumi.Output<string>;
    declare public /*out*/ readonly managementConnectAddress: pulumi.Output<string>;
    /**
     * @deprecated typo in manegement_connect_address, please use "managementConnectAddress" instead.
     */
    declare public /*out*/ readonly manegementConnectAddress: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string | undefined>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly port: pulumi.Output<number>;
    /**
     * @deprecated product_id has deprecated, please use "flavorId" instead.
     */
    declare public readonly productId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly publicIpAddress: pulumi.Output<string>;
    declare public readonly publicIpId: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly resourceSpecCode: pulumi.Output<string>;
    declare public readonly securityGroupId: pulumi.Output<string>;
    declare public /*out*/ readonly specification: pulumi.Output<string>;
    declare public readonly sslEnable: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly storageSpace: pulumi.Output<number>;
    declare public readonly storageSpecCode: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly usedStorageSpace: pulumi.Output<number>;
    declare public /*out*/ readonly userId: pulumi.Output<string>;
    declare public /*out*/ readonly userName: pulumi.Output<string>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a RabbitmqInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RabbitmqInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RabbitmqInstanceArgs | RabbitmqInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RabbitmqInstanceState | undefined;
            resourceInputs["accessUser"] = state?.accessUser;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZones"] = state?.availabilityZones;
            resourceInputs["availableZones"] = state?.availableZones;
            resourceInputs["brokerNum"] = state?.brokerNum;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["connectAddress"] = state?.connectAddress;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableAcl"] = state?.enableAcl;
            resourceInputs["enablePublicIp"] = state?.enablePublicIp;
            resourceInputs["engine"] = state?.engine;
            resourceInputs["engineVersion"] = state?.engineVersion;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["extendTimes"] = state?.extendTimes;
            resourceInputs["flavorId"] = state?.flavorId;
            resourceInputs["isLogicalVolume"] = state?.isLogicalVolume;
            resourceInputs["maintainBegin"] = state?.maintainBegin;
            resourceInputs["maintainEnd"] = state?.maintainEnd;
            resourceInputs["managementConnectAddress"] = state?.managementConnectAddress;
            resourceInputs["manegementConnectAddress"] = state?.manegementConnectAddress;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["password"] = state?.password;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["port"] = state?.port;
            resourceInputs["productId"] = state?.productId;
            resourceInputs["publicIpAddress"] = state?.publicIpAddress;
            resourceInputs["publicIpId"] = state?.publicIpId;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceSpecCode"] = state?.resourceSpecCode;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["specification"] = state?.specification;
            resourceInputs["sslEnable"] = state?.sslEnable;
            resourceInputs["status"] = state?.status;
            resourceInputs["storageSpace"] = state?.storageSpace;
            resourceInputs["storageSpecCode"] = state?.storageSpecCode;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["usedStorageSpace"] = state?.usedStorageSpace;
            resourceInputs["userId"] = state?.userId;
            resourceInputs["userName"] = state?.userName;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as RabbitmqInstanceArgs | undefined;
            if (args?.networkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if (args?.securityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if (args?.storageSpecCode === undefined && !opts.urn) {
                throw new Error("Missing required property 'storageSpecCode'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["accessUser"] = args?.accessUser;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZones"] = args?.availabilityZones;
            resourceInputs["availableZones"] = args?.availableZones;
            resourceInputs["brokerNum"] = args?.brokerNum;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableAcl"] = args?.enableAcl;
            resourceInputs["engineVersion"] = args?.engineVersion;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["flavorId"] = args?.flavorId;
            resourceInputs["maintainBegin"] = args?.maintainBegin;
            resourceInputs["maintainEnd"] = args?.maintainEnd;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["productId"] = args?.productId;
            resourceInputs["publicIpId"] = args?.publicIpId;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["sslEnable"] = args?.sslEnable;
            resourceInputs["storageSpace"] = args?.storageSpace;
            resourceInputs["storageSpecCode"] = args?.storageSpecCode;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["connectAddress"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enablePublicIp"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["extendTimes"] = undefined /*out*/;
            resourceInputs["isLogicalVolume"] = undefined /*out*/;
            resourceInputs["managementConnectAddress"] = undefined /*out*/;
            resourceInputs["manegementConnectAddress"] = undefined /*out*/;
            resourceInputs["port"] = undefined /*out*/;
            resourceInputs["publicIpAddress"] = undefined /*out*/;
            resourceInputs["resourceSpecCode"] = undefined /*out*/;
            resourceInputs["specification"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["usedStorageSpace"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
            resourceInputs["userName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RabbitmqInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RabbitmqInstance resources.
 */
export interface RabbitmqInstanceState {
    accessUser?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated available_zones has deprecated, please use "availabilityZones" instead.
     */
    availableZones?: pulumi.Input<pulumi.Input<string>[]>;
    brokerNum?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    connectAddress?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enableAcl?: pulumi.Input<boolean>;
    enablePublicIp?: pulumi.Input<boolean>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    extendTimes?: pulumi.Input<number>;
    flavorId?: pulumi.Input<string>;
    isLogicalVolume?: pulumi.Input<boolean>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    managementConnectAddress?: pulumi.Input<string>;
    /**
     * @deprecated typo in manegement_connect_address, please use "managementConnectAddress" instead.
     */
    manegementConnectAddress?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    /**
     * @deprecated product_id has deprecated, please use "flavorId" instead.
     */
    productId?: pulumi.Input<string>;
    publicIpAddress?: pulumi.Input<string>;
    publicIpId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceSpecCode?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    specification?: pulumi.Input<string>;
    sslEnable?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    storageSpace?: pulumi.Input<number>;
    storageSpecCode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
    usedStorageSpace?: pulumi.Input<number>;
    userId?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RabbitmqInstance resource.
 */
export interface RabbitmqInstanceArgs {
    accessUser?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * schema: Required
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated available_zones has deprecated, please use "availabilityZones" instead.
     */
    availableZones?: pulumi.Input<pulumi.Input<string>[]>;
    brokerNum?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enableAcl?: pulumi.Input<boolean>;
    engineVersion?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    flavorId?: pulumi.Input<string>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * @deprecated product_id has deprecated, please use "flavorId" instead.
     */
    productId?: pulumi.Input<string>;
    publicIpId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    sslEnable?: pulumi.Input<boolean>;
    storageSpace?: pulumi.Input<number>;
    storageSpecCode: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}

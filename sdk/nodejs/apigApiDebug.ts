// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApigApiDebug extends pulumi.CustomResource {
    /**
     * Get an existing ApigApiDebug resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigApiDebugState, opts?: pulumi.CustomResourceOptions): ApigApiDebug {
        return new ApigApiDebug(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/apigApiDebug:ApigApiDebug';

    /**
     * Returns true if the given object is an instance of ApigApiDebug.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigApiDebug {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigApiDebug.__pulumiType;
    }

    /**
     * The ID of the API to be debugged.
     */
    declare public readonly apiId: pulumi.Output<string>;
    /**
     * The request message body of the API.
     */
    declare public readonly body: pulumi.Output<string | undefined>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    /**
     * The request header parameters of the API, in JSON format.
     */
    declare public readonly header: pulumi.Output<string | undefined>;
    /**
     * The ID of the dedicated instance to which the API belongs.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The debug latency in milliseconds.
     */
    declare public /*out*/ readonly latency: pulumi.Output<number>;
    /**
     * The request method of the API.
     */
    declare public readonly method: pulumi.Output<string>;
    /**
     * The debug mode.
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * The request path of the API.
     */
    declare public readonly path: pulumi.Output<string>;
    /**
     * The request query parameters of the API, in JSON format.
     */
    declare public readonly query: pulumi.Output<string | undefined>;
    /**
     * The region where the dedicated instance to which the API belongs is located.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The debug request message content.
     */
    declare public /*out*/ readonly request: pulumi.Output<string>;
    /**
     * The debug response message content.
     */
    declare public /*out*/ readonly response: pulumi.Output<string>;
    /**
     * The request protocol.
     */
    declare public readonly scheme: pulumi.Output<string>;
    /**
     * The runtime environment for debug request.
     */
    declare public readonly stage: pulumi.Output<string | undefined>;

    /**
     * Create a ApigApiDebug resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigApiDebugArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigApiDebugArgs | ApigApiDebugState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigApiDebugState | undefined;
            resourceInputs["apiId"] = state?.apiId;
            resourceInputs["body"] = state?.body;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["header"] = state?.header;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["latency"] = state?.latency;
            resourceInputs["method"] = state?.method;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["path"] = state?.path;
            resourceInputs["query"] = state?.query;
            resourceInputs["region"] = state?.region;
            resourceInputs["request"] = state?.request;
            resourceInputs["response"] = state?.response;
            resourceInputs["scheme"] = state?.scheme;
            resourceInputs["stage"] = state?.stage;
        } else {
            const args = argsOrState as ApigApiDebugArgs | undefined;
            if (args?.apiId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.method === undefined && !opts.urn) {
                throw new Error("Missing required property 'method'");
            }
            if (args?.mode === undefined && !opts.urn) {
                throw new Error("Missing required property 'mode'");
            }
            if (args?.path === undefined && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if (args?.scheme === undefined && !opts.urn) {
                throw new Error("Missing required property 'scheme'");
            }
            resourceInputs["apiId"] = args?.apiId;
            resourceInputs["body"] = args?.body;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["header"] = args?.header;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["method"] = args?.method;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["path"] = args?.path;
            resourceInputs["query"] = args?.query;
            resourceInputs["region"] = args?.region;
            resourceInputs["scheme"] = args?.scheme;
            resourceInputs["stage"] = args?.stage;
            resourceInputs["latency"] = undefined /*out*/;
            resourceInputs["request"] = undefined /*out*/;
            resourceInputs["response"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigApiDebug.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApigApiDebug resources.
 */
export interface ApigApiDebugState {
    /**
     * The ID of the API to be debugged.
     */
    apiId?: pulumi.Input<string>;
    /**
     * The request message body of the API.
     */
    body?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * The request header parameters of the API, in JSON format.
     */
    header?: pulumi.Input<string>;
    /**
     * The ID of the dedicated instance to which the API belongs.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The debug latency in milliseconds.
     */
    latency?: pulumi.Input<number>;
    /**
     * The request method of the API.
     */
    method?: pulumi.Input<string>;
    /**
     * The debug mode.
     */
    mode?: pulumi.Input<string>;
    /**
     * The request path of the API.
     */
    path?: pulumi.Input<string>;
    /**
     * The request query parameters of the API, in JSON format.
     */
    query?: pulumi.Input<string>;
    /**
     * The region where the dedicated instance to which the API belongs is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The debug request message content.
     */
    request?: pulumi.Input<string>;
    /**
     * The debug response message content.
     */
    response?: pulumi.Input<string>;
    /**
     * The request protocol.
     */
    scheme?: pulumi.Input<string>;
    /**
     * The runtime environment for debug request.
     */
    stage?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApigApiDebug resource.
 */
export interface ApigApiDebugArgs {
    /**
     * The ID of the API to be debugged.
     */
    apiId: pulumi.Input<string>;
    /**
     * The request message body of the API.
     */
    body?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * The request header parameters of the API, in JSON format.
     */
    header?: pulumi.Input<string>;
    /**
     * The ID of the dedicated instance to which the API belongs.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The request method of the API.
     */
    method: pulumi.Input<string>;
    /**
     * The debug mode.
     */
    mode: pulumi.Input<string>;
    /**
     * The request path of the API.
     */
    path: pulumi.Input<string>;
    /**
     * The request query parameters of the API, in JSON format.
     */
    query?: pulumi.Input<string>;
    /**
     * The region where the dedicated instance to which the API belongs is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The request protocol.
     */
    scheme: pulumi.Input<string>;
    /**
     * The runtime environment for debug request.
     */
    stage?: pulumi.Input<string>;
}

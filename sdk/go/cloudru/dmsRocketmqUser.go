// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DmsRocketmqUser struct {
	pulumi.CustomResourceState

	// Specifies the access key of the user.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Specifies whether the user is an administrator.
	Admin pulumi.BoolOutput `pulumi:"admin"`
	// Specifies the default consumer group permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultGroupPerm pulumi.StringOutput `pulumi:"defaultGroupPerm"`
	// Specifies the default topic permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultTopicPerm pulumi.StringOutput `pulumi:"defaultTopicPerm"`
	// Specifies the special consumer group permissions.
	GroupPerms DmsRocketmqUserGroupPermArrayOutput `pulumi:"groupPerms"`
	// Specifies the ID of the rocketMQ instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	Region     pulumi.StringOutput `pulumi:"region"`
	// Specifies the secret key of the user.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// Specifies the special topic permissions.
	TopicPerms DmsRocketmqUserTopicPermArrayOutput `pulumi:"topicPerms"`
	// Specifies the IP address whitelist.
	WhiteRemoteAddress pulumi.StringOutput `pulumi:"whiteRemoteAddress"`
}

// NewDmsRocketmqUser registers a new resource with the given unique name, arguments, and options.
func NewDmsRocketmqUser(ctx *pulumi.Context,
	name string, args *DmsRocketmqUserArgs, opts ...pulumi.ResourceOption) (*DmsRocketmqUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessKey == nil {
		return nil, errors.New("invalid value for required argument 'AccessKey'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.SecretKey == nil {
		return nil, errors.New("invalid value for required argument 'SecretKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsRocketmqUser
	err := ctx.RegisterResource("cloudru:index/dmsRocketmqUser:DmsRocketmqUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsRocketmqUser gets an existing DmsRocketmqUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsRocketmqUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsRocketmqUserState, opts ...pulumi.ResourceOption) (*DmsRocketmqUser, error) {
	var resource DmsRocketmqUser
	err := ctx.ReadResource("cloudru:index/dmsRocketmqUser:DmsRocketmqUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsRocketmqUser resources.
type dmsRocketmqUserState struct {
	// Specifies the access key of the user.
	AccessKey *string `pulumi:"accessKey"`
	// Specifies whether the user is an administrator.
	Admin *bool `pulumi:"admin"`
	// Specifies the default consumer group permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultGroupPerm *string `pulumi:"defaultGroupPerm"`
	// Specifies the default topic permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultTopicPerm *string `pulumi:"defaultTopicPerm"`
	// Specifies the special consumer group permissions.
	GroupPerms []DmsRocketmqUserGroupPerm `pulumi:"groupPerms"`
	// Specifies the ID of the rocketMQ instance.
	InstanceId *string `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
	// Specifies the secret key of the user.
	SecretKey *string `pulumi:"secretKey"`
	// Specifies the special topic permissions.
	TopicPerms []DmsRocketmqUserTopicPerm `pulumi:"topicPerms"`
	// Specifies the IP address whitelist.
	WhiteRemoteAddress *string `pulumi:"whiteRemoteAddress"`
}

type DmsRocketmqUserState struct {
	// Specifies the access key of the user.
	AccessKey pulumi.StringPtrInput
	// Specifies whether the user is an administrator.
	Admin pulumi.BoolPtrInput
	// Specifies the default consumer group permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultGroupPerm pulumi.StringPtrInput
	// Specifies the default topic permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultTopicPerm pulumi.StringPtrInput
	// Specifies the special consumer group permissions.
	GroupPerms DmsRocketmqUserGroupPermArrayInput
	// Specifies the ID of the rocketMQ instance.
	InstanceId pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	// Specifies the secret key of the user.
	SecretKey pulumi.StringPtrInput
	// Specifies the special topic permissions.
	TopicPerms DmsRocketmqUserTopicPermArrayInput
	// Specifies the IP address whitelist.
	WhiteRemoteAddress pulumi.StringPtrInput
}

func (DmsRocketmqUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsRocketmqUserState)(nil)).Elem()
}

type dmsRocketmqUserArgs struct {
	// Specifies the access key of the user.
	AccessKey string `pulumi:"accessKey"`
	// Specifies whether the user is an administrator.
	Admin *bool `pulumi:"admin"`
	// Specifies the default consumer group permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultGroupPerm *string `pulumi:"defaultGroupPerm"`
	// Specifies the default topic permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultTopicPerm *string `pulumi:"defaultTopicPerm"`
	// Specifies the special consumer group permissions.
	GroupPerms []DmsRocketmqUserGroupPerm `pulumi:"groupPerms"`
	// Specifies the ID of the rocketMQ instance.
	InstanceId string  `pulumi:"instanceId"`
	Region     *string `pulumi:"region"`
	// Specifies the secret key of the user.
	SecretKey string `pulumi:"secretKey"`
	// Specifies the special topic permissions.
	TopicPerms []DmsRocketmqUserTopicPerm `pulumi:"topicPerms"`
	// Specifies the IP address whitelist.
	WhiteRemoteAddress *string `pulumi:"whiteRemoteAddress"`
}

// The set of arguments for constructing a DmsRocketmqUser resource.
type DmsRocketmqUserArgs struct {
	// Specifies the access key of the user.
	AccessKey pulumi.StringInput
	// Specifies whether the user is an administrator.
	Admin pulumi.BoolPtrInput
	// Specifies the default consumer group permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultGroupPerm pulumi.StringPtrInput
	// Specifies the default topic permissions.
	// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
	DefaultTopicPerm pulumi.StringPtrInput
	// Specifies the special consumer group permissions.
	GroupPerms DmsRocketmqUserGroupPermArrayInput
	// Specifies the ID of the rocketMQ instance.
	InstanceId pulumi.StringInput
	Region     pulumi.StringPtrInput
	// Specifies the secret key of the user.
	SecretKey pulumi.StringInput
	// Specifies the special topic permissions.
	TopicPerms DmsRocketmqUserTopicPermArrayInput
	// Specifies the IP address whitelist.
	WhiteRemoteAddress pulumi.StringPtrInput
}

func (DmsRocketmqUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsRocketmqUserArgs)(nil)).Elem()
}

type DmsRocketmqUserInput interface {
	pulumi.Input

	ToDmsRocketmqUserOutput() DmsRocketmqUserOutput
	ToDmsRocketmqUserOutputWithContext(ctx context.Context) DmsRocketmqUserOutput
}

func (*DmsRocketmqUser) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsRocketmqUser)(nil)).Elem()
}

func (i *DmsRocketmqUser) ToDmsRocketmqUserOutput() DmsRocketmqUserOutput {
	return i.ToDmsRocketmqUserOutputWithContext(context.Background())
}

func (i *DmsRocketmqUser) ToDmsRocketmqUserOutputWithContext(ctx context.Context) DmsRocketmqUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqUserOutput)
}

// DmsRocketmqUserArrayInput is an input type that accepts DmsRocketmqUserArray and DmsRocketmqUserArrayOutput values.
// You can construct a concrete instance of `DmsRocketmqUserArrayInput` via:
//
//	DmsRocketmqUserArray{ DmsRocketmqUserArgs{...} }
type DmsRocketmqUserArrayInput interface {
	pulumi.Input

	ToDmsRocketmqUserArrayOutput() DmsRocketmqUserArrayOutput
	ToDmsRocketmqUserArrayOutputWithContext(context.Context) DmsRocketmqUserArrayOutput
}

type DmsRocketmqUserArray []DmsRocketmqUserInput

func (DmsRocketmqUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsRocketmqUser)(nil)).Elem()
}

func (i DmsRocketmqUserArray) ToDmsRocketmqUserArrayOutput() DmsRocketmqUserArrayOutput {
	return i.ToDmsRocketmqUserArrayOutputWithContext(context.Background())
}

func (i DmsRocketmqUserArray) ToDmsRocketmqUserArrayOutputWithContext(ctx context.Context) DmsRocketmqUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqUserArrayOutput)
}

// DmsRocketmqUserMapInput is an input type that accepts DmsRocketmqUserMap and DmsRocketmqUserMapOutput values.
// You can construct a concrete instance of `DmsRocketmqUserMapInput` via:
//
//	DmsRocketmqUserMap{ "key": DmsRocketmqUserArgs{...} }
type DmsRocketmqUserMapInput interface {
	pulumi.Input

	ToDmsRocketmqUserMapOutput() DmsRocketmqUserMapOutput
	ToDmsRocketmqUserMapOutputWithContext(context.Context) DmsRocketmqUserMapOutput
}

type DmsRocketmqUserMap map[string]DmsRocketmqUserInput

func (DmsRocketmqUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsRocketmqUser)(nil)).Elem()
}

func (i DmsRocketmqUserMap) ToDmsRocketmqUserMapOutput() DmsRocketmqUserMapOutput {
	return i.ToDmsRocketmqUserMapOutputWithContext(context.Background())
}

func (i DmsRocketmqUserMap) ToDmsRocketmqUserMapOutputWithContext(ctx context.Context) DmsRocketmqUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqUserMapOutput)
}

type DmsRocketmqUserOutput struct{ *pulumi.OutputState }

func (DmsRocketmqUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsRocketmqUser)(nil)).Elem()
}

func (o DmsRocketmqUserOutput) ToDmsRocketmqUserOutput() DmsRocketmqUserOutput {
	return o
}

func (o DmsRocketmqUserOutput) ToDmsRocketmqUserOutputWithContext(ctx context.Context) DmsRocketmqUserOutput {
	return o
}

// Specifies the access key of the user.
func (o DmsRocketmqUserOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// Specifies whether the user is an administrator.
func (o DmsRocketmqUserOutput) Admin() pulumi.BoolOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) pulumi.BoolOutput { return v.Admin }).(pulumi.BoolOutput)
}

// Specifies the default consumer group permissions.
// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
func (o DmsRocketmqUserOutput) DefaultGroupPerm() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) pulumi.StringOutput { return v.DefaultGroupPerm }).(pulumi.StringOutput)
}

// Specifies the default topic permissions.
// Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
func (o DmsRocketmqUserOutput) DefaultTopicPerm() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) pulumi.StringOutput { return v.DefaultTopicPerm }).(pulumi.StringOutput)
}

// Specifies the special consumer group permissions.
func (o DmsRocketmqUserOutput) GroupPerms() DmsRocketmqUserGroupPermArrayOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) DmsRocketmqUserGroupPermArrayOutput { return v.GroupPerms }).(DmsRocketmqUserGroupPermArrayOutput)
}

// Specifies the ID of the rocketMQ instance.
func (o DmsRocketmqUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DmsRocketmqUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the secret key of the user.
func (o DmsRocketmqUserOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// Specifies the special topic permissions.
func (o DmsRocketmqUserOutput) TopicPerms() DmsRocketmqUserTopicPermArrayOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) DmsRocketmqUserTopicPermArrayOutput { return v.TopicPerms }).(DmsRocketmqUserTopicPermArrayOutput)
}

// Specifies the IP address whitelist.
func (o DmsRocketmqUserOutput) WhiteRemoteAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqUser) pulumi.StringOutput { return v.WhiteRemoteAddress }).(pulumi.StringOutput)
}

type DmsRocketmqUserArrayOutput struct{ *pulumi.OutputState }

func (DmsRocketmqUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsRocketmqUser)(nil)).Elem()
}

func (o DmsRocketmqUserArrayOutput) ToDmsRocketmqUserArrayOutput() DmsRocketmqUserArrayOutput {
	return o
}

func (o DmsRocketmqUserArrayOutput) ToDmsRocketmqUserArrayOutputWithContext(ctx context.Context) DmsRocketmqUserArrayOutput {
	return o
}

func (o DmsRocketmqUserArrayOutput) Index(i pulumi.IntInput) DmsRocketmqUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsRocketmqUser {
		return vs[0].([]*DmsRocketmqUser)[vs[1].(int)]
	}).(DmsRocketmqUserOutput)
}

type DmsRocketmqUserMapOutput struct{ *pulumi.OutputState }

func (DmsRocketmqUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsRocketmqUser)(nil)).Elem()
}

func (o DmsRocketmqUserMapOutput) ToDmsRocketmqUserMapOutput() DmsRocketmqUserMapOutput {
	return o
}

func (o DmsRocketmqUserMapOutput) ToDmsRocketmqUserMapOutputWithContext(ctx context.Context) DmsRocketmqUserMapOutput {
	return o
}

func (o DmsRocketmqUserMapOutput) MapIndex(k pulumi.StringInput) DmsRocketmqUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsRocketmqUser {
		return vs[0].(map[string]*DmsRocketmqUser)[vs[1].(string)]
	}).(DmsRocketmqUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqUserInput)(nil)).Elem(), &DmsRocketmqUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqUserArrayInput)(nil)).Elem(), DmsRocketmqUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqUserMapInput)(nil)).Elem(), DmsRocketmqUserMap{})
	pulumi.RegisterOutputType(DmsRocketmqUserOutput{})
	pulumi.RegisterOutputType(DmsRocketmqUserArrayOutput{})
	pulumi.RegisterOutputType(DmsRocketmqUserMapOutput{})
}

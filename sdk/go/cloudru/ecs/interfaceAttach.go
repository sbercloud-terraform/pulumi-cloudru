// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type InterfaceAttach struct {
	pulumi.CustomResourceState

	FixedIp          pulumi.StringOutput      `pulumi:"fixedIp"`
	FixedIpv6        pulumi.StringOutput      `pulumi:"fixedIpv6"`
	InstanceId       pulumi.StringOutput      `pulumi:"instanceId"`
	Ipv6BandwidthId  pulumi.StringPtrOutput   `pulumi:"ipv6BandwidthId"`
	Ipv6Enable       pulumi.BoolOutput        `pulumi:"ipv6Enable"`
	Mac              pulumi.StringOutput      `pulumi:"mac"`
	NetworkId        pulumi.StringOutput      `pulumi:"networkId"`
	PortId           pulumi.StringOutput      `pulumi:"portId"`
	Region           pulumi.StringOutput      `pulumi:"region"`
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	SourceDestCheck  pulumi.BoolPtrOutput     `pulumi:"sourceDestCheck"`
}

// NewInterfaceAttach registers a new resource with the given unique name, arguments, and options.
func NewInterfaceAttach(ctx *pulumi.Context,
	name string, args *InterfaceAttachArgs, opts ...pulumi.ResourceOption) (*InterfaceAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfaceAttach
	err := ctx.RegisterResource("sbercloud:Ecs/interfaceAttach:InterfaceAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceAttach gets an existing InterfaceAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceAttachState, opts ...pulumi.ResourceOption) (*InterfaceAttach, error) {
	var resource InterfaceAttach
	err := ctx.ReadResource("sbercloud:Ecs/interfaceAttach:InterfaceAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceAttach resources.
type interfaceAttachState struct {
	FixedIp          *string  `pulumi:"fixedIp"`
	FixedIpv6        *string  `pulumi:"fixedIpv6"`
	InstanceId       *string  `pulumi:"instanceId"`
	Ipv6BandwidthId  *string  `pulumi:"ipv6BandwidthId"`
	Ipv6Enable       *bool    `pulumi:"ipv6Enable"`
	Mac              *string  `pulumi:"mac"`
	NetworkId        *string  `pulumi:"networkId"`
	PortId           *string  `pulumi:"portId"`
	Region           *string  `pulumi:"region"`
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	SourceDestCheck  *bool    `pulumi:"sourceDestCheck"`
}

type InterfaceAttachState struct {
	FixedIp          pulumi.StringPtrInput
	FixedIpv6        pulumi.StringPtrInput
	InstanceId       pulumi.StringPtrInput
	Ipv6BandwidthId  pulumi.StringPtrInput
	Ipv6Enable       pulumi.BoolPtrInput
	Mac              pulumi.StringPtrInput
	NetworkId        pulumi.StringPtrInput
	PortId           pulumi.StringPtrInput
	Region           pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	SourceDestCheck  pulumi.BoolPtrInput
}

func (InterfaceAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceAttachState)(nil)).Elem()
}

type interfaceAttachArgs struct {
	FixedIp          *string  `pulumi:"fixedIp"`
	InstanceId       string   `pulumi:"instanceId"`
	Ipv6BandwidthId  *string  `pulumi:"ipv6BandwidthId"`
	Ipv6Enable       *bool    `pulumi:"ipv6Enable"`
	NetworkId        *string  `pulumi:"networkId"`
	PortId           *string  `pulumi:"portId"`
	Region           *string  `pulumi:"region"`
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	SourceDestCheck  *bool    `pulumi:"sourceDestCheck"`
}

// The set of arguments for constructing a InterfaceAttach resource.
type InterfaceAttachArgs struct {
	FixedIp          pulumi.StringPtrInput
	InstanceId       pulumi.StringInput
	Ipv6BandwidthId  pulumi.StringPtrInput
	Ipv6Enable       pulumi.BoolPtrInput
	NetworkId        pulumi.StringPtrInput
	PortId           pulumi.StringPtrInput
	Region           pulumi.StringPtrInput
	SecurityGroupIds pulumi.StringArrayInput
	SourceDestCheck  pulumi.BoolPtrInput
}

func (InterfaceAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceAttachArgs)(nil)).Elem()
}

type InterfaceAttachInput interface {
	pulumi.Input

	ToInterfaceAttachOutput() InterfaceAttachOutput
	ToInterfaceAttachOutputWithContext(ctx context.Context) InterfaceAttachOutput
}

func (*InterfaceAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceAttach)(nil)).Elem()
}

func (i *InterfaceAttach) ToInterfaceAttachOutput() InterfaceAttachOutput {
	return i.ToInterfaceAttachOutputWithContext(context.Background())
}

func (i *InterfaceAttach) ToInterfaceAttachOutputWithContext(ctx context.Context) InterfaceAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceAttachOutput)
}

// InterfaceAttachArrayInput is an input type that accepts InterfaceAttachArray and InterfaceAttachArrayOutput values.
// You can construct a concrete instance of `InterfaceAttachArrayInput` via:
//
//	InterfaceAttachArray{ InterfaceAttachArgs{...} }
type InterfaceAttachArrayInput interface {
	pulumi.Input

	ToInterfaceAttachArrayOutput() InterfaceAttachArrayOutput
	ToInterfaceAttachArrayOutputWithContext(context.Context) InterfaceAttachArrayOutput
}

type InterfaceAttachArray []InterfaceAttachInput

func (InterfaceAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceAttach)(nil)).Elem()
}

func (i InterfaceAttachArray) ToInterfaceAttachArrayOutput() InterfaceAttachArrayOutput {
	return i.ToInterfaceAttachArrayOutputWithContext(context.Background())
}

func (i InterfaceAttachArray) ToInterfaceAttachArrayOutputWithContext(ctx context.Context) InterfaceAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceAttachArrayOutput)
}

// InterfaceAttachMapInput is an input type that accepts InterfaceAttachMap and InterfaceAttachMapOutput values.
// You can construct a concrete instance of `InterfaceAttachMapInput` via:
//
//	InterfaceAttachMap{ "key": InterfaceAttachArgs{...} }
type InterfaceAttachMapInput interface {
	pulumi.Input

	ToInterfaceAttachMapOutput() InterfaceAttachMapOutput
	ToInterfaceAttachMapOutputWithContext(context.Context) InterfaceAttachMapOutput
}

type InterfaceAttachMap map[string]InterfaceAttachInput

func (InterfaceAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceAttach)(nil)).Elem()
}

func (i InterfaceAttachMap) ToInterfaceAttachMapOutput() InterfaceAttachMapOutput {
	return i.ToInterfaceAttachMapOutputWithContext(context.Background())
}

func (i InterfaceAttachMap) ToInterfaceAttachMapOutputWithContext(ctx context.Context) InterfaceAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceAttachMapOutput)
}

type InterfaceAttachOutput struct{ *pulumi.OutputState }

func (InterfaceAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceAttach)(nil)).Elem()
}

func (o InterfaceAttachOutput) ToInterfaceAttachOutput() InterfaceAttachOutput {
	return o
}

func (o InterfaceAttachOutput) ToInterfaceAttachOutputWithContext(ctx context.Context) InterfaceAttachOutput {
	return o
}

func (o InterfaceAttachOutput) FixedIp() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringOutput { return v.FixedIp }).(pulumi.StringOutput)
}

func (o InterfaceAttachOutput) FixedIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringOutput { return v.FixedIpv6 }).(pulumi.StringOutput)
}

func (o InterfaceAttachOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o InterfaceAttachOutput) Ipv6BandwidthId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringPtrOutput { return v.Ipv6BandwidthId }).(pulumi.StringPtrOutput)
}

func (o InterfaceAttachOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.BoolOutput { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o InterfaceAttachOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringOutput { return v.Mac }).(pulumi.StringOutput)
}

func (o InterfaceAttachOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o InterfaceAttachOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

func (o InterfaceAttachOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o InterfaceAttachOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o InterfaceAttachOutput) SourceDestCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceAttach) pulumi.BoolPtrOutput { return v.SourceDestCheck }).(pulumi.BoolPtrOutput)
}

type InterfaceAttachArrayOutput struct{ *pulumi.OutputState }

func (InterfaceAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceAttach)(nil)).Elem()
}

func (o InterfaceAttachArrayOutput) ToInterfaceAttachArrayOutput() InterfaceAttachArrayOutput {
	return o
}

func (o InterfaceAttachArrayOutput) ToInterfaceAttachArrayOutputWithContext(ctx context.Context) InterfaceAttachArrayOutput {
	return o
}

func (o InterfaceAttachArrayOutput) Index(i pulumi.IntInput) InterfaceAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceAttach {
		return vs[0].([]*InterfaceAttach)[vs[1].(int)]
	}).(InterfaceAttachOutput)
}

type InterfaceAttachMapOutput struct{ *pulumi.OutputState }

func (InterfaceAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceAttach)(nil)).Elem()
}

func (o InterfaceAttachMapOutput) ToInterfaceAttachMapOutput() InterfaceAttachMapOutput {
	return o
}

func (o InterfaceAttachMapOutput) ToInterfaceAttachMapOutputWithContext(ctx context.Context) InterfaceAttachMapOutput {
	return o
}

func (o InterfaceAttachMapOutput) MapIndex(k pulumi.StringInput) InterfaceAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceAttach {
		return vs[0].(map[string]*InterfaceAttach)[vs[1].(string)]
	}).(InterfaceAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceAttachInput)(nil)).Elem(), &InterfaceAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceAttachArrayInput)(nil)).Elem(), InterfaceAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceAttachMapInput)(nil)).Elem(), InterfaceAttachMap{})
	pulumi.RegisterOutputType(InterfaceAttachOutput{})
	pulumi.RegisterOutputType(InterfaceAttachArrayOutput{})
	pulumi.RegisterOutputType(InterfaceAttachMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages an ELB security policy resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sbercloud.NewElbSecurityPolicy(ctx, "test", &sbercloud.ElbSecurityPolicyArgs{
//				Name:        pulumi.String("security_policy_test"),
//				Description: pulumi.String("this is a security policy"),
//				Protocols: pulumi.StringArray{
//					pulumi.String("TLSv1"),
//					pulumi.String("TLSv1.1"),
//					pulumi.String("TLSv1.2"),
//					pulumi.String("TLSv1.3"),
//				},
//				Ciphers: pulumi.StringArray{
//					pulumi.String("ECDHE-RSA-AES256-GCM-SHA384"),
//					pulumi.String("ECDHE-RSA-AES128-GCM-SHA256"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The elb security policies can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import sbercloud:index/elbSecurityPolicy:ElbSecurityPolicy test 0ce123456a00f2591fabc00385ff1234
// ```
type ElbSecurityPolicy struct {
	pulumi.CustomResourceState

	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers   pulumi.StringArrayOutput `pulumi:"ciphers"`
	CreatedAt pulumi.StringOutput      `pulumi:"createdAt"`
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	//
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The listener which the security policy associated with.
	// The ListenerRef structure is documented below.
	Listeners ElbSecurityPolicyListenerArrayOutput `pulumi:"listeners"`
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region    pulumi.StringOutput `pulumi:"region"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewElbSecurityPolicy registers a new resource with the given unique name, arguments, and options.
func NewElbSecurityPolicy(ctx *pulumi.Context,
	name string, args *ElbSecurityPolicyArgs, opts ...pulumi.ResourceOption) (*ElbSecurityPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ciphers == nil {
		return nil, errors.New("invalid value for required argument 'Ciphers'")
	}
	if args.Protocols == nil {
		return nil, errors.New("invalid value for required argument 'Protocols'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElbSecurityPolicy
	err := ctx.RegisterResource("sbercloud:index/elbSecurityPolicy:ElbSecurityPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbSecurityPolicy gets an existing ElbSecurityPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbSecurityPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbSecurityPolicyState, opts ...pulumi.ResourceOption) (*ElbSecurityPolicy, error) {
	var resource ElbSecurityPolicy
	err := ctx.ReadResource("sbercloud:index/elbSecurityPolicy:ElbSecurityPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbSecurityPolicy resources.
type elbSecurityPolicyState struct {
	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers   []string `pulumi:"ciphers"`
	CreatedAt *string  `pulumi:"createdAt"`
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	//
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The listener which the security policy associated with.
	// The ListenerRef structure is documented below.
	Listeners []ElbSecurityPolicyListener `pulumi:"listeners"`
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name *string `pulumi:"name"`
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols []string `pulumi:"protocols"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region    *string `pulumi:"region"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ElbSecurityPolicyState struct {
	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers   pulumi.StringArrayInput
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	//
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// The listener which the security policy associated with.
	// The ListenerRef structure is documented below.
	Listeners ElbSecurityPolicyListenerArrayInput
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name pulumi.StringPtrInput
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols pulumi.StringArrayInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region    pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
}

func (ElbSecurityPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbSecurityPolicyState)(nil)).Elem()
}

type elbSecurityPolicyArgs struct {
	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers []string `pulumi:"ciphers"`
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	//
	// Changing this parameter will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name *string `pulumi:"name"`
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols []string `pulumi:"protocols"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a ElbSecurityPolicy resource.
type ElbSecurityPolicyArgs struct {
	// Specifies the cipher suite list of the security policy.
	// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
	// ciphers that matches the protocol. The following cipher suites are supported:
	// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
	// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
	// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
	// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
	// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
	// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
	// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
	// **TLS_AES_128_CCM_8_SHA256**.
	Ciphers pulumi.StringArrayInput
	// Specifies the description of the ELB security policy.
	// The value can contain 0 to 255 characters.
	Description pulumi.StringPtrInput
	// Specifies the enterprise project ID to which the Enterprise
	// router belongs.
	//
	// Changing this parameter will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the ELB security policy name.
	// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
	// and cannot exceed 255 characters.
	Name pulumi.StringPtrInput
	// Specifies the TSL protocol list which the security policy select.
	// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
	Protocols pulumi.StringArrayInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (ElbSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbSecurityPolicyArgs)(nil)).Elem()
}

type ElbSecurityPolicyInput interface {
	pulumi.Input

	ToElbSecurityPolicyOutput() ElbSecurityPolicyOutput
	ToElbSecurityPolicyOutputWithContext(ctx context.Context) ElbSecurityPolicyOutput
}

func (*ElbSecurityPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbSecurityPolicy)(nil)).Elem()
}

func (i *ElbSecurityPolicy) ToElbSecurityPolicyOutput() ElbSecurityPolicyOutput {
	return i.ToElbSecurityPolicyOutputWithContext(context.Background())
}

func (i *ElbSecurityPolicy) ToElbSecurityPolicyOutputWithContext(ctx context.Context) ElbSecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbSecurityPolicyOutput)
}

// ElbSecurityPolicyArrayInput is an input type that accepts ElbSecurityPolicyArray and ElbSecurityPolicyArrayOutput values.
// You can construct a concrete instance of `ElbSecurityPolicyArrayInput` via:
//
//	ElbSecurityPolicyArray{ ElbSecurityPolicyArgs{...} }
type ElbSecurityPolicyArrayInput interface {
	pulumi.Input

	ToElbSecurityPolicyArrayOutput() ElbSecurityPolicyArrayOutput
	ToElbSecurityPolicyArrayOutputWithContext(context.Context) ElbSecurityPolicyArrayOutput
}

type ElbSecurityPolicyArray []ElbSecurityPolicyInput

func (ElbSecurityPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbSecurityPolicy)(nil)).Elem()
}

func (i ElbSecurityPolicyArray) ToElbSecurityPolicyArrayOutput() ElbSecurityPolicyArrayOutput {
	return i.ToElbSecurityPolicyArrayOutputWithContext(context.Background())
}

func (i ElbSecurityPolicyArray) ToElbSecurityPolicyArrayOutputWithContext(ctx context.Context) ElbSecurityPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbSecurityPolicyArrayOutput)
}

// ElbSecurityPolicyMapInput is an input type that accepts ElbSecurityPolicyMap and ElbSecurityPolicyMapOutput values.
// You can construct a concrete instance of `ElbSecurityPolicyMapInput` via:
//
//	ElbSecurityPolicyMap{ "key": ElbSecurityPolicyArgs{...} }
type ElbSecurityPolicyMapInput interface {
	pulumi.Input

	ToElbSecurityPolicyMapOutput() ElbSecurityPolicyMapOutput
	ToElbSecurityPolicyMapOutputWithContext(context.Context) ElbSecurityPolicyMapOutput
}

type ElbSecurityPolicyMap map[string]ElbSecurityPolicyInput

func (ElbSecurityPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbSecurityPolicy)(nil)).Elem()
}

func (i ElbSecurityPolicyMap) ToElbSecurityPolicyMapOutput() ElbSecurityPolicyMapOutput {
	return i.ToElbSecurityPolicyMapOutputWithContext(context.Background())
}

func (i ElbSecurityPolicyMap) ToElbSecurityPolicyMapOutputWithContext(ctx context.Context) ElbSecurityPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbSecurityPolicyMapOutput)
}

type ElbSecurityPolicyOutput struct{ *pulumi.OutputState }

func (ElbSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbSecurityPolicy)(nil)).Elem()
}

func (o ElbSecurityPolicyOutput) ToElbSecurityPolicyOutput() ElbSecurityPolicyOutput {
	return o
}

func (o ElbSecurityPolicyOutput) ToElbSecurityPolicyOutputWithContext(ctx context.Context) ElbSecurityPolicyOutput {
	return o
}

// Specifies the cipher suite list of the security policy.
// The protocol and cipher suite must match. That is to say, there must be at least one cipher suite in
// ciphers that matches the protocol. The following cipher suites are supported:
// **ECDHE-RSA-AES256-GCM-SHA384**, **ECDHE-RSA-AES128-GCM-SHA256**, **ECDHE-ECDSA-AES256-GCM-SHA384**,
// **ECDHE-ECDSA-AES128-GCM-SHA256**, **AES128-GCM-SHA256**, **AES256-GCM-SHA384**, **ECDHE-ECDSA-AES128-SHA256**,
// **ECDHE-RSA-AES128-SHA256**, **AES128-SHA256**, **AES256-SHA256**, **ECDHE-ECDSA-AES256-SHA384**,
// **ECDHE-RSA-AES256-SHA384**, **ECDHE-ECDSA-AES128-SHA**, **ECDHE-RSA-AES128-SHA**, **ECDHE-RSA-AES256-SHA**,
// **ECDHE-ECDSA-AES256-SHA**, **AES128-SHA**, **AES256-SHA**, **CAMELLIA128-SHA**, **DES-CBC3-SHA**,
// **CAMELLIA256-SHA**, **ECDHE-RSA-CHACHA20-POLY1305**, **ECDHE-ECDSA-CHACHA20-POLY1305**, **TLS_AES_128_GCM_SHA256**,
// **TLS_AES_256_GCM_SHA384**, **TLS_CHACHA20_POLY1305_SHA256**, **TLS_AES_128_CCM_SHA256**,
// **TLS_AES_128_CCM_8_SHA256**.
func (o ElbSecurityPolicyOutput) Ciphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) pulumi.StringArrayOutput { return v.Ciphers }).(pulumi.StringArrayOutput)
}

func (o ElbSecurityPolicyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the ELB security policy.
// The value can contain 0 to 255 characters.
func (o ElbSecurityPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Specifies the enterprise project ID to which the Enterprise
// router belongs.
//
// Changing this parameter will create a new resource.
func (o ElbSecurityPolicyOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The listener which the security policy associated with.
// The ListenerRef structure is documented below.
func (o ElbSecurityPolicyOutput) Listeners() ElbSecurityPolicyListenerArrayOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) ElbSecurityPolicyListenerArrayOutput { return v.Listeners }).(ElbSecurityPolicyListenerArrayOutput)
}

// Specifies the ELB security policy name.
// The name contains only Chinese characters, letters, digits, underscores (_), and hyphens (-),
// and cannot exceed 255 characters.
func (o ElbSecurityPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the TSL protocol list which the security policy select.
// Value options: **TLSv1**, **TLSv1.1**, **TLSv1.2**, and **TLSv1.3**.
func (o ElbSecurityPolicyOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o ElbSecurityPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ElbSecurityPolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbSecurityPolicy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ElbSecurityPolicyArrayOutput struct{ *pulumi.OutputState }

func (ElbSecurityPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbSecurityPolicy)(nil)).Elem()
}

func (o ElbSecurityPolicyArrayOutput) ToElbSecurityPolicyArrayOutput() ElbSecurityPolicyArrayOutput {
	return o
}

func (o ElbSecurityPolicyArrayOutput) ToElbSecurityPolicyArrayOutputWithContext(ctx context.Context) ElbSecurityPolicyArrayOutput {
	return o
}

func (o ElbSecurityPolicyArrayOutput) Index(i pulumi.IntInput) ElbSecurityPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbSecurityPolicy {
		return vs[0].([]*ElbSecurityPolicy)[vs[1].(int)]
	}).(ElbSecurityPolicyOutput)
}

type ElbSecurityPolicyMapOutput struct{ *pulumi.OutputState }

func (ElbSecurityPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbSecurityPolicy)(nil)).Elem()
}

func (o ElbSecurityPolicyMapOutput) ToElbSecurityPolicyMapOutput() ElbSecurityPolicyMapOutput {
	return o
}

func (o ElbSecurityPolicyMapOutput) ToElbSecurityPolicyMapOutputWithContext(ctx context.Context) ElbSecurityPolicyMapOutput {
	return o
}

func (o ElbSecurityPolicyMapOutput) MapIndex(k pulumi.StringInput) ElbSecurityPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbSecurityPolicy {
		return vs[0].(map[string]*ElbSecurityPolicy)[vs[1].(string)]
	}).(ElbSecurityPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbSecurityPolicyInput)(nil)).Elem(), &ElbSecurityPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbSecurityPolicyArrayInput)(nil)).Elem(), ElbSecurityPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbSecurityPolicyMapInput)(nil)).Elem(), ElbSecurityPolicyMap{})
	pulumi.RegisterOutputType(ElbSecurityPolicyOutput{})
	pulumi.RegisterOutputType(ElbSecurityPolicyArrayOutput{})
	pulumi.RegisterOutputType(ElbSecurityPolicyMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dli

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SparkJob struct {
	pulumi.CustomResourceState

	AppName           pulumi.StringOutput                 `pulumi:"appName"`
	AppParameters     pulumi.StringArrayOutput            `pulumi:"appParameters"`
	Configurations    pulumi.StringMapOutput              `pulumi:"configurations"`
	CreatedAt         pulumi.StringOutput                 `pulumi:"createdAt"`
	DependentPackages SparkJobDependentPackageArrayOutput `pulumi:"dependentPackages"`
	DriverCores       pulumi.IntPtrOutput                 `pulumi:"driverCores"`
	DriverMemory      pulumi.StringPtrOutput              `pulumi:"driverMemory"`
	ExecutorCores     pulumi.IntPtrOutput                 `pulumi:"executorCores"`
	ExecutorMemory    pulumi.StringPtrOutput              `pulumi:"executorMemory"`
	Executors         pulumi.IntPtrOutput                 `pulumi:"executors"`
	Feature           pulumi.StringPtrOutput              `pulumi:"feature"`
	Files             pulumi.StringArrayOutput            `pulumi:"files"`
	Jars              pulumi.StringArrayOutput            `pulumi:"jars"`
	MainClass         pulumi.StringPtrOutput              `pulumi:"mainClass"`
	MaxRetries        pulumi.IntPtrOutput                 `pulumi:"maxRetries"`
	Modules           pulumi.StringArrayOutput            `pulumi:"modules"`
	Name              pulumi.StringOutput                 `pulumi:"name"`
	Owner             pulumi.StringOutput                 `pulumi:"owner"`
	PythonFiles       pulumi.StringArrayOutput            `pulumi:"pythonFiles"`
	QueueName         pulumi.StringOutput                 `pulumi:"queueName"`
	Region            pulumi.StringOutput                 `pulumi:"region"`
	SparkVersion      pulumi.StringPtrOutput              `pulumi:"sparkVersion"`
	Specification     pulumi.StringPtrOutput              `pulumi:"specification"`
}

// NewSparkJob registers a new resource with the given unique name, arguments, and options.
func NewSparkJob(ctx *pulumi.Context,
	name string, args *SparkJobArgs, opts ...pulumi.ResourceOption) (*SparkJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.QueueName == nil {
		return nil, errors.New("invalid value for required argument 'QueueName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SparkJob
	err := ctx.RegisterResource("cloudru:Dli/sparkJob:SparkJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSparkJob gets an existing SparkJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSparkJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SparkJobState, opts ...pulumi.ResourceOption) (*SparkJob, error) {
	var resource SparkJob
	err := ctx.ReadResource("cloudru:Dli/sparkJob:SparkJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SparkJob resources.
type sparkJobState struct {
	AppName           *string                    `pulumi:"appName"`
	AppParameters     []string                   `pulumi:"appParameters"`
	Configurations    map[string]string          `pulumi:"configurations"`
	CreatedAt         *string                    `pulumi:"createdAt"`
	DependentPackages []SparkJobDependentPackage `pulumi:"dependentPackages"`
	DriverCores       *int                       `pulumi:"driverCores"`
	DriverMemory      *string                    `pulumi:"driverMemory"`
	ExecutorCores     *int                       `pulumi:"executorCores"`
	ExecutorMemory    *string                    `pulumi:"executorMemory"`
	Executors         *int                       `pulumi:"executors"`
	Feature           *string                    `pulumi:"feature"`
	Files             []string                   `pulumi:"files"`
	Jars              []string                   `pulumi:"jars"`
	MainClass         *string                    `pulumi:"mainClass"`
	MaxRetries        *int                       `pulumi:"maxRetries"`
	Modules           []string                   `pulumi:"modules"`
	Name              *string                    `pulumi:"name"`
	Owner             *string                    `pulumi:"owner"`
	PythonFiles       []string                   `pulumi:"pythonFiles"`
	QueueName         *string                    `pulumi:"queueName"`
	Region            *string                    `pulumi:"region"`
	SparkVersion      *string                    `pulumi:"sparkVersion"`
	Specification     *string                    `pulumi:"specification"`
}

type SparkJobState struct {
	AppName           pulumi.StringPtrInput
	AppParameters     pulumi.StringArrayInput
	Configurations    pulumi.StringMapInput
	CreatedAt         pulumi.StringPtrInput
	DependentPackages SparkJobDependentPackageArrayInput
	DriverCores       pulumi.IntPtrInput
	DriverMemory      pulumi.StringPtrInput
	ExecutorCores     pulumi.IntPtrInput
	ExecutorMemory    pulumi.StringPtrInput
	Executors         pulumi.IntPtrInput
	Feature           pulumi.StringPtrInput
	Files             pulumi.StringArrayInput
	Jars              pulumi.StringArrayInput
	MainClass         pulumi.StringPtrInput
	MaxRetries        pulumi.IntPtrInput
	Modules           pulumi.StringArrayInput
	Name              pulumi.StringPtrInput
	Owner             pulumi.StringPtrInput
	PythonFiles       pulumi.StringArrayInput
	QueueName         pulumi.StringPtrInput
	Region            pulumi.StringPtrInput
	SparkVersion      pulumi.StringPtrInput
	Specification     pulumi.StringPtrInput
}

func (SparkJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*sparkJobState)(nil)).Elem()
}

type sparkJobArgs struct {
	AppName           string                     `pulumi:"appName"`
	AppParameters     []string                   `pulumi:"appParameters"`
	Configurations    map[string]string          `pulumi:"configurations"`
	DependentPackages []SparkJobDependentPackage `pulumi:"dependentPackages"`
	DriverCores       *int                       `pulumi:"driverCores"`
	DriverMemory      *string                    `pulumi:"driverMemory"`
	ExecutorCores     *int                       `pulumi:"executorCores"`
	ExecutorMemory    *string                    `pulumi:"executorMemory"`
	Executors         *int                       `pulumi:"executors"`
	Feature           *string                    `pulumi:"feature"`
	Files             []string                   `pulumi:"files"`
	Jars              []string                   `pulumi:"jars"`
	MainClass         *string                    `pulumi:"mainClass"`
	MaxRetries        *int                       `pulumi:"maxRetries"`
	Modules           []string                   `pulumi:"modules"`
	Name              *string                    `pulumi:"name"`
	PythonFiles       []string                   `pulumi:"pythonFiles"`
	QueueName         string                     `pulumi:"queueName"`
	Region            *string                    `pulumi:"region"`
	SparkVersion      *string                    `pulumi:"sparkVersion"`
	Specification     *string                    `pulumi:"specification"`
}

// The set of arguments for constructing a SparkJob resource.
type SparkJobArgs struct {
	AppName           pulumi.StringInput
	AppParameters     pulumi.StringArrayInput
	Configurations    pulumi.StringMapInput
	DependentPackages SparkJobDependentPackageArrayInput
	DriverCores       pulumi.IntPtrInput
	DriverMemory      pulumi.StringPtrInput
	ExecutorCores     pulumi.IntPtrInput
	ExecutorMemory    pulumi.StringPtrInput
	Executors         pulumi.IntPtrInput
	Feature           pulumi.StringPtrInput
	Files             pulumi.StringArrayInput
	Jars              pulumi.StringArrayInput
	MainClass         pulumi.StringPtrInput
	MaxRetries        pulumi.IntPtrInput
	Modules           pulumi.StringArrayInput
	Name              pulumi.StringPtrInput
	PythonFiles       pulumi.StringArrayInput
	QueueName         pulumi.StringInput
	Region            pulumi.StringPtrInput
	SparkVersion      pulumi.StringPtrInput
	Specification     pulumi.StringPtrInput
}

func (SparkJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sparkJobArgs)(nil)).Elem()
}

type SparkJobInput interface {
	pulumi.Input

	ToSparkJobOutput() SparkJobOutput
	ToSparkJobOutputWithContext(ctx context.Context) SparkJobOutput
}

func (*SparkJob) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkJob)(nil)).Elem()
}

func (i *SparkJob) ToSparkJobOutput() SparkJobOutput {
	return i.ToSparkJobOutputWithContext(context.Background())
}

func (i *SparkJob) ToSparkJobOutputWithContext(ctx context.Context) SparkJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobOutput)
}

// SparkJobArrayInput is an input type that accepts SparkJobArray and SparkJobArrayOutput values.
// You can construct a concrete instance of `SparkJobArrayInput` via:
//
//	SparkJobArray{ SparkJobArgs{...} }
type SparkJobArrayInput interface {
	pulumi.Input

	ToSparkJobArrayOutput() SparkJobArrayOutput
	ToSparkJobArrayOutputWithContext(context.Context) SparkJobArrayOutput
}

type SparkJobArray []SparkJobInput

func (SparkJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SparkJob)(nil)).Elem()
}

func (i SparkJobArray) ToSparkJobArrayOutput() SparkJobArrayOutput {
	return i.ToSparkJobArrayOutputWithContext(context.Background())
}

func (i SparkJobArray) ToSparkJobArrayOutputWithContext(ctx context.Context) SparkJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobArrayOutput)
}

// SparkJobMapInput is an input type that accepts SparkJobMap and SparkJobMapOutput values.
// You can construct a concrete instance of `SparkJobMapInput` via:
//
//	SparkJobMap{ "key": SparkJobArgs{...} }
type SparkJobMapInput interface {
	pulumi.Input

	ToSparkJobMapOutput() SparkJobMapOutput
	ToSparkJobMapOutputWithContext(context.Context) SparkJobMapOutput
}

type SparkJobMap map[string]SparkJobInput

func (SparkJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SparkJob)(nil)).Elem()
}

func (i SparkJobMap) ToSparkJobMapOutput() SparkJobMapOutput {
	return i.ToSparkJobMapOutputWithContext(context.Background())
}

func (i SparkJobMap) ToSparkJobMapOutputWithContext(ctx context.Context) SparkJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SparkJobMapOutput)
}

type SparkJobOutput struct{ *pulumi.OutputState }

func (SparkJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SparkJob)(nil)).Elem()
}

func (o SparkJobOutput) ToSparkJobOutput() SparkJobOutput {
	return o
}

func (o SparkJobOutput) ToSparkJobOutputWithContext(ctx context.Context) SparkJobOutput {
	return o
}

func (o SparkJobOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

func (o SparkJobOutput) AppParameters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringArrayOutput { return v.AppParameters }).(pulumi.StringArrayOutput)
}

func (o SparkJobOutput) Configurations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringMapOutput { return v.Configurations }).(pulumi.StringMapOutput)
}

func (o SparkJobOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o SparkJobOutput) DependentPackages() SparkJobDependentPackageArrayOutput {
	return o.ApplyT(func(v *SparkJob) SparkJobDependentPackageArrayOutput { return v.DependentPackages }).(SparkJobDependentPackageArrayOutput)
}

func (o SparkJobOutput) DriverCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.IntPtrOutput { return v.DriverCores }).(pulumi.IntPtrOutput)
}

func (o SparkJobOutput) DriverMemory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringPtrOutput { return v.DriverMemory }).(pulumi.StringPtrOutput)
}

func (o SparkJobOutput) ExecutorCores() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.IntPtrOutput { return v.ExecutorCores }).(pulumi.IntPtrOutput)
}

func (o SparkJobOutput) ExecutorMemory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringPtrOutput { return v.ExecutorMemory }).(pulumi.StringPtrOutput)
}

func (o SparkJobOutput) Executors() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.IntPtrOutput { return v.Executors }).(pulumi.IntPtrOutput)
}

func (o SparkJobOutput) Feature() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringPtrOutput { return v.Feature }).(pulumi.StringPtrOutput)
}

func (o SparkJobOutput) Files() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringArrayOutput { return v.Files }).(pulumi.StringArrayOutput)
}

func (o SparkJobOutput) Jars() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringArrayOutput { return v.Jars }).(pulumi.StringArrayOutput)
}

func (o SparkJobOutput) MainClass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringPtrOutput { return v.MainClass }).(pulumi.StringPtrOutput)
}

func (o SparkJobOutput) MaxRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.IntPtrOutput { return v.MaxRetries }).(pulumi.IntPtrOutput)
}

func (o SparkJobOutput) Modules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringArrayOutput { return v.Modules }).(pulumi.StringArrayOutput)
}

func (o SparkJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SparkJobOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o SparkJobOutput) PythonFiles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringArrayOutput { return v.PythonFiles }).(pulumi.StringArrayOutput)
}

func (o SparkJobOutput) QueueName() pulumi.StringOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringOutput { return v.QueueName }).(pulumi.StringOutput)
}

func (o SparkJobOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SparkJobOutput) SparkVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringPtrOutput { return v.SparkVersion }).(pulumi.StringPtrOutput)
}

func (o SparkJobOutput) Specification() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SparkJob) pulumi.StringPtrOutput { return v.Specification }).(pulumi.StringPtrOutput)
}

type SparkJobArrayOutput struct{ *pulumi.OutputState }

func (SparkJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SparkJob)(nil)).Elem()
}

func (o SparkJobArrayOutput) ToSparkJobArrayOutput() SparkJobArrayOutput {
	return o
}

func (o SparkJobArrayOutput) ToSparkJobArrayOutputWithContext(ctx context.Context) SparkJobArrayOutput {
	return o
}

func (o SparkJobArrayOutput) Index(i pulumi.IntInput) SparkJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SparkJob {
		return vs[0].([]*SparkJob)[vs[1].(int)]
	}).(SparkJobOutput)
}

type SparkJobMapOutput struct{ *pulumi.OutputState }

func (SparkJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SparkJob)(nil)).Elem()
}

func (o SparkJobMapOutput) ToSparkJobMapOutput() SparkJobMapOutput {
	return o
}

func (o SparkJobMapOutput) ToSparkJobMapOutputWithContext(ctx context.Context) SparkJobMapOutput {
	return o
}

func (o SparkJobMapOutput) MapIndex(k pulumi.StringInput) SparkJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SparkJob {
		return vs[0].(map[string]*SparkJob)[vs[1].(string)]
	}).(SparkJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SparkJobInput)(nil)).Elem(), &SparkJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkJobArrayInput)(nil)).Elem(), SparkJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SparkJobMapInput)(nil)).Elem(), SparkJobMap{})
	pulumi.RegisterOutputType(SparkJobOutput{})
	pulumi.RegisterOutputType(SparkJobArrayOutput{})
	pulumi.RegisterOutputType(SparkJobMapOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPgSqlLimitsResult',
    'AwaitableGetPgSqlLimitsResult',
    'get_pg_sql_limits',
    'get_pg_sql_limits_output',
]

@pulumi.output_type
class GetPgSqlLimitsResult:
    """
    A collection of values returned by getPgSqlLimits.
    """
    def __init__(__self__, db_name=None, id=None, instance_id=None, is_effective=None, max_concurrency=None, max_waiting=None, query_id=None, query_string=None, region=None, search_path=None, sql_limit_id=None, sql_limits=None):
        if db_name and not isinstance(db_name, str):
            raise TypeError("Expected argument 'db_name' to be a str")
        pulumi.set(__self__, "db_name", db_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if is_effective and not isinstance(is_effective, str):
            raise TypeError("Expected argument 'is_effective' to be a str")
        pulumi.set(__self__, "is_effective", is_effective)
        if max_concurrency and not isinstance(max_concurrency, str):
            raise TypeError("Expected argument 'max_concurrency' to be a str")
        pulumi.set(__self__, "max_concurrency", max_concurrency)
        if max_waiting and not isinstance(max_waiting, str):
            raise TypeError("Expected argument 'max_waiting' to be a str")
        pulumi.set(__self__, "max_waiting", max_waiting)
        if query_id and not isinstance(query_id, str):
            raise TypeError("Expected argument 'query_id' to be a str")
        pulumi.set(__self__, "query_id", query_id)
        if query_string and not isinstance(query_string, str):
            raise TypeError("Expected argument 'query_string' to be a str")
        pulumi.set(__self__, "query_string", query_string)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if search_path and not isinstance(search_path, str):
            raise TypeError("Expected argument 'search_path' to be a str")
        pulumi.set(__self__, "search_path", search_path)
        if sql_limit_id and not isinstance(sql_limit_id, str):
            raise TypeError("Expected argument 'sql_limit_id' to be a str")
        pulumi.set(__self__, "sql_limit_id", sql_limit_id)
        if sql_limits and not isinstance(sql_limits, list):
            raise TypeError("Expected argument 'sql_limits' to be a list")
        pulumi.set(__self__, "sql_limits", sql_limits)

    @_builtins.property
    @pulumi.getter(name="dbName")
    def db_name(self) -> _builtins.str:
        return pulumi.get(self, "db_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="isEffective")
    def is_effective(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "is_effective")

    @_builtins.property
    @pulumi.getter(name="maxConcurrency")
    def max_concurrency(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "max_concurrency")

    @_builtins.property
    @pulumi.getter(name="maxWaiting")
    def max_waiting(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "max_waiting")

    @_builtins.property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "query_id")

    @_builtins.property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "query_string")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="searchPath")
    def search_path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "search_path")

    @_builtins.property
    @pulumi.getter(name="sqlLimitId")
    def sql_limit_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sql_limit_id")

    @_builtins.property
    @pulumi.getter(name="sqlLimits")
    def sql_limits(self) -> Sequence['outputs.GetPgSqlLimitsSqlLimitResult']:
        return pulumi.get(self, "sql_limits")


class AwaitableGetPgSqlLimitsResult(GetPgSqlLimitsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPgSqlLimitsResult(
            db_name=self.db_name,
            id=self.id,
            instance_id=self.instance_id,
            is_effective=self.is_effective,
            max_concurrency=self.max_concurrency,
            max_waiting=self.max_waiting,
            query_id=self.query_id,
            query_string=self.query_string,
            region=self.region,
            search_path=self.search_path,
            sql_limit_id=self.sql_limit_id,
            sql_limits=self.sql_limits)


def get_pg_sql_limits(db_name: Optional[_builtins.str] = None,
                      instance_id: Optional[_builtins.str] = None,
                      is_effective: Optional[_builtins.str] = None,
                      max_concurrency: Optional[_builtins.str] = None,
                      max_waiting: Optional[_builtins.str] = None,
                      query_id: Optional[_builtins.str] = None,
                      query_string: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      search_path: Optional[_builtins.str] = None,
                      sql_limit_id: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPgSqlLimitsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dbName'] = db_name
    __args__['instanceId'] = instance_id
    __args__['isEffective'] = is_effective
    __args__['maxConcurrency'] = max_concurrency
    __args__['maxWaiting'] = max_waiting
    __args__['queryId'] = query_id
    __args__['queryString'] = query_string
    __args__['region'] = region
    __args__['searchPath'] = search_path
    __args__['sqlLimitId'] = sql_limit_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:Rds/getPgSqlLimits:getPgSqlLimits', __args__, opts=opts, typ=GetPgSqlLimitsResult).value

    return AwaitableGetPgSqlLimitsResult(
        db_name=pulumi.get(__ret__, 'db_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        is_effective=pulumi.get(__ret__, 'is_effective'),
        max_concurrency=pulumi.get(__ret__, 'max_concurrency'),
        max_waiting=pulumi.get(__ret__, 'max_waiting'),
        query_id=pulumi.get(__ret__, 'query_id'),
        query_string=pulumi.get(__ret__, 'query_string'),
        region=pulumi.get(__ret__, 'region'),
        search_path=pulumi.get(__ret__, 'search_path'),
        sql_limit_id=pulumi.get(__ret__, 'sql_limit_id'),
        sql_limits=pulumi.get(__ret__, 'sql_limits'))
def get_pg_sql_limits_output(db_name: Optional[pulumi.Input[_builtins.str]] = None,
                             instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                             is_effective: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             max_concurrency: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             max_waiting: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             query_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             query_string: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             search_path: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             sql_limit_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPgSqlLimitsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dbName'] = db_name
    __args__['instanceId'] = instance_id
    __args__['isEffective'] = is_effective
    __args__['maxConcurrency'] = max_concurrency
    __args__['maxWaiting'] = max_waiting
    __args__['queryId'] = query_id
    __args__['queryString'] = query_string
    __args__['region'] = region
    __args__['searchPath'] = search_path
    __args__['sqlLimitId'] = sql_limit_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:Rds/getPgSqlLimits:getPgSqlLimits', __args__, opts=opts, typ=GetPgSqlLimitsResult)
    return __ret__.apply(lambda __response__: GetPgSqlLimitsResult(
        db_name=pulumi.get(__response__, 'db_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        is_effective=pulumi.get(__response__, 'is_effective'),
        max_concurrency=pulumi.get(__response__, 'max_concurrency'),
        max_waiting=pulumi.get(__response__, 'max_waiting'),
        query_id=pulumi.get(__response__, 'query_id'),
        query_string=pulumi.get(__response__, 'query_string'),
        region=pulumi.get(__response__, 'region'),
        search_path=pulumi.get(__response__, 'search_path'),
        sql_limit_id=pulumi.get(__response__, 'sql_limit_id'),
        sql_limits=pulumi.get(__response__, 'sql_limits')))

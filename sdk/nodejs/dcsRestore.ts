// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DcsRestore extends pulumi.CustomResource {
    /**
     * Get an existing DcsRestore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DcsRestoreState, opts?: pulumi.CustomResourceOptions): DcsRestore {
        return new DcsRestore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dcsRestore:DcsRestore';

    /**
     * Returns true if the given object is an instance of DcsRestore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DcsRestore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DcsRestore.__pulumiType;
    }

    declare public readonly backupId: pulumi.Output<string>;
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly projectId: pulumi.Output<string>;
    declare public readonly remark: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly restoreRecords: pulumi.Output<outputs.DcsRestoreRestoreRecord[]>;

    /**
     * Create a DcsRestore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DcsRestoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DcsRestoreArgs | DcsRestoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DcsRestoreState | undefined;
            resourceInputs["backupId"] = state?.backupId;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["remark"] = state?.remark;
            resourceInputs["restoreRecords"] = state?.restoreRecords;
        } else {
            const args = argsOrState as DcsRestoreArgs | undefined;
            if (args?.backupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'backupId'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["backupId"] = args?.backupId;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["remark"] = args?.remark;
            resourceInputs["restoreRecords"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DcsRestore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DcsRestore resources.
 */
export interface DcsRestoreState {
    backupId?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    projectId?: pulumi.Input<string>;
    remark?: pulumi.Input<string>;
    restoreRecords?: pulumi.Input<pulumi.Input<inputs.DcsRestoreRestoreRecord>[]>;
}

/**
 * The set of arguments for constructing a DcsRestore resource.
 */
export interface DcsRestoreArgs {
    backupId: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    projectId: pulumi.Input<string>;
    remark?: pulumi.Input<string>;
}

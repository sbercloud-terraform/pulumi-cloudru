// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Evs/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    declare public /*out*/ readonly allMetadata: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly allVolumeImageMetadata: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly attachments: pulumi.Output<outputs.Evs.VolumeAttachment[]>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public readonly backupId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly bootable: pulumi.Output<string>;
    declare public readonly cascade: pulumi.Output<boolean | undefined>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly dedicatedStorageId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly dedicatedStorageName: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly deviceType: pulumi.Output<string | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly imageId: pulumi.Output<string | undefined>;
    declare public readonly iops: pulumi.Output<number>;
    declare public /*out*/ readonly iopsAttributes: pulumi.Output<outputs.Evs.VolumeIopsAttribute[]>;
    declare public readonly kmsId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly links: pulumi.Output<outputs.Evs.VolumeLink[]>;
    declare public readonly multiattach: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly serialNumber: pulumi.Output<string>;
    declare public readonly serverId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly serviceType: pulumi.Output<string>;
    declare public readonly size: pulumi.Output<number>;
    declare public readonly snapshotId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly throughput: pulumi.Output<number>;
    declare public /*out*/ readonly throughputAttributes: pulumi.Output<outputs.Evs.VolumeThroughputAttribute[]>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public readonly volumeType: pulumi.Output<string>;
    declare public /*out*/ readonly wwn: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["allMetadata"] = state?.allMetadata;
            resourceInputs["allVolumeImageMetadata"] = state?.allVolumeImageMetadata;
            resourceInputs["attachments"] = state?.attachments;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["backupId"] = state?.backupId;
            resourceInputs["bootable"] = state?.bootable;
            resourceInputs["cascade"] = state?.cascade;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["dedicatedStorageId"] = state?.dedicatedStorageId;
            resourceInputs["dedicatedStorageName"] = state?.dedicatedStorageName;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceType"] = state?.deviceType;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["iops"] = state?.iops;
            resourceInputs["iopsAttributes"] = state?.iopsAttributes;
            resourceInputs["kmsId"] = state?.kmsId;
            resourceInputs["links"] = state?.links;
            resourceInputs["multiattach"] = state?.multiattach;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["region"] = state?.region;
            resourceInputs["serialNumber"] = state?.serialNumber;
            resourceInputs["serverId"] = state?.serverId;
            resourceInputs["serviceType"] = state?.serviceType;
            resourceInputs["size"] = state?.size;
            resourceInputs["snapshotId"] = state?.snapshotId;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["throughput"] = state?.throughput;
            resourceInputs["throughputAttributes"] = state?.throughputAttributes;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["volumeType"] = state?.volumeType;
            resourceInputs["wwn"] = state?.wwn;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if (args?.volumeType === undefined && !opts.urn) {
                throw new Error("Missing required property 'volumeType'");
            }
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["backupId"] = args?.backupId;
            resourceInputs["cascade"] = args?.cascade;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["dedicatedStorageId"] = args?.dedicatedStorageId;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceType"] = args?.deviceType;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["iops"] = args?.iops;
            resourceInputs["kmsId"] = args?.kmsId;
            resourceInputs["multiattach"] = args?.multiattach;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["region"] = args?.region;
            resourceInputs["serverId"] = args?.serverId;
            resourceInputs["size"] = args?.size;
            resourceInputs["snapshotId"] = args?.snapshotId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["throughput"] = args?.throughput;
            resourceInputs["volumeType"] = args?.volumeType;
            resourceInputs["allMetadata"] = undefined /*out*/;
            resourceInputs["allVolumeImageMetadata"] = undefined /*out*/;
            resourceInputs["attachments"] = undefined /*out*/;
            resourceInputs["bootable"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dedicatedStorageName"] = undefined /*out*/;
            resourceInputs["iopsAttributes"] = undefined /*out*/;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["serviceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["throughputAttributes"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["wwn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    allMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    allVolumeImageMetadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    attachments?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeAttachment>[]>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    backupId?: pulumi.Input<string>;
    bootable?: pulumi.Input<string>;
    cascade?: pulumi.Input<boolean>;
    chargingMode?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    dedicatedStorageName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    iopsAttributes?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeIopsAttribute>[]>;
    kmsId?: pulumi.Input<string>;
    links?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeLink>[]>;
    multiattach?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughput?: pulumi.Input<number>;
    throughputAttributes?: pulumi.Input<pulumi.Input<inputs.Evs.VolumeThroughputAttribute>[]>;
    updatedAt?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
    wwn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    backupId?: pulumi.Input<string>;
    cascade?: pulumi.Input<boolean>;
    chargingMode?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    kmsId?: pulumi.Input<string>;
    multiattach?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    throughput?: pulumi.Input<number>;
    volumeType: pulumi.Input<string>;
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 networks: pulumi.Input[Sequence[pulumi.Input['InstanceNetworkArgs']]],
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_list: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_terminate_time: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input['InstanceBandwidthArgs']] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataDiskArgs']]]] = None,
                 delete_disks_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_eip_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enclave_options: Optional[pulumi.Input['InstanceEnclaveOptionsArgs']] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 power_action: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_hints: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSchedulerHintArgs']]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 spot_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 spot_duration_count: Optional[pulumi.Input[_builtins.int]] = None,
                 spot_maximum_price: Optional[pulumi.Input[_builtins.str]] = None,
                 stop_before_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 system_disk_dss_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_iops: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_throughput: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[_builtins.str] flavor_id: schema: Required
        :param pulumi.Input[_builtins.str] flavor_name: schema: Computed
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: schema: Computed
        """
        pulumi.set(__self__, "networks", networks)
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if agent_list is not None:
            pulumi.set(__self__, "agent_list", agent_list)
        if auto_pay is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""auto_pay is deprecated: Deprecated""")
        if auto_pay is not None:
            pulumi.set(__self__, "auto_pay", auto_pay)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_terminate_time is not None:
            pulumi.set(__self__, "auto_terminate_time", auto_terminate_time)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if delete_disks_on_termination is not None:
            pulumi.set(__self__, "delete_disks_on_termination", delete_disks_on_termination)
        if delete_eip_on_termination is not None:
            pulumi.set(__self__, "delete_eip_on_termination", delete_eip_on_termination)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if eip_type is not None:
            pulumi.set(__self__, "eip_type", eip_type)
        if enclave_options is not None:
            pulumi.set(__self__, "enclave_options", enclave_options)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if flavor_name is not None:
            pulumi.set(__self__, "flavor_name", flavor_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if key_pair is not None:
            pulumi.set(__self__, "key_pair", key_pair)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if power_action is not None:
            pulumi.set(__self__, "power_action", power_action)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scheduler_hints is not None:
            pulumi.set(__self__, "scheduler_hints", scheduler_hints)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if spot_duration is not None:
            pulumi.set(__self__, "spot_duration", spot_duration)
        if spot_duration_count is not None:
            pulumi.set(__self__, "spot_duration_count", spot_duration_count)
        if spot_maximum_price is not None:
            pulumi.set(__self__, "spot_maximum_price", spot_maximum_price)
        if stop_before_destroy is not None:
            pulumi.set(__self__, "stop_before_destroy", stop_before_destroy)
        if system_disk_dss_pool_id is not None:
            pulumi.set(__self__, "system_disk_dss_pool_id", system_disk_dss_pool_id)
        if system_disk_iops is not None:
            pulumi.set(__self__, "system_disk_iops", system_disk_iops)
        if system_disk_kms_key_id is not None:
            pulumi.set(__self__, "system_disk_kms_key_id", system_disk_kms_key_id)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_throughput is not None:
            pulumi.set(__self__, "system_disk_throughput", system_disk_throughput)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter
    def networks(self) -> pulumi.Input[Sequence[pulumi.Input['InstanceNetworkArgs']]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: pulumi.Input[Sequence[pulumi.Input['InstanceNetworkArgs']]]):
        pulumi.set(self, "networks", value)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "admin_pass")

    @admin_pass.setter
    def admin_pass(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_pass", value)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter(name="agentList")
    def agent_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "agent_list")

    @agent_list.setter
    def agent_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_list", value)

    @_builtins.property
    @pulumi.getter(name="autoPay")
    @_utilities.deprecated("""Deprecated""")
    def auto_pay(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "auto_pay")

    @auto_pay.setter
    def auto_pay(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_pay", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="autoTerminateTime")
    def auto_terminate_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "auto_terminate_time")

    @auto_terminate_time.setter
    def auto_terminate_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_terminate_time", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input['InstanceBandwidthArgs']]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input['InstanceBandwidthArgs']]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @_builtins.property
    @pulumi.getter(name="deleteDisksOnTermination")
    def delete_disks_on_termination(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "delete_disks_on_termination")

    @delete_disks_on_termination.setter
    def delete_disks_on_termination(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_disks_on_termination", value)

    @_builtins.property
    @pulumi.getter(name="deleteEipOnTermination")
    def delete_eip_on_termination(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "delete_eip_on_termination")

    @delete_eip_on_termination.setter
    def delete_eip_on_termination(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_eip_on_termination", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @_builtins.property
    @pulumi.getter(name="eipType")
    def eip_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "eip_type")

    @eip_type.setter
    def eip_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_type", value)

    @_builtins.property
    @pulumi.getter(name="enclaveOptions")
    def enclave_options(self) -> Optional[pulumi.Input['InstanceEnclaveOptionsArgs']]:
        return pulumi.get(self, "enclave_options")

    @enclave_options.setter
    def enclave_options(self, value: Optional[pulumi.Input['InstanceEnclaveOptionsArgs']]):
        pulumi.set(self, "enclave_options", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Required
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "flavor_name")

    @flavor_name.setter
    def flavor_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_name", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "key_pair")

    @key_pair.setter
    def key_pair(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_pair", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter(name="powerAction")
    def power_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "power_action")

    @power_action.setter
    def power_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "power_action", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSchedulerHintArgs']]]]:
        return pulumi.get(self, "scheduler_hints")

    @scheduler_hints.setter
    def scheduler_hints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSchedulerHintArgs']]]]):
        pulumi.set(self, "scheduler_hints", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="spotDuration")
    def spot_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "spot_duration")

    @spot_duration.setter
    def spot_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spot_duration", value)

    @_builtins.property
    @pulumi.getter(name="spotDurationCount")
    def spot_duration_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "spot_duration_count")

    @spot_duration_count.setter
    def spot_duration_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spot_duration_count", value)

    @_builtins.property
    @pulumi.getter(name="spotMaximumPrice")
    def spot_maximum_price(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "spot_maximum_price")

    @spot_maximum_price.setter
    def spot_maximum_price(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spot_maximum_price", value)

    @_builtins.property
    @pulumi.getter(name="stopBeforeDestroy")
    def stop_before_destroy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "stop_before_destroy")

    @stop_before_destroy.setter
    def stop_before_destroy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stop_before_destroy", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskDssPoolId")
    def system_disk_dss_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_disk_dss_pool_id")

    @system_disk_dss_pool_id.setter
    def system_disk_dss_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_disk_dss_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskIops")
    def system_disk_iops(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "system_disk_iops")

    @system_disk_iops.setter
    def system_disk_iops(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "system_disk_iops", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskKmsKeyId")
    def system_disk_kms_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_disk_kms_key_id")

    @system_disk_kms_key_id.setter
    def system_disk_kms_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_disk_kms_key_id", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "system_disk_size", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskThroughput")
    def system_disk_throughput(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "system_disk_throughput")

    @system_disk_throughput.setter
    def system_disk_throughput(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "system_disk_throughput", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_disk_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 access_ip_v4: Optional[pulumi.Input[_builtins.str]] = None,
                 access_ip_v6: Optional[pulumi.Input[_builtins.str]] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_list: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_terminate_time: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input['InstanceBandwidthArgs']] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataDiskArgs']]]] = None,
                 delete_disks_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_eip_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enclave_options: Optional[pulumi.Input['InstanceEnclaveOptionsArgs']] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expired_time: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNetworkArgs']]]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 power_action: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_hints: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSchedulerHintArgs']]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 spot_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 spot_duration_count: Optional[pulumi.Input[_builtins.int]] = None,
                 spot_maximum_price: Optional[pulumi.Input[_builtins.str]] = None,
                 status: Optional[pulumi.Input[_builtins.str]] = None,
                 stop_before_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 system_disk_dss_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_iops: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_throughput: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_attacheds: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceVolumeAttachedArgs']]]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input[_builtins.str] flavor_id: schema: Required
        :param pulumi.Input[_builtins.str] flavor_name: schema: Computed
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: schema: Computed
        """
        if access_ip_v4 is not None:
            pulumi.set(__self__, "access_ip_v4", access_ip_v4)
        if access_ip_v6 is not None:
            pulumi.set(__self__, "access_ip_v6", access_ip_v6)
        if admin_pass is not None:
            pulumi.set(__self__, "admin_pass", admin_pass)
        if agency_name is not None:
            pulumi.set(__self__, "agency_name", agency_name)
        if agent_list is not None:
            pulumi.set(__self__, "agent_list", agent_list)
        if auto_pay is not None:
            warnings.warn("""Deprecated""", DeprecationWarning)
            pulumi.log.warn("""auto_pay is deprecated: Deprecated""")
        if auto_pay is not None:
            pulumi.set(__self__, "auto_pay", auto_pay)
        if auto_renew is not None:
            pulumi.set(__self__, "auto_renew", auto_renew)
        if auto_terminate_time is not None:
            pulumi.set(__self__, "auto_terminate_time", auto_terminate_time)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if charging_mode is not None:
            pulumi.set(__self__, "charging_mode", charging_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if data_disks is not None:
            pulumi.set(__self__, "data_disks", data_disks)
        if delete_disks_on_termination is not None:
            pulumi.set(__self__, "delete_disks_on_termination", delete_disks_on_termination)
        if delete_eip_on_termination is not None:
            pulumi.set(__self__, "delete_eip_on_termination", delete_eip_on_termination)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if eip_type is not None:
            pulumi.set(__self__, "eip_type", eip_type)
        if enclave_options is not None:
            pulumi.set(__self__, "enclave_options", enclave_options)
        if enterprise_project_id is not None:
            pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        if expired_time is not None:
            pulumi.set(__self__, "expired_time", expired_time)
        if flavor_id is not None:
            pulumi.set(__self__, "flavor_id", flavor_id)
        if flavor_name is not None:
            pulumi.set(__self__, "flavor_name", flavor_name)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if key_pair is not None:
            pulumi.set(__self__, "key_pair", key_pair)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networks is not None:
            pulumi.set(__self__, "networks", networks)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if period_unit is not None:
            pulumi.set(__self__, "period_unit", period_unit)
        if power_action is not None:
            pulumi.set(__self__, "power_action", power_action)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if scheduler_hints is not None:
            pulumi.set(__self__, "scheduler_hints", scheduler_hints)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if spot_duration is not None:
            pulumi.set(__self__, "spot_duration", spot_duration)
        if spot_duration_count is not None:
            pulumi.set(__self__, "spot_duration_count", spot_duration_count)
        if spot_maximum_price is not None:
            pulumi.set(__self__, "spot_maximum_price", spot_maximum_price)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if stop_before_destroy is not None:
            pulumi.set(__self__, "stop_before_destroy", stop_before_destroy)
        if system_disk_dss_pool_id is not None:
            pulumi.set(__self__, "system_disk_dss_pool_id", system_disk_dss_pool_id)
        if system_disk_id is not None:
            pulumi.set(__self__, "system_disk_id", system_disk_id)
        if system_disk_iops is not None:
            pulumi.set(__self__, "system_disk_iops", system_disk_iops)
        if system_disk_kms_key_id is not None:
            pulumi.set(__self__, "system_disk_kms_key_id", system_disk_kms_key_id)
        if system_disk_size is not None:
            pulumi.set(__self__, "system_disk_size", system_disk_size)
        if system_disk_throughput is not None:
            pulumi.set(__self__, "system_disk_throughput", system_disk_throughput)
        if system_disk_type is not None:
            pulumi.set(__self__, "system_disk_type", system_disk_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if volume_attacheds is not None:
            pulumi.set(__self__, "volume_attacheds", volume_attacheds)

    @_builtins.property
    @pulumi.getter(name="accessIpV4")
    def access_ip_v4(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "access_ip_v4")

    @access_ip_v4.setter
    def access_ip_v4(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_ip_v4", value)

    @_builtins.property
    @pulumi.getter(name="accessIpV6")
    def access_ip_v6(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "access_ip_v6")

    @access_ip_v6.setter
    def access_ip_v6(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_ip_v6", value)

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "admin_pass")

    @admin_pass.setter
    def admin_pass(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "admin_pass", value)

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "agency_name")

    @agency_name.setter
    def agency_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agency_name", value)

    @_builtins.property
    @pulumi.getter(name="agentList")
    def agent_list(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "agent_list")

    @agent_list.setter
    def agent_list(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "agent_list", value)

    @_builtins.property
    @pulumi.getter(name="autoPay")
    @_utilities.deprecated("""Deprecated""")
    def auto_pay(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "auto_pay")

    @auto_pay.setter
    def auto_pay(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_pay", value)

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "auto_renew")

    @auto_renew.setter
    def auto_renew(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_renew", value)

    @_builtins.property
    @pulumi.getter(name="autoTerminateTime")
    def auto_terminate_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "auto_terminate_time")

    @auto_terminate_time.setter
    def auto_terminate_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "auto_terminate_time", value)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "availability_zone", value)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input['InstanceBandwidthArgs']]:
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input['InstanceBandwidthArgs']]):
        pulumi.set(self, "bandwidth", value)

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "charging_mode")

    @charging_mode.setter
    def charging_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "charging_mode", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataDiskArgs']]]]:
        return pulumi.get(self, "data_disks")

    @data_disks.setter
    def data_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceDataDiskArgs']]]]):
        pulumi.set(self, "data_disks", value)

    @_builtins.property
    @pulumi.getter(name="deleteDisksOnTermination")
    def delete_disks_on_termination(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "delete_disks_on_termination")

    @delete_disks_on_termination.setter
    def delete_disks_on_termination(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_disks_on_termination", value)

    @_builtins.property
    @pulumi.getter(name="deleteEipOnTermination")
    def delete_eip_on_termination(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "delete_eip_on_termination")

    @delete_eip_on_termination.setter
    def delete_eip_on_termination(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_eip_on_termination", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @_builtins.property
    @pulumi.getter(name="eipType")
    def eip_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "eip_type")

    @eip_type.setter
    def eip_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "eip_type", value)

    @_builtins.property
    @pulumi.getter(name="enclaveOptions")
    def enclave_options(self) -> Optional[pulumi.Input['InstanceEnclaveOptionsArgs']]:
        return pulumi.get(self, "enclave_options")

    @enclave_options.setter
    def enclave_options(self, value: Optional[pulumi.Input['InstanceEnclaveOptionsArgs']]):
        pulumi.set(self, "enclave_options", value)

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enterprise_project_id")

    @enterprise_project_id.setter
    def enterprise_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enterprise_project_id", value)

    @_builtins.property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "expired_time")

    @expired_time.setter
    def expired_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expired_time", value)

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Required
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_id", value)

    @_builtins.property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "flavor_name")

    @flavor_name.setter
    def flavor_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "flavor_name", value)

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "hostname", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "key_pair")

    @key_pair.setter
    def key_pair(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key_pair", value)

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNetworkArgs']]]]:
        return pulumi.get(self, "networks")

    @networks.setter
    def networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceNetworkArgs']]]]):
        pulumi.set(self, "networks", value)

    @_builtins.property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "period", value)

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "period_unit")

    @period_unit.setter
    def period_unit(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "period_unit", value)

    @_builtins.property
    @pulumi.getter(name="powerAction")
    def power_action(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "power_action")

    @power_action.setter
    def power_action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "power_action", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSchedulerHintArgs']]]]:
        return pulumi.get(self, "scheduler_hints")

    @scheduler_hints.setter
    def scheduler_hints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceSchedulerHintArgs']]]]):
        pulumi.set(self, "scheduler_hints", value)

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter(name="spotDuration")
    def spot_duration(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "spot_duration")

    @spot_duration.setter
    def spot_duration(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spot_duration", value)

    @_builtins.property
    @pulumi.getter(name="spotDurationCount")
    def spot_duration_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "spot_duration_count")

    @spot_duration_count.setter
    def spot_duration_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "spot_duration_count", value)

    @_builtins.property
    @pulumi.getter(name="spotMaximumPrice")
    def spot_maximum_price(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "spot_maximum_price")

    @spot_maximum_price.setter
    def spot_maximum_price(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "spot_maximum_price", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="stopBeforeDestroy")
    def stop_before_destroy(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "stop_before_destroy")

    @stop_before_destroy.setter
    def stop_before_destroy(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "stop_before_destroy", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskDssPoolId")
    def system_disk_dss_pool_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_disk_dss_pool_id")

    @system_disk_dss_pool_id.setter
    def system_disk_dss_pool_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_disk_dss_pool_id", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskId")
    def system_disk_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_disk_id")

    @system_disk_id.setter
    def system_disk_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_disk_id", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskIops")
    def system_disk_iops(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "system_disk_iops")

    @system_disk_iops.setter
    def system_disk_iops(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "system_disk_iops", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskKmsKeyId")
    def system_disk_kms_key_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_disk_kms_key_id")

    @system_disk_kms_key_id.setter
    def system_disk_kms_key_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_disk_kms_key_id", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "system_disk_size")

    @system_disk_size.setter
    def system_disk_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "system_disk_size", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskThroughput")
    def system_disk_throughput(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "system_disk_throughput")

    @system_disk_throughput.setter
    def system_disk_throughput(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "system_disk_throughput", value)

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_disk_type")

    @system_disk_type.setter
    def system_disk_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_disk_type", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_data", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeAttacheds")
    def volume_attacheds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceVolumeAttachedArgs']]]]:
        return pulumi.get(self, "volume_attacheds")

    @volume_attacheds.setter
    def volume_attacheds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceVolumeAttachedArgs']]]]):
        pulumi.set(self, "volume_attacheds", value)


@pulumi.type_token("sbercloud:Ecs/instance:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_list: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_terminate_time: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input[Union['InstanceBandwidthArgs', 'InstanceBandwidthArgsDict']]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceDataDiskArgs', 'InstanceDataDiskArgsDict']]]]] = None,
                 delete_disks_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_eip_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enclave_options: Optional[pulumi.Input[Union['InstanceEnclaveOptionsArgs', 'InstanceEnclaveOptionsArgsDict']]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceNetworkArgs', 'InstanceNetworkArgsDict']]]]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 power_action: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_hints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceSchedulerHintArgs', 'InstanceSchedulerHintArgsDict']]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 spot_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 spot_duration_count: Optional[pulumi.Input[_builtins.int]] = None,
                 spot_maximum_price: Optional[pulumi.Input[_builtins.str]] = None,
                 stop_before_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 system_disk_dss_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_iops: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_throughput: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a Instance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] flavor_id: schema: Required
        :param pulumi.Input[_builtins.str] flavor_name: schema: Computed
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: schema: Computed
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Instance resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
                 agency_name: Optional[pulumi.Input[_builtins.str]] = None,
                 agent_list: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
                 auto_terminate_time: Optional[pulumi.Input[_builtins.str]] = None,
                 availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
                 bandwidth: Optional[pulumi.Input[Union['InstanceBandwidthArgs', 'InstanceBandwidthArgsDict']]] = None,
                 charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceDataDiskArgs', 'InstanceDataDiskArgsDict']]]]] = None,
                 delete_disks_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 delete_eip_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 eip_type: Optional[pulumi.Input[_builtins.str]] = None,
                 enclave_options: Optional[pulumi.Input[Union['InstanceEnclaveOptionsArgs', 'InstanceEnclaveOptionsArgsDict']]] = None,
                 enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
                 flavor_name: Optional[pulumi.Input[_builtins.str]] = None,
                 hostname: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 key_pair: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceNetworkArgs', 'InstanceNetworkArgsDict']]]]] = None,
                 period: Optional[pulumi.Input[_builtins.int]] = None,
                 period_unit: Optional[pulumi.Input[_builtins.str]] = None,
                 power_action: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 scheduler_hints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceSchedulerHintArgs', 'InstanceSchedulerHintArgsDict']]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 spot_duration: Optional[pulumi.Input[_builtins.int]] = None,
                 spot_duration_count: Optional[pulumi.Input[_builtins.int]] = None,
                 spot_maximum_price: Optional[pulumi.Input[_builtins.str]] = None,
                 stop_before_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
                 system_disk_dss_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_iops: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
                 system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_throughput: Optional[pulumi.Input[_builtins.int]] = None,
                 system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 user_data: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["admin_pass"] = None if admin_pass is None else pulumi.Output.secret(admin_pass)
            __props__.__dict__["agency_name"] = agency_name
            __props__.__dict__["agent_list"] = agent_list
            __props__.__dict__["auto_pay"] = auto_pay
            __props__.__dict__["auto_renew"] = auto_renew
            __props__.__dict__["auto_terminate_time"] = auto_terminate_time
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["bandwidth"] = bandwidth
            __props__.__dict__["charging_mode"] = charging_mode
            __props__.__dict__["data_disks"] = data_disks
            __props__.__dict__["delete_disks_on_termination"] = delete_disks_on_termination
            __props__.__dict__["delete_eip_on_termination"] = delete_eip_on_termination
            __props__.__dict__["description"] = description
            __props__.__dict__["eip_id"] = eip_id
            __props__.__dict__["eip_type"] = eip_type
            __props__.__dict__["enclave_options"] = enclave_options
            __props__.__dict__["enterprise_project_id"] = enterprise_project_id
            __props__.__dict__["flavor_id"] = flavor_id
            __props__.__dict__["flavor_name"] = flavor_name
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["key_pair"] = key_pair
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            if networks is None and not opts.urn:
                raise TypeError("Missing required property 'networks'")
            __props__.__dict__["networks"] = networks
            __props__.__dict__["period"] = period
            __props__.__dict__["period_unit"] = period_unit
            __props__.__dict__["power_action"] = power_action
            __props__.__dict__["private_key"] = None if private_key is None else pulumi.Output.secret(private_key)
            __props__.__dict__["region"] = region
            __props__.__dict__["scheduler_hints"] = scheduler_hints
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["spot_duration"] = spot_duration
            __props__.__dict__["spot_duration_count"] = spot_duration_count
            __props__.__dict__["spot_maximum_price"] = spot_maximum_price
            __props__.__dict__["stop_before_destroy"] = stop_before_destroy
            __props__.__dict__["system_disk_dss_pool_id"] = system_disk_dss_pool_id
            __props__.__dict__["system_disk_iops"] = system_disk_iops
            __props__.__dict__["system_disk_kms_key_id"] = system_disk_kms_key_id
            __props__.__dict__["system_disk_size"] = system_disk_size
            __props__.__dict__["system_disk_throughput"] = system_disk_throughput
            __props__.__dict__["system_disk_type"] = system_disk_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["user_id"] = user_id
            __props__.__dict__["access_ip_v4"] = None
            __props__.__dict__["access_ip_v6"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["expired_time"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["system_disk_id"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["volume_attacheds"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["adminPass", "privateKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Instance, __self__).__init__(
            'sbercloud:Ecs/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_ip_v4: Optional[pulumi.Input[_builtins.str]] = None,
            access_ip_v6: Optional[pulumi.Input[_builtins.str]] = None,
            admin_pass: Optional[pulumi.Input[_builtins.str]] = None,
            agency_name: Optional[pulumi.Input[_builtins.str]] = None,
            agent_list: Optional[pulumi.Input[_builtins.str]] = None,
            auto_pay: Optional[pulumi.Input[_builtins.str]] = None,
            auto_renew: Optional[pulumi.Input[_builtins.str]] = None,
            auto_terminate_time: Optional[pulumi.Input[_builtins.str]] = None,
            availability_zone: Optional[pulumi.Input[_builtins.str]] = None,
            bandwidth: Optional[pulumi.Input[Union['InstanceBandwidthArgs', 'InstanceBandwidthArgsDict']]] = None,
            charging_mode: Optional[pulumi.Input[_builtins.str]] = None,
            created_at: Optional[pulumi.Input[_builtins.str]] = None,
            data_disks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceDataDiskArgs', 'InstanceDataDiskArgsDict']]]]] = None,
            delete_disks_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
            delete_eip_on_termination: Optional[pulumi.Input[_builtins.bool]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            eip_id: Optional[pulumi.Input[_builtins.str]] = None,
            eip_type: Optional[pulumi.Input[_builtins.str]] = None,
            enclave_options: Optional[pulumi.Input[Union['InstanceEnclaveOptionsArgs', 'InstanceEnclaveOptionsArgsDict']]] = None,
            enterprise_project_id: Optional[pulumi.Input[_builtins.str]] = None,
            expired_time: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_id: Optional[pulumi.Input[_builtins.str]] = None,
            flavor_name: Optional[pulumi.Input[_builtins.str]] = None,
            hostname: Optional[pulumi.Input[_builtins.str]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_name: Optional[pulumi.Input[_builtins.str]] = None,
            key_pair: Optional[pulumi.Input[_builtins.str]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceNetworkArgs', 'InstanceNetworkArgsDict']]]]] = None,
            period: Optional[pulumi.Input[_builtins.int]] = None,
            period_unit: Optional[pulumi.Input[_builtins.str]] = None,
            power_action: Optional[pulumi.Input[_builtins.str]] = None,
            private_key: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            scheduler_hints: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceSchedulerHintArgs', 'InstanceSchedulerHintArgsDict']]]]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            spot_duration: Optional[pulumi.Input[_builtins.int]] = None,
            spot_duration_count: Optional[pulumi.Input[_builtins.int]] = None,
            spot_maximum_price: Optional[pulumi.Input[_builtins.str]] = None,
            status: Optional[pulumi.Input[_builtins.str]] = None,
            stop_before_destroy: Optional[pulumi.Input[_builtins.bool]] = None,
            system_disk_dss_pool_id: Optional[pulumi.Input[_builtins.str]] = None,
            system_disk_id: Optional[pulumi.Input[_builtins.str]] = None,
            system_disk_iops: Optional[pulumi.Input[_builtins.int]] = None,
            system_disk_kms_key_id: Optional[pulumi.Input[_builtins.str]] = None,
            system_disk_size: Optional[pulumi.Input[_builtins.int]] = None,
            system_disk_throughput: Optional[pulumi.Input[_builtins.int]] = None,
            system_disk_type: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            updated_at: Optional[pulumi.Input[_builtins.str]] = None,
            user_data: Optional[pulumi.Input[_builtins.str]] = None,
            user_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_attacheds: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceVolumeAttachedArgs', 'InstanceVolumeAttachedArgsDict']]]]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] flavor_id: schema: Required
        :param pulumi.Input[_builtins.str] flavor_name: schema: Computed
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] security_groups: schema: Computed
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["access_ip_v4"] = access_ip_v4
        __props__.__dict__["access_ip_v6"] = access_ip_v6
        __props__.__dict__["admin_pass"] = admin_pass
        __props__.__dict__["agency_name"] = agency_name
        __props__.__dict__["agent_list"] = agent_list
        __props__.__dict__["auto_pay"] = auto_pay
        __props__.__dict__["auto_renew"] = auto_renew
        __props__.__dict__["auto_terminate_time"] = auto_terminate_time
        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["bandwidth"] = bandwidth
        __props__.__dict__["charging_mode"] = charging_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["data_disks"] = data_disks
        __props__.__dict__["delete_disks_on_termination"] = delete_disks_on_termination
        __props__.__dict__["delete_eip_on_termination"] = delete_eip_on_termination
        __props__.__dict__["description"] = description
        __props__.__dict__["eip_id"] = eip_id
        __props__.__dict__["eip_type"] = eip_type
        __props__.__dict__["enclave_options"] = enclave_options
        __props__.__dict__["enterprise_project_id"] = enterprise_project_id
        __props__.__dict__["expired_time"] = expired_time
        __props__.__dict__["flavor_id"] = flavor_id
        __props__.__dict__["flavor_name"] = flavor_name
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["key_pair"] = key_pair
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["networks"] = networks
        __props__.__dict__["period"] = period
        __props__.__dict__["period_unit"] = period_unit
        __props__.__dict__["power_action"] = power_action
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["region"] = region
        __props__.__dict__["scheduler_hints"] = scheduler_hints
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["spot_duration"] = spot_duration
        __props__.__dict__["spot_duration_count"] = spot_duration_count
        __props__.__dict__["spot_maximum_price"] = spot_maximum_price
        __props__.__dict__["status"] = status
        __props__.__dict__["stop_before_destroy"] = stop_before_destroy
        __props__.__dict__["system_disk_dss_pool_id"] = system_disk_dss_pool_id
        __props__.__dict__["system_disk_id"] = system_disk_id
        __props__.__dict__["system_disk_iops"] = system_disk_iops
        __props__.__dict__["system_disk_kms_key_id"] = system_disk_kms_key_id
        __props__.__dict__["system_disk_size"] = system_disk_size
        __props__.__dict__["system_disk_throughput"] = system_disk_throughput
        __props__.__dict__["system_disk_type"] = system_disk_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["volume_attacheds"] = volume_attacheds
        return Instance(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accessIpV4")
    def access_ip_v4(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "access_ip_v4")

    @_builtins.property
    @pulumi.getter(name="accessIpV6")
    def access_ip_v6(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "access_ip_v6")

    @_builtins.property
    @pulumi.getter(name="adminPass")
    def admin_pass(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "admin_pass")

    @_builtins.property
    @pulumi.getter(name="agencyName")
    def agency_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "agency_name")

    @_builtins.property
    @pulumi.getter(name="agentList")
    def agent_list(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "agent_list")

    @_builtins.property
    @pulumi.getter(name="autoPay")
    @_utilities.deprecated("""Deprecated""")
    def auto_pay(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "auto_pay")

    @_builtins.property
    @pulumi.getter(name="autoRenew")
    def auto_renew(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "auto_renew")

    @_builtins.property
    @pulumi.getter(name="autoTerminateTime")
    def auto_terminate_time(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "auto_terminate_time")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> pulumi.Output[Optional['outputs.InstanceBandwidth']]:
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter(name="chargingMode")
    def charging_mode(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "charging_mode")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dataDisks")
    def data_disks(self) -> pulumi.Output[Optional[Sequence['outputs.InstanceDataDisk']]]:
        return pulumi.get(self, "data_disks")

    @_builtins.property
    @pulumi.getter(name="deleteDisksOnTermination")
    def delete_disks_on_termination(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "delete_disks_on_termination")

    @_builtins.property
    @pulumi.getter(name="deleteEipOnTermination")
    def delete_eip_on_termination(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "delete_eip_on_termination")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="eipType")
    def eip_type(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "eip_type")

    @_builtins.property
    @pulumi.getter(name="enclaveOptions")
    def enclave_options(self) -> pulumi.Output['outputs.InstanceEnclaveOptions']:
        return pulumi.get(self, "enclave_options")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "expired_time")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Output[_builtins.str]:
        """
        schema: Required
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter(name="flavorName")
    def flavor_name(self) -> pulumi.Output[_builtins.str]:
        """
        schema: Computed
        """
        return pulumi.get(self, "flavor_name")

    @_builtins.property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "hostname")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="keyPair")
    def key_pair(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "key_pair")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Sequence['outputs.InstanceNetwork']]:
        return pulumi.get(self, "networks")

    @_builtins.property
    @pulumi.getter
    def period(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter(name="powerAction")
    def power_action(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "power_action")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="schedulerHints")
    def scheduler_hints(self) -> pulumi.Output[Sequence['outputs.InstanceSchedulerHint']]:
        return pulumi.get(self, "scheduler_hints")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        schema: Computed
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="spotDuration")
    def spot_duration(self) -> pulumi.Output[Optional[_builtins.int]]:
        return pulumi.get(self, "spot_duration")

    @_builtins.property
    @pulumi.getter(name="spotDurationCount")
    def spot_duration_count(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "spot_duration_count")

    @_builtins.property
    @pulumi.getter(name="spotMaximumPrice")
    def spot_maximum_price(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "spot_maximum_price")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="stopBeforeDestroy")
    def stop_before_destroy(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "stop_before_destroy")

    @_builtins.property
    @pulumi.getter(name="systemDiskDssPoolId")
    def system_disk_dss_pool_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "system_disk_dss_pool_id")

    @_builtins.property
    @pulumi.getter(name="systemDiskId")
    def system_disk_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "system_disk_id")

    @_builtins.property
    @pulumi.getter(name="systemDiskIops")
    def system_disk_iops(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "system_disk_iops")

    @_builtins.property
    @pulumi.getter(name="systemDiskKmsKeyId")
    def system_disk_kms_key_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "system_disk_kms_key_id")

    @_builtins.property
    @pulumi.getter(name="systemDiskSize")
    def system_disk_size(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "system_disk_size")

    @_builtins.property
    @pulumi.getter(name="systemDiskThroughput")
    def system_disk_throughput(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "system_disk_throughput")

    @_builtins.property
    @pulumi.getter(name="systemDiskType")
    def system_disk_type(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "system_disk_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="volumeAttacheds")
    def volume_attacheds(self) -> pulumi.Output[Sequence['outputs.InstanceVolumeAttached']]:
        return pulumi.get(self, "volume_attacheds")


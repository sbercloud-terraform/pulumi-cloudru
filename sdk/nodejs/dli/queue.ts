// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Queue extends pulumi.CustomResource {
    /**
     * Get an existing Queue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QueueState, opts?: pulumi.CustomResourceOptions): Queue {
        return new Queue(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Dli/queue:Queue';

    /**
     * Returns true if the given object is an instance of Queue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Queue {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Queue.__pulumiType;
    }

    declare public /*out*/ readonly createTime: pulumi.Output<number>;
    declare public readonly cuCount: pulumi.Output<number>;
    declare public readonly description: pulumi.Output<string>;
    /**
     * The name of the elastic resource pool to which the queue belongs.
     */
    declare public readonly elasticResourcePoolName: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly feature: pulumi.Output<string | undefined>;
    /**
     * @deprecated management_subnet_cidr is Deprecated
     */
    declare public readonly managementSubnetCidr: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly platform: pulumi.Output<string | undefined>;
    declare public readonly queueType: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * The queue resource mode.
     */
    declare public readonly resourceMode: pulumi.Output<number>;
    declare public readonly scalingPolicies: pulumi.Output<outputs.Dli.QueueScalingPolicy[]>;
    declare public readonly sparkDriver: pulumi.Output<outputs.Dli.QueueSparkDriver | undefined>;
    /**
     * @deprecated subnet_cidr is Deprecated
     */
    declare public readonly subnetCidr: pulumi.Output<string | undefined>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    /**
     * The CIDR block of the queue.
     */
    declare public readonly vpcCidr: pulumi.Output<string>;

    /**
     * Create a Queue resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueueArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QueueArgs | QueueState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QueueState | undefined;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["cuCount"] = state?.cuCount;
            resourceInputs["description"] = state?.description;
            resourceInputs["elasticResourcePoolName"] = state?.elasticResourcePoolName;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["feature"] = state?.feature;
            resourceInputs["managementSubnetCidr"] = state?.managementSubnetCidr;
            resourceInputs["name"] = state?.name;
            resourceInputs["platform"] = state?.platform;
            resourceInputs["queueType"] = state?.queueType;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceMode"] = state?.resourceMode;
            resourceInputs["scalingPolicies"] = state?.scalingPolicies;
            resourceInputs["sparkDriver"] = state?.sparkDriver;
            resourceInputs["subnetCidr"] = state?.subnetCidr;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcCidr"] = state?.vpcCidr;
        } else {
            const args = argsOrState as QueueArgs | undefined;
            if (args?.cuCount === undefined && !opts.urn) {
                throw new Error("Missing required property 'cuCount'");
            }
            resourceInputs["cuCount"] = args?.cuCount;
            resourceInputs["description"] = args?.description;
            resourceInputs["elasticResourcePoolName"] = args?.elasticResourcePoolName;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["feature"] = args?.feature;
            resourceInputs["managementSubnetCidr"] = args?.managementSubnetCidr;
            resourceInputs["name"] = args?.name;
            resourceInputs["platform"] = args?.platform;
            resourceInputs["queueType"] = args?.queueType;
            resourceInputs["region"] = args?.region;
            resourceInputs["resourceMode"] = args?.resourceMode;
            resourceInputs["scalingPolicies"] = args?.scalingPolicies;
            resourceInputs["sparkDriver"] = args?.sparkDriver;
            resourceInputs["subnetCidr"] = args?.subnetCidr;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcCidr"] = args?.vpcCidr;
            resourceInputs["createTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Queue.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Queue resources.
 */
export interface QueueState {
    createTime?: pulumi.Input<number>;
    cuCount?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    /**
     * The name of the elastic resource pool to which the queue belongs.
     */
    elasticResourcePoolName?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    feature?: pulumi.Input<string>;
    /**
     * @deprecated management_subnet_cidr is Deprecated
     */
    managementSubnetCidr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    queueType?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The queue resource mode.
     */
    resourceMode?: pulumi.Input<number>;
    scalingPolicies?: pulumi.Input<pulumi.Input<inputs.Dli.QueueScalingPolicy>[]>;
    sparkDriver?: pulumi.Input<inputs.Dli.QueueSparkDriver>;
    /**
     * @deprecated subnet_cidr is Deprecated
     */
    subnetCidr?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The CIDR block of the queue.
     */
    vpcCidr?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Queue resource.
 */
export interface QueueArgs {
    cuCount: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    /**
     * The name of the elastic resource pool to which the queue belongs.
     */
    elasticResourcePoolName?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    feature?: pulumi.Input<string>;
    /**
     * @deprecated management_subnet_cidr is Deprecated
     */
    managementSubnetCidr?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    platform?: pulumi.Input<string>;
    queueType?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The queue resource mode.
     */
    resourceMode?: pulumi.Input<number>;
    scalingPolicies?: pulumi.Input<pulumi.Input<inputs.Dli.QueueScalingPolicy>[]>;
    sparkDriver?: pulumi.Input<inputs.Dli.QueueSparkDriver>;
    /**
     * @deprecated subnet_cidr is Deprecated
     */
    subnetCidr?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The CIDR block of the queue.
     */
    vpcCidr?: pulumi.Input<string>;
}

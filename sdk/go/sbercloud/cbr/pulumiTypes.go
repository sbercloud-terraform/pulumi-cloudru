// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cbr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

var _ = internal.GetEnvOrDefault

type PolicyBackupCycle struct {
	// Specifies the weekly backup day of backup schedule. It supports seven days a week (MO, TU,
	// WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without spaces, between date and date during the
	// configuration.
	Days *string `pulumi:"days"`
	// Specifies the backup time. Automated backups will be triggered at the backup
	// time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
	// cannot be repeated. In the replication policy, you are advised to set one time point for one day.
	//
	// <a name="cbrPolicyLongTermRetention"></a>
	// The `longTermRetention` block supports:
	ExecutionTimes []string `pulumi:"executionTimes"`
	// Specifies the interval (in days) of backup schedule. The value range is `1` to `30`. This
	// parameter and `days` are alternative.
	Interval *int `pulumi:"interval"`
}

// PolicyBackupCycleInput is an input type that accepts PolicyBackupCycleArgs and PolicyBackupCycleOutput values.
// You can construct a concrete instance of `PolicyBackupCycleInput` via:
//
//	PolicyBackupCycleArgs{...}
type PolicyBackupCycleInput interface {
	pulumi.Input

	ToPolicyBackupCycleOutput() PolicyBackupCycleOutput
	ToPolicyBackupCycleOutputWithContext(context.Context) PolicyBackupCycleOutput
}

type PolicyBackupCycleArgs struct {
	// Specifies the weekly backup day of backup schedule. It supports seven days a week (MO, TU,
	// WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without spaces, between date and date during the
	// configuration.
	Days pulumi.StringPtrInput `pulumi:"days"`
	// Specifies the backup time. Automated backups will be triggered at the backup
	// time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
	// cannot be repeated. In the replication policy, you are advised to set one time point for one day.
	//
	// <a name="cbrPolicyLongTermRetention"></a>
	// The `longTermRetention` block supports:
	ExecutionTimes pulumi.StringArrayInput `pulumi:"executionTimes"`
	// Specifies the interval (in days) of backup schedule. The value range is `1` to `30`. This
	// parameter and `days` are alternative.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
}

func (PolicyBackupCycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyBackupCycle)(nil)).Elem()
}

func (i PolicyBackupCycleArgs) ToPolicyBackupCycleOutput() PolicyBackupCycleOutput {
	return i.ToPolicyBackupCycleOutputWithContext(context.Background())
}

func (i PolicyBackupCycleArgs) ToPolicyBackupCycleOutputWithContext(ctx context.Context) PolicyBackupCycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBackupCycleOutput)
}

func (i PolicyBackupCycleArgs) ToPolicyBackupCyclePtrOutput() PolicyBackupCyclePtrOutput {
	return i.ToPolicyBackupCyclePtrOutputWithContext(context.Background())
}

func (i PolicyBackupCycleArgs) ToPolicyBackupCyclePtrOutputWithContext(ctx context.Context) PolicyBackupCyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBackupCycleOutput).ToPolicyBackupCyclePtrOutputWithContext(ctx)
}

// PolicyBackupCyclePtrInput is an input type that accepts PolicyBackupCycleArgs, PolicyBackupCyclePtr and PolicyBackupCyclePtrOutput values.
// You can construct a concrete instance of `PolicyBackupCyclePtrInput` via:
//
//	        PolicyBackupCycleArgs{...}
//
//	or:
//
//	        nil
type PolicyBackupCyclePtrInput interface {
	pulumi.Input

	ToPolicyBackupCyclePtrOutput() PolicyBackupCyclePtrOutput
	ToPolicyBackupCyclePtrOutputWithContext(context.Context) PolicyBackupCyclePtrOutput
}

type policyBackupCyclePtrType PolicyBackupCycleArgs

func PolicyBackupCyclePtr(v *PolicyBackupCycleArgs) PolicyBackupCyclePtrInput {
	return (*policyBackupCyclePtrType)(v)
}

func (*policyBackupCyclePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyBackupCycle)(nil)).Elem()
}

func (i *policyBackupCyclePtrType) ToPolicyBackupCyclePtrOutput() PolicyBackupCyclePtrOutput {
	return i.ToPolicyBackupCyclePtrOutputWithContext(context.Background())
}

func (i *policyBackupCyclePtrType) ToPolicyBackupCyclePtrOutputWithContext(ctx context.Context) PolicyBackupCyclePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyBackupCyclePtrOutput)
}

type PolicyBackupCycleOutput struct{ *pulumi.OutputState }

func (PolicyBackupCycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyBackupCycle)(nil)).Elem()
}

func (o PolicyBackupCycleOutput) ToPolicyBackupCycleOutput() PolicyBackupCycleOutput {
	return o
}

func (o PolicyBackupCycleOutput) ToPolicyBackupCycleOutputWithContext(ctx context.Context) PolicyBackupCycleOutput {
	return o
}

func (o PolicyBackupCycleOutput) ToPolicyBackupCyclePtrOutput() PolicyBackupCyclePtrOutput {
	return o.ToPolicyBackupCyclePtrOutputWithContext(context.Background())
}

func (o PolicyBackupCycleOutput) ToPolicyBackupCyclePtrOutputWithContext(ctx context.Context) PolicyBackupCyclePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyBackupCycle) *PolicyBackupCycle {
		return &v
	}).(PolicyBackupCyclePtrOutput)
}

// Specifies the weekly backup day of backup schedule. It supports seven days a week (MO, TU,
// WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without spaces, between date and date during the
// configuration.
func (o PolicyBackupCycleOutput) Days() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyBackupCycle) *string { return v.Days }).(pulumi.StringPtrOutput)
}

// Specifies the backup time. Automated backups will be triggered at the backup
// time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
// cannot be repeated. In the replication policy, you are advised to set one time point for one day.
//
// <a name="cbrPolicyLongTermRetention"></a>
// The `longTermRetention` block supports:
func (o PolicyBackupCycleOutput) ExecutionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PolicyBackupCycle) []string { return v.ExecutionTimes }).(pulumi.StringArrayOutput)
}

// Specifies the interval (in days) of backup schedule. The value range is `1` to `30`. This
// parameter and `days` are alternative.
func (o PolicyBackupCycleOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyBackupCycle) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

type PolicyBackupCyclePtrOutput struct{ *pulumi.OutputState }

func (PolicyBackupCyclePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyBackupCycle)(nil)).Elem()
}

func (o PolicyBackupCyclePtrOutput) ToPolicyBackupCyclePtrOutput() PolicyBackupCyclePtrOutput {
	return o
}

func (o PolicyBackupCyclePtrOutput) ToPolicyBackupCyclePtrOutputWithContext(ctx context.Context) PolicyBackupCyclePtrOutput {
	return o
}

func (o PolicyBackupCyclePtrOutput) Elem() PolicyBackupCycleOutput {
	return o.ApplyT(func(v *PolicyBackupCycle) PolicyBackupCycle {
		if v != nil {
			return *v
		}
		var ret PolicyBackupCycle
		return ret
	}).(PolicyBackupCycleOutput)
}

// Specifies the weekly backup day of backup schedule. It supports seven days a week (MO, TU,
// WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without spaces, between date and date during the
// configuration.
func (o PolicyBackupCyclePtrOutput) Days() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyBackupCycle) *string {
		if v == nil {
			return nil
		}
		return v.Days
	}).(pulumi.StringPtrOutput)
}

// Specifies the backup time. Automated backups will be triggered at the backup
// time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
// cannot be repeated. In the replication policy, you are advised to set one time point for one day.
//
// <a name="cbrPolicyLongTermRetention"></a>
// The `longTermRetention` block supports:
func (o PolicyBackupCyclePtrOutput) ExecutionTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyBackupCycle) []string {
		if v == nil {
			return nil
		}
		return v.ExecutionTimes
	}).(pulumi.StringArrayOutput)
}

// Specifies the interval (in days) of backup schedule. The value range is `1` to `30`. This
// parameter and `days` are alternative.
func (o PolicyBackupCyclePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyBackupCycle) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

type PolicyLongTermRetention struct {
	// Specifies the latest backup of each day is saved in the long term.
	Daily *int `pulumi:"daily"`
	// How often (after how many incremental backups) a full backup is performed.
	FullBackupInterval *int `pulumi:"fullBackupInterval"`
	// Specifies the latest backup of each month is saved in the long term.
	Monthly *int `pulumi:"monthly"`
	// Specifies the latest backup of each week is saved in the long term.
	Weekly *int `pulumi:"weekly"`
	// Specifies the latest backup of each year is saved in the long term.
	//
	// > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
	// manually deleted on the web console.
	Yearly *int `pulumi:"yearly"`
}

// PolicyLongTermRetentionInput is an input type that accepts PolicyLongTermRetentionArgs and PolicyLongTermRetentionOutput values.
// You can construct a concrete instance of `PolicyLongTermRetentionInput` via:
//
//	PolicyLongTermRetentionArgs{...}
type PolicyLongTermRetentionInput interface {
	pulumi.Input

	ToPolicyLongTermRetentionOutput() PolicyLongTermRetentionOutput
	ToPolicyLongTermRetentionOutputWithContext(context.Context) PolicyLongTermRetentionOutput
}

type PolicyLongTermRetentionArgs struct {
	// Specifies the latest backup of each day is saved in the long term.
	Daily pulumi.IntPtrInput `pulumi:"daily"`
	// How often (after how many incremental backups) a full backup is performed.
	FullBackupInterval pulumi.IntPtrInput `pulumi:"fullBackupInterval"`
	// Specifies the latest backup of each month is saved in the long term.
	Monthly pulumi.IntPtrInput `pulumi:"monthly"`
	// Specifies the latest backup of each week is saved in the long term.
	Weekly pulumi.IntPtrInput `pulumi:"weekly"`
	// Specifies the latest backup of each year is saved in the long term.
	//
	// > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
	// manually deleted on the web console.
	Yearly pulumi.IntPtrInput `pulumi:"yearly"`
}

func (PolicyLongTermRetentionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyLongTermRetention)(nil)).Elem()
}

func (i PolicyLongTermRetentionArgs) ToPolicyLongTermRetentionOutput() PolicyLongTermRetentionOutput {
	return i.ToPolicyLongTermRetentionOutputWithContext(context.Background())
}

func (i PolicyLongTermRetentionArgs) ToPolicyLongTermRetentionOutputWithContext(ctx context.Context) PolicyLongTermRetentionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyLongTermRetentionOutput)
}

func (i PolicyLongTermRetentionArgs) ToPolicyLongTermRetentionPtrOutput() PolicyLongTermRetentionPtrOutput {
	return i.ToPolicyLongTermRetentionPtrOutputWithContext(context.Background())
}

func (i PolicyLongTermRetentionArgs) ToPolicyLongTermRetentionPtrOutputWithContext(ctx context.Context) PolicyLongTermRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyLongTermRetentionOutput).ToPolicyLongTermRetentionPtrOutputWithContext(ctx)
}

// PolicyLongTermRetentionPtrInput is an input type that accepts PolicyLongTermRetentionArgs, PolicyLongTermRetentionPtr and PolicyLongTermRetentionPtrOutput values.
// You can construct a concrete instance of `PolicyLongTermRetentionPtrInput` via:
//
//	        PolicyLongTermRetentionArgs{...}
//
//	or:
//
//	        nil
type PolicyLongTermRetentionPtrInput interface {
	pulumi.Input

	ToPolicyLongTermRetentionPtrOutput() PolicyLongTermRetentionPtrOutput
	ToPolicyLongTermRetentionPtrOutputWithContext(context.Context) PolicyLongTermRetentionPtrOutput
}

type policyLongTermRetentionPtrType PolicyLongTermRetentionArgs

func PolicyLongTermRetentionPtr(v *PolicyLongTermRetentionArgs) PolicyLongTermRetentionPtrInput {
	return (*policyLongTermRetentionPtrType)(v)
}

func (*policyLongTermRetentionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyLongTermRetention)(nil)).Elem()
}

func (i *policyLongTermRetentionPtrType) ToPolicyLongTermRetentionPtrOutput() PolicyLongTermRetentionPtrOutput {
	return i.ToPolicyLongTermRetentionPtrOutputWithContext(context.Background())
}

func (i *policyLongTermRetentionPtrType) ToPolicyLongTermRetentionPtrOutputWithContext(ctx context.Context) PolicyLongTermRetentionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyLongTermRetentionPtrOutput)
}

type PolicyLongTermRetentionOutput struct{ *pulumi.OutputState }

func (PolicyLongTermRetentionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyLongTermRetention)(nil)).Elem()
}

func (o PolicyLongTermRetentionOutput) ToPolicyLongTermRetentionOutput() PolicyLongTermRetentionOutput {
	return o
}

func (o PolicyLongTermRetentionOutput) ToPolicyLongTermRetentionOutputWithContext(ctx context.Context) PolicyLongTermRetentionOutput {
	return o
}

func (o PolicyLongTermRetentionOutput) ToPolicyLongTermRetentionPtrOutput() PolicyLongTermRetentionPtrOutput {
	return o.ToPolicyLongTermRetentionPtrOutputWithContext(context.Background())
}

func (o PolicyLongTermRetentionOutput) ToPolicyLongTermRetentionPtrOutputWithContext(ctx context.Context) PolicyLongTermRetentionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyLongTermRetention) *PolicyLongTermRetention {
		return &v
	}).(PolicyLongTermRetentionPtrOutput)
}

// Specifies the latest backup of each day is saved in the long term.
func (o PolicyLongTermRetentionOutput) Daily() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyLongTermRetention) *int { return v.Daily }).(pulumi.IntPtrOutput)
}

// How often (after how many incremental backups) a full backup is performed.
func (o PolicyLongTermRetentionOutput) FullBackupInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyLongTermRetention) *int { return v.FullBackupInterval }).(pulumi.IntPtrOutput)
}

// Specifies the latest backup of each month is saved in the long term.
func (o PolicyLongTermRetentionOutput) Monthly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyLongTermRetention) *int { return v.Monthly }).(pulumi.IntPtrOutput)
}

// Specifies the latest backup of each week is saved in the long term.
func (o PolicyLongTermRetentionOutput) Weekly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyLongTermRetention) *int { return v.Weekly }).(pulumi.IntPtrOutput)
}

// Specifies the latest backup of each year is saved in the long term.
//
// > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
// manually deleted on the web console.
func (o PolicyLongTermRetentionOutput) Yearly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyLongTermRetention) *int { return v.Yearly }).(pulumi.IntPtrOutput)
}

type PolicyLongTermRetentionPtrOutput struct{ *pulumi.OutputState }

func (PolicyLongTermRetentionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyLongTermRetention)(nil)).Elem()
}

func (o PolicyLongTermRetentionPtrOutput) ToPolicyLongTermRetentionPtrOutput() PolicyLongTermRetentionPtrOutput {
	return o
}

func (o PolicyLongTermRetentionPtrOutput) ToPolicyLongTermRetentionPtrOutputWithContext(ctx context.Context) PolicyLongTermRetentionPtrOutput {
	return o
}

func (o PolicyLongTermRetentionPtrOutput) Elem() PolicyLongTermRetentionOutput {
	return o.ApplyT(func(v *PolicyLongTermRetention) PolicyLongTermRetention {
		if v != nil {
			return *v
		}
		var ret PolicyLongTermRetention
		return ret
	}).(PolicyLongTermRetentionOutput)
}

// Specifies the latest backup of each day is saved in the long term.
func (o PolicyLongTermRetentionPtrOutput) Daily() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyLongTermRetention) *int {
		if v == nil {
			return nil
		}
		return v.Daily
	}).(pulumi.IntPtrOutput)
}

// How often (after how many incremental backups) a full backup is performed.
func (o PolicyLongTermRetentionPtrOutput) FullBackupInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyLongTermRetention) *int {
		if v == nil {
			return nil
		}
		return v.FullBackupInterval
	}).(pulumi.IntPtrOutput)
}

// Specifies the latest backup of each month is saved in the long term.
func (o PolicyLongTermRetentionPtrOutput) Monthly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyLongTermRetention) *int {
		if v == nil {
			return nil
		}
		return v.Monthly
	}).(pulumi.IntPtrOutput)
}

// Specifies the latest backup of each week is saved in the long term.
func (o PolicyLongTermRetentionPtrOutput) Weekly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyLongTermRetention) *int {
		if v == nil {
			return nil
		}
		return v.Weekly
	}).(pulumi.IntPtrOutput)
}

// Specifies the latest backup of each year is saved in the long term.
//
// > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
// manually deleted on the web console.
func (o PolicyLongTermRetentionPtrOutput) Yearly() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyLongTermRetention) *int {
		if v == nil {
			return nil
		}
		return v.Yearly
	}).(pulumi.IntPtrOutput)
}

type VaultPolicy struct {
	// The ID of destination vault to which the replication policy will associated.
	DestinationVaultId *string `pulumi:"destinationVaultId"`
	// A resource ID in UUID format.
	Id string `pulumi:"id"`
}

// VaultPolicyInput is an input type that accepts VaultPolicyArgs and VaultPolicyOutput values.
// You can construct a concrete instance of `VaultPolicyInput` via:
//
//	VaultPolicyArgs{...}
type VaultPolicyInput interface {
	pulumi.Input

	ToVaultPolicyOutput() VaultPolicyOutput
	ToVaultPolicyOutputWithContext(context.Context) VaultPolicyOutput
}

type VaultPolicyArgs struct {
	// The ID of destination vault to which the replication policy will associated.
	DestinationVaultId pulumi.StringPtrInput `pulumi:"destinationVaultId"`
	// A resource ID in UUID format.
	Id pulumi.StringInput `pulumi:"id"`
}

func (VaultPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultPolicy)(nil)).Elem()
}

func (i VaultPolicyArgs) ToVaultPolicyOutput() VaultPolicyOutput {
	return i.ToVaultPolicyOutputWithContext(context.Background())
}

func (i VaultPolicyArgs) ToVaultPolicyOutputWithContext(ctx context.Context) VaultPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultPolicyOutput)
}

// VaultPolicyArrayInput is an input type that accepts VaultPolicyArray and VaultPolicyArrayOutput values.
// You can construct a concrete instance of `VaultPolicyArrayInput` via:
//
//	VaultPolicyArray{ VaultPolicyArgs{...} }
type VaultPolicyArrayInput interface {
	pulumi.Input

	ToVaultPolicyArrayOutput() VaultPolicyArrayOutput
	ToVaultPolicyArrayOutputWithContext(context.Context) VaultPolicyArrayOutput
}

type VaultPolicyArray []VaultPolicyInput

func (VaultPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultPolicy)(nil)).Elem()
}

func (i VaultPolicyArray) ToVaultPolicyArrayOutput() VaultPolicyArrayOutput {
	return i.ToVaultPolicyArrayOutputWithContext(context.Background())
}

func (i VaultPolicyArray) ToVaultPolicyArrayOutputWithContext(ctx context.Context) VaultPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultPolicyArrayOutput)
}

type VaultPolicyOutput struct{ *pulumi.OutputState }

func (VaultPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultPolicy)(nil)).Elem()
}

func (o VaultPolicyOutput) ToVaultPolicyOutput() VaultPolicyOutput {
	return o
}

func (o VaultPolicyOutput) ToVaultPolicyOutputWithContext(ctx context.Context) VaultPolicyOutput {
	return o
}

// The ID of destination vault to which the replication policy will associated.
func (o VaultPolicyOutput) DestinationVaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultPolicy) *string { return v.DestinationVaultId }).(pulumi.StringPtrOutput)
}

// A resource ID in UUID format.
func (o VaultPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v VaultPolicy) string { return v.Id }).(pulumi.StringOutput)
}

type VaultPolicyArrayOutput struct{ *pulumi.OutputState }

func (VaultPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultPolicy)(nil)).Elem()
}

func (o VaultPolicyArrayOutput) ToVaultPolicyArrayOutput() VaultPolicyArrayOutput {
	return o
}

func (o VaultPolicyArrayOutput) ToVaultPolicyArrayOutputWithContext(ctx context.Context) VaultPolicyArrayOutput {
	return o
}

func (o VaultPolicyArrayOutput) Index(i pulumi.IntInput) VaultPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultPolicy {
		return vs[0].([]VaultPolicy)[vs[1].(int)]
	}).(VaultPolicyOutput)
}

type VaultResource struct {
	// Specifies the array of disk IDs which will be excluded in the backup.
	// Only **server** vault support this parameter.
	Excludes []string `pulumi:"excludes"`
	// Specifies the array of disk or SFS file system IDs which will be included in the backup.
	// Only **disk** and **turbo** vault support this parameter.
	Includes []string `pulumi:"includes"`
	// Specifies the ID of the ECS instance to be backed up.
	ServerId *string `pulumi:"serverId"`
}

// VaultResourceInput is an input type that accepts VaultResourceArgs and VaultResourceOutput values.
// You can construct a concrete instance of `VaultResourceInput` via:
//
//	VaultResourceArgs{...}
type VaultResourceInput interface {
	pulumi.Input

	ToVaultResourceOutput() VaultResourceOutput
	ToVaultResourceOutputWithContext(context.Context) VaultResourceOutput
}

type VaultResourceArgs struct {
	// Specifies the array of disk IDs which will be excluded in the backup.
	// Only **server** vault support this parameter.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// Specifies the array of disk or SFS file system IDs which will be included in the backup.
	// Only **disk** and **turbo** vault support this parameter.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
	// Specifies the ID of the ECS instance to be backed up.
	ServerId pulumi.StringPtrInput `pulumi:"serverId"`
}

func (VaultResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultResource)(nil)).Elem()
}

func (i VaultResourceArgs) ToVaultResourceOutput() VaultResourceOutput {
	return i.ToVaultResourceOutputWithContext(context.Background())
}

func (i VaultResourceArgs) ToVaultResourceOutputWithContext(ctx context.Context) VaultResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultResourceOutput)
}

// VaultResourceArrayInput is an input type that accepts VaultResourceArray and VaultResourceArrayOutput values.
// You can construct a concrete instance of `VaultResourceArrayInput` via:
//
//	VaultResourceArray{ VaultResourceArgs{...} }
type VaultResourceArrayInput interface {
	pulumi.Input

	ToVaultResourceArrayOutput() VaultResourceArrayOutput
	ToVaultResourceArrayOutputWithContext(context.Context) VaultResourceArrayOutput
}

type VaultResourceArray []VaultResourceInput

func (VaultResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultResource)(nil)).Elem()
}

func (i VaultResourceArray) ToVaultResourceArrayOutput() VaultResourceArrayOutput {
	return i.ToVaultResourceArrayOutputWithContext(context.Background())
}

func (i VaultResourceArray) ToVaultResourceArrayOutputWithContext(ctx context.Context) VaultResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultResourceArrayOutput)
}

type VaultResourceOutput struct{ *pulumi.OutputState }

func (VaultResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VaultResource)(nil)).Elem()
}

func (o VaultResourceOutput) ToVaultResourceOutput() VaultResourceOutput {
	return o
}

func (o VaultResourceOutput) ToVaultResourceOutputWithContext(ctx context.Context) VaultResourceOutput {
	return o
}

// Specifies the array of disk IDs which will be excluded in the backup.
// Only **server** vault support this parameter.
func (o VaultResourceOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultResource) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// Specifies the array of disk or SFS file system IDs which will be included in the backup.
// Only **disk** and **turbo** vault support this parameter.
func (o VaultResourceOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VaultResource) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

// Specifies the ID of the ECS instance to be backed up.
func (o VaultResourceOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VaultResource) *string { return v.ServerId }).(pulumi.StringPtrOutput)
}

type VaultResourceArrayOutput struct{ *pulumi.OutputState }

func (VaultResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VaultResource)(nil)).Elem()
}

func (o VaultResourceArrayOutput) ToVaultResourceArrayOutput() VaultResourceArrayOutput {
	return o
}

func (o VaultResourceArrayOutput) ToVaultResourceArrayOutputWithContext(ctx context.Context) VaultResourceArrayOutput {
	return o
}

func (o VaultResourceArrayOutput) Index(i pulumi.IntInput) VaultResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VaultResource {
		return vs[0].([]VaultResource)[vs[1].(int)]
	}).(VaultResourceOutput)
}

type GetVaultsVault struct {
	// The allocated capacity of the vault, in GB.
	Allocated float64 `pulumi:"allocated"`
	// Whether automatic association is supported.
	AutoBind bool `pulumi:"autoBind"`
	// Specifies whether to enable automatic expansion of the backup protection
	// type vault. Default to **false**.
	AutoExpandEnabled bool `pulumi:"autoExpandEnabled"`
	// The rules for automatic association.
	BindRules map[string]string `pulumi:"bindRules"`
	// Specifies the backup specifications.
	// The value is crashConsistent by default (crash consistent backup).
	//
	// Only server type vaults support application consistent.
	ConsistentLevel string `pulumi:"consistentLevel"`
	// Specifies a unique ID in UUID format of enterprise project.
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	// The vault ID in UUID format.
	Id string `pulumi:"id"`
	// Specifies a unique name of the CBR vault. This parameter can contain a maximum of 64
	// characters, which may consist of letters, digits, underscores(_) and hyphens (-).
	Name string `pulumi:"name"`
	// Specifies a policy to associate with the CBR vault.
	PolicyId string `pulumi:"policyId"`
	// Specifies the protection type of the CBR vault.
	// The valid value is **backup**.
	ProtectionType string `pulumi:"protectionType"`
	// An array of one or more resources to attach to the CBR vault.
	// The object structure is documented below.
	Resources []GetVaultsVaultResource `pulumi:"resources"`
	// Specifies the vault sapacity, in GB. The valid value range is `1` to `10,485,760`.
	Size int `pulumi:"size"`
	// The specification code.
	SpecCode string `pulumi:"specCode"`
	// Specifies the CBR vault status, including **available**, **lock**, **frozen** and **error**.
	Status string `pulumi:"status"`
	// The name of the bucket for the vault.
	Storage string `pulumi:"storage"`
	// The key/value pairs to associate with the vault.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the object type of the CBR vault. The vaild values are as follows:
	// + **server** (Cloud Servers)
	// + **disk** (EVS Disks)
	// + **turbo** (SFS Turbo file systems)
	Type string `pulumi:"type"`
	// The used capacity, in GB.
	Used float64 `pulumi:"used"`
}

// GetVaultsVaultInput is an input type that accepts GetVaultsVaultArgs and GetVaultsVaultOutput values.
// You can construct a concrete instance of `GetVaultsVaultInput` via:
//
//	GetVaultsVaultArgs{...}
type GetVaultsVaultInput interface {
	pulumi.Input

	ToGetVaultsVaultOutput() GetVaultsVaultOutput
	ToGetVaultsVaultOutputWithContext(context.Context) GetVaultsVaultOutput
}

type GetVaultsVaultArgs struct {
	// The allocated capacity of the vault, in GB.
	Allocated pulumi.Float64Input `pulumi:"allocated"`
	// Whether automatic association is supported.
	AutoBind pulumi.BoolInput `pulumi:"autoBind"`
	// Specifies whether to enable automatic expansion of the backup protection
	// type vault. Default to **false**.
	AutoExpandEnabled pulumi.BoolInput `pulumi:"autoExpandEnabled"`
	// The rules for automatic association.
	BindRules pulumi.StringMapInput `pulumi:"bindRules"`
	// Specifies the backup specifications.
	// The value is crashConsistent by default (crash consistent backup).
	//
	// Only server type vaults support application consistent.
	ConsistentLevel pulumi.StringInput `pulumi:"consistentLevel"`
	// Specifies a unique ID in UUID format of enterprise project.
	EnterpriseProjectId pulumi.StringInput `pulumi:"enterpriseProjectId"`
	// The vault ID in UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies a unique name of the CBR vault. This parameter can contain a maximum of 64
	// characters, which may consist of letters, digits, underscores(_) and hyphens (-).
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies a policy to associate with the CBR vault.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// Specifies the protection type of the CBR vault.
	// The valid value is **backup**.
	ProtectionType pulumi.StringInput `pulumi:"protectionType"`
	// An array of one or more resources to attach to the CBR vault.
	// The object structure is documented below.
	Resources GetVaultsVaultResourceArrayInput `pulumi:"resources"`
	// Specifies the vault sapacity, in GB. The valid value range is `1` to `10,485,760`.
	Size pulumi.IntInput `pulumi:"size"`
	// The specification code.
	SpecCode pulumi.StringInput `pulumi:"specCode"`
	// Specifies the CBR vault status, including **available**, **lock**, **frozen** and **error**.
	Status pulumi.StringInput `pulumi:"status"`
	// The name of the bucket for the vault.
	Storage pulumi.StringInput `pulumi:"storage"`
	// The key/value pairs to associate with the vault.
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// Specifies the object type of the CBR vault. The vaild values are as follows:
	// + **server** (Cloud Servers)
	// + **disk** (EVS Disks)
	// + **turbo** (SFS Turbo file systems)
	Type pulumi.StringInput `pulumi:"type"`
	// The used capacity, in GB.
	Used pulumi.Float64Input `pulumi:"used"`
}

func (GetVaultsVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultsVault)(nil)).Elem()
}

func (i GetVaultsVaultArgs) ToGetVaultsVaultOutput() GetVaultsVaultOutput {
	return i.ToGetVaultsVaultOutputWithContext(context.Background())
}

func (i GetVaultsVaultArgs) ToGetVaultsVaultOutputWithContext(ctx context.Context) GetVaultsVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVaultsVaultOutput)
}

// GetVaultsVaultArrayInput is an input type that accepts GetVaultsVaultArray and GetVaultsVaultArrayOutput values.
// You can construct a concrete instance of `GetVaultsVaultArrayInput` via:
//
//	GetVaultsVaultArray{ GetVaultsVaultArgs{...} }
type GetVaultsVaultArrayInput interface {
	pulumi.Input

	ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput
	ToGetVaultsVaultArrayOutputWithContext(context.Context) GetVaultsVaultArrayOutput
}

type GetVaultsVaultArray []GetVaultsVaultInput

func (GetVaultsVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVaultsVault)(nil)).Elem()
}

func (i GetVaultsVaultArray) ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput {
	return i.ToGetVaultsVaultArrayOutputWithContext(context.Background())
}

func (i GetVaultsVaultArray) ToGetVaultsVaultArrayOutputWithContext(ctx context.Context) GetVaultsVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVaultsVaultArrayOutput)
}

type GetVaultsVaultOutput struct{ *pulumi.OutputState }

func (GetVaultsVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultsVault)(nil)).Elem()
}

func (o GetVaultsVaultOutput) ToGetVaultsVaultOutput() GetVaultsVaultOutput {
	return o
}

func (o GetVaultsVaultOutput) ToGetVaultsVaultOutputWithContext(ctx context.Context) GetVaultsVaultOutput {
	return o
}

// The allocated capacity of the vault, in GB.
func (o GetVaultsVaultOutput) Allocated() pulumi.Float64Output {
	return o.ApplyT(func(v GetVaultsVault) float64 { return v.Allocated }).(pulumi.Float64Output)
}

// Whether automatic association is supported.
func (o GetVaultsVaultOutput) AutoBind() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.AutoBind }).(pulumi.BoolOutput)
}

// Specifies whether to enable automatic expansion of the backup protection
// type vault. Default to **false**.
func (o GetVaultsVaultOutput) AutoExpandEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVaultsVault) bool { return v.AutoExpandEnabled }).(pulumi.BoolOutput)
}

// The rules for automatic association.
func (o GetVaultsVaultOutput) BindRules() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVaultsVault) map[string]string { return v.BindRules }).(pulumi.StringMapOutput)
}

// Specifies the backup specifications.
// The value is crashConsistent by default (crash consistent backup).
//
// Only server type vaults support application consistent.
func (o GetVaultsVaultOutput) ConsistentLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.ConsistentLevel }).(pulumi.StringOutput)
}

// Specifies a unique ID in UUID format of enterprise project.
func (o GetVaultsVaultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The vault ID in UUID format.
func (o GetVaultsVaultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies a unique name of the CBR vault. This parameter can contain a maximum of 64
// characters, which may consist of letters, digits, underscores(_) and hyphens (-).
func (o GetVaultsVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies a policy to associate with the CBR vault.
func (o GetVaultsVaultOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.PolicyId }).(pulumi.StringOutput)
}

// Specifies the protection type of the CBR vault.
// The valid value is **backup**.
func (o GetVaultsVaultOutput) ProtectionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.ProtectionType }).(pulumi.StringOutput)
}

// An array of one or more resources to attach to the CBR vault.
// The object structure is documented below.
func (o GetVaultsVaultOutput) Resources() GetVaultsVaultResourceArrayOutput {
	return o.ApplyT(func(v GetVaultsVault) []GetVaultsVaultResource { return v.Resources }).(GetVaultsVaultResourceArrayOutput)
}

// Specifies the vault sapacity, in GB. The valid value range is `1` to `10,485,760`.
func (o GetVaultsVaultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetVaultsVault) int { return v.Size }).(pulumi.IntOutput)
}

// The specification code.
func (o GetVaultsVaultOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.SpecCode }).(pulumi.StringOutput)
}

// Specifies the CBR vault status, including **available**, **lock**, **frozen** and **error**.
func (o GetVaultsVaultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Status }).(pulumi.StringOutput)
}

// The name of the bucket for the vault.
func (o GetVaultsVaultOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Storage }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the vault.
func (o GetVaultsVaultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVaultsVault) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the object type of the CBR vault. The vaild values are as follows:
// + **server** (Cloud Servers)
// + **disk** (EVS Disks)
// + **turbo** (SFS Turbo file systems)
func (o GetVaultsVaultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVault) string { return v.Type }).(pulumi.StringOutput)
}

// The used capacity, in GB.
func (o GetVaultsVaultOutput) Used() pulumi.Float64Output {
	return o.ApplyT(func(v GetVaultsVault) float64 { return v.Used }).(pulumi.Float64Output)
}

type GetVaultsVaultArrayOutput struct{ *pulumi.OutputState }

func (GetVaultsVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVaultsVault)(nil)).Elem()
}

func (o GetVaultsVaultArrayOutput) ToGetVaultsVaultArrayOutput() GetVaultsVaultArrayOutput {
	return o
}

func (o GetVaultsVaultArrayOutput) ToGetVaultsVaultArrayOutputWithContext(ctx context.Context) GetVaultsVaultArrayOutput {
	return o
}

func (o GetVaultsVaultArrayOutput) Index(i pulumi.IntInput) GetVaultsVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVaultsVault {
		return vs[0].([]GetVaultsVault)[vs[1].(int)]
	}).(GetVaultsVaultOutput)
}

type GetVaultsVaultResource struct {
	// The array of disk IDs which will be excluded in the backup.
	Excludes []string `pulumi:"excludes"`
	// An array of disk or SFS file system IDs which will be included in the backup.
	Includes []string `pulumi:"includes"`
	// The ID of the ECS instance to be backed up.
	ServerId string `pulumi:"serverId"`
}

// GetVaultsVaultResourceInput is an input type that accepts GetVaultsVaultResourceArgs and GetVaultsVaultResourceOutput values.
// You can construct a concrete instance of `GetVaultsVaultResourceInput` via:
//
//	GetVaultsVaultResourceArgs{...}
type GetVaultsVaultResourceInput interface {
	pulumi.Input

	ToGetVaultsVaultResourceOutput() GetVaultsVaultResourceOutput
	ToGetVaultsVaultResourceOutputWithContext(context.Context) GetVaultsVaultResourceOutput
}

type GetVaultsVaultResourceArgs struct {
	// The array of disk IDs which will be excluded in the backup.
	Excludes pulumi.StringArrayInput `pulumi:"excludes"`
	// An array of disk or SFS file system IDs which will be included in the backup.
	Includes pulumi.StringArrayInput `pulumi:"includes"`
	// The ID of the ECS instance to be backed up.
	ServerId pulumi.StringInput `pulumi:"serverId"`
}

func (GetVaultsVaultResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultsVaultResource)(nil)).Elem()
}

func (i GetVaultsVaultResourceArgs) ToGetVaultsVaultResourceOutput() GetVaultsVaultResourceOutput {
	return i.ToGetVaultsVaultResourceOutputWithContext(context.Background())
}

func (i GetVaultsVaultResourceArgs) ToGetVaultsVaultResourceOutputWithContext(ctx context.Context) GetVaultsVaultResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVaultsVaultResourceOutput)
}

// GetVaultsVaultResourceArrayInput is an input type that accepts GetVaultsVaultResourceArray and GetVaultsVaultResourceArrayOutput values.
// You can construct a concrete instance of `GetVaultsVaultResourceArrayInput` via:
//
//	GetVaultsVaultResourceArray{ GetVaultsVaultResourceArgs{...} }
type GetVaultsVaultResourceArrayInput interface {
	pulumi.Input

	ToGetVaultsVaultResourceArrayOutput() GetVaultsVaultResourceArrayOutput
	ToGetVaultsVaultResourceArrayOutputWithContext(context.Context) GetVaultsVaultResourceArrayOutput
}

type GetVaultsVaultResourceArray []GetVaultsVaultResourceInput

func (GetVaultsVaultResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVaultsVaultResource)(nil)).Elem()
}

func (i GetVaultsVaultResourceArray) ToGetVaultsVaultResourceArrayOutput() GetVaultsVaultResourceArrayOutput {
	return i.ToGetVaultsVaultResourceArrayOutputWithContext(context.Background())
}

func (i GetVaultsVaultResourceArray) ToGetVaultsVaultResourceArrayOutputWithContext(ctx context.Context) GetVaultsVaultResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVaultsVaultResourceArrayOutput)
}

type GetVaultsVaultResourceOutput struct{ *pulumi.OutputState }

func (GetVaultsVaultResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVaultsVaultResource)(nil)).Elem()
}

func (o GetVaultsVaultResourceOutput) ToGetVaultsVaultResourceOutput() GetVaultsVaultResourceOutput {
	return o
}

func (o GetVaultsVaultResourceOutput) ToGetVaultsVaultResourceOutputWithContext(ctx context.Context) GetVaultsVaultResourceOutput {
	return o
}

// The array of disk IDs which will be excluded in the backup.
func (o GetVaultsVaultResourceOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVaultsVaultResource) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// An array of disk or SFS file system IDs which will be included in the backup.
func (o GetVaultsVaultResourceOutput) Includes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVaultsVaultResource) []string { return v.Includes }).(pulumi.StringArrayOutput)
}

// The ID of the ECS instance to be backed up.
func (o GetVaultsVaultResourceOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVaultsVaultResource) string { return v.ServerId }).(pulumi.StringOutput)
}

type GetVaultsVaultResourceArrayOutput struct{ *pulumi.OutputState }

func (GetVaultsVaultResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVaultsVaultResource)(nil)).Elem()
}

func (o GetVaultsVaultResourceArrayOutput) ToGetVaultsVaultResourceArrayOutput() GetVaultsVaultResourceArrayOutput {
	return o
}

func (o GetVaultsVaultResourceArrayOutput) ToGetVaultsVaultResourceArrayOutputWithContext(ctx context.Context) GetVaultsVaultResourceArrayOutput {
	return o
}

func (o GetVaultsVaultResourceArrayOutput) Index(i pulumi.IntInput) GetVaultsVaultResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVaultsVaultResource {
		return vs[0].([]GetVaultsVaultResource)[vs[1].(int)]
	}).(GetVaultsVaultResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBackupCycleInput)(nil)).Elem(), PolicyBackupCycleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyBackupCyclePtrInput)(nil)).Elem(), PolicyBackupCycleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyLongTermRetentionInput)(nil)).Elem(), PolicyLongTermRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyLongTermRetentionPtrInput)(nil)).Elem(), PolicyLongTermRetentionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultPolicyInput)(nil)).Elem(), VaultPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultPolicyArrayInput)(nil)).Elem(), VaultPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultResourceInput)(nil)).Elem(), VaultResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultResourceArrayInput)(nil)).Elem(), VaultResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVaultsVaultInput)(nil)).Elem(), GetVaultsVaultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVaultsVaultArrayInput)(nil)).Elem(), GetVaultsVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVaultsVaultResourceInput)(nil)).Elem(), GetVaultsVaultResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVaultsVaultResourceArrayInput)(nil)).Elem(), GetVaultsVaultResourceArray{})
	pulumi.RegisterOutputType(PolicyBackupCycleOutput{})
	pulumi.RegisterOutputType(PolicyBackupCyclePtrOutput{})
	pulumi.RegisterOutputType(PolicyLongTermRetentionOutput{})
	pulumi.RegisterOutputType(PolicyLongTermRetentionPtrOutput{})
	pulumi.RegisterOutputType(VaultPolicyOutput{})
	pulumi.RegisterOutputType(VaultPolicyArrayOutput{})
	pulumi.RegisterOutputType(VaultResourceOutput{})
	pulumi.RegisterOutputType(VaultResourceArrayOutput{})
	pulumi.RegisterOutputType(GetVaultsVaultOutput{})
	pulumi.RegisterOutputType(GetVaultsVaultArrayOutput{})
	pulumi.RegisterOutputType(GetVaultsVaultResourceOutput{})
	pulumi.RegisterOutputType(GetVaultsVaultResourceArrayOutput{})
}

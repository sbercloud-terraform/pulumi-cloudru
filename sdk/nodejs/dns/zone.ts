// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Dns/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * The description of the zone.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable DNSSEC for a public zone.
     */
    declare public readonly dnssec: pulumi.Output<string>;
    /**
     * Indicates the DNSSEC infos.
     */
    declare public /*out*/ readonly dnssecInfos: pulumi.Output<outputs.Dns.ZoneDnssecInfo[]>;
    /**
     * The email address of the administrator managing the zone.
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * The enterprise project ID of the zone.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * The list of the masters of the DNS server.
     */
    declare public /*out*/ readonly masters: pulumi.Output<string[]>;
    /**
     * The name of the zone.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The recursive resolution proxy mode for subdomains of the private zone.
     */
    declare public readonly proxyPattern: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly routers: pulumi.Output<outputs.Dns.ZoneRouter[] | undefined>;
    /**
     * The status of the zone.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * The key/value pairs to associate with the zone.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    /**
     * The time to live (TTL) of the zone.
     */
    declare public readonly ttl: pulumi.Output<number | undefined>;
    /**
     * The type of zone.
     */
    declare public readonly zoneType: pulumi.Output<string | undefined>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["dnssec"] = state?.dnssec;
            resourceInputs["dnssecInfos"] = state?.dnssecInfos;
            resourceInputs["email"] = state?.email;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["masters"] = state?.masters;
            resourceInputs["name"] = state?.name;
            resourceInputs["proxyPattern"] = state?.proxyPattern;
            resourceInputs["region"] = state?.region;
            resourceInputs["routers"] = state?.routers;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["zoneType"] = state?.zoneType;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["dnssec"] = args?.dnssec;
            resourceInputs["email"] = args?.email;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["name"] = args?.name;
            resourceInputs["proxyPattern"] = args?.proxyPattern;
            resourceInputs["region"] = args?.region;
            resourceInputs["routers"] = args?.routers;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["zoneType"] = args?.zoneType;
            resourceInputs["dnssecInfos"] = undefined /*out*/;
            resourceInputs["masters"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * The description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enable DNSSEC for a public zone.
     */
    dnssec?: pulumi.Input<string>;
    /**
     * Indicates the DNSSEC infos.
     */
    dnssecInfos?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneDnssecInfo>[]>;
    /**
     * The email address of the administrator managing the zone.
     */
    email?: pulumi.Input<string>;
    /**
     * The enterprise project ID of the zone.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The list of the masters of the DNS server.
     */
    masters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The recursive resolution proxy mode for subdomains of the private zone.
     */
    proxyPattern?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routers?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneRouter>[]>;
    /**
     * The status of the zone.
     */
    status?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the zone.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time to live (TTL) of the zone.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of zone.
     */
    zoneType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * The description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enable DNSSEC for a public zone.
     */
    dnssec?: pulumi.Input<string>;
    /**
     * The email address of the administrator managing the zone.
     */
    email?: pulumi.Input<string>;
    /**
     * The enterprise project ID of the zone.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The name of the zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The recursive resolution proxy mode for subdomains of the private zone.
     */
    proxyPattern?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routers?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneRouter>[]>;
    /**
     * The status of the zone.
     */
    status?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the zone.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time to live (TTL) of the zone.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of zone.
     */
    zoneType?: pulumi.Input<string>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DmsRocketmqTopic struct {
	pulumi.CustomResourceState

	// Specifies the list of associated brokers of the topic.
	Brokers    DmsRocketmqTopicBrokerArrayOutput `pulumi:"brokers"`
	InstanceId pulumi.StringOutput               `pulumi:"instanceId"`
	// Specifies the message type of the topic.
	MessageType pulumi.StringOutput `pulumi:"messageType"`
	// Specifies the name of the topic.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the permissions of the topic.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// Specifies the number of queues.
	QueueNum pulumi.IntOutput `pulumi:"queueNum"`
	// Specifies the queue info of the topic.
	Queues DmsRocketmqTopicQueueArrayOutput `pulumi:"queues"`
	Region pulumi.StringOutput              `pulumi:"region"`
	// Specifies the total number of read queues.
	TotalReadQueueNum pulumi.IntOutput `pulumi:"totalReadQueueNum"`
	// Specifies the total number of write queues.
	TotalWriteQueueNum pulumi.IntOutput `pulumi:"totalWriteQueueNum"`
}

// NewDmsRocketmqTopic registers a new resource with the given unique name, arguments, and options.
func NewDmsRocketmqTopic(ctx *pulumi.Context,
	name string, args *DmsRocketmqTopicArgs, opts ...pulumi.ResourceOption) (*DmsRocketmqTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsRocketmqTopic
	err := ctx.RegisterResource("cloudru:index/dmsRocketmqTopic:DmsRocketmqTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsRocketmqTopic gets an existing DmsRocketmqTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsRocketmqTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsRocketmqTopicState, opts ...pulumi.ResourceOption) (*DmsRocketmqTopic, error) {
	var resource DmsRocketmqTopic
	err := ctx.ReadResource("cloudru:index/dmsRocketmqTopic:DmsRocketmqTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsRocketmqTopic resources.
type dmsRocketmqTopicState struct {
	// Specifies the list of associated brokers of the topic.
	Brokers    []DmsRocketmqTopicBroker `pulumi:"brokers"`
	InstanceId *string                  `pulumi:"instanceId"`
	// Specifies the message type of the topic.
	MessageType *string `pulumi:"messageType"`
	// Specifies the name of the topic.
	Name *string `pulumi:"name"`
	// Specifies the permissions of the topic.
	Permission *string `pulumi:"permission"`
	// Specifies the number of queues.
	QueueNum *int `pulumi:"queueNum"`
	// Specifies the queue info of the topic.
	Queues []DmsRocketmqTopicQueue `pulumi:"queues"`
	Region *string                 `pulumi:"region"`
	// Specifies the total number of read queues.
	TotalReadQueueNum *int `pulumi:"totalReadQueueNum"`
	// Specifies the total number of write queues.
	TotalWriteQueueNum *int `pulumi:"totalWriteQueueNum"`
}

type DmsRocketmqTopicState struct {
	// Specifies the list of associated brokers of the topic.
	Brokers    DmsRocketmqTopicBrokerArrayInput
	InstanceId pulumi.StringPtrInput
	// Specifies the message type of the topic.
	MessageType pulumi.StringPtrInput
	// Specifies the name of the topic.
	Name pulumi.StringPtrInput
	// Specifies the permissions of the topic.
	Permission pulumi.StringPtrInput
	// Specifies the number of queues.
	QueueNum pulumi.IntPtrInput
	// Specifies the queue info of the topic.
	Queues DmsRocketmqTopicQueueArrayInput
	Region pulumi.StringPtrInput
	// Specifies the total number of read queues.
	TotalReadQueueNum pulumi.IntPtrInput
	// Specifies the total number of write queues.
	TotalWriteQueueNum pulumi.IntPtrInput
}

func (DmsRocketmqTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsRocketmqTopicState)(nil)).Elem()
}

type dmsRocketmqTopicArgs struct {
	// Specifies the list of associated brokers of the topic.
	Brokers    []DmsRocketmqTopicBroker `pulumi:"brokers"`
	InstanceId string                   `pulumi:"instanceId"`
	// Specifies the message type of the topic.
	MessageType *string `pulumi:"messageType"`
	// Specifies the name of the topic.
	Name *string `pulumi:"name"`
	// Specifies the permissions of the topic.
	Permission *string `pulumi:"permission"`
	// Specifies the number of queues.
	QueueNum *int `pulumi:"queueNum"`
	// Specifies the queue info of the topic.
	Queues []DmsRocketmqTopicQueue `pulumi:"queues"`
	Region *string                 `pulumi:"region"`
	// Specifies the total number of read queues.
	TotalReadQueueNum *int `pulumi:"totalReadQueueNum"`
	// Specifies the total number of write queues.
	TotalWriteQueueNum *int `pulumi:"totalWriteQueueNum"`
}

// The set of arguments for constructing a DmsRocketmqTopic resource.
type DmsRocketmqTopicArgs struct {
	// Specifies the list of associated brokers of the topic.
	Brokers    DmsRocketmqTopicBrokerArrayInput
	InstanceId pulumi.StringInput
	// Specifies the message type of the topic.
	MessageType pulumi.StringPtrInput
	// Specifies the name of the topic.
	Name pulumi.StringPtrInput
	// Specifies the permissions of the topic.
	Permission pulumi.StringPtrInput
	// Specifies the number of queues.
	QueueNum pulumi.IntPtrInput
	// Specifies the queue info of the topic.
	Queues DmsRocketmqTopicQueueArrayInput
	Region pulumi.StringPtrInput
	// Specifies the total number of read queues.
	TotalReadQueueNum pulumi.IntPtrInput
	// Specifies the total number of write queues.
	TotalWriteQueueNum pulumi.IntPtrInput
}

func (DmsRocketmqTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsRocketmqTopicArgs)(nil)).Elem()
}

type DmsRocketmqTopicInput interface {
	pulumi.Input

	ToDmsRocketmqTopicOutput() DmsRocketmqTopicOutput
	ToDmsRocketmqTopicOutputWithContext(ctx context.Context) DmsRocketmqTopicOutput
}

func (*DmsRocketmqTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsRocketmqTopic)(nil)).Elem()
}

func (i *DmsRocketmqTopic) ToDmsRocketmqTopicOutput() DmsRocketmqTopicOutput {
	return i.ToDmsRocketmqTopicOutputWithContext(context.Background())
}

func (i *DmsRocketmqTopic) ToDmsRocketmqTopicOutputWithContext(ctx context.Context) DmsRocketmqTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqTopicOutput)
}

// DmsRocketmqTopicArrayInput is an input type that accepts DmsRocketmqTopicArray and DmsRocketmqTopicArrayOutput values.
// You can construct a concrete instance of `DmsRocketmqTopicArrayInput` via:
//
//	DmsRocketmqTopicArray{ DmsRocketmqTopicArgs{...} }
type DmsRocketmqTopicArrayInput interface {
	pulumi.Input

	ToDmsRocketmqTopicArrayOutput() DmsRocketmqTopicArrayOutput
	ToDmsRocketmqTopicArrayOutputWithContext(context.Context) DmsRocketmqTopicArrayOutput
}

type DmsRocketmqTopicArray []DmsRocketmqTopicInput

func (DmsRocketmqTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsRocketmqTopic)(nil)).Elem()
}

func (i DmsRocketmqTopicArray) ToDmsRocketmqTopicArrayOutput() DmsRocketmqTopicArrayOutput {
	return i.ToDmsRocketmqTopicArrayOutputWithContext(context.Background())
}

func (i DmsRocketmqTopicArray) ToDmsRocketmqTopicArrayOutputWithContext(ctx context.Context) DmsRocketmqTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqTopicArrayOutput)
}

// DmsRocketmqTopicMapInput is an input type that accepts DmsRocketmqTopicMap and DmsRocketmqTopicMapOutput values.
// You can construct a concrete instance of `DmsRocketmqTopicMapInput` via:
//
//	DmsRocketmqTopicMap{ "key": DmsRocketmqTopicArgs{...} }
type DmsRocketmqTopicMapInput interface {
	pulumi.Input

	ToDmsRocketmqTopicMapOutput() DmsRocketmqTopicMapOutput
	ToDmsRocketmqTopicMapOutputWithContext(context.Context) DmsRocketmqTopicMapOutput
}

type DmsRocketmqTopicMap map[string]DmsRocketmqTopicInput

func (DmsRocketmqTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsRocketmqTopic)(nil)).Elem()
}

func (i DmsRocketmqTopicMap) ToDmsRocketmqTopicMapOutput() DmsRocketmqTopicMapOutput {
	return i.ToDmsRocketmqTopicMapOutputWithContext(context.Background())
}

func (i DmsRocketmqTopicMap) ToDmsRocketmqTopicMapOutputWithContext(ctx context.Context) DmsRocketmqTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqTopicMapOutput)
}

type DmsRocketmqTopicOutput struct{ *pulumi.OutputState }

func (DmsRocketmqTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsRocketmqTopic)(nil)).Elem()
}

func (o DmsRocketmqTopicOutput) ToDmsRocketmqTopicOutput() DmsRocketmqTopicOutput {
	return o
}

func (o DmsRocketmqTopicOutput) ToDmsRocketmqTopicOutputWithContext(ctx context.Context) DmsRocketmqTopicOutput {
	return o
}

// Specifies the list of associated brokers of the topic.
func (o DmsRocketmqTopicOutput) Brokers() DmsRocketmqTopicBrokerArrayOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) DmsRocketmqTopicBrokerArrayOutput { return v.Brokers }).(DmsRocketmqTopicBrokerArrayOutput)
}

func (o DmsRocketmqTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the message type of the topic.
func (o DmsRocketmqTopicOutput) MessageType() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) pulumi.StringOutput { return v.MessageType }).(pulumi.StringOutput)
}

// Specifies the name of the topic.
func (o DmsRocketmqTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the permissions of the topic.
func (o DmsRocketmqTopicOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// Specifies the number of queues.
func (o DmsRocketmqTopicOutput) QueueNum() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) pulumi.IntOutput { return v.QueueNum }).(pulumi.IntOutput)
}

// Specifies the queue info of the topic.
func (o DmsRocketmqTopicOutput) Queues() DmsRocketmqTopicQueueArrayOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) DmsRocketmqTopicQueueArrayOutput { return v.Queues }).(DmsRocketmqTopicQueueArrayOutput)
}

func (o DmsRocketmqTopicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the total number of read queues.
func (o DmsRocketmqTopicOutput) TotalReadQueueNum() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) pulumi.IntOutput { return v.TotalReadQueueNum }).(pulumi.IntOutput)
}

// Specifies the total number of write queues.
func (o DmsRocketmqTopicOutput) TotalWriteQueueNum() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsRocketmqTopic) pulumi.IntOutput { return v.TotalWriteQueueNum }).(pulumi.IntOutput)
}

type DmsRocketmqTopicArrayOutput struct{ *pulumi.OutputState }

func (DmsRocketmqTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsRocketmqTopic)(nil)).Elem()
}

func (o DmsRocketmqTopicArrayOutput) ToDmsRocketmqTopicArrayOutput() DmsRocketmqTopicArrayOutput {
	return o
}

func (o DmsRocketmqTopicArrayOutput) ToDmsRocketmqTopicArrayOutputWithContext(ctx context.Context) DmsRocketmqTopicArrayOutput {
	return o
}

func (o DmsRocketmqTopicArrayOutput) Index(i pulumi.IntInput) DmsRocketmqTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsRocketmqTopic {
		return vs[0].([]*DmsRocketmqTopic)[vs[1].(int)]
	}).(DmsRocketmqTopicOutput)
}

type DmsRocketmqTopicMapOutput struct{ *pulumi.OutputState }

func (DmsRocketmqTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsRocketmqTopic)(nil)).Elem()
}

func (o DmsRocketmqTopicMapOutput) ToDmsRocketmqTopicMapOutput() DmsRocketmqTopicMapOutput {
	return o
}

func (o DmsRocketmqTopicMapOutput) ToDmsRocketmqTopicMapOutputWithContext(ctx context.Context) DmsRocketmqTopicMapOutput {
	return o
}

func (o DmsRocketmqTopicMapOutput) MapIndex(k pulumi.StringInput) DmsRocketmqTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsRocketmqTopic {
		return vs[0].(map[string]*DmsRocketmqTopic)[vs[1].(string)]
	}).(DmsRocketmqTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqTopicInput)(nil)).Elem(), &DmsRocketmqTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqTopicArrayInput)(nil)).Elem(), DmsRocketmqTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqTopicMapInput)(nil)).Elem(), DmsRocketmqTopicMap{})
	pulumi.RegisterOutputType(DmsRocketmqTopicOutput{})
	pulumi.RegisterOutputType(DmsRocketmqTopicArrayOutput{})
	pulumi.RegisterOutputType(DmsRocketmqTopicMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages an ELB L7 Rule resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const l7policyId = config.requireObject<any>("l7policyId");
 * const l7rule1 = new sbercloud.ElbL7rule("l7rule_1", {
 *     l7policyId: l7policyId,
 *     type: "PATH",
 *     compareType: "EQUAL_TO",
 *     value: "/api",
 * });
 * ```
 *
 * ## Import
 *
 * ELB L7 rule can be imported using the L7 policy ID and L7 rule ID separated by a slash, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:index/elbL7rule:ElbL7rule rule_1 e0bd694a-abbe-450e-b329-0931fd1cc5eb/4086b0c9-b18c-4d1c-b6b8-4c56c3ad2a9e
 * ```
 */
export class ElbL7rule extends pulumi.CustomResource {
    /**
     * Get an existing ElbL7rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElbL7ruleState, opts?: pulumi.CustomResourceOptions): ElbL7rule {
        return new ElbL7rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/elbL7rule:ElbL7rule';

    /**
     * Returns true if the given object is an instance of ElbL7rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElbL7rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElbL7rule.__pulumiType;
    }

    /**
     * The comparison type for the L7 rule - can either be STARTS_WITH, EQUAL_TO or REGEX
     */
    declare public readonly compareType: pulumi.Output<string>;
    declare public readonly conditions: pulumi.Output<outputs.ElbL7ruleCondition[]>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The ID of the L7 Policy. Changing this creates a new L7 Rule.
     */
    declare public readonly l7policyId: pulumi.Output<string>;
    /**
     * The region in which to create the L7 Rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new L7 Rule.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The L7 Rule type - can either be HOST_NAME or PATH. Changing this creates a new
     * L7 Rule.
     */
    declare public readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The value to use for the comparison.
     */
    declare public readonly value: pulumi.Output<string>;

    /**
     * Create a ElbL7rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElbL7ruleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElbL7ruleArgs | ElbL7ruleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElbL7ruleState | undefined;
            resourceInputs["compareType"] = state?.compareType;
            resourceInputs["conditions"] = state?.conditions;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["l7policyId"] = state?.l7policyId;
            resourceInputs["region"] = state?.region;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["value"] = state?.value;
        } else {
            const args = argsOrState as ElbL7ruleArgs | undefined;
            if (args?.compareType === undefined && !opts.urn) {
                throw new Error("Missing required property 'compareType'");
            }
            if (args?.l7policyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'l7policyId'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["compareType"] = args?.compareType;
            resourceInputs["conditions"] = args?.conditions;
            resourceInputs["l7policyId"] = args?.l7policyId;
            resourceInputs["region"] = args?.region;
            resourceInputs["type"] = args?.type;
            resourceInputs["value"] = args?.value;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElbL7rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElbL7rule resources.
 */
export interface ElbL7ruleState {
    /**
     * The comparison type for the L7 rule - can either be STARTS_WITH, EQUAL_TO or REGEX
     */
    compareType?: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.ElbL7ruleCondition>[]>;
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the L7 Policy. Changing this creates a new L7 Rule.
     */
    l7policyId?: pulumi.Input<string>;
    /**
     * The region in which to create the L7 Rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new L7 Rule.
     */
    region?: pulumi.Input<string>;
    /**
     * The L7 Rule type - can either be HOST_NAME or PATH. Changing this creates a new
     * L7 Rule.
     */
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    /**
     * The value to use for the comparison.
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElbL7rule resource.
 */
export interface ElbL7ruleArgs {
    /**
     * The comparison type for the L7 rule - can either be STARTS_WITH, EQUAL_TO or REGEX
     */
    compareType: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.ElbL7ruleCondition>[]>;
    /**
     * The ID of the L7 Policy. Changing this creates a new L7 Rule.
     */
    l7policyId: pulumi.Input<string>;
    /**
     * The region in which to create the L7 Rule resource. If omitted, the
     * provider-level region will be used. Changing this creates a new L7 Rule.
     */
    region?: pulumi.Input<string>;
    /**
     * The L7 Rule type - can either be HOST_NAME or PATH. Changing this creates a new
     * L7 Rule.
     */
    type: pulumi.Input<string>;
    /**
     * The value to use for the comparison.
     */
    value?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a SWR repository resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const organizationName = config.requireObject<any>("organizationName");
 * const test = new sbercloud.SwrRepository("test", {
 *     organization: organizationName,
 *     name: "%s",
 *     description: "Test repository",
 *     category: "linux",
 * });
 * ```
 *
 * ## Import
 *
 * Repository can be imported using the organization name and repository name separated by a slash, e.g.:
 *
 * ```sh
 * $ pulumi import sbercloud:index/swrRepository:SwrRepository test org-name/repo-name
 * ```
 */
export class SwrRepository extends pulumi.CustomResource {
    /**
     * Get an existing SwrRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SwrRepositoryState, opts?: pulumi.CustomResourceOptions): SwrRepository {
        return new SwrRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/swrRepository:SwrRepository';

    /**
     * Returns true if the given object is an instance of SwrRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SwrRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SwrRepository.__pulumiType;
    }

    /**
     * Specifies the category of the repository.
     * The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
     */
    declare public readonly category: pulumi.Output<string | undefined>;
    /**
     * Specifies the description of the repository.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Intra-cluster image address for docker pull.
     */
    declare public /*out*/ readonly internalPath: pulumi.Output<string>;
    /**
     * Specifies whether the repository is public. Default is false.
     */
    declare public readonly isPublic: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the name of the repository. Changing this creates a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Number of image tags in a repository.
     */
    declare public /*out*/ readonly numImages: pulumi.Output<number>;
    /**
     * Specifies the name of the organization (namespace) the repository belongs.
     * Changing this creates a new resource.
     */
    declare public readonly organization: pulumi.Output<string>;
    /**
     * Image address for docker pull.
     */
    declare public /*out*/ readonly path: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Numeric ID of the repository
     */
    declare public /*out*/ readonly repositoryId: pulumi.Output<number>;
    /**
     * Repository size.
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;

    /**
     * Create a SwrRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SwrRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SwrRepositoryArgs | SwrRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SwrRepositoryState | undefined;
            resourceInputs["category"] = state?.category;
            resourceInputs["description"] = state?.description;
            resourceInputs["internalPath"] = state?.internalPath;
            resourceInputs["isPublic"] = state?.isPublic;
            resourceInputs["name"] = state?.name;
            resourceInputs["numImages"] = state?.numImages;
            resourceInputs["organization"] = state?.organization;
            resourceInputs["path"] = state?.path;
            resourceInputs["region"] = state?.region;
            resourceInputs["repositoryId"] = state?.repositoryId;
            resourceInputs["size"] = state?.size;
        } else {
            const args = argsOrState as SwrRepositoryArgs | undefined;
            if (args?.organization === undefined && !opts.urn) {
                throw new Error("Missing required property 'organization'");
            }
            resourceInputs["category"] = args?.category;
            resourceInputs["description"] = args?.description;
            resourceInputs["isPublic"] = args?.isPublic;
            resourceInputs["name"] = args?.name;
            resourceInputs["organization"] = args?.organization;
            resourceInputs["region"] = args?.region;
            resourceInputs["internalPath"] = undefined /*out*/;
            resourceInputs["numImages"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["repositoryId"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SwrRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SwrRepository resources.
 */
export interface SwrRepositoryState {
    /**
     * Specifies the category of the repository.
     * The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
     */
    category?: pulumi.Input<string>;
    /**
     * Specifies the description of the repository.
     */
    description?: pulumi.Input<string>;
    /**
     * Intra-cluster image address for docker pull.
     */
    internalPath?: pulumi.Input<string>;
    /**
     * Specifies whether the repository is public. Default is false.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the repository. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of image tags in a repository.
     */
    numImages?: pulumi.Input<number>;
    /**
     * Specifies the name of the organization (namespace) the repository belongs.
     * Changing this creates a new resource.
     */
    organization?: pulumi.Input<string>;
    /**
     * Image address for docker pull.
     */
    path?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Numeric ID of the repository
     */
    repositoryId?: pulumi.Input<number>;
    /**
     * Repository size.
     */
    size?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SwrRepository resource.
 */
export interface SwrRepositoryArgs {
    /**
     * Specifies the category of the repository.
     * The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
     */
    category?: pulumi.Input<string>;
    /**
     * Specifies the description of the repository.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether the repository is public. Default is false.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Specifies the name of the repository. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the name of the organization (namespace) the repository belongs.
     * Changing this creates a new resource.
     */
    organization: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource. If omitted, the
     * provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

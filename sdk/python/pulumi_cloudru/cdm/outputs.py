# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClusterInstance',
]

@pulumi.output_type
class ClusterInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manageIp":
            suggest = "manage_ip"
        elif key == "privateIp":
            suggest = "private_ip"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "trafficIp":
            suggest = "traffic_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None,
                 manage_ip: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 role: Optional[_builtins.str] = None,
                 traffic_ip: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Instance ID.
        :param _builtins.str manage_ip: Management IP address.
        :param _builtins.str name: Specifies cluster name. Changing this parameter will create a new resource.
        :param _builtins.str private_ip: Private IP.
        :param _builtins.str public_ip: Public IP.
        :param _builtins.str role: Instance role.
        :param _builtins.str traffic_ip: Traffic IP.
        :param _builtins.str type: Instance type.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if manage_ip is not None:
            pulumi.set(__self__, "manage_ip", manage_ip)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if traffic_ip is not None:
            pulumi.set(__self__, "traffic_ip", traffic_ip)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Instance ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="manageIp")
    def manage_ip(self) -> Optional[_builtins.str]:
        """
        Management IP address.
        """
        return pulumi.get(self, "manage_ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies cluster name. Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        Private IP.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        Public IP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def role(self) -> Optional[_builtins.str]:
        """
        Instance role.
        """
        return pulumi.get(self, "role")

    @_builtins.property
    @pulumi.getter(name="trafficIp")
    def traffic_ip(self) -> Optional[_builtins.str]:
        """
        Traffic IP.
        """
        return pulumi.get(self, "traffic_ip")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Instance type.
        """
        return pulumi.get(self, "type")



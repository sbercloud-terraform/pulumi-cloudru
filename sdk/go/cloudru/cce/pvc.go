// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Pvc struct {
	pulumi.CustomResourceState

	AccessModes       pulumi.StringArrayOutput `pulumi:"accessModes"`
	Annotations       pulumi.StringMapOutput   `pulumi:"annotations"`
	ClusterId         pulumi.StringOutput      `pulumi:"clusterId"`
	CreationTimestamp pulumi.StringOutput      `pulumi:"creationTimestamp"`
	Labels            pulumi.StringMapOutput   `pulumi:"labels"`
	Name              pulumi.StringOutput      `pulumi:"name"`
	Namespace         pulumi.StringOutput      `pulumi:"namespace"`
	Region            pulumi.StringOutput      `pulumi:"region"`
	Status            pulumi.StringOutput      `pulumi:"status"`
	Storage           pulumi.StringOutput      `pulumi:"storage"`
	StorageClassName  pulumi.StringOutput      `pulumi:"storageClassName"`
}

// NewPvc registers a new resource with the given unique name, arguments, and options.
func NewPvc(ctx *pulumi.Context,
	name string, args *PvcArgs, opts ...pulumi.ResourceOption) (*Pvc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessModes == nil {
		return nil, errors.New("invalid value for required argument 'AccessModes'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	if args.StorageClassName == nil {
		return nil, errors.New("invalid value for required argument 'StorageClassName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pvc
	err := ctx.RegisterResource("sbercloud:Cce/pvc:Pvc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPvc gets an existing Pvc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPvc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PvcState, opts ...pulumi.ResourceOption) (*Pvc, error) {
	var resource Pvc
	err := ctx.ReadResource("sbercloud:Cce/pvc:Pvc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pvc resources.
type pvcState struct {
	AccessModes       []string          `pulumi:"accessModes"`
	Annotations       map[string]string `pulumi:"annotations"`
	ClusterId         *string           `pulumi:"clusterId"`
	CreationTimestamp *string           `pulumi:"creationTimestamp"`
	Labels            map[string]string `pulumi:"labels"`
	Name              *string           `pulumi:"name"`
	Namespace         *string           `pulumi:"namespace"`
	Region            *string           `pulumi:"region"`
	Status            *string           `pulumi:"status"`
	Storage           *string           `pulumi:"storage"`
	StorageClassName  *string           `pulumi:"storageClassName"`
}

type PvcState struct {
	AccessModes       pulumi.StringArrayInput
	Annotations       pulumi.StringMapInput
	ClusterId         pulumi.StringPtrInput
	CreationTimestamp pulumi.StringPtrInput
	Labels            pulumi.StringMapInput
	Name              pulumi.StringPtrInput
	Namespace         pulumi.StringPtrInput
	Region            pulumi.StringPtrInput
	Status            pulumi.StringPtrInput
	Storage           pulumi.StringPtrInput
	StorageClassName  pulumi.StringPtrInput
}

func (PvcState) ElementType() reflect.Type {
	return reflect.TypeOf((*pvcState)(nil)).Elem()
}

type pvcArgs struct {
	AccessModes      []string          `pulumi:"accessModes"`
	Annotations      map[string]string `pulumi:"annotations"`
	ClusterId        string            `pulumi:"clusterId"`
	Labels           map[string]string `pulumi:"labels"`
	Name             *string           `pulumi:"name"`
	Namespace        string            `pulumi:"namespace"`
	Region           *string           `pulumi:"region"`
	Storage          string            `pulumi:"storage"`
	StorageClassName string            `pulumi:"storageClassName"`
}

// The set of arguments for constructing a Pvc resource.
type PvcArgs struct {
	AccessModes      pulumi.StringArrayInput
	Annotations      pulumi.StringMapInput
	ClusterId        pulumi.StringInput
	Labels           pulumi.StringMapInput
	Name             pulumi.StringPtrInput
	Namespace        pulumi.StringInput
	Region           pulumi.StringPtrInput
	Storage          pulumi.StringInput
	StorageClassName pulumi.StringInput
}

func (PvcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pvcArgs)(nil)).Elem()
}

type PvcInput interface {
	pulumi.Input

	ToPvcOutput() PvcOutput
	ToPvcOutputWithContext(ctx context.Context) PvcOutput
}

func (*Pvc) ElementType() reflect.Type {
	return reflect.TypeOf((**Pvc)(nil)).Elem()
}

func (i *Pvc) ToPvcOutput() PvcOutput {
	return i.ToPvcOutputWithContext(context.Background())
}

func (i *Pvc) ToPvcOutputWithContext(ctx context.Context) PvcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PvcOutput)
}

// PvcArrayInput is an input type that accepts PvcArray and PvcArrayOutput values.
// You can construct a concrete instance of `PvcArrayInput` via:
//
//	PvcArray{ PvcArgs{...} }
type PvcArrayInput interface {
	pulumi.Input

	ToPvcArrayOutput() PvcArrayOutput
	ToPvcArrayOutputWithContext(context.Context) PvcArrayOutput
}

type PvcArray []PvcInput

func (PvcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pvc)(nil)).Elem()
}

func (i PvcArray) ToPvcArrayOutput() PvcArrayOutput {
	return i.ToPvcArrayOutputWithContext(context.Background())
}

func (i PvcArray) ToPvcArrayOutputWithContext(ctx context.Context) PvcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PvcArrayOutput)
}

// PvcMapInput is an input type that accepts PvcMap and PvcMapOutput values.
// You can construct a concrete instance of `PvcMapInput` via:
//
//	PvcMap{ "key": PvcArgs{...} }
type PvcMapInput interface {
	pulumi.Input

	ToPvcMapOutput() PvcMapOutput
	ToPvcMapOutputWithContext(context.Context) PvcMapOutput
}

type PvcMap map[string]PvcInput

func (PvcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pvc)(nil)).Elem()
}

func (i PvcMap) ToPvcMapOutput() PvcMapOutput {
	return i.ToPvcMapOutputWithContext(context.Background())
}

func (i PvcMap) ToPvcMapOutputWithContext(ctx context.Context) PvcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PvcMapOutput)
}

type PvcOutput struct{ *pulumi.OutputState }

func (PvcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pvc)(nil)).Elem()
}

func (o PvcOutput) ToPvcOutput() PvcOutput {
	return o
}

func (o PvcOutput) ToPvcOutputWithContext(ctx context.Context) PvcOutput {
	return o
}

func (o PvcOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringArrayOutput { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o PvcOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

func (o PvcOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o PvcOutput) CreationTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.CreationTimestamp }).(pulumi.StringOutput)
}

func (o PvcOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

func (o PvcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PvcOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

func (o PvcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o PvcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PvcOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.Storage }).(pulumi.StringOutput)
}

func (o PvcOutput) StorageClassName() pulumi.StringOutput {
	return o.ApplyT(func(v *Pvc) pulumi.StringOutput { return v.StorageClassName }).(pulumi.StringOutput)
}

type PvcArrayOutput struct{ *pulumi.OutputState }

func (PvcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pvc)(nil)).Elem()
}

func (o PvcArrayOutput) ToPvcArrayOutput() PvcArrayOutput {
	return o
}

func (o PvcArrayOutput) ToPvcArrayOutputWithContext(ctx context.Context) PvcArrayOutput {
	return o
}

func (o PvcArrayOutput) Index(i pulumi.IntInput) PvcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pvc {
		return vs[0].([]*Pvc)[vs[1].(int)]
	}).(PvcOutput)
}

type PvcMapOutput struct{ *pulumi.OutputState }

func (PvcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pvc)(nil)).Elem()
}

func (o PvcMapOutput) ToPvcMapOutput() PvcMapOutput {
	return o
}

func (o PvcMapOutput) ToPvcMapOutputWithContext(ctx context.Context) PvcMapOutput {
	return o
}

func (o PvcMapOutput) MapIndex(k pulumi.StringInput) PvcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pvc {
		return vs[0].(map[string]*Pvc)[vs[1].(string)]
	}).(PvcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PvcInput)(nil)).Elem(), &Pvc{})
	pulumi.RegisterInputType(reflect.TypeOf((*PvcArrayInput)(nil)).Elem(), PvcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PvcMapInput)(nil)).Elem(), PvcMap{})
	pulumi.RegisterOutputType(PvcOutput{})
	pulumi.RegisterOutputType(PvcArrayOutput{})
	pulumi.RegisterOutputType(PvcMapOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDmsRocketmqInstancesResult',
    'AwaitableGetDmsRocketmqInstancesResult',
    'get_dms_rocketmq_instances',
    'get_dms_rocketmq_instances_output',
]

@pulumi.output_type
class GetDmsRocketmqInstancesResult:
    """
    A collection of values returned by getDmsRocketmqInstances.
    """
    def __init__(__self__, exact_match_name=None, id=None, instance_id=None, instances=None, name=None, region=None, status=None):
        if exact_match_name and not isinstance(exact_match_name, str):
            raise TypeError("Expected argument 'exact_match_name' to be a str")
        pulumi.set(__self__, "exact_match_name", exact_match_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if instances and not isinstance(instances, list):
            raise TypeError("Expected argument 'instances' to be a list")
        pulumi.set(__self__, "instances", instances)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="exactMatchName")
    def exact_match_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "exact_match_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def instances(self) -> Sequence['outputs.GetDmsRocketmqInstancesInstanceResult']:
        """
        Indicates the list of DMS RocketMQ instances.
        The Instance structure is documented below.
        """
        return pulumi.get(self, "instances")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of the DMS RocketMQ instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Indicates the status of the DMS RocketMQ instance.
        """
        return pulumi.get(self, "status")


class AwaitableGetDmsRocketmqInstancesResult(GetDmsRocketmqInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDmsRocketmqInstancesResult(
            exact_match_name=self.exact_match_name,
            id=self.id,
            instance_id=self.instance_id,
            instances=self.instances,
            name=self.name,
            region=self.region,
            status=self.status)


def get_dms_rocketmq_instances(exact_match_name: Optional[_builtins.str] = None,
                               instance_id: Optional[_builtins.str] = None,
                               name: Optional[_builtins.str] = None,
                               region: Optional[_builtins.str] = None,
                               status: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDmsRocketmqInstancesResult:
    """
    Use this data source to get the list of DMS RocketMQ instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    test = sbercloud.get_dms_rocketmq_instances(name="rocketmq_name_test")
    ```


    :param _builtins.str exact_match_name: Specifies whether to search for the instance that precisely matches a
           specified instance name. Value options: **true**, **false**. Defaults to **false**.
    :param _builtins.str instance_id: Specifies the ID of the RocketMQ instance.
    :param _builtins.str name: Specifies the name of the DMS RocketMQ instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the DMS RocketMQ instance.
    """
    __args__ = dict()
    __args__['exactMatchName'] = exact_match_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDmsRocketmqInstances:getDmsRocketmqInstances', __args__, opts=opts, typ=GetDmsRocketmqInstancesResult).value

    return AwaitableGetDmsRocketmqInstancesResult(
        exact_match_name=pulumi.get(__ret__, 'exact_match_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        instances=pulumi.get(__ret__, 'instances'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_dms_rocketmq_instances_output(exact_match_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      instance_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDmsRocketmqInstancesResult]:
    """
    Use this data source to get the list of DMS RocketMQ instances.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    test = sbercloud.get_dms_rocketmq_instances(name="rocketmq_name_test")
    ```


    :param _builtins.str exact_match_name: Specifies whether to search for the instance that precisely matches a
           specified instance name. Value options: **true**, **false**. Defaults to **false**.
    :param _builtins.str instance_id: Specifies the ID of the RocketMQ instance.
    :param _builtins.str name: Specifies the name of the DMS RocketMQ instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    :param _builtins.str status: Specifies the status of the DMS RocketMQ instance.
    """
    __args__ = dict()
    __args__['exactMatchName'] = exact_match_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDmsRocketmqInstances:getDmsRocketmqInstances', __args__, opts=opts, typ=GetDmsRocketmqInstancesResult)
    return __ret__.apply(lambda __response__: GetDmsRocketmqInstancesResult(
        exact_match_name=pulumi.get(__response__, 'exact_match_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        instances=pulumi.get(__response__, 'instances'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))

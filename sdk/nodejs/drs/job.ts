// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Job extends pulumi.CustomResource {
    /**
     * Get an existing Job resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: JobState, opts?: pulumi.CustomResourceOptions): Job {
        return new Job(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Drs/job:Job';

    /**
     * Returns true if the given object is an instance of Job.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Job {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Job.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly destinationDb: pulumi.Output<outputs.Drs.JobDestinationDb>;
    declare public readonly destinationDbReadnoly: pulumi.Output<boolean | undefined>;
    declare public readonly direction: pulumi.Output<string>;
    declare public readonly engineType: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string | undefined>;
    declare public readonly expiredDays: pulumi.Output<number | undefined>;
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    declare public readonly limitSpeeds: pulumi.Output<outputs.Drs.JobLimitSpeed[] | undefined>;
    declare public readonly migrateDefiner: pulumi.Output<boolean | undefined>;
    declare public readonly migrationType: pulumi.Output<string | undefined>;
    declare public readonly multiWrite: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly netType: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly privateIp: pulumi.Output<string>;
    declare public /*out*/ readonly publicIp: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly sourceDb: pulumi.Output<outputs.Drs.JobSourceDb>;
    declare public readonly startTime: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a Job resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: JobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: JobArgs | JobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as JobState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["destinationDb"] = state?.destinationDb;
            resourceInputs["destinationDbReadnoly"] = state?.destinationDbReadnoly;
            resourceInputs["direction"] = state?.direction;
            resourceInputs["engineType"] = state?.engineType;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["expiredDays"] = state?.expiredDays;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["limitSpeeds"] = state?.limitSpeeds;
            resourceInputs["migrateDefiner"] = state?.migrateDefiner;
            resourceInputs["migrationType"] = state?.migrationType;
            resourceInputs["multiWrite"] = state?.multiWrite;
            resourceInputs["name"] = state?.name;
            resourceInputs["netType"] = state?.netType;
            resourceInputs["privateIp"] = state?.privateIp;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["region"] = state?.region;
            resourceInputs["sourceDb"] = state?.sourceDb;
            resourceInputs["startTime"] = state?.startTime;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as JobArgs | undefined;
            if (args?.destinationDb === undefined && !opts.urn) {
                throw new Error("Missing required property 'destinationDb'");
            }
            if (args?.direction === undefined && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if (args?.engineType === undefined && !opts.urn) {
                throw new Error("Missing required property 'engineType'");
            }
            if (args?.sourceDb === undefined && !opts.urn) {
                throw new Error("Missing required property 'sourceDb'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["destinationDb"] = args?.destinationDb;
            resourceInputs["destinationDbReadnoly"] = args?.destinationDbReadnoly;
            resourceInputs["direction"] = args?.direction;
            resourceInputs["engineType"] = args?.engineType;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["expiredDays"] = args?.expiredDays;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["limitSpeeds"] = args?.limitSpeeds;
            resourceInputs["migrateDefiner"] = args?.migrateDefiner;
            resourceInputs["migrationType"] = args?.migrationType;
            resourceInputs["multiWrite"] = args?.multiWrite;
            resourceInputs["name"] = args?.name;
            resourceInputs["netType"] = args?.netType;
            resourceInputs["region"] = args?.region;
            resourceInputs["sourceDb"] = args?.sourceDb;
            resourceInputs["startTime"] = args?.startTime;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Job.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Job resources.
 */
export interface JobState {
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    destinationDb?: pulumi.Input<inputs.Drs.JobDestinationDb>;
    destinationDbReadnoly?: pulumi.Input<boolean>;
    direction?: pulumi.Input<string>;
    engineType?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    expiredDays?: pulumi.Input<number>;
    forceDestroy?: pulumi.Input<boolean>;
    limitSpeeds?: pulumi.Input<pulumi.Input<inputs.Drs.JobLimitSpeed>[]>;
    migrateDefiner?: pulumi.Input<boolean>;
    migrationType?: pulumi.Input<string>;
    multiWrite?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    netType?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sourceDb?: pulumi.Input<inputs.Drs.JobSourceDb>;
    startTime?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Job resource.
 */
export interface JobArgs {
    description?: pulumi.Input<string>;
    destinationDb: pulumi.Input<inputs.Drs.JobDestinationDb>;
    destinationDbReadnoly?: pulumi.Input<boolean>;
    direction: pulumi.Input<string>;
    engineType: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    expiredDays?: pulumi.Input<number>;
    forceDestroy?: pulumi.Input<boolean>;
    limitSpeeds?: pulumi.Input<pulumi.Input<inputs.Drs.JobLimitSpeed>[]>;
    migrateDefiner?: pulumi.Input<boolean>;
    migrationType?: pulumi.Input<string>;
    multiWrite?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    netType?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    sourceDb: pulumi.Input<inputs.Drs.JobSourceDb>;
    startTime?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    type: pulumi.Input<string>;
}

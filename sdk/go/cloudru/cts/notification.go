// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cts

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages CTS key event notification resource within SberCloud.
//
// ## Example Usage
//
// ### Complete Notification
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			topicUrn := cfg.RequireObject("topicUrn")
//			_, err := cts.NewNotification(ctx, "notify", &cts.NotificationArgs{
//				Name:          pulumi.String("keyOperate_test"),
//				OperationType: pulumi.String("complete"),
//				SmnTopic:      pulumi.Any(topicUrn),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Customized Notification
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			topicUrn := cfg.RequireObject("topicUrn")
//			_, err := cts.NewNotification(ctx, "notify", &cts.NotificationArgs{
//				Name:          pulumi.String("keyOperate_test"),
//				OperationType: pulumi.String("customized"),
//				SmnTopic:      pulumi.Any(topicUrn),
//				Operations: cts.NotificationOperationArray{
//					&cts.NotificationOperationArgs{
//						Service:  pulumi.String("ECS"),
//						Resource: pulumi.String("ecs"),
//						TraceNames: pulumi.StringArray{
//							pulumi.String("createServer"),
//							pulumi.String("deleteServer"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CTS notifications can be imported using `name`, e.g.:
//
// ```sh
// $ pulumi import sbercloud:Cts/notification:Notification tracker your_notification
// ```
type Notification struct {
	pulumi.CustomResourceState

	AgencyName pulumi.StringPtrOutput `pulumi:"agencyName"`
	CreatedAt  pulumi.StringOutput    `pulumi:"createdAt"`
	// Specifies whether notification is enabled, defaults to true.
	//
	// <a name="notificationOperationsObject"></a>
	// The `operations` block supports:
	Enabled pulumi.BoolPtrOutput        `pulumi:"enabled"`
	Filter  NotificationFilterPtrOutput `pulumi:"filter"`
	// Specifies the notification name. The value contains a maximum of 64 characters,
	// and only letters, digits, underscores(_), and Chinese characters are allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The notification ID in UUID format.
	NotificationId pulumi.StringOutput `pulumi:"notificationId"`
	// Specifies the operation type, possible options include **complete** and
	// **customized**.
	OperationType pulumi.StringOutput `pulumi:"operationType"`
	// Specifies an array of users. Notifications will be sent when specified users
	// perform specified operations. All users are selected by default.
	// The object structure is documented below.
	OperationUsers NotificationOperationUserArrayOutput `pulumi:"operationUsers"`
	// Specifies an array of operations that will trigger notifications.
	// For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
	// The object structure is documented below.
	Operations NotificationOperationArrayOutput `pulumi:"operations"`
	// Specifies the region in which to manage the CTS notification resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the URN of a topic.
	SmnTopic pulumi.StringPtrOutput `pulumi:"smnTopic"`
	// The notification status, the value can be **enabled** or **disabled**.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewNotification registers a new resource with the given unique name, arguments, and options.
func NewNotification(ctx *pulumi.Context,
	name string, args *NotificationArgs, opts ...pulumi.ResourceOption) (*Notification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperationType == nil {
		return nil, errors.New("invalid value for required argument 'OperationType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Notification
	err := ctx.RegisterResource("sbercloud:Cts/notification:Notification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotification gets an existing Notification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationState, opts ...pulumi.ResourceOption) (*Notification, error) {
	var resource Notification
	err := ctx.ReadResource("sbercloud:Cts/notification:Notification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Notification resources.
type notificationState struct {
	AgencyName *string `pulumi:"agencyName"`
	CreatedAt  *string `pulumi:"createdAt"`
	// Specifies whether notification is enabled, defaults to true.
	//
	// <a name="notificationOperationsObject"></a>
	// The `operations` block supports:
	Enabled *bool               `pulumi:"enabled"`
	Filter  *NotificationFilter `pulumi:"filter"`
	// Specifies the notification name. The value contains a maximum of 64 characters,
	// and only letters, digits, underscores(_), and Chinese characters are allowed.
	Name *string `pulumi:"name"`
	// The notification ID in UUID format.
	NotificationId *string `pulumi:"notificationId"`
	// Specifies the operation type, possible options include **complete** and
	// **customized**.
	OperationType *string `pulumi:"operationType"`
	// Specifies an array of users. Notifications will be sent when specified users
	// perform specified operations. All users are selected by default.
	// The object structure is documented below.
	OperationUsers []NotificationOperationUser `pulumi:"operationUsers"`
	// Specifies an array of operations that will trigger notifications.
	// For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
	// The object structure is documented below.
	Operations []NotificationOperation `pulumi:"operations"`
	// Specifies the region in which to manage the CTS notification resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the URN of a topic.
	SmnTopic *string `pulumi:"smnTopic"`
	// The notification status, the value can be **enabled** or **disabled**.
	Status *string `pulumi:"status"`
}

type NotificationState struct {
	AgencyName pulumi.StringPtrInput
	CreatedAt  pulumi.StringPtrInput
	// Specifies whether notification is enabled, defaults to true.
	//
	// <a name="notificationOperationsObject"></a>
	// The `operations` block supports:
	Enabled pulumi.BoolPtrInput
	Filter  NotificationFilterPtrInput
	// Specifies the notification name. The value contains a maximum of 64 characters,
	// and only letters, digits, underscores(_), and Chinese characters are allowed.
	Name pulumi.StringPtrInput
	// The notification ID in UUID format.
	NotificationId pulumi.StringPtrInput
	// Specifies the operation type, possible options include **complete** and
	// **customized**.
	OperationType pulumi.StringPtrInput
	// Specifies an array of users. Notifications will be sent when specified users
	// perform specified operations. All users are selected by default.
	// The object structure is documented below.
	OperationUsers NotificationOperationUserArrayInput
	// Specifies an array of operations that will trigger notifications.
	// For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
	// The object structure is documented below.
	Operations NotificationOperationArrayInput
	// Specifies the region in which to manage the CTS notification resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the URN of a topic.
	SmnTopic pulumi.StringPtrInput
	// The notification status, the value can be **enabled** or **disabled**.
	Status pulumi.StringPtrInput
}

func (NotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationState)(nil)).Elem()
}

type notificationArgs struct {
	AgencyName *string `pulumi:"agencyName"`
	// Specifies whether notification is enabled, defaults to true.
	//
	// <a name="notificationOperationsObject"></a>
	// The `operations` block supports:
	Enabled *bool               `pulumi:"enabled"`
	Filter  *NotificationFilter `pulumi:"filter"`
	// Specifies the notification name. The value contains a maximum of 64 characters,
	// and only letters, digits, underscores(_), and Chinese characters are allowed.
	Name *string `pulumi:"name"`
	// Specifies the operation type, possible options include **complete** and
	// **customized**.
	OperationType string `pulumi:"operationType"`
	// Specifies an array of users. Notifications will be sent when specified users
	// perform specified operations. All users are selected by default.
	// The object structure is documented below.
	OperationUsers []NotificationOperationUser `pulumi:"operationUsers"`
	// Specifies an array of operations that will trigger notifications.
	// For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
	// The object structure is documented below.
	Operations []NotificationOperation `pulumi:"operations"`
	// Specifies the region in which to manage the CTS notification resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the URN of a topic.
	SmnTopic *string `pulumi:"smnTopic"`
}

// The set of arguments for constructing a Notification resource.
type NotificationArgs struct {
	AgencyName pulumi.StringPtrInput
	// Specifies whether notification is enabled, defaults to true.
	//
	// <a name="notificationOperationsObject"></a>
	// The `operations` block supports:
	Enabled pulumi.BoolPtrInput
	Filter  NotificationFilterPtrInput
	// Specifies the notification name. The value contains a maximum of 64 characters,
	// and only letters, digits, underscores(_), and Chinese characters are allowed.
	Name pulumi.StringPtrInput
	// Specifies the operation type, possible options include **complete** and
	// **customized**.
	OperationType pulumi.StringInput
	// Specifies an array of users. Notifications will be sent when specified users
	// perform specified operations. All users are selected by default.
	// The object structure is documented below.
	OperationUsers NotificationOperationUserArrayInput
	// Specifies an array of operations that will trigger notifications.
	// For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
	// The object structure is documented below.
	Operations NotificationOperationArrayInput
	// Specifies the region in which to manage the CTS notification resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the URN of a topic.
	SmnTopic pulumi.StringPtrInput
}

func (NotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationArgs)(nil)).Elem()
}

type NotificationInput interface {
	pulumi.Input

	ToNotificationOutput() NotificationOutput
	ToNotificationOutputWithContext(ctx context.Context) NotificationOutput
}

func (*Notification) ElementType() reflect.Type {
	return reflect.TypeOf((**Notification)(nil)).Elem()
}

func (i *Notification) ToNotificationOutput() NotificationOutput {
	return i.ToNotificationOutputWithContext(context.Background())
}

func (i *Notification) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOutput)
}

// NotificationArrayInput is an input type that accepts NotificationArray and NotificationArrayOutput values.
// You can construct a concrete instance of `NotificationArrayInput` via:
//
//	NotificationArray{ NotificationArgs{...} }
type NotificationArrayInput interface {
	pulumi.Input

	ToNotificationArrayOutput() NotificationArrayOutput
	ToNotificationArrayOutputWithContext(context.Context) NotificationArrayOutput
}

type NotificationArray []NotificationInput

func (NotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notification)(nil)).Elem()
}

func (i NotificationArray) ToNotificationArrayOutput() NotificationArrayOutput {
	return i.ToNotificationArrayOutputWithContext(context.Background())
}

func (i NotificationArray) ToNotificationArrayOutputWithContext(ctx context.Context) NotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationArrayOutput)
}

// NotificationMapInput is an input type that accepts NotificationMap and NotificationMapOutput values.
// You can construct a concrete instance of `NotificationMapInput` via:
//
//	NotificationMap{ "key": NotificationArgs{...} }
type NotificationMapInput interface {
	pulumi.Input

	ToNotificationMapOutput() NotificationMapOutput
	ToNotificationMapOutputWithContext(context.Context) NotificationMapOutput
}

type NotificationMap map[string]NotificationInput

func (NotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notification)(nil)).Elem()
}

func (i NotificationMap) ToNotificationMapOutput() NotificationMapOutput {
	return i.ToNotificationMapOutputWithContext(context.Background())
}

func (i NotificationMap) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationMapOutput)
}

type NotificationOutput struct{ *pulumi.OutputState }

func (NotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Notification)(nil)).Elem()
}

func (o NotificationOutput) ToNotificationOutput() NotificationOutput {
	return o
}

func (o NotificationOutput) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return o
}

func (o NotificationOutput) AgencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringPtrOutput { return v.AgencyName }).(pulumi.StringPtrOutput)
}

func (o NotificationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies whether notification is enabled, defaults to true.
//
// <a name="notificationOperationsObject"></a>
// The `operations` block supports:
func (o NotificationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o NotificationOutput) Filter() NotificationFilterPtrOutput {
	return o.ApplyT(func(v *Notification) NotificationFilterPtrOutput { return v.Filter }).(NotificationFilterPtrOutput)
}

// Specifies the notification name. The value contains a maximum of 64 characters,
// and only letters, digits, underscores(_), and Chinese characters are allowed.
func (o NotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The notification ID in UUID format.
func (o NotificationOutput) NotificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.NotificationId }).(pulumi.StringOutput)
}

// Specifies the operation type, possible options include **complete** and
// **customized**.
func (o NotificationOutput) OperationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.OperationType }).(pulumi.StringOutput)
}

// Specifies an array of users. Notifications will be sent when specified users
// perform specified operations. All users are selected by default.
// The object structure is documented below.
func (o NotificationOutput) OperationUsers() NotificationOperationUserArrayOutput {
	return o.ApplyT(func(v *Notification) NotificationOperationUserArrayOutput { return v.OperationUsers }).(NotificationOperationUserArrayOutput)
}

// Specifies an array of operations that will trigger notifications.
// For details, see [Supported Services and Operations](https://support.sbercloud.com/intl/en-us/usermanual-cts/cts_03_0022.html).
// The object structure is documented below.
func (o NotificationOutput) Operations() NotificationOperationArrayOutput {
	return o.ApplyT(func(v *Notification) NotificationOperationArrayOutput { return v.Operations }).(NotificationOperationArrayOutput)
}

// Specifies the region in which to manage the CTS notification resource.
// If omitted, the provider-level region will be used. Changing this creates a new resource.
func (o NotificationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the URN of a topic.
func (o NotificationOutput) SmnTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringPtrOutput { return v.SmnTopic }).(pulumi.StringPtrOutput)
}

// The notification status, the value can be **enabled** or **disabled**.
func (o NotificationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type NotificationArrayOutput struct{ *pulumi.OutputState }

func (NotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notification)(nil)).Elem()
}

func (o NotificationArrayOutput) ToNotificationArrayOutput() NotificationArrayOutput {
	return o
}

func (o NotificationArrayOutput) ToNotificationArrayOutputWithContext(ctx context.Context) NotificationArrayOutput {
	return o
}

func (o NotificationArrayOutput) Index(i pulumi.IntInput) NotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Notification {
		return vs[0].([]*Notification)[vs[1].(int)]
	}).(NotificationOutput)
}

type NotificationMapOutput struct{ *pulumi.OutputState }

func (NotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notification)(nil)).Elem()
}

func (o NotificationMapOutput) ToNotificationMapOutput() NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) MapIndex(k pulumi.StringInput) NotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Notification {
		return vs[0].(map[string]*Notification)[vs[1].(string)]
	}).(NotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationInput)(nil)).Elem(), &Notification{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationArrayInput)(nil)).Elem(), NotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationMapInput)(nil)).Elem(), NotificationMap{})
	pulumi.RegisterOutputType(NotificationOutput{})
	pulumi.RegisterOutputType(NotificationArrayOutput{})
	pulumi.RegisterOutputType(NotificationMapOutput{})
}

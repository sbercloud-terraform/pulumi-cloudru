// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Add a node to a CCE cluster.
 *
 * ## Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const myaz = sbercloud.getAvailabilityZones({});
 * const mykp = new sbercloud.ecs.Keypair("mykp", {
 *     name: "mykp",
 *     publicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAjpC1hwiOCCmKEWxJ4qzTTsJbKzndLo1BCz5PcwtUnflmU+gHJtWMZKpuEGVi29h0A/+ydKek1O18k10Ff+4tyFjiHDQAT9+OfgWf7+b1yK+qDip3X1C0UPMbwHlTfSGWLGZquwhvEFx9k3h/M+VtMvwR1lJ9LUyTAImnNjWG7TAIPmui30HvM2UiFEmqkr4ijq45MyX2+fLIePLRIFuu1p4whjHAQYufqyno3BS48icQb4p6iVEZPo4AE2o9oIyQvj2mx4dk5Y8CgSETOZTYDOR3rU2fZTRDRgPJDH9FWvQjF5tA0p3d9CoWWd2s6GKKbfoUIi8R/Db1BSPJwkqB jrp-hp-pc",
 * });
 * const mycluster = new sbercloud.cce.Cluster("mycluster", {
 *     name: "mycluster",
 *     clusterType: "VirtualMachine",
 *     flavorId: "cce.s1.small",
 *     vpcId: myvpc.id,
 *     subnetId: mysubnet.id,
 *     containerNetworkType: "overlay_l2",
 * });
 * const node = new sbercloud.cce.Node("node", {
 *     clusterId: mycluster.id,
 *     name: "node",
 *     flavorId: "s3.large.2",
 *     availabilityZone: myaz.then(myaz => myaz.names?.[0]),
 *     keyPair: mykp.name,
 *     os: "CentOS 7.6",
 *     rootVolume: {
 *         size: 50,
 *         volumetype: "SAS",
 *     },
 *     dataVolumes: [{
 *         size: 100,
 *         volumetype: "SAS",
 *     }],
 * });
 * ```
 *
 * ## Node with Eip
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const mynode = new sbercloud.cce.Node("mynode", {
 *     clusterId: mycluster.id,
 *     name: "mynode",
 *     flavorId: "s3.large.2",
 *     availabilityZone: myaz.names[0],
 *     keyPair: mykp.name,
 *     os: "CentOS 7.6",
 *     rootVolume: {
 *         size: 50,
 *         volumetype: "SAS",
 *     },
 *     dataVolumes: [{
 *         size: 100,
 *         volumetype: "SAS",
 *     }],
 *     iptype: "5_bgp",
 *     bandwidthChargeMode: "traffic",
 *     sharetype: "PER",
 *     bandwidthSize: 100,
 * });
 * ```
 *
 * ## Node with Existing Eip
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const myeip = new sbercloud.vpc.Eip("myeip", {
 *     publicip: {
 *         type: "5_bgp",
 *     },
 *     bandwidth: {
 *         name: "test",
 *         size: 8,
 *         shareType: "PER",
 *         chargeMode: "traffic",
 *     },
 * });
 * const mynode = new sbercloud.cce.Node("mynode", {
 *     clusterId: mycluster.id,
 *     name: "mynode",
 *     flavorId: "s3.large.2",
 *     availabilityZone: myaz.names[0],
 *     keyPair: mykp.name,
 *     os: "CentOS 7.6",
 *     rootVolume: {
 *         size: 50,
 *         volumetype: "SAS",
 *     },
 *     dataVolumes: [{
 *         size: 100,
 *         volumetype: "SAS",
 *     }],
 *     eipId: myeip.id,
 * });
 * ```
 *
 * ## Node with storage configuration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const mynode = new sbercloud.cce.Node("mynode", {
 *     clusterId: mycluster.id,
 *     name: "mynode",
 *     flavorId: "s3.large.2",
 *     availabilityZone: myaz.names[0],
 *     keyPair: mykp.name,
 *     os: "CentOS 7.6",
 *     rootVolume: {
 *         size: 50,
 *         volumetype: "SSD",
 *     },
 *     dataVolumes: [
 *         {
 *             size: 100,
 *             volumetype: "SSD",
 *         },
 *         {
 *             size: 100,
 *             volumetype: "SSD",
 *             kmsKeyId: mykey.id,
 *         },
 *     ],
 *     storage: {
 *         selectors: [
 *             {
 *                 name: "cceUse",
 *                 type: "evs",
 *                 matchLabelSize: "100",
 *                 matchLabelCount: "1",
 *             },
 *             {
 *                 name: "user",
 *                 type: "evs",
 *                 matchLabelSize: "100",
 *                 matchLabelMetadataEncrypted: "1",
 *                 matchLabelMetadataCmkid: mykey.id,
 *                 matchLabelCount: "1",
 *             },
 *         ],
 *         groups: [
 *             {
 *                 name: "vgpaas",
 *                 selectorNames: ["cceUse"],
 *                 cceManaged: true,
 *                 virtualSpaces: [
 *                     {
 *                         name: "kubernetes",
 *                         size: "10%",
 *                         lvmLvType: "linear",
 *                     },
 *                     {
 *                         name: "runtime",
 *                         size: "90%",
 *                         lvmLvType: "linear",
 *                     },
 *                 ],
 *             },
 *             {
 *                 name: "vguser",
 *                 selectorNames: ["user"],
 *                 virtualSpaces: [{
 *                     name: "user",
 *                     size: "100%",
 *                     lvmLvType: "linear",
 *                     lvmPath: "/workspace",
 *                 }],
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * CCE node can be imported using the cluster ID and node ID separated by a slash, e.g.:
 *
 * ```sh
 * $ pulumi import sbercloud:Cce/node:Node my_node 5c20fdad-7288-11eb-b817-0255ac10158b/e9287dff-7288-11eb-b817-0255ac10158b
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason. The missing attributes include:
 *
 * `password`, `fixed_ip`, `eip_id`, `preinstall`, `postinstall`, `iptype`, `bandwidth_charge_mode`, `bandwidth_size`,
 *
 * `share_type`, `max_pods`, `extend_param`, `labels`, `taints` and arguments for pre-paid. It is generally recommended
 *
 * running `pulumi preview` after importing a node. You can then decide if changes should be applied to the node, or the
 *
 * resource definition should be updated to align with the node. Also you can ignore changes as below.
 *
 * resource "sbercloud_cce_node" "my_node" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       extend_param, labels,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeState, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cce/node:Node';

    /**
     * Returns true if the given object is an instance of Node.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Node {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Node.__pulumiType;
    }

    /**
     * schema: Internal
     */
    public readonly annotations!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "
     * false". Changing this creates a new resource.
     */
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the available partition (AZ). Changing this
     * parameter will create a new resource.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Specifies the bandwidth billing type.
     * Changing this parameter will create a new resource.
     */
    public readonly bandwidthChargeMode!: pulumi.Output<string | undefined>;
    /**
     * Specifies the bandwidth size.
     * Changing this parameter will create a new resource.
     */
    public readonly bandwidthSize!: pulumi.Output<number | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    public readonly billingMode!: pulumi.Output<number>;
    /**
     * Specifies the charging mode of the CCE node. Valid values are *prePaid*
     * and *postPaid*, defaults to *postPaid*. Changing this creates a new resource.
     */
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * Specifies the ID of the cluster.
     * Changing this parameter will create a new resource.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Specifies the configurations of the data disk.
     * Changing this parameter will create a new resource.
     */
    public readonly dataVolumes!: pulumi.Output<outputs.Cce.NodeDataVolume[]>;
    public readonly dedicatedHostId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the ECS group ID. If specified, the node will be created under
     * the cloud server group. Changing this parameter will create a new resource.
     */
    public readonly ecsGroupId!: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    public readonly ecsPerformanceType!: pulumi.Output<string | undefined>;
    /**
     * Specifies the ID of the EIP.
     * Changing this parameter will create a new resource.
     *
     * > **NOTE:** If the eipId parameter is configured, you do not need to configure the bandwidth parameters:
     * `iptype`, `bandwidthChargeMode`, `bandwidthSize` and `shareType`.
     */
    public readonly eipId!: pulumi.Output<string | undefined>;
    /**
     * @deprecated use eipId instead
     */
    public readonly eipIds!: pulumi.Output<string[] | undefined>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies the extended parameter.
     * Changing this parameter will create a new resource.
     * The available keys are as follows:
     * + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
     * + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
     * + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
     * + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
     *
     * The following is an example default configuration:
     */
    public readonly extendParam!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    public readonly extendParamChargingMode!: pulumi.Output<number | undefined>;
    public readonly extendParams!: pulumi.Output<outputs.Cce.NodeExtendParams | undefined>;
    public readonly extensionNics!: pulumi.Output<outputs.Cce.NodeExtensionNic[] | undefined>;
    /**
     * Specifies the fixed IP of the NIC.
     * Changing this parameter will create a new resource.
     */
    public readonly fixedIp!: pulumi.Output<string | undefined>;
    /**
     * Specifies the flavor ID. Changing this parameter will create a new
     * resource.
     */
    public readonly flavorId!: pulumi.Output<string>;
    public readonly hostnameConfig!: pulumi.Output<outputs.Cce.NodeHostnameConfig>;
    public readonly initializedConditions!: pulumi.Output<string[]>;
    /**
     * Specifies the elastic IP type.
     * Changing this parameter will create a new resource.
     */
    public readonly iptype!: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    public readonly keepEcs!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will create a new resource.
     */
    public readonly keyPair!: pulumi.Output<string | undefined>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     * Changing this parameter will create a new resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the maximum number of instances a node is allowed to create.
     * Changing this parameter will create a new resource.
     */
    public readonly maxPods!: pulumi.Output<number | undefined>;
    /**
     * Specifies the node name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    public readonly orderId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the operating system of the node.
     * Changing this parameter will create a new resource.
     * For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
     */
    public readonly os!: pulumi.Output<string>;
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will create a new resource.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
     * , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
     * mandatory if `chargingMode` is set to *prePaid*. Changing this creates a new resource.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the CCE node.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new resource.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the script to be executed after installation.
     * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    public readonly postinstall!: pulumi.Output<string | undefined>;
    /**
     * Specifies the script to be executed before installation.
     * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    public readonly preinstall!: pulumi.Output<string | undefined>;
    /**
     * Private IP of the CCE node.
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    public readonly productId!: pulumi.Output<string | undefined>;
    /**
     * Public IP of the CCE node.
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    public readonly publicKey!: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the CCE node resource.
     * If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the configuration of the system disk.
     * Changing this parameter will create a new resource.
     */
    public readonly rootVolume!: pulumi.Output<outputs.Cce.NodeRootVolume>;
    /**
     * Specifies the runtime of the CCE node. Valid values are *docker* and
     * *containerd*. Changing this creates a new resource.
     */
    public readonly runtime!: pulumi.Output<string>;
    /**
     * ID of the ECS instance associated with the node.
     */
    public /*out*/ readonly serverId!: pulumi.Output<string>;
    /**
     * Specifies the bandwidth sharing type.
     * Changing this parameter will create a new resource.
     */
    public readonly sharetype!: pulumi.Output<string | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the disk initialization management parameter.
     * If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
     * This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
     */
    public readonly storage!: pulumi.Output<outputs.Cce.NodeStorage | undefined>;
    /**
     * Specifies the ID of the subnet to which the NIC belongs.
     * Changing this parameter will create a new resource.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * Changing this parameter will create a new resource. Each taint contains the following parameters:
     */
    public readonly taints!: pulumi.Output<outputs.Cce.NodeTaint[] | undefined>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeArgs | NodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeState | undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bandwidthChargeMode"] = state ? state.bandwidthChargeMode : undefined;
            resourceInputs["bandwidthSize"] = state ? state.bandwidthSize : undefined;
            resourceInputs["billingMode"] = state ? state.billingMode : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["dedicatedHostId"] = state ? state.dedicatedHostId : undefined;
            resourceInputs["ecsGroupId"] = state ? state.ecsGroupId : undefined;
            resourceInputs["ecsPerformanceType"] = state ? state.ecsPerformanceType : undefined;
            resourceInputs["eipId"] = state ? state.eipId : undefined;
            resourceInputs["eipIds"] = state ? state.eipIds : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = state ? state.extendParam : undefined;
            resourceInputs["extendParamChargingMode"] = state ? state.extendParamChargingMode : undefined;
            resourceInputs["extendParams"] = state ? state.extendParams : undefined;
            resourceInputs["extensionNics"] = state ? state.extensionNics : undefined;
            resourceInputs["fixedIp"] = state ? state.fixedIp : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["hostnameConfig"] = state ? state.hostnameConfig : undefined;
            resourceInputs["initializedConditions"] = state ? state.initializedConditions : undefined;
            resourceInputs["iptype"] = state ? state.iptype : undefined;
            resourceInputs["keepEcs"] = state ? state.keepEcs : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxPods"] = state ? state.maxPods : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orderId"] = state ? state.orderId : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["postinstall"] = state ? state.postinstall : undefined;
            resourceInputs["preinstall"] = state ? state.preinstall : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["productId"] = state ? state.productId : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootVolume"] = state ? state.rootVolume : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["sharetype"] = state ? state.sharetype : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
        } else {
            const args = argsOrState as NodeArgs | undefined;
            if ((!args || args.availabilityZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.rootVolume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootVolume'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["bandwidthChargeMode"] = args ? args.bandwidthChargeMode : undefined;
            resourceInputs["bandwidthSize"] = args ? args.bandwidthSize : undefined;
            resourceInputs["billingMode"] = args ? args.billingMode : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dataVolumes"] = args ? args.dataVolumes : undefined;
            resourceInputs["dedicatedHostId"] = args ? args.dedicatedHostId : undefined;
            resourceInputs["ecsGroupId"] = args ? args.ecsGroupId : undefined;
            resourceInputs["ecsPerformanceType"] = args ? args.ecsPerformanceType : undefined;
            resourceInputs["eipId"] = args ? args.eipId : undefined;
            resourceInputs["eipIds"] = args ? args.eipIds : undefined;
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = args ? args.extendParam : undefined;
            resourceInputs["extendParamChargingMode"] = args ? args.extendParamChargingMode : undefined;
            resourceInputs["extendParams"] = args ? args.extendParams : undefined;
            resourceInputs["extensionNics"] = args ? args.extensionNics : undefined;
            resourceInputs["fixedIp"] = args ? args.fixedIp : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["hostnameConfig"] = args ? args.hostnameConfig : undefined;
            resourceInputs["initializedConditions"] = args ? args.initializedConditions : undefined;
            resourceInputs["iptype"] = args ? args.iptype : undefined;
            resourceInputs["keepEcs"] = args ? args.keepEcs : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maxPods"] = args ? args.maxPods : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orderId"] = args ? args.orderId : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["postinstall"] = args ? args.postinstall : undefined;
            resourceInputs["preinstall"] = args ? args.preinstall : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["productId"] = args ? args.productId : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rootVolume"] = args ? args.rootVolume : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["sharetype"] = args ? args.sharetype : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Node.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Node resources.
 */
export interface NodeState {
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "
     * false". Changing this creates a new resource.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the name of the available partition (AZ). Changing this
     * parameter will create a new resource.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the bandwidth billing type.
     * Changing this parameter will create a new resource.
     */
    bandwidthChargeMode?: pulumi.Input<string>;
    /**
     * Specifies the bandwidth size.
     * Changing this parameter will create a new resource.
     */
    bandwidthSize?: pulumi.Input<number>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    /**
     * Specifies the charging mode of the CCE node. Valid values are *prePaid*
     * and *postPaid*, defaults to *postPaid*. Changing this creates a new resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the ID of the cluster.
     * Changing this parameter will create a new resource.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Specifies the configurations of the data disk.
     * Changing this parameter will create a new resource.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodeDataVolume>[]>;
    dedicatedHostId?: pulumi.Input<string>;
    /**
     * Specifies the ECS group ID. If specified, the node will be created under
     * the cloud server group. Changing this parameter will create a new resource.
     */
    ecsGroupId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    ecsPerformanceType?: pulumi.Input<string>;
    /**
     * Specifies the ID of the EIP.
     * Changing this parameter will create a new resource.
     *
     * > **NOTE:** If the eipId parameter is configured, you do not need to configure the bandwidth parameters:
     * `iptype`, `bandwidthChargeMode`, `bandwidthSize` and `shareType`.
     */
    eipId?: pulumi.Input<string>;
    /**
     * @deprecated use eipId instead
     */
    eipIds?: pulumi.Input<pulumi.Input<string>[]>;
    enableForceNew?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the extended parameter.
     * Changing this parameter will create a new resource.
     * The available keys are as follows:
     * + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
     * + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
     * + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
     * + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
     *
     * The following is an example default configuration:
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated use chargingMode instead
     */
    extendParamChargingMode?: pulumi.Input<number>;
    extendParams?: pulumi.Input<inputs.Cce.NodeExtendParams>;
    extensionNics?: pulumi.Input<pulumi.Input<inputs.Cce.NodeExtensionNic>[]>;
    /**
     * Specifies the fixed IP of the NIC.
     * Changing this parameter will create a new resource.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * Specifies the flavor ID. Changing this parameter will create a new
     * resource.
     */
    flavorId?: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.Cce.NodeHostnameConfig>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the elastic IP type.
     * Changing this parameter will create a new resource.
     */
    iptype?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    keepEcs?: pulumi.Input<boolean>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will create a new resource.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     * Changing this parameter will create a new resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the maximum number of instances a node is allowed to create.
     * Changing this parameter will create a new resource.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * Specifies the node name.
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    orderId?: pulumi.Input<string>;
    /**
     * Specifies the operating system of the node.
     * Changing this parameter will create a new resource.
     * For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
     */
    os?: pulumi.Input<string>;
    partition?: pulumi.Input<string>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will create a new resource.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
     * , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
     * mandatory if `chargingMode` is set to *prePaid*. Changing this creates a new resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the CCE node.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the script to be executed after installation.
     * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    postinstall?: pulumi.Input<string>;
    /**
     * Specifies the script to be executed before installation.
     * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    preinstall?: pulumi.Input<string>;
    /**
     * Private IP of the CCE node.
     */
    privateIp?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    productId?: pulumi.Input<string>;
    /**
     * Public IP of the CCE node.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CCE node resource.
     * If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the configuration of the system disk.
     * Changing this parameter will create a new resource.
     */
    rootVolume?: pulumi.Input<inputs.Cce.NodeRootVolume>;
    /**
     * Specifies the runtime of the CCE node. Valid values are *docker* and
     * *containerd*. Changing this creates a new resource.
     */
    runtime?: pulumi.Input<string>;
    /**
     * ID of the ECS instance associated with the node.
     */
    serverId?: pulumi.Input<string>;
    /**
     * Specifies the bandwidth sharing type.
     * Changing this parameter will create a new resource.
     */
    sharetype?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    /**
     * Specifies the disk initialization management parameter.
     * If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
     * This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
     */
    storage?: pulumi.Input<inputs.Cce.NodeStorage>;
    /**
     * Specifies the ID of the subnet to which the NIC belongs.
     * Changing this parameter will create a new resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * Changing this parameter will create a new resource. Each taint contains the following parameters:
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodeTaint>[]>;
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "
     * false". Changing this creates a new resource.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the name of the available partition (AZ). Changing this
     * parameter will create a new resource.
     */
    availabilityZone: pulumi.Input<string>;
    /**
     * Specifies the bandwidth billing type.
     * Changing this parameter will create a new resource.
     */
    bandwidthChargeMode?: pulumi.Input<string>;
    /**
     * Specifies the bandwidth size.
     * Changing this parameter will create a new resource.
     */
    bandwidthSize?: pulumi.Input<number>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    /**
     * Specifies the charging mode of the CCE node. Valid values are *prePaid*
     * and *postPaid*, defaults to *postPaid*. Changing this creates a new resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the ID of the cluster.
     * Changing this parameter will create a new resource.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies the configurations of the data disk.
     * Changing this parameter will create a new resource.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodeDataVolume>[]>;
    dedicatedHostId?: pulumi.Input<string>;
    /**
     * Specifies the ECS group ID. If specified, the node will be created under
     * the cloud server group. Changing this parameter will create a new resource.
     */
    ecsGroupId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    ecsPerformanceType?: pulumi.Input<string>;
    /**
     * Specifies the ID of the EIP.
     * Changing this parameter will create a new resource.
     *
     * > **NOTE:** If the eipId parameter is configured, you do not need to configure the bandwidth parameters:
     * `iptype`, `bandwidthChargeMode`, `bandwidthSize` and `shareType`.
     */
    eipId?: pulumi.Input<string>;
    /**
     * @deprecated use eipId instead
     */
    eipIds?: pulumi.Input<pulumi.Input<string>[]>;
    enableForceNew?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the extended parameter.
     * Changing this parameter will create a new resource.
     * The available keys are as follows:
     * + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
     * + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
     * + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
     * + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
     *
     * The following is an example default configuration:
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated use chargingMode instead
     */
    extendParamChargingMode?: pulumi.Input<number>;
    extendParams?: pulumi.Input<inputs.Cce.NodeExtendParams>;
    extensionNics?: pulumi.Input<pulumi.Input<inputs.Cce.NodeExtensionNic>[]>;
    /**
     * Specifies the fixed IP of the NIC.
     * Changing this parameter will create a new resource.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * Specifies the flavor ID. Changing this parameter will create a new
     * resource.
     */
    flavorId: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.Cce.NodeHostnameConfig>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the elastic IP type.
     * Changing this parameter will create a new resource.
     */
    iptype?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    keepEcs?: pulumi.Input<boolean>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will create a new resource.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     * Changing this parameter will create a new resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the maximum number of instances a node is allowed to create.
     * Changing this parameter will create a new resource.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * Specifies the node name.
     */
    name?: pulumi.Input<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    orderId?: pulumi.Input<string>;
    /**
     * Specifies the operating system of the node.
     * Changing this parameter will create a new resource.
     * For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
     */
    os?: pulumi.Input<string>;
    partition?: pulumi.Input<string>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will create a new resource.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the CCE node. If `periodUnit` is set to *month*
     * , the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter is
     * mandatory if `chargingMode` is set to *prePaid*. Changing this creates a new resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the CCE node.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this creates a new resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the script to be executed after installation.
     * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    postinstall?: pulumi.Input<string>;
    /**
     * Specifies the script to be executed before installation.
     * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    preinstall?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    productId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CCE node resource.
     * If omitted, the provider-level region will be used. Changing this creates a new CCE node resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the configuration of the system disk.
     * Changing this parameter will create a new resource.
     */
    rootVolume: pulumi.Input<inputs.Cce.NodeRootVolume>;
    /**
     * Specifies the runtime of the CCE node. Valid values are *docker* and
     * *containerd*. Changing this creates a new resource.
     */
    runtime?: pulumi.Input<string>;
    /**
     * Specifies the bandwidth sharing type.
     * Changing this parameter will create a new resource.
     */
    sharetype?: pulumi.Input<string>;
    /**
     * Specifies the disk initialization management parameter.
     * If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
     * This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
     */
    storage?: pulumi.Input<inputs.Cce.NodeStorage>;
    /**
     * Specifies the ID of the subnet to which the NIC belongs.
     * Changing this parameter will create a new resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * Changing this parameter will create a new resource. Each taint contains the following parameters:
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodeTaint>[]>;
}

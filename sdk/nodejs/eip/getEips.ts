// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get a list of EIPs.
 *
 * ## Example Usage
 *
 * An example filter by name and tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const publicIp = config.requireObject<any>("publicIp");
 * const eip = sbercloud.Eip.getEips({
 *     publicIps: [publicIp],
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * export const eipIds = eip.then(eip => eip.eips.map(__item => __item.id));
 * ```
 */
export function getEips(args?: GetEipsArgs, opts?: pulumi.InvokeOptions): Promise<GetEipsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Eip/getEips:getEips", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "ids": args.ids,
        "ipVersion": args.ipVersion,
        "portIds": args.portIds,
        "privateIps": args.privateIps,
        "publicIps": args.publicIps,
        "region": args.region,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getEips.
 */
export interface GetEipsArgs {
    /**
     * Specifies the enterprise project ID which the desired EIP belongs to.
     */
    enterpriseProjectId?: string;
    /**
     * Specifies an array of one or more IDs of the desired EIP.
     */
    ids?: string[];
    /**
     * Specifies ip version of the desired EIP. The options are:
     */
    ipVersion?: number;
    /**
     * Specifies an array of one or more port ids which bound to the desired EIP.
     */
    portIds?: string[];
    privateIps?: string[];
    /**
     * Specifies an array of one or more public ip addresses of the desired EIP.
     */
    publicIps?: string[];
    /**
     * Specifies the region in which to obtain the EIP. If omitted, the provider-level region
     * will be used.
     */
    region?: string;
    /**
     * Specifies the included key/value pairs which associated with the desired EIP.
     *
     * > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
     * The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
     * tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
     * The values are in the OR relationship.
     */
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getEips.
 */
export interface GetEipsResult {
    /**
     * Indicates a list of all EIPs found. Structure is documented below.
     */
    readonly eips: outputs.Eip.GetEipsEip[];
    /**
     * The the enterprise project ID of the EIP.
     */
    readonly enterpriseProjectId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The ip version of the EIP.
     */
    readonly ipVersion?: number;
    readonly portIds?: string[];
    readonly privateIps?: string[];
    readonly publicIps?: string[];
    readonly region: string;
    /**
     * The key/value pairs which associated with the EIP.
     */
    readonly tags?: {[key: string]: string};
}
/**
 * Use this data source to get a list of EIPs.
 *
 * ## Example Usage
 *
 * An example filter by name and tag
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const publicIp = config.requireObject<any>("publicIp");
 * const eip = sbercloud.Eip.getEips({
 *     publicIps: [publicIp],
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * export const eipIds = eip.then(eip => eip.eips.map(__item => __item.id));
 * ```
 */
export function getEipsOutput(args?: GetEipsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEipsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Eip/getEips:getEips", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "ids": args.ids,
        "ipVersion": args.ipVersion,
        "portIds": args.portIds,
        "privateIps": args.privateIps,
        "publicIps": args.publicIps,
        "region": args.region,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getEips.
 */
export interface GetEipsOutputArgs {
    /**
     * Specifies the enterprise project ID which the desired EIP belongs to.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more IDs of the desired EIP.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies ip version of the desired EIP. The options are:
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * Specifies an array of one or more port ids which bound to the desired EIP.
     */
    portIds?: pulumi.Input<pulumi.Input<string>[]>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an array of one or more public ip addresses of the desired EIP.
     */
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region in which to obtain the EIP. If omitted, the provider-level region
     * will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the included key/value pairs which associated with the desired EIP.
     *
     * > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
     * The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
     * tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
     * The values are in the OR relationship.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

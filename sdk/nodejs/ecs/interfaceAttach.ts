// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class InterfaceAttach extends pulumi.CustomResource {
    /**
     * Get an existing InterfaceAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InterfaceAttachState, opts?: pulumi.CustomResourceOptions): InterfaceAttach {
        return new InterfaceAttach(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Ecs/interfaceAttach:InterfaceAttach';

    /**
     * Returns true if the given object is an instance of InterfaceAttach.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InterfaceAttach {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InterfaceAttach.__pulumiType;
    }

    declare public readonly fixedIp: pulumi.Output<string>;
    declare public /*out*/ readonly fixedIpv6: pulumi.Output<string>;
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly ipv6BandwidthId: pulumi.Output<string | undefined>;
    declare public readonly ipv6Enable: pulumi.Output<boolean>;
    declare public /*out*/ readonly mac: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    declare public readonly portId: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    declare public readonly sourceDestCheck: pulumi.Output<boolean | undefined>;

    /**
     * Create a InterfaceAttach resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InterfaceAttachArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InterfaceAttachArgs | InterfaceAttachState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InterfaceAttachState | undefined;
            resourceInputs["fixedIp"] = state?.fixedIp;
            resourceInputs["fixedIpv6"] = state?.fixedIpv6;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["ipv6BandwidthId"] = state?.ipv6BandwidthId;
            resourceInputs["ipv6Enable"] = state?.ipv6Enable;
            resourceInputs["mac"] = state?.mac;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["portId"] = state?.portId;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["sourceDestCheck"] = state?.sourceDestCheck;
        } else {
            const args = argsOrState as InterfaceAttachArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["fixedIp"] = args?.fixedIp;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["ipv6BandwidthId"] = args?.ipv6BandwidthId;
            resourceInputs["ipv6Enable"] = args?.ipv6Enable;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["portId"] = args?.portId;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["sourceDestCheck"] = args?.sourceDestCheck;
            resourceInputs["fixedIpv6"] = undefined /*out*/;
            resourceInputs["mac"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InterfaceAttach.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InterfaceAttach resources.
 */
export interface InterfaceAttachState {
    fixedIp?: pulumi.Input<string>;
    fixedIpv6?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    ipv6BandwidthId?: pulumi.Input<string>;
    ipv6Enable?: pulumi.Input<boolean>;
    mac?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    portId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceDestCheck?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a InterfaceAttach resource.
 */
export interface InterfaceAttachArgs {
    fixedIp?: pulumi.Input<string>;
    instanceId: pulumi.Input<string>;
    ipv6BandwidthId?: pulumi.Input<string>;
    ipv6Enable?: pulumi.Input<boolean>;
    networkId?: pulumi.Input<string>;
    portId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    sourceDestCheck?: pulumi.Input<boolean>;
}

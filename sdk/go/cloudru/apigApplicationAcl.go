// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ApigApplicationAcl struct {
	pulumi.CustomResourceState

	// The ID of the application to which the ACL rules belong.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// The ID of the dedicated instance to which the application belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region where the application and ACL rules are located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ACL type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The ACL values.
	Values pulumi.StringArrayOutput `pulumi:"values"`
}

// NewApigApplicationAcl registers a new resource with the given unique name, arguments, and options.
func NewApigApplicationAcl(ctx *pulumi.Context,
	name string, args *ApigApplicationAclArgs, opts ...pulumi.ResourceOption) (*ApigApplicationAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Values == nil {
		return nil, errors.New("invalid value for required argument 'Values'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApigApplicationAcl
	err := ctx.RegisterResource("cloudru:index/apigApplicationAcl:ApigApplicationAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigApplicationAcl gets an existing ApigApplicationAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigApplicationAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigApplicationAclState, opts ...pulumi.ResourceOption) (*ApigApplicationAcl, error) {
	var resource ApigApplicationAcl
	err := ctx.ReadResource("cloudru:index/apigApplicationAcl:ApigApplicationAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigApplicationAcl resources.
type apigApplicationAclState struct {
	// The ID of the application to which the ACL rules belong.
	ApplicationId *string `pulumi:"applicationId"`
	// The ID of the dedicated instance to which the application belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The region where the application and ACL rules are located.
	Region *string `pulumi:"region"`
	// The ACL type.
	Type *string `pulumi:"type"`
	// The ACL values.
	Values []string `pulumi:"values"`
}

type ApigApplicationAclState struct {
	// The ID of the application to which the ACL rules belong.
	ApplicationId pulumi.StringPtrInput
	// The ID of the dedicated instance to which the application belongs.
	InstanceId pulumi.StringPtrInput
	// The region where the application and ACL rules are located.
	Region pulumi.StringPtrInput
	// The ACL type.
	Type pulumi.StringPtrInput
	// The ACL values.
	Values pulumi.StringArrayInput
}

func (ApigApplicationAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigApplicationAclState)(nil)).Elem()
}

type apigApplicationAclArgs struct {
	// The ID of the application to which the ACL rules belong.
	ApplicationId string `pulumi:"applicationId"`
	// The ID of the dedicated instance to which the application belongs.
	InstanceId string `pulumi:"instanceId"`
	// The region where the application and ACL rules are located.
	Region *string `pulumi:"region"`
	// The ACL type.
	Type string `pulumi:"type"`
	// The ACL values.
	Values []string `pulumi:"values"`
}

// The set of arguments for constructing a ApigApplicationAcl resource.
type ApigApplicationAclArgs struct {
	// The ID of the application to which the ACL rules belong.
	ApplicationId pulumi.StringInput
	// The ID of the dedicated instance to which the application belongs.
	InstanceId pulumi.StringInput
	// The region where the application and ACL rules are located.
	Region pulumi.StringPtrInput
	// The ACL type.
	Type pulumi.StringInput
	// The ACL values.
	Values pulumi.StringArrayInput
}

func (ApigApplicationAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigApplicationAclArgs)(nil)).Elem()
}

type ApigApplicationAclInput interface {
	pulumi.Input

	ToApigApplicationAclOutput() ApigApplicationAclOutput
	ToApigApplicationAclOutputWithContext(ctx context.Context) ApigApplicationAclOutput
}

func (*ApigApplicationAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigApplicationAcl)(nil)).Elem()
}

func (i *ApigApplicationAcl) ToApigApplicationAclOutput() ApigApplicationAclOutput {
	return i.ToApigApplicationAclOutputWithContext(context.Background())
}

func (i *ApigApplicationAcl) ToApigApplicationAclOutputWithContext(ctx context.Context) ApigApplicationAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigApplicationAclOutput)
}

// ApigApplicationAclArrayInput is an input type that accepts ApigApplicationAclArray and ApigApplicationAclArrayOutput values.
// You can construct a concrete instance of `ApigApplicationAclArrayInput` via:
//
//	ApigApplicationAclArray{ ApigApplicationAclArgs{...} }
type ApigApplicationAclArrayInput interface {
	pulumi.Input

	ToApigApplicationAclArrayOutput() ApigApplicationAclArrayOutput
	ToApigApplicationAclArrayOutputWithContext(context.Context) ApigApplicationAclArrayOutput
}

type ApigApplicationAclArray []ApigApplicationAclInput

func (ApigApplicationAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigApplicationAcl)(nil)).Elem()
}

func (i ApigApplicationAclArray) ToApigApplicationAclArrayOutput() ApigApplicationAclArrayOutput {
	return i.ToApigApplicationAclArrayOutputWithContext(context.Background())
}

func (i ApigApplicationAclArray) ToApigApplicationAclArrayOutputWithContext(ctx context.Context) ApigApplicationAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigApplicationAclArrayOutput)
}

// ApigApplicationAclMapInput is an input type that accepts ApigApplicationAclMap and ApigApplicationAclMapOutput values.
// You can construct a concrete instance of `ApigApplicationAclMapInput` via:
//
//	ApigApplicationAclMap{ "key": ApigApplicationAclArgs{...} }
type ApigApplicationAclMapInput interface {
	pulumi.Input

	ToApigApplicationAclMapOutput() ApigApplicationAclMapOutput
	ToApigApplicationAclMapOutputWithContext(context.Context) ApigApplicationAclMapOutput
}

type ApigApplicationAclMap map[string]ApigApplicationAclInput

func (ApigApplicationAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigApplicationAcl)(nil)).Elem()
}

func (i ApigApplicationAclMap) ToApigApplicationAclMapOutput() ApigApplicationAclMapOutput {
	return i.ToApigApplicationAclMapOutputWithContext(context.Background())
}

func (i ApigApplicationAclMap) ToApigApplicationAclMapOutputWithContext(ctx context.Context) ApigApplicationAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigApplicationAclMapOutput)
}

type ApigApplicationAclOutput struct{ *pulumi.OutputState }

func (ApigApplicationAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigApplicationAcl)(nil)).Elem()
}

func (o ApigApplicationAclOutput) ToApigApplicationAclOutput() ApigApplicationAclOutput {
	return o
}

func (o ApigApplicationAclOutput) ToApigApplicationAclOutputWithContext(ctx context.Context) ApigApplicationAclOutput {
	return o
}

// The ID of the application to which the ACL rules belong.
func (o ApigApplicationAclOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigApplicationAcl) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// The ID of the dedicated instance to which the application belongs.
func (o ApigApplicationAclOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigApplicationAcl) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region where the application and ACL rules are located.
func (o ApigApplicationAclOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigApplicationAcl) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ACL type.
func (o ApigApplicationAclOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigApplicationAcl) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The ACL values.
func (o ApigApplicationAclOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApigApplicationAcl) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

type ApigApplicationAclArrayOutput struct{ *pulumi.OutputState }

func (ApigApplicationAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigApplicationAcl)(nil)).Elem()
}

func (o ApigApplicationAclArrayOutput) ToApigApplicationAclArrayOutput() ApigApplicationAclArrayOutput {
	return o
}

func (o ApigApplicationAclArrayOutput) ToApigApplicationAclArrayOutputWithContext(ctx context.Context) ApigApplicationAclArrayOutput {
	return o
}

func (o ApigApplicationAclArrayOutput) Index(i pulumi.IntInput) ApigApplicationAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApigApplicationAcl {
		return vs[0].([]*ApigApplicationAcl)[vs[1].(int)]
	}).(ApigApplicationAclOutput)
}

type ApigApplicationAclMapOutput struct{ *pulumi.OutputState }

func (ApigApplicationAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigApplicationAcl)(nil)).Elem()
}

func (o ApigApplicationAclMapOutput) ToApigApplicationAclMapOutput() ApigApplicationAclMapOutput {
	return o
}

func (o ApigApplicationAclMapOutput) ToApigApplicationAclMapOutputWithContext(ctx context.Context) ApigApplicationAclMapOutput {
	return o
}

func (o ApigApplicationAclMapOutput) MapIndex(k pulumi.StringInput) ApigApplicationAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApigApplicationAcl {
		return vs[0].(map[string]*ApigApplicationAcl)[vs[1].(string)]
	}).(ApigApplicationAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigApplicationAclInput)(nil)).Elem(), &ApigApplicationAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigApplicationAclArrayInput)(nil)).Elem(), ApigApplicationAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigApplicationAclMapInput)(nil)).Elem(), ApigApplicationAclMap{})
	pulumi.RegisterOutputType(ApigApplicationAclOutput{})
	pulumi.RegisterOutputType(ApigApplicationAclArrayOutput{})
	pulumi.RegisterOutputType(ApigApplicationAclMapOutput{})
}

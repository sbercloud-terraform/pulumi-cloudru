// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package er

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a route table resource under the ER instance within SberCloud.
//
// Before using enterprise router, define custom endpoint as shown below:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/er"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			routeTableName := cfg.RequireObject("routeTableName")
//			_, err := er.NewRouteTable(ctx, "test", &er.RouteTableArgs{
//				InstanceId:  pulumi.Any(instanceId),
//				Name:        pulumi.Any(routeTableName),
//				Description: pulumi.String("Route table created by terraform"),
//				Tags: pulumi.StringMap{
//					"foo":   pulumi.String("bar"),
//					"owner": pulumi.String("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Route tables can be imported using their `id` and the related `instance_id`, separated by slashes (/), e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Er/routeTable:RouteTable test <instance_id>/<id>
// ```
type RouteTable struct {
	pulumi.CustomResourceState

	// The creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the route table.\
	// The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the ER instance to which the route table belongs.\
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Whether this route table is the default association route table.
	IsDefaultAssociation pulumi.BoolOutput `pulumi:"isDefaultAssociation"`
	// Whether this route table is the default propagation route table.
	IsDefaultPropagation pulumi.BoolOutput `pulumi:"isDefaultPropagation"`
	// Specifies the name of the route table.\
	// The name can contain `1` to `64` characters, only English letters, Chinese characters, digits, underscore (_),
	// hyphens (-) and dots (.) allowed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region where the ER instance and route table are located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The current status of the route table.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the key/value pairs to associate with the route table.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The latest update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewRouteTable registers a new resource with the given unique name, arguments, and options.
func NewRouteTable(ctx *pulumi.Context,
	name string, args *RouteTableArgs, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTable
	err := ctx.RegisterResource("sbercloud:Er/routeTable:RouteTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTable gets an existing RouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableState, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	var resource RouteTable
	err := ctx.ReadResource("sbercloud:Er/routeTable:RouteTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTable resources.
type routeTableState struct {
	// The creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the description of the route table.\
	// The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
	Description *string `pulumi:"description"`
	// Specifies the ID of the ER instance to which the route table belongs.\
	// Changing this parameter will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Whether this route table is the default association route table.
	IsDefaultAssociation *bool `pulumi:"isDefaultAssociation"`
	// Whether this route table is the default propagation route table.
	IsDefaultPropagation *bool `pulumi:"isDefaultPropagation"`
	// Specifies the name of the route table.\
	// The name can contain `1` to `64` characters, only English letters, Chinese characters, digits, underscore (_),
	// hyphens (-) and dots (.) allowed.
	Name *string `pulumi:"name"`
	// Specifies the region where the ER instance and route table are located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The current status of the route table.
	Status *string `pulumi:"status"`
	// Specifies the key/value pairs to associate with the route table.
	Tags map[string]string `pulumi:"tags"`
	// The latest update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type RouteTableState struct {
	// The creation time.
	CreatedAt pulumi.StringPtrInput
	// Specifies the description of the route table.\
	// The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
	Description pulumi.StringPtrInput
	// Specifies the ID of the ER instance to which the route table belongs.\
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Whether this route table is the default association route table.
	IsDefaultAssociation pulumi.BoolPtrInput
	// Whether this route table is the default propagation route table.
	IsDefaultPropagation pulumi.BoolPtrInput
	// Specifies the name of the route table.\
	// The name can contain `1` to `64` characters, only English letters, Chinese characters, digits, underscore (_),
	// hyphens (-) and dots (.) allowed.
	Name pulumi.StringPtrInput
	// Specifies the region where the ER instance and route table are located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The current status of the route table.
	Status pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the route table.
	Tags pulumi.StringMapInput
	// The latest update time.
	UpdatedAt pulumi.StringPtrInput
}

func (RouteTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableState)(nil)).Elem()
}

type routeTableArgs struct {
	// Specifies the description of the route table.\
	// The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
	Description *string `pulumi:"description"`
	// Specifies the ID of the ER instance to which the route table belongs.\
	// Changing this parameter will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the name of the route table.\
	// The name can contain `1` to `64` characters, only English letters, Chinese characters, digits, underscore (_),
	// hyphens (-) and dots (.) allowed.
	Name *string `pulumi:"name"`
	// Specifies the region where the ER instance and route table are located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the key/value pairs to associate with the route table.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a RouteTable resource.
type RouteTableArgs struct {
	// Specifies the description of the route table.\
	// The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
	Description pulumi.StringPtrInput
	// Specifies the ID of the ER instance to which the route table belongs.\
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the name of the route table.\
	// The name can contain `1` to `64` characters, only English letters, Chinese characters, digits, underscore (_),
	// hyphens (-) and dots (.) allowed.
	Name pulumi.StringPtrInput
	// Specifies the region where the ER instance and route table are located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the route table.
	Tags pulumi.StringMapInput
}

func (RouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableArgs)(nil)).Elem()
}

type RouteTableInput interface {
	pulumi.Input

	ToRouteTableOutput() RouteTableOutput
	ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput
}

func (*RouteTable) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (i *RouteTable) ToRouteTableOutput() RouteTableOutput {
	return i.ToRouteTableOutputWithContext(context.Background())
}

func (i *RouteTable) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableOutput)
}

// RouteTableArrayInput is an input type that accepts RouteTableArray and RouteTableArrayOutput values.
// You can construct a concrete instance of `RouteTableArrayInput` via:
//
//	RouteTableArray{ RouteTableArgs{...} }
type RouteTableArrayInput interface {
	pulumi.Input

	ToRouteTableArrayOutput() RouteTableArrayOutput
	ToRouteTableArrayOutputWithContext(context.Context) RouteTableArrayOutput
}

type RouteTableArray []RouteTableInput

func (RouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (i RouteTableArray) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return i.ToRouteTableArrayOutputWithContext(context.Background())
}

func (i RouteTableArray) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableArrayOutput)
}

// RouteTableMapInput is an input type that accepts RouteTableMap and RouteTableMapOutput values.
// You can construct a concrete instance of `RouteTableMapInput` via:
//
//	RouteTableMap{ "key": RouteTableArgs{...} }
type RouteTableMapInput interface {
	pulumi.Input

	ToRouteTableMapOutput() RouteTableMapOutput
	ToRouteTableMapOutputWithContext(context.Context) RouteTableMapOutput
}

type RouteTableMap map[string]RouteTableInput

func (RouteTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (i RouteTableMap) ToRouteTableMapOutput() RouteTableMapOutput {
	return i.ToRouteTableMapOutputWithContext(context.Background())
}

func (i RouteTableMap) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableMapOutput)
}

type RouteTableOutput struct{ *pulumi.OutputState }

func (RouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (o RouteTableOutput) ToRouteTableOutput() RouteTableOutput {
	return o
}

func (o RouteTableOutput) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return o
}

// The creation time.
func (o RouteTableOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the route table.\
// The description contain a maximum of `255` characters, and the angle brackets (< and >) are not allowed.
func (o RouteTableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the ER instance to which the route table belongs.\
// Changing this parameter will create a new resource.
func (o RouteTableOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Whether this route table is the default association route table.
func (o RouteTableOutput) IsDefaultAssociation() pulumi.BoolOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.BoolOutput { return v.IsDefaultAssociation }).(pulumi.BoolOutput)
}

// Whether this route table is the default propagation route table.
func (o RouteTableOutput) IsDefaultPropagation() pulumi.BoolOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.BoolOutput { return v.IsDefaultPropagation }).(pulumi.BoolOutput)
}

// Specifies the name of the route table.\
// The name can contain `1` to `64` characters, only English letters, Chinese characters, digits, underscore (_),
// hyphens (-) and dots (.) allowed.
func (o RouteTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region where the ER instance and route table are located.\
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o RouteTableOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The current status of the route table.
func (o RouteTableOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the route table.
func (o RouteTableOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The latest update time.
func (o RouteTableOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type RouteTableArrayOutput struct{ *pulumi.OutputState }

func (RouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) Index(i pulumi.IntInput) RouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].([]*RouteTable)[vs[1].(int)]
	}).(RouteTableOutput)
}

type RouteTableMapOutput struct{ *pulumi.OutputState }

func (RouteTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (o RouteTableMapOutput) ToRouteTableMapOutput() RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) MapIndex(k pulumi.StringInput) RouteTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].(map[string]*RouteTable)[vs[1].(string)]
	}).(RouteTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableInput)(nil)).Elem(), &RouteTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableArrayInput)(nil)).Elem(), RouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableMapInput)(nil)).Elem(), RouteTableMap{})
	pulumi.RegisterOutputType(RouteTableOutput{})
	pulumi.RegisterOutputType(RouteTableArrayOutput{})
	pulumi.RegisterOutputType(RouteTableMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use this data source to get a list of VPN connections.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			status := cfg.RequireObject("status")
//			name := cfg.RequireObject("name")
//			vpnType := cfg.RequireObject("vpnType")
//			gatewayId := cfg.RequireObject("gatewayId")
//			gatewayIp := cfg.RequireObject("gatewayIp")
//			_, err := sbercloud.GetVpnConnections(ctx, &sbercloud.GetVpnConnectionsArgs{
//				Status:    pulumi.StringRef(status),
//				Name:      pulumi.StringRef(name),
//				VpnType:   pulumi.StringRef(vpnType),
//				GatewayId: pulumi.StringRef(gatewayId),
//				GatewayIp: pulumi.StringRef(gatewayIp),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVpnConnections(ctx *pulumi.Context, args *GetVpnConnectionsArgs, opts ...pulumi.InvokeOption) (*GetVpnConnectionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpnConnectionsResult
	err := ctx.Invoke("sbercloud:index/getVpnConnections:getVpnConnections", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpnConnections.
type GetVpnConnectionsArgs struct {
	// Specifies the ID of the VPN connection.
	ConnectionId *string `pulumi:"connectionId"`
	// Specifies the gateway ID of the VPN connection.
	GatewayId *string `pulumi:"gatewayId"`
	// Specifies the gateway IP of the VPN connection.
	GatewayIp *string `pulumi:"gatewayIp"`
	// Specifies the name of the VPN connection.
	Name *string `pulumi:"name"`
	// Specifies the region in which to obtain the VPN customer gateways.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the status of the VPN connection.
	Status *string `pulumi:"status"`
	// Specifies the VPN type of the VPN connection.
	VpnType *string `pulumi:"vpnType"`
}

// A collection of values returned by getVpnConnections.
type GetVpnConnectionsResult struct {
	ConnectionId *string `pulumi:"connectionId"`
	// All resource connection that match the filter parameters.
	// The connections structure is documented below.
	Connections []GetVpnConnectionsConnection `pulumi:"connections"`
	// Indicates the gateway ID of the connection.
	GatewayId *string `pulumi:"gatewayId"`
	// Indicates the gateway IP of the connection.
	GatewayIp *string `pulumi:"gatewayIp"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates the name of the connection.
	Name   *string `pulumi:"name"`
	Region string  `pulumi:"region"`
	// Indicates the status of the connection.
	Status *string `pulumi:"status"`
	// Indicates the VPN type of the connection.
	VpnType *string `pulumi:"vpnType"`
}

func GetVpnConnectionsOutput(ctx *pulumi.Context, args GetVpnConnectionsOutputArgs, opts ...pulumi.InvokeOption) GetVpnConnectionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVpnConnectionsResultOutput, error) {
			args := v.(GetVpnConnectionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getVpnConnections:getVpnConnections", args, GetVpnConnectionsResultOutput{}, options).(GetVpnConnectionsResultOutput), nil
		}).(GetVpnConnectionsResultOutput)
}

// A collection of arguments for invoking getVpnConnections.
type GetVpnConnectionsOutputArgs struct {
	// Specifies the ID of the VPN connection.
	ConnectionId pulumi.StringPtrInput `pulumi:"connectionId"`
	// Specifies the gateway ID of the VPN connection.
	GatewayId pulumi.StringPtrInput `pulumi:"gatewayId"`
	// Specifies the gateway IP of the VPN connection.
	GatewayIp pulumi.StringPtrInput `pulumi:"gatewayIp"`
	// Specifies the name of the VPN connection.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to obtain the VPN customer gateways.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the status of the VPN connection.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the VPN type of the VPN connection.
	VpnType pulumi.StringPtrInput `pulumi:"vpnType"`
}

func (GetVpnConnectionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnConnectionsArgs)(nil)).Elem()
}

// A collection of values returned by getVpnConnections.
type GetVpnConnectionsResultOutput struct{ *pulumi.OutputState }

func (GetVpnConnectionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpnConnectionsResult)(nil)).Elem()
}

func (o GetVpnConnectionsResultOutput) ToGetVpnConnectionsResultOutput() GetVpnConnectionsResultOutput {
	return o
}

func (o GetVpnConnectionsResultOutput) ToGetVpnConnectionsResultOutputWithContext(ctx context.Context) GetVpnConnectionsResultOutput {
	return o
}

func (o GetVpnConnectionsResultOutput) ConnectionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) *string { return v.ConnectionId }).(pulumi.StringPtrOutput)
}

// All resource connection that match the filter parameters.
// The connections structure is documented below.
func (o GetVpnConnectionsResultOutput) Connections() GetVpnConnectionsConnectionArrayOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) []GetVpnConnectionsConnection { return v.Connections }).(GetVpnConnectionsConnectionArrayOutput)
}

// Indicates the gateway ID of the connection.
func (o GetVpnConnectionsResultOutput) GatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) *string { return v.GatewayId }).(pulumi.StringPtrOutput)
}

// Indicates the gateway IP of the connection.
func (o GetVpnConnectionsResultOutput) GatewayIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) *string { return v.GatewayIp }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVpnConnectionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates the name of the connection.
func (o GetVpnConnectionsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetVpnConnectionsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the status of the connection.
func (o GetVpnConnectionsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates the VPN type of the connection.
func (o GetVpnConnectionsResultOutput) VpnType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpnConnectionsResult) *string { return v.VpnType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpnConnectionsResultOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetApigApiAssociatedPluginsResult',
    'AwaitableGetApigApiAssociatedPluginsResult',
    'get_apig_api_associated_plugins',
    'get_apig_api_associated_plugins_output',
]

@pulumi.output_type
class GetApigApiAssociatedPluginsResult:
    """
    A collection of values returned by getApigApiAssociatedPlugins.
    """
    def __init__(__self__, api_id=None, env_id=None, env_name=None, id=None, instance_id=None, name=None, plugin_id=None, plugins=None, region=None, type=None):
        if api_id and not isinstance(api_id, str):
            raise TypeError("Expected argument 'api_id' to be a str")
        pulumi.set(__self__, "api_id", api_id)
        if env_id and not isinstance(env_id, str):
            raise TypeError("Expected argument 'env_id' to be a str")
        pulumi.set(__self__, "env_id", env_id)
        if env_name and not isinstance(env_name, str):
            raise TypeError("Expected argument 'env_name' to be a str")
        pulumi.set(__self__, "env_name", env_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plugin_id and not isinstance(plugin_id, str):
            raise TypeError("Expected argument 'plugin_id' to be a str")
        pulumi.set(__self__, "plugin_id", plugin_id)
        if plugins and not isinstance(plugins, list):
            raise TypeError("Expected argument 'plugins' to be a list")
        pulumi.set(__self__, "plugins", plugins)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> _builtins.str:
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="pluginId")
    def plugin_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "plugin_id")

    @_builtins.property
    @pulumi.getter
    def plugins(self) -> Sequence['outputs.GetApigApiAssociatedPluginsPluginResult']:
        return pulumi.get(self, "plugins")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


class AwaitableGetApigApiAssociatedPluginsResult(GetApigApiAssociatedPluginsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApigApiAssociatedPluginsResult(
            api_id=self.api_id,
            env_id=self.env_id,
            env_name=self.env_name,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            plugin_id=self.plugin_id,
            plugins=self.plugins,
            region=self.region,
            type=self.type)


def get_apig_api_associated_plugins(api_id: Optional[_builtins.str] = None,
                                    env_id: Optional[_builtins.str] = None,
                                    env_name: Optional[_builtins.str] = None,
                                    instance_id: Optional[_builtins.str] = None,
                                    name: Optional[_builtins.str] = None,
                                    plugin_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    type: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApigApiAssociatedPluginsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['envId'] = env_id
    __args__['envName'] = env_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['pluginId'] = plugin_id
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getApigApiAssociatedPlugins:getApigApiAssociatedPlugins', __args__, opts=opts, typ=GetApigApiAssociatedPluginsResult).value

    return AwaitableGetApigApiAssociatedPluginsResult(
        api_id=pulumi.get(__ret__, 'api_id'),
        env_id=pulumi.get(__ret__, 'env_id'),
        env_name=pulumi.get(__ret__, 'env_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        plugin_id=pulumi.get(__ret__, 'plugin_id'),
        plugins=pulumi.get(__ret__, 'plugins'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_apig_api_associated_plugins_output(api_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           env_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           env_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           plugin_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApigApiAssociatedPluginsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['envId'] = env_id
    __args__['envName'] = env_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['pluginId'] = plugin_id
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getApigApiAssociatedPlugins:getApigApiAssociatedPlugins', __args__, opts=opts, typ=GetApigApiAssociatedPluginsResult)
    return __ret__.apply(lambda __response__: GetApigApiAssociatedPluginsResult(
        api_id=pulumi.get(__response__, 'api_id'),
        env_id=pulumi.get(__response__, 'env_id'),
        env_name=pulumi.get(__response__, 'env_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        plugin_id=pulumi.get(__response__, 'plugin_id'),
        plugins=pulumi.get(__response__, 'plugins'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))

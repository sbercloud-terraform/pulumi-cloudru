// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a Snat rule resource within SberCloud Nat
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const snat1 = new sbercloud.nat.SnatRule("snat_1", {
 *     natGatewayId: "3c0dffda-7c76-452b-9dcc-5bce7ae56b17",
 *     networkId: "dc8632e2-d9ff-41b1-aa0c-d455557314a0",
 *     floatingIpId: "0a166fc5-a904-42fb-b1ef-cf18afeeddca",
 * });
 * ```
 *
 * ## Import
 *
 * Snat can be imported using the following format:
 *
 * ```sh
 * $ pulumi import sbercloud:Nat/snatRule:SnatRule snat_1 9e0713cb-0a2f-484e-8c7d-daecbb61dbe4
 * ```
 */
export class SnatRule extends pulumi.CustomResource {
    /**
     * Get an existing SnatRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnatRuleState, opts?: pulumi.CustomResourceOptions): SnatRule {
        return new SnatRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Nat/snatRule:SnatRule';

    /**
     * Returns true if the given object is an instance of SnatRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnatRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnatRule.__pulumiType;
    }

    /**
     * Specifies CIDR, which can be in the format of a network segment or a host IP address.
     * This parameter and `networkId` are alternative. Changing this creates a new snat rule.
     */
    declare public readonly cidr: pulumi.Output<string | undefined>;
    /**
     * The creation time of the SNAT rule.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specifies the description of the SNAT rule.
     * The value is a string of no more than `255` characters, and angle brackets (<>) are not allowed.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The actual floating IP address.
     */
    declare public /*out*/ readonly floatingIpAddress: pulumi.Output<string>;
    /**
     * ID of the floating ip this snat rule connets to.
     * Changing this creates a new snat rule.
     */
    declare public readonly floatingIpId: pulumi.Output<string>;
    /**
     * The frozen EIP associated with the SNAT rule.
     */
    declare public /*out*/ readonly freezedIpAddress: pulumi.Output<string>;
    /**
     * The global EIP addresses (separated by commas) connected by SNAT rule.
     */
    declare public /*out*/ readonly globalEipAddress: pulumi.Output<string>;
    /**
     * The IDs (separated by commas) of global EIPs connected by SNAT rule.
     */
    declare public readonly globalEipId: pulumi.Output<string>;
    /**
     * ID of the nat gateway this snat rule belongs to.
     * Changing this creates a new snat rule.
     */
    declare public readonly natGatewayId: pulumi.Output<string>;
    /**
     * @deprecated schema: Deprecated; Use 'subnet_id' instead.
     */
    declare public readonly networkId: pulumi.Output<string | undefined>;
    /**
     * The region in which to create the snat rule resource. If omitted, the provider-level region will be used. Changing this creates a new snat rule resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the scenario. The valid value is 0 (VPC scenario) and 1 (Direct Connect scenario).
     * Defaults to 0, only `cidr` can be specified over a Direct Connect connection.
     * Changing this creates a new snat rule.
     */
    declare public readonly sourceType: pulumi.Output<number | undefined>;
    /**
     * The status of the snat rule.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Specifies the network IDs of subnet connected by SNAT rule (VPC side).  
     * This parameter and `cidr` are alternative. Changing this will create a new resource.
     */
    declare public readonly subnetId: pulumi.Output<string>;

    /**
     * Create a SnatRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnatRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnatRuleArgs | SnatRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnatRuleState | undefined;
            resourceInputs["cidr"] = state?.cidr;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["floatingIpAddress"] = state?.floatingIpAddress;
            resourceInputs["floatingIpId"] = state?.floatingIpId;
            resourceInputs["freezedIpAddress"] = state?.freezedIpAddress;
            resourceInputs["globalEipAddress"] = state?.globalEipAddress;
            resourceInputs["globalEipId"] = state?.globalEipId;
            resourceInputs["natGatewayId"] = state?.natGatewayId;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["region"] = state?.region;
            resourceInputs["sourceType"] = state?.sourceType;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
        } else {
            const args = argsOrState as SnatRuleArgs | undefined;
            if (args?.natGatewayId === undefined && !opts.urn) {
                throw new Error("Missing required property 'natGatewayId'");
            }
            resourceInputs["cidr"] = args?.cidr;
            resourceInputs["description"] = args?.description;
            resourceInputs["floatingIpId"] = args?.floatingIpId;
            resourceInputs["globalEipId"] = args?.globalEipId;
            resourceInputs["natGatewayId"] = args?.natGatewayId;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["region"] = args?.region;
            resourceInputs["sourceType"] = args?.sourceType;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["floatingIpAddress"] = undefined /*out*/;
            resourceInputs["freezedIpAddress"] = undefined /*out*/;
            resourceInputs["globalEipAddress"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnatRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnatRule resources.
 */
export interface SnatRuleState {
    /**
     * Specifies CIDR, which can be in the format of a network segment or a host IP address.
     * This parameter and `networkId` are alternative. Changing this creates a new snat rule.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The creation time of the SNAT rule.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the description of the SNAT rule.
     * The value is a string of no more than `255` characters, and angle brackets (<>) are not allowed.
     */
    description?: pulumi.Input<string>;
    /**
     * The actual floating IP address.
     */
    floatingIpAddress?: pulumi.Input<string>;
    /**
     * ID of the floating ip this snat rule connets to.
     * Changing this creates a new snat rule.
     */
    floatingIpId?: pulumi.Input<string>;
    /**
     * The frozen EIP associated with the SNAT rule.
     */
    freezedIpAddress?: pulumi.Input<string>;
    /**
     * The global EIP addresses (separated by commas) connected by SNAT rule.
     */
    globalEipAddress?: pulumi.Input<string>;
    /**
     * The IDs (separated by commas) of global EIPs connected by SNAT rule.
     */
    globalEipId?: pulumi.Input<string>;
    /**
     * ID of the nat gateway this snat rule belongs to.
     * Changing this creates a new snat rule.
     */
    natGatewayId?: pulumi.Input<string>;
    /**
     * @deprecated schema: Deprecated; Use 'subnet_id' instead.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The region in which to create the snat rule resource. If omitted, the provider-level region will be used. Changing this creates a new snat rule resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scenario. The valid value is 0 (VPC scenario) and 1 (Direct Connect scenario).
     * Defaults to 0, only `cidr` can be specified over a Direct Connect connection.
     * Changing this creates a new snat rule.
     */
    sourceType?: pulumi.Input<number>;
    /**
     * The status of the snat rule.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the network IDs of subnet connected by SNAT rule (VPC side).  
     * This parameter and `cidr` are alternative. Changing this will create a new resource.
     */
    subnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnatRule resource.
 */
export interface SnatRuleArgs {
    /**
     * Specifies CIDR, which can be in the format of a network segment or a host IP address.
     * This parameter and `networkId` are alternative. Changing this creates a new snat rule.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Specifies the description of the SNAT rule.
     * The value is a string of no more than `255` characters, and angle brackets (<>) are not allowed.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the floating ip this snat rule connets to.
     * Changing this creates a new snat rule.
     */
    floatingIpId?: pulumi.Input<string>;
    /**
     * The IDs (separated by commas) of global EIPs connected by SNAT rule.
     */
    globalEipId?: pulumi.Input<string>;
    /**
     * ID of the nat gateway this snat rule belongs to.
     * Changing this creates a new snat rule.
     */
    natGatewayId: pulumi.Input<string>;
    /**
     * @deprecated schema: Deprecated; Use 'subnet_id' instead.
     */
    networkId?: pulumi.Input<string>;
    /**
     * The region in which to create the snat rule resource. If omitted, the provider-level region will be used. Changing this creates a new snat rule resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scenario. The valid value is 0 (VPC scenario) and 1 (Direct Connect scenario).
     * Defaults to 0, only `cidr` can be specified over a Direct Connect connection.
     * Changing this creates a new snat rule.
     */
    sourceType?: pulumi.Input<number>;
    /**
     * Specifies the network IDs of subnet connected by SNAT rule (VPC side).  
     * This parameter and `cidr` are alternative. Changing this will create a new resource.
     */
    subnetId?: pulumi.Input<string>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ApigChannel struct {
	pulumi.CustomResourceState

	// The distribution algorithm.
	BalanceStrategy pulumi.IntOutput `pulumi:"balanceStrategy"`
	// The creation time of the channel.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
	HealthCheck ApigChannelHealthCheckOutput `pulumi:"healthCheck"`
	// The ID of the dedicated instance to which the channel belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The backend server groups of the channel.
	MemberGroups ApigChannelMemberGroupArrayOutput `pulumi:"memberGroups"`
	// The member type of the channel.
	MemberType pulumi.StringOutput `pulumi:"memberType"`
	// The backend servers of the channel.
	Members ApigChannelMemberArrayOutput `pulumi:"members"`
	// The configuration of the microservice.
	Microservice ApigChannelMicroserviceOutput `pulumi:"microservice"`
	// The channel name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The default port for health check in channel.
	Port pulumi.IntOutput `pulumi:"port"`
	// The region where the dedicated instance is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The current status of the channel.
	Status pulumi.IntOutput `pulumi:"status"`
	// The type of the channel.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewApigChannel registers a new resource with the given unique name, arguments, and options.
func NewApigChannel(ctx *pulumi.Context,
	name string, args *ApigChannelArgs, opts ...pulumi.ResourceOption) (*ApigChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BalanceStrategy == nil {
		return nil, errors.New("invalid value for required argument 'BalanceStrategy'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApigChannel
	err := ctx.RegisterResource("cloudru:index/apigChannel:ApigChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigChannel gets an existing ApigChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigChannelState, opts ...pulumi.ResourceOption) (*ApigChannel, error) {
	var resource ApigChannel
	err := ctx.ReadResource("cloudru:index/apigChannel:ApigChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigChannel resources.
type apigChannelState struct {
	// The distribution algorithm.
	BalanceStrategy *int `pulumi:"balanceStrategy"`
	// The creation time of the channel.
	CreatedAt *string `pulumi:"createdAt"`
	// The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
	HealthCheck *ApigChannelHealthCheck `pulumi:"healthCheck"`
	// The ID of the dedicated instance to which the channel belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The backend server groups of the channel.
	MemberGroups []ApigChannelMemberGroup `pulumi:"memberGroups"`
	// The member type of the channel.
	MemberType *string `pulumi:"memberType"`
	// The backend servers of the channel.
	Members []ApigChannelMember `pulumi:"members"`
	// The configuration of the microservice.
	Microservice *ApigChannelMicroservice `pulumi:"microservice"`
	// The channel name.
	Name *string `pulumi:"name"`
	// The default port for health check in channel.
	Port *int `pulumi:"port"`
	// The region where the dedicated instance is located.
	Region *string `pulumi:"region"`
	// The current status of the channel.
	Status *int `pulumi:"status"`
	// The type of the channel.
	Type *string `pulumi:"type"`
}

type ApigChannelState struct {
	// The distribution algorithm.
	BalanceStrategy pulumi.IntPtrInput
	// The creation time of the channel.
	CreatedAt pulumi.StringPtrInput
	// The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
	HealthCheck ApigChannelHealthCheckPtrInput
	// The ID of the dedicated instance to which the channel belongs.
	InstanceId pulumi.StringPtrInput
	// The backend server groups of the channel.
	MemberGroups ApigChannelMemberGroupArrayInput
	// The member type of the channel.
	MemberType pulumi.StringPtrInput
	// The backend servers of the channel.
	Members ApigChannelMemberArrayInput
	// The configuration of the microservice.
	Microservice ApigChannelMicroservicePtrInput
	// The channel name.
	Name pulumi.StringPtrInput
	// The default port for health check in channel.
	Port pulumi.IntPtrInput
	// The region where the dedicated instance is located.
	Region pulumi.StringPtrInput
	// The current status of the channel.
	Status pulumi.IntPtrInput
	// The type of the channel.
	Type pulumi.StringPtrInput
}

func (ApigChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigChannelState)(nil)).Elem()
}

type apigChannelArgs struct {
	// The distribution algorithm.
	BalanceStrategy int `pulumi:"balanceStrategy"`
	// The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
	HealthCheck *ApigChannelHealthCheck `pulumi:"healthCheck"`
	// The ID of the dedicated instance to which the channel belongs.
	InstanceId string `pulumi:"instanceId"`
	// The backend server groups of the channel.
	MemberGroups []ApigChannelMemberGroup `pulumi:"memberGroups"`
	// The member type of the channel.
	MemberType *string `pulumi:"memberType"`
	// The backend servers of the channel.
	Members []ApigChannelMember `pulumi:"members"`
	// The configuration of the microservice.
	Microservice *ApigChannelMicroservice `pulumi:"microservice"`
	// The channel name.
	Name *string `pulumi:"name"`
	// The default port for health check in channel.
	Port int `pulumi:"port"`
	// The region where the dedicated instance is located.
	Region *string `pulumi:"region"`
	// The type of the channel.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ApigChannel resource.
type ApigChannelArgs struct {
	// The distribution algorithm.
	BalanceStrategy pulumi.IntInput
	// The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
	HealthCheck ApigChannelHealthCheckPtrInput
	// The ID of the dedicated instance to which the channel belongs.
	InstanceId pulumi.StringInput
	// The backend server groups of the channel.
	MemberGroups ApigChannelMemberGroupArrayInput
	// The member type of the channel.
	MemberType pulumi.StringPtrInput
	// The backend servers of the channel.
	Members ApigChannelMemberArrayInput
	// The configuration of the microservice.
	Microservice ApigChannelMicroservicePtrInput
	// The channel name.
	Name pulumi.StringPtrInput
	// The default port for health check in channel.
	Port pulumi.IntInput
	// The region where the dedicated instance is located.
	Region pulumi.StringPtrInput
	// The type of the channel.
	Type pulumi.StringPtrInput
}

func (ApigChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigChannelArgs)(nil)).Elem()
}

type ApigChannelInput interface {
	pulumi.Input

	ToApigChannelOutput() ApigChannelOutput
	ToApigChannelOutputWithContext(ctx context.Context) ApigChannelOutput
}

func (*ApigChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigChannel)(nil)).Elem()
}

func (i *ApigChannel) ToApigChannelOutput() ApigChannelOutput {
	return i.ToApigChannelOutputWithContext(context.Background())
}

func (i *ApigChannel) ToApigChannelOutputWithContext(ctx context.Context) ApigChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigChannelOutput)
}

// ApigChannelArrayInput is an input type that accepts ApigChannelArray and ApigChannelArrayOutput values.
// You can construct a concrete instance of `ApigChannelArrayInput` via:
//
//	ApigChannelArray{ ApigChannelArgs{...} }
type ApigChannelArrayInput interface {
	pulumi.Input

	ToApigChannelArrayOutput() ApigChannelArrayOutput
	ToApigChannelArrayOutputWithContext(context.Context) ApigChannelArrayOutput
}

type ApigChannelArray []ApigChannelInput

func (ApigChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigChannel)(nil)).Elem()
}

func (i ApigChannelArray) ToApigChannelArrayOutput() ApigChannelArrayOutput {
	return i.ToApigChannelArrayOutputWithContext(context.Background())
}

func (i ApigChannelArray) ToApigChannelArrayOutputWithContext(ctx context.Context) ApigChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigChannelArrayOutput)
}

// ApigChannelMapInput is an input type that accepts ApigChannelMap and ApigChannelMapOutput values.
// You can construct a concrete instance of `ApigChannelMapInput` via:
//
//	ApigChannelMap{ "key": ApigChannelArgs{...} }
type ApigChannelMapInput interface {
	pulumi.Input

	ToApigChannelMapOutput() ApigChannelMapOutput
	ToApigChannelMapOutputWithContext(context.Context) ApigChannelMapOutput
}

type ApigChannelMap map[string]ApigChannelInput

func (ApigChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigChannel)(nil)).Elem()
}

func (i ApigChannelMap) ToApigChannelMapOutput() ApigChannelMapOutput {
	return i.ToApigChannelMapOutputWithContext(context.Background())
}

func (i ApigChannelMap) ToApigChannelMapOutputWithContext(ctx context.Context) ApigChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigChannelMapOutput)
}

type ApigChannelOutput struct{ *pulumi.OutputState }

func (ApigChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigChannel)(nil)).Elem()
}

func (o ApigChannelOutput) ToApigChannelOutput() ApigChannelOutput {
	return o
}

func (o ApigChannelOutput) ToApigChannelOutputWithContext(ctx context.Context) ApigChannelOutput {
	return o
}

// The distribution algorithm.
func (o ApigChannelOutput) BalanceStrategy() pulumi.IntOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.IntOutput { return v.BalanceStrategy }).(pulumi.IntOutput)
}

// The creation time of the channel.
func (o ApigChannelOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
func (o ApigChannelOutput) HealthCheck() ApigChannelHealthCheckOutput {
	return o.ApplyT(func(v *ApigChannel) ApigChannelHealthCheckOutput { return v.HealthCheck }).(ApigChannelHealthCheckOutput)
}

// The ID of the dedicated instance to which the channel belongs.
func (o ApigChannelOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The backend server groups of the channel.
func (o ApigChannelOutput) MemberGroups() ApigChannelMemberGroupArrayOutput {
	return o.ApplyT(func(v *ApigChannel) ApigChannelMemberGroupArrayOutput { return v.MemberGroups }).(ApigChannelMemberGroupArrayOutput)
}

// The member type of the channel.
func (o ApigChannelOutput) MemberType() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.StringOutput { return v.MemberType }).(pulumi.StringOutput)
}

// The backend servers of the channel.
func (o ApigChannelOutput) Members() ApigChannelMemberArrayOutput {
	return o.ApplyT(func(v *ApigChannel) ApigChannelMemberArrayOutput { return v.Members }).(ApigChannelMemberArrayOutput)
}

// The configuration of the microservice.
func (o ApigChannelOutput) Microservice() ApigChannelMicroserviceOutput {
	return o.ApplyT(func(v *ApigChannel) ApigChannelMicroserviceOutput { return v.Microservice }).(ApigChannelMicroserviceOutput)
}

// The channel name.
func (o ApigChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The default port for health check in channel.
func (o ApigChannelOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The region where the dedicated instance is located.
func (o ApigChannelOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The current status of the channel.
func (o ApigChannelOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// The type of the channel.
func (o ApigChannelOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigChannel) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ApigChannelArrayOutput struct{ *pulumi.OutputState }

func (ApigChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigChannel)(nil)).Elem()
}

func (o ApigChannelArrayOutput) ToApigChannelArrayOutput() ApigChannelArrayOutput {
	return o
}

func (o ApigChannelArrayOutput) ToApigChannelArrayOutputWithContext(ctx context.Context) ApigChannelArrayOutput {
	return o
}

func (o ApigChannelArrayOutput) Index(i pulumi.IntInput) ApigChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApigChannel {
		return vs[0].([]*ApigChannel)[vs[1].(int)]
	}).(ApigChannelOutput)
}

type ApigChannelMapOutput struct{ *pulumi.OutputState }

func (ApigChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigChannel)(nil)).Elem()
}

func (o ApigChannelMapOutput) ToApigChannelMapOutput() ApigChannelMapOutput {
	return o
}

func (o ApigChannelMapOutput) ToApigChannelMapOutputWithContext(ctx context.Context) ApigChannelMapOutput {
	return o
}

func (o ApigChannelMapOutput) MapIndex(k pulumi.StringInput) ApigChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApigChannel {
		return vs[0].(map[string]*ApigChannel)[vs[1].(string)]
	}).(ApigChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigChannelInput)(nil)).Elem(), &ApigChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigChannelArrayInput)(nil)).Elem(), ApigChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigChannelMapInput)(nil)).Elem(), ApigChannelMap{})
	pulumi.RegisterOutputType(ApigChannelOutput{})
	pulumi.RegisterOutputType(ApigChannelArrayOutput{})
	pulumi.RegisterOutputType(ApigChannelMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EipAssociateArgs, EipAssociateState } from "./eipAssociate";
export type EipAssociate = import("./eipAssociate").EipAssociate;
export const EipAssociate: typeof import("./eipAssociate").EipAssociate = null as any;
utilities.lazyLoad(exports, ["EipAssociate"], () => require("./eipAssociate"));

export { GetFlavorsArgs, GetFlavorsResult, GetFlavorsOutputArgs } from "./getFlavors";
export const getFlavors: typeof import("./getFlavors").getFlavors = null as any;
export const getFlavorsOutput: typeof import("./getFlavors").getFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getFlavors","getFlavorsOutput"], () => require("./getFlavors"));

export { GetInstanceArgs, GetInstanceResult, GetInstanceOutputArgs } from "./getInstance";
export const getInstance: typeof import("./getInstance").getInstance = null as any;
export const getInstanceOutput: typeof import("./getInstance").getInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getInstance","getInstanceOutput"], () => require("./getInstance"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetServergroupsArgs, GetServergroupsResult, GetServergroupsOutputArgs } from "./getServergroups";
export const getServergroups: typeof import("./getServergroups").getServergroups = null as any;
export const getServergroupsOutput: typeof import("./getServergroups").getServergroupsOutput = null as any;
utilities.lazyLoad(exports, ["getServergroups","getServergroupsOutput"], () => require("./getServergroups"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InterfaceAttachArgs, InterfaceAttachState } from "./interfaceAttach";
export type InterfaceAttach = import("./interfaceAttach").InterfaceAttach;
export const InterfaceAttach: typeof import("./interfaceAttach").InterfaceAttach = null as any;
utilities.lazyLoad(exports, ["InterfaceAttach"], () => require("./interfaceAttach"));

export { KeypairArgs, KeypairState } from "./keypair";
export type Keypair = import("./keypair").Keypair;
export const Keypair: typeof import("./keypair").Keypair = null as any;
utilities.lazyLoad(exports, ["Keypair"], () => require("./keypair"));

export { ServergroupArgs, ServergroupState } from "./servergroup";
export type Servergroup = import("./servergroup").Servergroup;
export const Servergroup: typeof import("./servergroup").Servergroup = null as any;
utilities.lazyLoad(exports, ["Servergroup"], () => require("./servergroup"));

export { VolumeAttachArgs, VolumeAttachState } from "./volumeAttach";
export type VolumeAttach = import("./volumeAttach").VolumeAttach;
export const VolumeAttach: typeof import("./volumeAttach").VolumeAttach = null as any;
utilities.lazyLoad(exports, ["VolumeAttach"], () => require("./volumeAttach"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudru:Ecs/eipAssociate:EipAssociate":
                return new EipAssociate(name, <any>undefined, { urn })
            case "cloudru:Ecs/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "cloudru:Ecs/interfaceAttach:InterfaceAttach":
                return new InterfaceAttach(name, <any>undefined, { urn })
            case "cloudru:Ecs/keypair:Keypair":
                return new Keypair(name, <any>undefined, { urn })
            case "cloudru:Ecs/servergroup:Servergroup":
                return new Servergroup(name, <any>undefined, { urn })
            case "cloudru:Ecs/volumeAttach:VolumeAttach":
                return new VolumeAttach(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudru", "Ecs/eipAssociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "Ecs/instance", _module)
pulumi.runtime.registerResourceModule("cloudru", "Ecs/interfaceAttach", _module)
pulumi.runtime.registerResourceModule("cloudru", "Ecs/keypair", _module)
pulumi.runtime.registerResourceModule("cloudru", "Ecs/servergroup", _module)
pulumi.runtime.registerResourceModule("cloudru", "Ecs/volumeAttach", _module)

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SfsTurboDir struct {
	pulumi.CustomResourceState

	// Specifies the group ID of the SFS Turbo directory.
	Gid pulumi.IntPtrOutput `pulumi:"gid"`
	// Specifies the SFS Turbo directory permissions.
	Mode pulumi.IntPtrOutput `pulumi:"mode"`
	// Specifies the valid full path of SFS Turbo directory.
	Path   pulumi.StringOutput `pulumi:"path"`
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the SFS Turbo ID.
	ShareId pulumi.StringOutput `pulumi:"shareId"`
	// Specifies the user ID of the SFS Turbo directory.
	Uid pulumi.IntPtrOutput `pulumi:"uid"`
}

// NewSfsTurboDir registers a new resource with the given unique name, arguments, and options.
func NewSfsTurboDir(ctx *pulumi.Context,
	name string, args *SfsTurboDirArgs, opts ...pulumi.ResourceOption) (*SfsTurboDir, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ShareId == nil {
		return nil, errors.New("invalid value for required argument 'ShareId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SfsTurboDir
	err := ctx.RegisterResource("cloudru:index/sfsTurboDir:SfsTurboDir", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSfsTurboDir gets an existing SfsTurboDir resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSfsTurboDir(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SfsTurboDirState, opts ...pulumi.ResourceOption) (*SfsTurboDir, error) {
	var resource SfsTurboDir
	err := ctx.ReadResource("cloudru:index/sfsTurboDir:SfsTurboDir", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SfsTurboDir resources.
type sfsTurboDirState struct {
	// Specifies the group ID of the SFS Turbo directory.
	Gid *int `pulumi:"gid"`
	// Specifies the SFS Turbo directory permissions.
	Mode *int `pulumi:"mode"`
	// Specifies the valid full path of SFS Turbo directory.
	Path   *string `pulumi:"path"`
	Region *string `pulumi:"region"`
	// Specifies the SFS Turbo ID.
	ShareId *string `pulumi:"shareId"`
	// Specifies the user ID of the SFS Turbo directory.
	Uid *int `pulumi:"uid"`
}

type SfsTurboDirState struct {
	// Specifies the group ID of the SFS Turbo directory.
	Gid pulumi.IntPtrInput
	// Specifies the SFS Turbo directory permissions.
	Mode pulumi.IntPtrInput
	// Specifies the valid full path of SFS Turbo directory.
	Path   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the SFS Turbo ID.
	ShareId pulumi.StringPtrInput
	// Specifies the user ID of the SFS Turbo directory.
	Uid pulumi.IntPtrInput
}

func (SfsTurboDirState) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboDirState)(nil)).Elem()
}

type sfsTurboDirArgs struct {
	// Specifies the group ID of the SFS Turbo directory.
	Gid *int `pulumi:"gid"`
	// Specifies the SFS Turbo directory permissions.
	Mode *int `pulumi:"mode"`
	// Specifies the valid full path of SFS Turbo directory.
	Path   string  `pulumi:"path"`
	Region *string `pulumi:"region"`
	// Specifies the SFS Turbo ID.
	ShareId string `pulumi:"shareId"`
	// Specifies the user ID of the SFS Turbo directory.
	Uid *int `pulumi:"uid"`
}

// The set of arguments for constructing a SfsTurboDir resource.
type SfsTurboDirArgs struct {
	// Specifies the group ID of the SFS Turbo directory.
	Gid pulumi.IntPtrInput
	// Specifies the SFS Turbo directory permissions.
	Mode pulumi.IntPtrInput
	// Specifies the valid full path of SFS Turbo directory.
	Path   pulumi.StringInput
	Region pulumi.StringPtrInput
	// Specifies the SFS Turbo ID.
	ShareId pulumi.StringInput
	// Specifies the user ID of the SFS Turbo directory.
	Uid pulumi.IntPtrInput
}

func (SfsTurboDirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboDirArgs)(nil)).Elem()
}

type SfsTurboDirInput interface {
	pulumi.Input

	ToSfsTurboDirOutput() SfsTurboDirOutput
	ToSfsTurboDirOutputWithContext(ctx context.Context) SfsTurboDirOutput
}

func (*SfsTurboDir) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboDir)(nil)).Elem()
}

func (i *SfsTurboDir) ToSfsTurboDirOutput() SfsTurboDirOutput {
	return i.ToSfsTurboDirOutputWithContext(context.Background())
}

func (i *SfsTurboDir) ToSfsTurboDirOutputWithContext(ctx context.Context) SfsTurboDirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDirOutput)
}

// SfsTurboDirArrayInput is an input type that accepts SfsTurboDirArray and SfsTurboDirArrayOutput values.
// You can construct a concrete instance of `SfsTurboDirArrayInput` via:
//
//	SfsTurboDirArray{ SfsTurboDirArgs{...} }
type SfsTurboDirArrayInput interface {
	pulumi.Input

	ToSfsTurboDirArrayOutput() SfsTurboDirArrayOutput
	ToSfsTurboDirArrayOutputWithContext(context.Context) SfsTurboDirArrayOutput
}

type SfsTurboDirArray []SfsTurboDirInput

func (SfsTurboDirArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboDir)(nil)).Elem()
}

func (i SfsTurboDirArray) ToSfsTurboDirArrayOutput() SfsTurboDirArrayOutput {
	return i.ToSfsTurboDirArrayOutputWithContext(context.Background())
}

func (i SfsTurboDirArray) ToSfsTurboDirArrayOutputWithContext(ctx context.Context) SfsTurboDirArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDirArrayOutput)
}

// SfsTurboDirMapInput is an input type that accepts SfsTurboDirMap and SfsTurboDirMapOutput values.
// You can construct a concrete instance of `SfsTurboDirMapInput` via:
//
//	SfsTurboDirMap{ "key": SfsTurboDirArgs{...} }
type SfsTurboDirMapInput interface {
	pulumi.Input

	ToSfsTurboDirMapOutput() SfsTurboDirMapOutput
	ToSfsTurboDirMapOutputWithContext(context.Context) SfsTurboDirMapOutput
}

type SfsTurboDirMap map[string]SfsTurboDirInput

func (SfsTurboDirMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboDir)(nil)).Elem()
}

func (i SfsTurboDirMap) ToSfsTurboDirMapOutput() SfsTurboDirMapOutput {
	return i.ToSfsTurboDirMapOutputWithContext(context.Background())
}

func (i SfsTurboDirMap) ToSfsTurboDirMapOutputWithContext(ctx context.Context) SfsTurboDirMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDirMapOutput)
}

type SfsTurboDirOutput struct{ *pulumi.OutputState }

func (SfsTurboDirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboDir)(nil)).Elem()
}

func (o SfsTurboDirOutput) ToSfsTurboDirOutput() SfsTurboDirOutput {
	return o
}

func (o SfsTurboDirOutput) ToSfsTurboDirOutputWithContext(ctx context.Context) SfsTurboDirOutput {
	return o
}

// Specifies the group ID of the SFS Turbo directory.
func (o SfsTurboDirOutput) Gid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SfsTurboDir) pulumi.IntPtrOutput { return v.Gid }).(pulumi.IntPtrOutput)
}

// Specifies the SFS Turbo directory permissions.
func (o SfsTurboDirOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SfsTurboDir) pulumi.IntPtrOutput { return v.Mode }).(pulumi.IntPtrOutput)
}

// Specifies the valid full path of SFS Turbo directory.
func (o SfsTurboDirOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDir) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

func (o SfsTurboDirOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDir) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the SFS Turbo ID.
func (o SfsTurboDirOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDir) pulumi.StringOutput { return v.ShareId }).(pulumi.StringOutput)
}

// Specifies the user ID of the SFS Turbo directory.
func (o SfsTurboDirOutput) Uid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SfsTurboDir) pulumi.IntPtrOutput { return v.Uid }).(pulumi.IntPtrOutput)
}

type SfsTurboDirArrayOutput struct{ *pulumi.OutputState }

func (SfsTurboDirArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboDir)(nil)).Elem()
}

func (o SfsTurboDirArrayOutput) ToSfsTurboDirArrayOutput() SfsTurboDirArrayOutput {
	return o
}

func (o SfsTurboDirArrayOutput) ToSfsTurboDirArrayOutputWithContext(ctx context.Context) SfsTurboDirArrayOutput {
	return o
}

func (o SfsTurboDirArrayOutput) Index(i pulumi.IntInput) SfsTurboDirOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SfsTurboDir {
		return vs[0].([]*SfsTurboDir)[vs[1].(int)]
	}).(SfsTurboDirOutput)
}

type SfsTurboDirMapOutput struct{ *pulumi.OutputState }

func (SfsTurboDirMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboDir)(nil)).Elem()
}

func (o SfsTurboDirMapOutput) ToSfsTurboDirMapOutput() SfsTurboDirMapOutput {
	return o
}

func (o SfsTurboDirMapOutput) ToSfsTurboDirMapOutputWithContext(ctx context.Context) SfsTurboDirMapOutput {
	return o
}

func (o SfsTurboDirMapOutput) MapIndex(k pulumi.StringInput) SfsTurboDirOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SfsTurboDir {
		return vs[0].(map[string]*SfsTurboDir)[vs[1].(string)]
	}).(SfsTurboDirOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDirInput)(nil)).Elem(), &SfsTurboDir{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDirArrayInput)(nil)).Elem(), SfsTurboDirArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDirMapInput)(nil)).Elem(), SfsTurboDirMap{})
	pulumi.RegisterOutputType(SfsTurboDirOutput{})
	pulumi.RegisterOutputType(SfsTurboDirArrayOutput{})
	pulumi.RegisterOutputType(SfsTurboDirMapOutput{})
}

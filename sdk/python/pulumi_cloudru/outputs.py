# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ApigApplicationQuotaAssociateApplication',
    'ApigChannelHealthCheck',
    'ApigChannelMember',
    'ApigChannelMemberGroup',
    'ApigChannelMicroservice',
    'ApigChannelMicroserviceCceConfig',
    'ApigChannelMicroserviceCseConfig',
    'CbrBackupShareMember',
    'CbrCheckpointBackup',
    'DcsParametersConfigurationParameter',
    'DcsRestoreRestoreRecord',
    'DdsParameterTemplateCompareDifference',
    'DdsParameterTemplateCopyParameter',
    'DdsParameterTemplateParameter',
    'DmsKafkaMessageProducePropertyList',
    'DmsRocketmqConsumptionVerifyResendResult',
    'DmsRocketmqDeadLetterResendResendResult',
    'DmsRocketmqInstanceConfig',
    'DmsRocketmqInstanceCrossVpcAccess',
    'DmsRocketmqMigrationTaskBinding',
    'DmsRocketmqMigrationTaskExchange',
    'DmsRocketmqMigrationTaskQueue',
    'DmsRocketmqMigrationTaskSubscriptionGroup',
    'DmsRocketmqMigrationTaskTopicConfig',
    'DmsRocketmqMigrationTaskVhost',
    'DmsRocketmqTopicBroker',
    'DmsRocketmqTopicQueue',
    'DmsRocketmqUserGroupPerm',
    'DmsRocketmqUserTopicPerm',
    'ElbIpgroupIpList',
    'ElbL7policyFixedResponseConfig',
    'ElbL7policyFixedResponseConfigInsertHeadersConfig',
    'ElbL7policyFixedResponseConfigInsertHeadersConfigConfig',
    'ElbL7policyFixedResponseConfigRemoveHeadersConfig',
    'ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig',
    'ElbL7policyFixedResponseConfigTrafficLimitConfig',
    'ElbL7policyRedirectPoolsConfig',
    'ElbL7policyRedirectPoolsExtendConfig',
    'ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig',
    'ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig',
    'ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig',
    'ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig',
    'ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig',
    'ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig',
    'ElbL7policyRedirectPoolsStickySessionConfig',
    'ElbL7policyRedirectUrlConfig',
    'ElbL7policyRedirectUrlConfigInsertHeadersConfig',
    'ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig',
    'ElbL7policyRedirectUrlConfigRemoveHeadersConfig',
    'ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig',
    'ElbL7ruleCondition',
    'ElbListenerPortRange',
    'ElbMemberReason',
    'ElbMemberStatus',
    'ElbMemberStatusReason',
    'ElbPoolPersistence',
    'ElbSecurityPolicyListener',
    'FgsApplicationRepository',
    'FgsApplicationStackResource',
    'FgsAsyncInvokeConfigurationOnFailure',
    'FgsAsyncInvokeConfigurationOnSuccess',
    'GesGraphEncryption',
    'GesGraphLtsOperationTrace',
    'GesGraphPublicIp',
    'GesGraphVertexIdType',
    'ObsBucketAclAccountPermission',
    'ObsBucketAclLogDeliveryUserPermission',
    'ObsBucketAclOwnerPermission',
    'ObsBucketAclPublicPermission',
    'SfsTurboDuTaskDirUsage',
    'SfsTurboDuTaskDirUsageFileCount',
    'SfsTurboObsTargetObs',
    'SfsTurboObsTargetObsAttributes',
    'SfsTurboObsTargetObsPolicy',
    'SfsTurboObsTargetObsPolicyAutoExportPolicy',
    'SmnSubscriptionExtension',
    'SmnSubscriptionFilterPolicy',
    'SwrOrganizationPermissionsSelfPermission',
    'SwrOrganizationPermissionsUser',
    'VpnConnectionIkepolicy',
    'VpnConnectionIkepolicyDpd',
    'VpnConnectionIpsecpolicy',
    'VpnConnectionPolicyRule',
    'VpnGatewayCertificate',
    'VpnGatewayEip1',
    'VpnGatewayEip2',
    'VpnGatewayMasterEip',
    'VpnGatewaySlaveEip',
    'GetApigAclPoliciesPolicyResult',
    'GetApigApiAssociatedAclPoliciesPolicyResult',
    'GetApigApiAssociatedApplicationsApplicationResult',
    'GetApigApiAssociatedPluginsPluginResult',
    'GetApigApiAssociatedSignaturesSignatureResult',
    'GetApigApiAssociatedThrottlingPoliciesPolicyResult',
    'GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleResult',
    'GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleResult',
    'GetApigApiBackendParamResult',
    'GetApigApiBasicConfigurationsConfigurationResult',
    'GetApigApiFuncGraphResult',
    'GetApigApiFuncGraphPolicyResult',
    'GetApigApiFuncGraphPolicyBackendParamResult',
    'GetApigApiFuncGraphPolicyConditionResult',
    'GetApigApiMockResult',
    'GetApigApiMockPolicyResult',
    'GetApigApiMockPolicyBackendParamResult',
    'GetApigApiMockPolicyConditionResult',
    'GetApigApiRequestParamResult',
    'GetApigApiWebResult',
    'GetApigApiWebPolicyResult',
    'GetApigApiWebPolicyBackendParamResult',
    'GetApigApiWebPolicyConditionResult',
    'GetApigAppcodesAppcodeResult',
    'GetApigApplicationQuotasQuotaResult',
    'GetApigApplicationsApplicationResult',
    'GetApigChannelsVpcChannelResult',
    'GetApigChannelsVpcChannelMemberGroupResult',
    'GetApigChannelsVpcChannelMemberGroupMicroserviceLabelResult',
    'GetApigCustomAuthorizersAuthorizerResult',
    'GetApigCustomAuthorizersAuthorizerIdentityResult',
    'GetApigEndpointConnectionsConnectionResult',
    'GetApigEnvironmentVariablesVariableResult',
    'GetApigGroupsGroupResult',
    'GetApigGroupsGroupEnvironmentResult',
    'GetApigGroupsGroupEnvironmentVariableResult',
    'GetApigGroupsGroupUrlDomainResult',
    'GetApigInstanceFeaturesFeatureResult',
    'GetApigInstancesInstanceResult',
    'GetApigSignaturesSignatureResult',
    'GetApigThrottlingPoliciesPolicyResult',
    'GetApigThrottlingPoliciesPolicyAppThrottleResult',
    'GetApigThrottlingPoliciesPolicyUserThrottleResult',
    'GetCbhAvailabilityZonesAvailabilityZoneResult',
    'GetCbhFlavorsFlavorResult',
    'GetCbhInstancesInstanceResult',
    'GetCbrBackupChildrenResult',
    'GetCbrBackupChildrenExtendInfoResult',
    'GetCbrBackupChildrenReplicationRecordResult',
    'GetCbrBackupChildrenReplicationRecordExtraInfoResult',
    'GetCbrBackupExtendInfoResult',
    'GetCbrBackupReplicationRecordResult',
    'GetCbrBackupReplicationRecordExtraInfoResult',
    'GetCbrPoliciesPolicyResult',
    'GetCbrPoliciesPolicyAssociatedVaultResult',
    'GetCbrPoliciesPolicyBackupCycleResult',
    'GetCbrPoliciesPolicyLongTermRetentionResult',
    'GetCdmFlavorsFlavorResult',
    'GetDcsAccountsAccountResult',
    'GetDmsKafkaConsumerGroupsGroupResult',
    'GetDmsKafkaConsumerGroupsGroupGroupMessageOffsetResult',
    'GetDmsKafkaConsumerGroupsGroupMemberResult',
    'GetDmsKafkaConsumerGroupsGroupMemberAssignmentResult',
    'GetDmsKafkaMessagesMessageResult',
    'GetDmsKafkaUsersUserResult',
    'GetDmsRabbitmqFlavorsFlavorResult',
    'GetDmsRabbitmqFlavorsFlavorIoResult',
    'GetDmsRabbitmqFlavorsFlavorPropertyResult',
    'GetDmsRabbitmqFlavorsFlavorSupportFeatureResult',
    'GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyResult',
    'GetDmsRocketmqConsumerGroupAccessUsersPolicyResult',
    'GetDmsRocketmqConsumerGroupsGroupResult',
    'GetDmsRocketmqConsumersClientResult',
    'GetDmsRocketmqConsumersClientSubscriptionResult',
    'GetDmsRocketmqExtendFlavorsFlavorResult',
    'GetDmsRocketmqExtendFlavorsFlavorIoResult',
    'GetDmsRocketmqExtendFlavorsFlavorPropertyResult',
    'GetDmsRocketmqExtendFlavorsFlavorSupportFeatureResult',
    'GetDmsRocketmqFlavorsFlavorResult',
    'GetDmsRocketmqFlavorsFlavorIoResult',
    'GetDmsRocketmqFlavorsFlavorPropertyResult',
    'GetDmsRocketmqFlavorsFlavorSupportFeatureResult',
    'GetDmsRocketmqFlavorsFlavorSupportFeaturePropertyResult',
    'GetDmsRocketmqInstancesInstanceResult',
    'GetDmsRocketmqInstancesInstanceCrossVpcAccessResult',
    'GetDmsRocketmqMessageTracesTraceResult',
    'GetDmsRocketmqMessagesMessageResult',
    'GetDmsRocketmqMessagesMessagePropertyListResult',
    'GetDmsRocketmqMigrationTasksTaskResult',
    'GetDmsRocketmqTopicAccessUsersPolicyResult',
    'GetDmsRocketmqTopicsTopicResult',
    'GetDmsRocketmqTopicsTopicBrokerResult',
    'GetDmsRocketmqUsersUserResult',
    'GetDmsRocketmqUsersUserGroupPermResult',
    'GetDmsRocketmqUsersUserTopicPermResult',
    'GetElbFlavorsFlavorResult',
    'GetElbPoolsPoolResult',
    'GetElbPoolsPoolListenerResult',
    'GetElbPoolsPoolLoadbalancerResult',
    'GetElbPoolsPoolMemberResult',
    'GetElbPoolsPoolPersistenceResult',
    'GetElbPoolsPoolQuicCidHashStrategyResult',
    'GetFgsApplicationTemplatesTemplateResult',
    'GetFgsApplicationsApplicationResult',
    'GetFgsDependencyVersionsVersionResult',
    'GetFgsFunctionEventsEventResult',
    'GetFgsFunctionTriggersTriggerResult',
    'GetFgsFunctionsFunctionResult',
    'GetFgsQuotasQuotaResult',
    'GetKpsFailedTasksTaskResult',
    'GetKpsRunningTasksTaskResult',
    'GetSfsTurboDataTasksTaskResult',
    'GetSfsTurboDuTasksTaskResult',
    'GetSfsTurboDuTasksTaskDirUsageResult',
    'GetSfsTurboDuTasksTaskDirUsageFileCountResult',
    'GetSfsTurboObsTargetsTargetResult',
    'GetSfsTurboObsTargetsTargetObResult',
    'GetSfsTurboPermRulesRuleResult',
    'GetVpnConnectionHealthChecksConnectionHealthCheckResult',
    'GetVpnConnectionsConnectionResult',
    'GetVpnConnectionsConnectionIkepolicyResult',
    'GetVpnConnectionsConnectionIkepolicyDpdResult',
    'GetVpnConnectionsConnectionIpsecpolicyResult',
    'GetVpnConnectionsConnectionPolicyRuleResult',
    'GetVpnCustomerGatewaysCustomerGatewayResult',
    'GetVpnCustomerGatewaysCustomerGatewayCaCertificateResult',
    'GetVpnGatewaysGatewayResult',
    'GetVpnGatewaysGatewayEipResult',
]

@pulumi.output_type
class ApigApplicationQuotaAssociateApplication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bindTime":
            suggest = "bind_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigApplicationQuotaAssociateApplication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigApplicationQuotaAssociateApplication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigApplicationQuotaAssociateApplication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: _builtins.str,
                 bind_time: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The application ID bound to the application quota.
        :param _builtins.str bind_time: The binding time, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        if bind_time is not None:
            pulumi.set(__self__, "bind_time", bind_time)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The application ID bound to the application quota.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> Optional[_builtins.str]:
        """
        The binding time, in RFC3339 format.
        """
        return pulumi.get(self, "bind_time")


@pulumi.output_type
class ApigChannelHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "thresholdAbnormal":
            suggest = "threshold_abnormal"
        elif key == "thresholdNormal":
            suggest = "threshold_normal"
        elif key == "enableClientSsl":
            suggest = "enable_client_ssl"
        elif key == "httpCodes":
            suggest = "http_codes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: _builtins.int,
                 protocol: _builtins.str,
                 threshold_abnormal: _builtins.int,
                 threshold_normal: _builtins.int,
                 timeout: _builtins.int,
                 enable_client_ssl: Optional[_builtins.bool] = None,
                 http_codes: Optional[_builtins.str] = None,
                 method: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 status: Optional[_builtins.int] = None):
        """
        :param _builtins.int interval: The interval between consecutive check, in second.
        :param _builtins.str protocol: The rotocol for performing health check on backend servers.
        :param _builtins.int threshold_abnormal: The unhealthy threshold, which refers to the number of consecutive failed check required for a backend server to be considered unhealthy.
        :param _builtins.int threshold_normal: The the healthy threshold, which refers to the number of consecutive successful checks required for a backend server to be considered healthy.
        :param _builtins.int timeout: The timeout for determining whether a health check fails, in second.
        :param _builtins.bool enable_client_ssl: Whether to enable two-way authentication.
        :param _builtins.str http_codes: The response codes for determining a successful HTTP response.
        :param _builtins.str method: The request method for health check.
        :param _builtins.str path: The destination path for health check.
        :param _builtins.int port: The destination host port for health check.
        :param _builtins.int status: The status of health check.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "threshold_abnormal", threshold_abnormal)
        pulumi.set(__self__, "threshold_normal", threshold_normal)
        pulumi.set(__self__, "timeout", timeout)
        if enable_client_ssl is not None:
            pulumi.set(__self__, "enable_client_ssl", enable_client_ssl)
        if http_codes is not None:
            pulumi.set(__self__, "http_codes", http_codes)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        The interval between consecutive check, in second.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The rotocol for performing health check on backend servers.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="thresholdAbnormal")
    def threshold_abnormal(self) -> _builtins.int:
        """
        The unhealthy threshold, which refers to the number of consecutive failed check required for a backend server to be considered unhealthy.
        """
        return pulumi.get(self, "threshold_abnormal")

    @_builtins.property
    @pulumi.getter(name="thresholdNormal")
    def threshold_normal(self) -> _builtins.int:
        """
        The the healthy threshold, which refers to the number of consecutive successful checks required for a backend server to be considered healthy.
        """
        return pulumi.get(self, "threshold_normal")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for determining whether a health check fails, in second.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="enableClientSsl")
    def enable_client_ssl(self) -> Optional[_builtins.bool]:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "enable_client_ssl")

    @_builtins.property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Optional[_builtins.str]:
        """
        The response codes for determining a successful HTTP response.
        """
        return pulumi.get(self, "http_codes")

    @_builtins.property
    @pulumi.getter
    def method(self) -> Optional[_builtins.str]:
        """
        The request method for health check.
        """
        return pulumi.get(self, "method")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The destination path for health check.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        The destination host port for health check.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The status of health check.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ApigChannelMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "isBackup":
            suggest = "is_backup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: Optional[_builtins.str] = None,
                 host: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 is_backup: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 status: Optional[_builtins.int] = None,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str group_name: The group name of the backend server.
        :param _builtins.str host: The IP address of the backend server.
        :param _builtins.str id: The ID of the backend server.
        :param _builtins.bool is_backup: Whether this member is the backup member.
        :param _builtins.str name: The name of the backend server.
        :param _builtins.int port: The port of the backend server.
        :param _builtins.int status: The status of the backend server.
        :param _builtins.int weight: The weight of current backend server.
        """
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_backup is not None:
            pulumi.set(__self__, "is_backup", is_backup)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[_builtins.str]:
        """
        The group name of the backend server.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        """
        The IP address of the backend server.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the backend server.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isBackup")
    def is_backup(self) -> Optional[_builtins.bool]:
        """
        Whether this member is the backup member.
        """
        return pulumi.get(self, "is_backup")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name of the backend server.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        The port of the backend server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.int]:
        """
        The status of the backend server.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        The weight of current backend server.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ApigChannelMemberGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "microserviceLabels":
            suggest = "microservice_labels"
        elif key == "microservicePort":
            suggest = "microservice_port"
        elif key == "microserviceVersion":
            suggest = "microservice_version"
        elif key == "referenceVpcChannelId":
            suggest = "reference_vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMemberGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMemberGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMemberGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 description: Optional[_builtins.str] = None,
                 microservice_labels: Optional[Mapping[str, _builtins.str]] = None,
                 microservice_port: Optional[_builtins.int] = None,
                 microservice_version: Optional[_builtins.str] = None,
                 reference_vpc_channel_id: Optional[_builtins.str] = None,
                 weight: Optional[_builtins.int] = None):
        """
        :param _builtins.str name: The name of the member group.
        :param _builtins.str description: The description of the member group.
        :param Mapping[str, _builtins.str] microservice_labels: The microservice tags of the backend server group.
        :param _builtins.int microservice_port: The microservice port of the backend server group.
        :param _builtins.str microservice_version: The microservice version of the backend server group.
        :param _builtins.str reference_vpc_channel_id: The ID of the reference load balance channel.
        :param _builtins.int weight: The weight of the current member group.
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if microservice_labels is not None:
            pulumi.set(__self__, "microservice_labels", microservice_labels)
        if microservice_port is not None:
            pulumi.set(__self__, "microservice_port", microservice_port)
        if microservice_version is not None:
            pulumi.set(__self__, "microservice_version", microservice_version)
        if reference_vpc_channel_id is not None:
            pulumi.set(__self__, "reference_vpc_channel_id", reference_vpc_channel_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the member group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the member group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="microserviceLabels")
    def microservice_labels(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The microservice tags of the backend server group.
        """
        return pulumi.get(self, "microservice_labels")

    @_builtins.property
    @pulumi.getter(name="microservicePort")
    def microservice_port(self) -> Optional[_builtins.int]:
        """
        The microservice port of the backend server group.
        """
        return pulumi.get(self, "microservice_port")

    @_builtins.property
    @pulumi.getter(name="microserviceVersion")
    def microservice_version(self) -> Optional[_builtins.str]:
        """
        The microservice version of the backend server group.
        """
        return pulumi.get(self, "microservice_version")

    @_builtins.property
    @pulumi.getter(name="referenceVpcChannelId")
    def reference_vpc_channel_id(self) -> Optional[_builtins.str]:
        """
        The ID of the reference load balance channel.
        """
        return pulumi.get(self, "reference_vpc_channel_id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        """
        The weight of the current member group.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class ApigChannelMicroservice(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cceConfig":
            suggest = "cce_config"
        elif key == "cseConfig":
            suggest = "cse_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMicroservice. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMicroservice.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMicroservice.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cce_config: Optional['outputs.ApigChannelMicroserviceCceConfig'] = None,
                 cse_config: Optional['outputs.ApigChannelMicroserviceCseConfig'] = None):
        """
        :param 'ApigChannelMicroserviceCceConfigArgs' cce_config: The CCE microservice details.
        :param 'ApigChannelMicroserviceCseConfigArgs' cse_config: schema:Internal; The CSE microservice details.
        """
        if cce_config is not None:
            pulumi.set(__self__, "cce_config", cce_config)
        if cse_config is not None:
            pulumi.set(__self__, "cse_config", cse_config)

    @_builtins.property
    @pulumi.getter(name="cceConfig")
    def cce_config(self) -> Optional['outputs.ApigChannelMicroserviceCceConfig']:
        """
        The CCE microservice details.
        """
        return pulumi.get(self, "cce_config")

    @_builtins.property
    @pulumi.getter(name="cseConfig")
    def cse_config(self) -> Optional['outputs.ApigChannelMicroserviceCseConfig']:
        """
        schema:Internal; The CSE microservice details.
        """
        return pulumi.get(self, "cse_config")


@pulumi.output_type
class ApigChannelMicroserviceCceConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "workloadType":
            suggest = "workload_type"
        elif key == "labelKey":
            suggest = "label_key"
        elif key == "labelValue":
            suggest = "label_value"
        elif key == "workloadName":
            suggest = "workload_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMicroserviceCceConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMicroserviceCceConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMicroserviceCceConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: _builtins.str,
                 namespace: _builtins.str,
                 workload_type: _builtins.str,
                 label_key: Optional[_builtins.str] = None,
                 label_value: Optional[_builtins.str] = None,
                 workload_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str cluster_id: The ID of the CCE cluster.
        :param _builtins.str namespace: The name of the CCE namespace.
        :param _builtins.str workload_type: The workload type.
        :param _builtins.str label_key: The service label key.
        :param _builtins.str label_value: The service label value.
        :param _builtins.str workload_name: The workload name.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "workload_type", workload_type)
        if label_key is not None:
            pulumi.set(__self__, "label_key", label_key)
        if label_value is not None:
            pulumi.set(__self__, "label_value", label_value)
        if workload_name is not None:
            pulumi.set(__self__, "workload_name", workload_name)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> _builtins.str:
        """
        The ID of the CCE cluster.
        """
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        """
        The name of the CCE namespace.
        """
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter(name="workloadType")
    def workload_type(self) -> _builtins.str:
        """
        The workload type.
        """
        return pulumi.get(self, "workload_type")

    @_builtins.property
    @pulumi.getter(name="labelKey")
    def label_key(self) -> Optional[_builtins.str]:
        """
        The service label key.
        """
        return pulumi.get(self, "label_key")

    @_builtins.property
    @pulumi.getter(name="labelValue")
    def label_value(self) -> Optional[_builtins.str]:
        """
        The service label value.
        """
        return pulumi.get(self, "label_value")

    @_builtins.property
    @pulumi.getter(name="workloadName")
    def workload_name(self) -> Optional[_builtins.str]:
        """
        The workload name.
        """
        return pulumi.get(self, "workload_name")


@pulumi.output_type
class ApigChannelMicroserviceCseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "engineId":
            suggest = "engine_id"
        elif key == "serviceId":
            suggest = "service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApigChannelMicroserviceCseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApigChannelMicroserviceCseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApigChannelMicroserviceCseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 engine_id: _builtins.str,
                 service_id: _builtins.str):
        """
        :param _builtins.str engine_id: schema:Internal; The microservice engine ID.
        :param _builtins.str service_id: schema:Internal; The microservice ID.
        """
        pulumi.set(__self__, "engine_id", engine_id)
        pulumi.set(__self__, "service_id", service_id)

    @_builtins.property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> _builtins.str:
        """
        schema:Internal; The microservice engine ID.
        """
        return pulumi.get(self, "engine_id")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> _builtins.str:
        """
        schema:Internal; The microservice ID.
        """
        return pulumi.get(self, "service_id")


@pulumi.output_type
class CbrBackupShareMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destProjectId":
            suggest = "dest_project_id"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "vaultId":
            suggest = "vault_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CbrBackupShareMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CbrBackupShareMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CbrBackupShareMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_project_id: _builtins.str,
                 created_at: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 image_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None,
                 vault_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str dest_project_id: The ID of the project with which the backup is shared.
        :param _builtins.str created_at: The creation time of the backup shared member.
        :param _builtins.str id: The ID of the backup shared member record.
        :param _builtins.str image_id: The ID of the image registered with the shared backup copy.
        :param _builtins.str status: The backup shared status.
        :param _builtins.str updated_at: The latest update time of the backup shared member.
        :param _builtins.str vault_id: The ID of the vault where the shared backup is stored.
        """
        pulumi.set(__self__, "dest_project_id", dest_project_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if vault_id is not None:
            pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="destProjectId")
    def dest_project_id(self) -> _builtins.str:
        """
        The ID of the project with which the backup is shared.
        """
        return pulumi.get(self, "dest_project_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The creation time of the backup shared member.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The ID of the backup shared member record.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[_builtins.str]:
        """
        The ID of the image registered with the shared backup copy.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The backup shared status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The latest update time of the backup shared member.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> Optional[_builtins.str]:
        """
        The ID of the vault where the shared backup is stored.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class CbrCheckpointBackup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "protectedAt":
            suggest = "protected_at"
        elif key == "resourceSize":
            suggest = "resource_size"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CbrCheckpointBackup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CbrCheckpointBackup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CbrCheckpointBackup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: _builtins.str,
                 type: _builtins.str,
                 id: Optional[_builtins.str] = None,
                 protected_at: Optional[_builtins.str] = None,
                 resource_size: Optional[_builtins.int] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str resource_id: The ID of backup resource.
        :param _builtins.str type: The type of the backup resource.
        :param _builtins.str id: The backup ID.
        :param _builtins.str protected_at: The backup time.
        :param _builtins.int resource_size: The backup resource size.
        :param _builtins.str status: The backup status.
        :param _builtins.str updated_at: The latest update time of the backup.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if protected_at is not None:
            pulumi.set(__self__, "protected_at", protected_at)
        if resource_size is not None:
            pulumi.set(__self__, "resource_size", resource_size)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The ID of backup resource.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the backup resource.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="protectedAt")
    def protected_at(self) -> Optional[_builtins.str]:
        """
        The backup time.
        """
        return pulumi.get(self, "protected_at")

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> Optional[_builtins.int]:
        """
        The backup resource size.
        """
        return pulumi.get(self, "resource_size")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The latest update time of the backup.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class DcsParametersConfigurationParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "needRestart":
            suggest = "need_restart"
        elif key == "userPermission":
            suggest = "user_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DcsParametersConfigurationParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DcsParametersConfigurationParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DcsParametersConfigurationParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 need_restart: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 user_permission: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Indicates the parameter name.
        :param _builtins.bool need_restart: Indicates whether a restart is required.
        :param _builtins.str type: Indicates the parameter type.
        :param _builtins.str user_permission: Indicates a user permission
        :param _builtins.str value: Indicates the parameter value.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if need_restart is not None:
            pulumi.set(__self__, "need_restart", need_restart)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_permission is not None:
            pulumi.set(__self__, "user_permission", user_permission)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="needRestart")
    def need_restart(self) -> Optional[_builtins.bool]:
        """
        Indicates whether a restart is required.
        """
        return pulumi.get(self, "need_restart")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userPermission")
    def user_permission(self) -> Optional[_builtins.str]:
        """
        Indicates a user permission
        """
        return pulumi.get(self, "user_permission")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DcsRestoreRestoreRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "backupName":
            suggest = "backup_name"
        elif key == "backupRemark":
            suggest = "backup_remark"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "errorCode":
            suggest = "error_code"
        elif key == "restoreId":
            suggest = "restore_id"
        elif key == "restoreName":
            suggest = "restore_name"
        elif key == "restoreRemark":
            suggest = "restore_remark"
        elif key == "sourceInstanceId":
            suggest = "source_instance_id"
        elif key == "sourceInstanceName":
            suggest = "source_instance_name"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DcsRestoreRestoreRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DcsRestoreRestoreRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DcsRestoreRestoreRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: Optional[_builtins.str] = None,
                 backup_name: Optional[_builtins.str] = None,
                 backup_remark: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 error_code: Optional[_builtins.str] = None,
                 progress: Optional[_builtins.str] = None,
                 restore_id: Optional[_builtins.str] = None,
                 restore_name: Optional[_builtins.str] = None,
                 restore_remark: Optional[_builtins.str] = None,
                 source_instance_id: Optional[_builtins.str] = None,
                 source_instance_name: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str backup_id: ID of the backup record.
        :param _builtins.str backup_name: Name of the backup record.
        :param _builtins.str backup_remark: Description of DCS instance backup.
        :param _builtins.str created_at: Time at which the restoration task is created.
        :param _builtins.str error_code: Error code returned if DCS instance restoration fails.
        :param _builtins.str progress: Restoration progress.
        :param _builtins.str restore_id: ID of the restoration record.
        :param _builtins.str restore_name: Name of the restoration record.
        :param _builtins.str restore_remark: Description of DCS instance restoration.
        :param _builtins.str status: Restoration status:
        :param _builtins.str updated_at: Time at which DCS instance restoration completed.
        """
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if backup_name is not None:
            pulumi.set(__self__, "backup_name", backup_name)
        if backup_remark is not None:
            pulumi.set(__self__, "backup_remark", backup_remark)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if restore_id is not None:
            pulumi.set(__self__, "restore_id", restore_id)
        if restore_name is not None:
            pulumi.set(__self__, "restore_name", restore_name)
        if restore_remark is not None:
            pulumi.set(__self__, "restore_remark", restore_remark)
        if source_instance_id is not None:
            pulumi.set(__self__, "source_instance_id", source_instance_id)
        if source_instance_name is not None:
            pulumi.set(__self__, "source_instance_name", source_instance_name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[_builtins.str]:
        """
        ID of the backup record.
        """
        return pulumi.get(self, "backup_id")

    @_builtins.property
    @pulumi.getter(name="backupName")
    def backup_name(self) -> Optional[_builtins.str]:
        """
        Name of the backup record.
        """
        return pulumi.get(self, "backup_name")

    @_builtins.property
    @pulumi.getter(name="backupRemark")
    def backup_remark(self) -> Optional[_builtins.str]:
        """
        Description of DCS instance backup.
        """
        return pulumi.get(self, "backup_remark")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Time at which the restoration task is created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        Error code returned if DCS instance restoration fails.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[_builtins.str]:
        """
        Restoration progress.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="restoreId")
    def restore_id(self) -> Optional[_builtins.str]:
        """
        ID of the restoration record.
        """
        return pulumi.get(self, "restore_id")

    @_builtins.property
    @pulumi.getter(name="restoreName")
    def restore_name(self) -> Optional[_builtins.str]:
        """
        Name of the restoration record.
        """
        return pulumi.get(self, "restore_name")

    @_builtins.property
    @pulumi.getter(name="restoreRemark")
    def restore_remark(self) -> Optional[_builtins.str]:
        """
        Description of DCS instance restoration.
        """
        return pulumi.get(self, "restore_remark")

    @_builtins.property
    @pulumi.getter(name="sourceInstanceId")
    def source_instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_instance_id")

    @_builtins.property
    @pulumi.getter(name="sourceInstanceName")
    def source_instance_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "source_instance_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Restoration status:
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Time at which DCS instance restoration completed.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class DdsParameterTemplateCompareDifference(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "parameterName":
            suggest = "parameter_name"
        elif key == "sourceValue":
            suggest = "source_value"
        elif key == "targetValue":
            suggest = "target_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdsParameterTemplateCompareDifference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdsParameterTemplateCompareDifference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdsParameterTemplateCompareDifference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameter_name: Optional[_builtins.str] = None,
                 source_value: Optional[_builtins.str] = None,
                 target_value: Optional[_builtins.str] = None):
        """
        :param _builtins.str parameter_name: Indicates the parameter name.
        :param _builtins.str source_value: Indicates the parameter value in the source parameter template.
        :param _builtins.str target_value: Indicates the parameter value in the destination parameter template.
        """
        if parameter_name is not None:
            pulumi.set(__self__, "parameter_name", parameter_name)
        if source_value is not None:
            pulumi.set(__self__, "source_value", source_value)
        if target_value is not None:
            pulumi.set(__self__, "target_value", target_value)

    @_builtins.property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter name.
        """
        return pulumi.get(self, "parameter_name")

    @_builtins.property
    @pulumi.getter(name="sourceValue")
    def source_value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value in the source parameter template.
        """
        return pulumi.get(self, "source_value")

    @_builtins.property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value in the destination parameter template.
        """
        return pulumi.get(self, "target_value")


@pulumi.output_type
class DdsParameterTemplateCopyParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartRequired":
            suggest = "restart_required"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdsParameterTemplateCopyParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdsParameterTemplateCopyParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdsParameterTemplateCopyParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 readonly: Optional[_builtins.bool] = None,
                 restart_required: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None,
                 value_range: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the description of replicated parameter template.
               The value is left blank by default. The description must consist of a maximum of **256** characters and cannot contain
               the carriage return character or the following special characters: >!<"&'=
               Changing this creates a new resource.
        :param _builtins.str name: Specifies the name of replicated parameter template.
               The parameter template name can contain **1** to **64** characters. It can contain only letters, digits, hyphens (-),
               underscores (_), and periods (.).
               Changing this creates a new resource.
        :param _builtins.bool readonly: Indicates whether the parameter is read-only.
               + If the value is **true**, the parameter is read-only.
               + If the value is **false**, the parameter is not read-only.
        :param _builtins.bool restart_required: Indicates whether the instance needs to be restarted.
               + If the value is **true**, restart is required.
               + If the value is **false**, restart is not required.
        :param _builtins.str type: Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        :param _builtins.str value: Indicates the parameter value.
        :param _builtins.str value_range: Indicates the value range.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the description of replicated parameter template.
        The value is left blank by default. The description must consist of a maximum of **256** characters and cannot contain
        the carriage return character or the following special characters: >!<"&'=
        Changing this creates a new resource.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of replicated parameter template.
        The parameter template name can contain **1** to **64** characters. It can contain only letters, digits, hyphens (-),
        underscores (_), and periods (.).
        Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the parameter is read-only.
        + If the value is **true**, the parameter is read-only.
        + If the value is **false**, the parameter is not read-only.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the instance needs to be restarted.
        + If the value is **true**, restart is required.
        + If the value is **false**, restart is not required.
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[_builtins.str]:
        """
        Indicates the value range.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class DdsParameterTemplateParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "restartRequired":
            suggest = "restart_required"
        elif key == "valueRange":
            suggest = "value_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DdsParameterTemplateParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DdsParameterTemplateParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DdsParameterTemplateParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[_builtins.str] = None,
                 name: Optional[_builtins.str] = None,
                 readonly: Optional[_builtins.bool] = None,
                 restart_required: Optional[_builtins.bool] = None,
                 type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None,
                 value_range: Optional[_builtins.str] = None):
        """
        :param _builtins.str description: Specifies the parameter template description.
               The description must consist of a maximum of 256 characters and cannot contain the carriage
               return character or the following special characters: >!<"&'=.
        :param _builtins.str name: Specifies the parameter template name.
               The value must be 1 to 64 characters, which can contain only letters, digits, hyphens (-),
               underscores (_), and periods (.).
        :param _builtins.bool readonly: Indicates whether the parameter is read-only.
               + If the value is **true**, the parameter is read-only.
               + If the value is **false**, the parameter is not read-only.
        :param _builtins.bool restart_required: Indicates whether the instance needs to be restarted.
               + If the value is **true**, restart is required.
               + If the value is **false**, restart is not required.
        :param _builtins.str type: Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        :param _builtins.str value: Indicates the parameter value.
        :param _builtins.str value_range: Indicates the value range.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if restart_required is not None:
            pulumi.set(__self__, "restart_required", restart_required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_range is not None:
            pulumi.set(__self__, "value_range", value_range)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter template description.
        The description must consist of a maximum of 256 characters and cannot contain the carriage
        return character or the following special characters: >!<"&'=.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the parameter template name.
        The value must be 1 to 64 characters, which can contain only letters, digits, hyphens (-),
        underscores (_), and periods (.).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def readonly(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the parameter is read-only.
        + If the value is **true**, the parameter is read-only.
        + If the value is **false**, the parameter is not read-only.
        """
        return pulumi.get(self, "readonly")

    @_builtins.property
    @pulumi.getter(name="restartRequired")
    def restart_required(self) -> Optional[_builtins.bool]:
        """
        Indicates whether the instance needs to be restarted.
        + If the value is **true**, restart is required.
        + If the value is **false**, restart is not required.
        """
        return pulumi.get(self, "restart_required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter type. The value can be integer, string, boolean, float, or list.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Indicates the parameter value.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueRange")
    def value_range(self) -> Optional[_builtins.str]:
        """
        Indicates the value range.
        """
        return pulumi.get(self, "value_range")


@pulumi.output_type
class DmsKafkaMessageProducePropertyList(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class DmsRocketmqConsumptionVerifyResendResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "messageId":
            suggest = "message_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsRocketmqConsumptionVerifyResendResult. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsRocketmqConsumptionVerifyResendResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsRocketmqConsumptionVerifyResendResult.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 message_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str error_code: Indicates the error code.
        :param _builtins.str error_message: Indicates the error message.
        :param _builtins.str message_id: Indicates the message ID.
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if message_id is not None:
            pulumi.set(__self__, "message_id", message_id)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        Indicates the error code.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> Optional[_builtins.str]:
        """
        Indicates the message ID.
        """
        return pulumi.get(self, "message_id")


@pulumi.output_type
class DmsRocketmqDeadLetterResendResendResult(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorCode":
            suggest = "error_code"
        elif key == "errorMessage":
            suggest = "error_message"
        elif key == "messageId":
            suggest = "message_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsRocketmqDeadLetterResendResendResult. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsRocketmqDeadLetterResendResendResult.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsRocketmqDeadLetterResendResendResult.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_code: Optional[_builtins.str] = None,
                 error_message: Optional[_builtins.str] = None,
                 message_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str error_code: Indicates the error code.
        :param _builtins.str error_message: Indicates the error message.
        :param _builtins.str message_id: Indicates the message ID.
        """
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if message_id is not None:
            pulumi.set(__self__, "message_id", message_id)

    @_builtins.property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[_builtins.str]:
        """
        Indicates the error code.
        """
        return pulumi.get(self, "error_code")

    @_builtins.property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[_builtins.str]:
        """
        Indicates the error message.
        """
        return pulumi.get(self, "error_message")

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> Optional[_builtins.str]:
        """
        Indicates the message ID.
        """
        return pulumi.get(self, "message_id")


@pulumi.output_type
class DmsRocketmqInstanceConfig(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Specifies the config name.
        :param _builtins.str value: Specifies the config value.
               
               > When `name` is **fileReservedTime**, `value` ranges from `1` to `720` and unit is **hour**. Defaults to `48`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the config name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Specifies the config value.

        > When `name` is **fileReservedTime**, `value` ranges from `1` to `720` and unit is **hour**. Defaults to `48`.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DmsRocketmqInstanceCrossVpcAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advertisedIp":
            suggest = "advertised_ip"
        elif key == "lisenterIp":
            suggest = "lisenter_ip"
        elif key == "listenerIp":
            suggest = "listener_ip"
        elif key == "portId":
            suggest = "port_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsRocketmqInstanceCrossVpcAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsRocketmqInstanceCrossVpcAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsRocketmqInstanceCrossVpcAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advertised_ip: Optional[_builtins.str] = None,
                 lisenter_ip: Optional[_builtins.str] = None,
                 listener_ip: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 port_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str advertised_ip: The advertised IP Address or domain name.
        :param _builtins.str listener_ip: The listener IP address.
        :param _builtins.int port: The port number.
        :param _builtins.str port_id: The port ID associated with the address.
        """
        if advertised_ip is not None:
            pulumi.set(__self__, "advertised_ip", advertised_ip)
        if lisenter_ip is not None:
            pulumi.set(__self__, "lisenter_ip", lisenter_ip)
        if listener_ip is not None:
            pulumi.set(__self__, "listener_ip", listener_ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if port_id is not None:
            pulumi.set(__self__, "port_id", port_id)

    @_builtins.property
    @pulumi.getter(name="advertisedIp")
    def advertised_ip(self) -> Optional[_builtins.str]:
        """
        The advertised IP Address or domain name.
        """
        return pulumi.get(self, "advertised_ip")

    @_builtins.property
    @pulumi.getter(name="lisenterIp")
    @_utilities.deprecated("""typo in lisenter_ip, please use \"listener_ip\" instead.""")
    def lisenter_ip(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "lisenter_ip")

    @_builtins.property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> Optional[_builtins.str]:
        """
        The listener IP address.
        """
        return pulumi.get(self, "listener_ip")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        The port number.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> Optional[_builtins.str]:
        """
        The port ID associated with the address.
        """
        return pulumi.get(self, "port_id")


@pulumi.output_type
class DmsRocketmqMigrationTaskBinding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "routingKey":
            suggest = "routing_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsRocketmqMigrationTaskBinding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsRocketmqMigrationTaskBinding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsRocketmqMigrationTaskBinding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination: Optional[_builtins.str] = None,
                 destination_type: Optional[_builtins.str] = None,
                 routing_key: Optional[_builtins.str] = None,
                 source: Optional[_builtins.str] = None,
                 vhost: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination: Specifies the message target. Changing this creates a new resource.
        :param _builtins.str destination_type: Specifies the message target type.
               Changing this creates a new resource.
        :param _builtins.str routing_key: Specifies the routing key. Changing this creates a new resource.
        :param _builtins.str source: Specifies the message source. Changing this creates a new resource.
        :param _builtins.str vhost: Specifies the virtual host name. Changing this creates a new resource.
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if routing_key is not None:
            pulumi.set(__self__, "routing_key", routing_key)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if vhost is not None:
            pulumi.set(__self__, "vhost", vhost)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> Optional[_builtins.str]:
        """
        Specifies the message target. Changing this creates a new resource.
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[_builtins.str]:
        """
        Specifies the message target type.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> Optional[_builtins.str]:
        """
        Specifies the routing key. Changing this creates a new resource.
        """
        return pulumi.get(self, "routing_key")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        Specifies the message source. Changing this creates a new resource.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> Optional[_builtins.str]:
        """
        Specifies the virtual host name. Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")


@pulumi.output_type
class DmsRocketmqMigrationTaskExchange(dict):
    def __init__(__self__, *,
                 durable: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 type: Optional[_builtins.str] = None,
                 vhost: Optional[_builtins.str] = None):
        """
        :param _builtins.bool durable: Specifies whether to enable data persistence.
               Changing this creates a new resource.
        :param _builtins.str name: Specifies the switch name. Changing this creates a new resource.
        :param _builtins.str type: Specifies the exchange type. Changing this creates a new resource.
               
               <a name="RocketMQ_migration_task_bindings"></a>
               The `bindings` block supports:
        :param _builtins.str vhost: Specifies the virtual host name. Changing this creates a new resource.
        """
        if durable is not None:
            pulumi.set(__self__, "durable", durable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vhost is not None:
            pulumi.set(__self__, "vhost", vhost)

    @_builtins.property
    @pulumi.getter
    def durable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable data persistence.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "durable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the switch name. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Specifies the exchange type. Changing this creates a new resource.

        <a name="RocketMQ_migration_task_bindings"></a>
        The `bindings` block supports:
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> Optional[_builtins.str]:
        """
        Specifies the virtual host name. Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")


@pulumi.output_type
class DmsRocketmqMigrationTaskQueue(dict):
    def __init__(__self__, *,
                 durable: Optional[_builtins.bool] = None,
                 name: Optional[_builtins.str] = None,
                 vhost: Optional[_builtins.str] = None):
        """
        :param _builtins.bool durable: Specifies whether to enable data persistence.
               Changing this creates a new resource.
        :param _builtins.str name: Specifies the switch name. Changing this creates a new resource.
        :param _builtins.str vhost: Specifies the virtual host name. Changing this creates a new resource.
        """
        if durable is not None:
            pulumi.set(__self__, "durable", durable)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if vhost is not None:
            pulumi.set(__self__, "vhost", vhost)

    @_builtins.property
    @pulumi.getter
    def durable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable data persistence.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "durable")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the switch name. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def vhost(self) -> Optional[_builtins.str]:
        """
        Specifies the virtual host name. Changing this creates a new resource.
        """
        return pulumi.get(self, "vhost")


@pulumi.output_type
class DmsRocketmqMigrationTaskSubscriptionGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupName":
            suggest = "group_name"
        elif key == "consumeBroadcastEnable":
            suggest = "consume_broadcast_enable"
        elif key == "consumeEnable":
            suggest = "consume_enable"
        elif key == "consumeFromMinEnable":
            suggest = "consume_from_min_enable"
        elif key == "notifyConsumeridsChangedEnable":
            suggest = "notify_consumerids_changed_enable"
        elif key == "retryMaxTimes":
            suggest = "retry_max_times"
        elif key == "retryQueueNum":
            suggest = "retry_queue_num"
        elif key == "whichBrokerWhenConsumeSlow":
            suggest = "which_broker_when_consume_slow"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsRocketmqMigrationTaskSubscriptionGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsRocketmqMigrationTaskSubscriptionGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsRocketmqMigrationTaskSubscriptionGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_name: _builtins.str,
                 consume_broadcast_enable: Optional[_builtins.bool] = None,
                 consume_enable: Optional[_builtins.bool] = None,
                 consume_from_min_enable: Optional[_builtins.bool] = None,
                 notify_consumerids_changed_enable: Optional[_builtins.bool] = None,
                 retry_max_times: Optional[_builtins.int] = None,
                 retry_queue_num: Optional[_builtins.int] = None,
                 which_broker_when_consume_slow: Optional[_builtins.int] = None):
        """
        :param _builtins.str group_name: Specifies the name of a consumer group.
               Changing this creates a new resource.
        :param _builtins.bool consume_broadcast_enable: Specifies whether to enable broadcast.
               Changing this creates a new resource.
        :param _builtins.bool consume_enable: Specifies whether to enable consumption.
               Changing this creates a new resource.
        :param _builtins.bool consume_from_min_enable: Specifies whether to enable consumption from the earliest
               offset. Changing this creates a new resource.
        :param _builtins.bool notify_consumerids_changed_enable: Specifies whether to notify changes of consumer IDs.
               Changing this creates a new resource.
        :param _builtins.int retry_max_times: Specifies the maximum number of consumption retries.
               Changing this creates a new resource.
        :param _builtins.int retry_queue_num: Specifies the number of retry queues.
               Changing this creates a new resource.
        :param _builtins.int which_broker_when_consume_slow: Specifies the ID of the broker selected for slow
               consumption. Changing this creates a new resource.
               
               <a name="RocketMQ_migration_task_vhosts"></a>
               The `vhosts` block supports:
        """
        pulumi.set(__self__, "group_name", group_name)
        if consume_broadcast_enable is not None:
            pulumi.set(__self__, "consume_broadcast_enable", consume_broadcast_enable)
        if consume_enable is not None:
            pulumi.set(__self__, "consume_enable", consume_enable)
        if consume_from_min_enable is not None:
            pulumi.set(__self__, "consume_from_min_enable", consume_from_min_enable)
        if notify_consumerids_changed_enable is not None:
            pulumi.set(__self__, "notify_consumerids_changed_enable", notify_consumerids_changed_enable)
        if retry_max_times is not None:
            pulumi.set(__self__, "retry_max_times", retry_max_times)
        if retry_queue_num is not None:
            pulumi.set(__self__, "retry_queue_num", retry_queue_num)
        if which_broker_when_consume_slow is not None:
            pulumi.set(__self__, "which_broker_when_consume_slow", which_broker_when_consume_slow)

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Specifies the name of a consumer group.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="consumeBroadcastEnable")
    def consume_broadcast_enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable broadcast.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "consume_broadcast_enable")

    @_builtins.property
    @pulumi.getter(name="consumeEnable")
    def consume_enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable consumption.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "consume_enable")

    @_builtins.property
    @pulumi.getter(name="consumeFromMinEnable")
    def consume_from_min_enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to enable consumption from the earliest
        offset. Changing this creates a new resource.
        """
        return pulumi.get(self, "consume_from_min_enable")

    @_builtins.property
    @pulumi.getter(name="notifyConsumeridsChangedEnable")
    def notify_consumerids_changed_enable(self) -> Optional[_builtins.bool]:
        """
        Specifies whether to notify changes of consumer IDs.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "notify_consumerids_changed_enable")

    @_builtins.property
    @pulumi.getter(name="retryMaxTimes")
    def retry_max_times(self) -> Optional[_builtins.int]:
        """
        Specifies the maximum number of consumption retries.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "retry_max_times")

    @_builtins.property
    @pulumi.getter(name="retryQueueNum")
    def retry_queue_num(self) -> Optional[_builtins.int]:
        """
        Specifies the number of retry queues.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "retry_queue_num")

    @_builtins.property
    @pulumi.getter(name="whichBrokerWhenConsumeSlow")
    def which_broker_when_consume_slow(self) -> Optional[_builtins.int]:
        """
        Specifies the ID of the broker selected for slow
        consumption. Changing this creates a new resource.

        <a name="RocketMQ_migration_task_vhosts"></a>
        The `vhosts` block supports:
        """
        return pulumi.get(self, "which_broker_when_consume_slow")


@pulumi.output_type
class DmsRocketmqMigrationTaskTopicConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicName":
            suggest = "topic_name"
        elif key == "readQueueNum":
            suggest = "read_queue_num"
        elif key == "topicFilterType":
            suggest = "topic_filter_type"
        elif key == "topicSysFlag":
            suggest = "topic_sys_flag"
        elif key == "writeQueueNum":
            suggest = "write_queue_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsRocketmqMigrationTaskTopicConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsRocketmqMigrationTaskTopicConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsRocketmqMigrationTaskTopicConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_name: _builtins.str,
                 order: Optional[_builtins.bool] = None,
                 perm: Optional[_builtins.int] = None,
                 read_queue_num: Optional[_builtins.int] = None,
                 topic_filter_type: Optional[_builtins.str] = None,
                 topic_sys_flag: Optional[_builtins.int] = None,
                 write_queue_num: Optional[_builtins.int] = None):
        """
        :param _builtins.str topic_name: Specifies the topic name. Changing this creates a new resource.
        :param _builtins.bool order: Specifies whether a message is an ordered message.
               Changing this creates a new resource.
        :param _builtins.int perm: Specifies the number of permission. Changing this creates a new resource.
        :param _builtins.int read_queue_num: Specifies the number of read queues.
               Changing this creates a new resource.
        :param _builtins.str topic_filter_type: Specifies the filter type of a topic.
               Value options: **SINGLE_TAG**, **MULTI_TAG**. Changing this creates a new resource.
        :param _builtins.int topic_sys_flag: Specifies the system flag of a topic.
               Changing this creates a new resource.
        :param _builtins.int write_queue_num: Specifies the number of write queues.
               Changing this creates a new resource.
               
               <a name="RocketMQ_migration_task_subscription_groups"></a>
               The `subscription_groups` block supports:
        """
        pulumi.set(__self__, "topic_name", topic_name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if perm is not None:
            pulumi.set(__self__, "perm", perm)
        if read_queue_num is not None:
            pulumi.set(__self__, "read_queue_num", read_queue_num)
        if topic_filter_type is not None:
            pulumi.set(__self__, "topic_filter_type", topic_filter_type)
        if topic_sys_flag is not None:
            pulumi.set(__self__, "topic_sys_flag", topic_sys_flag)
        if write_queue_num is not None:
            pulumi.set(__self__, "write_queue_num", write_queue_num)

    @_builtins.property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> _builtins.str:
        """
        Specifies the topic name. Changing this creates a new resource.
        """
        return pulumi.get(self, "topic_name")

    @_builtins.property
    @pulumi.getter
    def order(self) -> Optional[_builtins.bool]:
        """
        Specifies whether a message is an ordered message.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "order")

    @_builtins.property
    @pulumi.getter
    def perm(self) -> Optional[_builtins.int]:
        """
        Specifies the number of permission. Changing this creates a new resource.
        """
        return pulumi.get(self, "perm")

    @_builtins.property
    @pulumi.getter(name="readQueueNum")
    def read_queue_num(self) -> Optional[_builtins.int]:
        """
        Specifies the number of read queues.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "read_queue_num")

    @_builtins.property
    @pulumi.getter(name="topicFilterType")
    def topic_filter_type(self) -> Optional[_builtins.str]:
        """
        Specifies the filter type of a topic.
        Value options: **SINGLE_TAG**, **MULTI_TAG**. Changing this creates a new resource.
        """
        return pulumi.get(self, "topic_filter_type")

    @_builtins.property
    @pulumi.getter(name="topicSysFlag")
    def topic_sys_flag(self) -> Optional[_builtins.int]:
        """
        Specifies the system flag of a topic.
        Changing this creates a new resource.
        """
        return pulumi.get(self, "topic_sys_flag")

    @_builtins.property
    @pulumi.getter(name="writeQueueNum")
    def write_queue_num(self) -> Optional[_builtins.int]:
        """
        Specifies the number of write queues.
        Changing this creates a new resource.

        <a name="RocketMQ_migration_task_subscription_groups"></a>
        The `subscription_groups` block supports:
        """
        return pulumi.get(self, "write_queue_num")


@pulumi.output_type
class DmsRocketmqMigrationTaskVhost(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Specifies the switch name. Changing this creates a new resource.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the switch name. Changing this creates a new resource.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DmsRocketmqTopicBroker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readQueueNum":
            suggest = "read_queue_num"
        elif key == "writeQueueNum":
            suggest = "write_queue_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsRocketmqTopicBroker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsRocketmqTopicBroker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsRocketmqTopicBroker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 read_queue_num: Optional[_builtins.int] = None,
                 write_queue_num: Optional[_builtins.int] = None):
        """
        :param _builtins.str name: Specifies the name of the broker.
               
               <a name="DmsRocketMQTopic_QueueRef"></a>
               The `queues` block supports:
        :param _builtins.int read_queue_num: Indicates the read queues number of the broker. It's useless when create a topic.
        :param _builtins.int write_queue_num: Indicates the read queues number of the broker. It's useless when create a topic.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if read_queue_num is not None:
            pulumi.set(__self__, "read_queue_num", read_queue_num)
        if write_queue_num is not None:
            pulumi.set(__self__, "write_queue_num", write_queue_num)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the broker.

        <a name="DmsRocketMQTopic_QueueRef"></a>
        The `queues` block supports:
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="readQueueNum")
    def read_queue_num(self) -> Optional[_builtins.int]:
        """
        Indicates the read queues number of the broker. It's useless when create a topic.
        """
        return pulumi.get(self, "read_queue_num")

    @_builtins.property
    @pulumi.getter(name="writeQueueNum")
    def write_queue_num(self) -> Optional[_builtins.int]:
        """
        Indicates the read queues number of the broker. It's useless when create a topic.
        """
        return pulumi.get(self, "write_queue_num")


@pulumi.output_type
class DmsRocketmqTopicQueue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueNum":
            suggest = "queue_num"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DmsRocketmqTopicQueue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DmsRocketmqTopicQueue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DmsRocketmqTopicQueue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 broker: Optional[_builtins.str] = None,
                 queue_num: Optional[_builtins.int] = None):
        """
        :param _builtins.str broker: Specifies the associated broker.
        :param _builtins.int queue_num: Specifies the number of the queues.
        """
        if broker is not None:
            pulumi.set(__self__, "broker", broker)
        if queue_num is not None:
            pulumi.set(__self__, "queue_num", queue_num)

    @_builtins.property
    @pulumi.getter
    def broker(self) -> Optional[_builtins.str]:
        """
        Specifies the associated broker.
        """
        return pulumi.get(self, "broker")

    @_builtins.property
    @pulumi.getter(name="queueNum")
    def queue_num(self) -> Optional[_builtins.int]:
        """
        Specifies the number of the queues.
        """
        return pulumi.get(self, "queue_num")


@pulumi.output_type
class DmsRocketmqUserGroupPerm(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 perm: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Indicates the name of a topic or consumer group.
        :param _builtins.str perm: Indicates the permissions of the topic or consumer group.
               Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if perm is not None:
            pulumi.set(__self__, "perm", perm)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of a topic or consumer group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def perm(self) -> Optional[_builtins.str]:
        """
        Indicates the permissions of the topic or consumer group.
        Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
        """
        return pulumi.get(self, "perm")


@pulumi.output_type
class DmsRocketmqUserTopicPerm(dict):
    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 perm: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Indicates the name of a topic or consumer group.
        :param _builtins.str perm: Indicates the permissions of the topic or consumer group.
               Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if perm is not None:
            pulumi.set(__self__, "perm", perm)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of a topic or consumer group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def perm(self) -> Optional[_builtins.str]:
        """
        Indicates the permissions of the topic or consumer group.
        Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
        """
        return pulumi.get(self, "perm")


@pulumi.output_type
class ElbIpgroupIpList(dict):
    def __init__(__self__, *,
                 ip: _builtins.str,
                 description: Optional[_builtins.str] = None):
        """
        :param _builtins.str ip: IP address or CIDR block.
        :param _builtins.str description: Human-readable description for the ip.
        """
        pulumi.set(__self__, "ip", ip)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        IP address or CIDR block.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        Human-readable description for the ip.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class ElbL7policyFixedResponseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"
        elif key == "contentType":
            suggest = "content_type"
        elif key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "messageBody":
            suggest = "message_body"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"
        elif key == "trafficLimitConfig":
            suggest = "traffic_limit_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyFixedResponseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyFixedResponseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyFixedResponseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: _builtins.str,
                 content_type: Optional[_builtins.str] = None,
                 insert_headers_config: Optional['outputs.ElbL7policyFixedResponseConfigInsertHeadersConfig'] = None,
                 message_body: Optional[_builtins.str] = None,
                 remove_headers_config: Optional['outputs.ElbL7policyFixedResponseConfigRemoveHeadersConfig'] = None,
                 traffic_limit_config: Optional['outputs.ElbL7policyFixedResponseConfigTrafficLimitConfig'] = None):
        pulumi.set(__self__, "status_code", status_code)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if message_body is not None:
            pulumi.set(__self__, "message_body", message_body)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)
        if traffic_limit_config is not None:
            pulumi.set(__self__, "traffic_limit_config", traffic_limit_config)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "content_type")

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.ElbL7policyFixedResponseConfigInsertHeadersConfig']:
        return pulumi.get(self, "insert_headers_config")

    @_builtins.property
    @pulumi.getter(name="messageBody")
    def message_body(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message_body")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.ElbL7policyFixedResponseConfigRemoveHeadersConfig']:
        return pulumi.get(self, "remove_headers_config")

    @_builtins.property
    @pulumi.getter(name="trafficLimitConfig")
    def traffic_limit_config(self) -> Optional['outputs.ElbL7policyFixedResponseConfigTrafficLimitConfig']:
        return pulumi.get(self, "traffic_limit_config")


@pulumi.output_type
class ElbL7policyFixedResponseConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyFixedResponseConfigInsertHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyFixedResponseConfigInsertHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyFixedResponseConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyFixedResponseConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyFixedResponseConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyFixedResponseConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class ElbL7policyFixedResponseConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbL7policyFixedResponseConfigTrafficLimitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "perSourceIpQps":
            suggest = "per_source_ip_qps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyFixedResponseConfigTrafficLimitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyFixedResponseConfigTrafficLimitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyFixedResponseConfigTrafficLimitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst: Optional[_builtins.int] = None,
                 per_source_ip_qps: Optional[_builtins.int] = None,
                 qps: Optional[_builtins.int] = None):
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if per_source_ip_qps is not None:
            pulumi.set(__self__, "per_source_ip_qps", per_source_ip_qps)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @_builtins.property
    @pulumi.getter
    def burst(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "burst")

    @_builtins.property
    @pulumi.getter(name="perSourceIpQps")
    def per_source_ip_qps(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "per_source_ip_qps")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "qps")


@pulumi.output_type
class ElbL7policyRedirectPoolsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolId":
            suggest = "pool_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectPoolsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectPoolsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectPoolsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pool_id: _builtins.str,
                 weight: Optional[_builtins.int] = None):
        pulumi.set(__self__, "pool_id", pool_id)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> _builtins.str:
        return pulumi.get(self, "pool_id")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"
        elif key == "rewriteUrlConfig":
            suggest = "rewrite_url_config"
        elif key == "rewriteUrlEnabled":
            suggest = "rewrite_url_enabled"
        elif key == "trafficLimitConfig":
            suggest = "traffic_limit_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectPoolsExtendConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectPoolsExtendConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectPoolsExtendConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 insert_headers_config: Optional['outputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig'] = None,
                 remove_headers_config: Optional['outputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig'] = None,
                 rewrite_url_config: Optional['outputs.ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig'] = None,
                 rewrite_url_enabled: Optional[_builtins.bool] = None,
                 traffic_limit_config: Optional['outputs.ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig'] = None):
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)
        if rewrite_url_config is not None:
            pulumi.set(__self__, "rewrite_url_config", rewrite_url_config)
        if rewrite_url_enabled is not None:
            pulumi.set(__self__, "rewrite_url_enabled", rewrite_url_enabled)
        if traffic_limit_config is not None:
            pulumi.set(__self__, "traffic_limit_config", traffic_limit_config)

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig']:
        return pulumi.get(self, "insert_headers_config")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig']:
        return pulumi.get(self, "remove_headers_config")

    @_builtins.property
    @pulumi.getter(name="rewriteUrlConfig")
    def rewrite_url_config(self) -> Optional['outputs.ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig']:
        return pulumi.get(self, "rewrite_url_config")

    @_builtins.property
    @pulumi.getter(name="rewriteUrlEnabled")
    def rewrite_url_enabled(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "rewrite_url_enabled")

    @_builtins.property
    @pulumi.getter(name="trafficLimitConfig")
    def traffic_limit_config(self) -> Optional['outputs.ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig']:
        return pulumi.get(self, "traffic_limit_config")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig(dict):
    def __init__(__self__, *,
                 host: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 query: Optional[_builtins.str] = None):
        if host is not None:
            pulumi.set(__self__, "host", host)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if query is not None:
            pulumi.set(__self__, "query", query)

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def query(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "query")


@pulumi.output_type
class ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "perSourceIpQps":
            suggest = "per_source_ip_qps"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 burst: Optional[_builtins.int] = None,
                 per_source_ip_qps: Optional[_builtins.int] = None,
                 qps: Optional[_builtins.int] = None):
        if burst is not None:
            pulumi.set(__self__, "burst", burst)
        if per_source_ip_qps is not None:
            pulumi.set(__self__, "per_source_ip_qps", per_source_ip_qps)
        if qps is not None:
            pulumi.set(__self__, "qps", qps)

    @_builtins.property
    @pulumi.getter
    def burst(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "burst")

    @_builtins.property
    @pulumi.getter(name="perSourceIpQps")
    def per_source_ip_qps(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "per_source_ip_qps")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "qps")


@pulumi.output_type
class ElbL7policyRedirectPoolsStickySessionConfig(dict):
    def __init__(__self__, *,
                 enable: Optional[_builtins.bool] = None,
                 timeout: Optional[_builtins.int] = None):
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ElbL7policyRedirectUrlConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"
        elif key == "insertHeadersConfig":
            suggest = "insert_headers_config"
        elif key == "removeHeadersConfig":
            suggest = "remove_headers_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectUrlConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectUrlConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectUrlConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: _builtins.str,
                 host: Optional[_builtins.str] = None,
                 insert_headers_config: Optional['outputs.ElbL7policyRedirectUrlConfigInsertHeadersConfig'] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.str] = None,
                 protocol: Optional[_builtins.str] = None,
                 query: Optional[_builtins.str] = None,
                 remove_headers_config: Optional['outputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfig'] = None):
        pulumi.set(__self__, "status_code", status_code)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if insert_headers_config is not None:
            pulumi.set(__self__, "insert_headers_config", insert_headers_config)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if remove_headers_config is not None:
            pulumi.set(__self__, "remove_headers_config", remove_headers_config)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.str:
        return pulumi.get(self, "status_code")

    @_builtins.property
    @pulumi.getter
    def host(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="insertHeadersConfig")
    def insert_headers_config(self) -> Optional['outputs.ElbL7policyRedirectUrlConfigInsertHeadersConfig']:
        return pulumi.get(self, "insert_headers_config")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def query(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "query")

    @_builtins.property
    @pulumi.getter(name="removeHeadersConfig")
    def remove_headers_config(self) -> Optional['outputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfig']:
        return pulumi.get(self, "remove_headers_config")


@pulumi.output_type
class ElbL7policyRedirectUrlConfigInsertHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str,
                 value_type: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)
        pulumi.set(__self__, "value_type", value_type)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="valueType")
    def value_type(self) -> _builtins.str:
        return pulumi.get(self, "value_type")


@pulumi.output_type
class ElbL7policyRedirectUrlConfigRemoveHeadersConfig(dict):
    def __init__(__self__, *,
                 configs: Sequence['outputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig']):
        pulumi.set(__self__, "configs", configs)

    @_builtins.property
    @pulumi.getter
    def configs(self) -> Sequence['outputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig']:
        return pulumi.get(self, "configs")


@pulumi.output_type
class ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig(dict):
    def __init__(__self__, *,
                 key: _builtins.str):
        pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbL7ruleCondition(dict):
    def __init__(__self__, *,
                 value: _builtins.str,
                 key: Optional[_builtins.str] = None):
        """
        :param _builtins.str value: The value to use for the comparison.
        """
        pulumi.set(__self__, "value", value)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value to use for the comparison.
        """
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class ElbListenerPortRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endPort":
            suggest = "end_port"
        elif key == "startPort":
            suggest = "start_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbListenerPortRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbListenerPortRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbListenerPortRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_port: _builtins.int,
                 start_port: _builtins.int):
        pulumi.set(__self__, "end_port", end_port)
        pulumi.set(__self__, "start_port", start_port)

    @_builtins.property
    @pulumi.getter(name="endPort")
    def end_port(self) -> _builtins.int:
        return pulumi.get(self, "end_port")

    @_builtins.property
    @pulumi.getter(name="startPort")
    def start_port(self) -> _builtins.int:
        return pulumi.get(self, "start_port")


@pulumi.output_type
class ElbMemberReason(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedResponse":
            suggest = "expected_response"
        elif key == "healthcheckResponse":
            suggest = "healthcheck_response"
        elif key == "reasonCode":
            suggest = "reason_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbMemberReason. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbMemberReason.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbMemberReason.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expected_response: Optional[_builtins.str] = None,
                 healthcheck_response: Optional[_builtins.str] = None,
                 reason_code: Optional[_builtins.str] = None):
        if expected_response is not None:
            pulumi.set(__self__, "expected_response", expected_response)
        if healthcheck_response is not None:
            pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        if reason_code is not None:
            pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class ElbMemberStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerId":
            suggest = "listener_id"
        elif key == "operatingStatus":
            suggest = "operating_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbMemberStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbMemberStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbMemberStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_id: Optional[_builtins.str] = None,
                 operating_status: Optional[_builtins.str] = None,
                 reasons: Optional[Sequence['outputs.ElbMemberStatusReason']] = None):
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if operating_status is not None:
            pulumi.set(__self__, "operating_status", operating_status)
        if reasons is not None:
            pulumi.set(__self__, "reasons", reasons)

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "operating_status")

    @_builtins.property
    @pulumi.getter
    def reasons(self) -> Optional[Sequence['outputs.ElbMemberStatusReason']]:
        return pulumi.get(self, "reasons")


@pulumi.output_type
class ElbMemberStatusReason(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expectedResponse":
            suggest = "expected_response"
        elif key == "healthcheckResponse":
            suggest = "healthcheck_response"
        elif key == "reasonCode":
            suggest = "reason_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbMemberStatusReason. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbMemberStatusReason.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbMemberStatusReason.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expected_response: Optional[_builtins.str] = None,
                 healthcheck_response: Optional[_builtins.str] = None,
                 reason_code: Optional[_builtins.str] = None):
        if expected_response is not None:
            pulumi.set(__self__, "expected_response", expected_response)
        if healthcheck_response is not None:
            pulumi.set(__self__, "healthcheck_response", healthcheck_response)
        if reason_code is not None:
            pulumi.set(__self__, "reason_code", reason_code)

    @_builtins.property
    @pulumi.getter(name="expectedResponse")
    def expected_response(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "expected_response")

    @_builtins.property
    @pulumi.getter(name="healthcheckResponse")
    def healthcheck_response(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "healthcheck_response")

    @_builtins.property
    @pulumi.getter(name="reasonCode")
    def reason_code(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "reason_code")


@pulumi.output_type
class ElbPoolPersistence(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ElbPoolPersistence. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ElbPoolPersistence.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ElbPoolPersistence.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: _builtins.str,
                 cookie_name: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.str type: The type of persistence mode. The current specification supports SOURCE_IP,
               HTTP_COOKIE, and APP_COOKIE.
        :param _builtins.str cookie_name: The name of the cookie if persistence mode is set appropriately. Required
               if `type = APP_COOKIE`.
        :param _builtins.int timeout: Specifies the sticky session timeout duration in minutes. This parameter is
               invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
               + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
               + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
        """
        pulumi.set(__self__, "type", type)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of persistence mode. The current specification supports SOURCE_IP,
        HTTP_COOKIE, and APP_COOKIE.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        The name of the cookie if persistence mode is set appropriately. Required
        if `type = APP_COOKIE`.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the sticky session timeout duration in minutes. This parameter is
        invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
        + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
        + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class ElbSecurityPolicyListener(dict):
    def __init__(__self__, *,
                 id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: The listener id.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The listener id.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class FgsApplicationRepository(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpsUrl":
            suggest = "https_url"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "webUrl":
            suggest = "web_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsApplicationRepository. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsApplicationRepository.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsApplicationRepository.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 https_url: Optional[_builtins.str] = None,
                 project_id: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 web_url: Optional[_builtins.str] = None):
        """
        :param _builtins.str https_url: The HTTP address of the repository.
        :param _builtins.str project_id: The project ID of the repository.
        :param _builtins.str status: The repository status.
        :param _builtins.str web_url: The repository link.
        """
        if https_url is not None:
            pulumi.set(__self__, "https_url", https_url)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if web_url is not None:
            pulumi.set(__self__, "web_url", web_url)

    @_builtins.property
    @pulumi.getter(name="httpsUrl")
    def https_url(self) -> Optional[_builtins.str]:
        """
        The HTTP address of the repository.
        """
        return pulumi.get(self, "https_url")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        """
        The project ID of the repository.
        """
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The repository status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[_builtins.str]:
        """
        The repository link.
        """
        return pulumi.get(self, "web_url")


@pulumi.output_type
class FgsApplicationStackResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "logicalResourceName":
            suggest = "logical_resource_name"
        elif key == "logicalResourceType":
            suggest = "logical_resource_type"
        elif key == "physicalResourceId":
            suggest = "physical_resource_id"
        elif key == "physicalResourceName":
            suggest = "physical_resource_name"
        elif key == "resourceStatus":
            suggest = "resource_status"
        elif key == "statusMessage":
            suggest = "status_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FgsApplicationStackResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FgsApplicationStackResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FgsApplicationStackResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[_builtins.str] = None,
                 href: Optional[_builtins.str] = None,
                 logical_resource_name: Optional[_builtins.str] = None,
                 logical_resource_type: Optional[_builtins.str] = None,
                 physical_resource_id: Optional[_builtins.str] = None,
                 physical_resource_name: Optional[_builtins.str] = None,
                 resource_status: Optional[_builtins.str] = None,
                 status_message: Optional[_builtins.str] = None):
        """
        :param _builtins.str display_name: The cloud service name.
        :param _builtins.str href: The hyperlink.
        :param _builtins.str logical_resource_name: The logical resource name.
        :param _builtins.str logical_resource_type: The logical resource type.
        :param _builtins.str physical_resource_id: The physical resource ID.
        :param _builtins.str physical_resource_name: The physical resource name.
        :param _builtins.str resource_status: The status of resource.
        :param _builtins.str status_message: The status information.
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if href is not None:
            pulumi.set(__self__, "href", href)
        if logical_resource_name is not None:
            pulumi.set(__self__, "logical_resource_name", logical_resource_name)
        if logical_resource_type is not None:
            pulumi.set(__self__, "logical_resource_type", logical_resource_type)
        if physical_resource_id is not None:
            pulumi.set(__self__, "physical_resource_id", physical_resource_id)
        if physical_resource_name is not None:
            pulumi.set(__self__, "physical_resource_name", physical_resource_name)
        if resource_status is not None:
            pulumi.set(__self__, "resource_status", resource_status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[_builtins.str]:
        """
        The cloud service name.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[_builtins.str]:
        """
        The hyperlink.
        """
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter(name="logicalResourceName")
    def logical_resource_name(self) -> Optional[_builtins.str]:
        """
        The logical resource name.
        """
        return pulumi.get(self, "logical_resource_name")

    @_builtins.property
    @pulumi.getter(name="logicalResourceType")
    def logical_resource_type(self) -> Optional[_builtins.str]:
        """
        The logical resource type.
        """
        return pulumi.get(self, "logical_resource_type")

    @_builtins.property
    @pulumi.getter(name="physicalResourceId")
    def physical_resource_id(self) -> Optional[_builtins.str]:
        """
        The physical resource ID.
        """
        return pulumi.get(self, "physical_resource_id")

    @_builtins.property
    @pulumi.getter(name="physicalResourceName")
    def physical_resource_name(self) -> Optional[_builtins.str]:
        """
        The physical resource name.
        """
        return pulumi.get(self, "physical_resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceStatus")
    def resource_status(self) -> Optional[_builtins.str]:
        """
        The status of resource.
        """
        return pulumi.get(self, "resource_status")

    @_builtins.property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[_builtins.str]:
        """
        The status information.
        """
        return pulumi.get(self, "status_message")


@pulumi.output_type
class FgsAsyncInvokeConfigurationOnFailure(dict):
    def __init__(__self__, *,
                 destination: _builtins.str,
                 param: _builtins.str):
        """
        :param _builtins.str destination: Specifies the object type.  
               The valid values are as follows:
               + **OBS**
               + **SMN**
               + **DIS**
               + **FunctionGraph**
        :param _builtins.str param: Specifies the parameters (map object in JSON format) corresponding to the target service.
               + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
               expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
               + The **SMN** objects include: `topic_urn`.
               + The **DIS** objects include: `stream_name`.
               + The **FunctionGraph** objects include: `func_urn` (function URN).
               
               > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
               corresponding service.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "param", param)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        Specifies the object type.  
        The valid values are as follows:
        + **OBS**
        + **SMN**
        + **DIS**
        + **FunctionGraph**
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def param(self) -> _builtins.str:
        """
        Specifies the parameters (map object in JSON format) corresponding to the target service.
        + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
        expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
        + The **SMN** objects include: `topic_urn`.
        + The **DIS** objects include: `stream_name`.
        + The **FunctionGraph** objects include: `func_urn` (function URN).

        > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
        corresponding service.
        """
        return pulumi.get(self, "param")


@pulumi.output_type
class FgsAsyncInvokeConfigurationOnSuccess(dict):
    def __init__(__self__, *,
                 destination: _builtins.str,
                 param: _builtins.str):
        """
        :param _builtins.str destination: Specifies the object type.  
               The valid values are as follows:
               + **OBS**
               + **SMN**
               + **DIS**
               + **FunctionGraph**
        :param _builtins.str param: Specifies the parameters (map object in JSON format) corresponding to the target service.
               + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
               expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
               + The **SMN** objects include: `topic_urn`.
               + The **DIS** objects include: `stream_name`.
               + The **FunctionGraph** objects include: `func_urn` (function URN).
               
               > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
               corresponding service.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "param", param)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        """
        Specifies the object type.  
        The valid values are as follows:
        + **OBS**
        + **SMN**
        + **DIS**
        + **FunctionGraph**
        """
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def param(self) -> _builtins.str:
        """
        Specifies the parameters (map object in JSON format) corresponding to the target service.
        + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
        expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
        + The **SMN** objects include: `topic_urn`.
        + The **DIS** objects include: `stream_name`.
        + The **FunctionGraph** objects include: `func_urn` (function URN).

        > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
        corresponding service.
        """
        return pulumi.get(self, "param")


@pulumi.output_type
class GesGraphEncryption(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "masterKeyId":
            suggest = "master_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GesGraphEncryption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GesGraphEncryption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GesGraphEncryption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable: Optional[_builtins.bool] = None,
                 master_key_id: Optional[_builtins.str] = None):
        """
        :param _builtins.bool enable: Whether to enable data encryption The value can be true or false. The default value is false.
        :param _builtins.str master_key_id: ID of the customer master key created by DEW in the project corresponding to the graph creation.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)
        if master_key_id is not None:
            pulumi.set(__self__, "master_key_id", master_key_id)

    @_builtins.property
    @pulumi.getter
    def enable(self) -> Optional[_builtins.bool]:
        """
        Whether to enable data encryption The value can be true or false. The default value is false.
        """
        return pulumi.get(self, "enable")

    @_builtins.property
    @pulumi.getter(name="masterKeyId")
    def master_key_id(self) -> Optional[_builtins.str]:
        """
        ID of the customer master key created by DEW in the project corresponding to the graph creation.
        """
        return pulumi.get(self, "master_key_id")


@pulumi.output_type
class GesGraphLtsOperationTrace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLogGroupName":
            suggest = "audit_log_group_name"
        elif key == "enableAudit":
            suggest = "enable_audit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GesGraphLtsOperationTrace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GesGraphLtsOperationTrace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GesGraphLtsOperationTrace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log_group_name: Optional[_builtins.str] = None,
                 enable_audit: Optional[_builtins.bool] = None):
        """
        :param _builtins.str audit_log_group_name: LTS log group name.
        :param _builtins.bool enable_audit: Whether to enable graph audit. The default value is false.
        """
        if audit_log_group_name is not None:
            pulumi.set(__self__, "audit_log_group_name", audit_log_group_name)
        if enable_audit is not None:
            pulumi.set(__self__, "enable_audit", enable_audit)

    @_builtins.property
    @pulumi.getter(name="auditLogGroupName")
    def audit_log_group_name(self) -> Optional[_builtins.str]:
        """
        LTS log group name.
        """
        return pulumi.get(self, "audit_log_group_name")

    @_builtins.property
    @pulumi.getter(name="enableAudit")
    def enable_audit(self) -> Optional[_builtins.bool]:
        """
        Whether to enable graph audit. The default value is false.
        """
        return pulumi.get(self, "enable_audit")


@pulumi.output_type
class GesGraphPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eipId":
            suggest = "eip_id"
        elif key == "publicBindType":
            suggest = "public_bind_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GesGraphPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GesGraphPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GesGraphPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 eip_id: Optional[_builtins.str] = None,
                 public_bind_type: Optional[_builtins.str] = None):
        """
        :param _builtins.str eip_id: Indicates the ID of an EIP.  Changing this parameter will create a new resource.
        :param _builtins.str public_bind_type: The bind type of public IP.
        """
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if public_bind_type is not None:
            pulumi.set(__self__, "public_bind_type", public_bind_type)

    @_builtins.property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[_builtins.str]:
        """
        Indicates the ID of an EIP.  Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "eip_id")

    @_builtins.property
    @pulumi.getter(name="publicBindType")
    def public_bind_type(self) -> Optional[_builtins.str]:
        """
        The bind type of public IP.
        """
        return pulumi.get(self, "public_bind_type")


@pulumi.output_type
class GesGraphVertexIdType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idLength":
            suggest = "id_length"
        elif key == "idType":
            suggest = "id_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GesGraphVertexIdType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GesGraphVertexIdType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GesGraphVertexIdType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id_length: Optional[_builtins.int] = None,
                 id_type: Optional[_builtins.str] = None):
        """
        :param _builtins.int id_length: The length of ID.
        :param _builtins.str id_type: Vertex ID type.
        """
        if id_length is not None:
            pulumi.set(__self__, "id_length", id_length)
        if id_type is not None:
            pulumi.set(__self__, "id_type", id_type)

    @_builtins.property
    @pulumi.getter(name="idLength")
    def id_length(self) -> Optional[_builtins.int]:
        """
        The length of ID.
        """
        return pulumi.get(self, "id_length")

    @_builtins.property
    @pulumi.getter(name="idType")
    def id_type(self) -> Optional[_builtins.str]:
        """
        Vertex ID type.
        """
        return pulumi.get(self, "id_type")


@pulumi.output_type
class ObsBucketAclAccountPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "accessToAcls":
            suggest = "access_to_acls"
        elif key == "accessToBuckets":
            suggest = "access_to_buckets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketAclAccountPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketAclAccountPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketAclAccountPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: _builtins.str,
                 access_to_acls: Optional[Sequence[_builtins.str]] = None,
                 access_to_buckets: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str account_id: Specifies the account id to authorize. The account id cannot be the bucket owner,
               and must be unique.
        :param Sequence[_builtins.str] access_to_acls: Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        :param Sequence[_builtins.str] access_to_buckets: Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        pulumi.set(__self__, "account_id", account_id)
        if access_to_acls is not None:
            pulumi.set(__self__, "access_to_acls", access_to_acls)
        if access_to_buckets is not None:
            pulumi.set(__self__, "access_to_buckets", access_to_buckets)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        Specifies the account id to authorize. The account id cannot be the bucket owner,
        and must be unique.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="accessToAcls")
    def access_to_acls(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        """
        return pulumi.get(self, "access_to_acls")

    @_builtins.property
    @pulumi.getter(name="accessToBuckets")
    def access_to_buckets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        return pulumi.get(self, "access_to_buckets")


@pulumi.output_type
class ObsBucketAclLogDeliveryUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToAcls":
            suggest = "access_to_acls"
        elif key == "accessToBuckets":
            suggest = "access_to_buckets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketAclLogDeliveryUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketAclLogDeliveryUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketAclLogDeliveryUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_to_acls: Optional[Sequence[_builtins.str]] = None,
                 access_to_buckets: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] access_to_acls: Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        :param Sequence[_builtins.str] access_to_buckets: Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        if access_to_acls is not None:
            pulumi.set(__self__, "access_to_acls", access_to_acls)
        if access_to_buckets is not None:
            pulumi.set(__self__, "access_to_buckets", access_to_buckets)

    @_builtins.property
    @pulumi.getter(name="accessToAcls")
    def access_to_acls(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        """
        return pulumi.get(self, "access_to_acls")

    @_builtins.property
    @pulumi.getter(name="accessToBuckets")
    def access_to_buckets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        return pulumi.get(self, "access_to_buckets")


@pulumi.output_type
class ObsBucketAclOwnerPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToAcls":
            suggest = "access_to_acls"
        elif key == "accessToBuckets":
            suggest = "access_to_buckets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketAclOwnerPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketAclOwnerPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketAclOwnerPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_to_acls: Optional[Sequence[_builtins.str]] = None,
                 access_to_buckets: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] access_to_acls: Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        :param Sequence[_builtins.str] access_to_buckets: Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        if access_to_acls is not None:
            pulumi.set(__self__, "access_to_acls", access_to_acls)
        if access_to_buckets is not None:
            pulumi.set(__self__, "access_to_buckets", access_to_buckets)

    @_builtins.property
    @pulumi.getter(name="accessToAcls")
    def access_to_acls(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        """
        return pulumi.get(self, "access_to_acls")

    @_builtins.property
    @pulumi.getter(name="accessToBuckets")
    def access_to_buckets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        return pulumi.get(self, "access_to_buckets")


@pulumi.output_type
class ObsBucketAclPublicPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToAcls":
            suggest = "access_to_acls"
        elif key == "accessToBuckets":
            suggest = "access_to_buckets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ObsBucketAclPublicPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ObsBucketAclPublicPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ObsBucketAclPublicPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_to_acls: Optional[Sequence[_builtins.str]] = None,
                 access_to_buckets: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] access_to_acls: Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        :param Sequence[_builtins.str] access_to_buckets: Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        if access_to_acls is not None:
            pulumi.set(__self__, "access_to_acls", access_to_acls)
        if access_to_buckets is not None:
            pulumi.set(__self__, "access_to_buckets", access_to_buckets)

    @_builtins.property
    @pulumi.getter(name="accessToAcls")
    def access_to_acls(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
        """
        return pulumi.get(self, "access_to_acls")

    @_builtins.property
    @pulumi.getter(name="accessToBuckets")
    def access_to_buckets(self) -> Optional[Sequence[_builtins.str]]:
        """
        Specifies the access to bucket. Valid values are **READ** and **WRITE**.
        """
        return pulumi.get(self, "access_to_buckets")


@pulumi.output_type
class SfsTurboDuTaskDirUsage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileCounts":
            suggest = "file_counts"
        elif key == "usedCapacity":
            suggest = "used_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SfsTurboDuTaskDirUsage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SfsTurboDuTaskDirUsage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SfsTurboDuTaskDirUsage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_counts: Optional[Sequence['outputs.SfsTurboDuTaskDirUsageFileCount']] = None,
                 message: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 used_capacity: Optional[_builtins.int] = None):
        if file_counts is not None:
            pulumi.set(__self__, "file_counts", file_counts)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if used_capacity is not None:
            pulumi.set(__self__, "used_capacity", used_capacity)

    @_builtins.property
    @pulumi.getter(name="fileCounts")
    def file_counts(self) -> Optional[Sequence['outputs.SfsTurboDuTaskDirUsageFileCount']]:
        return pulumi.get(self, "file_counts")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="usedCapacity")
    def used_capacity(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "used_capacity")


@pulumi.output_type
class SfsTurboDuTaskDirUsageFileCount(dict):
    def __init__(__self__, *,
                 block: Optional[_builtins.int] = None,
                 char: Optional[_builtins.int] = None,
                 dir: Optional[_builtins.int] = None,
                 pipe: Optional[_builtins.int] = None,
                 regular: Optional[_builtins.int] = None,
                 socket: Optional[_builtins.int] = None,
                 symlink: Optional[_builtins.int] = None):
        if block is not None:
            pulumi.set(__self__, "block", block)
        if char is not None:
            pulumi.set(__self__, "char", char)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if pipe is not None:
            pulumi.set(__self__, "pipe", pipe)
        if regular is not None:
            pulumi.set(__self__, "regular", regular)
        if socket is not None:
            pulumi.set(__self__, "socket", socket)
        if symlink is not None:
            pulumi.set(__self__, "symlink", symlink)

    @_builtins.property
    @pulumi.getter
    def block(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "block")

    @_builtins.property
    @pulumi.getter
    def char(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "char")

    @_builtins.property
    @pulumi.getter
    def dir(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "dir")

    @_builtins.property
    @pulumi.getter
    def pipe(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "pipe")

    @_builtins.property
    @pulumi.getter
    def regular(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "regular")

    @_builtins.property
    @pulumi.getter
    def socket(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "socket")

    @_builtins.property
    @pulumi.getter
    def symlink(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "symlink")


@pulumi.output_type
class SfsTurboObsTargetObs(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 endpoint: _builtins.str,
                 attributes: Optional['outputs.SfsTurboObsTargetObsAttributes'] = None,
                 policy: Optional['outputs.SfsTurboObsTargetObsPolicy'] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def attributes(self) -> Optional['outputs.SfsTurboObsTargetObsAttributes']:
        return pulumi.get(self, "attributes")

    @_builtins.property
    @pulumi.getter
    def policy(self) -> Optional['outputs.SfsTurboObsTargetObsPolicy']:
        return pulumi.get(self, "policy")


@pulumi.output_type
class SfsTurboObsTargetObsAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dirMode":
            suggest = "dir_mode"
        elif key == "fileMode":
            suggest = "file_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SfsTurboObsTargetObsAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SfsTurboObsTargetObsAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SfsTurboObsTargetObsAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dir_mode: Optional[_builtins.str] = None,
                 file_mode: Optional[_builtins.str] = None,
                 gid: Optional[_builtins.int] = None,
                 uid: Optional[_builtins.int] = None):
        if dir_mode is not None:
            pulumi.set(__self__, "dir_mode", dir_mode)
        if file_mode is not None:
            pulumi.set(__self__, "file_mode", file_mode)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)

    @_builtins.property
    @pulumi.getter(name="dirMode")
    def dir_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "dir_mode")

    @_builtins.property
    @pulumi.getter(name="fileMode")
    def file_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "file_mode")

    @_builtins.property
    @pulumi.getter
    def gid(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "gid")

    @_builtins.property
    @pulumi.getter
    def uid(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "uid")


@pulumi.output_type
class SfsTurboObsTargetObsPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoExportPolicy":
            suggest = "auto_export_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SfsTurboObsTargetObsPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SfsTurboObsTargetObsPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SfsTurboObsTargetObsPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_export_policy: Optional['outputs.SfsTurboObsTargetObsPolicyAutoExportPolicy'] = None):
        if auto_export_policy is not None:
            pulumi.set(__self__, "auto_export_policy", auto_export_policy)

    @_builtins.property
    @pulumi.getter(name="autoExportPolicy")
    def auto_export_policy(self) -> Optional['outputs.SfsTurboObsTargetObsPolicyAutoExportPolicy']:
        return pulumi.get(self, "auto_export_policy")


@pulumi.output_type
class SfsTurboObsTargetObsPolicyAutoExportPolicy(dict):
    def __init__(__self__, *,
                 events: Optional[Sequence[_builtins.str]] = None,
                 prefix: Optional[_builtins.str] = None,
                 suffix: Optional[_builtins.str] = None):
        if events is not None:
            pulumi.set(__self__, "events", events)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)

    @_builtins.property
    @pulumi.getter
    def events(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "events")

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "prefix")

    @_builtins.property
    @pulumi.getter
    def suffix(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "suffix")


@pulumi.output_type
class SmnSubscriptionExtension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "signSecret":
            suggest = "sign_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmnSubscriptionExtension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmnSubscriptionExtension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmnSubscriptionExtension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: Optional[_builtins.str] = None,
                 client_secret: Optional[_builtins.str] = None,
                 header: Optional[Mapping[str, _builtins.str]] = None,
                 keyword: Optional[_builtins.str] = None,
                 sign_secret: Optional[_builtins.str] = None):
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if keyword is not None:
            pulumi.set(__self__, "keyword", keyword)
        if sign_secret is not None:
            pulumi.set(__self__, "sign_secret", sign_secret)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "client_secret")

    @_builtins.property
    @pulumi.getter
    def header(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "header")

    @_builtins.property
    @pulumi.getter
    def keyword(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "keyword")

    @_builtins.property
    @pulumi.getter(name="signSecret")
    def sign_secret(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "sign_secret")


@pulumi.output_type
class SmnSubscriptionFilterPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringEquals":
            suggest = "string_equals"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmnSubscriptionFilterPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmnSubscriptionFilterPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmnSubscriptionFilterPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[_builtins.str] = None,
                 string_equals: Optional[Sequence[_builtins.str]] = None):
        """
        :param _builtins.str name: The filter policy name. The policy name must be unique.
        :param Sequence[_builtins.str] string_equals: The string array for exact match.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if string_equals is not None:
            pulumi.set(__self__, "string_equals", string_equals)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The filter policy name. The policy name must be unique.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="stringEquals")
    def string_equals(self) -> Optional[Sequence[_builtins.str]]:
        """
        The string array for exact match.
        """
        return pulumi.get(self, "string_equals")


@pulumi.output_type
class SwrOrganizationPermissionsSelfPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwrOrganizationPermissionsSelfPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwrOrganizationPermissionsSelfPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwrOrganizationPermissionsSelfPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: Optional[_builtins.str] = None,
                 user_id: Optional[_builtins.str] = None,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str permission: The permission of current user.
        :param _builtins.str user_id: The ID of current user.
        :param _builtins.str user_name: The name of current user.
        """
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> Optional[_builtins.str]:
        """
        The permission of current user.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        """
        The ID of current user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        The name of current user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class SwrOrganizationPermissionsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userId":
            suggest = "user_id"
        elif key == "userName":
            suggest = "user_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwrOrganizationPermissionsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwrOrganizationPermissionsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwrOrganizationPermissionsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 permission: _builtins.str,
                 user_id: _builtins.str,
                 user_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str permission: Specifies the permission of the existing SberCloud user.
               The values can be **Manage**, **Write** and **Read**.
        :param _builtins.str user_id: Specifies the ID of the existing SberCloud user.
        :param _builtins.str user_name: Specifies the name of the existing SberCloud user.
        """
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter
    def permission(self) -> _builtins.str:
        """
        Specifies the permission of the existing SberCloud user.
        The values can be **Manage**, **Write** and **Read**.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        Specifies the ID of the existing SberCloud user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        """
        Specifies the name of the existing SberCloud user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class VpnConnectionIkepolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationAlgorithm":
            suggest = "authentication_algorithm"
        elif key == "authenticationMethod":
            suggest = "authentication_method"
        elif key == "dhGroup":
            suggest = "dh_group"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "ikeVersion":
            suggest = "ike_version"
        elif key == "lifetimeSeconds":
            suggest = "lifetime_seconds"
        elif key == "localId":
            suggest = "local_id"
        elif key == "localIdType":
            suggest = "local_id_type"
        elif key == "peerId":
            suggest = "peer_id"
        elif key == "peerIdType":
            suggest = "peer_id_type"
        elif key == "phase1NegotiationMode":
            suggest = "phase1_negotiation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionIkepolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionIkepolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionIkepolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_algorithm: Optional[_builtins.str] = None,
                 authentication_method: Optional[_builtins.str] = None,
                 dh_group: Optional[_builtins.str] = None,
                 dpd: Optional['outputs.VpnConnectionIkepolicyDpd'] = None,
                 encryption_algorithm: Optional[_builtins.str] = None,
                 ike_version: Optional[_builtins.str] = None,
                 lifetime_seconds: Optional[_builtins.int] = None,
                 local_id: Optional[_builtins.str] = None,
                 local_id_type: Optional[_builtins.str] = None,
                 peer_id: Optional[_builtins.str] = None,
                 peer_id_type: Optional[_builtins.str] = None,
                 pfs: Optional[_builtins.str] = None,
                 phase1_negotiation_mode: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_algorithm: The authentication algorithm. The value can be **sha1**, **md5**,
               **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
               please use them with caution.
        :param _builtins.str authentication_method: The authentication method during IKE negotiation.
               The value can be **pre-share** and **digital-envelope-v2**. Defaults to **pre-share**.
        :param _builtins.str dh_group: Specifies the DH group used for key exchange in phase 1.
               The value can be **group1**, **group2**, **group5**, **group14**, **group15**, **group16**, **group19**, **group20**,
               or **group21**. Exercise caution when using **group1**, **group2**, **group5**,
               or **group14** as they have low security. Defaults to **group15**.
        :param 'VpnConnectionIkepolicyDpdArgs' dpd: Specifies the dead peer detection (DPD) object.
               The dpd structure is documented below.
               
               <a name="Connection_DPD"></a>
               The `dpd` block supports:
        :param _builtins.str encryption_algorithm: The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
               **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
               **3des** is less secure, please use it with caution.
        :param _builtins.str ike_version: The IKE negotiation version. The value can be **v1** and **v2**. Defaults to **v2**.
        :param _builtins.int lifetime_seconds: The lifecycle time of Ipsec tunnel in seconds.
               The value ranges from **60** to **604800**. Defaults to **3600**.
        :param _builtins.str local_id: The local ID.
        :param _builtins.str local_id_type: The local ID type. The value can be **ip** or **fqdn**. Defaults to **ip**.
        :param _builtins.str peer_id: The peer ID.
        :param _builtins.str peer_id_type: The peer ID type. The value can be **ip**, **fqdn** or **any**. Defaults to **ip**.
        :param _builtins.str pfs: The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
               **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        :param _builtins.str phase1_negotiation_mode: The negotiation mode, only works when the ike_version is v1.
               The value can be **main** or **aggressive**. Defaults to **main**.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if dh_group is not None:
            pulumi.set(__self__, "dh_group", dh_group)
        if dpd is not None:
            pulumi.set(__self__, "dpd", dpd)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if ike_version is not None:
            pulumi.set(__self__, "ike_version", ike_version)
        if lifetime_seconds is not None:
            pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        if local_id is not None:
            pulumi.set(__self__, "local_id", local_id)
        if local_id_type is not None:
            pulumi.set(__self__, "local_id_type", local_id_type)
        if peer_id is not None:
            pulumi.set(__self__, "peer_id", peer_id)
        if peer_id_type is not None:
            pulumi.set(__self__, "peer_id_type", peer_id_type)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if phase1_negotiation_mode is not None:
            pulumi.set(__self__, "phase1_negotiation_mode", phase1_negotiation_mode)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[_builtins.str]:
        """
        The authentication algorithm. The value can be **sha1**, **md5**,
        **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
        please use them with caution.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[_builtins.str]:
        """
        The authentication method during IKE negotiation.
        The value can be **pre-share** and **digital-envelope-v2**. Defaults to **pre-share**.
        """
        return pulumi.get(self, "authentication_method")

    @_builtins.property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> Optional[_builtins.str]:
        """
        Specifies the DH group used for key exchange in phase 1.
        The value can be **group1**, **group2**, **group5**, **group14**, **group15**, **group16**, **group19**, **group20**,
        or **group21**. Exercise caution when using **group1**, **group2**, **group5**,
        or **group14** as they have low security. Defaults to **group15**.
        """
        return pulumi.get(self, "dh_group")

    @_builtins.property
    @pulumi.getter
    def dpd(self) -> Optional['outputs.VpnConnectionIkepolicyDpd']:
        """
        Specifies the dead peer detection (DPD) object.
        The dpd structure is documented below.

        <a name="Connection_DPD"></a>
        The `dpd` block supports:
        """
        return pulumi.get(self, "dpd")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[_builtins.str]:
        """
        The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
        **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
        **3des** is less secure, please use it with caution.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> Optional[_builtins.str]:
        """
        The IKE negotiation version. The value can be **v1** and **v2**. Defaults to **v2**.
        """
        return pulumi.get(self, "ike_version")

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[_builtins.int]:
        """
        The lifecycle time of Ipsec tunnel in seconds.
        The value ranges from **60** to **604800**. Defaults to **3600**.
        """
        return pulumi.get(self, "lifetime_seconds")

    @_builtins.property
    @pulumi.getter(name="localId")
    def local_id(self) -> Optional[_builtins.str]:
        """
        The local ID.
        """
        return pulumi.get(self, "local_id")

    @_builtins.property
    @pulumi.getter(name="localIdType")
    def local_id_type(self) -> Optional[_builtins.str]:
        """
        The local ID type. The value can be **ip** or **fqdn**. Defaults to **ip**.
        """
        return pulumi.get(self, "local_id_type")

    @_builtins.property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> Optional[_builtins.str]:
        """
        The peer ID.
        """
        return pulumi.get(self, "peer_id")

    @_builtins.property
    @pulumi.getter(name="peerIdType")
    def peer_id_type(self) -> Optional[_builtins.str]:
        """
        The peer ID type. The value can be **ip**, **fqdn** or **any**. Defaults to **ip**.
        """
        return pulumi.get(self, "peer_id_type")

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> Optional[_builtins.str]:
        """
        The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
        **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        """
        return pulumi.get(self, "pfs")

    @_builtins.property
    @pulumi.getter(name="phase1NegotiationMode")
    def phase1_negotiation_mode(self) -> Optional[_builtins.str]:
        """
        The negotiation mode, only works when the ike_version is v1.
        The value can be **main** or **aggressive**. Defaults to **main**.
        """
        return pulumi.get(self, "phase1_negotiation_mode")


@pulumi.output_type
class VpnConnectionIkepolicyDpd(dict):
    def __init__(__self__, *,
                 interval: Optional[_builtins.int] = None,
                 msg: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None):
        """
        :param _builtins.int interval: Specifies the DPD idle timeout period.
               The value ranges from **10** to **3600**, in seconds. Defaults to **30**.
        :param _builtins.str msg: Specifies the format of DPD packets. The value can be:
               + **seq-hash-notify**: indicates that the payload of DPD packets is in the sequence of hash-notify;
               + **seq-notify-hash**: indicates that the payload of DPD packets is in the sequence of notify-hash;
               
               Defaults to **seq-hash-notify**.
               
               <a name="Connection_CreateRequestIpsecPolicy"></a>
               The `ipsecpolicy` block supports:
        :param _builtins.int timeout: Specifies the interval for retransmitting DPD packets.
               The value ranges from **2** to **60**, in seconds. Defaults to **15**.
        """
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if msg is not None:
            pulumi.set(__self__, "msg", msg)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> Optional[_builtins.int]:
        """
        Specifies the DPD idle timeout period.
        The value ranges from **10** to **3600**, in seconds. Defaults to **30**.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def msg(self) -> Optional[_builtins.str]:
        """
        Specifies the format of DPD packets. The value can be:
        + **seq-hash-notify**: indicates that the payload of DPD packets is in the sequence of hash-notify;
        + **seq-notify-hash**: indicates that the payload of DPD packets is in the sequence of notify-hash;

        Defaults to **seq-hash-notify**.

        <a name="Connection_CreateRequestIpsecPolicy"></a>
        The `ipsecpolicy` block supports:
        """
        return pulumi.get(self, "msg")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        Specifies the interval for retransmitting DPD packets.
        The value ranges from **2** to **60**, in seconds. Defaults to **15**.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class VpnConnectionIpsecpolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationAlgorithm":
            suggest = "authentication_algorithm"
        elif key == "encapsulationMode":
            suggest = "encapsulation_mode"
        elif key == "encryptionAlgorithm":
            suggest = "encryption_algorithm"
        elif key == "lifetimeSeconds":
            suggest = "lifetime_seconds"
        elif key == "transformProtocol":
            suggest = "transform_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionIpsecpolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionIpsecpolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionIpsecpolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authentication_algorithm: Optional[_builtins.str] = None,
                 encapsulation_mode: Optional[_builtins.str] = None,
                 encryption_algorithm: Optional[_builtins.str] = None,
                 lifetime_seconds: Optional[_builtins.int] = None,
                 pfs: Optional[_builtins.str] = None,
                 transform_protocol: Optional[_builtins.str] = None):
        """
        :param _builtins.str authentication_algorithm: The authentication algorithm. The value can be **sha1**, **md5**,
               **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
               please use them with caution.
        :param _builtins.str encapsulation_mode: The encapsulation mode, only **tunnel** supported for now.
               Defaults to **tunnel**.
               
               <a name="Connection_PolicyRule"></a>
               The `policy_rules` block supports:
        :param _builtins.str encryption_algorithm: The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
               **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
               **3des** is less secure, please use it with caution.
        :param _builtins.int lifetime_seconds: The lifecycle time of Ipsec tunnel in seconds.
               The value ranges from **60** to **604800**. Defaults to **3600**.
        :param _builtins.str pfs: The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
               **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        :param _builtins.str transform_protocol: The transform protocol. Only **esp** supported for now.
               Defaults to **esp**.
        """
        if authentication_algorithm is not None:
            pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        if encapsulation_mode is not None:
            pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        if lifetime_seconds is not None:
            pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        if pfs is not None:
            pulumi.set(__self__, "pfs", pfs)
        if transform_protocol is not None:
            pulumi.set(__self__, "transform_protocol", transform_protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> Optional[_builtins.str]:
        """
        The authentication algorithm. The value can be **sha1**, **md5**,
        **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
        please use them with caution.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> Optional[_builtins.str]:
        """
        The encapsulation mode, only **tunnel** supported for now.
        Defaults to **tunnel**.

        <a name="Connection_PolicyRule"></a>
        The `policy_rules` block supports:
        """
        return pulumi.get(self, "encapsulation_mode")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[_builtins.str]:
        """
        The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
        **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
        **3des** is less secure, please use it with caution.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> Optional[_builtins.int]:
        """
        The lifecycle time of Ipsec tunnel in seconds.
        The value ranges from **60** to **604800**. Defaults to **3600**.
        """
        return pulumi.get(self, "lifetime_seconds")

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> Optional[_builtins.str]:
        """
        The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
        **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
        """
        return pulumi.get(self, "pfs")

    @_builtins.property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> Optional[_builtins.str]:
        """
        The transform protocol. Only **esp** supported for now.
        Defaults to **esp**.
        """
        return pulumi.get(self, "transform_protocol")


@pulumi.output_type
class VpnConnectionPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleIndex":
            suggest = "rule_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Optional[Sequence[_builtins.str]] = None,
                 rule_index: Optional[_builtins.int] = None,
                 source: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] destinations: The list of destination CIDRs.
        :param _builtins.int rule_index: The rule index.
        :param _builtins.str source: The source CIDR.
        """
        if destinations is not None:
            pulumi.set(__self__, "destinations", destinations)
        if rule_index is not None:
            pulumi.set(__self__, "rule_index", rule_index)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence[_builtins.str]]:
        """
        The list of destination CIDRs.
        """
        return pulumi.get(self, "destinations")

    @_builtins.property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> Optional[_builtins.int]:
        """
        The rule index.
        """
        return pulumi.get(self, "rule_index")

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[_builtins.str]:
        """
        The source CIDR.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class VpnGatewayCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateChain":
            suggest = "certificate_chain"
        elif key == "encCertificate":
            suggest = "enc_certificate"
        elif key == "encPrivateKey":
            suggest = "enc_private_key"
        elif key == "privateKey":
            suggest = "private_key"
        elif key == "certificateChainExpireTime":
            suggest = "certificate_chain_expire_time"
        elif key == "certificateChainSerialNumber":
            suggest = "certificate_chain_serial_number"
        elif key == "certificateChainSubject":
            suggest = "certificate_chain_subject"
        elif key == "certificateExpireTime":
            suggest = "certificate_expire_time"
        elif key == "certificateId":
            suggest = "certificate_id"
        elif key == "certificateSerialNumber":
            suggest = "certificate_serial_number"
        elif key == "certificateSubject":
            suggest = "certificate_subject"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "encCertificateExpireTime":
            suggest = "enc_certificate_expire_time"
        elif key == "encCertificateSerialNumber":
            suggest = "enc_certificate_serial_number"
        elif key == "encCertificateSubject":
            suggest = "enc_certificate_subject"
        elif key == "signatureAlgorithm":
            suggest = "signature_algorithm"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewayCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewayCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewayCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_chain: _builtins.str,
                 content: _builtins.str,
                 enc_certificate: _builtins.str,
                 enc_private_key: _builtins.str,
                 name: _builtins.str,
                 private_key: _builtins.str,
                 certificate_chain_expire_time: Optional[_builtins.str] = None,
                 certificate_chain_serial_number: Optional[_builtins.str] = None,
                 certificate_chain_subject: Optional[_builtins.str] = None,
                 certificate_expire_time: Optional[_builtins.str] = None,
                 certificate_id: Optional[_builtins.str] = None,
                 certificate_serial_number: Optional[_builtins.str] = None,
                 certificate_subject: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 enc_certificate_expire_time: Optional[_builtins.str] = None,
                 enc_certificate_serial_number: Optional[_builtins.str] = None,
                 enc_certificate_subject: Optional[_builtins.str] = None,
                 issuer: Optional[_builtins.str] = None,
                 signature_algorithm: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str certificate_chain: The certificate chain of the gateway certificate.
        :param _builtins.str content: The content of the gateway certificate.
        :param _builtins.str enc_certificate: The enc certificate of the gateway certificate.
        :param _builtins.str enc_private_key: The enc private key of the gateway certificate.
        :param _builtins.str name: The name of the gateway certificate.
        :param _builtins.str private_key: The private of the gateway certificate.
        :param _builtins.str certificate_chain_expire_time: The expire time of the certificate.
        :param _builtins.str certificate_chain_serial_number: The serial number of the certificate chain.
        :param _builtins.str certificate_chain_subject: The subject of the certificate chain.
        :param _builtins.str certificate_expire_time: The expire time of the certificate.
        :param _builtins.str certificate_id: The certificate ID.
        :param _builtins.str certificate_serial_number: The serial number of the certificate.
        :param _builtins.str certificate_subject: The subject of the certificate.
        :param _builtins.str created_at: The create time of the gateway certificate.
        :param _builtins.str enc_certificate_expire_time: The expire time of the enc certificate.
        :param _builtins.str enc_certificate_serial_number: The serial number of the enc certificate.
        :param _builtins.str enc_certificate_subject: The subject of the enc certificate.
        :param _builtins.str issuer: The issuer of the certificate.
        :param _builtins.str signature_algorithm: The signature algorithm of the certificate.
        :param _builtins.str status: The status of the certificate.
        :param _builtins.str updated_at: The update time of the gateway certificate.
        """
        pulumi.set(__self__, "certificate_chain", certificate_chain)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "enc_certificate", enc_certificate)
        pulumi.set(__self__, "enc_private_key", enc_private_key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_key", private_key)
        if certificate_chain_expire_time is not None:
            pulumi.set(__self__, "certificate_chain_expire_time", certificate_chain_expire_time)
        if certificate_chain_serial_number is not None:
            pulumi.set(__self__, "certificate_chain_serial_number", certificate_chain_serial_number)
        if certificate_chain_subject is not None:
            pulumi.set(__self__, "certificate_chain_subject", certificate_chain_subject)
        if certificate_expire_time is not None:
            pulumi.set(__self__, "certificate_expire_time", certificate_expire_time)
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_serial_number is not None:
            pulumi.set(__self__, "certificate_serial_number", certificate_serial_number)
        if certificate_subject is not None:
            pulumi.set(__self__, "certificate_subject", certificate_subject)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enc_certificate_expire_time is not None:
            pulumi.set(__self__, "enc_certificate_expire_time", enc_certificate_expire_time)
        if enc_certificate_serial_number is not None:
            pulumi.set(__self__, "enc_certificate_serial_number", enc_certificate_serial_number)
        if enc_certificate_subject is not None:
            pulumi.set(__self__, "enc_certificate_subject", enc_certificate_subject)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if signature_algorithm is not None:
            pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="certificateChain")
    def certificate_chain(self) -> _builtins.str:
        """
        The certificate chain of the gateway certificate.
        """
        return pulumi.get(self, "certificate_chain")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The content of the gateway certificate.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter(name="encCertificate")
    def enc_certificate(self) -> _builtins.str:
        """
        The enc certificate of the gateway certificate.
        """
        return pulumi.get(self, "enc_certificate")

    @_builtins.property
    @pulumi.getter(name="encPrivateKey")
    def enc_private_key(self) -> _builtins.str:
        """
        The enc private key of the gateway certificate.
        """
        return pulumi.get(self, "enc_private_key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the gateway certificate.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> _builtins.str:
        """
        The private of the gateway certificate.
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="certificateChainExpireTime")
    def certificate_chain_expire_time(self) -> Optional[_builtins.str]:
        """
        The expire time of the certificate.
        """
        return pulumi.get(self, "certificate_chain_expire_time")

    @_builtins.property
    @pulumi.getter(name="certificateChainSerialNumber")
    def certificate_chain_serial_number(self) -> Optional[_builtins.str]:
        """
        The serial number of the certificate chain.
        """
        return pulumi.get(self, "certificate_chain_serial_number")

    @_builtins.property
    @pulumi.getter(name="certificateChainSubject")
    def certificate_chain_subject(self) -> Optional[_builtins.str]:
        """
        The subject of the certificate chain.
        """
        return pulumi.get(self, "certificate_chain_subject")

    @_builtins.property
    @pulumi.getter(name="certificateExpireTime")
    def certificate_expire_time(self) -> Optional[_builtins.str]:
        """
        The expire time of the certificate.
        """
        return pulumi.get(self, "certificate_expire_time")

    @_builtins.property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[_builtins.str]:
        """
        The certificate ID.
        """
        return pulumi.get(self, "certificate_id")

    @_builtins.property
    @pulumi.getter(name="certificateSerialNumber")
    def certificate_serial_number(self) -> Optional[_builtins.str]:
        """
        The serial number of the certificate.
        """
        return pulumi.get(self, "certificate_serial_number")

    @_builtins.property
    @pulumi.getter(name="certificateSubject")
    def certificate_subject(self) -> Optional[_builtins.str]:
        """
        The subject of the certificate.
        """
        return pulumi.get(self, "certificate_subject")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The create time of the gateway certificate.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="encCertificateExpireTime")
    def enc_certificate_expire_time(self) -> Optional[_builtins.str]:
        """
        The expire time of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_expire_time")

    @_builtins.property
    @pulumi.getter(name="encCertificateSerialNumber")
    def enc_certificate_serial_number(self) -> Optional[_builtins.str]:
        """
        The serial number of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_serial_number")

    @_builtins.property
    @pulumi.getter(name="encCertificateSubject")
    def enc_certificate_subject(self) -> Optional[_builtins.str]:
        """
        The subject of the enc certificate.
        """
        return pulumi.get(self, "enc_certificate_subject")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> Optional[_builtins.str]:
        """
        The issuer of the certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> Optional[_builtins.str]:
        """
        The signature algorithm of the certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        The status of the certificate.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The update time of the gateway certificate.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class VpnGatewayEip1(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewayEip1. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewayEip1.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewayEip1.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_name: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.
               
               Changing this parameter will create a new resource.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
               When the `flavor` is **Professional2**, the value cannot be greater than **1000**.
               
               Changing this parameter will create a new resource.
        :param _builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
        :param _builtins.str id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[_builtins.str]:
        """
        The bandwidth name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
        When the `flavor` is **Professional2**, the value cannot be greater than **1000**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VpnGatewayEip2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewayEip2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewayEip2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewayEip2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_name: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.
               
               Changing this parameter will create a new resource.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
               When the `flavor` is **Professional2**, the value cannot be greater than **1000**.
               
               Changing this parameter will create a new resource.
        :param _builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
        :param _builtins.str id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[_builtins.str]:
        """
        The bandwidth name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
        When the `flavor` is **Professional2**, the value cannot be greater than **1000**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VpnGatewayMasterEip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewayMasterEip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewayMasterEip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewayMasterEip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_name: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.
               
               Changing this parameter will create a new resource.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
               When the `flavor` is **Professional2**, the value cannot be greater than **1000**.
               
               Changing this parameter will create a new resource.
        :param _builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
        :param _builtins.str id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[_builtins.str]:
        """
        The bandwidth name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
        When the `flavor` is **Professional2**, the value cannot be greater than **1000**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class VpnGatewaySlaveEip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bandwidthId":
            suggest = "bandwidth_id"
        elif key == "bandwidthName":
            suggest = "bandwidth_name"
        elif key == "bandwidthSize":
            suggest = "bandwidth_size"
        elif key == "chargeMode":
            suggest = "charge_mode"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnGatewaySlaveEip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnGatewaySlaveEip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnGatewaySlaveEip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bandwidth_id: Optional[_builtins.str] = None,
                 bandwidth_name: Optional[_builtins.str] = None,
                 bandwidth_size: Optional[_builtins.int] = None,
                 charge_mode: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 ip_address: Optional[_builtins.str] = None,
                 ip_version: Optional[_builtins.int] = None,
                 type: Optional[_builtins.str] = None):
        """
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.
               
               Changing this parameter will create a new resource.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
               cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
               When the `flavor` is **Professional2**, the value cannot be greater than **1000**.
               
               Changing this parameter will create a new resource.
        :param _builtins.str charge_mode: The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
               
               Changing this parameter will create a new resource.
               
               > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
               create a new EIP.
        :param _builtins.str id: The public IP ID.
               
               Changing this parameter will create a new resource.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type. The value can be **5_bgp** and **5_sbgp**.
               
               Changing this parameter will create a new resource.
        """
        if bandwidth_id is not None:
            pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        if bandwidth_name is not None:
            pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        if bandwidth_size is not None:
            pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        if charge_mode is not None:
            pulumi.set(__self__, "charge_mode", charge_mode)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> Optional[_builtins.str]:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> Optional[_builtins.str]:
        """
        The bandwidth name.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> Optional[_builtins.int]:
        """
        Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
        cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
        When the `flavor` is **Professional2**, the value cannot be greater than **1000**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> Optional[_builtins.str]:
        """
        The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.

        Changing this parameter will create a new resource.

        > You can use `id` to specify an existing EIP or use `type`, `bandwidth_name`, `bandwidth_size` and `charge_mode` to
        create a new EIP.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The public IP ID.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[_builtins.str]:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[_builtins.int]:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        The EIP type. The value can be **5_bgp** and **5_sbgp**.

        Changing this parameter will create a new resource.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigAclPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 bind_num: _builtins.int,
                 entity_type: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.int bind_num: The number of bound APIs.
        :param _builtins.str entity_type: The entity type of the ACL policy.
        :param _builtins.str id: The ID of the ACL policy.
        :param _builtins.str name: The name of the ACL policy.
        :param _builtins.str type: The type of the ACL policy.
        :param _builtins.str updated_at: The latest update time of the policy.
        :param _builtins.str value: The value of the ACL policy.
        """
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> _builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> _builtins.str:
        """
        The entity type of the ACL policy.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the ACL policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the ACL policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the ACL policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the policy.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the ACL policy.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiAssociatedAclPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 entity_type: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the ACL policy is bound to the API.
        :param _builtins.str entity_type: The entity type of the ACL policy.
        :param _builtins.str env_id: The ID of the environment where the API is published.
        :param _builtins.str env_name: The name of the environment where the API is published.
        :param _builtins.str id: The ID of the ACL policy.
        :param _builtins.str name: The name of the ACL policy.
        :param _builtins.str type: The type of the ACL policy.
        :param _builtins.str value: One or more objects from which the access will be controlled.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the ACL policy is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> _builtins.str:
        """
        The entity type of the ACL policy.
        """
        return pulumi.get(self, "entity_type")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the ACL policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the ACL policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the ACL policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        One or more objects from which the access will be controlled.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiAssociatedApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 description: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the application is bound to the API.
        :param _builtins.str description: The description of the application.
        :param _builtins.str env_id: The ID of the environment where the API is published.
        :param _builtins.str env_name: The name of the environment where the API is published.
        :param _builtins.str id: The ID of the application.
        :param _builtins.str name: The name of the application.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the application is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetApigApiAssociatedPluginsPluginResult(dict):
    def __init__(__self__, *,
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 content: _builtins.str,
                 description: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the plugin is bound to the API.
        :param _builtins.str content: The configuration details for the plugin.
        :param _builtins.str description: The description of the plugin.
        :param _builtins.str env_id: The ID of the environment where the API is published.
        :param _builtins.str env_name: The name of the environment where the API is published.
        :param _builtins.str id: The ID of the plugin.
        :param _builtins.str name: The name of the plugin.
        :param _builtins.str type: The type of the plugin.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the plugin is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        """
        The configuration details for the plugin.
        """
        return pulumi.get(self, "content")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the plugin.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the plugin.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the plugin.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the plugin.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigApiAssociatedSignaturesSignatureResult(dict):
    def __init__(__self__, *,
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 key: _builtins.str,
                 name: _builtins.str,
                 secret: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the signature is bound to the API.
        :param _builtins.str env_id: The ID of the environment where the API is published.
        :param _builtins.str env_name: The name of the environment where the API is published.
        :param _builtins.str id: The ID of the signature.
        :param _builtins.str key: The signature key.
        :param _builtins.str name: The name of the signature.
        :param _builtins.str secret: The signature secret.
        :param _builtins.str type: The type of the signature.
        """
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the signature is bound to the API.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the signature.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The signature key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the signature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> _builtins.str:
        """
        The signature secret.
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the signature.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigApiAssociatedThrottlingPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 app_throttles: Sequence['outputs.GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleResult'],
                 bind_id: _builtins.str,
                 bind_time: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 env_name: _builtins.str,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 max_app_requests: _builtins.int,
                 max_ip_requests: _builtins.int,
                 max_user_requests: _builtins.int,
                 name: _builtins.str,
                 period: _builtins.int,
                 period_unit: _builtins.str,
                 type: _builtins.str,
                 user_throttles: Sequence['outputs.GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleResult']):
        """
        :param Sequence['GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleArgs'] app_throttles: The array of one or more special throttling policies for APP limit.
        :param _builtins.str bind_id: The bind ID.
        :param _builtins.str bind_time: The time that the throttling policy is bound to the API, in RFC3339 format.
        :param _builtins.str created_at: The creation time of the throttling policy, in RFC3339 format.
        :param _builtins.str description: The description of the throttling policy.
        :param _builtins.str env_name: The name of the environment where the API is published.
        :param _builtins.str id: The ID of the throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.int max_app_requests: The maximum number of times the API can be accessed by an app within the same period.
        :param _builtins.int max_ip_requests: The maximum number of times the API can be accessed by an IP address within the same period.
        :param _builtins.int max_user_requests: The maximum number of times the API can be accessed by a user within the same period.
        :param _builtins.str name: The name of the throttling policy.
        :param _builtins.int period: The period of time for limiting the number of API calls.
        :param _builtins.str period_unit: The time unit for limiting the number of API calls.
        :param _builtins.str type: The type of the throttling policy.
        :param Sequence['GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleArgs'] user_throttles: The array of one or more special throttling policies for IAM user limit.
        """
        pulumi.set(__self__, "app_throttles", app_throttles)
        pulumi.set(__self__, "bind_id", bind_id)
        pulumi.set(__self__, "bind_time", bind_time)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "max_app_requests", max_app_requests)
        pulumi.set(__self__, "max_ip_requests", max_ip_requests)
        pulumi.set(__self__, "max_user_requests", max_user_requests)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_unit", period_unit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_throttles", user_throttles)

    @_builtins.property
    @pulumi.getter(name="appThrottles")
    def app_throttles(self) -> Sequence['outputs.GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleResult']:
        """
        The array of one or more special throttling policies for APP limit.
        """
        return pulumi.get(self, "app_throttles")

    @_builtins.property
    @pulumi.getter(name="bindId")
    def bind_id(self) -> _builtins.str:
        """
        The bind ID.
        """
        return pulumi.get(self, "bind_id")

    @_builtins.property
    @pulumi.getter(name="bindTime")
    def bind_time(self) -> _builtins.str:
        """
        The time that the throttling policy is bound to the API, in RFC3339 format.
        """
        return pulumi.get(self, "bind_time")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the throttling policy, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the throttling policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="maxAppRequests")
    def max_app_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by an app within the same period.
        """
        return pulumi.get(self, "max_app_requests")

    @_builtins.property
    @pulumi.getter(name="maxIpRequests")
    def max_ip_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by an IP address within the same period.
        """
        return pulumi.get(self, "max_ip_requests")

    @_builtins.property
    @pulumi.getter(name="maxUserRequests")
    def max_user_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by a user within the same period.
        """
        return pulumi.get(self, "max_user_requests")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the throttling policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        The period of time for limiting the number of API calls.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> _builtins.str:
        """
        The time unit for limiting the number of API calls.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the throttling policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userThrottles")
    def user_throttles(self) -> Sequence['outputs.GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleResult']:
        """
        The array of one or more special throttling policies for IAM user limit.
        """
        return pulumi.get(self, "user_throttles")


@pulumi.output_type
class GetApigApiAssociatedThrottlingPoliciesPolicyAppThrottleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 throttling_object_name: _builtins.str):
        """
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> _builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetApigApiAssociatedThrottlingPoliciesPolicyUserThrottleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 throttling_object_name: _builtins.str):
        """
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> _builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetApigApiBackendParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 request_id: _builtins.str,
                 system_param_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str id: The ID of the backend parameter.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.str name: The name of parameter.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str system_param_type: The type of the system parameter.
        :param _builtins.str type: The name of parameter.
        :param _builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend parameter.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> _builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiBasicConfigurationsConfigurationResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_type: _builtins.str,
                 cors: _builtins.bool,
                 description: _builtins.str,
                 env_id: _builtins.str,
                 env_name: _builtins.str,
                 group_id: _builtins.str,
                 group_name: _builtins.str,
                 group_version: _builtins.str,
                 id: _builtins.str,
                 matching: _builtins.str,
                 name: _builtins.str,
                 publish_id: _builtins.str,
                 published_at: _builtins.str,
                 registered_at: _builtins.str,
                 request_method: _builtins.str,
                 request_path: _builtins.str,
                 request_protocol: _builtins.str,
                 security_authentication: _builtins.str,
                 simple_authentication: _builtins.bool,
                 tags: Sequence[_builtins.str],
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the authorizer to which the API request used.
        :param _builtins.str backend_type: The backend type of the API.
        :param _builtins.bool cors: Whether CORS is supported.
        :param _builtins.str description: The description of the API.
        :param _builtins.str env_id: The ID of the environment where the API is published.
        :param _builtins.str env_name: The name of the environment where the API is published.
        :param _builtins.str group_id: The ID of group corresponding to the API.
        :param _builtins.str group_name: The name of group corresponding to the API.
        :param _builtins.str group_version: The version of group corresponding to the API.
        :param _builtins.str id: The ID of the API.
        :param _builtins.str matching: The matching mode of the API.
        :param _builtins.str name: The name of the API.
        :param _builtins.str publish_id: The ID of publish corresponding to the API.
        :param _builtins.str published_at: The published time of the API, in RFC3339 format.
        :param _builtins.str registered_at: The registered time of the API, in RFC3339 format.
        :param _builtins.str request_method: The request method of the API.
        :param _builtins.str request_path: The request address of the API.
        :param _builtins.str request_protocol: The request protocol of the API.
        :param _builtins.str security_authentication: The security authentication mode of the API request.
        :param _builtins.bool simple_authentication: Whether the authentication of the application code is enabled.
        :param Sequence[_builtins.str] tags: The list of tags configuration.
        :param _builtins.str type: The type of the API.
        :param _builtins.str updated_at: The latest update time of the API, in RFC3339 format.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_type", backend_type)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "env_name", env_name)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "group_version", group_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "matching", matching)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "publish_id", publish_id)
        pulumi.set(__self__, "published_at", published_at)
        pulumi.set(__self__, "registered_at", registered_at)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_path", request_path)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "security_authentication", security_authentication)
        pulumi.set(__self__, "simple_authentication", simple_authentication)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the authorizer to which the API request used.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> _builtins.str:
        """
        The backend type of the API.
        """
        return pulumi.get(self, "backend_type")

    @_builtins.property
    @pulumi.getter
    def cors(self) -> _builtins.bool:
        """
        Whether CORS is supported.
        """
        return pulumi.get(self, "cors")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the API.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        The ID of the environment where the API is published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        """
        The name of the environment where the API is published.
        """
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        The ID of group corresponding to the API.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        The name of group corresponding to the API.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="groupVersion")
    def group_version(self) -> _builtins.str:
        """
        The version of group corresponding to the API.
        """
        return pulumi.get(self, "group_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the API.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def matching(self) -> _builtins.str:
        """
        The matching mode of the API.
        """
        return pulumi.get(self, "matching")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the API.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publishId")
    def publish_id(self) -> _builtins.str:
        """
        The ID of publish corresponding to the API.
        """
        return pulumi.get(self, "publish_id")

    @_builtins.property
    @pulumi.getter(name="publishedAt")
    def published_at(self) -> _builtins.str:
        """
        The published time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "published_at")

    @_builtins.property
    @pulumi.getter(name="registeredAt")
    def registered_at(self) -> _builtins.str:
        """
        The registered time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "registered_at")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> _builtins.str:
        """
        The request method of the API.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> _builtins.str:
        """
        The request address of the API.
        """
        return pulumi.get(self, "request_path")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The request protocol of the API.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="securityAuthentication")
    def security_authentication(self) -> _builtins.str:
        """
        The security authentication mode of the API request.
        """
        return pulumi.get(self, "security_authentication")

    @_builtins.property
    @pulumi.getter(name="simpleAuthentication")
    def simple_authentication(self) -> _builtins.bool:
        """
        Whether the authentication of the application code is enabled.
        """
        return pulumi.get(self, "simple_authentication")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        """
        The list of tags configuration.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the API.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the API, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigApiFuncGraphResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 function_alias_urn: _builtins.str,
                 function_urn: _builtins.str,
                 id: _builtins.str,
                 invocation_type: _builtins.str,
                 network_type: _builtins.str,
                 request_protocol: _builtins.str,
                 timeout: _builtins.int,
                 version: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param _builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param _builtins.str function_urn: The URN of the FunctionGraph function.
        :param _builtins.str id: The ID of the FunctionGraph backend configuration.
        :param _builtins.str invocation_type: The invocation type.
        :param _builtins.str network_type: The network architecture (framework) type of the FunctionGraph function.
        :param _builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param _builtins.int timeout: The timeout for API requests to backend service.
        :param _builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "invocation_type", invocation_type)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> _builtins.str:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the FunctionGraph backend configuration.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> _builtins.str:
        """
        The invocation type.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The network architecture (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApigApiFuncGraphPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_params: Sequence['outputs.GetApigApiFuncGraphPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApigApiFuncGraphPolicyConditionResult'],
                 effective_mode: _builtins.str,
                 function_alias_urn: _builtins.str,
                 function_urn: _builtins.str,
                 id: _builtins.str,
                 invocation_type: _builtins.str,
                 name: _builtins.str,
                 network_type: _builtins.str,
                 request_protocol: _builtins.str,
                 timeout: _builtins.int,
                 version: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['GetApigApiFuncGraphPolicyBackendParamArgs'] backend_params: The configaiton list of the backend parameters.
        :param Sequence['GetApigApiFuncGraphPolicyConditionArgs'] conditions: The policy conditions.
        :param _builtins.str effective_mode: The effective mode of the backend policy.
        :param _builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param _builtins.str function_urn: The URN of the FunctionGraph function.
        :param _builtins.str id: The ID of the FunctionGraph backend policy.
        :param _builtins.str invocation_type: The invocation mode of the FunctionGraph function.
        :param _builtins.str name: The name of the backend policy.
        :param _builtins.str network_type: The network (framework) type of the FunctionGraph function.
        :param _builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param _builtins.int timeout: The timeout for API requests to backend service.
        :param _builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "invocation_type", invocation_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApigApiFuncGraphPolicyBackendParamResult']:
        """
        The configaiton list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApigApiFuncGraphPolicyConditionResult']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> _builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> _builtins.str:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the FunctionGraph backend policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> _builtins.str:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the backend policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The network (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApigApiFuncGraphPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 request_id: _builtins.str,
                 system_param_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str id: The ID of the backend parameter.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.str name: The name of parameter.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str system_param_type: The type of the system parameter.
        :param _builtins.str type: The name of parameter.
        :param _builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend parameter.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> _builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiFuncGraphPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 frontend_authorizer_name: _builtins.str,
                 id: _builtins.str,
                 param_name: _builtins.str,
                 request_id: _builtins.str,
                 request_location: _builtins.str,
                 source: _builtins.str,
                 sys_name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str cookie_name: The cookie parameter name.
        :param _builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str param_name: The request parameter name.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str request_location: The location of the corresponding request parameter.
        :param _builtins.str source: The type of the backend policy.
        :param _builtins.str sys_name: The gateway built-in parameter name.
        :param _builtins.str type: The condition type of the backend policy.
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> _builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> _builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> _builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> _builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiMockResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 id: _builtins.str,
                 response: _builtins.str,
                 status_code: _builtins.int):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param _builtins.str id: The ID of the mock backend configuration.
        :param _builtins.str response: The response of the mock backend configuration.
        :param _builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "response", response)
        pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the mock backend configuration.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def response(self) -> _builtins.str:
        """
        The response of the mock backend configuration.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.int:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetApigApiMockPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_params: Sequence['outputs.GetApigApiMockPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApigApiMockPolicyConditionResult'],
                 effective_mode: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 response: _builtins.str,
                 status_code: _builtins.int):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['GetApigApiMockPolicyBackendParamArgs'] backend_params: The configuration list of backend parameters.
        :param Sequence['GetApigApiMockPolicyConditionArgs'] conditions: The policy conditions.
        :param _builtins.str effective_mode: The effective mode of the backend policy.
        :param _builtins.str id: The ID of the mock backend policy.
        :param _builtins.str name: The backend policy name.
        :param _builtins.str response: The response of the backend policy.
        :param _builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "response", response)
        pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApigApiMockPolicyBackendParamResult']:
        """
        The configuration list of backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApigApiMockPolicyConditionResult']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> _builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the mock backend policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The backend policy name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def response(self) -> _builtins.str:
        """
        The response of the backend policy.
        """
        return pulumi.get(self, "response")

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> _builtins.int:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class GetApigApiMockPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 request_id: _builtins.str,
                 system_param_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str id: The ID of the backend parameter.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.str name: The name of parameter.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str system_param_type: The type of the system parameter.
        :param _builtins.str type: The name of parameter.
        :param _builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend parameter.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> _builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiMockPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 frontend_authorizer_name: _builtins.str,
                 id: _builtins.str,
                 param_name: _builtins.str,
                 request_id: _builtins.str,
                 request_location: _builtins.str,
                 source: _builtins.str,
                 sys_name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str cookie_name: The cookie parameter name.
        :param _builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str param_name: The request parameter name.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str request_location: The location of the corresponding request parameter.
        :param _builtins.str source: The type of the backend policy.
        :param _builtins.str sys_name: The gateway built-in parameter name.
        :param _builtins.str type: The condition type of the backend policy.
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> _builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> _builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> _builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> _builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiRequestParamResult(dict):
    def __init__(__self__, *,
                 default: _builtins.str,
                 description: _builtins.str,
                 enumeration: _builtins.str,
                 example: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 maximum: _builtins.int,
                 minimum: _builtins.int,
                 name: _builtins.str,
                 passthrough: _builtins.bool,
                 required: _builtins.bool,
                 type: _builtins.str,
                 valid_enable: _builtins.int):
        """
        :param _builtins.str default: The default value of the parameter.
        :param _builtins.str description: The parameter description.
        :param _builtins.str enumeration: The enumerated value.
        :param _builtins.str example: The parameter example.
        :param _builtins.str id: The ID of the request parameter.
        :param _builtins.str location: Where this parameter is located.
        :param _builtins.int maximum: The maximum value or length (string parameter) for parameter.
        :param _builtins.int minimum: The minimum value or length (string parameter) for parameter.
        :param _builtins.str name: The name of the request parameter.
        :param _builtins.bool passthrough: Whether to transparently transfer the parameter.
        :param _builtins.bool required: Whether this parameter is required.
        :param _builtins.str type: The parameter type.
        :param _builtins.int valid_enable: Whether to enable the parameter validation.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enumeration", enumeration)
        pulumi.set(__self__, "example", example)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "maximum", maximum)
        pulumi.set(__self__, "minimum", minimum)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "passthrough", passthrough)
        pulumi.set(__self__, "required", required)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "valid_enable", valid_enable)

    @_builtins.property
    @pulumi.getter
    def default(self) -> _builtins.str:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "default")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The parameter description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enumeration(self) -> _builtins.str:
        """
        The enumerated value.
        """
        return pulumi.get(self, "enumeration")

    @_builtins.property
    @pulumi.getter
    def example(self) -> _builtins.str:
        """
        The parameter example.
        """
        return pulumi.get(self, "example")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the request parameter.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where this parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def maximum(self) -> _builtins.int:
        """
        The maximum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "maximum")

    @_builtins.property
    @pulumi.getter
    def minimum(self) -> _builtins.int:
        """
        The minimum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "minimum")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the request parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def passthrough(self) -> _builtins.bool:
        """
        Whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @_builtins.property
    @pulumi.getter
    def required(self) -> _builtins.bool:
        """
        Whether this parameter is required.
        """
        return pulumi.get(self, "required")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> _builtins.int:
        """
        Whether to enable the parameter validation.
        """
        return pulumi.get(self, "valid_enable")


@pulumi.output_type
class GetApigApiWebResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_address: _builtins.str,
                 host_header: _builtins.str,
                 id: _builtins.str,
                 path: _builtins.str,
                 request_method: _builtins.str,
                 request_protocol: _builtins.str,
                 retry_count: _builtins.int,
                 ssl_enable: _builtins.bool,
                 timeout: _builtins.int,
                 vpc_channel_id: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param _builtins.str backend_address: The backend service address.
        :param _builtins.str host_header: The proxy host header.
        :param _builtins.str id: The ID of the backend configuration.
        :param _builtins.str path: The backend request path.
        :param _builtins.str request_method: The backend request method of the API.
        :param _builtins.str request_protocol: The web protocol type of the API request.
        :param _builtins.int retry_count: The number of retry attempts to request the backend service.
        :param _builtins.bool ssl_enable: Whether to enable two-way authentication.
        :param _builtins.int timeout: The timeout for API requests to backend service.
        :param _builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_address", backend_address)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "ssl_enable", ssl_enable)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> _builtins.str:
        """
        The backend service address.
        """
        return pulumi.get(self, "backend_address")

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> _builtins.str:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend configuration.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The backend request path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> _builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The web protocol type of the API request.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> _builtins.int:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @_builtins.property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> _builtins.bool:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "ssl_enable")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> _builtins.str:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class GetApigApiWebPolicyResult(dict):
    def __init__(__self__, *,
                 authorizer_id: _builtins.str,
                 backend_address: _builtins.str,
                 backend_params: Sequence['outputs.GetApigApiWebPolicyBackendParamResult'],
                 conditions: Sequence['outputs.GetApigApiWebPolicyConditionResult'],
                 effective_mode: _builtins.str,
                 host_header: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 path: _builtins.str,
                 request_method: _builtins.str,
                 request_protocol: _builtins.str,
                 retry_count: _builtins.int,
                 timeout: _builtins.int,
                 vpc_channel_id: _builtins.str):
        """
        :param _builtins.str authorizer_id: The ID of the backend custom authorization.
        :param _builtins.str backend_address: The backend service address
        :param Sequence['GetApigApiWebPolicyBackendParamArgs'] backend_params: The configuration list of the backend parameters.
        :param Sequence['GetApigApiWebPolicyConditionArgs'] conditions: The policy conditions.
        :param _builtins.str effective_mode: The effective mode of the backend policy.
        :param _builtins.str host_header: The proxy host header.
        :param _builtins.str id: The ID of the web policy.
        :param _builtins.str name: The name of the web policy.
        :param _builtins.str path: The backend request address.
        :param _builtins.str request_method: The backend request method of the API.
        :param _builtins.str request_protocol: The backend request protocol.
        :param _builtins.int retry_count: The number of retry attempts to request the backend service.
        :param _builtins.int timeout: The timeout for API requests to backend service.
        :param _builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        pulumi.set(__self__, "backend_address", backend_address)
        pulumi.set(__self__, "backend_params", backend_params)
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "effective_mode", effective_mode)
        pulumi.set(__self__, "host_header", host_header)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        pulumi.set(__self__, "request_protocol", request_protocol)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> _builtins.str:
        """
        The backend service address
        """
        return pulumi.get(self, "backend_address")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApigApiWebPolicyBackendParamResult']:
        """
        The configuration list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApigApiWebPolicyConditionResult']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> _builtins.str:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> _builtins.str:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the web policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The backend request address.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> _builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> _builtins.int:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> _builtins.str:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class GetApigApiWebPolicyBackendParamResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 location: _builtins.str,
                 name: _builtins.str,
                 request_id: _builtins.str,
                 system_param_type: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str description: The description of the constant or system parameter.
        :param _builtins.str id: The ID of the backend parameter.
        :param _builtins.str location: Where the parameter is located.
        :param _builtins.str name: The name of parameter.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str system_param_type: The type of the system parameter.
        :param _builtins.str type: The name of parameter.
        :param _builtins.str value: The value of the parameter.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "system_param_type", system_param_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the constant or system parameter.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend parameter.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> _builtins.str:
        """
        The type of the system parameter.
        """
        return pulumi.get(self, "system_param_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The name of parameter.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the parameter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApiWebPolicyConditionResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 frontend_authorizer_name: _builtins.str,
                 id: _builtins.str,
                 param_name: _builtins.str,
                 request_id: _builtins.str,
                 request_location: _builtins.str,
                 source: _builtins.str,
                 sys_name: _builtins.str,
                 type: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str cookie_name: The cookie parameter name.
        :param _builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param _builtins.str id: The ID of the backend policy condition.
        :param _builtins.str param_name: The request parameter name.
        :param _builtins.str request_id: The ID of the corresponding request parameter.
        :param _builtins.str request_location: The location of the corresponding request parameter.
        :param _builtins.str source: The type of the backend policy.
        :param _builtins.str sys_name: The gateway built-in parameter name.
        :param _builtins.str type: The condition type of the backend policy.
        :param _builtins.str value: The value corresponding to the parameter name.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "param_name", param_name)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "request_location", request_location)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "sys_name", sys_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> _builtins.str:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the backend policy condition.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> _builtins.str:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        The ID of the corresponding request parameter.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="requestLocation")
    def request_location(self) -> _builtins.str:
        """
        The location of the corresponding request parameter.
        """
        return pulumi.get(self, "request_location")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> _builtins.str:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The condition type of the backend policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value corresponding to the parameter name.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigAppcodesAppcodeResult(dict):
    def __init__(__self__, *,
                 application_id: _builtins.str,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str application_id: The ID of the application.
        :param _builtins.str created_at: The creation time of the APPCODE, in RFC3339 format.
        :param _builtins.str id: The ID of the APPCODE.
        :param _builtins.str value: The APPCODE value (content).
        """
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> _builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "application_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the APPCODE, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the APPCODE.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The APPCODE value (content).
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigApplicationQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 bound_app_num: _builtins.int,
                 call_limits: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 time_interval: _builtins.int,
                 time_unit: _builtins.str):
        """
        :param _builtins.int bound_app_num: The number of applications bound to the quota policy.
        :param _builtins.int call_limits: The maximum number of times a application quota can be called.
        :param _builtins.str created_at: The creation time of the application quota, in RFC3339 format.
        :param _builtins.str description: The description of the application quota.
        :param _builtins.str id: The ID of the application quota.
        :param _builtins.str name: The name of the application quota.
        :param _builtins.int time_interval: The time limit of a quota.
        :param _builtins.str time_unit: The time unit.
        """
        pulumi.set(__self__, "bound_app_num", bound_app_num)
        pulumi.set(__self__, "call_limits", call_limits)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_interval", time_interval)
        pulumi.set(__self__, "time_unit", time_unit)

    @_builtins.property
    @pulumi.getter(name="boundAppNum")
    def bound_app_num(self) -> _builtins.int:
        """
        The number of applications bound to the quota policy.
        """
        return pulumi.get(self, "bound_app_num")

    @_builtins.property
    @pulumi.getter(name="callLimits")
    def call_limits(self) -> _builtins.int:
        """
        The maximum number of times a application quota can be called.
        """
        return pulumi.get(self, "call_limits")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application quota, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application quota.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application quota.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the application quota.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="timeInterval")
    def time_interval(self) -> _builtins.int:
        """
        The time limit of a quota.
        """
        return pulumi.get(self, "time_interval")

    @_builtins.property
    @pulumi.getter(name="timeUnit")
    def time_unit(self) -> _builtins.str:
        """
        The time unit.
        """
        return pulumi.get(self, "time_unit")


@pulumi.output_type
class GetApigApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 app_key: _builtins.str,
                 app_secret: _builtins.str,
                 app_type: _builtins.str,
                 bind_num: _builtins.int,
                 created_at: _builtins.str,
                 created_by: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.int,
                 updated_at: _builtins.str):
        """
        :param _builtins.str app_key: The key of the application.
        :param _builtins.str app_secret: The secret of the application.
        :param _builtins.str app_type: The type of the application.
        :param _builtins.int bind_num: The number of bound APIs.
        :param _builtins.str created_at: The creation time of the application.
        :param _builtins.str created_by: The creator of the application.
        :param _builtins.str description: The description of the application.
        :param _builtins.str id: The ID of the application.
        :param _builtins.str name: The name of the application.
        :param _builtins.int status: The status of the application.
        :param _builtins.str updated_at: The latest update time of the application.
        """
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "app_secret", app_secret)
        pulumi.set(__self__, "app_type", app_type)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "created_by", created_by)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="appKey")
    def app_key(self) -> _builtins.str:
        """
        The key of the application.
        """
        return pulumi.get(self, "app_key")

    @_builtins.property
    @pulumi.getter(name="appSecret")
    def app_secret(self) -> _builtins.str:
        """
        The secret of the application.
        """
        return pulumi.get(self, "app_secret")

    @_builtins.property
    @pulumi.getter(name="appType")
    def app_type(self) -> _builtins.str:
        """
        The type of the application.
        """
        return pulumi.get(self, "app_type")

    @_builtins.property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> _builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the application.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> _builtins.str:
        """
        The creator of the application.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the application.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        """
        The status of the application.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the application.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigChannelsVpcChannelResult(dict):
    def __init__(__self__, *,
                 balance_strategy: _builtins.int,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 member_groups: Sequence['outputs.GetApigChannelsVpcChannelMemberGroupResult'],
                 member_type: _builtins.str,
                 name: _builtins.str,
                 port: _builtins.int,
                 type: _builtins.int):
        """
        :param _builtins.int balance_strategy: The distribution algorithm.
        :param _builtins.str created_at: The creation time of channel, in RFC3339 format.
        :param _builtins.str id: The ID of the VPC channel.
        :param Sequence['GetApigChannelsVpcChannelMemberGroupArgs'] member_groups: The parameter member groups of the VPC channels.
        :param _builtins.str member_type: The member type of the VPC channel.
        :param _builtins.str name: The name of the VPC channel.
        :param _builtins.int port: The port of the backend server.
        :param _builtins.int type: The type of the VPC channel.
        """
        pulumi.set(__self__, "balance_strategy", balance_strategy)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "member_groups", member_groups)
        pulumi.set(__self__, "member_type", member_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="balanceStrategy")
    def balance_strategy(self) -> _builtins.int:
        """
        The distribution algorithm.
        """
        return pulumi.get(self, "balance_strategy")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of channel, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the VPC channel.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="memberGroups")
    def member_groups(self) -> Sequence['outputs.GetApigChannelsVpcChannelMemberGroupResult']:
        """
        The parameter member groups of the VPC channels.
        """
        return pulumi.get(self, "member_groups")

    @_builtins.property
    @pulumi.getter(name="memberType")
    def member_type(self) -> _builtins.str:
        """
        The member type of the VPC channel.
        """
        return pulumi.get(self, "member_type")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the VPC channel.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port of the backend server.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.int:
        """
        The type of the VPC channel.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigChannelsVpcChannelMemberGroupResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 microservice_labels: Sequence['outputs.GetApigChannelsVpcChannelMemberGroupMicroserviceLabelResult'],
                 microservice_port: _builtins.int,
                 microservice_version: _builtins.str,
                 name: _builtins.str,
                 weight: _builtins.int):
        """
        :param _builtins.str description: The description of the member group.
        :param _builtins.str id: The ID of the member group.
        :param Sequence['GetApigChannelsVpcChannelMemberGroupMicroserviceLabelArgs'] microservice_labels: The microservice tags of the backend server group.
        :param _builtins.int microservice_port: The microservice port of the backend server group.
        :param _builtins.str microservice_version: The microservice version of the backend server group.
        :param _builtins.str name: The name of the member group.
        :param _builtins.int weight: The weight of the current member group.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "microservice_labels", microservice_labels)
        pulumi.set(__self__, "microservice_port", microservice_port)
        pulumi.set(__self__, "microservice_version", microservice_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "weight", weight)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the member group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the member group.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="microserviceLabels")
    def microservice_labels(self) -> Sequence['outputs.GetApigChannelsVpcChannelMemberGroupMicroserviceLabelResult']:
        """
        The microservice tags of the backend server group.
        """
        return pulumi.get(self, "microservice_labels")

    @_builtins.property
    @pulumi.getter(name="microservicePort")
    def microservice_port(self) -> _builtins.int:
        """
        The microservice port of the backend server group.
        """
        return pulumi.get(self, "microservice_port")

    @_builtins.property
    @pulumi.getter(name="microserviceVersion")
    def microservice_version(self) -> _builtins.str:
        """
        The microservice version of the backend server group.
        """
        return pulumi.get(self, "microservice_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the member group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def weight(self) -> _builtins.int:
        """
        The weight of the current member group.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetApigChannelsVpcChannelMemberGroupMicroserviceLabelResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The name of the microservice label.
        :param _builtins.str value: The value of the microservice label.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the microservice label.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the microservice label.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigCustomAuthorizersAuthorizerResult(dict):
    def __init__(__self__, *,
                 cache_age: _builtins.int,
                 created_at: _builtins.str,
                 function_alias_uri: _builtins.str,
                 function_type: _builtins.str,
                 function_urn: _builtins.str,
                 function_version: _builtins.str,
                 id: _builtins.str,
                 identities: Sequence['outputs.GetApigCustomAuthorizersAuthorizerIdentityResult'],
                 is_body_send: _builtins.bool,
                 name: _builtins.str,
                 network_type: _builtins.str,
                 type: _builtins.str,
                 user_data: _builtins.str):
        """
        :param _builtins.int cache_age: The maximum cache age of custom authorizer.
        :param _builtins.str created_at: The creation time of custom authorizer.
        :param _builtins.str function_alias_uri: The version alias URI of the FGS function.
        :param _builtins.str function_type: The type of the FGS function.
        :param _builtins.str function_urn: The URN of the FGS function.
        :param _builtins.str function_version: The version of the FGS function.
        :param _builtins.str id: The ID of the custom authorizer.
        :param Sequence['GetApigCustomAuthorizersAuthorizerIdentityArgs'] identities: The parameter identities of the custom authorizer.
        :param _builtins.bool is_body_send: Whether to send the body of custom authorizer.
        :param _builtins.str name: The name of the custom authorizer.
        :param _builtins.str network_type: The network architecture types of function.
        :param _builtins.str type: The type of the custom authorizer.
        :param _builtins.str user_data: The user data of custom authorizer.
        """
        pulumi.set(__self__, "cache_age", cache_age)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "function_alias_uri", function_alias_uri)
        pulumi.set(__self__, "function_type", function_type)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "function_version", function_version)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "identities", identities)
        pulumi.set(__self__, "is_body_send", is_body_send)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_data", user_data)

    @_builtins.property
    @pulumi.getter(name="cacheAge")
    def cache_age(self) -> _builtins.int:
        """
        The maximum cache age of custom authorizer.
        """
        return pulumi.get(self, "cache_age")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of custom authorizer.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="functionAliasUri")
    def function_alias_uri(self) -> _builtins.str:
        """
        The version alias URI of the FGS function.
        """
        return pulumi.get(self, "function_alias_uri")

    @_builtins.property
    @pulumi.getter(name="functionType")
    def function_type(self) -> _builtins.str:
        """
        The type of the FGS function.
        """
        return pulumi.get(self, "function_type")

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> _builtins.str:
        """
        The URN of the FGS function.
        """
        return pulumi.get(self, "function_urn")

    @_builtins.property
    @pulumi.getter(name="functionVersion")
    def function_version(self) -> _builtins.str:
        """
        The version of the FGS function.
        """
        return pulumi.get(self, "function_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the custom authorizer.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def identities(self) -> Sequence['outputs.GetApigCustomAuthorizersAuthorizerIdentityResult']:
        """
        The parameter identities of the custom authorizer.
        """
        return pulumi.get(self, "identities")

    @_builtins.property
    @pulumi.getter(name="isBodySend")
    def is_body_send(self) -> _builtins.bool:
        """
        Whether to send the body of custom authorizer.
        """
        return pulumi.get(self, "is_body_send")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the custom authorizer.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        The network architecture types of function.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the custom authorizer.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> _builtins.str:
        """
        The user data of custom authorizer.
        """
        return pulumi.get(self, "user_data")


@pulumi.output_type
class GetApigCustomAuthorizersAuthorizerIdentityResult(dict):
    def __init__(__self__, *,
                 location: _builtins.str,
                 name: _builtins.str,
                 validation: _builtins.str):
        """
        :param _builtins.str location: The parameter location of identity.
        :param _builtins.str name: The name of the parameter to be verified.
        :param _builtins.str validation: The parameter verification expression of identity.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "validation", validation)

    @_builtins.property
    @pulumi.getter
    def location(self) -> _builtins.str:
        """
        The parameter location of identity.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the parameter to be verified.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def validation(self) -> _builtins.str:
        """
        The parameter verification expression of identity.
        """
        return pulumi.get(self, "validation")


@pulumi.output_type
class GetApigEndpointConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 domain_id: _builtins.str,
                 id: _builtins.str,
                 packet_id: _builtins.int,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the endpoint connection, in RFC3339 format.
        :param _builtins.str domain_id: The IAM account ID of the endpoint connection creator.
        :param _builtins.str id: The ID of the endpoint connection.
        :param _builtins.int packet_id: The packet ID of the endpoint connection.
        :param _builtins.str status: The current status of the endpoint connection.
        :param _builtins.str updated_at: The latest time of the endpoint connection, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "packet_id", packet_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the endpoint connection, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> _builtins.str:
        """
        The IAM account ID of the endpoint connection creator.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the endpoint connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="packetId")
    def packet_id(self) -> _builtins.int:
        """
        The packet ID of the endpoint connection.
        """
        return pulumi.get(self, "packet_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The current status of the endpoint connection.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest time of the endpoint connection, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigEnvironmentVariablesVariableResult(dict):
    def __init__(__self__, *,
                 env_id: _builtins.str,
                 group_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str env_id: The environment ID corresponding to the environment variable.
        :param _builtins.str group_id: The group ID corresponding to the environment variable.
        :param _builtins.str id: The ID of the environment variable.
        :param _builtins.str name: The name of the environment variable.
        :param _builtins.str value: The value of the environment variable.
        """
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        """
        The environment ID corresponding to the environment variable.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        """
        The group ID corresponding to the environment variable.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the environment variable.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the environment variable.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigGroupsGroupResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 environments: Sequence['outputs.GetApigGroupsGroupEnvironmentResult'],
                 id: _builtins.str,
                 is_default: _builtins.int,
                 name: _builtins.str,
                 on_sell_status: _builtins.int,
                 sl_domain: _builtins.str,
                 sl_domains: Sequence[_builtins.str],
                 status: _builtins.int,
                 updated_at: _builtins.str,
                 url_domains: Sequence['outputs.GetApigGroupsGroupUrlDomainResult']):
        """
        :param Sequence['GetApigGroupsGroupEnvironmentArgs'] environments: The array of one or more environments of the associated group.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "environments", environments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_default", is_default)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "on_sell_status", on_sell_status)
        pulumi.set(__self__, "sl_domain", sl_domain)
        pulumi.set(__self__, "sl_domains", sl_domains)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "url_domains", url_domains)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def environments(self) -> Sequence['outputs.GetApigGroupsGroupEnvironmentResult']:
        """
        The array of one or more environments of the associated group.
        """
        return pulumi.get(self, "environments")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> _builtins.int:
        return pulumi.get(self, "is_default")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="onSellStatus")
    def on_sell_status(self) -> _builtins.int:
        return pulumi.get(self, "on_sell_status")

    @_builtins.property
    @pulumi.getter(name="slDomain")
    def sl_domain(self) -> _builtins.str:
        return pulumi.get(self, "sl_domain")

    @_builtins.property
    @pulumi.getter(name="slDomains")
    def sl_domains(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "sl_domains")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.int:
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="urlDomains")
    def url_domains(self) -> Sequence['outputs.GetApigGroupsGroupUrlDomainResult']:
        return pulumi.get(self, "url_domains")


@pulumi.output_type
class GetApigGroupsGroupEnvironmentResult(dict):
    def __init__(__self__, *,
                 environment_id: _builtins.str,
                 variables: Sequence['outputs.GetApigGroupsGroupEnvironmentVariableResult']):
        """
        :param _builtins.str environment_id: The ID of the environment to which the variables belongs.
        :param Sequence['GetApigGroupsGroupEnvironmentVariableArgs'] variables: The array of one or more environment variables.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> _builtins.str:
        """
        The ID of the environment to which the variables belongs.
        """
        return pulumi.get(self, "environment_id")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetApigGroupsGroupEnvironmentVariableResult']:
        """
        The array of one or more environment variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GetApigGroupsGroupEnvironmentVariableResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str id: The ID of the variable that the group has.
        :param _builtins.str name: The variable name.
        :param _builtins.str value: The variable value.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the variable that the group has.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The variable name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The variable value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApigGroupsGroupUrlDomainResult(dict):
    def __init__(__self__, *,
                 cname_status: _builtins.int,
                 id: _builtins.str,
                 is_has_trusted_root_ca: _builtins.bool,
                 min_ssl_version: _builtins.str,
                 name: _builtins.str,
                 ssl_id: _builtins.str,
                 ssl_name: _builtins.str,
                 verified_client_certificate_enabled: _builtins.bool):
        pulumi.set(__self__, "cname_status", cname_status)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_has_trusted_root_ca", is_has_trusted_root_ca)
        pulumi.set(__self__, "min_ssl_version", min_ssl_version)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ssl_id", ssl_id)
        pulumi.set(__self__, "ssl_name", ssl_name)
        pulumi.set(__self__, "verified_client_certificate_enabled", verified_client_certificate_enabled)

    @_builtins.property
    @pulumi.getter(name="cnameStatus")
    def cname_status(self) -> _builtins.int:
        return pulumi.get(self, "cname_status")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isHasTrustedRootCa")
    def is_has_trusted_root_ca(self) -> _builtins.bool:
        return pulumi.get(self, "is_has_trusted_root_ca")

    @_builtins.property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> _builtins.str:
        return pulumi.get(self, "min_ssl_version")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="sslId")
    def ssl_id(self) -> _builtins.str:
        return pulumi.get(self, "ssl_id")

    @_builtins.property
    @pulumi.getter(name="sslName")
    def ssl_name(self) -> _builtins.str:
        return pulumi.get(self, "ssl_name")

    @_builtins.property
    @pulumi.getter(name="verifiedClientCertificateEnabled")
    def verified_client_certificate_enabled(self) -> _builtins.bool:
        return pulumi.get(self, "verified_client_certificate_enabled")


@pulumi.output_type
class GetApigInstanceFeaturesFeatureResult(dict):
    def __init__(__self__, *,
                 config: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str config: The detailed configuration of the instance feature.
        :param _builtins.bool enabled: Whether the feature is enabled.
        :param _builtins.str id: The ID of the feature.
        :param _builtins.str name: The name of the feature.
        :param _builtins.str updated_at: The latest update time of the feature, in RFC3339 format.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def config(self) -> _builtins.str:
        """
        The detailed configuration of the instance feature.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether the feature is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the feature.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the feature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the feature, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 edition: _builtins.str,
                 eip_address: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 loadbalancer_provider: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the instance, in RFC3339 format.
        :param _builtins.str edition: The edition of instance.
        :param _builtins.str eip_address: The elastic IP address of instance binding.
        :param _builtins.str enterprise_project_id: The enterprise project ID of the instance.
        :param _builtins.str id: The ID of instance.
        :param _builtins.str loadbalancer_provider: The type of load balancer used by the instance.
        :param _builtins.str name: The name of instance.
        :param _builtins.str status: The status of instance.
        :param _builtins.str type: The type of instance.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "eip_address", eip_address)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "loadbalancer_provider", loadbalancer_provider)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the instance, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def edition(self) -> _builtins.str:
        """
        The edition of instance.
        """
        return pulumi.get(self, "edition")

    @_builtins.property
    @pulumi.getter(name="eipAddress")
    def eip_address(self) -> _builtins.str:
        """
        The elastic IP address of instance binding.
        """
        return pulumi.get(self, "eip_address")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project ID of the instance.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="loadbalancerProvider")
    def loadbalancer_provider(self) -> _builtins.str:
        """
        The type of load balancer used by the instance.
        """
        return pulumi.get(self, "loadbalancer_provider")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of instance.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of instance.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApigSignaturesSignatureResult(dict):
    def __init__(__self__, *,
                 algorithm: _builtins.str,
                 bind_num: _builtins.int,
                 created_at: _builtins.str,
                 id: _builtins.str,
                 key: _builtins.str,
                 name: _builtins.str,
                 secret: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str algorithm: The algorithm of the signature.
        :param _builtins.int bind_num: The number of bound APIs.
        :param _builtins.str created_at: The creation time of the signature.
        :param _builtins.str id: The ID of the signature.
        :param _builtins.str key: The key of the signature.
        :param _builtins.str name: The name of the signature.
        :param _builtins.str secret: The secret of the signature.
        :param _builtins.str type: The type of the signature.
        :param _builtins.str updated_at: The latest update time of the signature.
        """
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def algorithm(self) -> _builtins.str:
        """
        The algorithm of the signature.
        """
        return pulumi.get(self, "algorithm")

    @_builtins.property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> _builtins.int:
        """
        The number of bound APIs.
        """
        return pulumi.get(self, "bind_num")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the signature.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the signature.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the signature.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the signature.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def secret(self) -> _builtins.str:
        """
        The secret of the signature.
        """
        return pulumi.get(self, "secret")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the signature.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the signature.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetApigThrottlingPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 app_throttles: Sequence['outputs.GetApigThrottlingPoliciesPolicyAppThrottleResult'],
                 bind_num: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 max_app_requests: _builtins.int,
                 max_ip_requests: _builtins.int,
                 max_user_requests: _builtins.int,
                 name: _builtins.str,
                 period: _builtins.int,
                 period_unit: _builtins.str,
                 type: _builtins.str,
                 user_throttles: Sequence['outputs.GetApigThrottlingPoliciesPolicyUserThrottleResult']):
        """
        :param Sequence['GetApigThrottlingPoliciesPolicyAppThrottleArgs'] app_throttles: The array of one or more special throttling policies for APP limit.
        :param _builtins.int bind_num: The number of APIs bound to the throttling policy.
        :param _builtins.str created_at: The creation time of the throttling policy, in RFC3339 format.
        :param _builtins.str description: The description of throttling policy.
        :param _builtins.str id: The ID of the throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.int max_app_requests: The maximum number of times the API can be accessed by an app within the same period.
        :param _builtins.int max_ip_requests: The maximum number of times the API can be accessed by an IP address within the same period.
        :param _builtins.int max_user_requests: The maximum number of times the API can be accessed by a user within the same period.
        :param _builtins.str name: The name of the throttling policy.
        :param _builtins.int period: The period of time for limiting the number of API calls.
        :param _builtins.str period_unit: The time unit for limiting the number of API calls.
        :param _builtins.str type: The type of the throttling policy.
        :param Sequence['GetApigThrottlingPoliciesPolicyUserThrottleArgs'] user_throttles: The array of one or more special throttling policies for IAM user limit.
        """
        pulumi.set(__self__, "app_throttles", app_throttles)
        pulumi.set(__self__, "bind_num", bind_num)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "max_app_requests", max_app_requests)
        pulumi.set(__self__, "max_ip_requests", max_ip_requests)
        pulumi.set(__self__, "max_user_requests", max_user_requests)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_unit", period_unit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "user_throttles", user_throttles)

    @_builtins.property
    @pulumi.getter(name="appThrottles")
    def app_throttles(self) -> Sequence['outputs.GetApigThrottlingPoliciesPolicyAppThrottleResult']:
        """
        The array of one or more special throttling policies for APP limit.
        """
        return pulumi.get(self, "app_throttles")

    @_builtins.property
    @pulumi.getter(name="bindNum")
    def bind_num(self) -> _builtins.int:
        """
        The number of APIs bound to the throttling policy.
        """
        return pulumi.get(self, "bind_num")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the throttling policy, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of throttling policy.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="maxAppRequests")
    def max_app_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by an app within the same period.
        """
        return pulumi.get(self, "max_app_requests")

    @_builtins.property
    @pulumi.getter(name="maxIpRequests")
    def max_ip_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by an IP address within the same period.
        """
        return pulumi.get(self, "max_ip_requests")

    @_builtins.property
    @pulumi.getter(name="maxUserRequests")
    def max_user_requests(self) -> _builtins.int:
        """
        The maximum number of times the API can be accessed by a user within the same period.
        """
        return pulumi.get(self, "max_user_requests")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the throttling policy.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        """
        The period of time for limiting the number of API calls.
        """
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter(name="periodUnit")
    def period_unit(self) -> _builtins.str:
        """
        The time unit for limiting the number of API calls.
        """
        return pulumi.get(self, "period_unit")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the throttling policy.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="userThrottles")
    def user_throttles(self) -> Sequence['outputs.GetApigThrottlingPoliciesPolicyUserThrottleResult']:
        """
        The array of one or more special throttling policies for IAM user limit.
        """
        return pulumi.get(self, "user_throttles")


@pulumi.output_type
class GetApigThrottlingPoliciesPolicyAppThrottleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 throttling_object_name: _builtins.str):
        """
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> _builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetApigThrottlingPoliciesPolicyUserThrottleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 max_api_requests: _builtins.int,
                 throttling_object_id: _builtins.str,
                 throttling_object_name: _builtins.str):
        """
        :param _builtins.str id: The ID of the special user/application throttling policy.
        :param _builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param _builtins.str throttling_object_id: The object ID which the special user/application throttling policy belongs.
        :param _builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> _builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> _builtins.str:
        """
        The object ID which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @_builtins.property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> _builtins.str:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetCbhAvailabilityZonesAvailabilityZoneResult(dict):
    def __init__(__self__, *,
                 display_name: _builtins.str,
                 name: _builtins.str,
                 region_id: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str display_name: Specifies the display name of the availability zone to be queried.
        :param _builtins.str name: Specifies the name of the availability zone to be queried.
        :param _builtins.str region_id: The ID of the region in which the availability zone belongs.
        :param _builtins.str status: The status of the availability zone. The value can be **Running**.
        :param _builtins.str type: The type of the availability zone. The valid values are as follows:
               + **Core**: Core availability zone.
               + **Dedicated**: Exclusive availability zone, only open to internal customers.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region_id", region_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Specifies the display name of the availability zone to be queried.
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the availability zone to be queried.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="regionId")
    def region_id(self) -> _builtins.str:
        """
        The ID of the region in which the availability zone belongs.
        """
        return pulumi.get(self, "region_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the availability zone. The value can be **Running**.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the availability zone. The valid values are as follows:
        + **Core**: Core availability zone.
        + **Dedicated**: Exclusive availability zone, only open to internal customers.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCbhFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 asset: _builtins.int,
                 data_disk_size: _builtins.float,
                 ecs_system_data_size: _builtins.int,
                 id: _builtins.str,
                 max_connection: _builtins.int,
                 memory: _builtins.int,
                 type: _builtins.str,
                 vcpus: _builtins.int):
        """
        :param _builtins.int asset: Specifies the number of CBH assets.
        :param _builtins.float data_disk_size: The size of the CBH data disk, in TB.
        :param _builtins.int ecs_system_data_size: The disk size of the CBH system disk, in GB.
        :param _builtins.str id: Indicates the ID of the specification.
        :param _builtins.int max_connection: Specifies the maximum number of connections to the CBH.
        :param _builtins.int memory: Specifies the memory size of the CBH, in GB.
        :param _builtins.str type: Specifies the type of CBH specification. The value can be:
               + **basic**: Standard version.
               + **enhance**: Professional version.
        :param _builtins.int vcpus: Specifies the number of CPU cores of the CBH.
        """
        pulumi.set(__self__, "asset", asset)
        pulumi.set(__self__, "data_disk_size", data_disk_size)
        pulumi.set(__self__, "ecs_system_data_size", ecs_system_data_size)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "max_connection", max_connection)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vcpus", vcpus)

    @_builtins.property
    @pulumi.getter
    def asset(self) -> _builtins.int:
        """
        Specifies the number of CBH assets.
        """
        return pulumi.get(self, "asset")

    @_builtins.property
    @pulumi.getter(name="dataDiskSize")
    def data_disk_size(self) -> _builtins.float:
        """
        The size of the CBH data disk, in TB.
        """
        return pulumi.get(self, "data_disk_size")

    @_builtins.property
    @pulumi.getter(name="ecsSystemDataSize")
    def ecs_system_data_size(self) -> _builtins.int:
        """
        The disk size of the CBH system disk, in GB.
        """
        return pulumi.get(self, "ecs_system_data_size")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the specification.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxConnection")
    def max_connection(self) -> _builtins.int:
        """
        Specifies the maximum number of connections to the CBH.
        """
        return pulumi.get(self, "max_connection")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.int:
        """
        Specifies the memory size of the CBH, in GB.
        """
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of CBH specification. The value can be:
        + **basic**: Standard version.
        + **enhance**: Professional version.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def vcpus(self) -> _builtins.int:
        """
        Specifies the number of CPU cores of the CBH.
        """
        return pulumi.get(self, "vcpus")


@pulumi.output_type
class GetCbhInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zone: _builtins.str,
                 flavor_id: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_id: _builtins.str,
                 security_group_id: _builtins.str,
                 status: _builtins.str,
                 subnet_id: _builtins.str,
                 version: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str availability_zone: Indicates the availability zone name.
        :param _builtins.str flavor_id: Specifies the specification of the instance.
        :param _builtins.str id: Indicates the ID of the instance.
        :param _builtins.str name: Specifies the instance name.
        :param _builtins.str private_ip: Indicates the private IP address of the instance.
        :param _builtins.str public_ip: Indicates the elastic IP address.
        :param _builtins.str public_ip_id: Indicates the ID of the elastic IP.
        :param _builtins.str security_group_id: Specifies the ID of a security group.
        :param _builtins.str status: Indicates the status of the instance.
        :param _builtins.str subnet_id: Specifies the ID of a subnet.
        :param _builtins.str version: Specifies the current version of the instance image.
        :param _builtins.str vpc_id: Specifies the ID of a VPC.
        """
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_id", public_ip_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Indicates the availability zone name.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        Specifies the specification of the instance.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the instance name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        Indicates the private IP address of the instance.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        Indicates the elastic IP address.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> _builtins.str:
        """
        Indicates the ID of the elastic IP.
        """
        return pulumi.get(self, "public_ip_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Specifies the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of the instance.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Specifies the ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Specifies the current version of the instance image.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Specifies the ID of a VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetCbrBackupChildrenResult(dict):
    def __init__(__self__, *,
                 checkpoint_id: _builtins.str,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 expired_at: _builtins.str,
                 extend_infos: Sequence['outputs.GetCbrBackupChildrenExtendInfoResult'],
                 id: _builtins.str,
                 name: _builtins.str,
                 replication_records: Sequence['outputs.GetCbrBackupChildrenReplicationRecordResult'],
                 resource_az: _builtins.str,
                 resource_id: _builtins.str,
                 resource_name: _builtins.str,
                 resource_size: _builtins.int,
                 resource_type: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str checkpoint_id: The restore point ID of the sub-backup resource.
        :param _builtins.str created_at: The creation time of the sub-backup.
        :param _builtins.str description: The sub-backup description.
        :param _builtins.str enterprise_project_id: The enterprise project to which the backup sub-backup resource belongs.
        :param _builtins.str expired_at: The expiration time of the sub-backup.
        :param Sequence['GetCbrBackupChildrenExtendInfoArgs'] extend_infos: The extended information.
        :param _builtins.str id: Specifies the backup ID.
        :param _builtins.str name: The sub-backup name.
        :param Sequence['GetCbrBackupChildrenReplicationRecordArgs'] replication_records: The replication records.
        :param _builtins.str resource_az: The availability zone where the backup sub-backup resource is located.
        :param _builtins.str resource_id: The sub-backup resource ID.
        :param _builtins.str resource_name: The sub-backup resource name.
        :param _builtins.int resource_size: The sub-backup resource size, in GB.
        :param _builtins.str resource_type: The sub-backup resource type.
        :param _builtins.str status: The sub-backup status.
        :param _builtins.str type: The sub-backup type.
        :param _builtins.str updated_at: The latest update time of the sub-backup.
        :param _builtins.str vault_id: The vault to which the backup resource belongs.
        """
        pulumi.set(__self__, "checkpoint_id", checkpoint_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "expired_at", expired_at)
        pulumi.set(__self__, "extend_infos", extend_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replication_records", replication_records)
        pulumi.set(__self__, "resource_az", resource_az)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "resource_size", resource_size)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="checkpointId")
    def checkpoint_id(self) -> _builtins.str:
        """
        The restore point ID of the sub-backup resource.
        """
        return pulumi.get(self, "checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the sub-backup.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The sub-backup description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        The enterprise project to which the backup sub-backup resource belongs.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> _builtins.str:
        """
        The expiration time of the sub-backup.
        """
        return pulumi.get(self, "expired_at")

    @_builtins.property
    @pulumi.getter(name="extendInfos")
    def extend_infos(self) -> Sequence['outputs.GetCbrBackupChildrenExtendInfoResult']:
        """
        The extended information.
        """
        return pulumi.get(self, "extend_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The sub-backup name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="replicationRecords")
    def replication_records(self) -> Sequence['outputs.GetCbrBackupChildrenReplicationRecordResult']:
        """
        The replication records.
        """
        return pulumi.get(self, "replication_records")

    @_builtins.property
    @pulumi.getter(name="resourceAz")
    def resource_az(self) -> _builtins.str:
        """
        The availability zone where the backup sub-backup resource is located.
        """
        return pulumi.get(self, "resource_az")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        """
        The sub-backup resource ID.
        """
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> _builtins.str:
        """
        The sub-backup resource name.
        """
        return pulumi.get(self, "resource_name")

    @_builtins.property
    @pulumi.getter(name="resourceSize")
    def resource_size(self) -> _builtins.int:
        """
        The sub-backup resource size, in GB.
        """
        return pulumi.get(self, "resource_size")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        """
        The sub-backup resource type.
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The sub-backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The sub-backup type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the sub-backup.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        The vault to which the backup resource belongs.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetCbrBackupChildrenExtendInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 bootable: _builtins.bool,
                 contain_system_disk: _builtins.bool,
                 encrypted: _builtins.bool,
                 incremental: _builtins.bool,
                 is_system_disk: _builtins.bool,
                 os_registry_images: Sequence[_builtins.str],
                 snapshot_id: _builtins.str,
                 support_lld: _builtins.bool,
                 supported_restore_mode: _builtins.str):
        """
        :param _builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param _builtins.bool bootable: Whether the backup is a system disk backup.
        :param _builtins.bool contain_system_disk: Whether the VM backup data contains system disk data.
        :param _builtins.bool encrypted: Whether the backup is encrypted.
        :param _builtins.bool incremental: Whether the backup is an incremental backup.
        :param _builtins.bool is_system_disk: Whether the disk is a system disk.
        :param Sequence[_builtins.str] os_registry_images: The ID list of images created using backups.
        :param _builtins.str snapshot_id: Snapshot ID of the disk backup.
        :param _builtins.bool support_lld: Whether to allow lazyloading for fast restoration.
        :param _builtins.str supported_restore_mode: The restoration mode.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "contain_system_disk", contain_system_disk)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "is_system_disk", is_system_disk)
        pulumi.set(__self__, "os_registry_images", os_registry_images)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "support_lld", support_lld)
        pulumi.set(__self__, "supported_restore_mode", supported_restore_mode)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        """
        Whether the backup is a system disk backup.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="containSystemDisk")
    def contain_system_disk(self) -> _builtins.bool:
        """
        Whether the VM backup data contains system disk data.
        """
        return pulumi.get(self, "contain_system_disk")

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> _builtins.bool:
        """
        Whether the backup is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        """
        Whether the backup is an incremental backup.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter(name="isSystemDisk")
    def is_system_disk(self) -> _builtins.bool:
        """
        Whether the disk is a system disk.
        """
        return pulumi.get(self, "is_system_disk")

    @_builtins.property
    @pulumi.getter(name="osRegistryImages")
    def os_registry_images(self) -> Sequence[_builtins.str]:
        """
        The ID list of images created using backups.
        """
        return pulumi.get(self, "os_registry_images")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        Snapshot ID of the disk backup.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="supportLld")
    def support_lld(self) -> _builtins.bool:
        """
        Whether to allow lazyloading for fast restoration.
        """
        return pulumi.get(self, "support_lld")

    @_builtins.property
    @pulumi.getter(name="supportedRestoreMode")
    def supported_restore_mode(self) -> _builtins.str:
        """
        The restoration mode.
        """
        return pulumi.get(self, "supported_restore_mode")


@pulumi.output_type
class GetCbrBackupChildrenReplicationRecordResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 destination_backup_id: _builtins.str,
                 destination_checkpoint_id: _builtins.str,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 destination_vault_id: _builtins.str,
                 extra_infos: Sequence['outputs.GetCbrBackupChildrenReplicationRecordExtraInfoResult'],
                 id: _builtins.str,
                 source_backup_id: _builtins.str,
                 source_checkpoint_id: _builtins.str,
                 source_project_id: _builtins.str,
                 source_region: _builtins.str,
                 status: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the sub-backup.
        :param _builtins.str destination_backup_id: The ID of the destination backup used for replication.
        :param _builtins.str destination_checkpoint_id: The record ID of the destination backup used for replication.
        :param _builtins.str destination_project_id: The ID of the replication destination project.
        :param _builtins.str destination_region: The replication destination region.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param Sequence['GetCbrBackupChildrenReplicationRecordExtraInfoArgs'] extra_infos: The additional information of the replication.
               The object structure is documented below.
        :param _builtins.str id: Specifies the backup ID.
        :param _builtins.str source_backup_id: The ID of the source backup used for replication.
        :param _builtins.str source_checkpoint_id: The ID of the source backup record used for replication.
        :param _builtins.str source_project_id: The ID of the replication source project.
        :param _builtins.str source_region: The replication source region.
        :param _builtins.str status: The sub-backup status.
        :param _builtins.str vault_id: The vault to which the backup resource belongs.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "destination_backup_id", destination_backup_id)
        pulumi.set(__self__, "destination_checkpoint_id", destination_checkpoint_id)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_backup_id", source_backup_id)
        pulumi.set(__self__, "source_checkpoint_id", source_checkpoint_id)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the sub-backup.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="destinationBackupId")
    def destination_backup_id(self) -> _builtins.str:
        """
        The ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_backup_id")

    @_builtins.property
    @pulumi.getter(name="destinationCheckpointId")
    def destination_checkpoint_id(self) -> _builtins.str:
        """
        The record ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        The replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetCbrBackupChildrenReplicationRecordExtraInfoResult']:
        """
        The additional information of the replication.
        The object structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sourceBackupId")
    def source_backup_id(self) -> _builtins.str:
        """
        The ID of the source backup used for replication.
        """
        return pulumi.get(self, "source_backup_id")

    @_builtins.property
    @pulumi.getter(name="sourceCheckpointId")
    def source_checkpoint_id(self) -> _builtins.str:
        """
        The ID of the source backup record used for replication.
        """
        return pulumi.get(self, "source_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> _builtins.str:
        """
        The ID of the replication source project.
        """
        return pulumi.get(self, "source_project_id")

    @_builtins.property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> _builtins.str:
        """
        The replication source region.
        """
        return pulumi.get(self, "source_region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The sub-backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        The vault to which the backup resource belongs.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetCbrBackupChildrenReplicationRecordExtraInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 destination_vault_id: _builtins.str,
                 fail_code: _builtins.str,
                 fail_reason: _builtins.str,
                 progress: _builtins.int):
        """
        :param _builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param _builtins.str fail_code: The error code.
        :param _builtins.str fail_reason: The error cause.
        :param _builtins.int progress: The replication progress.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "fail_code", fail_code)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "progress", progress)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="failCode")
    def fail_code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "fail_code")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        The error cause.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The replication progress.
        """
        return pulumi.get(self, "progress")


@pulumi.output_type
class GetCbrBackupExtendInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 bootable: _builtins.bool,
                 contain_system_disk: _builtins.bool,
                 encrypted: _builtins.bool,
                 incremental: _builtins.bool,
                 is_system_disk: _builtins.bool,
                 os_registry_images: Sequence[_builtins.str],
                 snapshot_id: _builtins.str,
                 support_lld: _builtins.bool,
                 supported_restore_mode: _builtins.str):
        """
        :param _builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param _builtins.bool bootable: Whether the backup is a system disk backup.
        :param _builtins.bool contain_system_disk: Whether the VM backup data contains system disk data.
        :param _builtins.bool encrypted: Whether the backup is encrypted.
        :param _builtins.bool incremental: Whether the backup is an incremental backup.
        :param _builtins.bool is_system_disk: Whether the disk is a system disk.
        :param Sequence[_builtins.str] os_registry_images: The ID list of images created using backups.
        :param _builtins.str snapshot_id: Snapshot ID of the disk backup.
        :param _builtins.bool support_lld: Whether to allow lazyloading for fast restoration.
        :param _builtins.str supported_restore_mode: The restoration mode.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "contain_system_disk", contain_system_disk)
        pulumi.set(__self__, "encrypted", encrypted)
        pulumi.set(__self__, "incremental", incremental)
        pulumi.set(__self__, "is_system_disk", is_system_disk)
        pulumi.set(__self__, "os_registry_images", os_registry_images)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "support_lld", support_lld)
        pulumi.set(__self__, "supported_restore_mode", supported_restore_mode)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        """
        Whether the backup is a system disk backup.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="containSystemDisk")
    def contain_system_disk(self) -> _builtins.bool:
        """
        Whether the VM backup data contains system disk data.
        """
        return pulumi.get(self, "contain_system_disk")

    @_builtins.property
    @pulumi.getter
    def encrypted(self) -> _builtins.bool:
        """
        Whether the backup is encrypted.
        """
        return pulumi.get(self, "encrypted")

    @_builtins.property
    @pulumi.getter
    def incremental(self) -> _builtins.bool:
        """
        Whether the backup is an incremental backup.
        """
        return pulumi.get(self, "incremental")

    @_builtins.property
    @pulumi.getter(name="isSystemDisk")
    def is_system_disk(self) -> _builtins.bool:
        """
        Whether the disk is a system disk.
        """
        return pulumi.get(self, "is_system_disk")

    @_builtins.property
    @pulumi.getter(name="osRegistryImages")
    def os_registry_images(self) -> Sequence[_builtins.str]:
        """
        The ID list of images created using backups.
        """
        return pulumi.get(self, "os_registry_images")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        Snapshot ID of the disk backup.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="supportLld")
    def support_lld(self) -> _builtins.bool:
        """
        Whether to allow lazyloading for fast restoration.
        """
        return pulumi.get(self, "support_lld")

    @_builtins.property
    @pulumi.getter(name="supportedRestoreMode")
    def supported_restore_mode(self) -> _builtins.str:
        """
        The restoration mode.
        """
        return pulumi.get(self, "supported_restore_mode")


@pulumi.output_type
class GetCbrBackupReplicationRecordResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 destination_backup_id: _builtins.str,
                 destination_checkpoint_id: _builtins.str,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 destination_vault_id: _builtins.str,
                 extra_infos: Sequence['outputs.GetCbrBackupReplicationRecordExtraInfoResult'],
                 id: _builtins.str,
                 source_backup_id: _builtins.str,
                 source_checkpoint_id: _builtins.str,
                 source_project_id: _builtins.str,
                 source_region: _builtins.str,
                 status: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the sub-backup.
        :param _builtins.str destination_backup_id: The ID of the destination backup used for replication.
        :param _builtins.str destination_checkpoint_id: The record ID of the destination backup used for replication.
        :param _builtins.str destination_project_id: The ID of the replication destination project.
        :param _builtins.str destination_region: The replication destination region.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param Sequence['GetCbrBackupReplicationRecordExtraInfoArgs'] extra_infos: The additional information of the replication.
               The object structure is documented below.
        :param _builtins.str id: Specifies the backup ID.
        :param _builtins.str source_backup_id: The ID of the source backup used for replication.
        :param _builtins.str source_checkpoint_id: The ID of the source backup record used for replication.
        :param _builtins.str source_project_id: The ID of the replication source project.
        :param _builtins.str source_region: The replication source region.
        :param _builtins.str status: The sub-backup status.
        :param _builtins.str vault_id: The vault to which the backup resource belongs.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "destination_backup_id", destination_backup_id)
        pulumi.set(__self__, "destination_checkpoint_id", destination_checkpoint_id)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "extra_infos", extra_infos)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "source_backup_id", source_backup_id)
        pulumi.set(__self__, "source_checkpoint_id", source_checkpoint_id)
        pulumi.set(__self__, "source_project_id", source_project_id)
        pulumi.set(__self__, "source_region", source_region)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the sub-backup.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="destinationBackupId")
    def destination_backup_id(self) -> _builtins.str:
        """
        The ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_backup_id")

    @_builtins.property
    @pulumi.getter(name="destinationCheckpointId")
    def destination_checkpoint_id(self) -> _builtins.str:
        """
        The record ID of the destination backup used for replication.
        """
        return pulumi.get(self, "destination_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        The replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="extraInfos")
    def extra_infos(self) -> Sequence['outputs.GetCbrBackupReplicationRecordExtraInfoResult']:
        """
        The additional information of the replication.
        The object structure is documented below.
        """
        return pulumi.get(self, "extra_infos")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Specifies the backup ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="sourceBackupId")
    def source_backup_id(self) -> _builtins.str:
        """
        The ID of the source backup used for replication.
        """
        return pulumi.get(self, "source_backup_id")

    @_builtins.property
    @pulumi.getter(name="sourceCheckpointId")
    def source_checkpoint_id(self) -> _builtins.str:
        """
        The ID of the source backup record used for replication.
        """
        return pulumi.get(self, "source_checkpoint_id")

    @_builtins.property
    @pulumi.getter(name="sourceProjectId")
    def source_project_id(self) -> _builtins.str:
        """
        The ID of the replication source project.
        """
        return pulumi.get(self, "source_project_id")

    @_builtins.property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> _builtins.str:
        """
        The replication source region.
        """
        return pulumi.get(self, "source_region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The sub-backup status.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        The vault to which the backup resource belongs.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetCbrBackupReplicationRecordExtraInfoResult(dict):
    def __init__(__self__, *,
                 auto_trigger: _builtins.bool,
                 destination_vault_id: _builtins.str,
                 fail_code: _builtins.str,
                 fail_reason: _builtins.str,
                 progress: _builtins.int):
        """
        :param _builtins.bool auto_trigger: Whether the backup is automatically generated.
        :param _builtins.str destination_vault_id: The destination vault ID.
        :param _builtins.str fail_code: The error code.
        :param _builtins.str fail_reason: The error cause.
        :param _builtins.int progress: The replication progress.
        """
        pulumi.set(__self__, "auto_trigger", auto_trigger)
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "fail_code", fail_code)
        pulumi.set(__self__, "fail_reason", fail_reason)
        pulumi.set(__self__, "progress", progress)

    @_builtins.property
    @pulumi.getter(name="autoTrigger")
    def auto_trigger(self) -> _builtins.bool:
        """
        Whether the backup is automatically generated.
        """
        return pulumi.get(self, "auto_trigger")

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="failCode")
    def fail_code(self) -> _builtins.str:
        """
        The error code.
        """
        return pulumi.get(self, "fail_code")

    @_builtins.property
    @pulumi.getter(name="failReason")
    def fail_reason(self) -> _builtins.str:
        """
        The error cause.
        """
        return pulumi.get(self, "fail_reason")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The replication progress.
        """
        return pulumi.get(self, "progress")


@pulumi.output_type
class GetCbrPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 associated_vaults: Sequence['outputs.GetCbrPoliciesPolicyAssociatedVaultResult'],
                 backup_cycles: Sequence['outputs.GetCbrPoliciesPolicyBackupCycleResult'],
                 backup_quantity: _builtins.int,
                 destination_project_id: _builtins.str,
                 destination_region: _builtins.str,
                 enable_acceleration: _builtins.bool,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 long_term_retentions: Sequence['outputs.GetCbrPoliciesPolicyLongTermRetentionResult'],
                 name: _builtins.str,
                 time_period: _builtins.int,
                 time_zone: _builtins.str,
                 type: _builtins.str):
        """
        :param Sequence['GetCbrPoliciesPolicyAssociatedVaultArgs'] associated_vaults: The vault associated with the CBR policy.
               The associated_vaults structure is documented below.
        :param Sequence['GetCbrPoliciesPolicyBackupCycleArgs'] backup_cycles: The scheduling rule for the policy backup execution.
               The backup_cycle structure is documented below.
        :param _builtins.int backup_quantity: The maximum number of retained backups. The value ranges from `2` to `99,999`.
               This parameter and `time_period` are alternative.
        :param _builtins.str destination_project_id: The ID of the replication destination project.
        :param _builtins.str destination_region: The name of the replication destination region.
        :param _builtins.bool enable_acceleration: Whether to enable the acceleration function to shorten the replication time for cross-region.
               The valid values are as follows:
               + **true**: Enabled acceleration
               + **false**: Not enabled acceleration
        :param _builtins.bool enabled: Specifies the policy enabling status to query. The valid values are as follows:
               + **true**: Policy enabled
               + **false**: Policy not enabled
        :param _builtins.str id: The policy ID.
        :param Sequence['GetCbrPoliciesPolicyLongTermRetentionArgs'] long_term_retentions: The long-term retention rules, which is an advanced options of the `backup_quantity`.
               The long_term_retention structure is documented below.
        :param _builtins.str name: Specifies the policy name used to query.
        :param _builtins.int time_period: The duration (in days) for retained backups. The value ranges from `2` to `99,999`.
        :param _builtins.str time_zone: The UTC time zone, e.g. `UTC+08:00`. Only available when `long_term_retention` is set.
        :param _builtins.str type: Specifies the policy type used to query. The valid values are as follows:
               + **backup**: Backup policy
               + **replication**: Replication policy
        """
        pulumi.set(__self__, "associated_vaults", associated_vaults)
        pulumi.set(__self__, "backup_cycles", backup_cycles)
        pulumi.set(__self__, "backup_quantity", backup_quantity)
        pulumi.set(__self__, "destination_project_id", destination_project_id)
        pulumi.set(__self__, "destination_region", destination_region)
        pulumi.set(__self__, "enable_acceleration", enable_acceleration)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "long_term_retentions", long_term_retentions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "time_period", time_period)
        pulumi.set(__self__, "time_zone", time_zone)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="associatedVaults")
    def associated_vaults(self) -> Sequence['outputs.GetCbrPoliciesPolicyAssociatedVaultResult']:
        """
        The vault associated with the CBR policy.
        The associated_vaults structure is documented below.
        """
        return pulumi.get(self, "associated_vaults")

    @_builtins.property
    @pulumi.getter(name="backupCycles")
    def backup_cycles(self) -> Sequence['outputs.GetCbrPoliciesPolicyBackupCycleResult']:
        """
        The scheduling rule for the policy backup execution.
        The backup_cycle structure is documented below.
        """
        return pulumi.get(self, "backup_cycles")

    @_builtins.property
    @pulumi.getter(name="backupQuantity")
    def backup_quantity(self) -> _builtins.int:
        """
        The maximum number of retained backups. The value ranges from `2` to `99,999`.
        This parameter and `time_period` are alternative.
        """
        return pulumi.get(self, "backup_quantity")

    @_builtins.property
    @pulumi.getter(name="destinationProjectId")
    def destination_project_id(self) -> _builtins.str:
        """
        The ID of the replication destination project.
        """
        return pulumi.get(self, "destination_project_id")

    @_builtins.property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> _builtins.str:
        """
        The name of the replication destination region.
        """
        return pulumi.get(self, "destination_region")

    @_builtins.property
    @pulumi.getter(name="enableAcceleration")
    def enable_acceleration(self) -> _builtins.bool:
        """
        Whether to enable the acceleration function to shorten the replication time for cross-region.
        The valid values are as follows:
        + **true**: Enabled acceleration
        + **false**: Not enabled acceleration
        """
        return pulumi.get(self, "enable_acceleration")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies the policy enabling status to query. The valid values are as follows:
        + **true**: Policy enabled
        + **false**: Policy not enabled
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The policy ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="longTermRetentions")
    def long_term_retentions(self) -> Sequence['outputs.GetCbrPoliciesPolicyLongTermRetentionResult']:
        """
        The long-term retention rules, which is an advanced options of the `backup_quantity`.
        The long_term_retention structure is documented below.
        """
        return pulumi.get(self, "long_term_retentions")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the policy name used to query.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> _builtins.int:
        """
        The duration (in days) for retained backups. The value ranges from `2` to `99,999`.
        """
        return pulumi.get(self, "time_period")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        The UTC time zone, e.g. `UTC+08:00`. Only available when `long_term_retention` is set.
        """
        return pulumi.get(self, "time_zone")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the policy type used to query. The valid values are as follows:
        + **backup**: Backup policy
        + **replication**: Replication policy
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetCbrPoliciesPolicyAssociatedVaultResult(dict):
    def __init__(__self__, *,
                 destination_vault_id: _builtins.str,
                 vault_id: _builtins.str):
        """
        :param _builtins.str destination_vault_id: The destination vault ID associated with CBR policy.
        :param _builtins.str vault_id: Specifies the vault ID of the associated policy used to query.
        """
        pulumi.set(__self__, "destination_vault_id", destination_vault_id)
        pulumi.set(__self__, "vault_id", vault_id)

    @_builtins.property
    @pulumi.getter(name="destinationVaultId")
    def destination_vault_id(self) -> _builtins.str:
        """
        The destination vault ID associated with CBR policy.
        """
        return pulumi.get(self, "destination_vault_id")

    @_builtins.property
    @pulumi.getter(name="vaultId")
    def vault_id(self) -> _builtins.str:
        """
        Specifies the vault ID of the associated policy used to query.
        """
        return pulumi.get(self, "vault_id")


@pulumi.output_type
class GetCbrPoliciesPolicyBackupCycleResult(dict):
    def __init__(__self__, *,
                 days: _builtins.str,
                 execution_times: Sequence[_builtins.str],
                 interval: _builtins.int):
        """
        :param _builtins.str days: The weekly backup day of backup schedule. It supports seven days a week (MO, TU, WE, TH, FR, SA, SU)
               and this parameter is separated by a comma (,) without spaces between the date and date.
        :param Sequence[_builtins.str] execution_times: The backup time. Automated backups will be triggered at the backup
               time. The current time is in the UTC format (HH:MM).
        :param _builtins.int interval: The interval (in days) of backup schedule. The value range is `1` to `30`.
        """
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "execution_times", execution_times)
        pulumi.set(__self__, "interval", interval)

    @_builtins.property
    @pulumi.getter
    def days(self) -> _builtins.str:
        """
        The weekly backup day of backup schedule. It supports seven days a week (MO, TU, WE, TH, FR, SA, SU)
        and this parameter is separated by a comma (,) without spaces between the date and date.
        """
        return pulumi.get(self, "days")

    @_builtins.property
    @pulumi.getter(name="executionTimes")
    def execution_times(self) -> Sequence[_builtins.str]:
        """
        The backup time. Automated backups will be triggered at the backup
        time. The current time is in the UTC format (HH:MM).
        """
        return pulumi.get(self, "execution_times")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        The interval (in days) of backup schedule. The value range is `1` to `30`.
        """
        return pulumi.get(self, "interval")


@pulumi.output_type
class GetCbrPoliciesPolicyLongTermRetentionResult(dict):
    def __init__(__self__, *,
                 daily: _builtins.int,
                 full_backup_interval: _builtins.int,
                 monthly: _builtins.int,
                 weekly: _builtins.int,
                 yearly: _builtins.int):
        """
        :param _builtins.int daily: The latest backup of each day is saved in the long term.
        :param _builtins.int full_backup_interval: How often (after how many incremental backups) a full backup is performed.
               The valid value ranges from `-1` to `100`. If `-1` is specified, full backup will not be performed.
        :param _builtins.int monthly: The latest backup of each month is saved in the long term.
        :param _builtins.int weekly: The latest backup of each week is saved in the long term.
        :param _builtins.int yearly: The latest backup of each year is saved in the long term.
        """
        pulumi.set(__self__, "daily", daily)
        pulumi.set(__self__, "full_backup_interval", full_backup_interval)
        pulumi.set(__self__, "monthly", monthly)
        pulumi.set(__self__, "weekly", weekly)
        pulumi.set(__self__, "yearly", yearly)

    @_builtins.property
    @pulumi.getter
    def daily(self) -> _builtins.int:
        """
        The latest backup of each day is saved in the long term.
        """
        return pulumi.get(self, "daily")

    @_builtins.property
    @pulumi.getter(name="fullBackupInterval")
    def full_backup_interval(self) -> _builtins.int:
        """
        How often (after how many incremental backups) a full backup is performed.
        The valid value ranges from `-1` to `100`. If `-1` is specified, full backup will not be performed.
        """
        return pulumi.get(self, "full_backup_interval")

    @_builtins.property
    @pulumi.getter
    def monthly(self) -> _builtins.int:
        """
        The latest backup of each month is saved in the long term.
        """
        return pulumi.get(self, "monthly")

    @_builtins.property
    @pulumi.getter
    def weekly(self) -> _builtins.int:
        """
        The latest backup of each week is saved in the long term.
        """
        return pulumi.get(self, "weekly")

    @_builtins.property
    @pulumi.getter
    def yearly(self) -> _builtins.int:
        """
        The latest backup of each year is saved in the long term.
        """
        return pulumi.get(self, "yearly")


@pulumi.output_type
class GetCdmFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 cpu: _builtins.str,
                 id: _builtins.str,
                 memory: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str id: The id of the cdm flavor.
        :param _builtins.str name: The name of the cdm flavor.
        """
        pulumi.set(__self__, "cpu", cpu)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def cpu(self) -> _builtins.str:
        return pulumi.get(self, "cpu")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The id of the cdm flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def memory(self) -> _builtins.str:
        return pulumi.get(self, "memory")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the cdm flavor.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDcsAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_name: _builtins.str,
                 account_role: _builtins.str,
                 account_type: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str account_name: Account name.
        :param _builtins.str account_role: Account permissions.
        :param _builtins.str account_type: Account type.
        :param _builtins.str description: Account description.
        :param _builtins.str id: Account ID.
        :param _builtins.str status: Account status.
        """
        pulumi.set(__self__, "account_name", account_name)
        pulumi.set(__self__, "account_role", account_role)
        pulumi.set(__self__, "account_type", account_type)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> _builtins.str:
        """
        Account name.
        """
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> _builtins.str:
        """
        Account permissions.
        """
        return pulumi.get(self, "account_role")

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> _builtins.str:
        """
        Account type.
        """
        return pulumi.get(self, "account_type")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Account description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Account ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Account status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetDmsKafkaConsumerGroupsGroupResult(dict):
    def __init__(__self__, *,
                 assignment_strategy: _builtins.str,
                 coordinator_id: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 group_message_offsets: Sequence['outputs.GetDmsKafkaConsumerGroupsGroupGroupMessageOffsetResult'],
                 lag: _builtins.int,
                 members: Sequence['outputs.GetDmsKafkaConsumerGroupsGroupMemberResult'],
                 name: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str assignment_strategy: Indicates the partition assignment strategy.
        :param _builtins.int coordinator_id: Specifies the coordinator ID.
        :param _builtins.str created_at: Indicates the create time.
        :param _builtins.str description: Specifies the group description.
        :param Sequence['GetDmsKafkaConsumerGroupsGroupGroupMessageOffsetArgs'] group_message_offsets: Indicates the group message offsets.
        :param _builtins.int lag: Specifies the number of accumulated messages.
        :param Sequence['GetDmsKafkaConsumerGroupsGroupMemberArgs'] members: Indicates the consumer group members
        :param _builtins.str name: Specifies the group name.
        :param _builtins.str state: Specifies the consumer group status.
        """
        pulumi.set(__self__, "assignment_strategy", assignment_strategy)
        pulumi.set(__self__, "coordinator_id", coordinator_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "group_message_offsets", group_message_offsets)
        pulumi.set(__self__, "lag", lag)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="assignmentStrategy")
    def assignment_strategy(self) -> _builtins.str:
        """
        Indicates the partition assignment strategy.
        """
        return pulumi.get(self, "assignment_strategy")

    @_builtins.property
    @pulumi.getter(name="coordinatorId")
    def coordinator_id(self) -> _builtins.int:
        """
        Specifies the coordinator ID.
        """
        return pulumi.get(self, "coordinator_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the group description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="groupMessageOffsets")
    def group_message_offsets(self) -> Sequence['outputs.GetDmsKafkaConsumerGroupsGroupGroupMessageOffsetResult']:
        """
        Indicates the group message offsets.
        """
        return pulumi.get(self, "group_message_offsets")

    @_builtins.property
    @pulumi.getter
    def lag(self) -> _builtins.int:
        """
        Specifies the number of accumulated messages.
        """
        return pulumi.get(self, "lag")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetDmsKafkaConsumerGroupsGroupMemberResult']:
        """
        Indicates the consumer group members
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the group name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Specifies the consumer group status.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetDmsKafkaConsumerGroupsGroupGroupMessageOffsetResult(dict):
    def __init__(__self__, *,
                 lag: _builtins.int,
                 message_current_offset: _builtins.int,
                 message_log_end_offset: _builtins.int,
                 partition: _builtins.int,
                 topic: _builtins.str):
        """
        :param _builtins.int lag: Specifies the number of accumulated messages.
        :param _builtins.int message_current_offset: Indicates the message current offset.
        :param _builtins.int message_log_end_offset: Indicates the message log end offset.
        :param _builtins.int partition: Indicates the partition.
        :param _builtins.str topic: Indicates the topic name.
        """
        pulumi.set(__self__, "lag", lag)
        pulumi.set(__self__, "message_current_offset", message_current_offset)
        pulumi.set(__self__, "message_log_end_offset", message_log_end_offset)
        pulumi.set(__self__, "partition", partition)
        pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter
    def lag(self) -> _builtins.int:
        """
        Specifies the number of accumulated messages.
        """
        return pulumi.get(self, "lag")

    @_builtins.property
    @pulumi.getter(name="messageCurrentOffset")
    def message_current_offset(self) -> _builtins.int:
        """
        Indicates the message current offset.
        """
        return pulumi.get(self, "message_current_offset")

    @_builtins.property
    @pulumi.getter(name="messageLogEndOffset")
    def message_log_end_offset(self) -> _builtins.int:
        """
        Indicates the message log end offset.
        """
        return pulumi.get(self, "message_log_end_offset")

    @_builtins.property
    @pulumi.getter
    def partition(self) -> _builtins.int:
        """
        Indicates the partition.
        """
        return pulumi.get(self, "partition")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> _builtins.str:
        """
        Indicates the topic name.
        """
        return pulumi.get(self, "topic")


@pulumi.output_type
class GetDmsKafkaConsumerGroupsGroupMemberResult(dict):
    def __init__(__self__, *,
                 assignments: Sequence['outputs.GetDmsKafkaConsumerGroupsGroupMemberAssignmentResult'],
                 client_id: _builtins.str,
                 host: _builtins.str,
                 member_id: _builtins.str):
        """
        :param Sequence['GetDmsKafkaConsumerGroupsGroupMemberAssignmentArgs'] assignments: Indicates the details about the partition assigned to the consumer.
        :param _builtins.str client_id: Indicates the client ID.
        :param _builtins.str host: Indicates the consumer address.
        :param _builtins.str member_id: Indicates the member ID.
        """
        pulumi.set(__self__, "assignments", assignments)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "member_id", member_id)

    @_builtins.property
    @pulumi.getter
    def assignments(self) -> Sequence['outputs.GetDmsKafkaConsumerGroupsGroupMemberAssignmentResult']:
        """
        Indicates the details about the partition assigned to the consumer.
        """
        return pulumi.get(self, "assignments")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        Indicates the client ID.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter
    def host(self) -> _builtins.str:
        """
        Indicates the consumer address.
        """
        return pulumi.get(self, "host")

    @_builtins.property
    @pulumi.getter(name="memberId")
    def member_id(self) -> _builtins.str:
        """
        Indicates the member ID.
        """
        return pulumi.get(self, "member_id")


@pulumi.output_type
class GetDmsKafkaConsumerGroupsGroupMemberAssignmentResult(dict):
    def __init__(__self__, *,
                 partitions: Sequence[_builtins.int],
                 topic: _builtins.str):
        """
        :param Sequence[_builtins.int] partitions: Indicates the partitions.
        :param _builtins.str topic: Indicates the topic name.
        """
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "topic", topic)

    @_builtins.property
    @pulumi.getter
    def partitions(self) -> Sequence[_builtins.int]:
        """
        Indicates the partitions.
        """
        return pulumi.get(self, "partitions")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> _builtins.str:
        """
        Indicates the topic name.
        """
        return pulumi.get(self, "topic")


@pulumi.output_type
class GetDmsKafkaMessagesMessageResult(dict):
    def __init__(__self__, *,
                 app_id: _builtins.str,
                 huge_message: _builtins.bool,
                 key: _builtins.str,
                 message_id: _builtins.str,
                 message_offset: _builtins.int,
                 partition: _builtins.int,
                 size: _builtins.int,
                 tag: _builtins.str,
                 timestamp: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str app_id: Indicates the application ID.
        :param _builtins.bool huge_message: Indicates the big data flag.
        :param _builtins.str key: Indicates the message key.
        :param _builtins.str message_id: Indicates the message ID.
        :param _builtins.int message_offset: Specifies the message offset.
               This parameter is mandatory when you query the message content by offset.
        :param _builtins.int partition: Specifies the partition.
               This parameter is mandatory when you query the message content by offset.
        :param _builtins.int size: Indicates the message size.
        :param _builtins.str tag: Indicates the message label.
        :param _builtins.str timestamp: Indicates the message production time.
        :param _builtins.str value: Indicates the message content.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "huge_message", huge_message)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "message_id", message_id)
        pulumi.set(__self__, "message_offset", message_offset)
        pulumi.set(__self__, "partition", partition)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "tag", tag)
        pulumi.set(__self__, "timestamp", timestamp)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="appId")
    def app_id(self) -> _builtins.str:
        """
        Indicates the application ID.
        """
        return pulumi.get(self, "app_id")

    @_builtins.property
    @pulumi.getter(name="hugeMessage")
    def huge_message(self) -> _builtins.bool:
        """
        Indicates the big data flag.
        """
        return pulumi.get(self, "huge_message")

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        Indicates the message key.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> _builtins.str:
        """
        Indicates the message ID.
        """
        return pulumi.get(self, "message_id")

    @_builtins.property
    @pulumi.getter(name="messageOffset")
    def message_offset(self) -> _builtins.int:
        """
        Specifies the message offset.
        This parameter is mandatory when you query the message content by offset.
        """
        return pulumi.get(self, "message_offset")

    @_builtins.property
    @pulumi.getter
    def partition(self) -> _builtins.int:
        """
        Specifies the partition.
        This parameter is mandatory when you query the message content by offset.
        """
        return pulumi.get(self, "partition")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        Indicates the message size.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def tag(self) -> _builtins.str:
        """
        Indicates the message label.
        """
        return pulumi.get(self, "tag")

    @_builtins.property
    @pulumi.getter
    def timestamp(self) -> _builtins.str:
        """
        Indicates the message production time.
        """
        return pulumi.get(self, "timestamp")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the message content.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDmsKafkaUsersUserResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 default_app: _builtins.bool,
                 description: _builtins.str,
                 name: _builtins.str,
                 role: _builtins.str):
        """
        :param _builtins.str created_at: Indicates the create time.
        :param _builtins.bool default_app: Indicates whether the application is the default application.
        :param _builtins.str description: Specifies the user description.
        :param _builtins.str name: Specifies the user name.
        :param _builtins.str role: Indicates the user role.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "default_app", default_app)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Indicates the create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="defaultApp")
    def default_app(self) -> _builtins.bool:
        """
        Indicates whether the application is the default application.
        """
        return pulumi.get(self, "default_app")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the user description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the user name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def role(self) -> _builtins.str:
        """
        Indicates the user role.
        """
        return pulumi.get(self, "role")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 arch_types: Sequence[_builtins.str],
                 charging_modes: Sequence[_builtins.str],
                 id: _builtins.str,
                 ios: Sequence['outputs.GetDmsRabbitmqFlavorsFlavorIoResult'],
                 properties: Sequence['outputs.GetDmsRabbitmqFlavorsFlavorPropertyResult'],
                 support_features: Sequence['outputs.GetDmsRabbitmqFlavorsFlavorSupportFeatureResult'],
                 type: _builtins.str,
                 vm_specification: _builtins.str):
        """
        :param Sequence[_builtins.str] arch_types: Indicates the list of supported CPU architectures.
        :param Sequence[_builtins.str] charging_modes: Indicates the list of supported billing modes.
        :param _builtins.str id: Indicates the flavor ID.
        :param Sequence['GetDmsRabbitmqFlavorsFlavorIoArgs'] ios: Indicates the list of supported disk IO types.
               The object structure is documented below.
        :param Sequence['GetDmsRabbitmqFlavorsFlavorPropertyArgs'] properties: Indicates the function property details.
               The object structure is documented below.
        :param Sequence['GetDmsRabbitmqFlavorsFlavorSupportFeatureArgs'] support_features: Indicates the list of features supported by the current specification.
               The object structure is documented below.
        :param _builtins.str type: Specifies flavor type. The valid values are **single** and **cluster**.
        :param _builtins.str vm_specification: Indicates the underlying VM specification.
        """
        pulumi.set(__self__, "arch_types", arch_types)
        pulumi.set(__self__, "charging_modes", charging_modes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ios", ios)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "support_features", support_features)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vm_specification", vm_specification)

    @_builtins.property
    @pulumi.getter(name="archTypes")
    def arch_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of supported CPU architectures.
        """
        return pulumi.get(self, "arch_types")

    @_builtins.property
    @pulumi.getter(name="chargingModes")
    def charging_modes(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of supported billing modes.
        """
        return pulumi.get(self, "charging_modes")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the flavor ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ios(self) -> Sequence['outputs.GetDmsRabbitmqFlavorsFlavorIoResult']:
        """
        Indicates the list of supported disk IO types.
        The object structure is documented below.
        """
        return pulumi.get(self, "ios")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsRabbitmqFlavorsFlavorPropertyResult']:
        """
        Indicates the function property details.
        The object structure is documented below.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetDmsRabbitmqFlavorsFlavorSupportFeatureResult']:
        """
        Indicates the list of features supported by the current specification.
        The object structure is documented below.
        """
        return pulumi.get(self, "support_features")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies flavor type. The valid values are **single** and **cluster**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vmSpecification")
    def vm_specification(self) -> _builtins.str:
        """
        Indicates the underlying VM specification.
        """
        return pulumi.get(self, "vm_specification")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorIoResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 storage_spec_code: _builtins.str,
                 type: _builtins.str,
                 unavailability_zones: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] availability_zones: Specifies the list of availability zones with available resources.
        :param _builtins.str storage_spec_code: Specifies the disk IO encoding.
               + **dms.physical.storage.high.v2**: Type of the disk that uses high I/O.
               + **dms.physical.storage.ultra.v2**: Type of the disk that uses ultra-high I/O.
        :param _builtins.str type: Specifies flavor type. The valid values are **single** and **cluster**.
        :param Sequence[_builtins.str] unavailability_zones: Indicates the list of unavailability zones with available resources.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unavailability_zones", unavailability_zones)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of availability zones with available resources.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> _builtins.str:
        """
        Specifies the disk IO encoding.
        + **dms.physical.storage.high.v2**: Type of the disk that uses high I/O.
        + **dms.physical.storage.ultra.v2**: Type of the disk that uses ultra-high I/O.
        """
        return pulumi.get(self, "storage_spec_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies flavor type. The valid values are **single** and **cluster**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="unavailabilityZones")
    def unavailability_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of unavailability zones with available resources.
        """
        return pulumi.get(self, "unavailability_zones")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorPropertyResult(dict):
    def __init__(__self__, *,
                 flavor_alias: _builtins.str,
                 max_bandwidth_per_broker: _builtins.int,
                 max_broker: _builtins.int,
                 max_consumer_per_broker: _builtins.int,
                 max_partition_per_broker: _builtins.int,
                 max_storage_per_node: _builtins.int,
                 max_tps_per_broker: _builtins.int,
                 min_broker: _builtins.int,
                 min_storage_per_node: _builtins.int):
        """
        :param _builtins.str flavor_alias: Indicates the flavor ID alias.
        :param _builtins.int max_bandwidth_per_broker: Indicates the maximum bandwidth per broker.
        :param _builtins.int max_broker: Indicates the maximum number of brokers.
        :param _builtins.int max_consumer_per_broker: Indicates the maximum number of consumers per broker.
        :param _builtins.int max_partition_per_broker: Indicates the maximum number of partitions per broker.
        :param _builtins.int max_storage_per_node: Indicates the maximum storage per node. The unit is GB.
        :param _builtins.int max_tps_per_broker: Indicates the maximum TPS per broker.
        :param _builtins.int min_broker: Indicates the minimum number of brokers.
        :param _builtins.int min_storage_per_node: Indicates the minimum storage per node. The unit is GB.
        """
        pulumi.set(__self__, "flavor_alias", flavor_alias)
        pulumi.set(__self__, "max_bandwidth_per_broker", max_bandwidth_per_broker)
        pulumi.set(__self__, "max_broker", max_broker)
        pulumi.set(__self__, "max_consumer_per_broker", max_consumer_per_broker)
        pulumi.set(__self__, "max_partition_per_broker", max_partition_per_broker)
        pulumi.set(__self__, "max_storage_per_node", max_storage_per_node)
        pulumi.set(__self__, "max_tps_per_broker", max_tps_per_broker)
        pulumi.set(__self__, "min_broker", min_broker)
        pulumi.set(__self__, "min_storage_per_node", min_storage_per_node)

    @_builtins.property
    @pulumi.getter(name="flavorAlias")
    def flavor_alias(self) -> _builtins.str:
        """
        Indicates the flavor ID alias.
        """
        return pulumi.get(self, "flavor_alias")

    @_builtins.property
    @pulumi.getter(name="maxBandwidthPerBroker")
    def max_bandwidth_per_broker(self) -> _builtins.int:
        """
        Indicates the maximum bandwidth per broker.
        """
        return pulumi.get(self, "max_bandwidth_per_broker")

    @_builtins.property
    @pulumi.getter(name="maxBroker")
    def max_broker(self) -> _builtins.int:
        """
        Indicates the maximum number of brokers.
        """
        return pulumi.get(self, "max_broker")

    @_builtins.property
    @pulumi.getter(name="maxConsumerPerBroker")
    def max_consumer_per_broker(self) -> _builtins.int:
        """
        Indicates the maximum number of consumers per broker.
        """
        return pulumi.get(self, "max_consumer_per_broker")

    @_builtins.property
    @pulumi.getter(name="maxPartitionPerBroker")
    def max_partition_per_broker(self) -> _builtins.int:
        """
        Indicates the maximum number of partitions per broker.
        """
        return pulumi.get(self, "max_partition_per_broker")

    @_builtins.property
    @pulumi.getter(name="maxStoragePerNode")
    def max_storage_per_node(self) -> _builtins.int:
        """
        Indicates the maximum storage per node. The unit is GB.
        """
        return pulumi.get(self, "max_storage_per_node")

    @_builtins.property
    @pulumi.getter(name="maxTpsPerBroker")
    def max_tps_per_broker(self) -> _builtins.int:
        """
        Indicates the maximum TPS per broker.
        """
        return pulumi.get(self, "max_tps_per_broker")

    @_builtins.property
    @pulumi.getter(name="minBroker")
    def min_broker(self) -> _builtins.int:
        """
        Indicates the minimum number of brokers.
        """
        return pulumi.get(self, "min_broker")

    @_builtins.property
    @pulumi.getter(name="minStoragePerNode")
    def min_storage_per_node(self) -> _builtins.int:
        """
        Indicates the minimum storage per node. The unit is GB.
        """
        return pulumi.get(self, "min_storage_per_node")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorSupportFeatureResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 properties: Sequence['outputs.GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyResult']):
        """
        :param _builtins.str name: Indicates the function name, e.g. **connector_obs**.
        :param Sequence['GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyArgs'] properties: Indicates the function property details.
               The object structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the function name, e.g. **connector_obs**.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyResult']:
        """
        Indicates the function property details.
        The object structure is documented below.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetDmsRabbitmqFlavorsFlavorSupportFeaturePropertyResult(dict):
    def __init__(__self__, *,
                 max_node: _builtins.int,
                 max_task: _builtins.int,
                 min_node: _builtins.int,
                 min_task: _builtins.int):
        """
        :param _builtins.int max_node: Indicates the maximum number of nodes for the dump function.
        :param _builtins.int max_task: Indicates the maximum number of tasks for the dump function.
        :param _builtins.int min_node: Indicates the minimum number of nodes for the dump function.
        :param _builtins.int min_task: Indicates the minimum number of tasks for the dump function.
        """
        pulumi.set(__self__, "max_node", max_node)
        pulumi.set(__self__, "max_task", max_task)
        pulumi.set(__self__, "min_node", min_node)
        pulumi.set(__self__, "min_task", min_task)

    @_builtins.property
    @pulumi.getter(name="maxNode")
    def max_node(self) -> _builtins.int:
        """
        Indicates the maximum number of nodes for the dump function.
        """
        return pulumi.get(self, "max_node")

    @_builtins.property
    @pulumi.getter(name="maxTask")
    def max_task(self) -> _builtins.int:
        """
        Indicates the maximum number of tasks for the dump function.
        """
        return pulumi.get(self, "max_task")

    @_builtins.property
    @pulumi.getter(name="minNode")
    def min_node(self) -> _builtins.int:
        """
        Indicates the minimum number of nodes for the dump function.
        """
        return pulumi.get(self, "min_node")

    @_builtins.property
    @pulumi.getter(name="minTask")
    def min_task(self) -> _builtins.int:
        """
        Indicates the minimum number of tasks for the dump function.
        """
        return pulumi.get(self, "min_task")


@pulumi.output_type
class GetDmsRocketmqConsumerGroupAccessUsersPolicyResult(dict):
    def __init__(__self__, *,
                 access_key: _builtins.str,
                 admin: _builtins.bool,
                 perm: _builtins.str,
                 white_remote_address: _builtins.str):
        """
        :param _builtins.str access_key: Indicates the user name.
        :param _builtins.bool admin: Indicates whether the user is an administrator.
        :param _builtins.str perm: Indicates the permissions.
        :param _builtins.str white_remote_address: Indicates the IP address whitelist.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "admin", admin)
        pulumi.set(__self__, "perm", perm)
        pulumi.set(__self__, "white_remote_address", white_remote_address)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter
    def admin(self) -> _builtins.bool:
        """
        Indicates whether the user is an administrator.
        """
        return pulumi.get(self, "admin")

    @_builtins.property
    @pulumi.getter
    def perm(self) -> _builtins.str:
        """
        Indicates the permissions.
        """
        return pulumi.get(self, "perm")

    @_builtins.property
    @pulumi.getter(name="whiteRemoteAddress")
    def white_remote_address(self) -> _builtins.str:
        """
        Indicates the IP address whitelist.
        """
        return pulumi.get(self, "white_remote_address")


@pulumi.output_type
class GetDmsRocketmqConsumerGroupsGroupResult(dict):
    def __init__(__self__, *,
                 broadcast: _builtins.bool,
                 brokers: Sequence[_builtins.str],
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 name: _builtins.str,
                 retry_max_times: _builtins.int):
        """
        :param _builtins.bool broadcast: Specifies whether to broadcast the consumer group. Defaults to **false**.
        :param Sequence[_builtins.str] brokers: Indicates the list of associated brokers of the consumer group.
        :param _builtins.str description: Indicates the description of the consumer group.
        :param _builtins.bool enabled: Specifies the consumer group is enabled or not. Defaults to **true**.
        :param _builtins.str name: Specifies the name of the consumer group.
        :param _builtins.int retry_max_times: Specifies the maximum number of retry times.
        """
        pulumi.set(__self__, "broadcast", broadcast)
        pulumi.set(__self__, "brokers", brokers)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "retry_max_times", retry_max_times)

    @_builtins.property
    @pulumi.getter
    def broadcast(self) -> _builtins.bool:
        """
        Specifies whether to broadcast the consumer group. Defaults to **false**.
        """
        return pulumi.get(self, "broadcast")

    @_builtins.property
    @pulumi.getter
    def brokers(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of associated brokers of the consumer group.
        """
        return pulumi.get(self, "brokers")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the consumer group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Specifies the consumer group is enabled or not. Defaults to **true**.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the consumer group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="retryMaxTimes")
    def retry_max_times(self) -> _builtins.int:
        """
        Specifies the maximum number of retry times.
        """
        return pulumi.get(self, "retry_max_times")


@pulumi.output_type
class GetDmsRocketmqConsumersClientResult(dict):
    def __init__(__self__, *,
                 client_address: _builtins.str,
                 client_id: _builtins.str,
                 language: _builtins.str,
                 subscriptions: Sequence['outputs.GetDmsRocketmqConsumersClientSubscriptionResult'],
                 version: _builtins.str):
        """
        :param _builtins.str client_address: Indicates the client address.
        :param _builtins.str client_id: Indicates the client ID.
        :param _builtins.str language: Indicates the client language.
        :param Sequence['GetDmsRocketmqConsumersClientSubscriptionArgs'] subscriptions: Indicates the subscription list.
        :param _builtins.str version: Indicates the client version.
        """
        pulumi.set(__self__, "client_address", client_address)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "subscriptions", subscriptions)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="clientAddress")
    def client_address(self) -> _builtins.str:
        """
        Indicates the client address.
        """
        return pulumi.get(self, "client_address")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        """
        Indicates the client ID.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter
    def language(self) -> _builtins.str:
        """
        Indicates the client language.
        """
        return pulumi.get(self, "language")

    @_builtins.property
    @pulumi.getter
    def subscriptions(self) -> Sequence['outputs.GetDmsRocketmqConsumersClientSubscriptionResult']:
        """
        Indicates the subscription list.
        """
        return pulumi.get(self, "subscriptions")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        Indicates the client version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetDmsRocketmqConsumersClientSubscriptionResult(dict):
    def __init__(__self__, *,
                 expression: _builtins.str,
                 topic: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str expression: Indicates the subscription tag.
        :param _builtins.str topic: Indicates the name of the subscribed topic.
        :param _builtins.str type: Indicates the subscription type. The value can be **TAG** and **SQL92**.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def expression(self) -> _builtins.str:
        """
        Indicates the subscription tag.
        """
        return pulumi.get(self, "expression")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> _builtins.str:
        """
        Indicates the name of the subscribed topic.
        """
        return pulumi.get(self, "topic")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the subscription type. The value can be **TAG** and **SQL92**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDmsRocketmqExtendFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 arch_types: Sequence[_builtins.str],
                 available_zones: Sequence[_builtins.str],
                 billing_code: _builtins.str,
                 charging_modes: Sequence[_builtins.str],
                 id: _builtins.str,
                 ios: Sequence['outputs.GetDmsRocketmqExtendFlavorsFlavorIoResult'],
                 properties: Sequence['outputs.GetDmsRocketmqExtendFlavorsFlavorPropertyResult'],
                 support_features: Sequence['outputs.GetDmsRocketmqExtendFlavorsFlavorSupportFeatureResult'],
                 type: _builtins.str,
                 unavailable_zones: Sequence[_builtins.str],
                 vm_specification: _builtins.str):
        """
        :param Sequence[_builtins.str] arch_types: Indicates the list of supported CPU architectures.
        :param Sequence[_builtins.str] available_zones: Indicates the list of availability zones with available resources.
        :param _builtins.str billing_code: Indicates the billing code.
        :param Sequence[_builtins.str] charging_modes: Indicates the list of supported billing modes.
        :param _builtins.str id: Indicates the flavor ID.
        :param Sequence['GetDmsRocketmqExtendFlavorsFlavorIoArgs'] ios: Indicates the list of supported disk IO types.
        :param Sequence['GetDmsRocketmqExtendFlavorsFlavorPropertyArgs'] properties: Indicates the key-value pair of a feature.
        :param Sequence['GetDmsRocketmqExtendFlavorsFlavorSupportFeatureArgs'] support_features: Indicates the supported features.
        :param _builtins.str type: Specifies the flavor type.
        :param Sequence[_builtins.str] unavailable_zones: Indicates the list of unavailability zones with available resources.
        :param _builtins.str vm_specification: Indicates the underlying VM specification.
        """
        pulumi.set(__self__, "arch_types", arch_types)
        pulumi.set(__self__, "available_zones", available_zones)
        pulumi.set(__self__, "billing_code", billing_code)
        pulumi.set(__self__, "charging_modes", charging_modes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ios", ios)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "support_features", support_features)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unavailable_zones", unavailable_zones)
        pulumi.set(__self__, "vm_specification", vm_specification)

    @_builtins.property
    @pulumi.getter(name="archTypes")
    def arch_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of supported CPU architectures.
        """
        return pulumi.get(self, "arch_types")

    @_builtins.property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of availability zones with available resources.
        """
        return pulumi.get(self, "available_zones")

    @_builtins.property
    @pulumi.getter(name="billingCode")
    def billing_code(self) -> _builtins.str:
        """
        Indicates the billing code.
        """
        return pulumi.get(self, "billing_code")

    @_builtins.property
    @pulumi.getter(name="chargingModes")
    def charging_modes(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of supported billing modes.
        """
        return pulumi.get(self, "charging_modes")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the flavor ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ios(self) -> Sequence['outputs.GetDmsRocketmqExtendFlavorsFlavorIoResult']:
        """
        Indicates the list of supported disk IO types.
        """
        return pulumi.get(self, "ios")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsRocketmqExtendFlavorsFlavorPropertyResult']:
        """
        Indicates the key-value pair of a feature.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetDmsRocketmqExtendFlavorsFlavorSupportFeatureResult']:
        """
        Indicates the supported features.
        """
        return pulumi.get(self, "support_features")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the flavor type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="unavailableZones")
    def unavailable_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of unavailability zones with available resources.
        """
        return pulumi.get(self, "unavailable_zones")

    @_builtins.property
    @pulumi.getter(name="vmSpecification")
    def vm_specification(self) -> _builtins.str:
        """
        Indicates the underlying VM specification.
        """
        return pulumi.get(self, "vm_specification")


@pulumi.output_type
class GetDmsRocketmqExtendFlavorsFlavorIoResult(dict):
    def __init__(__self__, *,
                 available_zones: Sequence[_builtins.str],
                 storage_spec_code: _builtins.str,
                 type: _builtins.str,
                 unavailable_zones: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] available_zones: Indicates the list of availability zones with available resources.
        :param _builtins.str storage_spec_code: Specifies the disk IO encoding, e.g. **dms.physical.storage.high.v2**.
        :param _builtins.str type: Specifies the flavor type.
        :param Sequence[_builtins.str] unavailable_zones: Indicates the list of unavailability zones with available resources.
        """
        pulumi.set(__self__, "available_zones", available_zones)
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unavailable_zones", unavailable_zones)

    @_builtins.property
    @pulumi.getter(name="availableZones")
    def available_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of availability zones with available resources.
        """
        return pulumi.get(self, "available_zones")

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> _builtins.str:
        """
        Specifies the disk IO encoding, e.g. **dms.physical.storage.high.v2**.
        """
        return pulumi.get(self, "storage_spec_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the flavor type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="unavailableZones")
    def unavailable_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of unavailability zones with available resources.
        """
        return pulumi.get(self, "unavailable_zones")


@pulumi.output_type
class GetDmsRocketmqExtendFlavorsFlavorPropertyResult(dict):
    def __init__(__self__, *,
                 engine_versions: _builtins.str,
                 flavor_alias: _builtins.str,
                 max_broker: _builtins.str,
                 max_consumer_per_broker: _builtins.str,
                 max_storage_per_node: _builtins.str,
                 max_topic_per_broker: _builtins.str,
                 min_broker: _builtins.str,
                 min_storage_per_node: _builtins.str):
        """
        :param _builtins.str engine_versions: Indicates the version of the message engine.
        :param _builtins.str flavor_alias: Indicates the alias of **flavor_id**.
        :param _builtins.str max_broker: Indicates the maximum number of brokers.
        :param _builtins.str max_consumer_per_broker: Indicates the maximum number of consumers of each broker.
        :param _builtins.str max_storage_per_node: Indicates the maximum storage space of each broker. Unit: GB.
        :param _builtins.str max_topic_per_broker: Indicates the maximum number of topics that can be created on each broker.
        :param _builtins.str min_broker: Indicates the minimum number of brokers.
        :param _builtins.str min_storage_per_node: Indicates the minimum storage space of each broker. Unit: GB.
        """
        pulumi.set(__self__, "engine_versions", engine_versions)
        pulumi.set(__self__, "flavor_alias", flavor_alias)
        pulumi.set(__self__, "max_broker", max_broker)
        pulumi.set(__self__, "max_consumer_per_broker", max_consumer_per_broker)
        pulumi.set(__self__, "max_storage_per_node", max_storage_per_node)
        pulumi.set(__self__, "max_topic_per_broker", max_topic_per_broker)
        pulumi.set(__self__, "min_broker", min_broker)
        pulumi.set(__self__, "min_storage_per_node", min_storage_per_node)

    @_builtins.property
    @pulumi.getter(name="engineVersions")
    def engine_versions(self) -> _builtins.str:
        """
        Indicates the version of the message engine.
        """
        return pulumi.get(self, "engine_versions")

    @_builtins.property
    @pulumi.getter(name="flavorAlias")
    def flavor_alias(self) -> _builtins.str:
        """
        Indicates the alias of **flavor_id**.
        """
        return pulumi.get(self, "flavor_alias")

    @_builtins.property
    @pulumi.getter(name="maxBroker")
    def max_broker(self) -> _builtins.str:
        """
        Indicates the maximum number of brokers.
        """
        return pulumi.get(self, "max_broker")

    @_builtins.property
    @pulumi.getter(name="maxConsumerPerBroker")
    def max_consumer_per_broker(self) -> _builtins.str:
        """
        Indicates the maximum number of consumers of each broker.
        """
        return pulumi.get(self, "max_consumer_per_broker")

    @_builtins.property
    @pulumi.getter(name="maxStoragePerNode")
    def max_storage_per_node(self) -> _builtins.str:
        """
        Indicates the maximum storage space of each broker. Unit: GB.
        """
        return pulumi.get(self, "max_storage_per_node")

    @_builtins.property
    @pulumi.getter(name="maxTopicPerBroker")
    def max_topic_per_broker(self) -> _builtins.str:
        """
        Indicates the maximum number of topics that can be created on each broker.
        """
        return pulumi.get(self, "max_topic_per_broker")

    @_builtins.property
    @pulumi.getter(name="minBroker")
    def min_broker(self) -> _builtins.str:
        """
        Indicates the minimum number of brokers.
        """
        return pulumi.get(self, "min_broker")

    @_builtins.property
    @pulumi.getter(name="minStoragePerNode")
    def min_storage_per_node(self) -> _builtins.str:
        """
        Indicates the minimum storage space of each broker. Unit: GB.
        """
        return pulumi.get(self, "min_storage_per_node")


@pulumi.output_type
class GetDmsRocketmqExtendFlavorsFlavorSupportFeatureResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 properties: Mapping[str, _builtins.str]):
        """
        :param _builtins.str name: Indicates the feature name.
        :param Mapping[str, _builtins.str] properties: Indicates the key-value pair of a feature.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the feature name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Mapping[str, _builtins.str]:
        """
        Indicates the key-value pair of a feature.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetDmsRocketmqFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 arch_types: Sequence[_builtins.str],
                 charging_modes: Sequence[_builtins.str],
                 id: _builtins.str,
                 ios: Sequence['outputs.GetDmsRocketmqFlavorsFlavorIoResult'],
                 properties: Sequence['outputs.GetDmsRocketmqFlavorsFlavorPropertyResult'],
                 support_features: Sequence['outputs.GetDmsRocketmqFlavorsFlavorSupportFeatureResult'],
                 type: _builtins.str,
                 vm_specification: _builtins.str):
        """
        :param Sequence[_builtins.str] arch_types: Indicates the list of the types of CPU architecture.
        :param Sequence[_builtins.str] charging_modes: Indicates the list of the billing modes.
        :param _builtins.str id: Indicates the ID of the flavor.
        :param Sequence['GetDmsRocketmqFlavorsFlavorIoArgs'] ios: Indicates the list of disk IO types.
               The ios structure is documented below.
        :param Sequence['GetDmsRocketmqFlavorsFlavorPropertyArgs'] properties: Indicates the list of the function property details.
               The properties structure is documented below.
        :param Sequence['GetDmsRocketmqFlavorsFlavorSupportFeatureArgs'] support_features: Indicates the list of features supported by the current specification.
               The support_features structure is documented below.
        :param _builtins.str type: Specifies the type of the flavor. Value options: **single** and **cluster**.
        :param _builtins.str vm_specification: Indicates the underlying VM specification, e.g. **c6.large.2**
        """
        pulumi.set(__self__, "arch_types", arch_types)
        pulumi.set(__self__, "charging_modes", charging_modes)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ios", ios)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "support_features", support_features)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "vm_specification", vm_specification)

    @_builtins.property
    @pulumi.getter(name="archTypes")
    def arch_types(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of the types of CPU architecture.
        """
        return pulumi.get(self, "arch_types")

    @_builtins.property
    @pulumi.getter(name="chargingModes")
    def charging_modes(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of the billing modes.
        """
        return pulumi.get(self, "charging_modes")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ios(self) -> Sequence['outputs.GetDmsRocketmqFlavorsFlavorIoResult']:
        """
        Indicates the list of disk IO types.
        The ios structure is documented below.
        """
        return pulumi.get(self, "ios")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsRocketmqFlavorsFlavorPropertyResult']:
        """
        Indicates the list of the function property details.
        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")

    @_builtins.property
    @pulumi.getter(name="supportFeatures")
    def support_features(self) -> Sequence['outputs.GetDmsRocketmqFlavorsFlavorSupportFeatureResult']:
        """
        Indicates the list of features supported by the current specification.
        The support_features structure is documented below.
        """
        return pulumi.get(self, "support_features")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the flavor. Value options: **single** and **cluster**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vmSpecification")
    def vm_specification(self) -> _builtins.str:
        """
        Indicates the underlying VM specification, e.g. **c6.large.2**
        """
        return pulumi.get(self, "vm_specification")


@pulumi.output_type
class GetDmsRocketmqFlavorsFlavorIoResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 storage_spec_code: _builtins.str,
                 type: _builtins.str,
                 unavailability_zones: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] availability_zones: Specifies the list of availability zone names.
        :param _builtins.str storage_spec_code: Specifies the disk IO encoding.
               Value options:
               + **dms.physical.storage.high.v2**: Type of the disk that uses high I/O.
               + **dms.physical.storage.ultra.v2**: Type of the disk that uses ultra-high I/O.
        :param _builtins.str type: Specifies the type of the flavor. Value options: **single** and **cluster**.
        :param Sequence[_builtins.str] unavailability_zones: Indicates the list of unavailability zone names.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unavailability_zones", unavailability_zones)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Specifies the list of availability zone names.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> _builtins.str:
        """
        Specifies the disk IO encoding.
        Value options:
        + **dms.physical.storage.high.v2**: Type of the disk that uses high I/O.
        + **dms.physical.storage.ultra.v2**: Type of the disk that uses ultra-high I/O.
        """
        return pulumi.get(self, "storage_spec_code")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the type of the flavor. Value options: **single** and **cluster**.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="unavailabilityZones")
    def unavailability_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of unavailability zone names.
        """
        return pulumi.get(self, "unavailability_zones")


@pulumi.output_type
class GetDmsRocketmqFlavorsFlavorPropertyResult(dict):
    def __init__(__self__, *,
                 flavor_alias: _builtins.str,
                 max_bandwidth_per_broker: _builtins.int,
                 max_broker: _builtins.int,
                 max_consumer_per_broker: _builtins.int,
                 max_partition_per_broker: _builtins.int,
                 max_storage_per_node: _builtins.int,
                 max_tps_per_broker: _builtins.int,
                 min_broker: _builtins.int,
                 min_storage_per_node: _builtins.int):
        """
        :param _builtins.str flavor_alias: Indicates the alias of the flavor.
        :param _builtins.int max_bandwidth_per_broker: Indicates the maximum bandwidth per broker.
        :param _builtins.int max_broker: Indicates the maximum number of brokers.
        :param _builtins.int max_consumer_per_broker: Indicates the maximum number of consumers per broker.
        :param _builtins.int max_partition_per_broker: Indicates the maximum number of partitions per broker.
        :param _builtins.int max_storage_per_node: Indicates the maximum storage per node. The unit is GB.
        :param _builtins.int max_tps_per_broker: Indicates the maximum TPS per broker.
        :param _builtins.int min_broker: Indicates the minimum number of brokers.
        :param _builtins.int min_storage_per_node: Indicates the minimum storage per node. The unit is GB.
        """
        pulumi.set(__self__, "flavor_alias", flavor_alias)
        pulumi.set(__self__, "max_bandwidth_per_broker", max_bandwidth_per_broker)
        pulumi.set(__self__, "max_broker", max_broker)
        pulumi.set(__self__, "max_consumer_per_broker", max_consumer_per_broker)
        pulumi.set(__self__, "max_partition_per_broker", max_partition_per_broker)
        pulumi.set(__self__, "max_storage_per_node", max_storage_per_node)
        pulumi.set(__self__, "max_tps_per_broker", max_tps_per_broker)
        pulumi.set(__self__, "min_broker", min_broker)
        pulumi.set(__self__, "min_storage_per_node", min_storage_per_node)

    @_builtins.property
    @pulumi.getter(name="flavorAlias")
    def flavor_alias(self) -> _builtins.str:
        """
        Indicates the alias of the flavor.
        """
        return pulumi.get(self, "flavor_alias")

    @_builtins.property
    @pulumi.getter(name="maxBandwidthPerBroker")
    def max_bandwidth_per_broker(self) -> _builtins.int:
        """
        Indicates the maximum bandwidth per broker.
        """
        return pulumi.get(self, "max_bandwidth_per_broker")

    @_builtins.property
    @pulumi.getter(name="maxBroker")
    def max_broker(self) -> _builtins.int:
        """
        Indicates the maximum number of brokers.
        """
        return pulumi.get(self, "max_broker")

    @_builtins.property
    @pulumi.getter(name="maxConsumerPerBroker")
    def max_consumer_per_broker(self) -> _builtins.int:
        """
        Indicates the maximum number of consumers per broker.
        """
        return pulumi.get(self, "max_consumer_per_broker")

    @_builtins.property
    @pulumi.getter(name="maxPartitionPerBroker")
    def max_partition_per_broker(self) -> _builtins.int:
        """
        Indicates the maximum number of partitions per broker.
        """
        return pulumi.get(self, "max_partition_per_broker")

    @_builtins.property
    @pulumi.getter(name="maxStoragePerNode")
    def max_storage_per_node(self) -> _builtins.int:
        """
        Indicates the maximum storage per node. The unit is GB.
        """
        return pulumi.get(self, "max_storage_per_node")

    @_builtins.property
    @pulumi.getter(name="maxTpsPerBroker")
    def max_tps_per_broker(self) -> _builtins.int:
        """
        Indicates the maximum TPS per broker.
        """
        return pulumi.get(self, "max_tps_per_broker")

    @_builtins.property
    @pulumi.getter(name="minBroker")
    def min_broker(self) -> _builtins.int:
        """
        Indicates the minimum number of brokers.
        """
        return pulumi.get(self, "min_broker")

    @_builtins.property
    @pulumi.getter(name="minStoragePerNode")
    def min_storage_per_node(self) -> _builtins.int:
        """
        Indicates the minimum storage per node. The unit is GB.
        """
        return pulumi.get(self, "min_storage_per_node")


@pulumi.output_type
class GetDmsRocketmqFlavorsFlavorSupportFeatureResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 properties: Sequence['outputs.GetDmsRocketmqFlavorsFlavorSupportFeaturePropertyResult']):
        """
        :param _builtins.str name: Indicates the function name, e.g. **connector_obs**.
        :param Sequence['GetDmsRocketmqFlavorsFlavorSupportFeaturePropertyArgs'] properties: Indicates the list of the function property details.
               The properties structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the function name, e.g. **connector_obs**.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Sequence['outputs.GetDmsRocketmqFlavorsFlavorSupportFeaturePropertyResult']:
        """
        Indicates the list of the function property details.
        The properties structure is documented below.
        """
        return pulumi.get(self, "properties")


@pulumi.output_type
class GetDmsRocketmqFlavorsFlavorSupportFeaturePropertyResult(dict):
    def __init__(__self__, *,
                 max_node: _builtins.int,
                 max_task: _builtins.int,
                 min_node: _builtins.int,
                 min_task: _builtins.int):
        """
        :param _builtins.int max_node: Indicates the maximum number of nodes for the dump function.
        :param _builtins.int max_task: Indicates the maximum number of tasks for the dump function.
        :param _builtins.int min_node: Indicates the minimum number of nodes for the dump function.
        :param _builtins.int min_task: Indicates the minimum number of tasks for the dump function.
        """
        pulumi.set(__self__, "max_node", max_node)
        pulumi.set(__self__, "max_task", max_task)
        pulumi.set(__self__, "min_node", min_node)
        pulumi.set(__self__, "min_task", min_task)

    @_builtins.property
    @pulumi.getter(name="maxNode")
    def max_node(self) -> _builtins.int:
        """
        Indicates the maximum number of nodes for the dump function.
        """
        return pulumi.get(self, "max_node")

    @_builtins.property
    @pulumi.getter(name="maxTask")
    def max_task(self) -> _builtins.int:
        """
        Indicates the maximum number of tasks for the dump function.
        """
        return pulumi.get(self, "max_task")

    @_builtins.property
    @pulumi.getter(name="minNode")
    def min_node(self) -> _builtins.int:
        """
        Indicates the minimum number of nodes for the dump function.
        """
        return pulumi.get(self, "min_node")

    @_builtins.property
    @pulumi.getter(name="minTask")
    def min_task(self) -> _builtins.int:
        """
        Indicates the minimum number of tasks for the dump function.
        """
        return pulumi.get(self, "min_task")


@pulumi.output_type
class GetDmsRocketmqInstancesInstanceResult(dict):
    def __init__(__self__, *,
                 availability_zones: Sequence[_builtins.str],
                 broker_address: _builtins.str,
                 broker_num: _builtins.int,
                 cross_vpc_accesses: Sequence['outputs.GetDmsRocketmqInstancesInstanceCrossVpcAccessResult'],
                 description: _builtins.str,
                 enable_acl: _builtins.bool,
                 enable_publicip: _builtins.bool,
                 engine_version: _builtins.str,
                 flavor_id: _builtins.str,
                 id: _builtins.str,
                 ipv6_enable: _builtins.bool,
                 maintain_begin: _builtins.str,
                 maintain_end: _builtins.str,
                 name: _builtins.str,
                 namesrv_address: _builtins.str,
                 new_spec_billing_enable: _builtins.bool,
                 node_num: _builtins.int,
                 public_broker_address: _builtins.str,
                 public_namesrv_address: _builtins.str,
                 publicip_address: _builtins.str,
                 publicip_id: _builtins.str,
                 resource_spec_code: _builtins.str,
                 security_group_id: _builtins.str,
                 specification: _builtins.str,
                 ssl_enable: _builtins.bool,
                 status: _builtins.str,
                 storage_space: _builtins.int,
                 storage_spec_code: _builtins.str,
                 subnet_id: _builtins.str,
                 type: _builtins.str,
                 used_storage_space: _builtins.int,
                 vpc_id: _builtins.str):
        """
        :param Sequence[_builtins.str] availability_zones: Indicates the list of availability zone names, where
               instance brokers reside and which has available resources.
        :param _builtins.str broker_address: Indicates the service data address.
        :param _builtins.int broker_num: Specifies the broker numbers. Defaults to 1.
        :param Sequence['GetDmsRocketmqInstancesInstanceCrossVpcAccessArgs'] cross_vpc_accesses: Indicates the Cross-VPC access information.
               The CrossVpc structure is documented below.
        :param _builtins.str description: Indicates the description of the DMS RocketMQ instance.
        :param _builtins.bool enable_acl: Indicates whether access control is enabled.
        :param _builtins.bool enable_publicip: Indicates whether to enable public access.
        :param _builtins.str engine_version: Indicates the version of the RocketMQ engine.
        :param _builtins.str flavor_id: Indicates a product ID.
        :param _builtins.str id: Indicates the ID of the DMS RocketMQ instance.
        :param _builtins.bool ipv6_enable: Indicates whether to support IPv6. Defaults to false.
        :param _builtins.str maintain_begin: Indicates the time at which the maintenance window starts. The format is HH:mm:ss.
        :param _builtins.str maintain_end: Indicates the time at which the maintenance window ends. The format is HH:mm:ss.
        :param _builtins.str name: Specifies the name of the DMS RocketMQ instance.
        :param _builtins.str namesrv_address: Indicates the metadata address.
        :param _builtins.bool new_spec_billing_enable: Indicates the whether billing based on new specifications is enabled.
        :param _builtins.int node_num: Indicates the node quantity.
        :param _builtins.str public_broker_address: Indicates the public network service data address.
        :param _builtins.str public_namesrv_address: Indicates the public network metadata address.
        :param _builtins.str publicip_address: Indicates the public IP address.
        :param _builtins.str publicip_id: Indicates the ID of the EIP bound to the instance.
               Use commas (,) to separate multiple EIP IDs.
               This parameter is mandatory if public access is enabled (that is, enable_publicip is set to true).
        :param _builtins.str resource_spec_code: Indicates the resource specifications.
        :param _builtins.str security_group_id: Indicates the ID of a security group.
        :param _builtins.str specification: Indicates the instance specification. For a cluster DMS RocketMQ instance, VM specifications
               and the number of nodes are returned.
        :param _builtins.bool ssl_enable: Indicates whether the RocketMQ SASL_SSL is enabled. Defaults to false.
        :param _builtins.str status: Specifies the status of the DMS RocketMQ instance.
        :param _builtins.int storage_space: Indicates the message storage capacity. Unit: GB.
        :param _builtins.str storage_spec_code: Indicates the storage I/O specification.
        :param _builtins.str subnet_id: Indicates the ID of a subnet.
        :param _builtins.str type: Indicates the DMS RocketMQ instance type.
        :param _builtins.int used_storage_space: Indicates the used message storage space. Unit: GB.
        :param _builtins.str vpc_id: Indicates the ID of a VPC.
        """
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "broker_address", broker_address)
        pulumi.set(__self__, "broker_num", broker_num)
        pulumi.set(__self__, "cross_vpc_accesses", cross_vpc_accesses)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enable_acl", enable_acl)
        pulumi.set(__self__, "enable_publicip", enable_publicip)
        pulumi.set(__self__, "engine_version", engine_version)
        pulumi.set(__self__, "flavor_id", flavor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        pulumi.set(__self__, "maintain_begin", maintain_begin)
        pulumi.set(__self__, "maintain_end", maintain_end)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namesrv_address", namesrv_address)
        pulumi.set(__self__, "new_spec_billing_enable", new_spec_billing_enable)
        pulumi.set(__self__, "node_num", node_num)
        pulumi.set(__self__, "public_broker_address", public_broker_address)
        pulumi.set(__self__, "public_namesrv_address", public_namesrv_address)
        pulumi.set(__self__, "publicip_address", publicip_address)
        pulumi.set(__self__, "publicip_id", publicip_id)
        pulumi.set(__self__, "resource_spec_code", resource_spec_code)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "specification", specification)
        pulumi.set(__self__, "ssl_enable", ssl_enable)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_space", storage_space)
        pulumi.set(__self__, "storage_spec_code", storage_spec_code)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "used_storage_space", used_storage_space)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of availability zone names, where
        instance brokers reside and which has available resources.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="brokerAddress")
    def broker_address(self) -> _builtins.str:
        """
        Indicates the service data address.
        """
        return pulumi.get(self, "broker_address")

    @_builtins.property
    @pulumi.getter(name="brokerNum")
    def broker_num(self) -> _builtins.int:
        """
        Specifies the broker numbers. Defaults to 1.
        """
        return pulumi.get(self, "broker_num")

    @_builtins.property
    @pulumi.getter(name="crossVpcAccesses")
    def cross_vpc_accesses(self) -> Sequence['outputs.GetDmsRocketmqInstancesInstanceCrossVpcAccessResult']:
        """
        Indicates the Cross-VPC access information.
        The CrossVpc structure is documented below.
        """
        return pulumi.get(self, "cross_vpc_accesses")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Indicates the description of the DMS RocketMQ instance.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enableAcl")
    def enable_acl(self) -> _builtins.bool:
        """
        Indicates whether access control is enabled.
        """
        return pulumi.get(self, "enable_acl")

    @_builtins.property
    @pulumi.getter(name="enablePublicip")
    def enable_publicip(self) -> _builtins.bool:
        """
        Indicates whether to enable public access.
        """
        return pulumi.get(self, "enable_publicip")

    @_builtins.property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> _builtins.str:
        """
        Indicates the version of the RocketMQ engine.
        """
        return pulumi.get(self, "engine_version")

    @_builtins.property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> _builtins.str:
        """
        Indicates a product ID.
        """
        return pulumi.get(self, "flavor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the DMS RocketMQ instance.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> _builtins.bool:
        """
        Indicates whether to support IPv6. Defaults to false.
        """
        return pulumi.get(self, "ipv6_enable")

    @_builtins.property
    @pulumi.getter(name="maintainBegin")
    def maintain_begin(self) -> _builtins.str:
        """
        Indicates the time at which the maintenance window starts. The format is HH:mm:ss.
        """
        return pulumi.get(self, "maintain_begin")

    @_builtins.property
    @pulumi.getter(name="maintainEnd")
    def maintain_end(self) -> _builtins.str:
        """
        Indicates the time at which the maintenance window ends. The format is HH:mm:ss.
        """
        return pulumi.get(self, "maintain_end")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the DMS RocketMQ instance.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="namesrvAddress")
    def namesrv_address(self) -> _builtins.str:
        """
        Indicates the metadata address.
        """
        return pulumi.get(self, "namesrv_address")

    @_builtins.property
    @pulumi.getter(name="newSpecBillingEnable")
    def new_spec_billing_enable(self) -> _builtins.bool:
        """
        Indicates the whether billing based on new specifications is enabled.
        """
        return pulumi.get(self, "new_spec_billing_enable")

    @_builtins.property
    @pulumi.getter(name="nodeNum")
    def node_num(self) -> _builtins.int:
        """
        Indicates the node quantity.
        """
        return pulumi.get(self, "node_num")

    @_builtins.property
    @pulumi.getter(name="publicBrokerAddress")
    def public_broker_address(self) -> _builtins.str:
        """
        Indicates the public network service data address.
        """
        return pulumi.get(self, "public_broker_address")

    @_builtins.property
    @pulumi.getter(name="publicNamesrvAddress")
    def public_namesrv_address(self) -> _builtins.str:
        """
        Indicates the public network metadata address.
        """
        return pulumi.get(self, "public_namesrv_address")

    @_builtins.property
    @pulumi.getter(name="publicipAddress")
    def publicip_address(self) -> _builtins.str:
        """
        Indicates the public IP address.
        """
        return pulumi.get(self, "publicip_address")

    @_builtins.property
    @pulumi.getter(name="publicipId")
    def publicip_id(self) -> _builtins.str:
        """
        Indicates the ID of the EIP bound to the instance.
        Use commas (,) to separate multiple EIP IDs.
        This parameter is mandatory if public access is enabled (that is, enable_publicip is set to true).
        """
        return pulumi.get(self, "publicip_id")

    @_builtins.property
    @pulumi.getter(name="resourceSpecCode")
    def resource_spec_code(self) -> _builtins.str:
        """
        Indicates the resource specifications.
        """
        return pulumi.get(self, "resource_spec_code")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        Indicates the ID of a security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter
    def specification(self) -> _builtins.str:
        """
        Indicates the instance specification. For a cluster DMS RocketMQ instance, VM specifications
        and the number of nodes are returned.
        """
        return pulumi.get(self, "specification")

    @_builtins.property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> _builtins.bool:
        """
        Indicates whether the RocketMQ SASL_SSL is enabled. Defaults to false.
        """
        return pulumi.get(self, "ssl_enable")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the DMS RocketMQ instance.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="storageSpace")
    def storage_space(self) -> _builtins.int:
        """
        Indicates the message storage capacity. Unit: GB.
        """
        return pulumi.get(self, "storage_space")

    @_builtins.property
    @pulumi.getter(name="storageSpecCode")
    def storage_spec_code(self) -> _builtins.str:
        """
        Indicates the storage I/O specification.
        """
        return pulumi.get(self, "storage_spec_code")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        Indicates the ID of a subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Indicates the DMS RocketMQ instance type.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="usedStorageSpace")
    def used_storage_space(self) -> _builtins.int:
        """
        Indicates the used message storage space. Unit: GB.
        """
        return pulumi.get(self, "used_storage_space")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        Indicates the ID of a VPC.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetDmsRocketmqInstancesInstanceCrossVpcAccessResult(dict):
    def __init__(__self__, *,
                 advertised_ip: _builtins.str,
                 lisenter_ip: _builtins.str,
                 listener_ip: _builtins.str,
                 port: _builtins.int,
                 port_id: _builtins.str):
        """
        :param _builtins.str advertised_ip: Indicates the advertised IP.
        :param _builtins.str listener_ip: Indicates the IP of the listener.
        :param _builtins.int port: Indicates the port.
        :param _builtins.str port_id: Indicates the port ID associated with the address.
        """
        pulumi.set(__self__, "advertised_ip", advertised_ip)
        pulumi.set(__self__, "lisenter_ip", lisenter_ip)
        pulumi.set(__self__, "listener_ip", listener_ip)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "port_id", port_id)

    @_builtins.property
    @pulumi.getter(name="advertisedIp")
    def advertised_ip(self) -> _builtins.str:
        """
        Indicates the advertised IP.
        """
        return pulumi.get(self, "advertised_ip")

    @_builtins.property
    @pulumi.getter(name="lisenterIp")
    @_utilities.deprecated("""typo in lisenter_ip, please use \"listener_ip\" instead.""")
    def lisenter_ip(self) -> _builtins.str:
        return pulumi.get(self, "lisenter_ip")

    @_builtins.property
    @pulumi.getter(name="listenerIp")
    def listener_ip(self) -> _builtins.str:
        """
        Indicates the IP of the listener.
        """
        return pulumi.get(self, "listener_ip")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        Indicates the port.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter(name="portId")
    def port_id(self) -> _builtins.str:
        """
        Indicates the port ID associated with the address.
        """
        return pulumi.get(self, "port_id")


@pulumi.output_type
class GetDmsRocketmqMessageTracesTraceResult(dict):
    def __init__(__self__, *,
                 body_length: _builtins.float,
                 client_host: _builtins.str,
                 consume_status: _builtins.float,
                 cost_time: _builtins.float,
                 from_transaction_check: _builtins.bool,
                 group_name: _builtins.str,
                 keys: _builtins.str,
                 message_id: _builtins.str,
                 message_type: _builtins.str,
                 offset_message_id: _builtins.str,
                 request_id: _builtins.str,
                 retry_times: _builtins.int,
                 store_host: _builtins.str,
                 success: _builtins.bool,
                 tags: _builtins.str,
                 time: _builtins.str,
                 topic: _builtins.str,
                 trace_type: _builtins.str,
                 transaction_id: _builtins.str,
                 transaction_state: _builtins.str):
        """
        :param _builtins.float body_length: Specifies the message body length.
        :param _builtins.str client_host: Specifies the IP address of the host that generates the message.
        :param _builtins.float consume_status: Specifies the consumption status.
               + **0**: successful
               + **1**: timeout
               + **2**: abnormal
               + **3**: null
               + **5**: failed
        :param _builtins.float cost_time: Specifies the time spent.
        :param _builtins.bool from_transaction_check: Specifies whether the response is a transaction check response.
        :param _builtins.str group_name: Specifies the producer group or consumer group.
        :param _builtins.str keys: Specifies the message keys.
        :param _builtins.str message_id: Specifies the message ID.
        :param _builtins.str message_type: Specifies the message type.
        :param _builtins.str offset_message_id: Specifies the offset message ID.
        :param _builtins.str request_id: Specifies the request ID.
        :param _builtins.int retry_times: Specifies the number of retry times.
        :param _builtins.str store_host: Specifies the IP address of the host that stores the message.
        :param _builtins.bool success: Specifies whether the request is successful.
        :param _builtins.str tags: Specifies the message tag.
        :param _builtins.str time: Specifies the time.
        :param _builtins.str topic: Specifies the topic name.
        :param _builtins.str trace_type: Specifies the trace type.
        :param _builtins.str transaction_id: Specifies the transaction ID.
        :param _builtins.str transaction_state: Specifies the transaction status.
        """
        pulumi.set(__self__, "body_length", body_length)
        pulumi.set(__self__, "client_host", client_host)
        pulumi.set(__self__, "consume_status", consume_status)
        pulumi.set(__self__, "cost_time", cost_time)
        pulumi.set(__self__, "from_transaction_check", from_transaction_check)
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "keys", keys)
        pulumi.set(__self__, "message_id", message_id)
        pulumi.set(__self__, "message_type", message_type)
        pulumi.set(__self__, "offset_message_id", offset_message_id)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "retry_times", retry_times)
        pulumi.set(__self__, "store_host", store_host)
        pulumi.set(__self__, "success", success)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "time", time)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "trace_type", trace_type)
        pulumi.set(__self__, "transaction_id", transaction_id)
        pulumi.set(__self__, "transaction_state", transaction_state)

    @_builtins.property
    @pulumi.getter(name="bodyLength")
    def body_length(self) -> _builtins.float:
        """
        Specifies the message body length.
        """
        return pulumi.get(self, "body_length")

    @_builtins.property
    @pulumi.getter(name="clientHost")
    def client_host(self) -> _builtins.str:
        """
        Specifies the IP address of the host that generates the message.
        """
        return pulumi.get(self, "client_host")

    @_builtins.property
    @pulumi.getter(name="consumeStatus")
    def consume_status(self) -> _builtins.float:
        """
        Specifies the consumption status.
        + **0**: successful
        + **1**: timeout
        + **2**: abnormal
        + **3**: null
        + **5**: failed
        """
        return pulumi.get(self, "consume_status")

    @_builtins.property
    @pulumi.getter(name="costTime")
    def cost_time(self) -> _builtins.float:
        """
        Specifies the time spent.
        """
        return pulumi.get(self, "cost_time")

    @_builtins.property
    @pulumi.getter(name="fromTransactionCheck")
    def from_transaction_check(self) -> _builtins.bool:
        """
        Specifies whether the response is a transaction check response.
        """
        return pulumi.get(self, "from_transaction_check")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        """
        Specifies the producer group or consumer group.
        """
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter
    def keys(self) -> _builtins.str:
        """
        Specifies the message keys.
        """
        return pulumi.get(self, "keys")

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> _builtins.str:
        """
        Specifies the message ID.
        """
        return pulumi.get(self, "message_id")

    @_builtins.property
    @pulumi.getter(name="messageType")
    def message_type(self) -> _builtins.str:
        """
        Specifies the message type.
        """
        return pulumi.get(self, "message_type")

    @_builtins.property
    @pulumi.getter(name="offsetMessageId")
    def offset_message_id(self) -> _builtins.str:
        """
        Specifies the offset message ID.
        """
        return pulumi.get(self, "offset_message_id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        """
        Specifies the request ID.
        """
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="retryTimes")
    def retry_times(self) -> _builtins.int:
        """
        Specifies the number of retry times.
        """
        return pulumi.get(self, "retry_times")

    @_builtins.property
    @pulumi.getter(name="storeHost")
    def store_host(self) -> _builtins.str:
        """
        Specifies the IP address of the host that stores the message.
        """
        return pulumi.get(self, "store_host")

    @_builtins.property
    @pulumi.getter
    def success(self) -> _builtins.bool:
        """
        Specifies whether the request is successful.
        """
        return pulumi.get(self, "success")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> _builtins.str:
        """
        Specifies the message tag.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def time(self) -> _builtins.str:
        """
        Specifies the time.
        """
        return pulumi.get(self, "time")

    @_builtins.property
    @pulumi.getter
    def topic(self) -> _builtins.str:
        """
        Specifies the topic name.
        """
        return pulumi.get(self, "topic")

    @_builtins.property
    @pulumi.getter(name="traceType")
    def trace_type(self) -> _builtins.str:
        """
        Specifies the trace type.
        """
        return pulumi.get(self, "trace_type")

    @_builtins.property
    @pulumi.getter(name="transactionId")
    def transaction_id(self) -> _builtins.str:
        """
        Specifies the transaction ID.
        """
        return pulumi.get(self, "transaction_id")

    @_builtins.property
    @pulumi.getter(name="transactionState")
    def transaction_state(self) -> _builtins.str:
        """
        Specifies the transaction status.
        """
        return pulumi.get(self, "transaction_state")


@pulumi.output_type
class GetDmsRocketmqMessagesMessageResult(dict):
    def __init__(__self__, *,
                 body: _builtins.str,
                 body_crc: _builtins.int,
                 born_host: _builtins.str,
                 born_time: _builtins.str,
                 message_id: _builtins.str,
                 property_lists: Sequence['outputs.GetDmsRocketmqMessagesMessagePropertyListResult'],
                 queue_id: _builtins.int,
                 queue_offset: _builtins.int,
                 reconsume_times: _builtins.int,
                 store_host: _builtins.str,
                 store_size: _builtins.int,
                 store_time: _builtins.str):
        """
        :param _builtins.str body: Indicates the message body. Only return when querying message by message ID.
        :param _builtins.int body_crc: Indicates the message body checksum.
        :param _builtins.str born_host: Indicates the IP address of the host that generates the message.
        :param _builtins.str born_time: Indicates the message generated time.
        :param _builtins.str message_id: Specifies the message ID.
        :param Sequence['GetDmsRocketmqMessagesMessagePropertyListArgs'] property_lists: Indicates the property list.
               The property_list structure is documented below.
        :param _builtins.int queue_id: Indicates the queue ID.
        :param _builtins.int queue_offset: Indicates the offset in the queue.
        :param _builtins.int reconsume_times: Indicates the number of retry times.
        :param _builtins.str store_host: Indicates the IP address of the host that stores the message.
        :param _builtins.int store_size: Indicates the storage size.
        :param _builtins.str store_time: Indicates the message stored time.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "body_crc", body_crc)
        pulumi.set(__self__, "born_host", born_host)
        pulumi.set(__self__, "born_time", born_time)
        pulumi.set(__self__, "message_id", message_id)
        pulumi.set(__self__, "property_lists", property_lists)
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "queue_offset", queue_offset)
        pulumi.set(__self__, "reconsume_times", reconsume_times)
        pulumi.set(__self__, "store_host", store_host)
        pulumi.set(__self__, "store_size", store_size)
        pulumi.set(__self__, "store_time", store_time)

    @_builtins.property
    @pulumi.getter
    def body(self) -> _builtins.str:
        """
        Indicates the message body. Only return when querying message by message ID.
        """
        return pulumi.get(self, "body")

    @_builtins.property
    @pulumi.getter(name="bodyCrc")
    def body_crc(self) -> _builtins.int:
        """
        Indicates the message body checksum.
        """
        return pulumi.get(self, "body_crc")

    @_builtins.property
    @pulumi.getter(name="bornHost")
    def born_host(self) -> _builtins.str:
        """
        Indicates the IP address of the host that generates the message.
        """
        return pulumi.get(self, "born_host")

    @_builtins.property
    @pulumi.getter(name="bornTime")
    def born_time(self) -> _builtins.str:
        """
        Indicates the message generated time.
        """
        return pulumi.get(self, "born_time")

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> _builtins.str:
        """
        Specifies the message ID.
        """
        return pulumi.get(self, "message_id")

    @_builtins.property
    @pulumi.getter(name="propertyLists")
    def property_lists(self) -> Sequence['outputs.GetDmsRocketmqMessagesMessagePropertyListResult']:
        """
        Indicates the property list.
        The property_list structure is documented below.
        """
        return pulumi.get(self, "property_lists")

    @_builtins.property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> _builtins.int:
        """
        Indicates the queue ID.
        """
        return pulumi.get(self, "queue_id")

    @_builtins.property
    @pulumi.getter(name="queueOffset")
    def queue_offset(self) -> _builtins.int:
        """
        Indicates the offset in the queue.
        """
        return pulumi.get(self, "queue_offset")

    @_builtins.property
    @pulumi.getter(name="reconsumeTimes")
    def reconsume_times(self) -> _builtins.int:
        """
        Indicates the number of retry times.
        """
        return pulumi.get(self, "reconsume_times")

    @_builtins.property
    @pulumi.getter(name="storeHost")
    def store_host(self) -> _builtins.str:
        """
        Indicates the IP address of the host that stores the message.
        """
        return pulumi.get(self, "store_host")

    @_builtins.property
    @pulumi.getter(name="storeSize")
    def store_size(self) -> _builtins.int:
        """
        Indicates the storage size.
        """
        return pulumi.get(self, "store_size")

    @_builtins.property
    @pulumi.getter(name="storeTime")
    def store_time(self) -> _builtins.str:
        """
        Indicates the message stored time.
        """
        return pulumi.get(self, "store_time")


@pulumi.output_type
class GetDmsRocketmqMessagesMessagePropertyListResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: Indicates the property name.
        :param _builtins.str value: Indicates the property value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the property name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        Indicates the property value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDmsRocketmqMigrationTasksTaskResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 start_date: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str id: Indicates the ID of a metadata migration task.
        :param _builtins.str name: Specifies the RocketMQ migration task name.
        :param _builtins.str start_date: Indicates the start time of a metadata migration task.
        :param _builtins.str status: Indicates the status of a metadata migration task.
        :param _builtins.str type: Specifies the RocketMQ migration task type.
               Valid values are **rocketmq** and **rabbitToRocket**.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of a metadata migration task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the RocketMQ migration task name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="startDate")
    def start_date(self) -> _builtins.str:
        """
        Indicates the start time of a metadata migration task.
        """
        return pulumi.get(self, "start_date")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Indicates the status of a metadata migration task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the RocketMQ migration task type.
        Valid values are **rocketmq** and **rabbitToRocket**.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDmsRocketmqTopicAccessUsersPolicyResult(dict):
    def __init__(__self__, *,
                 access_key: _builtins.str,
                 admin: _builtins.bool,
                 perm: _builtins.str,
                 white_remote_address: _builtins.str):
        """
        :param _builtins.str access_key: Indicates the user name.
        :param _builtins.bool admin: Indicates whether the user is an administrator.
        :param _builtins.str perm: Indicates the permissions.
        :param _builtins.str white_remote_address: Indicates the IP address whitelist.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "admin", admin)
        pulumi.set(__self__, "perm", perm)
        pulumi.set(__self__, "white_remote_address", white_remote_address)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        """
        Indicates the user name.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter
    def admin(self) -> _builtins.bool:
        """
        Indicates whether the user is an administrator.
        """
        return pulumi.get(self, "admin")

    @_builtins.property
    @pulumi.getter
    def perm(self) -> _builtins.str:
        """
        Indicates the permissions.
        """
        return pulumi.get(self, "perm")

    @_builtins.property
    @pulumi.getter(name="whiteRemoteAddress")
    def white_remote_address(self) -> _builtins.str:
        """
        Indicates the IP address whitelist.
        """
        return pulumi.get(self, "white_remote_address")


@pulumi.output_type
class GetDmsRocketmqTopicsTopicResult(dict):
    def __init__(__self__, *,
                 brokers: Sequence['outputs.GetDmsRocketmqTopicsTopicBrokerResult'],
                 name: _builtins.str,
                 permission: _builtins.str,
                 total_read_queue_num: _builtins.int,
                 total_write_queue_num: _builtins.int):
        """
        :param Sequence['GetDmsRocketmqTopicsTopicBrokerArgs'] brokers: The list of brokers.
               The brokers structure is documented below.
        :param _builtins.str name: Specifies the topic name.
        :param _builtins.str permission: Specifies the permission. Value options: **sub**, **pub** or **all**.
        :param _builtins.int total_read_queue_num: Specifies the number of total read queue.
        :param _builtins.int total_write_queue_num: Specifies the number of total write queue.
        """
        pulumi.set(__self__, "brokers", brokers)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "total_read_queue_num", total_read_queue_num)
        pulumi.set(__self__, "total_write_queue_num", total_write_queue_num)

    @_builtins.property
    @pulumi.getter
    def brokers(self) -> Sequence['outputs.GetDmsRocketmqTopicsTopicBrokerResult']:
        """
        The list of brokers.
        The brokers structure is documented below.
        """
        return pulumi.get(self, "brokers")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the topic name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def permission(self) -> _builtins.str:
        """
        Specifies the permission. Value options: **sub**, **pub** or **all**.
        """
        return pulumi.get(self, "permission")

    @_builtins.property
    @pulumi.getter(name="totalReadQueueNum")
    def total_read_queue_num(self) -> _builtins.int:
        """
        Specifies the number of total read queue.
        """
        return pulumi.get(self, "total_read_queue_num")

    @_builtins.property
    @pulumi.getter(name="totalWriteQueueNum")
    def total_write_queue_num(self) -> _builtins.int:
        """
        Specifies the number of total write queue.
        """
        return pulumi.get(self, "total_write_queue_num")


@pulumi.output_type
class GetDmsRocketmqTopicsTopicBrokerResult(dict):
    def __init__(__self__, *,
                 broker_name: _builtins.str,
                 read_queue_num: _builtins.int,
                 write_queue_num: _builtins.int):
        """
        :param _builtins.str broker_name: Indicates the broker name.
        :param _builtins.int read_queue_num: Indicates the number of read queue.
        :param _builtins.int write_queue_num: Indicates the number of write queue.
        """
        pulumi.set(__self__, "broker_name", broker_name)
        pulumi.set(__self__, "read_queue_num", read_queue_num)
        pulumi.set(__self__, "write_queue_num", write_queue_num)

    @_builtins.property
    @pulumi.getter(name="brokerName")
    def broker_name(self) -> _builtins.str:
        """
        Indicates the broker name.
        """
        return pulumi.get(self, "broker_name")

    @_builtins.property
    @pulumi.getter(name="readQueueNum")
    def read_queue_num(self) -> _builtins.int:
        """
        Indicates the number of read queue.
        """
        return pulumi.get(self, "read_queue_num")

    @_builtins.property
    @pulumi.getter(name="writeQueueNum")
    def write_queue_num(self) -> _builtins.int:
        """
        Indicates the number of write queue.
        """
        return pulumi.get(self, "write_queue_num")


@pulumi.output_type
class GetDmsRocketmqUsersUserResult(dict):
    def __init__(__self__, *,
                 access_key: _builtins.str,
                 admin: _builtins.bool,
                 default_group_perm: _builtins.str,
                 default_topic_perm: _builtins.str,
                 group_perms: Sequence['outputs.GetDmsRocketmqUsersUserGroupPermResult'],
                 topic_perms: Sequence['outputs.GetDmsRocketmqUsersUserTopicPermResult'],
                 white_remote_address: _builtins.str):
        """
        :param _builtins.str access_key: Specifies the user name.
        :param _builtins.bool admin: Specifies whether the user is an administrator.
        :param _builtins.str default_group_perm: Specifies the default consumer group permissions.
               Value options: **SUB**, **DENY**.
        :param _builtins.str default_topic_perm: Specifies the default topic permissions.
               Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
        :param Sequence['GetDmsRocketmqUsersUserGroupPermArgs'] group_perms: The list of the special consumer group permissions.
               The group_perms structure is documented below.
        :param Sequence['GetDmsRocketmqUsersUserTopicPermArgs'] topic_perms: The list of the special topic permissions.
               The topic_perms structure is documented below.
        :param _builtins.str white_remote_address: Specifies the IP address whitelist.
        """
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "admin", admin)
        pulumi.set(__self__, "default_group_perm", default_group_perm)
        pulumi.set(__self__, "default_topic_perm", default_topic_perm)
        pulumi.set(__self__, "group_perms", group_perms)
        pulumi.set(__self__, "topic_perms", topic_perms)
        pulumi.set(__self__, "white_remote_address", white_remote_address)

    @_builtins.property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> _builtins.str:
        """
        Specifies the user name.
        """
        return pulumi.get(self, "access_key")

    @_builtins.property
    @pulumi.getter
    def admin(self) -> _builtins.bool:
        """
        Specifies whether the user is an administrator.
        """
        return pulumi.get(self, "admin")

    @_builtins.property
    @pulumi.getter(name="defaultGroupPerm")
    def default_group_perm(self) -> _builtins.str:
        """
        Specifies the default consumer group permissions.
        Value options: **SUB**, **DENY**.
        """
        return pulumi.get(self, "default_group_perm")

    @_builtins.property
    @pulumi.getter(name="defaultTopicPerm")
    def default_topic_perm(self) -> _builtins.str:
        """
        Specifies the default topic permissions.
        Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
        """
        return pulumi.get(self, "default_topic_perm")

    @_builtins.property
    @pulumi.getter(name="groupPerms")
    def group_perms(self) -> Sequence['outputs.GetDmsRocketmqUsersUserGroupPermResult']:
        """
        The list of the special consumer group permissions.
        The group_perms structure is documented below.
        """
        return pulumi.get(self, "group_perms")

    @_builtins.property
    @pulumi.getter(name="topicPerms")
    def topic_perms(self) -> Sequence['outputs.GetDmsRocketmqUsersUserTopicPermResult']:
        """
        The list of the special topic permissions.
        The topic_perms structure is documented below.
        """
        return pulumi.get(self, "topic_perms")

    @_builtins.property
    @pulumi.getter(name="whiteRemoteAddress")
    def white_remote_address(self) -> _builtins.str:
        """
        Specifies the IP address whitelist.
        """
        return pulumi.get(self, "white_remote_address")


@pulumi.output_type
class GetDmsRocketmqUsersUserGroupPermResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 perm: _builtins.str):
        """
        :param _builtins.str name: Indicates the name of consumer group.
        :param _builtins.str perm: Indicates the permissions of consumer group.
               Value options: **SUB**, **DENY**.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "perm", perm)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of consumer group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def perm(self) -> _builtins.str:
        """
        Indicates the permissions of consumer group.
        Value options: **SUB**, **DENY**.
        """
        return pulumi.get(self, "perm")


@pulumi.output_type
class GetDmsRocketmqUsersUserTopicPermResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 perm: _builtins.str):
        """
        :param _builtins.str name: Indicates the name of consumer group.
        :param _builtins.str perm: Indicates the permissions of consumer group.
               Value options: **SUB**, **DENY**.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "perm", perm)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of consumer group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def perm(self) -> _builtins.str:
        """
        Indicates the permissions of consumer group.
        Value options: **SUB**, **DENY**.
        """
        return pulumi.get(self, "perm")


@pulumi.output_type
class GetElbFlavorsFlavorResult(dict):
    def __init__(__self__, *,
                 bandwidth: _builtins.int,
                 category: _builtins.int,
                 cps: _builtins.int,
                 flavor_sold_out: _builtins.bool,
                 https_cps: _builtins.int,
                 id: _builtins.str,
                 lcu: _builtins.int,
                 max_connections: _builtins.int,
                 name: _builtins.str,
                 public_border_group: _builtins.str,
                 qps: _builtins.int,
                 shared: _builtins.bool,
                 type: _builtins.str):
        """
        :param _builtins.int bandwidth: Specifies the bandwidth size(Mbit/s) in the flavor.
        :param _builtins.int cps: Specifies the cps in the flavor.
        :param _builtins.str id: ID of the flavor.
        :param _builtins.int max_connections: Specifies the maximum connections in the flavor.
        :param _builtins.str name: Name of the flavor.
        :param _builtins.int qps: Specifies the qps in the L7 flavor.
        :param _builtins.str type: Specifies the flavor type. Valid values are L4 and L7.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "cps", cps)
        pulumi.set(__self__, "flavor_sold_out", flavor_sold_out)
        pulumi.set(__self__, "https_cps", https_cps)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "lcu", lcu)
        pulumi.set(__self__, "max_connections", max_connections)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "qps", qps)
        pulumi.set(__self__, "shared", shared)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def bandwidth(self) -> _builtins.int:
        """
        Specifies the bandwidth size(Mbit/s) in the flavor.
        """
        return pulumi.get(self, "bandwidth")

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.int:
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def cps(self) -> _builtins.int:
        """
        Specifies the cps in the flavor.
        """
        return pulumi.get(self, "cps")

    @_builtins.property
    @pulumi.getter(name="flavorSoldOut")
    def flavor_sold_out(self) -> _builtins.bool:
        return pulumi.get(self, "flavor_sold_out")

    @_builtins.property
    @pulumi.getter(name="httpsCps")
    def https_cps(self) -> _builtins.int:
        return pulumi.get(self, "https_cps")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        ID of the flavor.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def lcu(self) -> _builtins.int:
        return pulumi.get(self, "lcu")

    @_builtins.property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> _builtins.int:
        """
        Specifies the maximum connections in the flavor.
        """
        return pulumi.get(self, "max_connections")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the flavor.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter
    def qps(self) -> _builtins.int:
        """
        Specifies the qps in the L7 flavor.
        """
        return pulumi.get(self, "qps")

    @_builtins.property
    @pulumi.getter
    def shared(self) -> _builtins.bool:
        return pulumi.get(self, "shared")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies the flavor type. Valid values are L4 and L7.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetElbPoolsPoolResult(dict):
    def __init__(__self__, *,
                 any_port_enable: _builtins.bool,
                 connection_drain_enabled: _builtins.bool,
                 connection_drain_timeout: _builtins.int,
                 created_at: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 healthmonitor_id: _builtins.str,
                 id: _builtins.str,
                 ip_version: _builtins.str,
                 lb_method: _builtins.str,
                 listeners: Sequence['outputs.GetElbPoolsPoolListenerResult'],
                 loadbalancers: Sequence['outputs.GetElbPoolsPoolLoadbalancerResult'],
                 member_deletion_protection_enable: _builtins.bool,
                 members: Sequence['outputs.GetElbPoolsPoolMemberResult'],
                 minimum_healthy_member_count: _builtins.int,
                 name: _builtins.str,
                 persistences: Sequence['outputs.GetElbPoolsPoolPersistenceResult'],
                 protection_reason: _builtins.str,
                 protection_status: _builtins.str,
                 protocol: _builtins.str,
                 public_border_group: _builtins.str,
                 quic_cid_hash_strategies: Sequence['outputs.GetElbPoolsPoolQuicCidHashStrategyResult'],
                 slow_start_duration: _builtins.int,
                 slow_start_enabled: _builtins.bool,
                 type: _builtins.str,
                 updated_at: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.bool connection_drain_enabled: Whether to enable delayed logout.
        :param _builtins.int connection_drain_timeout: The timeout of the delayed logout in seconds.
        :param _builtins.str description: Specifies the description of the ELB pool.
        :param _builtins.str healthmonitor_id: Specifies the health monitor ID of the ELB pool.
        :param _builtins.str id: The listener, loadbalancer or member ID.
        :param _builtins.str ip_version: The IP version of the LB pool.
        :param _builtins.str lb_method: Specifies the method of the ELB pool. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
               or SOURCE_IP.
        :param Sequence['GetElbPoolsPoolListenerArgs'] listeners: The listener list. The object structure is documented below.
        :param Sequence['GetElbPoolsPoolLoadbalancerArgs'] loadbalancers: The loadbalancer list. The object structure is documented below.
        :param Sequence['GetElbPoolsPoolMemberArgs'] members: The member list. The object structure is documented below.
        :param _builtins.int minimum_healthy_member_count: The timeout of the delayed logout in seconds.
        :param _builtins.str name: Specifies the name of the ELB pool.
        :param Sequence['GetElbPoolsPoolPersistenceArgs'] persistences: Indicates whether connections in the same session will be processed by the same pool member or not.
               The object structure is documented below.
        :param _builtins.str protection_reason: The reason for update protection.
        :param _builtins.str protection_status: The protection status for update.
        :param _builtins.str protocol: Specifies the protocol of the ELB pool. This can either be TCP, UDP or HTTP.
        :param _builtins.int slow_start_duration: The slow start duration, in seconds.
        :param _builtins.bool slow_start_enabled: Whether to enable slow start.
        :param _builtins.str type: The type of persistence mode.
        :param _builtins.str vpc_id: The ID of the VPC where the backend server group works.
        """
        pulumi.set(__self__, "any_port_enable", any_port_enable)
        pulumi.set(__self__, "connection_drain_enabled", connection_drain_enabled)
        pulumi.set(__self__, "connection_drain_timeout", connection_drain_timeout)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "healthmonitor_id", healthmonitor_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "lb_method", lb_method)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "loadbalancers", loadbalancers)
        pulumi.set(__self__, "member_deletion_protection_enable", member_deletion_protection_enable)
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "minimum_healthy_member_count", minimum_healthy_member_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "persistences", persistences)
        pulumi.set(__self__, "protection_reason", protection_reason)
        pulumi.set(__self__, "protection_status", protection_status)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "public_border_group", public_border_group)
        pulumi.set(__self__, "quic_cid_hash_strategies", quic_cid_hash_strategies)
        pulumi.set(__self__, "slow_start_duration", slow_start_duration)
        pulumi.set(__self__, "slow_start_enabled", slow_start_enabled)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="anyPortEnable")
    def any_port_enable(self) -> _builtins.bool:
        return pulumi.get(self, "any_port_enable")

    @_builtins.property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> _builtins.bool:
        """
        Whether to enable delayed logout.
        """
        return pulumi.get(self, "connection_drain_enabled")

    @_builtins.property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> _builtins.int:
        """
        The timeout of the delayed logout in seconds.
        """
        return pulumi.get(self, "connection_drain_timeout")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the ELB pool.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="healthmonitorId")
    def healthmonitor_id(self) -> _builtins.str:
        """
        Specifies the health monitor ID of the ELB pool.
        """
        return pulumi.get(self, "healthmonitor_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.str:
        """
        The IP version of the LB pool.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter(name="lbMethod")
    def lb_method(self) -> _builtins.str:
        """
        Specifies the method of the ELB pool. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS,
        or SOURCE_IP.
        """
        return pulumi.get(self, "lb_method")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetElbPoolsPoolListenerResult']:
        """
        The listener list. The object structure is documented below.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter
    def loadbalancers(self) -> Sequence['outputs.GetElbPoolsPoolLoadbalancerResult']:
        """
        The loadbalancer list. The object structure is documented below.
        """
        return pulumi.get(self, "loadbalancers")

    @_builtins.property
    @pulumi.getter(name="memberDeletionProtectionEnable")
    def member_deletion_protection_enable(self) -> _builtins.bool:
        return pulumi.get(self, "member_deletion_protection_enable")

    @_builtins.property
    @pulumi.getter
    def members(self) -> Sequence['outputs.GetElbPoolsPoolMemberResult']:
        """
        The member list. The object structure is documented below.
        """
        return pulumi.get(self, "members")

    @_builtins.property
    @pulumi.getter(name="minimumHealthyMemberCount")
    def minimum_healthy_member_count(self) -> _builtins.int:
        """
        The timeout of the delayed logout in seconds.
        """
        return pulumi.get(self, "minimum_healthy_member_count")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the ELB pool.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def persistences(self) -> Sequence['outputs.GetElbPoolsPoolPersistenceResult']:
        """
        Indicates whether connections in the same session will be processed by the same pool member or not.
        The object structure is documented below.
        """
        return pulumi.get(self, "persistences")

    @_builtins.property
    @pulumi.getter(name="protectionReason")
    def protection_reason(self) -> _builtins.str:
        """
        The reason for update protection.
        """
        return pulumi.get(self, "protection_reason")

    @_builtins.property
    @pulumi.getter(name="protectionStatus")
    def protection_status(self) -> _builtins.str:
        """
        The protection status for update.
        """
        return pulumi.get(self, "protection_status")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        Specifies the protocol of the ELB pool. This can either be TCP, UDP or HTTP.
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="publicBorderGroup")
    def public_border_group(self) -> _builtins.str:
        return pulumi.get(self, "public_border_group")

    @_builtins.property
    @pulumi.getter(name="quicCidHashStrategies")
    def quic_cid_hash_strategies(self) -> Sequence['outputs.GetElbPoolsPoolQuicCidHashStrategyResult']:
        return pulumi.get(self, "quic_cid_hash_strategies")

    @_builtins.property
    @pulumi.getter(name="slowStartDuration")
    def slow_start_duration(self) -> _builtins.int:
        """
        The slow start duration, in seconds.
        """
        return pulumi.get(self, "slow_start_duration")

    @_builtins.property
    @pulumi.getter(name="slowStartEnabled")
    def slow_start_enabled(self) -> _builtins.bool:
        """
        Whether to enable slow start.
        """
        return pulumi.get(self, "slow_start_enabled")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of persistence mode.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC where the backend server group works.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetElbPoolsPoolListenerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetElbPoolsPoolLoadbalancerResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetElbPoolsPoolMemberResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str):
        """
        :param _builtins.str id: The listener, loadbalancer or member ID.
        """
        pulumi.set(__self__, "id", id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The listener, loadbalancer or member ID.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetElbPoolsPoolPersistenceResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 timeout: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str cookie_name: The name of the cookie if persistence mode is set appropriately.
        :param _builtins.int timeout: The stickiness duration, in minutes.
        :param _builtins.str type: The type of persistence mode.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The name of the cookie if persistence mode is set appropriately.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The stickiness duration, in minutes.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of persistence mode.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetElbPoolsPoolQuicCidHashStrategyResult(dict):
    def __init__(__self__, *,
                 len: _builtins.int,
                 offset: _builtins.int):
        pulumi.set(__self__, "len", len)
        pulumi.set(__self__, "offset", offset)

    @_builtins.property
    @pulumi.getter
    def len(self) -> _builtins.int:
        return pulumi.get(self, "len")

    @_builtins.property
    @pulumi.getter
    def offset(self) -> _builtins.int:
        return pulumi.get(self, "offset")


@pulumi.output_type
class GetFgsApplicationTemplatesTemplateResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 runtime: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str category: Specifies the category used to query the application templates.
        :param _builtins.str description: The description of template.
        :param _builtins.str id: The template ID.
        :param _builtins.str name: The template name.
        :param _builtins.str runtime: Specifies the runtime name used to query the application templates.  
               The valid values are as follows:
               + **Node.js6.10**
               + **Node.js8.10**
               + **Node.js10.16**
               + **Node.js12.13**
               + **Node.js14.18**
               + **Node.js16.17**
               + **Node.js18.15**
               + **Python2.7**
               + **Python3.6**
               + **Python3.9**
               + **Python3.10**
               + **Java8**
               + **Java11**
               + **Go1.x**
               + **C#(.NET Core 2.1)**
               + **C#(.NET Core 3.1)**
               + **http**
               + **PHP7.3**
               + **Custom**
        :param _builtins.str type: The type of the function application.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        """
        Specifies the category used to query the application templates.
        """
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of template.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The template ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The template name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        Specifies the runtime name used to query the application templates.  
        The valid values are as follows:
        + **Node.js6.10**
        + **Node.js8.10**
        + **Node.js10.16**
        + **Node.js12.13**
        + **Node.js14.18**
        + **Node.js16.17**
        + **Node.js18.15**
        + **Python2.7**
        + **Python3.6**
        + **Python3.9**
        + **Python3.10**
        + **Java8**
        + **Java11**
        + **Go1.x**
        + **C#(.NET Core 2.1)**
        + **C#(.NET Core 3.1)**
        + **http**
        + **PHP7.3**
        + **Custom**
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the function application.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetFgsApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str description: Specifies the description of the application to be queried.
        :param _builtins.str id: The ID of application.
        :param _builtins.str name: Specifies the application name used to query specified application.
        :param _builtins.str status: Specifies the status of the application to be queried.  
               The valid values are as follows:
               + **success**: The application created successfully.
               + **repoFail**: The application repository creation failed.
        :param _builtins.str updated_at: The latest update time of the application, in RFC3339 format.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Specifies the description of the application to be queried.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of application.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the application name used to query specified application.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the application to be queried.  
        The valid values are as follows:
        + **success**: The application created successfully.
        + **repoFail**: The application repository creation failed.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the application, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetFgsDependencyVersionsVersionResult(dict):
    def __init__(__self__, *,
                 dependency_id: _builtins.str,
                 dependency_name: _builtins.str,
                 description: _builtins.str,
                 etag: _builtins.str,
                 id: _builtins.str,
                 link: _builtins.str,
                 owner: _builtins.str,
                 runtime: _builtins.str,
                 size: _builtins.int,
                 version: _builtins.int):
        """
        :param _builtins.str dependency_id: Specifies the ID of the dependency package to which the versions belong.
        :param _builtins.str dependency_name: The name of the dependency package corresponding to the version.
        :param _builtins.str description: The description of the dependency package version.
        :param _builtins.str etag: The unique ID of the dependency.
        :param _builtins.str id: The ID of the dependency package version.
        :param _builtins.str link: The OBS bucket path where the dependency package version is located.
        :param _builtins.str owner: The dependency owner, `public` indicates a public dependency.
        :param _builtins.str runtime: Specifies the runtime of the dependency package version.  
               The valid values are as follows:
               + **Java8**
               + **Java11**
               + **Node.js6.10**
               + **Node.js8.10**
               + **Node.js10.16**
               + **Node.js12.13**
               + **Node.js14.18**
               + **Python2.7**
               + **Python3.6**
               + **Python3.9**
               + **Go1.8**
               + **Go1.x**
               + **C#(.NET Core 2.0)**
               + **C#(.NET Core 2.1)**
               + **C#(.NET Core 3.1)**
               + **Custom**
               + **PHP 7.3**
               + **http**
        :param _builtins.int size: The size of the ZIP file used by the dependency package version, in bytes.
        :param _builtins.int version: Specifies the version of the dependency package.
        """
        pulumi.set(__self__, "dependency_id", dependency_id)
        pulumi.set(__self__, "dependency_name", dependency_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "link", link)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="dependencyId")
    def dependency_id(self) -> _builtins.str:
        """
        Specifies the ID of the dependency package to which the versions belong.
        """
        return pulumi.get(self, "dependency_id")

    @_builtins.property
    @pulumi.getter(name="dependencyName")
    def dependency_name(self) -> _builtins.str:
        """
        The name of the dependency package corresponding to the version.
        """
        return pulumi.get(self, "dependency_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the dependency package version.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def etag(self) -> _builtins.str:
        """
        The unique ID of the dependency.
        """
        return pulumi.get(self, "etag")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the dependency package version.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def link(self) -> _builtins.str:
        """
        The OBS bucket path where the dependency package version is located.
        """
        return pulumi.get(self, "link")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        The dependency owner, `public` indicates a public dependency.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        Specifies the runtime of the dependency package version.  
        The valid values are as follows:
        + **Java8**
        + **Java11**
        + **Node.js6.10**
        + **Node.js8.10**
        + **Node.js10.16**
        + **Node.js12.13**
        + **Node.js14.18**
        + **Python2.7**
        + **Python3.6**
        + **Python3.9**
        + **Go1.8**
        + **Go1.x**
        + **C#(.NET Core 2.0)**
        + **C#(.NET Core 2.1)**
        + **C#(.NET Core 3.1)**
        + **Custom**
        + **PHP 7.3**
        + **http**
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the ZIP file used by the dependency package version, in bytes.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.int:
        """
        Specifies the version of the dependency package.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetFgsFunctionEventsEventResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str id: The event ID.
        :param _builtins.str name: The event name.
        :param _builtins.str updated_at: The latest update time of the function event, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The event ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The event name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the function event, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetFgsFunctionTriggersTriggerResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 event_data: _builtins.str,
                 id: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the function trigger, in RFC3339 format.
        :param _builtins.str event_data: The detailed configuration of the function trigger.
        :param _builtins.str id: The ID of the function trigger.
        :param _builtins.str status: Specifies status of the function trigger.
               The valid values are as follows:
               + **ACTIVE**
               + **DISABLED**
        :param _builtins.str type: Specifies type of the function trigger.
               The valid values are as follows:
               + **TIMER**
               + **APIG**
               + **CTS**
               + **DDS**
               + **DMS**
               + **DIS**
               + **LTS**
               + **OBS**
               + **SMN**
               + **KAFKA**
               + **RABBITMQ**
               + **DEDICATEDGATEWAY**
               + **OPENSOURCEKAFKA**
               + **APIC**
               + **GAUSSMONGO**
               + **EVENTGRID**
               + **IOTDA**
        :param _builtins.str updated_at: The latest update time of the function trigger, in RFC3339 format.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "event_data", event_data)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the function trigger, in RFC3339 format.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="eventData")
    def event_data(self) -> _builtins.str:
        """
        The detailed configuration of the function trigger.
        """
        return pulumi.get(self, "event_data")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the function trigger.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies status of the function trigger.
        The valid values are as follows:
        + **ACTIVE**
        + **DISABLED**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Specifies type of the function trigger.
        The valid values are as follows:
        + **TIMER**
        + **APIG**
        + **CTS**
        + **DDS**
        + **DMS**
        + **DIS**
        + **LTS**
        + **OBS**
        + **SMN**
        + **KAFKA**
        + **RABBITMQ**
        + **DEDICATEDGATEWAY**
        + **OPENSOURCEKAFKA**
        + **APIC**
        + **GAUSSMONGO**
        + **EVENTGRID**
        + **IOTDA**
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The latest update time of the function trigger, in RFC3339 format.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetFgsFunctionsFunctionResult(dict):
    def __init__(__self__, *,
                 agency: _builtins.str,
                 app_agency: _builtins.str,
                 code_filename: _builtins.str,
                 code_type: _builtins.str,
                 code_url: _builtins.str,
                 description: _builtins.str,
                 encrypted_user_data: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 functiongraph_version: _builtins.str,
                 handler: _builtins.str,
                 initializer_handler: _builtins.str,
                 initializer_timeout: _builtins.int,
                 log_group_id: _builtins.str,
                 log_stream_id: _builtins.str,
                 max_instance_num: _builtins.str,
                 memory_size: _builtins.int,
                 name: _builtins.str,
                 network_id: _builtins.str,
                 package: _builtins.str,
                 runtime: _builtins.str,
                 timeout: _builtins.int,
                 urn: _builtins.str,
                 user_data: _builtins.str,
                 version: _builtins.str,
                 vpc_id: _builtins.str):
        """
        :param _builtins.str agency: The IAM agency name for the function configuration.
        :param _builtins.str app_agency: The IAM agency name for the function execution.
        :param _builtins.str code_filename: The name of the function file.
        :param _builtins.str code_type: The function code type.
               + **inline**: inline code.
               + **zip**: ZIP file.
               + **jar**: JAR file or java functions.
               + **obs**: function code stored in an OBS bucket.
        :param _builtins.str code_url: The code URL.
        :param _builtins.str description: The description of the function.
        :param _builtins.str encrypted_user_data: The custom user data (key/value pairs) defined to be encrypted for the function.
        :param _builtins.str enterprise_project_id: Specifies the ID of the enterprise project to which the functions belong.
        :param _builtins.str functiongraph_version: The functionGraph version.
        :param _builtins.str handler: The entry point of the function.
        :param _builtins.str initializer_handler: The initializer of the function.
        :param _builtins.int initializer_timeout: The maximum duration the function can be initialized.
        :param _builtins.str log_group_id: The LTS log group ID.
        :param _builtins.str log_stream_id: The LTS log stream ID.
        :param _builtins.str max_instance_num: The maximum number of instances for a single function.
        :param _builtins.int memory_size: The memory size allocated to the function, the unit is MB.
        :param _builtins.str name: Specifies the function name used to query the specified function.
        :param _builtins.str network_id: The network ID of subnet to which the function belongs.
        :param _builtins.str package: The package name that the function used.
        :param _builtins.str runtime: Specifies the dependency package runtime used to query the functions.  
               The valid values are as follows:
               + **Java8**
               + **Java11**
               + **Node.js6.10**
               + **Node.js8.10**
               + **Node.js10.16**
               + **Node.js12.13**
               + **Node.js14.18**
               + **Node.js16.17**
               + **Node.js18.15**
               + **Python2.7**
               + **Python3.6**
               + **Python3.9**
               + **Python3.10**
               + **Go1.x**
               + **C#(.NET Core 2.1)**
               + **C#(.NET Core 3.1)**
               + **Custom**
               + **PHP7.3**
               + **http**
               + **Custom Image**
               + **Cangjie1.0**
        :param _builtins.int timeout: The timeout interval of the function.
        :param _builtins.str urn: Specifies the function URN used to query the specified function.
        :param _builtins.str user_data: The custom user data (key/value pairs) defined for the function.
        :param _builtins.str version: The function version.
        :param _builtins.str vpc_id: The VPC ID to which the function belongs.
        """
        pulumi.set(__self__, "agency", agency)
        pulumi.set(__self__, "app_agency", app_agency)
        pulumi.set(__self__, "code_filename", code_filename)
        pulumi.set(__self__, "code_type", code_type)
        pulumi.set(__self__, "code_url", code_url)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "encrypted_user_data", encrypted_user_data)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "functiongraph_version", functiongraph_version)
        pulumi.set(__self__, "handler", handler)
        pulumi.set(__self__, "initializer_handler", initializer_handler)
        pulumi.set(__self__, "initializer_timeout", initializer_timeout)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "log_stream_id", log_stream_id)
        pulumi.set(__self__, "max_instance_num", max_instance_num)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "package", package)
        pulumi.set(__self__, "runtime", runtime)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "urn", urn)
        pulumi.set(__self__, "user_data", user_data)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def agency(self) -> _builtins.str:
        """
        The IAM agency name for the function configuration.
        """
        return pulumi.get(self, "agency")

    @_builtins.property
    @pulumi.getter(name="appAgency")
    def app_agency(self) -> _builtins.str:
        """
        The IAM agency name for the function execution.
        """
        return pulumi.get(self, "app_agency")

    @_builtins.property
    @pulumi.getter(name="codeFilename")
    def code_filename(self) -> _builtins.str:
        """
        The name of the function file.
        """
        return pulumi.get(self, "code_filename")

    @_builtins.property
    @pulumi.getter(name="codeType")
    def code_type(self) -> _builtins.str:
        """
        The function code type.
        + **inline**: inline code.
        + **zip**: ZIP file.
        + **jar**: JAR file or java functions.
        + **obs**: function code stored in an OBS bucket.
        """
        return pulumi.get(self, "code_type")

    @_builtins.property
    @pulumi.getter(name="codeUrl")
    def code_url(self) -> _builtins.str:
        """
        The code URL.
        """
        return pulumi.get(self, "code_url")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the function.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="encryptedUserData")
    def encrypted_user_data(self) -> _builtins.str:
        """
        The custom user data (key/value pairs) defined to be encrypted for the function.
        """
        return pulumi.get(self, "encrypted_user_data")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the ID of the enterprise project to which the functions belong.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="functiongraphVersion")
    def functiongraph_version(self) -> _builtins.str:
        """
        The functionGraph version.
        """
        return pulumi.get(self, "functiongraph_version")

    @_builtins.property
    @pulumi.getter
    def handler(self) -> _builtins.str:
        """
        The entry point of the function.
        """
        return pulumi.get(self, "handler")

    @_builtins.property
    @pulumi.getter(name="initializerHandler")
    def initializer_handler(self) -> _builtins.str:
        """
        The initializer of the function.
        """
        return pulumi.get(self, "initializer_handler")

    @_builtins.property
    @pulumi.getter(name="initializerTimeout")
    def initializer_timeout(self) -> _builtins.int:
        """
        The maximum duration the function can be initialized.
        """
        return pulumi.get(self, "initializer_timeout")

    @_builtins.property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> _builtins.str:
        """
        The LTS log group ID.
        """
        return pulumi.get(self, "log_group_id")

    @_builtins.property
    @pulumi.getter(name="logStreamId")
    def log_stream_id(self) -> _builtins.str:
        """
        The LTS log stream ID.
        """
        return pulumi.get(self, "log_stream_id")

    @_builtins.property
    @pulumi.getter(name="maxInstanceNum")
    def max_instance_num(self) -> _builtins.str:
        """
        The maximum number of instances for a single function.
        """
        return pulumi.get(self, "max_instance_num")

    @_builtins.property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> _builtins.int:
        """
        The memory size allocated to the function, the unit is MB.
        """
        return pulumi.get(self, "memory_size")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the function name used to query the specified function.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        The network ID of subnet to which the function belongs.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def package(self) -> _builtins.str:
        """
        The package name that the function used.
        """
        return pulumi.get(self, "package")

    @_builtins.property
    @pulumi.getter
    def runtime(self) -> _builtins.str:
        """
        Specifies the dependency package runtime used to query the functions.  
        The valid values are as follows:
        + **Java8**
        + **Java11**
        + **Node.js6.10**
        + **Node.js8.10**
        + **Node.js10.16**
        + **Node.js12.13**
        + **Node.js14.18**
        + **Node.js16.17**
        + **Node.js18.15**
        + **Python2.7**
        + **Python3.6**
        + **Python3.9**
        + **Python3.10**
        + **Go1.x**
        + **C#(.NET Core 2.1)**
        + **C#(.NET Core 3.1)**
        + **Custom**
        + **PHP7.3**
        + **http**
        + **Custom Image**
        + **Cangjie1.0**
        """
        return pulumi.get(self, "runtime")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The timeout interval of the function.
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter
    def urn(self) -> _builtins.str:
        """
        Specifies the function URN used to query the specified function.
        """
        return pulumi.get(self, "urn")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> _builtins.str:
        """
        The custom user data (key/value pairs) defined for the function.
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter
    def version(self) -> _builtins.str:
        """
        The function version.
        """
        return pulumi.get(self, "version")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The VPC ID to which the function belongs.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetFgsQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 limit: _builtins.int,
                 type: _builtins.str,
                 unit: _builtins.str,
                 used: _builtins.int):
        """
        :param _builtins.int limit: The number of available quota.
        :param _builtins.str type: The resource type corresponding to quota.
               + **fgs_func_scale_down_timeout**: Release time of idle function instances in FunctionGraph `v1`.
               + **fgs_func_occurs**: Indicates instance quota for functions in FunctionGraph `v1` and reserved instance quota for
               functions in FunctionGraph `v2`.
               + **fgs_func_pat_idle_time**: Release time of idle PAT in VPC function.
               + **fgs_func_num**: User function quantity quota.
               + **fgs_func_code_size**: Total code size quota of user functions.
               + **fgs_workflow_num**: Function flow quantity quota.
               + **fgs_on_demand_instance_limit**: Maximum number of instances per function in FunctionGraph `v2`.
               + **fgs_func_qos_limit**: Instance quantity quota of user functions.
        :param _builtins.str unit: The unit of usage.
        :param _builtins.int used: The number of quota used.
        """
        pulumi.set(__self__, "limit", limit)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "used", used)

    @_builtins.property
    @pulumi.getter
    def limit(self) -> _builtins.int:
        """
        The number of available quota.
        """
        return pulumi.get(self, "limit")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The resource type corresponding to quota.
        + **fgs_func_scale_down_timeout**: Release time of idle function instances in FunctionGraph `v1`.
        + **fgs_func_occurs**: Indicates instance quota for functions in FunctionGraph `v1` and reserved instance quota for
        functions in FunctionGraph `v2`.
        + **fgs_func_pat_idle_time**: Release time of idle PAT in VPC function.
        + **fgs_func_num**: User function quantity quota.
        + **fgs_func_code_size**: Total code size quota of user functions.
        + **fgs_workflow_num**: Function flow quantity quota.
        + **fgs_on_demand_instance_limit**: Maximum number of instances per function in FunctionGraph `v2`.
        + **fgs_func_qos_limit**: Instance quantity quota of user functions.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        The unit of usage.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter
    def used(self) -> _builtins.int:
        """
        The number of quota used.
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetKpsFailedTasksTaskResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 keypair_name: _builtins.str,
                 operate_type: _builtins.str,
                 server_id: _builtins.str,
                 server_name: _builtins.str,
                 task_error_code: _builtins.str,
                 task_error_msg: _builtins.str,
                 task_time: _builtins.str):
        """
        :param _builtins.str id: The ID of the task.
        :param _builtins.str keypair_name: The name of the keypair associated with the task.
        :param _builtins.str operate_type: The operation type of the task.
               The value can be **FAILED_RESET**, **FAILED_REPLACE** or **FAILED_UNBIND**.
        :param _builtins.str server_id: The ID of the instance associated with the task.
        :param _builtins.str server_name: The name of the instance associated with the task.
        :param _builtins.str task_error_code: The error code of the task execution failure.
        :param _builtins.str task_error_msg: The error information of the task execution failure.
        :param _builtins.str task_time: The start time of the task, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "task_error_code", task_error_code)
        pulumi.set(__self__, "task_error_msg", task_error_msg)
        pulumi.set(__self__, "task_time", task_time)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The name of the keypair associated with the task.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        The operation type of the task.
        The value can be **FAILED_RESET**, **FAILED_REPLACE** or **FAILED_UNBIND**.
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the instance associated with the task.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        The name of the instance associated with the task.
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter(name="taskErrorCode")
    def task_error_code(self) -> _builtins.str:
        """
        The error code of the task execution failure.
        """
        return pulumi.get(self, "task_error_code")

    @_builtins.property
    @pulumi.getter(name="taskErrorMsg")
    def task_error_msg(self) -> _builtins.str:
        """
        The error information of the task execution failure.
        """
        return pulumi.get(self, "task_error_msg")

    @_builtins.property
    @pulumi.getter(name="taskTime")
    def task_time(self) -> _builtins.str:
        """
        The start time of the task, in RFC3339 format.
        """
        return pulumi.get(self, "task_time")


@pulumi.output_type
class GetKpsRunningTasksTaskResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 keypair_name: _builtins.str,
                 operate_type: _builtins.str,
                 server_id: _builtins.str,
                 server_name: _builtins.str,
                 task_time: _builtins.str):
        """
        :param _builtins.str id: The ID of the task.
        :param _builtins.str keypair_name: The name of the keypair associated with the task.
        :param _builtins.str operate_type: The operation type of the task.
               The value can be **RUNNING**.
        :param _builtins.str server_id: The ID of the instance associated with the task.
        :param _builtins.str server_name: The name of the instance associated with the task.
        :param _builtins.str task_time: The start time of the task, in RFC3339 format.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "operate_type", operate_type)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "task_time", task_time)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The name of the keypair associated with the task.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="operateType")
    def operate_type(self) -> _builtins.str:
        """
        The operation type of the task.
        The value can be **RUNNING**.
        """
        return pulumi.get(self, "operate_type")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        The ID of the instance associated with the task.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="serverName")
    def server_name(self) -> _builtins.str:
        """
        The name of the instance associated with the task.
        """
        return pulumi.get(self, "server_name")

    @_builtins.property
    @pulumi.getter(name="taskTime")
    def task_time(self) -> _builtins.str:
        """
        The start time of the task, in RFC3339 format.
        """
        return pulumi.get(self, "task_time")


@pulumi.output_type
class GetSfsTurboDataTasksTaskResult(dict):
    def __init__(__self__, *,
                 dest_prefix: _builtins.str,
                 dest_target: _builtins.str,
                 end_time: _builtins.str,
                 id: _builtins.str,
                 message: _builtins.str,
                 src_prefix: _builtins.str,
                 src_target: _builtins.str,
                 start_time: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str dest_prefix: The destination path prefix of the data task.
        :param _builtins.str dest_target: The target end information of the data task.
        :param _builtins.str end_time: The end time of the data task, in RFC3339 format.
        :param _builtins.str id: The ID of the data task.
        :param _builtins.str message: The data task execution result information.
        :param _builtins.str src_prefix: The source path prefix of the data task.
        :param _builtins.str src_target: The linkage directory name.
        :param _builtins.str start_time: The start time of the data task, in RFC3339 format.
        :param _builtins.str status: The status of the data task.
        :param _builtins.str type: The type of the data task.
        """
        pulumi.set(__self__, "dest_prefix", dest_prefix)
        pulumi.set(__self__, "dest_target", dest_target)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "src_prefix", src_prefix)
        pulumi.set(__self__, "src_target", src_target)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="destPrefix")
    def dest_prefix(self) -> _builtins.str:
        """
        The destination path prefix of the data task.
        """
        return pulumi.get(self, "dest_prefix")

    @_builtins.property
    @pulumi.getter(name="destTarget")
    def dest_target(self) -> _builtins.str:
        """
        The target end information of the data task.
        """
        return pulumi.get(self, "dest_target")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the data task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The data task execution result information.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter(name="srcPrefix")
    def src_prefix(self) -> _builtins.str:
        """
        The source path prefix of the data task.
        """
        return pulumi.get(self, "src_prefix")

    @_builtins.property
    @pulumi.getter(name="srcTarget")
    def src_target(self) -> _builtins.str:
        """
        The linkage directory name.
        """
        return pulumi.get(self, "src_target")

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> _builtins.str:
        """
        The start time of the data task, in RFC3339 format.
        """
        return pulumi.get(self, "start_time")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the data task.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the data task.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSfsTurboDuTasksTaskResult(dict):
    def __init__(__self__, *,
                 begin_time: _builtins.str,
                 dir_usages: Sequence['outputs.GetSfsTurboDuTasksTaskDirUsageResult'],
                 end_time: _builtins.str,
                 id: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str begin_time: The start time of the DU task, in RFC3339 format.
        :param Sequence['GetSfsTurboDuTasksTaskDirUsageArgs'] dir_usages: The resource usages of a directory (including subdirectories).
        :param _builtins.str end_time: The end time of the DU task, in RFC3339 format.
        :param _builtins.str id: The ID of the DU task.
        :param _builtins.str status: The status of the DU task.
        """
        pulumi.set(__self__, "begin_time", begin_time)
        pulumi.set(__self__, "dir_usages", dir_usages)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> _builtins.str:
        """
        The start time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "begin_time")

    @_builtins.property
    @pulumi.getter(name="dirUsages")
    def dir_usages(self) -> Sequence['outputs.GetSfsTurboDuTasksTaskDirUsageResult']:
        """
        The resource usages of a directory (including subdirectories).
        """
        return pulumi.get(self, "dir_usages")

    @_builtins.property
    @pulumi.getter(name="endTime")
    def end_time(self) -> _builtins.str:
        """
        The end time of the DU task, in RFC3339 format.
        """
        return pulumi.get(self, "end_time")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the DU task.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the DU task.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSfsTurboDuTasksTaskDirUsageResult(dict):
    def __init__(__self__, *,
                 file_counts: Sequence['outputs.GetSfsTurboDuTasksTaskDirUsageFileCountResult'],
                 message: _builtins.str,
                 path: _builtins.str,
                 used_capacity: _builtins.int):
        """
        :param Sequence['GetSfsTurboDuTasksTaskDirUsageFileCountArgs'] file_counts: The total number of files in the directory.
        :param _builtins.str message: The error message.
        :param _builtins.str path: The full path to a legal directory in the file system.
        :param _builtins.int used_capacity: The used capacity, in byte.
        """
        pulumi.set(__self__, "file_counts", file_counts)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "used_capacity", used_capacity)

    @_builtins.property
    @pulumi.getter(name="fileCounts")
    def file_counts(self) -> Sequence['outputs.GetSfsTurboDuTasksTaskDirUsageFileCountResult']:
        """
        The total number of files in the directory.
        """
        return pulumi.get(self, "file_counts")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The error message.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The full path to a legal directory in the file system.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="usedCapacity")
    def used_capacity(self) -> _builtins.int:
        """
        The used capacity, in byte.
        """
        return pulumi.get(self, "used_capacity")


@pulumi.output_type
class GetSfsTurboDuTasksTaskDirUsageFileCountResult(dict):
    def __init__(__self__, *,
                 block: _builtins.int,
                 char: _builtins.int,
                 dir: _builtins.int,
                 pipe: _builtins.int,
                 regular: _builtins.int,
                 socket: _builtins.int,
                 symlink: _builtins.int):
        """
        :param _builtins.int block: The number of block devices.
        :param _builtins.int char: The number of character devices.
        :param _builtins.int dir: The number of directories.
        :param _builtins.int pipe: The number of pipe files.
        :param _builtins.int regular: The number of common files.
        :param _builtins.int socket: The number of sockets.
        :param _builtins.int symlink: The number of symbolic links.
        """
        pulumi.set(__self__, "block", block)
        pulumi.set(__self__, "char", char)
        pulumi.set(__self__, "dir", dir)
        pulumi.set(__self__, "pipe", pipe)
        pulumi.set(__self__, "regular", regular)
        pulumi.set(__self__, "socket", socket)
        pulumi.set(__self__, "symlink", symlink)

    @_builtins.property
    @pulumi.getter
    def block(self) -> _builtins.int:
        """
        The number of block devices.
        """
        return pulumi.get(self, "block")

    @_builtins.property
    @pulumi.getter
    def char(self) -> _builtins.int:
        """
        The number of character devices.
        """
        return pulumi.get(self, "char")

    @_builtins.property
    @pulumi.getter
    def dir(self) -> _builtins.int:
        """
        The number of directories.
        """
        return pulumi.get(self, "dir")

    @_builtins.property
    @pulumi.getter
    def pipe(self) -> _builtins.int:
        """
        The number of pipe files.
        """
        return pulumi.get(self, "pipe")

    @_builtins.property
    @pulumi.getter
    def regular(self) -> _builtins.int:
        """
        The number of common files.
        """
        return pulumi.get(self, "regular")

    @_builtins.property
    @pulumi.getter
    def socket(self) -> _builtins.int:
        """
        The number of sockets.
        """
        return pulumi.get(self, "socket")

    @_builtins.property
    @pulumi.getter
    def symlink(self) -> _builtins.int:
        """
        The number of symbolic links.
        """
        return pulumi.get(self, "symlink")


@pulumi.output_type
class GetSfsTurboObsTargetsTargetResult(dict):
    def __init__(__self__, *,
                 created_at: _builtins.str,
                 file_system_path: _builtins.str,
                 id: _builtins.str,
                 obs: Sequence['outputs.GetSfsTurboObsTargetsTargetObResult'],
                 status: _builtins.str):
        """
        :param _builtins.str created_at: The creation time of the OBS target.
        :param _builtins.str file_system_path: The linkage directory name of the OBS target.
        :param _builtins.str id: The ID of the OBS target.
        :param Sequence['GetSfsTurboObsTargetsTargetObArgs'] obs: The detail of the OBS bucket.
        :param _builtins.str status: The status of the OBS target.
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "file_system_path", file_system_path)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "obs", obs)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The creation time of the OBS target.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="fileSystemPath")
    def file_system_path(self) -> _builtins.str:
        """
        The linkage directory name of the OBS target.
        """
        return pulumi.get(self, "file_system_path")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the OBS target.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def obs(self) -> Sequence['outputs.GetSfsTurboObsTargetsTargetObResult']:
        """
        The detail of the OBS bucket.
        """
        return pulumi.get(self, "obs")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the OBS target.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSfsTurboObsTargetsTargetObResult(dict):
    def __init__(__self__, *,
                 bucket: _builtins.str,
                 endpoint: _builtins.str):
        """
        :param _builtins.str bucket: The name of the OBS bucket associated with the OBS target.
        :param _builtins.str endpoint: The domain name of the region where the OBS bucket belongs.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "endpoint", endpoint)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> _builtins.str:
        """
        The name of the OBS bucket associated with the OBS target.
        """
        return pulumi.get(self, "bucket")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The domain name of the region where the OBS bucket belongs.
        """
        return pulumi.get(self, "endpoint")


@pulumi.output_type
class GetSfsTurboPermRulesRuleResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 ip_cidr: _builtins.str,
                 rw_type: _builtins.str,
                 user_type: _builtins.str):
        """
        :param _builtins.str id: The ID of the permission rule.
        :param _builtins.str ip_cidr: The IP address or IP address range of the authorized object.
        :param _builtins.str rw_type: The read and write permission of the authorized object.
        :param _builtins.str user_type: The file system access permission granted to the user of the authorized object.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_cidr", ip_cidr)
        pulumi.set(__self__, "rw_type", rw_type)
        pulumi.set(__self__, "user_type", user_type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the permission rule.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipCidr")
    def ip_cidr(self) -> _builtins.str:
        """
        The IP address or IP address range of the authorized object.
        """
        return pulumi.get(self, "ip_cidr")

    @_builtins.property
    @pulumi.getter(name="rwType")
    def rw_type(self) -> _builtins.str:
        """
        The read and write permission of the authorized object.
        """
        return pulumi.get(self, "rw_type")

    @_builtins.property
    @pulumi.getter(name="userType")
    def user_type(self) -> _builtins.str:
        """
        The file system access permission granted to the user of the authorized object.
        """
        return pulumi.get(self, "user_type")


@pulumi.output_type
class GetVpnConnectionHealthChecksConnectionHealthCheckResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 destination_ip: _builtins.str,
                 id: _builtins.str,
                 proto_type: _builtins.str,
                 source_ip: _builtins.str,
                 status: _builtins.str,
                 type: _builtins.str):
        """
        :param _builtins.str connection_id: Specifies the ID of the VPN connection.
        :param _builtins.str destination_ip: Specifies the destination IP of the VPN connection health check.
        :param _builtins.str id: The ID of the connection health check.
        :param _builtins.str proto_type: The proto type of the connection health check.
        :param _builtins.str source_ip: Specifies the source IP of the VPN connection health check.
        :param _builtins.str status: Specifies the status of the VPN connection health check.
        :param _builtins.str type: The type of the connection health check.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "destination_ip", destination_ip)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "proto_type", proto_type)
        pulumi.set(__self__, "source_ip", source_ip)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        Specifies the ID of the VPN connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="destinationIp")
    def destination_ip(self) -> _builtins.str:
        """
        Specifies the destination IP of the VPN connection health check.
        """
        return pulumi.get(self, "destination_ip")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the connection health check.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="protoType")
    def proto_type(self) -> _builtins.str:
        """
        The proto type of the connection health check.
        """
        return pulumi.get(self, "proto_type")

    @_builtins.property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> _builtins.str:
        """
        Specifies the source IP of the VPN connection health check.
        """
        return pulumi.get(self, "source_ip")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the VPN connection health check.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The type of the connection health check.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetVpnConnectionsConnectionResult(dict):
    def __init__(__self__, *,
                 connection_monitor_id: _builtins.str,
                 created_at: _builtins.str,
                 customer_gateway_id: _builtins.str,
                 enable_nqa: _builtins.bool,
                 enterprise_project_id: _builtins.str,
                 gateway_id: _builtins.str,
                 gateway_ip: _builtins.str,
                 ha_role: _builtins.str,
                 id: _builtins.str,
                 ikepolicies: Sequence['outputs.GetVpnConnectionsConnectionIkepolicyResult'],
                 ipsecpolicies: Sequence['outputs.GetVpnConnectionsConnectionIpsecpolicyResult'],
                 name: _builtins.str,
                 peer_subnets: Sequence[_builtins.str],
                 policy_rules: Sequence['outputs.GetVpnConnectionsConnectionPolicyRuleResult'],
                 status: _builtins.str,
                 tunnel_local_address: _builtins.str,
                 tunnel_peer_address: _builtins.str,
                 updated_at: _builtins.str,
                 vpn_type: _builtins.str):
        """
        :param _builtins.str connection_monitor_id: Indicates the connection monitor ID of the connection.
        :param _builtins.str created_at: The created time.
        :param _builtins.str customer_gateway_id: Indicates the customer gateway ID of the connection.
        :param _builtins.bool enable_nqa: Indicates the enable nqa of the connection.
        :param _builtins.str enterprise_project_id: Indicates the enterprise project ID of the connection.
        :param _builtins.str gateway_id: Specifies the gateway ID of the VPN connection.
        :param _builtins.str gateway_ip: Specifies the gateway IP of the VPN connection.
        :param _builtins.str ha_role: Indicates the ha role of the connection.
        :param _builtins.str id: Indicates the ID of the connection.
        :param Sequence['GetVpnConnectionsConnectionIkepolicyArgs'] ikepolicies: Indicates the ikepolicy information of the connection.
        :param Sequence['GetVpnConnectionsConnectionIpsecpolicyArgs'] ipsecpolicies: Indicates the ipsecpolicy information of the connection.
        :param _builtins.str name: Specifies the name of the VPN connection.
        :param Sequence[_builtins.str] peer_subnets: Indicates the peer subnets of the connection.
        :param Sequence['GetVpnConnectionsConnectionPolicyRuleArgs'] policy_rules: Indicates the policy rules information of the connection.
        :param _builtins.str status: Specifies the status of the VPN connection.
        :param _builtins.str tunnel_local_address: Indicates the tunnel local address of the connection.
        :param _builtins.str tunnel_peer_address: Indicates the tunnel peer address of the connection.
        :param _builtins.str updated_at: The last updated time.
        :param _builtins.str vpn_type: Specifies the VPN type of the VPN connection.
        """
        pulumi.set(__self__, "connection_monitor_id", connection_monitor_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "customer_gateway_id", customer_gateway_id)
        pulumi.set(__self__, "enable_nqa", enable_nqa)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "gateway_ip", gateway_ip)
        pulumi.set(__self__, "ha_role", ha_role)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ikepolicies", ikepolicies)
        pulumi.set(__self__, "ipsecpolicies", ipsecpolicies)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peer_subnets", peer_subnets)
        pulumi.set(__self__, "policy_rules", policy_rules)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tunnel_local_address", tunnel_local_address)
        pulumi.set(__self__, "tunnel_peer_address", tunnel_peer_address)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "vpn_type", vpn_type)

    @_builtins.property
    @pulumi.getter(name="connectionMonitorId")
    def connection_monitor_id(self) -> _builtins.str:
        """
        Indicates the connection monitor ID of the connection.
        """
        return pulumi.get(self, "connection_monitor_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="customerGatewayId")
    def customer_gateway_id(self) -> _builtins.str:
        """
        Indicates the customer gateway ID of the connection.
        """
        return pulumi.get(self, "customer_gateway_id")

    @_builtins.property
    @pulumi.getter(name="enableNqa")
    def enable_nqa(self) -> _builtins.bool:
        """
        Indicates the enable nqa of the connection.
        """
        return pulumi.get(self, "enable_nqa")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Indicates the enterprise project ID of the connection.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        Specifies the gateway ID of the VPN connection.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> _builtins.str:
        """
        Specifies the gateway IP of the VPN connection.
        """
        return pulumi.get(self, "gateway_ip")

    @_builtins.property
    @pulumi.getter(name="haRole")
    def ha_role(self) -> _builtins.str:
        """
        Indicates the ha role of the connection.
        """
        return pulumi.get(self, "ha_role")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the connection.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def ikepolicies(self) -> Sequence['outputs.GetVpnConnectionsConnectionIkepolicyResult']:
        """
        Indicates the ikepolicy information of the connection.
        """
        return pulumi.get(self, "ikepolicies")

    @_builtins.property
    @pulumi.getter
    def ipsecpolicies(self) -> Sequence['outputs.GetVpnConnectionsConnectionIpsecpolicyResult']:
        """
        Indicates the ipsecpolicy information of the connection.
        """
        return pulumi.get(self, "ipsecpolicies")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the VPN connection.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="peerSubnets")
    def peer_subnets(self) -> Sequence[_builtins.str]:
        """
        Indicates the peer subnets of the connection.
        """
        return pulumi.get(self, "peer_subnets")

    @_builtins.property
    @pulumi.getter(name="policyRules")
    def policy_rules(self) -> Sequence['outputs.GetVpnConnectionsConnectionPolicyRuleResult']:
        """
        Indicates the policy rules information of the connection.
        """
        return pulumi.get(self, "policy_rules")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the status of the VPN connection.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="tunnelLocalAddress")
    def tunnel_local_address(self) -> _builtins.str:
        """
        Indicates the tunnel local address of the connection.
        """
        return pulumi.get(self, "tunnel_local_address")

    @_builtins.property
    @pulumi.getter(name="tunnelPeerAddress")
    def tunnel_peer_address(self) -> _builtins.str:
        """
        Indicates the tunnel peer address of the connection.
        """
        return pulumi.get(self, "tunnel_peer_address")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The last updated time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="vpnType")
    def vpn_type(self) -> _builtins.str:
        """
        Specifies the VPN type of the VPN connection.
        """
        return pulumi.get(self, "vpn_type")


@pulumi.output_type
class GetVpnConnectionsConnectionIkepolicyResult(dict):
    def __init__(__self__, *,
                 authentication_algorithm: _builtins.str,
                 authentication_method: _builtins.str,
                 dh_group: _builtins.str,
                 dpds: Sequence['outputs.GetVpnConnectionsConnectionIkepolicyDpdResult'],
                 encryption_algorithm: _builtins.str,
                 ike_version: _builtins.str,
                 lifetime_seconds: _builtins.int,
                 local_id: _builtins.str,
                 local_id_type: _builtins.str,
                 peer_id: _builtins.str,
                 peer_id_type: _builtins.str,
                 phase1_negotiation_mode: _builtins.str):
        """
        :param _builtins.str authentication_algorithm: Indicates the authentication algorithm of the ikepolicy certificate.
        :param _builtins.str authentication_method: Indicates the souauthentication methodrce of the ikepolicy certificate.
        :param _builtins.str dh_group: Indicates the dh group of the ikepolicy certificate.
        :param Sequence['GetVpnConnectionsConnectionIkepolicyDpdArgs'] dpds: Indicates the dpd information of the ikepolicy certificate.
        :param _builtins.str encryption_algorithm: Indicates the encryption algorithm of the ikepolicy certificate.
        :param _builtins.str ike_version: Indicates the ike version of the ikepolicy certificate.
        :param _builtins.int lifetime_seconds: Indicates the lifetime seconds of the ipsecpolicy certificate.
        :param _builtins.str local_id: Indicates the local ID of the ikepolicy certificate.
        :param _builtins.str local_id_type: Indicates the local ID type of the ikepolicy certificate.
        :param _builtins.str peer_id: Indicates the peer ID of the ikepolicy certificate.
        :param _builtins.str peer_id_type: Indicates the peer ID type of the ikepolicy certificate.
        :param _builtins.str phase1_negotiation_mode: Indicates the phase1 negotiation mode of the ikepolicy certificate.
        """
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        pulumi.set(__self__, "authentication_method", authentication_method)
        pulumi.set(__self__, "dh_group", dh_group)
        pulumi.set(__self__, "dpds", dpds)
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "ike_version", ike_version)
        pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        pulumi.set(__self__, "local_id", local_id)
        pulumi.set(__self__, "local_id_type", local_id_type)
        pulumi.set(__self__, "peer_id", peer_id)
        pulumi.set(__self__, "peer_id_type", peer_id_type)
        pulumi.set(__self__, "phase1_negotiation_mode", phase1_negotiation_mode)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> _builtins.str:
        """
        Indicates the authentication algorithm of the ikepolicy certificate.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> _builtins.str:
        """
        Indicates the souauthentication methodrce of the ikepolicy certificate.
        """
        return pulumi.get(self, "authentication_method")

    @_builtins.property
    @pulumi.getter(name="dhGroup")
    def dh_group(self) -> _builtins.str:
        """
        Indicates the dh group of the ikepolicy certificate.
        """
        return pulumi.get(self, "dh_group")

    @_builtins.property
    @pulumi.getter
    def dpds(self) -> Sequence['outputs.GetVpnConnectionsConnectionIkepolicyDpdResult']:
        """
        Indicates the dpd information of the ikepolicy certificate.
        """
        return pulumi.get(self, "dpds")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> _builtins.str:
        """
        Indicates the encryption algorithm of the ikepolicy certificate.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="ikeVersion")
    def ike_version(self) -> _builtins.str:
        """
        Indicates the ike version of the ikepolicy certificate.
        """
        return pulumi.get(self, "ike_version")

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> _builtins.int:
        """
        Indicates the lifetime seconds of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "lifetime_seconds")

    @_builtins.property
    @pulumi.getter(name="localId")
    def local_id(self) -> _builtins.str:
        """
        Indicates the local ID of the ikepolicy certificate.
        """
        return pulumi.get(self, "local_id")

    @_builtins.property
    @pulumi.getter(name="localIdType")
    def local_id_type(self) -> _builtins.str:
        """
        Indicates the local ID type of the ikepolicy certificate.
        """
        return pulumi.get(self, "local_id_type")

    @_builtins.property
    @pulumi.getter(name="peerId")
    def peer_id(self) -> _builtins.str:
        """
        Indicates the peer ID of the ikepolicy certificate.
        """
        return pulumi.get(self, "peer_id")

    @_builtins.property
    @pulumi.getter(name="peerIdType")
    def peer_id_type(self) -> _builtins.str:
        """
        Indicates the peer ID type of the ikepolicy certificate.
        """
        return pulumi.get(self, "peer_id_type")

    @_builtins.property
    @pulumi.getter(name="phase1NegotiationMode")
    def phase1_negotiation_mode(self) -> _builtins.str:
        """
        Indicates the phase1 negotiation mode of the ikepolicy certificate.
        """
        return pulumi.get(self, "phase1_negotiation_mode")


@pulumi.output_type
class GetVpnConnectionsConnectionIkepolicyDpdResult(dict):
    def __init__(__self__, *,
                 interval: _builtins.int,
                 msg: _builtins.str,
                 timeout: _builtins.int):
        """
        :param _builtins.int interval: Indicates the interval of the dpd certificate.
        :param _builtins.str msg: Indicates the msg of the dpd certificate.
        :param _builtins.int timeout: Indicates the timeout of the dpd certificate.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "msg", msg)
        pulumi.set(__self__, "timeout", timeout)

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Indicates the interval of the dpd certificate.
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter
    def msg(self) -> _builtins.str:
        """
        Indicates the msg of the dpd certificate.
        """
        return pulumi.get(self, "msg")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        Indicates the timeout of the dpd certificate.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class GetVpnConnectionsConnectionIpsecpolicyResult(dict):
    def __init__(__self__, *,
                 authentication_algorithm: _builtins.str,
                 encapsulation_mode: _builtins.str,
                 encryption_algorithm: _builtins.str,
                 lifetime_seconds: _builtins.int,
                 pfs: _builtins.str,
                 transform_protocol: _builtins.str):
        """
        :param _builtins.str authentication_algorithm: Indicates the authentication algorithm of the ikepolicy certificate.
        :param _builtins.str encapsulation_mode: Indicates the encapsulation mode of the ipsecpolicy certificate.
        :param _builtins.str encryption_algorithm: Indicates the encryption algorithm of the ikepolicy certificate.
        :param _builtins.int lifetime_seconds: Indicates the lifetime seconds of the ipsecpolicy certificate.
        :param _builtins.str pfs: Indicates the pfs of the ipsecpolicy certificate.
        :param _builtins.str transform_protocol: Indicates the transform protocol of the ipsecpolicy certificate.
        """
        pulumi.set(__self__, "authentication_algorithm", authentication_algorithm)
        pulumi.set(__self__, "encapsulation_mode", encapsulation_mode)
        pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)
        pulumi.set(__self__, "lifetime_seconds", lifetime_seconds)
        pulumi.set(__self__, "pfs", pfs)
        pulumi.set(__self__, "transform_protocol", transform_protocol)

    @_builtins.property
    @pulumi.getter(name="authenticationAlgorithm")
    def authentication_algorithm(self) -> _builtins.str:
        """
        Indicates the authentication algorithm of the ikepolicy certificate.
        """
        return pulumi.get(self, "authentication_algorithm")

    @_builtins.property
    @pulumi.getter(name="encapsulationMode")
    def encapsulation_mode(self) -> _builtins.str:
        """
        Indicates the encapsulation mode of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "encapsulation_mode")

    @_builtins.property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> _builtins.str:
        """
        Indicates the encryption algorithm of the ikepolicy certificate.
        """
        return pulumi.get(self, "encryption_algorithm")

    @_builtins.property
    @pulumi.getter(name="lifetimeSeconds")
    def lifetime_seconds(self) -> _builtins.int:
        """
        Indicates the lifetime seconds of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "lifetime_seconds")

    @_builtins.property
    @pulumi.getter
    def pfs(self) -> _builtins.str:
        """
        Indicates the pfs of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "pfs")

    @_builtins.property
    @pulumi.getter(name="transformProtocol")
    def transform_protocol(self) -> _builtins.str:
        """
        Indicates the transform protocol of the ipsecpolicy certificate.
        """
        return pulumi.get(self, "transform_protocol")


@pulumi.output_type
class GetVpnConnectionsConnectionPolicyRuleResult(dict):
    def __init__(__self__, *,
                 destinations: Sequence[_builtins.str],
                 rule_index: _builtins.int,
                 source: _builtins.str):
        """
        :param Sequence[_builtins.str] destinations: Indicates the destination of the policy rules certificate.
        :param _builtins.int rule_index: Indicates the rule index of the policy rules.
        :param _builtins.str source: Indicates the source of the policy rules certificate.
        """
        pulumi.set(__self__, "destinations", destinations)
        pulumi.set(__self__, "rule_index", rule_index)
        pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def destinations(self) -> Sequence[_builtins.str]:
        """
        Indicates the destination of the policy rules certificate.
        """
        return pulumi.get(self, "destinations")

    @_builtins.property
    @pulumi.getter(name="ruleIndex")
    def rule_index(self) -> _builtins.int:
        """
        Indicates the rule index of the policy rules.
        """
        return pulumi.get(self, "rule_index")

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Indicates the source of the policy rules certificate.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class GetVpnCustomerGatewaysCustomerGatewayResult(dict):
    def __init__(__self__, *,
                 asn: _builtins.int,
                 ca_certificates: Sequence['outputs.GetVpnCustomerGatewaysCustomerGatewayCaCertificateResult'],
                 created_at: _builtins.str,
                 id: _builtins.str,
                 id_type: _builtins.str,
                 id_value: _builtins.str,
                 ip: _builtins.str,
                 name: _builtins.str,
                 route_mode: _builtins.str,
                 updated_at: _builtins.str):
        """
        :param _builtins.int asn: Specifies the BGP ASN number of the customer gateway, only works when the route_mode is
               **bgp**. The value ranges from **1** to **4294967295**.
        :param Sequence['GetVpnCustomerGatewaysCustomerGatewayCaCertificateArgs'] ca_certificates: Indicates the ca certificate information of the customer gateway.
               The ca_certificate structure is documented below.
        :param _builtins.str created_at: The created time.
        :param _builtins.str id: Indicates the ID of the customer gateway.
        :param _builtins.str id_type: Indicates the id_type of the customer gateway.
        :param _builtins.str id_value: Indicates the id_value of the customer gateway.
        :param _builtins.str ip: Specifies the IP address of the customer gateway.
        :param _builtins.str name: Specifies the customer gateway name.
        :param _builtins.str route_mode: Specifies the route mode of the customer gateway. The value can be **static** and **bgp**.
        :param _builtins.str updated_at: The last updated time.
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "ca_certificates", ca_certificates)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "id_type", id_type)
        pulumi.set(__self__, "id_value", id_value)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_mode", route_mode)
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def asn(self) -> _builtins.int:
        """
        Specifies the BGP ASN number of the customer gateway, only works when the route_mode is
        **bgp**. The value ranges from **1** to **4294967295**.
        """
        return pulumi.get(self, "asn")

    @_builtins.property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Sequence['outputs.GetVpnCustomerGatewaysCustomerGatewayCaCertificateResult']:
        """
        Indicates the ca certificate information of the customer gateway.
        The ca_certificate structure is documented below.
        """
        return pulumi.get(self, "ca_certificates")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The created time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        Indicates the ID of the customer gateway.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="idType")
    def id_type(self) -> _builtins.str:
        """
        Indicates the id_type of the customer gateway.
        """
        return pulumi.get(self, "id_type")

    @_builtins.property
    @pulumi.getter(name="idValue")
    def id_value(self) -> _builtins.str:
        """
        Indicates the id_value of the customer gateway.
        """
        return pulumi.get(self, "id_value")

    @_builtins.property
    @pulumi.getter
    def ip(self) -> _builtins.str:
        """
        Specifies the IP address of the customer gateway.
        """
        return pulumi.get(self, "ip")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the customer gateway name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="routeMode")
    def route_mode(self) -> _builtins.str:
        """
        Specifies the route mode of the customer gateway. The value can be **static** and **bgp**.
        """
        return pulumi.get(self, "route_mode")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The last updated time.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetVpnCustomerGatewaysCustomerGatewayCaCertificateResult(dict):
    def __init__(__self__, *,
                 expire_time: _builtins.str,
                 is_updatable: _builtins.bool,
                 issuer: _builtins.str,
                 serial_number: _builtins.str,
                 signature_algorithm: _builtins.str,
                 subject: _builtins.str):
        """
        :param _builtins.str expire_time: Indicates the expire time of the customer gateway certificate.
        :param _builtins.bool is_updatable: Indicates whether the customer gateway certificate is updatable.
        :param _builtins.str issuer: Indicates the issuer of the customer gateway certificate.
        :param _builtins.str serial_number: Indicates the serial number of the customer gateway certificate.
        :param _builtins.str signature_algorithm: Indicates the signature algorithm of the customer gateway certificate.
        :param _builtins.str subject: Indicates the subject of the customer gateway certificate.
        """
        pulumi.set(__self__, "expire_time", expire_time)
        pulumi.set(__self__, "is_updatable", is_updatable)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "signature_algorithm", signature_algorithm)
        pulumi.set(__self__, "subject", subject)

    @_builtins.property
    @pulumi.getter(name="expireTime")
    def expire_time(self) -> _builtins.str:
        """
        Indicates the expire time of the customer gateway certificate.
        """
        return pulumi.get(self, "expire_time")

    @_builtins.property
    @pulumi.getter(name="isUpdatable")
    def is_updatable(self) -> _builtins.bool:
        """
        Indicates whether the customer gateway certificate is updatable.
        """
        return pulumi.get(self, "is_updatable")

    @_builtins.property
    @pulumi.getter
    def issuer(self) -> _builtins.str:
        """
        Indicates the issuer of the customer gateway certificate.
        """
        return pulumi.get(self, "issuer")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        """
        Indicates the serial number of the customer gateway certificate.
        """
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="signatureAlgorithm")
    def signature_algorithm(self) -> _builtins.str:
        """
        Indicates the signature algorithm of the customer gateway certificate.
        """
        return pulumi.get(self, "signature_algorithm")

    @_builtins.property
    @pulumi.getter
    def subject(self) -> _builtins.str:
        """
        Indicates the subject of the customer gateway certificate.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class GetVpnGatewaysGatewayResult(dict):
    def __init__(__self__, *,
                 access_private_ips: Sequence[_builtins.str],
                 access_subnet_id: _builtins.str,
                 access_vpc_id: _builtins.str,
                 attachment_type: _builtins.str,
                 availability_zones: Sequence[_builtins.str],
                 bgp_asn: _builtins.int,
                 connect_subnet: _builtins.str,
                 connection_number: _builtins.int,
                 created_at: _builtins.str,
                 eips: Sequence['outputs.GetVpnGatewaysGatewayEipResult'],
                 enterprise_project_id: _builtins.str,
                 er_attachment_id: _builtins.str,
                 er_id: _builtins.str,
                 flavor: _builtins.str,
                 ha_mode: _builtins.str,
                 id: _builtins.str,
                 local_subnets: Sequence[_builtins.str],
                 name: _builtins.str,
                 network_type: _builtins.str,
                 status: _builtins.str,
                 updated_at: _builtins.str,
                 used_connection_group: _builtins.int,
                 used_connection_number: _builtins.int,
                 vpc_id: _builtins.str):
        """
        :param Sequence[_builtins.str] access_private_ips: The list of private access IPs.
        :param _builtins.str access_subnet_id: The ID of the access subnet.
        :param _builtins.str access_vpc_id: The ID of the access VPC.
        :param _builtins.str attachment_type: Specifies the attachment type of the gateway.
               The value can be: **vpc** and **er**.
        :param Sequence[_builtins.str] availability_zones: The availability zone IDs.
        :param _builtins.int bgp_asn: The ASN number of BGP
        :param _builtins.str connect_subnet: The VPC network segment used by the VPN gateway.
        :param _builtins.int connection_number: The max number of connections.
        :param _builtins.str created_at: The create time.
        :param Sequence['GetVpnGatewaysGatewayEipArgs'] eips: The EIPs used by the fateway.
               The eips structure is documented below.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID of the gateway.
        :param _builtins.str er_attachment_id: The ER attachment ID.
        :param _builtins.str er_id: The ID of the ER to which the VPN gateway is connected.
        :param _builtins.str flavor: The flavor of the VPN gateway.
        :param _builtins.str ha_mode: The HA mode.
               The value can be: **active-active** and **active-standby**.
        :param _builtins.str id: The public IP ID.
        :param Sequence[_builtins.str] local_subnets: The local subnets.
        :param _builtins.str name: Specifies the name of the gateway.
        :param _builtins.str network_type: Specifies the network type of the gateway.
               The value can be: **public** and **private**.
        :param _builtins.str status: The status of the gateway.
        :param _builtins.str updated_at: The update time.
        :param _builtins.int used_connection_group: The number of used connection groups.
        :param _builtins.int used_connection_number: The number of used connections.
        :param _builtins.str vpc_id: The ID of the VPC to which the VPN gateway is connected.
        """
        pulumi.set(__self__, "access_private_ips", access_private_ips)
        pulumi.set(__self__, "access_subnet_id", access_subnet_id)
        pulumi.set(__self__, "access_vpc_id", access_vpc_id)
        pulumi.set(__self__, "attachment_type", attachment_type)
        pulumi.set(__self__, "availability_zones", availability_zones)
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "connect_subnet", connect_subnet)
        pulumi.set(__self__, "connection_number", connection_number)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "eips", eips)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "er_attachment_id", er_attachment_id)
        pulumi.set(__self__, "er_id", er_id)
        pulumi.set(__self__, "flavor", flavor)
        pulumi.set(__self__, "ha_mode", ha_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_subnets", local_subnets)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_type", network_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "updated_at", updated_at)
        pulumi.set(__self__, "used_connection_group", used_connection_group)
        pulumi.set(__self__, "used_connection_number", used_connection_number)
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter(name="accessPrivateIps")
    def access_private_ips(self) -> Sequence[_builtins.str]:
        """
        The list of private access IPs.
        """
        return pulumi.get(self, "access_private_ips")

    @_builtins.property
    @pulumi.getter(name="accessSubnetId")
    def access_subnet_id(self) -> _builtins.str:
        """
        The ID of the access subnet.
        """
        return pulumi.get(self, "access_subnet_id")

    @_builtins.property
    @pulumi.getter(name="accessVpcId")
    def access_vpc_id(self) -> _builtins.str:
        """
        The ID of the access VPC.
        """
        return pulumi.get(self, "access_vpc_id")

    @_builtins.property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> _builtins.str:
        """
        Specifies the attachment type of the gateway.
        The value can be: **vpc** and **er**.
        """
        return pulumi.get(self, "attachment_type")

    @_builtins.property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[_builtins.str]:
        """
        The availability zone IDs.
        """
        return pulumi.get(self, "availability_zones")

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> _builtins.int:
        """
        The ASN number of BGP
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="connectSubnet")
    def connect_subnet(self) -> _builtins.str:
        """
        The VPC network segment used by the VPN gateway.
        """
        return pulumi.get(self, "connect_subnet")

    @_builtins.property
    @pulumi.getter(name="connectionNumber")
    def connection_number(self) -> _builtins.int:
        """
        The max number of connections.
        """
        return pulumi.get(self, "connection_number")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        The create time.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def eips(self) -> Sequence['outputs.GetVpnGatewaysGatewayEipResult']:
        """
        The EIPs used by the fateway.
        The eips structure is documented below.
        """
        return pulumi.get(self, "eips")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID of the gateway.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter(name="erAttachmentId")
    def er_attachment_id(self) -> _builtins.str:
        """
        The ER attachment ID.
        """
        return pulumi.get(self, "er_attachment_id")

    @_builtins.property
    @pulumi.getter(name="erId")
    def er_id(self) -> _builtins.str:
        """
        The ID of the ER to which the VPN gateway is connected.
        """
        return pulumi.get(self, "er_id")

    @_builtins.property
    @pulumi.getter
    def flavor(self) -> _builtins.str:
        """
        The flavor of the VPN gateway.
        """
        return pulumi.get(self, "flavor")

    @_builtins.property
    @pulumi.getter(name="haMode")
    def ha_mode(self) -> _builtins.str:
        """
        The HA mode.
        The value can be: **active-active** and **active-standby**.
        """
        return pulumi.get(self, "ha_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="localSubnets")
    def local_subnets(self) -> Sequence[_builtins.str]:
        """
        The local subnets.
        """
        return pulumi.get(self, "local_subnets")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Specifies the name of the gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> _builtins.str:
        """
        Specifies the network type of the gateway.
        The value can be: **public** and **private**.
        """
        return pulumi.get(self, "network_type")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        The status of the gateway.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        """
        The update time.
        """
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="usedConnectionGroup")
    def used_connection_group(self) -> _builtins.int:
        """
        The number of used connection groups.
        """
        return pulumi.get(self, "used_connection_group")

    @_builtins.property
    @pulumi.getter(name="usedConnectionNumber")
    def used_connection_number(self) -> _builtins.int:
        """
        The number of used connections.
        """
        return pulumi.get(self, "used_connection_number")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        """
        The ID of the VPC to which the VPN gateway is connected.
        """
        return pulumi.get(self, "vpc_id")


@pulumi.output_type
class GetVpnGatewaysGatewayEipResult(dict):
    def __init__(__self__, *,
                 bandwidth_billing_info: _builtins.str,
                 bandwidth_id: _builtins.str,
                 bandwidth_name: _builtins.str,
                 bandwidth_size: _builtins.int,
                 billing_info: _builtins.str,
                 charge_mode: _builtins.str,
                 id: _builtins.str,
                 ip_address: _builtins.str,
                 ip_version: _builtins.int,
                 type: _builtins.str):
        """
        :param _builtins.str bandwidth_billing_info: The bandwidth billing info.
        :param _builtins.str bandwidth_id: The bandwidth ID.
        :param _builtins.str bandwidth_name: The bandwidth name.
        :param _builtins.int bandwidth_size: Bandwidth size in Mbit/s.
        :param _builtins.str billing_info: The billing info.
        :param _builtins.str charge_mode: The charge mode of the bandwidth.
        :param _builtins.str id: The public IP ID.
        :param _builtins.str ip_address: The public IP address.
        :param _builtins.int ip_version: The public IP version.
        :param _builtins.str type: The EIP type.
        """
        pulumi.set(__self__, "bandwidth_billing_info", bandwidth_billing_info)
        pulumi.set(__self__, "bandwidth_id", bandwidth_id)
        pulumi.set(__self__, "bandwidth_name", bandwidth_name)
        pulumi.set(__self__, "bandwidth_size", bandwidth_size)
        pulumi.set(__self__, "billing_info", billing_info)
        pulumi.set(__self__, "charge_mode", charge_mode)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="bandwidthBillingInfo")
    def bandwidth_billing_info(self) -> _builtins.str:
        """
        The bandwidth billing info.
        """
        return pulumi.get(self, "bandwidth_billing_info")

    @_builtins.property
    @pulumi.getter(name="bandwidthId")
    def bandwidth_id(self) -> _builtins.str:
        """
        The bandwidth ID.
        """
        return pulumi.get(self, "bandwidth_id")

    @_builtins.property
    @pulumi.getter(name="bandwidthName")
    def bandwidth_name(self) -> _builtins.str:
        """
        The bandwidth name.
        """
        return pulumi.get(self, "bandwidth_name")

    @_builtins.property
    @pulumi.getter(name="bandwidthSize")
    def bandwidth_size(self) -> _builtins.int:
        """
        Bandwidth size in Mbit/s.
        """
        return pulumi.get(self, "bandwidth_size")

    @_builtins.property
    @pulumi.getter(name="billingInfo")
    def billing_info(self) -> _builtins.str:
        """
        The billing info.
        """
        return pulumi.get(self, "billing_info")

    @_builtins.property
    @pulumi.getter(name="chargeMode")
    def charge_mode(self) -> _builtins.str:
        """
        The charge mode of the bandwidth.
        """
        return pulumi.get(self, "charge_mode")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The public IP ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> _builtins.str:
        """
        The public IP address.
        """
        return pulumi.get(self, "ip_address")

    @_builtins.property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> _builtins.int:
        """
        The public IP version.
        """
        return pulumi.get(self, "ip_version")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        The EIP type.
        """
        return pulumi.get(self, "type")



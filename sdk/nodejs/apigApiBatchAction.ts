// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApigApiBatchAction extends pulumi.CustomResource {
    /**
     * Get an existing ApigApiBatchAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigApiBatchActionState, opts?: pulumi.CustomResourceOptions): ApigApiBatchAction {
        return new ApigApiBatchAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/apigApiBatchAction:ApigApiBatchAction';

    /**
     * Returns true if the given object is an instance of ApigApiBatchAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigApiBatchAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigApiBatchAction.__pulumiType;
    }

    /**
     * The action to perform on the APIs.
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * The list of API IDs to perform the action on.
     */
    declare public readonly apis: pulumi.Output<string[] | undefined>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    /**
     * The ID of the environment where the action will be performed.
     */
    declare public readonly envId: pulumi.Output<string>;
    /**
     * The ID of the API group.
     */
    declare public readonly groupId: pulumi.Output<string | undefined>;
    /**
     * The ID of the dedicated instance to which the APIs belong.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The region where the APIG instance to which the API belongs is located
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The remark for the batch operation.
     */
    declare public readonly remark: pulumi.Output<string | undefined>;

    /**
     * Create a ApigApiBatchAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigApiBatchActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigApiBatchActionArgs | ApigApiBatchActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigApiBatchActionState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["apis"] = state?.apis;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["envId"] = state?.envId;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["region"] = state?.region;
            resourceInputs["remark"] = state?.remark;
        } else {
            const args = argsOrState as ApigApiBatchActionArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.envId === undefined && !opts.urn) {
                throw new Error("Missing required property 'envId'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["apis"] = args?.apis;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["envId"] = args?.envId;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["region"] = args?.region;
            resourceInputs["remark"] = args?.remark;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigApiBatchAction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApigApiBatchAction resources.
 */
export interface ApigApiBatchActionState {
    /**
     * The action to perform on the APIs.
     */
    action?: pulumi.Input<string>;
    /**
     * The list of API IDs to perform the action on.
     */
    apis?: pulumi.Input<pulumi.Input<string>[]>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * The ID of the environment where the action will be performed.
     */
    envId?: pulumi.Input<string>;
    /**
     * The ID of the API group.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The ID of the dedicated instance to which the APIs belong.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The region where the APIG instance to which the API belongs is located
     */
    region?: pulumi.Input<string>;
    /**
     * The remark for the batch operation.
     */
    remark?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApigApiBatchAction resource.
 */
export interface ApigApiBatchActionArgs {
    /**
     * The action to perform on the APIs.
     */
    action: pulumi.Input<string>;
    /**
     * The list of API IDs to perform the action on.
     */
    apis?: pulumi.Input<pulumi.Input<string>[]>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * The ID of the environment where the action will be performed.
     */
    envId: pulumi.Input<string>;
    /**
     * The ID of the API group.
     */
    groupId?: pulumi.Input<string>;
    /**
     * The ID of the dedicated instance to which the APIs belong.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The region where the APIG instance to which the API belongs is located
     */
    region?: pulumi.Input<string>;
    /**
     * The remark for the batch operation.
     */
    remark?: pulumi.Input<string>;
}

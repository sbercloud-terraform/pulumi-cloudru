// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a VPN gateway resource within SberCloud.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			eipId1 := cfg.RequireObject("eipId1")
//			eipId2 := cfg.RequireObject("eipId2")
//			test, err := sbercloud.GetVpnGatewayAvailabilityZones(ctx, &sbercloud.GetVpnGatewayAvailabilityZonesArgs{
//				Flavor:         "professional1",
//				AttachmentType: pulumi.StringRef("vpc"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sbercloud.NewVpnGateway(ctx, "test", &sbercloud.VpnGatewayArgs{
//				Name:  pulumi.Any(name),
//				VpcId: pulumi.Any(vpcId),
//				LocalSubnets: pulumi.StringArray{
//					pulumi.String("192.168.0.0/24"),
//					pulumi.String("192.168.1.0/24"),
//				},
//				ConnectSubnet: pulumi.Any(subnetId),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String(test.Names[0]),
//					pulumi.String(test.Names[1]),
//				},
//				Eip1: &sbercloud.VpnGatewayEip1Args{
//					Id: pulumi.Any(eipId1),
//				},
//				Eip2: &sbercloud.VpnGatewayEip2Args{
//					Id: pulumi.Any(eipId2),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating a VPN gateway with creating new EIPs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			bandwidthName1 := cfg.RequireObject("bandwidthName1")
//			bandwidthName2 := cfg.RequireObject("bandwidthName2")
//			test, err := sbercloud.GetVpnGatewayAvailabilityZones(ctx, &sbercloud.GetVpnGatewayAvailabilityZonesArgs{
//				Flavor:         "professional1",
//				AttachmentType: pulumi.StringRef("vpc"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sbercloud.NewVpnGateway(ctx, "test", &sbercloud.VpnGatewayArgs{
//				Name:  pulumi.Any(name),
//				VpcId: pulumi.Any(vpcId),
//				LocalSubnets: pulumi.StringArray{
//					pulumi.String("192.168.0.0/24"),
//					pulumi.String("192.168.1.0/24"),
//				},
//				ConnectSubnet: pulumi.Any(subnetId),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String(test.Names[0]),
//					pulumi.String(test.Names[1]),
//				},
//				Eip1: &sbercloud.VpnGatewayEip1Args{
//					BandwidthName: pulumi.Any(bandwidthName1),
//					Type:          pulumi.String("5_bgp"),
//					BandwidthSize: pulumi.Int(5),
//					ChargeMode:    pulumi.String("traffic"),
//				},
//				Eip2: &sbercloud.VpnGatewayEip2Args{
//					BandwidthName: pulumi.Any(bandwidthName2),
//					Type:          pulumi.String("5_bgp"),
//					BandwidthSize: pulumi.Int(5),
//					ChargeMode:    pulumi.String("traffic"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating a private VPN gateway with Enterprise Router
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			erId := cfg.RequireObject("erId")
//			accessVpcId := cfg.RequireObject("accessVpcId")
//			accessSubnetId := cfg.RequireObject("accessSubnetId")
//			accessPrivateIp1 := cfg.RequireObject("accessPrivateIp1")
//			accessPrivateIp2 := cfg.RequireObject("accessPrivateIp2")
//			test, err := sbercloud.GetVpnGatewayAvailabilityZones(ctx, &sbercloud.GetVpnGatewayAvailabilityZonesArgs{
//				Flavor:         "professional1",
//				AttachmentType: pulumi.StringRef("er"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sbercloud.NewVpnGateway(ctx, "test", &sbercloud.VpnGatewayArgs{
//				Name:           pulumi.Any(name),
//				NetworkType:    pulumi.String("private"),
//				AttachmentType: pulumi.String("er"),
//				ErId:           pulumi.Any(erId),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String(test.Names[0]),
//					pulumi.String(test.Names[1]),
//				},
//				AccessVpcId:      pulumi.Any(accessVpcId),
//				AccessSubnetId:   pulumi.Any(accessSubnetId),
//				AccessPrivateIp1: pulumi.Any(accessPrivateIp1),
//				AccessPrivateIp2: pulumi.Any(accessPrivateIp2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Creating a GM VPN gateway with certificate
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			cidr := cfg.RequireObject("cidr")
//			subnetId := cfg.RequireObject("subnetId")
//			test, err := sbercloud.GetVpnGatewayAvailabilityZones(ctx, &sbercloud.GetVpnGatewayAvailabilityZonesArgs{
//				AttachmentType: pulumi.StringRef("er"),
//				Flavor:         "GM",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = sbercloud.NewVpnGateway(ctx, "test", &sbercloud.VpnGatewayArgs{
//				Name:        pulumi.String("test"),
//				VpcId:       pulumi.Any(vpcId),
//				Flavor:      pulumi.String("GM"),
//				NetworkType: pulumi.String("private"),
//				LocalSubnets: pulumi.StringArray{
//					cidr,
//				},
//				ConnectSubnet: pulumi.Any(subnetId),
//				AvailabilityZones: pulumi.StringArray{
//					pulumi.String(test.Names[0]),
//					pulumi.String(test.Names[1]),
//				},
//				Certificate: &sbercloud.VpnGatewayCertificateArgs{
//					Name:             pulumi.String("test"),
//					Content:          pulumi.String("-----BEGIN CERTIFICATE-----\nTHIS IS YOUR CERT CONTENT\n-----END CERTIFICATE-----"),
//					PrivateKey:       pulumi.String("-----BEGIN EC PRIVATE KEY-----\nTHIS IS YOUR PRIVATE KEY CONTENT\n-----END EC PRIVATE KEY-----"),
//					CertificateChain: pulumi.String("-----BEGIN CERTIFICATE-----\nTHIS IS YOUR CERTIFICATE CHAIN CONTENT\n-----END CERTIFICATE-----"),
//					EncCertificate:   pulumi.String("-----BEGIN CERTIFICATE-----\nTHIS IS YOUR ENC CERTIFICATE CONTENT\n-----END CERTIFICATE-----"),
//					EncPrivateKey:    pulumi.String("-----BEGIN EC PRIVATE KEY-----\nTHIS IS YOUR ENC PRIVATE KEY CONTENT\n-----END EC PRIVATE KEY-----"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The gateway can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:index/vpnGateway:VpnGateway test <id>
// ```
type VpnGateway struct {
	pulumi.CustomResourceState

	// The private IP 1 in private network type VPN gateway.
	// It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp1 pulumi.StringOutput `pulumi:"accessPrivateIp1"`
	// The private IP 2 in private network type VPN gateway.
	// It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp2 pulumi.StringOutput `pulumi:"accessPrivateIp2"`
	// The access subnet ID.
	// The default value is the value of `connectSubnet`.
	//
	// Changing this parameter will create a new resource.
	AccessSubnetId pulumi.StringOutput `pulumi:"accessSubnetId"`
	// The access VPC ID.
	// The default value is the value of `vpcId`.
	//
	// Changing this parameter will create a new resource.
	AccessVpcId pulumi.StringOutput `pulumi:"accessVpcId"`
	// The ASN number of BGP. The value ranges from **1** to **4294967295**.
	// Defaults to **64512**
	//
	// Changing this parameter will create a new resource.
	Asn pulumi.IntPtrOutput `pulumi:"asn"`
	// The attachment type. The value can be **vpc** and **er**.
	// Defaults to **vpc**.
	//
	// Changing this parameter will create a new resource.
	AttachmentType pulumi.StringPtrOutput `pulumi:"attachmentType"`
	// The list of availability zone IDs.
	//
	// Changing this parameter will create a new resource.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// The GM certificate of the **GM** flavor gateway.
	// The object structure is documented below.
	Certificate VpnGatewayCertificateOutput `pulumi:"certificate"`
	// The Network ID of the VPC subnet used by the VPN gateway.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	ConnectSubnet pulumi.StringOutput `pulumi:"connectSubnet"`
	// The create time of the gateway certificate.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Whether to delete the EIP when the VPN gateway is deleted.
	DeleteEipOnTermination pulumi.BoolPtrOutput `pulumi:"deleteEipOnTermination"`
	// The master 1 IP in active-active VPN gateway or the master IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip1 VpnGatewayEip1Output `pulumi:"eip1"`
	// The master 2 IP in active-active VPN gateway or the slave IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip2 VpnGatewayEip2Output `pulumi:"eip2"`
	// The enterprise project ID.
	//
	// <a name="Gateway_CreateRequestEip"></a>
	// The `eip1` or `eip2` block supports:
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The ER attachment ID.
	ErAttachmentId pulumi.StringOutput `pulumi:"erAttachmentId"`
	// The enterprise router ID to attach with to VPN gateway.
	// This parameter is mandatory when `attachmentType` is **er**.
	//
	// Changing this parameter will create a new resource.
	ErId pulumi.StringOutput `pulumi:"erId"`
	// The flavor of the VPN gateway.
	// The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
	//
	// Changing this parameter will create a new resource.
	Flavor pulumi.StringOutput `pulumi:"flavor"`
	// The HA mode of VPN gateway. Valid values are **active-active** and
	// **active-standby**. The default value is **active-active**.
	//
	// Changing this parameter will create a new resource.
	HaMode pulumi.StringOutput `pulumi:"haMode"`
	// The list of local subnets.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	LocalSubnets pulumi.StringArrayOutput  `pulumi:"localSubnets"`
	MasterEip    VpnGatewayMasterEipOutput `pulumi:"masterEip"`
	// The name of the gateway certificate.
	Name pulumi.StringOutput `pulumi:"name"`
	// The network type. The value can be **public** and **private**.
	// Defaults to **public**.
	//
	// Changing this parameter will create a new resource.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region   pulumi.StringOutput      `pulumi:"region"`
	SlaveEip VpnGatewaySlaveEipOutput `pulumi:"slaveEip"`
	// The status of the certificate.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the tags of the VPN gateway.
	//
	// <a name="Gateway_certificate_attr"></a>
	// The `certificate` block supports:
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The update time of the gateway certificate.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The number of used connection groups.
	UsedConnectionGroup pulumi.IntOutput `pulumi:"usedConnectionGroup"`
	// The number of used connections.
	UsedConnectionNumber pulumi.IntOutput `pulumi:"usedConnectionNumber"`
	// The ID of the VPC to which the VPN gateway is connected.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpnGateway registers a new resource with the given unique name, arguments, and options.
func NewVpnGateway(ctx *pulumi.Context,
	name string, args *VpnGatewayArgs, opts ...pulumi.ResourceOption) (*VpnGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZones == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZones'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnGateway
	err := ctx.RegisterResource("sbercloud:index/vpnGateway:VpnGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnGateway gets an existing VpnGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnGatewayState, opts ...pulumi.ResourceOption) (*VpnGateway, error) {
	var resource VpnGateway
	err := ctx.ReadResource("sbercloud:index/vpnGateway:VpnGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnGateway resources.
type vpnGatewayState struct {
	// The private IP 1 in private network type VPN gateway.
	// It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp1 *string `pulumi:"accessPrivateIp1"`
	// The private IP 2 in private network type VPN gateway.
	// It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp2 *string `pulumi:"accessPrivateIp2"`
	// The access subnet ID.
	// The default value is the value of `connectSubnet`.
	//
	// Changing this parameter will create a new resource.
	AccessSubnetId *string `pulumi:"accessSubnetId"`
	// The access VPC ID.
	// The default value is the value of `vpcId`.
	//
	// Changing this parameter will create a new resource.
	AccessVpcId *string `pulumi:"accessVpcId"`
	// The ASN number of BGP. The value ranges from **1** to **4294967295**.
	// Defaults to **64512**
	//
	// Changing this parameter will create a new resource.
	Asn *int `pulumi:"asn"`
	// The attachment type. The value can be **vpc** and **er**.
	// Defaults to **vpc**.
	//
	// Changing this parameter will create a new resource.
	AttachmentType *string `pulumi:"attachmentType"`
	// The list of availability zone IDs.
	//
	// Changing this parameter will create a new resource.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The GM certificate of the **GM** flavor gateway.
	// The object structure is documented below.
	Certificate *VpnGatewayCertificate `pulumi:"certificate"`
	// The Network ID of the VPC subnet used by the VPN gateway.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	ConnectSubnet *string `pulumi:"connectSubnet"`
	// The create time of the gateway certificate.
	CreatedAt *string `pulumi:"createdAt"`
	// Whether to delete the EIP when the VPN gateway is deleted.
	DeleteEipOnTermination *bool `pulumi:"deleteEipOnTermination"`
	// The master 1 IP in active-active VPN gateway or the master IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip1 *VpnGatewayEip1 `pulumi:"eip1"`
	// The master 2 IP in active-active VPN gateway or the slave IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip2 *VpnGatewayEip2 `pulumi:"eip2"`
	// The enterprise project ID.
	//
	// <a name="Gateway_CreateRequestEip"></a>
	// The `eip1` or `eip2` block supports:
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The ER attachment ID.
	ErAttachmentId *string `pulumi:"erAttachmentId"`
	// The enterprise router ID to attach with to VPN gateway.
	// This parameter is mandatory when `attachmentType` is **er**.
	//
	// Changing this parameter will create a new resource.
	ErId *string `pulumi:"erId"`
	// The flavor of the VPN gateway.
	// The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
	//
	// Changing this parameter will create a new resource.
	Flavor *string `pulumi:"flavor"`
	// The HA mode of VPN gateway. Valid values are **active-active** and
	// **active-standby**. The default value is **active-active**.
	//
	// Changing this parameter will create a new resource.
	HaMode *string `pulumi:"haMode"`
	// The list of local subnets.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	LocalSubnets []string             `pulumi:"localSubnets"`
	MasterEip    *VpnGatewayMasterEip `pulumi:"masterEip"`
	// The name of the gateway certificate.
	Name *string `pulumi:"name"`
	// The network type. The value can be **public** and **private**.
	// Defaults to **public**.
	//
	// Changing this parameter will create a new resource.
	NetworkType *string `pulumi:"networkType"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region   *string             `pulumi:"region"`
	SlaveEip *VpnGatewaySlaveEip `pulumi:"slaveEip"`
	// The status of the certificate.
	Status *string `pulumi:"status"`
	// Specifies the tags of the VPN gateway.
	//
	// <a name="Gateway_certificate_attr"></a>
	// The `certificate` block supports:
	Tags map[string]string `pulumi:"tags"`
	// The update time of the gateway certificate.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The number of used connection groups.
	UsedConnectionGroup *int `pulumi:"usedConnectionGroup"`
	// The number of used connections.
	UsedConnectionNumber *int `pulumi:"usedConnectionNumber"`
	// The ID of the VPC to which the VPN gateway is connected.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	VpcId *string `pulumi:"vpcId"`
}

type VpnGatewayState struct {
	// The private IP 1 in private network type VPN gateway.
	// It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp1 pulumi.StringPtrInput
	// The private IP 2 in private network type VPN gateway.
	// It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp2 pulumi.StringPtrInput
	// The access subnet ID.
	// The default value is the value of `connectSubnet`.
	//
	// Changing this parameter will create a new resource.
	AccessSubnetId pulumi.StringPtrInput
	// The access VPC ID.
	// The default value is the value of `vpcId`.
	//
	// Changing this parameter will create a new resource.
	AccessVpcId pulumi.StringPtrInput
	// The ASN number of BGP. The value ranges from **1** to **4294967295**.
	// Defaults to **64512**
	//
	// Changing this parameter will create a new resource.
	Asn pulumi.IntPtrInput
	// The attachment type. The value can be **vpc** and **er**.
	// Defaults to **vpc**.
	//
	// Changing this parameter will create a new resource.
	AttachmentType pulumi.StringPtrInput
	// The list of availability zone IDs.
	//
	// Changing this parameter will create a new resource.
	AvailabilityZones pulumi.StringArrayInput
	// The GM certificate of the **GM** flavor gateway.
	// The object structure is documented below.
	Certificate VpnGatewayCertificatePtrInput
	// The Network ID of the VPC subnet used by the VPN gateway.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	ConnectSubnet pulumi.StringPtrInput
	// The create time of the gateway certificate.
	CreatedAt pulumi.StringPtrInput
	// Whether to delete the EIP when the VPN gateway is deleted.
	DeleteEipOnTermination pulumi.BoolPtrInput
	// The master 1 IP in active-active VPN gateway or the master IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip1 VpnGatewayEip1PtrInput
	// The master 2 IP in active-active VPN gateway or the slave IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip2 VpnGatewayEip2PtrInput
	// The enterprise project ID.
	//
	// <a name="Gateway_CreateRequestEip"></a>
	// The `eip1` or `eip2` block supports:
	EnterpriseProjectId pulumi.StringPtrInput
	// The ER attachment ID.
	ErAttachmentId pulumi.StringPtrInput
	// The enterprise router ID to attach with to VPN gateway.
	// This parameter is mandatory when `attachmentType` is **er**.
	//
	// Changing this parameter will create a new resource.
	ErId pulumi.StringPtrInput
	// The flavor of the VPN gateway.
	// The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
	//
	// Changing this parameter will create a new resource.
	Flavor pulumi.StringPtrInput
	// The HA mode of VPN gateway. Valid values are **active-active** and
	// **active-standby**. The default value is **active-active**.
	//
	// Changing this parameter will create a new resource.
	HaMode pulumi.StringPtrInput
	// The list of local subnets.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	LocalSubnets pulumi.StringArrayInput
	MasterEip    VpnGatewayMasterEipPtrInput
	// The name of the gateway certificate.
	Name pulumi.StringPtrInput
	// The network type. The value can be **public** and **private**.
	// Defaults to **public**.
	//
	// Changing this parameter will create a new resource.
	NetworkType pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region   pulumi.StringPtrInput
	SlaveEip VpnGatewaySlaveEipPtrInput
	// The status of the certificate.
	Status pulumi.StringPtrInput
	// Specifies the tags of the VPN gateway.
	//
	// <a name="Gateway_certificate_attr"></a>
	// The `certificate` block supports:
	Tags pulumi.StringMapInput
	// The update time of the gateway certificate.
	UpdatedAt pulumi.StringPtrInput
	// The number of used connection groups.
	UsedConnectionGroup pulumi.IntPtrInput
	// The number of used connections.
	UsedConnectionNumber pulumi.IntPtrInput
	// The ID of the VPC to which the VPN gateway is connected.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	VpcId pulumi.StringPtrInput
}

func (VpnGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnGatewayState)(nil)).Elem()
}

type vpnGatewayArgs struct {
	// The private IP 1 in private network type VPN gateway.
	// It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp1 *string `pulumi:"accessPrivateIp1"`
	// The private IP 2 in private network type VPN gateway.
	// It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp2 *string `pulumi:"accessPrivateIp2"`
	// The access subnet ID.
	// The default value is the value of `connectSubnet`.
	//
	// Changing this parameter will create a new resource.
	AccessSubnetId *string `pulumi:"accessSubnetId"`
	// The access VPC ID.
	// The default value is the value of `vpcId`.
	//
	// Changing this parameter will create a new resource.
	AccessVpcId *string `pulumi:"accessVpcId"`
	// The ASN number of BGP. The value ranges from **1** to **4294967295**.
	// Defaults to **64512**
	//
	// Changing this parameter will create a new resource.
	Asn *int `pulumi:"asn"`
	// The attachment type. The value can be **vpc** and **er**.
	// Defaults to **vpc**.
	//
	// Changing this parameter will create a new resource.
	AttachmentType *string `pulumi:"attachmentType"`
	// The list of availability zone IDs.
	//
	// Changing this parameter will create a new resource.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// The GM certificate of the **GM** flavor gateway.
	// The object structure is documented below.
	Certificate *VpnGatewayCertificate `pulumi:"certificate"`
	// The Network ID of the VPC subnet used by the VPN gateway.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	ConnectSubnet *string `pulumi:"connectSubnet"`
	// Whether to delete the EIP when the VPN gateway is deleted.
	DeleteEipOnTermination *bool `pulumi:"deleteEipOnTermination"`
	// The master 1 IP in active-active VPN gateway or the master IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip1 *VpnGatewayEip1 `pulumi:"eip1"`
	// The master 2 IP in active-active VPN gateway or the slave IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip2 *VpnGatewayEip2 `pulumi:"eip2"`
	// The enterprise project ID.
	//
	// <a name="Gateway_CreateRequestEip"></a>
	// The `eip1` or `eip2` block supports:
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The enterprise router ID to attach with to VPN gateway.
	// This parameter is mandatory when `attachmentType` is **er**.
	//
	// Changing this parameter will create a new resource.
	ErId *string `pulumi:"erId"`
	// The flavor of the VPN gateway.
	// The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
	//
	// Changing this parameter will create a new resource.
	Flavor *string `pulumi:"flavor"`
	// The HA mode of VPN gateway. Valid values are **active-active** and
	// **active-standby**. The default value is **active-active**.
	//
	// Changing this parameter will create a new resource.
	HaMode *string `pulumi:"haMode"`
	// The list of local subnets.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	LocalSubnets []string             `pulumi:"localSubnets"`
	MasterEip    *VpnGatewayMasterEip `pulumi:"masterEip"`
	// The name of the gateway certificate.
	Name *string `pulumi:"name"`
	// The network type. The value can be **public** and **private**.
	// Defaults to **public**.
	//
	// Changing this parameter will create a new resource.
	NetworkType *string `pulumi:"networkType"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region   *string             `pulumi:"region"`
	SlaveEip *VpnGatewaySlaveEip `pulumi:"slaveEip"`
	// Specifies the tags of the VPN gateway.
	//
	// <a name="Gateway_certificate_attr"></a>
	// The `certificate` block supports:
	Tags map[string]string `pulumi:"tags"`
	// The ID of the VPC to which the VPN gateway is connected.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpnGateway resource.
type VpnGatewayArgs struct {
	// The private IP 1 in private network type VPN gateway.
	// It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp1 pulumi.StringPtrInput
	// The private IP 2 in private network type VPN gateway.
	// It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
	// Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
	//
	// Changing this parameter will create a new resource.
	AccessPrivateIp2 pulumi.StringPtrInput
	// The access subnet ID.
	// The default value is the value of `connectSubnet`.
	//
	// Changing this parameter will create a new resource.
	AccessSubnetId pulumi.StringPtrInput
	// The access VPC ID.
	// The default value is the value of `vpcId`.
	//
	// Changing this parameter will create a new resource.
	AccessVpcId pulumi.StringPtrInput
	// The ASN number of BGP. The value ranges from **1** to **4294967295**.
	// Defaults to **64512**
	//
	// Changing this parameter will create a new resource.
	Asn pulumi.IntPtrInput
	// The attachment type. The value can be **vpc** and **er**.
	// Defaults to **vpc**.
	//
	// Changing this parameter will create a new resource.
	AttachmentType pulumi.StringPtrInput
	// The list of availability zone IDs.
	//
	// Changing this parameter will create a new resource.
	AvailabilityZones pulumi.StringArrayInput
	// The GM certificate of the **GM** flavor gateway.
	// The object structure is documented below.
	Certificate VpnGatewayCertificatePtrInput
	// The Network ID of the VPC subnet used by the VPN gateway.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	ConnectSubnet pulumi.StringPtrInput
	// Whether to delete the EIP when the VPN gateway is deleted.
	DeleteEipOnTermination pulumi.BoolPtrInput
	// The master 1 IP in active-active VPN gateway or the master IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip1 VpnGatewayEip1PtrInput
	// The master 2 IP in active-active VPN gateway or the slave IP
	// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
	// The object structure is documented below.
	//
	// Changing this parameter will create a new resource.
	Eip2 VpnGatewayEip2PtrInput
	// The enterprise project ID.
	//
	// <a name="Gateway_CreateRequestEip"></a>
	// The `eip1` or `eip2` block supports:
	EnterpriseProjectId pulumi.StringPtrInput
	// The enterprise router ID to attach with to VPN gateway.
	// This parameter is mandatory when `attachmentType` is **er**.
	//
	// Changing this parameter will create a new resource.
	ErId pulumi.StringPtrInput
	// The flavor of the VPN gateway.
	// The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
	//
	// Changing this parameter will create a new resource.
	Flavor pulumi.StringPtrInput
	// The HA mode of VPN gateway. Valid values are **active-active** and
	// **active-standby**. The default value is **active-active**.
	//
	// Changing this parameter will create a new resource.
	HaMode pulumi.StringPtrInput
	// The list of local subnets.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	LocalSubnets pulumi.StringArrayInput
	MasterEip    VpnGatewayMasterEipPtrInput
	// The name of the gateway certificate.
	Name pulumi.StringPtrInput
	// The network type. The value can be **public** and **private**.
	// Defaults to **public**.
	//
	// Changing this parameter will create a new resource.
	NetworkType pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region   pulumi.StringPtrInput
	SlaveEip VpnGatewaySlaveEipPtrInput
	// Specifies the tags of the VPN gateway.
	//
	// <a name="Gateway_certificate_attr"></a>
	// The `certificate` block supports:
	Tags pulumi.StringMapInput
	// The ID of the VPC to which the VPN gateway is connected.
	// This parameter is mandatory when `attachmentType` is **vpc**.
	//
	// Changing this parameter will create a new resource.
	VpcId pulumi.StringPtrInput
}

func (VpnGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnGatewayArgs)(nil)).Elem()
}

type VpnGatewayInput interface {
	pulumi.Input

	ToVpnGatewayOutput() VpnGatewayOutput
	ToVpnGatewayOutputWithContext(ctx context.Context) VpnGatewayOutput
}

func (*VpnGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnGateway)(nil)).Elem()
}

func (i *VpnGateway) ToVpnGatewayOutput() VpnGatewayOutput {
	return i.ToVpnGatewayOutputWithContext(context.Background())
}

func (i *VpnGateway) ToVpnGatewayOutputWithContext(ctx context.Context) VpnGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayOutput)
}

// VpnGatewayArrayInput is an input type that accepts VpnGatewayArray and VpnGatewayArrayOutput values.
// You can construct a concrete instance of `VpnGatewayArrayInput` via:
//
//	VpnGatewayArray{ VpnGatewayArgs{...} }
type VpnGatewayArrayInput interface {
	pulumi.Input

	ToVpnGatewayArrayOutput() VpnGatewayArrayOutput
	ToVpnGatewayArrayOutputWithContext(context.Context) VpnGatewayArrayOutput
}

type VpnGatewayArray []VpnGatewayInput

func (VpnGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnGateway)(nil)).Elem()
}

func (i VpnGatewayArray) ToVpnGatewayArrayOutput() VpnGatewayArrayOutput {
	return i.ToVpnGatewayArrayOutputWithContext(context.Background())
}

func (i VpnGatewayArray) ToVpnGatewayArrayOutputWithContext(ctx context.Context) VpnGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayArrayOutput)
}

// VpnGatewayMapInput is an input type that accepts VpnGatewayMap and VpnGatewayMapOutput values.
// You can construct a concrete instance of `VpnGatewayMapInput` via:
//
//	VpnGatewayMap{ "key": VpnGatewayArgs{...} }
type VpnGatewayMapInput interface {
	pulumi.Input

	ToVpnGatewayMapOutput() VpnGatewayMapOutput
	ToVpnGatewayMapOutputWithContext(context.Context) VpnGatewayMapOutput
}

type VpnGatewayMap map[string]VpnGatewayInput

func (VpnGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnGateway)(nil)).Elem()
}

func (i VpnGatewayMap) ToVpnGatewayMapOutput() VpnGatewayMapOutput {
	return i.ToVpnGatewayMapOutputWithContext(context.Background())
}

func (i VpnGatewayMap) ToVpnGatewayMapOutputWithContext(ctx context.Context) VpnGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnGatewayMapOutput)
}

type VpnGatewayOutput struct{ *pulumi.OutputState }

func (VpnGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnGateway)(nil)).Elem()
}

func (o VpnGatewayOutput) ToVpnGatewayOutput() VpnGatewayOutput {
	return o
}

func (o VpnGatewayOutput) ToVpnGatewayOutputWithContext(ctx context.Context) VpnGatewayOutput {
	return o
}

// The private IP 1 in private network type VPN gateway.
// It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
// Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) AccessPrivateIp1() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.AccessPrivateIp1 }).(pulumi.StringOutput)
}

// The private IP 2 in private network type VPN gateway.
// It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
// Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) AccessPrivateIp2() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.AccessPrivateIp2 }).(pulumi.StringOutput)
}

// The access subnet ID.
// The default value is the value of `connectSubnet`.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) AccessSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.AccessSubnetId }).(pulumi.StringOutput)
}

// The access VPC ID.
// The default value is the value of `vpcId`.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) AccessVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.AccessVpcId }).(pulumi.StringOutput)
}

// The ASN number of BGP. The value ranges from **1** to **4294967295**.
// Defaults to **64512**
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) Asn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.IntPtrOutput { return v.Asn }).(pulumi.IntPtrOutput)
}

// The attachment type. The value can be **vpc** and **er**.
// Defaults to **vpc**.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) AttachmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringPtrOutput { return v.AttachmentType }).(pulumi.StringPtrOutput)
}

// The list of availability zone IDs.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// The GM certificate of the **GM** flavor gateway.
// The object structure is documented below.
func (o VpnGatewayOutput) Certificate() VpnGatewayCertificateOutput {
	return o.ApplyT(func(v *VpnGateway) VpnGatewayCertificateOutput { return v.Certificate }).(VpnGatewayCertificateOutput)
}

// The Network ID of the VPC subnet used by the VPN gateway.
// This parameter is mandatory when `attachmentType` is **vpc**.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) ConnectSubnet() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.ConnectSubnet }).(pulumi.StringOutput)
}

// The create time of the gateway certificate.
func (o VpnGatewayOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Whether to delete the EIP when the VPN gateway is deleted.
func (o VpnGatewayOutput) DeleteEipOnTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.BoolPtrOutput { return v.DeleteEipOnTermination }).(pulumi.BoolPtrOutput)
}

// The master 1 IP in active-active VPN gateway or the master IP
// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
// The object structure is documented below.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) Eip1() VpnGatewayEip1Output {
	return o.ApplyT(func(v *VpnGateway) VpnGatewayEip1Output { return v.Eip1 }).(VpnGatewayEip1Output)
}

// The master 2 IP in active-active VPN gateway or the slave IP
// in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
// The object structure is documented below.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) Eip2() VpnGatewayEip2Output {
	return o.ApplyT(func(v *VpnGateway) VpnGatewayEip2Output { return v.Eip2 }).(VpnGatewayEip2Output)
}

// The enterprise project ID.
//
// <a name="Gateway_CreateRequestEip"></a>
// The `eip1` or `eip2` block supports:
func (o VpnGatewayOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The ER attachment ID.
func (o VpnGatewayOutput) ErAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.ErAttachmentId }).(pulumi.StringOutput)
}

// The enterprise router ID to attach with to VPN gateway.
// This parameter is mandatory when `attachmentType` is **er**.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) ErId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.ErId }).(pulumi.StringOutput)
}

// The flavor of the VPN gateway.
// The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.Flavor }).(pulumi.StringOutput)
}

// The HA mode of VPN gateway. Valid values are **active-active** and
// **active-standby**. The default value is **active-active**.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) HaMode() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.HaMode }).(pulumi.StringOutput)
}

// The list of local subnets.
// This parameter is mandatory when `attachmentType` is **vpc**.
func (o VpnGatewayOutput) LocalSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringArrayOutput { return v.LocalSubnets }).(pulumi.StringArrayOutput)
}

func (o VpnGatewayOutput) MasterEip() VpnGatewayMasterEipOutput {
	return o.ApplyT(func(v *VpnGateway) VpnGatewayMasterEipOutput { return v.MasterEip }).(VpnGatewayMasterEipOutput)
}

// The name of the gateway certificate.
func (o VpnGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The network type. The value can be **public** and **private**.
// Defaults to **public**.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o VpnGatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VpnGatewayOutput) SlaveEip() VpnGatewaySlaveEipOutput {
	return o.ApplyT(func(v *VpnGateway) VpnGatewaySlaveEipOutput { return v.SlaveEip }).(VpnGatewaySlaveEipOutput)
}

// The status of the certificate.
func (o VpnGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the tags of the VPN gateway.
//
// <a name="Gateway_certificate_attr"></a>
// The `certificate` block supports:
func (o VpnGatewayOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The update time of the gateway certificate.
func (o VpnGatewayOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The number of used connection groups.
func (o VpnGatewayOutput) UsedConnectionGroup() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.IntOutput { return v.UsedConnectionGroup }).(pulumi.IntOutput)
}

// The number of used connections.
func (o VpnGatewayOutput) UsedConnectionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.IntOutput { return v.UsedConnectionNumber }).(pulumi.IntOutput)
}

// The ID of the VPC to which the VPN gateway is connected.
// This parameter is mandatory when `attachmentType` is **vpc**.
//
// Changing this parameter will create a new resource.
func (o VpnGatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnGateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VpnGatewayArrayOutput struct{ *pulumi.OutputState }

func (VpnGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnGateway)(nil)).Elem()
}

func (o VpnGatewayArrayOutput) ToVpnGatewayArrayOutput() VpnGatewayArrayOutput {
	return o
}

func (o VpnGatewayArrayOutput) ToVpnGatewayArrayOutputWithContext(ctx context.Context) VpnGatewayArrayOutput {
	return o
}

func (o VpnGatewayArrayOutput) Index(i pulumi.IntInput) VpnGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnGateway {
		return vs[0].([]*VpnGateway)[vs[1].(int)]
	}).(VpnGatewayOutput)
}

type VpnGatewayMapOutput struct{ *pulumi.OutputState }

func (VpnGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnGateway)(nil)).Elem()
}

func (o VpnGatewayMapOutput) ToVpnGatewayMapOutput() VpnGatewayMapOutput {
	return o
}

func (o VpnGatewayMapOutput) ToVpnGatewayMapOutputWithContext(ctx context.Context) VpnGatewayMapOutput {
	return o
}

func (o VpnGatewayMapOutput) MapIndex(k pulumi.StringInput) VpnGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnGateway {
		return vs[0].(map[string]*VpnGateway)[vs[1].(string)]
	}).(VpnGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnGatewayInput)(nil)).Elem(), &VpnGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnGatewayArrayInput)(nil)).Elem(), VpnGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnGatewayMapInput)(nil)).Elem(), VpnGatewayMap{})
	pulumi.RegisterOutputType(VpnGatewayOutput{})
	pulumi.RegisterOutputType(VpnGatewayArrayOutput{})
	pulumi.RegisterOutputType(VpnGatewayMapOutput{})
}

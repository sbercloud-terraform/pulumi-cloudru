// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Zone struct {
	pulumi.CustomResourceState

	// The description of the zone.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether to enable DNSSEC for a public zone.
	Dnssec pulumi.StringOutput `pulumi:"dnssec"`
	// Indicates the DNSSEC infos.
	DnssecInfos ZoneDnssecInfoArrayOutput `pulumi:"dnssecInfos"`
	// The email address of the administrator managing the zone.
	Email pulumi.StringOutput `pulumi:"email"`
	// The enterprise project ID of the zone.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The list of the masters of the DNS server.
	Masters pulumi.StringArrayOutput `pulumi:"masters"`
	// The name of the zone.
	Name pulumi.StringOutput `pulumi:"name"`
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern pulumi.StringOutput   `pulumi:"proxyPattern"`
	Region       pulumi.StringOutput   `pulumi:"region"`
	Routers      ZoneRouterArrayOutput `pulumi:"routers"`
	// The status of the zone.
	Status pulumi.StringOutput `pulumi:"status"`
	// The key/value pairs to associate with the zone.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The time to live (TTL) of the zone.
	Ttl pulumi.IntPtrOutput `pulumi:"ttl"`
	// The type of zone.
	ZoneType pulumi.StringPtrOutput `pulumi:"zoneType"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		args = &ZoneArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Zone
	err := ctx.RegisterResource("sbercloud:Dns/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("sbercloud:Dns/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	// The description of the zone.
	Description *string `pulumi:"description"`
	// Specifies whether to enable DNSSEC for a public zone.
	Dnssec *string `pulumi:"dnssec"`
	// Indicates the DNSSEC infos.
	DnssecInfos []ZoneDnssecInfo `pulumi:"dnssecInfos"`
	// The email address of the administrator managing the zone.
	Email *string `pulumi:"email"`
	// The enterprise project ID of the zone.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The list of the masters of the DNS server.
	Masters []string `pulumi:"masters"`
	// The name of the zone.
	Name *string `pulumi:"name"`
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern *string      `pulumi:"proxyPattern"`
	Region       *string      `pulumi:"region"`
	Routers      []ZoneRouter `pulumi:"routers"`
	// The status of the zone.
	Status *string `pulumi:"status"`
	// The key/value pairs to associate with the zone.
	Tags map[string]string `pulumi:"tags"`
	// The time to live (TTL) of the zone.
	Ttl *int `pulumi:"ttl"`
	// The type of zone.
	ZoneType *string `pulumi:"zoneType"`
}

type ZoneState struct {
	// The description of the zone.
	Description pulumi.StringPtrInput
	// Specifies whether to enable DNSSEC for a public zone.
	Dnssec pulumi.StringPtrInput
	// Indicates the DNSSEC infos.
	DnssecInfos ZoneDnssecInfoArrayInput
	// The email address of the administrator managing the zone.
	Email pulumi.StringPtrInput
	// The enterprise project ID of the zone.
	EnterpriseProjectId pulumi.StringPtrInput
	// The list of the masters of the DNS server.
	Masters pulumi.StringArrayInput
	// The name of the zone.
	Name pulumi.StringPtrInput
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	Routers      ZoneRouterArrayInput
	// The status of the zone.
	Status pulumi.StringPtrInput
	// The key/value pairs to associate with the zone.
	Tags pulumi.StringMapInput
	// The time to live (TTL) of the zone.
	Ttl pulumi.IntPtrInput
	// The type of zone.
	ZoneType pulumi.StringPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	// The description of the zone.
	Description *string `pulumi:"description"`
	// Specifies whether to enable DNSSEC for a public zone.
	Dnssec *string `pulumi:"dnssec"`
	// The email address of the administrator managing the zone.
	Email *string `pulumi:"email"`
	// The enterprise project ID of the zone.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The name of the zone.
	Name *string `pulumi:"name"`
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern *string      `pulumi:"proxyPattern"`
	Region       *string      `pulumi:"region"`
	Routers      []ZoneRouter `pulumi:"routers"`
	// The status of the zone.
	Status *string `pulumi:"status"`
	// The key/value pairs to associate with the zone.
	Tags map[string]string `pulumi:"tags"`
	// The time to live (TTL) of the zone.
	Ttl *int `pulumi:"ttl"`
	// The type of zone.
	ZoneType *string `pulumi:"zoneType"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// The description of the zone.
	Description pulumi.StringPtrInput
	// Specifies whether to enable DNSSEC for a public zone.
	Dnssec pulumi.StringPtrInput
	// The email address of the administrator managing the zone.
	Email pulumi.StringPtrInput
	// The enterprise project ID of the zone.
	EnterpriseProjectId pulumi.StringPtrInput
	// The name of the zone.
	Name pulumi.StringPtrInput
	// The recursive resolution proxy mode for subdomains of the private zone.
	ProxyPattern pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	Routers      ZoneRouterArrayInput
	// The status of the zone.
	Status pulumi.StringPtrInput
	// The key/value pairs to associate with the zone.
	Tags pulumi.StringMapInput
	// The time to live (TTL) of the zone.
	Ttl pulumi.IntPtrInput
	// The type of zone.
	ZoneType pulumi.StringPtrInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}

type ZoneInput interface {
	pulumi.Input

	ToZoneOutput() ZoneOutput
	ToZoneOutputWithContext(ctx context.Context) ZoneOutput
}

func (*Zone) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (i *Zone) ToZoneOutput() ZoneOutput {
	return i.ToZoneOutputWithContext(context.Background())
}

func (i *Zone) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneOutput)
}

// ZoneArrayInput is an input type that accepts ZoneArray and ZoneArrayOutput values.
// You can construct a concrete instance of `ZoneArrayInput` via:
//
//	ZoneArray{ ZoneArgs{...} }
type ZoneArrayInput interface {
	pulumi.Input

	ToZoneArrayOutput() ZoneArrayOutput
	ToZoneArrayOutputWithContext(context.Context) ZoneArrayOutput
}

type ZoneArray []ZoneInput

func (ZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (i ZoneArray) ToZoneArrayOutput() ZoneArrayOutput {
	return i.ToZoneArrayOutputWithContext(context.Background())
}

func (i ZoneArray) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneArrayOutput)
}

// ZoneMapInput is an input type that accepts ZoneMap and ZoneMapOutput values.
// You can construct a concrete instance of `ZoneMapInput` via:
//
//	ZoneMap{ "key": ZoneArgs{...} }
type ZoneMapInput interface {
	pulumi.Input

	ToZoneMapOutput() ZoneMapOutput
	ToZoneMapOutputWithContext(context.Context) ZoneMapOutput
}

type ZoneMap map[string]ZoneInput

func (ZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (i ZoneMap) ToZoneMapOutput() ZoneMapOutput {
	return i.ToZoneMapOutputWithContext(context.Background())
}

func (i ZoneMap) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneMapOutput)
}

type ZoneOutput struct{ *pulumi.OutputState }

func (ZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (o ZoneOutput) ToZoneOutput() ZoneOutput {
	return o
}

func (o ZoneOutput) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return o
}

// The description of the zone.
func (o ZoneOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable DNSSEC for a public zone.
func (o ZoneOutput) Dnssec() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Dnssec }).(pulumi.StringOutput)
}

// Indicates the DNSSEC infos.
func (o ZoneOutput) DnssecInfos() ZoneDnssecInfoArrayOutput {
	return o.ApplyT(func(v *Zone) ZoneDnssecInfoArrayOutput { return v.DnssecInfos }).(ZoneDnssecInfoArrayOutput)
}

// The email address of the administrator managing the zone.
func (o ZoneOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The enterprise project ID of the zone.
func (o ZoneOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The list of the masters of the DNS server.
func (o ZoneOutput) Masters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.Masters }).(pulumi.StringArrayOutput)
}

// The name of the zone.
func (o ZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The recursive resolution proxy mode for subdomains of the private zone.
func (o ZoneOutput) ProxyPattern() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ProxyPattern }).(pulumi.StringOutput)
}

func (o ZoneOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ZoneOutput) Routers() ZoneRouterArrayOutput {
	return o.ApplyT(func(v *Zone) ZoneRouterArrayOutput { return v.Routers }).(ZoneRouterArrayOutput)
}

// The status of the zone.
func (o ZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the zone.
func (o ZoneOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The time to live (TTL) of the zone.
func (o ZoneOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.IntPtrOutput { return v.Ttl }).(pulumi.IntPtrOutput)
}

// The type of zone.
func (o ZoneOutput) ZoneType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringPtrOutput { return v.ZoneType }).(pulumi.StringPtrOutput)
}

type ZoneArrayOutput struct{ *pulumi.OutputState }

func (ZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (o ZoneArrayOutput) ToZoneArrayOutput() ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) Index(i pulumi.IntInput) ZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].([]*Zone)[vs[1].(int)]
	}).(ZoneOutput)
}

type ZoneMapOutput struct{ *pulumi.OutputState }

func (ZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (o ZoneMapOutput) ToZoneMapOutput() ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) MapIndex(k pulumi.StringInput) ZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].(map[string]*Zone)[vs[1].(string)]
	}).(ZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneInput)(nil)).Elem(), &Zone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneArrayInput)(nil)).Elem(), ZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneMapInput)(nil)).Elem(), ZoneMap{})
	pulumi.RegisterOutputType(ZoneOutput{})
	pulumi.RegisterOutputType(ZoneArrayOutput{})
	pulumi.RegisterOutputType(ZoneMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a DMS RocketMQ consumption verify resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const group = config.requireObject<any>("group");
 * const topic = config.requireObject<any>("topic");
 * const clientId = config.requireObject<any>("clientId");
 * const messageIdList = config.requireObject<any>("messageIdList");
 * const test = new sbercloud.DmsRocketmqConsumptionVerify("test", {
 *     instanceId: instanceId,
 *     group: group,
 *     topic: topic,
 *     clientId: clientId,
 *     messageIdLists: messageIdList,
 * });
 * ```
 */
export class DmsRocketmqConsumptionVerify extends pulumi.CustomResource {
    /**
     * Get an existing DmsRocketmqConsumptionVerify resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsRocketmqConsumptionVerifyState, opts?: pulumi.CustomResourceOptions): DmsRocketmqConsumptionVerify {
        return new DmsRocketmqConsumptionVerify(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dmsRocketmqConsumptionVerify:DmsRocketmqConsumptionVerify';

    /**
     * Returns true if the given object is an instance of DmsRocketmqConsumptionVerify.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsRocketmqConsumptionVerify {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsRocketmqConsumptionVerify.__pulumiType;
    }

    /**
     * Specifies the client ID.
     * Changing this creates a new resource.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the group name.
     * Changing this creates a new resource.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Specifies the instance ID.
     * Changing this creates a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the message ID list.
     * Changing this creates a new resource.
     */
    public readonly messageIdLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Indicates the verify results.
     * The resendResults structure is documented below.
     */
    public /*out*/ readonly resendResults!: pulumi.Output<outputs.DmsRocketmqConsumptionVerifyResendResult[]>;
    /**
     * Specifies the topic name.
     * Changing this creates a new resource.
     */
    public readonly topic!: pulumi.Output<string | undefined>;

    /**
     * Create a DmsRocketmqConsumptionVerify resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsRocketmqConsumptionVerifyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsRocketmqConsumptionVerifyArgs | DmsRocketmqConsumptionVerifyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsRocketmqConsumptionVerifyState | undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["messageIdLists"] = state ? state.messageIdLists : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resendResults"] = state ? state.resendResults : undefined;
            resourceInputs["topic"] = state ? state.topic : undefined;
        } else {
            const args = argsOrState as DmsRocketmqConsumptionVerifyArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["messageIdLists"] = args ? args.messageIdLists : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["topic"] = args ? args.topic : undefined;
            resourceInputs["resendResults"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsRocketmqConsumptionVerify.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DmsRocketmqConsumptionVerify resources.
 */
export interface DmsRocketmqConsumptionVerifyState {
    /**
     * Specifies the client ID.
     * Changing this creates a new resource.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Specifies the group name.
     * Changing this creates a new resource.
     */
    group?: pulumi.Input<string>;
    /**
     * Specifies the instance ID.
     * Changing this creates a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the message ID list.
     * Changing this creates a new resource.
     */
    messageIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Indicates the verify results.
     * The resendResults structure is documented below.
     */
    resendResults?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqConsumptionVerifyResendResult>[]>;
    /**
     * Specifies the topic name.
     * Changing this creates a new resource.
     */
    topic?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmsRocketmqConsumptionVerify resource.
 */
export interface DmsRocketmqConsumptionVerifyArgs {
    /**
     * Specifies the client ID.
     * Changing this creates a new resource.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Specifies the group name.
     * Changing this creates a new resource.
     */
    group?: pulumi.Input<string>;
    /**
     * Specifies the instance ID.
     * Changing this creates a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the message ID list.
     * Changing this creates a new resource.
     */
    messageIdLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the topic name.
     * Changing this creates a new resource.
     */
    topic?: pulumi.Input<string>;
}

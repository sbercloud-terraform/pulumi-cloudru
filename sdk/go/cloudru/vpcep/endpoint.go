// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpcep

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Endpoint struct {
	pulumi.CustomResourceState

	Description       pulumi.StringOutput      `pulumi:"description"`
	EnableDns         pulumi.BoolPtrOutput     `pulumi:"enableDns"`
	EnableWhitelist   pulumi.BoolPtrOutput     `pulumi:"enableWhitelist"`
	IpAddress         pulumi.StringOutput      `pulumi:"ipAddress"`
	NetworkId         pulumi.StringOutput      `pulumi:"networkId"`
	PacketId          pulumi.IntOutput         `pulumi:"packetId"`
	PrivateDomainName pulumi.StringOutput      `pulumi:"privateDomainName"`
	Region            pulumi.StringOutput      `pulumi:"region"`
	ServiceId         pulumi.StringOutput      `pulumi:"serviceId"`
	ServiceName       pulumi.StringOutput      `pulumi:"serviceName"`
	ServiceType       pulumi.StringOutput      `pulumi:"serviceType"`
	Status            pulumi.StringOutput      `pulumi:"status"`
	Tags              pulumi.StringMapOutput   `pulumi:"tags"`
	VpcId             pulumi.StringOutput      `pulumi:"vpcId"`
	Whitelists        pulumi.StringArrayOutput `pulumi:"whitelists"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Endpoint
	err := ctx.RegisterResource("cloudru:Vpcep/endpoint:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("cloudru:Vpcep/endpoint:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
	Description       *string           `pulumi:"description"`
	EnableDns         *bool             `pulumi:"enableDns"`
	EnableWhitelist   *bool             `pulumi:"enableWhitelist"`
	IpAddress         *string           `pulumi:"ipAddress"`
	NetworkId         *string           `pulumi:"networkId"`
	PacketId          *int              `pulumi:"packetId"`
	PrivateDomainName *string           `pulumi:"privateDomainName"`
	Region            *string           `pulumi:"region"`
	ServiceId         *string           `pulumi:"serviceId"`
	ServiceName       *string           `pulumi:"serviceName"`
	ServiceType       *string           `pulumi:"serviceType"`
	Status            *string           `pulumi:"status"`
	Tags              map[string]string `pulumi:"tags"`
	VpcId             *string           `pulumi:"vpcId"`
	Whitelists        []string          `pulumi:"whitelists"`
}

type EndpointState struct {
	Description       pulumi.StringPtrInput
	EnableDns         pulumi.BoolPtrInput
	EnableWhitelist   pulumi.BoolPtrInput
	IpAddress         pulumi.StringPtrInput
	NetworkId         pulumi.StringPtrInput
	PacketId          pulumi.IntPtrInput
	PrivateDomainName pulumi.StringPtrInput
	Region            pulumi.StringPtrInput
	ServiceId         pulumi.StringPtrInput
	ServiceName       pulumi.StringPtrInput
	ServiceType       pulumi.StringPtrInput
	Status            pulumi.StringPtrInput
	Tags              pulumi.StringMapInput
	VpcId             pulumi.StringPtrInput
	Whitelists        pulumi.StringArrayInput
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	Description     *string           `pulumi:"description"`
	EnableDns       *bool             `pulumi:"enableDns"`
	EnableWhitelist *bool             `pulumi:"enableWhitelist"`
	IpAddress       *string           `pulumi:"ipAddress"`
	NetworkId       string            `pulumi:"networkId"`
	Region          *string           `pulumi:"region"`
	ServiceId       string            `pulumi:"serviceId"`
	Tags            map[string]string `pulumi:"tags"`
	VpcId           string            `pulumi:"vpcId"`
	Whitelists      []string          `pulumi:"whitelists"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	Description     pulumi.StringPtrInput
	EnableDns       pulumi.BoolPtrInput
	EnableWhitelist pulumi.BoolPtrInput
	IpAddress       pulumi.StringPtrInput
	NetworkId       pulumi.StringInput
	Region          pulumi.StringPtrInput
	ServiceId       pulumi.StringInput
	Tags            pulumi.StringMapInput
	VpcId           pulumi.StringInput
	Whitelists      pulumi.StringArrayInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// EndpointMapInput is an input type that accepts EndpointMap and EndpointMapOutput values.
// You can construct a concrete instance of `EndpointMapInput` via:
//
//	EndpointMap{ "key": EndpointArgs{...} }
type EndpointMapInput interface {
	pulumi.Input

	ToEndpointMapOutput() EndpointMapOutput
	ToEndpointMapOutputWithContext(context.Context) EndpointMapOutput
}

type EndpointMap map[string]EndpointInput

func (EndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (i EndpointMap) ToEndpointMapOutput() EndpointMapOutput {
	return i.ToEndpointMapOutputWithContext(context.Background())
}

func (i EndpointMap) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMapOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o EndpointOutput) EnableDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolPtrOutput { return v.EnableDns }).(pulumi.BoolPtrOutput)
}

func (o EndpointOutput) EnableWhitelist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolPtrOutput { return v.EnableWhitelist }).(pulumi.BoolPtrOutput)
}

func (o EndpointOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

func (o EndpointOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o EndpointOutput) PacketId() pulumi.IntOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.IntOutput { return v.PacketId }).(pulumi.IntOutput)
}

func (o EndpointOutput) PrivateDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.PrivateDomainName }).(pulumi.StringOutput)
}

func (o EndpointOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o EndpointOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

func (o EndpointOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o EndpointOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

func (o EndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o EndpointOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o EndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func (o EndpointOutput) Whitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringArrayOutput { return v.Whitelists }).(pulumi.StringArrayOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].([]*Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

type EndpointMapOutput struct{ *pulumi.OutputState }

func (EndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (o EndpointMapOutput) ToEndpointMapOutput() EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) MapIndex(k pulumi.StringInput) EndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].(map[string]*Endpoint)[vs[1].(string)]
	}).(EndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointArrayInput)(nil)).Elem(), EndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMapInput)(nil)).Elem(), EndpointMap{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointMapOutput{})
}

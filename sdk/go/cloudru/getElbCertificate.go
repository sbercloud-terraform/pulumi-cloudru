// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

func LookupElbCertificate(ctx *pulumi.Context, args *LookupElbCertificateArgs, opts ...pulumi.InvokeOption) (*LookupElbCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupElbCertificateResult
	err := ctx.Invoke("cloudru:index/getElbCertificate:getElbCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getElbCertificate.
type LookupElbCertificateArgs struct {
	Name   string  `pulumi:"name"`
	Region *string `pulumi:"region"`
}

// A collection of values returned by getElbCertificate.
type LookupElbCertificateResult struct {
	Description string `pulumi:"description"`
	Domain      string `pulumi:"domain"`
	Expiration  string `pulumi:"expiration"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Name   string `pulumi:"name"`
	Region string `pulumi:"region"`
	Type   string `pulumi:"type"`
}

func LookupElbCertificateOutput(ctx *pulumi.Context, args LookupElbCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupElbCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupElbCertificateResultOutput, error) {
			args := v.(LookupElbCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudru:index/getElbCertificate:getElbCertificate", args, LookupElbCertificateResultOutput{}, options).(LookupElbCertificateResultOutput), nil
		}).(LookupElbCertificateResultOutput)
}

// A collection of arguments for invoking getElbCertificate.
type LookupElbCertificateOutputArgs struct {
	Name   pulumi.StringInput    `pulumi:"name"`
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupElbCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupElbCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getElbCertificate.
type LookupElbCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupElbCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupElbCertificateResult)(nil)).Elem()
}

func (o LookupElbCertificateResultOutput) ToLookupElbCertificateResultOutput() LookupElbCertificateResultOutput {
	return o
}

func (o LookupElbCertificateResultOutput) ToLookupElbCertificateResultOutputWithContext(ctx context.Context) LookupElbCertificateResultOutput {
	return o
}

func (o LookupElbCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupElbCertificateResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o LookupElbCertificateResultOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Expiration }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupElbCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupElbCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupElbCertificateResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupElbCertificateResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupElbCertificateResultOutput{})
}

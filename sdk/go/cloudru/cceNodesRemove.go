// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type CceNodesRemove struct {
	pulumi.CustomResourceState

	ClusterId      pulumi.StringOutput           `pulumi:"clusterId"`
	EnableForceNew pulumi.StringPtrOutput        `pulumi:"enableForceNew"`
	Nodes          CceNodesRemoveNodeArrayOutput `pulumi:"nodes"`
	Region         pulumi.StringOutput           `pulumi:"region"`
}

// NewCceNodesRemove registers a new resource with the given unique name, arguments, and options.
func NewCceNodesRemove(ctx *pulumi.Context,
	name string, args *CceNodesRemoveArgs, opts ...pulumi.ResourceOption) (*CceNodesRemove, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CceNodesRemove
	err := ctx.RegisterResource("cloudru:index/cceNodesRemove:CceNodesRemove", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCceNodesRemove gets an existing CceNodesRemove resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCceNodesRemove(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CceNodesRemoveState, opts ...pulumi.ResourceOption) (*CceNodesRemove, error) {
	var resource CceNodesRemove
	err := ctx.ReadResource("cloudru:index/cceNodesRemove:CceNodesRemove", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CceNodesRemove resources.
type cceNodesRemoveState struct {
	ClusterId      *string              `pulumi:"clusterId"`
	EnableForceNew *string              `pulumi:"enableForceNew"`
	Nodes          []CceNodesRemoveNode `pulumi:"nodes"`
	Region         *string              `pulumi:"region"`
}

type CceNodesRemoveState struct {
	ClusterId      pulumi.StringPtrInput
	EnableForceNew pulumi.StringPtrInput
	Nodes          CceNodesRemoveNodeArrayInput
	Region         pulumi.StringPtrInput
}

func (CceNodesRemoveState) ElementType() reflect.Type {
	return reflect.TypeOf((*cceNodesRemoveState)(nil)).Elem()
}

type cceNodesRemoveArgs struct {
	ClusterId      string               `pulumi:"clusterId"`
	EnableForceNew *string              `pulumi:"enableForceNew"`
	Nodes          []CceNodesRemoveNode `pulumi:"nodes"`
	Region         *string              `pulumi:"region"`
}

// The set of arguments for constructing a CceNodesRemove resource.
type CceNodesRemoveArgs struct {
	ClusterId      pulumi.StringInput
	EnableForceNew pulumi.StringPtrInput
	Nodes          CceNodesRemoveNodeArrayInput
	Region         pulumi.StringPtrInput
}

func (CceNodesRemoveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cceNodesRemoveArgs)(nil)).Elem()
}

type CceNodesRemoveInput interface {
	pulumi.Input

	ToCceNodesRemoveOutput() CceNodesRemoveOutput
	ToCceNodesRemoveOutputWithContext(ctx context.Context) CceNodesRemoveOutput
}

func (*CceNodesRemove) ElementType() reflect.Type {
	return reflect.TypeOf((**CceNodesRemove)(nil)).Elem()
}

func (i *CceNodesRemove) ToCceNodesRemoveOutput() CceNodesRemoveOutput {
	return i.ToCceNodesRemoveOutputWithContext(context.Background())
}

func (i *CceNodesRemove) ToCceNodesRemoveOutputWithContext(ctx context.Context) CceNodesRemoveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceNodesRemoveOutput)
}

// CceNodesRemoveArrayInput is an input type that accepts CceNodesRemoveArray and CceNodesRemoveArrayOutput values.
// You can construct a concrete instance of `CceNodesRemoveArrayInput` via:
//
//	CceNodesRemoveArray{ CceNodesRemoveArgs{...} }
type CceNodesRemoveArrayInput interface {
	pulumi.Input

	ToCceNodesRemoveArrayOutput() CceNodesRemoveArrayOutput
	ToCceNodesRemoveArrayOutputWithContext(context.Context) CceNodesRemoveArrayOutput
}

type CceNodesRemoveArray []CceNodesRemoveInput

func (CceNodesRemoveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CceNodesRemove)(nil)).Elem()
}

func (i CceNodesRemoveArray) ToCceNodesRemoveArrayOutput() CceNodesRemoveArrayOutput {
	return i.ToCceNodesRemoveArrayOutputWithContext(context.Background())
}

func (i CceNodesRemoveArray) ToCceNodesRemoveArrayOutputWithContext(ctx context.Context) CceNodesRemoveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceNodesRemoveArrayOutput)
}

// CceNodesRemoveMapInput is an input type that accepts CceNodesRemoveMap and CceNodesRemoveMapOutput values.
// You can construct a concrete instance of `CceNodesRemoveMapInput` via:
//
//	CceNodesRemoveMap{ "key": CceNodesRemoveArgs{...} }
type CceNodesRemoveMapInput interface {
	pulumi.Input

	ToCceNodesRemoveMapOutput() CceNodesRemoveMapOutput
	ToCceNodesRemoveMapOutputWithContext(context.Context) CceNodesRemoveMapOutput
}

type CceNodesRemoveMap map[string]CceNodesRemoveInput

func (CceNodesRemoveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CceNodesRemove)(nil)).Elem()
}

func (i CceNodesRemoveMap) ToCceNodesRemoveMapOutput() CceNodesRemoveMapOutput {
	return i.ToCceNodesRemoveMapOutputWithContext(context.Background())
}

func (i CceNodesRemoveMap) ToCceNodesRemoveMapOutputWithContext(ctx context.Context) CceNodesRemoveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CceNodesRemoveMapOutput)
}

type CceNodesRemoveOutput struct{ *pulumi.OutputState }

func (CceNodesRemoveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CceNodesRemove)(nil)).Elem()
}

func (o CceNodesRemoveOutput) ToCceNodesRemoveOutput() CceNodesRemoveOutput {
	return o
}

func (o CceNodesRemoveOutput) ToCceNodesRemoveOutputWithContext(ctx context.Context) CceNodesRemoveOutput {
	return o
}

func (o CceNodesRemoveOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodesRemove) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o CceNodesRemoveOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CceNodesRemove) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

func (o CceNodesRemoveOutput) Nodes() CceNodesRemoveNodeArrayOutput {
	return o.ApplyT(func(v *CceNodesRemove) CceNodesRemoveNodeArrayOutput { return v.Nodes }).(CceNodesRemoveNodeArrayOutput)
}

func (o CceNodesRemoveOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CceNodesRemove) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type CceNodesRemoveArrayOutput struct{ *pulumi.OutputState }

func (CceNodesRemoveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CceNodesRemove)(nil)).Elem()
}

func (o CceNodesRemoveArrayOutput) ToCceNodesRemoveArrayOutput() CceNodesRemoveArrayOutput {
	return o
}

func (o CceNodesRemoveArrayOutput) ToCceNodesRemoveArrayOutputWithContext(ctx context.Context) CceNodesRemoveArrayOutput {
	return o
}

func (o CceNodesRemoveArrayOutput) Index(i pulumi.IntInput) CceNodesRemoveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CceNodesRemove {
		return vs[0].([]*CceNodesRemove)[vs[1].(int)]
	}).(CceNodesRemoveOutput)
}

type CceNodesRemoveMapOutput struct{ *pulumi.OutputState }

func (CceNodesRemoveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CceNodesRemove)(nil)).Elem()
}

func (o CceNodesRemoveMapOutput) ToCceNodesRemoveMapOutput() CceNodesRemoveMapOutput {
	return o
}

func (o CceNodesRemoveMapOutput) ToCceNodesRemoveMapOutputWithContext(ctx context.Context) CceNodesRemoveMapOutput {
	return o
}

func (o CceNodesRemoveMapOutput) MapIndex(k pulumi.StringInput) CceNodesRemoveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CceNodesRemove {
		return vs[0].(map[string]*CceNodesRemove)[vs[1].(string)]
	}).(CceNodesRemoveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CceNodesRemoveInput)(nil)).Elem(), &CceNodesRemove{})
	pulumi.RegisterInputType(reflect.TypeOf((*CceNodesRemoveArrayInput)(nil)).Elem(), CceNodesRemoveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CceNodesRemoveMapInput)(nil)).Elem(), CceNodesRemoveMap{})
	pulumi.RegisterOutputType(CceNodesRemoveOutput{})
	pulumi.RegisterOutputType(CceNodesRemoveArrayOutput{})
	pulumi.RegisterOutputType(CceNodesRemoveMapOutput{})
}

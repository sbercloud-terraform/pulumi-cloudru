# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ServiceDiscoveryRuleDiscoveryRule',
    'ServiceDiscoveryRuleLogPathRule',
    'ServiceDiscoveryRuleNameRules',
    'ServiceDiscoveryRuleNameRulesApplicationNameRule',
    'ServiceDiscoveryRuleNameRulesServiceNameRule',
]

@pulumi.output_type
class ServiceDiscoveryRuleDiscoveryRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkContents":
            suggest = "check_contents"
        elif key == "checkMode":
            suggest = "check_mode"
        elif key == "checkType":
            suggest = "check_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleDiscoveryRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleDiscoveryRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleDiscoveryRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_contents: Sequence[_builtins.str],
                 check_mode: _builtins.str,
                 check_type: _builtins.str):
        pulumi.set(__self__, "check_contents", check_contents)
        pulumi.set(__self__, "check_mode", check_mode)
        pulumi.set(__self__, "check_type", check_type)

    @_builtins.property
    @pulumi.getter(name="checkContents")
    def check_contents(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "check_contents")

    @_builtins.property
    @pulumi.getter(name="checkMode")
    def check_mode(self) -> _builtins.str:
        return pulumi.get(self, "check_mode")

    @_builtins.property
    @pulumi.getter(name="checkType")
    def check_type(self) -> _builtins.str:
        return pulumi.get(self, "check_type")


@pulumi.output_type
class ServiceDiscoveryRuleLogPathRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleLogPathRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleLogPathRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleLogPathRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 name_type: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter(name="nameType")
    def name_type(self) -> _builtins.str:
        return pulumi.get(self, "name_type")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ServiceDiscoveryRuleNameRules(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationNameRules":
            suggest = "application_name_rules"
        elif key == "serviceNameRules":
            suggest = "service_name_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleNameRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleNameRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleNameRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_name_rules: Sequence['outputs.ServiceDiscoveryRuleNameRulesApplicationNameRule'],
                 service_name_rules: Sequence['outputs.ServiceDiscoveryRuleNameRulesServiceNameRule']):
        pulumi.set(__self__, "application_name_rules", application_name_rules)
        pulumi.set(__self__, "service_name_rules", service_name_rules)

    @_builtins.property
    @pulumi.getter(name="applicationNameRules")
    def application_name_rules(self) -> Sequence['outputs.ServiceDiscoveryRuleNameRulesApplicationNameRule']:
        return pulumi.get(self, "application_name_rules")

    @_builtins.property
    @pulumi.getter(name="serviceNameRules")
    def service_name_rules(self) -> Sequence['outputs.ServiceDiscoveryRuleNameRulesServiceNameRule']:
        return pulumi.get(self, "service_name_rules")


@pulumi.output_type
class ServiceDiscoveryRuleNameRulesApplicationNameRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleNameRulesApplicationNameRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleNameRulesApplicationNameRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleNameRulesApplicationNameRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 name_type: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter(name="nameType")
    def name_type(self) -> _builtins.str:
        return pulumi.get(self, "name_type")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ServiceDiscoveryRuleNameRulesServiceNameRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameType":
            suggest = "name_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDiscoveryRuleNameRulesServiceNameRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDiscoveryRuleNameRulesServiceNameRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDiscoveryRuleNameRulesServiceNameRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 args: Sequence[_builtins.str],
                 name_type: _builtins.str,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "name_type", name_type)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "args")

    @_builtins.property
    @pulumi.getter(name="nameType")
    def name_type(self) -> _builtins.str:
        return pulumi.get(self, "name_type")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")



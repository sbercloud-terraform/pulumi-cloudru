// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages an AS bandwidth scaling policy resource within SberCloud.
//
// > AS cannot scale yearly/monthly bandwidths.
//
// ## Example Usage
//
// ### AS Recurrence Policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/as"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			bandwidthId := cfg.RequireObject("bandwidthId")
//			_, err := as.NewBandwidthPolicy(ctx, "bw_policy", &as.BandwidthPolicyArgs{
//				ScalingPolicyName: pulumi.String("bw_policy"),
//				ScalingPolicyType: pulumi.String("RECURRENCE"),
//				BandwidthId:       pulumi.Any(bandwidthId),
//				CoolDownTime:      pulumi.Int(600),
//				ScalingPolicyAction: &as.BandwidthPolicyScalingPolicyActionArgs{
//					Operation: pulumi.String("ADD"),
//					Size:      pulumi.Int(1),
//				},
//				ScheduledPolicy: &as.BandwidthPolicyScheduledPolicyArgs{
//					LaunchTime:      pulumi.String("07:00"),
//					RecurrenceType:  pulumi.String("Weekly"),
//					RecurrenceValue: pulumi.String("1,3,5"),
//					StartTime:       pulumi.String("2022-09-30T12:00Z"),
//					EndTime:         pulumi.String("2022-12-30T12:00Z"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### AS Scheduled Policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/as"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			bandwidthId := cfg.RequireObject("bandwidthId")
//			_, err := as.NewBandwidthPolicy(ctx, "bw_policy", &as.BandwidthPolicyArgs{
//				ScalingPolicyName: pulumi.String("bw_policy"),
//				ScalingPolicyType: pulumi.String("SCHEDULED"),
//				BandwidthId:       pulumi.Any(bandwidthId),
//				CoolDownTime:      pulumi.Int(600),
//				ScalingPolicyAction: &as.BandwidthPolicyScalingPolicyActionArgs{
//					Operation: pulumi.String("ADD"),
//					Size:      pulumi.Int(1),
//				},
//				ScheduledPolicy: &as.BandwidthPolicyScheduledPolicyArgs{
//					LaunchTime: pulumi.String("2022-09-30T12:00Z"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### AS Alarm Policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/as"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			bandwidthId := cfg.RequireObject("bandwidthId")
//			alarmId := cfg.RequireObject("alarmId")
//			_, err := as.NewBandwidthPolicy(ctx, "test", &as.BandwidthPolicyArgs{
//				ScalingPolicyName: pulumi.String("bw_policy"),
//				ScalingPolicyType: pulumi.String("ALARM"),
//				BandwidthId:       pulumi.Any(bandwidthId),
//				AlarmId:           pulumi.Any(alarmId),
//				ScalingPolicyAction: &as.BandwidthPolicyScalingPolicyActionArgs{
//					Operation: pulumi.String("ADD"),
//					Size:      pulumi.Int(1),
//					Limits:    pulumi.Int(300),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The bandwidth scaling policies can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import sbercloud:As/bandwidthPolicy:BandwidthPolicy test 0ce123456a00f2591fabc00385ff1234
// ```
type BandwidthPolicy struct {
	pulumi.CustomResourceState

	// Specifies identification of operation the AS bandwidth policy.
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// Specifies the alarm rule ID.
	// This parameter is mandatory when `scalingPolicyType` is set to ALARM.
	AlarmId pulumi.StringOutput `pulumi:"alarmId"`
	// Specifies the scaling bandwidth ID.
	BandwidthId pulumi.StringOutput `pulumi:"bandwidthId"`
	// Specifies the cooldown period (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	CoolDownTime pulumi.IntOutput `pulumi:"coolDownTime"`
	// The creation time of the bandwidth policy.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the description of the AS policy.
	// The value can contain 0 to 256 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// Specifies the alarm interval of the bandwidth policy.
	IntervalAlarmActions BandwidthPolicyIntervalAlarmActionArrayOutput `pulumi:"intervalAlarmActions"`
	// The bandwidth policy additional information.
	MetaDatas BandwidthPolicyMetaDataArrayOutput `pulumi:"metaDatas"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the scaling action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction BandwidthPolicyScalingPolicyActionOutput `pulumi:"scalingPolicyAction"`
	// Specifies the AS policy name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	ScalingPolicyName pulumi.StringOutput `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type. The options are as follows:
	// - **ALARM** (corresponding to `alarmId`): indicates that the scaling action is triggered by an alarm.
	// - **SCHEDULED** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered as scheduled.
	// - **RECURRENCE** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered periodically.
	ScalingPolicyType pulumi.StringOutput `pulumi:"scalingPolicyType"`
	// The scaling resource type. The value is fixed to **BANDWIDTH**.
	ScalingResourceType pulumi.StringOutput `pulumi:"scalingResourceType"`
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to SCHEDULED or RECURRENCE.
	// The object structure is documented below.
	//
	// <a name="ASBandWidthPolicy_ScalingPolicyAction"></a>
	// The `scalingPolicyAction` block supports:
	ScheduledPolicy BandwidthPolicyScheduledPolicyOutput `pulumi:"scheduledPolicy"`
	// The AS policy status. The value can be **INSERVICE**, **PAUSED** and **EXECUTING**.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBandwidthPolicy registers a new resource with the given unique name, arguments, and options.
func NewBandwidthPolicy(ctx *pulumi.Context,
	name string, args *BandwidthPolicyArgs, opts ...pulumi.ResourceOption) (*BandwidthPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BandwidthId == nil {
		return nil, errors.New("invalid value for required argument 'BandwidthId'")
	}
	if args.ScalingPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyName'")
	}
	if args.ScalingPolicyType == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BandwidthPolicy
	err := ctx.RegisterResource("sbercloud:As/bandwidthPolicy:BandwidthPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBandwidthPolicy gets an existing BandwidthPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBandwidthPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BandwidthPolicyState, opts ...pulumi.ResourceOption) (*BandwidthPolicy, error) {
	var resource BandwidthPolicy
	err := ctx.ReadResource("sbercloud:As/bandwidthPolicy:BandwidthPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BandwidthPolicy resources.
type bandwidthPolicyState struct {
	// Specifies identification of operation the AS bandwidth policy.
	Action *string `pulumi:"action"`
	// Specifies the alarm rule ID.
	// This parameter is mandatory when `scalingPolicyType` is set to ALARM.
	AlarmId *string `pulumi:"alarmId"`
	// Specifies the scaling bandwidth ID.
	BandwidthId *string `pulumi:"bandwidthId"`
	// Specifies the cooldown period (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	CoolDownTime *int `pulumi:"coolDownTime"`
	// The creation time of the bandwidth policy.
	CreateTime *string `pulumi:"createTime"`
	// Specifies the description of the AS policy.
	// The value can contain 0 to 256 characters.
	Description *string `pulumi:"description"`
	// Specifies the alarm interval of the bandwidth policy.
	IntervalAlarmActions []BandwidthPolicyIntervalAlarmAction `pulumi:"intervalAlarmActions"`
	// The bandwidth policy additional information.
	MetaDatas []BandwidthPolicyMetaData `pulumi:"metaDatas"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the scaling action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction *BandwidthPolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	// Specifies the AS policy name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	ScalingPolicyName *string `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type. The options are as follows:
	// - **ALARM** (corresponding to `alarmId`): indicates that the scaling action is triggered by an alarm.
	// - **SCHEDULED** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered as scheduled.
	// - **RECURRENCE** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered periodically.
	ScalingPolicyType *string `pulumi:"scalingPolicyType"`
	// The scaling resource type. The value is fixed to **BANDWIDTH**.
	ScalingResourceType *string `pulumi:"scalingResourceType"`
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to SCHEDULED or RECURRENCE.
	// The object structure is documented below.
	//
	// <a name="ASBandWidthPolicy_ScalingPolicyAction"></a>
	// The `scalingPolicyAction` block supports:
	ScheduledPolicy *BandwidthPolicyScheduledPolicy `pulumi:"scheduledPolicy"`
	// The AS policy status. The value can be **INSERVICE**, **PAUSED** and **EXECUTING**.
	Status *string `pulumi:"status"`
}

type BandwidthPolicyState struct {
	// Specifies identification of operation the AS bandwidth policy.
	Action pulumi.StringPtrInput
	// Specifies the alarm rule ID.
	// This parameter is mandatory when `scalingPolicyType` is set to ALARM.
	AlarmId pulumi.StringPtrInput
	// Specifies the scaling bandwidth ID.
	BandwidthId pulumi.StringPtrInput
	// Specifies the cooldown period (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	CoolDownTime pulumi.IntPtrInput
	// The creation time of the bandwidth policy.
	CreateTime pulumi.StringPtrInput
	// Specifies the description of the AS policy.
	// The value can contain 0 to 256 characters.
	Description pulumi.StringPtrInput
	// Specifies the alarm interval of the bandwidth policy.
	IntervalAlarmActions BandwidthPolicyIntervalAlarmActionArrayInput
	// The bandwidth policy additional information.
	MetaDatas BandwidthPolicyMetaDataArrayInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the scaling action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction BandwidthPolicyScalingPolicyActionPtrInput
	// Specifies the AS policy name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	ScalingPolicyName pulumi.StringPtrInput
	// Specifies the AS policy type. The options are as follows:
	// - **ALARM** (corresponding to `alarmId`): indicates that the scaling action is triggered by an alarm.
	// - **SCHEDULED** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered as scheduled.
	// - **RECURRENCE** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered periodically.
	ScalingPolicyType pulumi.StringPtrInput
	// The scaling resource type. The value is fixed to **BANDWIDTH**.
	ScalingResourceType pulumi.StringPtrInput
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to SCHEDULED or RECURRENCE.
	// The object structure is documented below.
	//
	// <a name="ASBandWidthPolicy_ScalingPolicyAction"></a>
	// The `scalingPolicyAction` block supports:
	ScheduledPolicy BandwidthPolicyScheduledPolicyPtrInput
	// The AS policy status. The value can be **INSERVICE**, **PAUSED** and **EXECUTING**.
	Status pulumi.StringPtrInput
}

func (BandwidthPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthPolicyState)(nil)).Elem()
}

type bandwidthPolicyArgs struct {
	// Specifies identification of operation the AS bandwidth policy.
	Action *string `pulumi:"action"`
	// Specifies the alarm rule ID.
	// This parameter is mandatory when `scalingPolicyType` is set to ALARM.
	AlarmId *string `pulumi:"alarmId"`
	// Specifies the scaling bandwidth ID.
	BandwidthId string `pulumi:"bandwidthId"`
	// Specifies the cooldown period (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	CoolDownTime *int `pulumi:"coolDownTime"`
	// Specifies the description of the AS policy.
	// The value can contain 0 to 256 characters.
	Description *string `pulumi:"description"`
	// Specifies the alarm interval of the bandwidth policy.
	IntervalAlarmActions []BandwidthPolicyIntervalAlarmAction `pulumi:"intervalAlarmActions"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the scaling action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction *BandwidthPolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	// Specifies the AS policy name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	ScalingPolicyName string `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type. The options are as follows:
	// - **ALARM** (corresponding to `alarmId`): indicates that the scaling action is triggered by an alarm.
	// - **SCHEDULED** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered as scheduled.
	// - **RECURRENCE** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered periodically.
	ScalingPolicyType string `pulumi:"scalingPolicyType"`
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to SCHEDULED or RECURRENCE.
	// The object structure is documented below.
	//
	// <a name="ASBandWidthPolicy_ScalingPolicyAction"></a>
	// The `scalingPolicyAction` block supports:
	ScheduledPolicy *BandwidthPolicyScheduledPolicy `pulumi:"scheduledPolicy"`
}

// The set of arguments for constructing a BandwidthPolicy resource.
type BandwidthPolicyArgs struct {
	// Specifies identification of operation the AS bandwidth policy.
	Action pulumi.StringPtrInput
	// Specifies the alarm rule ID.
	// This parameter is mandatory when `scalingPolicyType` is set to ALARM.
	AlarmId pulumi.StringPtrInput
	// Specifies the scaling bandwidth ID.
	BandwidthId pulumi.StringInput
	// Specifies the cooldown period (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	CoolDownTime pulumi.IntPtrInput
	// Specifies the description of the AS policy.
	// The value can contain 0 to 256 characters.
	Description pulumi.StringPtrInput
	// Specifies the alarm interval of the bandwidth policy.
	IntervalAlarmActions BandwidthPolicyIntervalAlarmActionArrayInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the scaling action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction BandwidthPolicyScalingPolicyActionPtrInput
	// Specifies the AS policy name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	ScalingPolicyName pulumi.StringInput
	// Specifies the AS policy type. The options are as follows:
	// - **ALARM** (corresponding to `alarmId`): indicates that the scaling action is triggered by an alarm.
	// - **SCHEDULED** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered as scheduled.
	// - **RECURRENCE** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered periodically.
	ScalingPolicyType pulumi.StringInput
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to SCHEDULED or RECURRENCE.
	// The object structure is documented below.
	//
	// <a name="ASBandWidthPolicy_ScalingPolicyAction"></a>
	// The `scalingPolicyAction` block supports:
	ScheduledPolicy BandwidthPolicyScheduledPolicyPtrInput
}

func (BandwidthPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthPolicyArgs)(nil)).Elem()
}

type BandwidthPolicyInput interface {
	pulumi.Input

	ToBandwidthPolicyOutput() BandwidthPolicyOutput
	ToBandwidthPolicyOutputWithContext(ctx context.Context) BandwidthPolicyOutput
}

func (*BandwidthPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BandwidthPolicy)(nil)).Elem()
}

func (i *BandwidthPolicy) ToBandwidthPolicyOutput() BandwidthPolicyOutput {
	return i.ToBandwidthPolicyOutputWithContext(context.Background())
}

func (i *BandwidthPolicy) ToBandwidthPolicyOutputWithContext(ctx context.Context) BandwidthPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPolicyOutput)
}

// BandwidthPolicyArrayInput is an input type that accepts BandwidthPolicyArray and BandwidthPolicyArrayOutput values.
// You can construct a concrete instance of `BandwidthPolicyArrayInput` via:
//
//	BandwidthPolicyArray{ BandwidthPolicyArgs{...} }
type BandwidthPolicyArrayInput interface {
	pulumi.Input

	ToBandwidthPolicyArrayOutput() BandwidthPolicyArrayOutput
	ToBandwidthPolicyArrayOutputWithContext(context.Context) BandwidthPolicyArrayOutput
}

type BandwidthPolicyArray []BandwidthPolicyInput

func (BandwidthPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BandwidthPolicy)(nil)).Elem()
}

func (i BandwidthPolicyArray) ToBandwidthPolicyArrayOutput() BandwidthPolicyArrayOutput {
	return i.ToBandwidthPolicyArrayOutputWithContext(context.Background())
}

func (i BandwidthPolicyArray) ToBandwidthPolicyArrayOutputWithContext(ctx context.Context) BandwidthPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPolicyArrayOutput)
}

// BandwidthPolicyMapInput is an input type that accepts BandwidthPolicyMap and BandwidthPolicyMapOutput values.
// You can construct a concrete instance of `BandwidthPolicyMapInput` via:
//
//	BandwidthPolicyMap{ "key": BandwidthPolicyArgs{...} }
type BandwidthPolicyMapInput interface {
	pulumi.Input

	ToBandwidthPolicyMapOutput() BandwidthPolicyMapOutput
	ToBandwidthPolicyMapOutputWithContext(context.Context) BandwidthPolicyMapOutput
}

type BandwidthPolicyMap map[string]BandwidthPolicyInput

func (BandwidthPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BandwidthPolicy)(nil)).Elem()
}

func (i BandwidthPolicyMap) ToBandwidthPolicyMapOutput() BandwidthPolicyMapOutput {
	return i.ToBandwidthPolicyMapOutputWithContext(context.Background())
}

func (i BandwidthPolicyMap) ToBandwidthPolicyMapOutputWithContext(ctx context.Context) BandwidthPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPolicyMapOutput)
}

type BandwidthPolicyOutput struct{ *pulumi.OutputState }

func (BandwidthPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BandwidthPolicy)(nil)).Elem()
}

func (o BandwidthPolicyOutput) ToBandwidthPolicyOutput() BandwidthPolicyOutput {
	return o
}

func (o BandwidthPolicyOutput) ToBandwidthPolicyOutputWithContext(ctx context.Context) BandwidthPolicyOutput {
	return o
}

// Specifies identification of operation the AS bandwidth policy.
func (o BandwidthPolicyOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// Specifies the alarm rule ID.
// This parameter is mandatory when `scalingPolicyType` is set to ALARM.
func (o BandwidthPolicyOutput) AlarmId() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.AlarmId }).(pulumi.StringOutput)
}

// Specifies the scaling bandwidth ID.
func (o BandwidthPolicyOutput) BandwidthId() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.BandwidthId }).(pulumi.StringOutput)
}

// Specifies the cooldown period (in seconds).
// The value ranges from 0 to 86400 and is 300 by default.
func (o BandwidthPolicyOutput) CoolDownTime() pulumi.IntOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.IntOutput { return v.CoolDownTime }).(pulumi.IntOutput)
}

// The creation time of the bandwidth policy.
func (o BandwidthPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the description of the AS policy.
// The value can contain 0 to 256 characters.
func (o BandwidthPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Specifies the alarm interval of the bandwidth policy.
func (o BandwidthPolicyOutput) IntervalAlarmActions() BandwidthPolicyIntervalAlarmActionArrayOutput {
	return o.ApplyT(func(v *BandwidthPolicy) BandwidthPolicyIntervalAlarmActionArrayOutput { return v.IntervalAlarmActions }).(BandwidthPolicyIntervalAlarmActionArrayOutput)
}

// The bandwidth policy additional information.
func (o BandwidthPolicyOutput) MetaDatas() BandwidthPolicyMetaDataArrayOutput {
	return o.ApplyT(func(v *BandwidthPolicy) BandwidthPolicyMetaDataArrayOutput { return v.MetaDatas }).(BandwidthPolicyMetaDataArrayOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o BandwidthPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the scaling action of the AS policy.
// The object structure is documented below.
func (o BandwidthPolicyOutput) ScalingPolicyAction() BandwidthPolicyScalingPolicyActionOutput {
	return o.ApplyT(func(v *BandwidthPolicy) BandwidthPolicyScalingPolicyActionOutput { return v.ScalingPolicyAction }).(BandwidthPolicyScalingPolicyActionOutput)
}

// Specifies the AS policy name.
// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
func (o BandwidthPolicyOutput) ScalingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.ScalingPolicyName }).(pulumi.StringOutput)
}

// Specifies the AS policy type. The options are as follows:
// - **ALARM** (corresponding to `alarmId`): indicates that the scaling action is triggered by an alarm.
// - **SCHEDULED** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered as scheduled.
// - **RECURRENCE** (corresponding to `scheduledPolicy`): indicates that the scaling action is triggered periodically.
func (o BandwidthPolicyOutput) ScalingPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.ScalingPolicyType }).(pulumi.StringOutput)
}

// The scaling resource type. The value is fixed to **BANDWIDTH**.
func (o BandwidthPolicyOutput) ScalingResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.ScalingResourceType }).(pulumi.StringOutput)
}

// Specifies the periodic or scheduled AS policy.
// This parameter is mandatory when `scalingPolicyType` is set to SCHEDULED or RECURRENCE.
// The object structure is documented below.
//
// <a name="ASBandWidthPolicy_ScalingPolicyAction"></a>
// The `scalingPolicyAction` block supports:
func (o BandwidthPolicyOutput) ScheduledPolicy() BandwidthPolicyScheduledPolicyOutput {
	return o.ApplyT(func(v *BandwidthPolicy) BandwidthPolicyScheduledPolicyOutput { return v.ScheduledPolicy }).(BandwidthPolicyScheduledPolicyOutput)
}

// The AS policy status. The value can be **INSERVICE**, **PAUSED** and **EXECUTING**.
func (o BandwidthPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BandwidthPolicyArrayOutput struct{ *pulumi.OutputState }

func (BandwidthPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BandwidthPolicy)(nil)).Elem()
}

func (o BandwidthPolicyArrayOutput) ToBandwidthPolicyArrayOutput() BandwidthPolicyArrayOutput {
	return o
}

func (o BandwidthPolicyArrayOutput) ToBandwidthPolicyArrayOutputWithContext(ctx context.Context) BandwidthPolicyArrayOutput {
	return o
}

func (o BandwidthPolicyArrayOutput) Index(i pulumi.IntInput) BandwidthPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BandwidthPolicy {
		return vs[0].([]*BandwidthPolicy)[vs[1].(int)]
	}).(BandwidthPolicyOutput)
}

type BandwidthPolicyMapOutput struct{ *pulumi.OutputState }

func (BandwidthPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BandwidthPolicy)(nil)).Elem()
}

func (o BandwidthPolicyMapOutput) ToBandwidthPolicyMapOutput() BandwidthPolicyMapOutput {
	return o
}

func (o BandwidthPolicyMapOutput) ToBandwidthPolicyMapOutputWithContext(ctx context.Context) BandwidthPolicyMapOutput {
	return o
}

func (o BandwidthPolicyMapOutput) MapIndex(k pulumi.StringInput) BandwidthPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BandwidthPolicy {
		return vs[0].(map[string]*BandwidthPolicy)[vs[1].(string)]
	}).(BandwidthPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPolicyInput)(nil)).Elem(), &BandwidthPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPolicyArrayInput)(nil)).Elem(), BandwidthPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPolicyMapInput)(nil)).Elem(), BandwidthPolicyMap{})
	pulumi.RegisterOutputType(BandwidthPolicyOutput{})
	pulumi.RegisterOutputType(BandwidthPolicyArrayOutput{})
	pulumi.RegisterOutputType(BandwidthPolicyMapOutput{})
}

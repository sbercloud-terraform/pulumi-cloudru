// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Alarmrule struct {
	pulumi.CustomResourceState

	AlarmActionEnabled  pulumi.BoolPtrOutput            `pulumi:"alarmActionEnabled"`
	AlarmActions        AlarmruleAlarmActionArrayOutput `pulumi:"alarmActions"`
	AlarmDescription    pulumi.StringPtrOutput          `pulumi:"alarmDescription"`
	AlarmEnabled        pulumi.BoolPtrOutput            `pulumi:"alarmEnabled"`
	AlarmLevel          pulumi.IntPtrOutput             `pulumi:"alarmLevel"`
	AlarmName           pulumi.StringOutput             `pulumi:"alarmName"`
	AlarmState          pulumi.StringOutput             `pulumi:"alarmState"`
	AlarmType           pulumi.StringOutput             `pulumi:"alarmType"`
	Condition           AlarmruleConditionOutput        `pulumi:"condition"`
	EnterpriseProjectId pulumi.StringOutput             `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions AlarmruleInsufficientdataActionArrayOutput `pulumi:"insufficientdataActions"`
	Metric                  AlarmruleMetricOutput                      `pulumi:"metric"`
	OkActions               AlarmruleOkActionArrayOutput               `pulumi:"okActions"`
	Region                  pulumi.StringOutput                        `pulumi:"region"`
	UpdateTime              pulumi.IntOutput                           `pulumi:"updateTime"`
}

// NewAlarmrule registers a new resource with the given unique name, arguments, and options.
func NewAlarmrule(ctx *pulumi.Context,
	name string, args *AlarmruleArgs, opts ...pulumi.ResourceOption) (*Alarmrule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmName == nil {
		return nil, errors.New("invalid value for required argument 'AlarmName'")
	}
	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Alarmrule
	err := ctx.RegisterResource("sbercloud:Ces/alarmrule:Alarmrule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlarmrule gets an existing Alarmrule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarmrule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlarmruleState, opts ...pulumi.ResourceOption) (*Alarmrule, error) {
	var resource Alarmrule
	err := ctx.ReadResource("sbercloud:Ces/alarmrule:Alarmrule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alarmrule resources.
type alarmruleState struct {
	AlarmActionEnabled  *bool                  `pulumi:"alarmActionEnabled"`
	AlarmActions        []AlarmruleAlarmAction `pulumi:"alarmActions"`
	AlarmDescription    *string                `pulumi:"alarmDescription"`
	AlarmEnabled        *bool                  `pulumi:"alarmEnabled"`
	AlarmLevel          *int                   `pulumi:"alarmLevel"`
	AlarmName           *string                `pulumi:"alarmName"`
	AlarmState          *string                `pulumi:"alarmState"`
	AlarmType           *string                `pulumi:"alarmType"`
	Condition           *AlarmruleCondition    `pulumi:"condition"`
	EnterpriseProjectId *string                `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions []AlarmruleInsufficientdataAction `pulumi:"insufficientdataActions"`
	Metric                  *AlarmruleMetric                  `pulumi:"metric"`
	OkActions               []AlarmruleOkAction               `pulumi:"okActions"`
	Region                  *string                           `pulumi:"region"`
	UpdateTime              *int                              `pulumi:"updateTime"`
}

type AlarmruleState struct {
	AlarmActionEnabled  pulumi.BoolPtrInput
	AlarmActions        AlarmruleAlarmActionArrayInput
	AlarmDescription    pulumi.StringPtrInput
	AlarmEnabled        pulumi.BoolPtrInput
	AlarmLevel          pulumi.IntPtrInput
	AlarmName           pulumi.StringPtrInput
	AlarmState          pulumi.StringPtrInput
	AlarmType           pulumi.StringPtrInput
	Condition           AlarmruleConditionPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions AlarmruleInsufficientdataActionArrayInput
	Metric                  AlarmruleMetricPtrInput
	OkActions               AlarmruleOkActionArrayInput
	Region                  pulumi.StringPtrInput
	UpdateTime              pulumi.IntPtrInput
}

func (AlarmruleState) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmruleState)(nil)).Elem()
}

type alarmruleArgs struct {
	AlarmActionEnabled  *bool                  `pulumi:"alarmActionEnabled"`
	AlarmActions        []AlarmruleAlarmAction `pulumi:"alarmActions"`
	AlarmDescription    *string                `pulumi:"alarmDescription"`
	AlarmEnabled        *bool                  `pulumi:"alarmEnabled"`
	AlarmLevel          *int                   `pulumi:"alarmLevel"`
	AlarmName           string                 `pulumi:"alarmName"`
	AlarmType           *string                `pulumi:"alarmType"`
	Condition           AlarmruleCondition     `pulumi:"condition"`
	EnterpriseProjectId *string                `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions []AlarmruleInsufficientdataAction `pulumi:"insufficientdataActions"`
	Metric                  AlarmruleMetric                   `pulumi:"metric"`
	OkActions               []AlarmruleOkAction               `pulumi:"okActions"`
	Region                  *string                           `pulumi:"region"`
}

// The set of arguments for constructing a Alarmrule resource.
type AlarmruleArgs struct {
	AlarmActionEnabled  pulumi.BoolPtrInput
	AlarmActions        AlarmruleAlarmActionArrayInput
	AlarmDescription    pulumi.StringPtrInput
	AlarmEnabled        pulumi.BoolPtrInput
	AlarmLevel          pulumi.IntPtrInput
	AlarmName           pulumi.StringInput
	AlarmType           pulumi.StringPtrInput
	Condition           AlarmruleConditionInput
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions AlarmruleInsufficientdataActionArrayInput
	Metric                  AlarmruleMetricInput
	OkActions               AlarmruleOkActionArrayInput
	Region                  pulumi.StringPtrInput
}

func (AlarmruleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmruleArgs)(nil)).Elem()
}

type AlarmruleInput interface {
	pulumi.Input

	ToAlarmruleOutput() AlarmruleOutput
	ToAlarmruleOutputWithContext(ctx context.Context) AlarmruleOutput
}

func (*Alarmrule) ElementType() reflect.Type {
	return reflect.TypeOf((**Alarmrule)(nil)).Elem()
}

func (i *Alarmrule) ToAlarmruleOutput() AlarmruleOutput {
	return i.ToAlarmruleOutputWithContext(context.Background())
}

func (i *Alarmrule) ToAlarmruleOutputWithContext(ctx context.Context) AlarmruleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleOutput)
}

// AlarmruleArrayInput is an input type that accepts AlarmruleArray and AlarmruleArrayOutput values.
// You can construct a concrete instance of `AlarmruleArrayInput` via:
//
//	AlarmruleArray{ AlarmruleArgs{...} }
type AlarmruleArrayInput interface {
	pulumi.Input

	ToAlarmruleArrayOutput() AlarmruleArrayOutput
	ToAlarmruleArrayOutputWithContext(context.Context) AlarmruleArrayOutput
}

type AlarmruleArray []AlarmruleInput

func (AlarmruleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alarmrule)(nil)).Elem()
}

func (i AlarmruleArray) ToAlarmruleArrayOutput() AlarmruleArrayOutput {
	return i.ToAlarmruleArrayOutputWithContext(context.Background())
}

func (i AlarmruleArray) ToAlarmruleArrayOutputWithContext(ctx context.Context) AlarmruleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleArrayOutput)
}

// AlarmruleMapInput is an input type that accepts AlarmruleMap and AlarmruleMapOutput values.
// You can construct a concrete instance of `AlarmruleMapInput` via:
//
//	AlarmruleMap{ "key": AlarmruleArgs{...} }
type AlarmruleMapInput interface {
	pulumi.Input

	ToAlarmruleMapOutput() AlarmruleMapOutput
	ToAlarmruleMapOutputWithContext(context.Context) AlarmruleMapOutput
}

type AlarmruleMap map[string]AlarmruleInput

func (AlarmruleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alarmrule)(nil)).Elem()
}

func (i AlarmruleMap) ToAlarmruleMapOutput() AlarmruleMapOutput {
	return i.ToAlarmruleMapOutputWithContext(context.Background())
}

func (i AlarmruleMap) ToAlarmruleMapOutputWithContext(ctx context.Context) AlarmruleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleMapOutput)
}

type AlarmruleOutput struct{ *pulumi.OutputState }

func (AlarmruleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alarmrule)(nil)).Elem()
}

func (o AlarmruleOutput) ToAlarmruleOutput() AlarmruleOutput {
	return o
}

func (o AlarmruleOutput) ToAlarmruleOutputWithContext(ctx context.Context) AlarmruleOutput {
	return o
}

func (o AlarmruleOutput) AlarmActionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.BoolPtrOutput { return v.AlarmActionEnabled }).(pulumi.BoolPtrOutput)
}

func (o AlarmruleOutput) AlarmActions() AlarmruleAlarmActionArrayOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleAlarmActionArrayOutput { return v.AlarmActions }).(AlarmruleAlarmActionArrayOutput)
}

func (o AlarmruleOutput) AlarmDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringPtrOutput { return v.AlarmDescription }).(pulumi.StringPtrOutput)
}

func (o AlarmruleOutput) AlarmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.BoolPtrOutput { return v.AlarmEnabled }).(pulumi.BoolPtrOutput)
}

func (o AlarmruleOutput) AlarmLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.IntPtrOutput { return v.AlarmLevel }).(pulumi.IntPtrOutput)
}

func (o AlarmruleOutput) AlarmName() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.AlarmName }).(pulumi.StringOutput)
}

func (o AlarmruleOutput) AlarmState() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.AlarmState }).(pulumi.StringOutput)
}

func (o AlarmruleOutput) AlarmType() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.AlarmType }).(pulumi.StringOutput)
}

func (o AlarmruleOutput) Condition() AlarmruleConditionOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleConditionOutput { return v.Condition }).(AlarmruleConditionOutput)
}

func (o AlarmruleOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Deprecated: insufficientdata_actions is deprecated
func (o AlarmruleOutput) InsufficientdataActions() AlarmruleInsufficientdataActionArrayOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleInsufficientdataActionArrayOutput { return v.InsufficientdataActions }).(AlarmruleInsufficientdataActionArrayOutput)
}

func (o AlarmruleOutput) Metric() AlarmruleMetricOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleMetricOutput { return v.Metric }).(AlarmruleMetricOutput)
}

func (o AlarmruleOutput) OkActions() AlarmruleOkActionArrayOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleOkActionArrayOutput { return v.OkActions }).(AlarmruleOkActionArrayOutput)
}

func (o AlarmruleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AlarmruleOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.IntOutput { return v.UpdateTime }).(pulumi.IntOutput)
}

type AlarmruleArrayOutput struct{ *pulumi.OutputState }

func (AlarmruleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alarmrule)(nil)).Elem()
}

func (o AlarmruleArrayOutput) ToAlarmruleArrayOutput() AlarmruleArrayOutput {
	return o
}

func (o AlarmruleArrayOutput) ToAlarmruleArrayOutputWithContext(ctx context.Context) AlarmruleArrayOutput {
	return o
}

func (o AlarmruleArrayOutput) Index(i pulumi.IntInput) AlarmruleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alarmrule {
		return vs[0].([]*Alarmrule)[vs[1].(int)]
	}).(AlarmruleOutput)
}

type AlarmruleMapOutput struct{ *pulumi.OutputState }

func (AlarmruleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alarmrule)(nil)).Elem()
}

func (o AlarmruleMapOutput) ToAlarmruleMapOutput() AlarmruleMapOutput {
	return o
}

func (o AlarmruleMapOutput) ToAlarmruleMapOutputWithContext(ctx context.Context) AlarmruleMapOutput {
	return o
}

func (o AlarmruleMapOutput) MapIndex(k pulumi.StringInput) AlarmruleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alarmrule {
		return vs[0].(map[string]*Alarmrule)[vs[1].(string)]
	}).(AlarmruleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleInput)(nil)).Elem(), &Alarmrule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleArrayInput)(nil)).Elem(), AlarmruleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleMapInput)(nil)).Elem(), AlarmruleMap{})
	pulumi.RegisterOutputType(AlarmruleOutput{})
	pulumi.RegisterOutputType(AlarmruleArrayOutput{})
	pulumi.RegisterOutputType(AlarmruleMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * To get the specified node in a cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject<any>("clusterId");
 * const nodeName = config.requireObject<any>("nodeName");
 * const node = sbercloud.Cce.getNode({
 *     clusterId: clusterId,
 *     name: nodeName,
 * });
 * ```
 */
export function getNode(args: GetNodeArgs, opts?: pulumi.InvokeOptions): Promise<GetNodeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Cce/getNode:getNode", {
        "clusterId": args.clusterId,
        "name": args.name,
        "nodeId": args.nodeId,
        "region": args.region,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getNode.
 */
export interface GetNodeArgs {
    /**
     * Specifies the ID of container cluster.
     */
    clusterId: string;
    /**
     * Specifies the name of the node.
     */
    name?: string;
    /**
     * Specifies the ID of the node.
     */
    nodeId?: string;
    /**
     * Specifies the region in which to obtain the CCE nodes.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the state of the node.
     */
    status?: string;
}

/**
 * A collection of values returned by getNode.
 */
export interface GetNodeResult {
    /**
     * Available partitions where the node is located.
     */
    readonly availabilityZone: string;
    /**
     * Node's billing mode: The value is 0 (on demand).
     */
    readonly billingMode: number;
    readonly clusterId: string;
    /**
     * Represents the data disk to be created. Structure is documented below.
     */
    readonly dataVolumes: outputs.Cce.GetNodeDataVolume[];
    /**
     * The ID of ECS group to which the node belongs.
     */
    readonly ecsGroupId: string;
    readonly enterpriseProjectId: string;
    /**
     * The flavor ID to be used.
     */
    readonly flavorId: string;
    readonly hostnameConfigs: outputs.Cce.GetNodeHostnameConfig[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Key pair name when logging in to select the key pair mode.
     */
    readonly keyPair: string;
    readonly name: string;
    readonly nodeId: string;
    /**
     * Operating System of the node.
     */
    readonly os: string;
    /**
     * Private IP of the node.
     */
    readonly privateIp: string;
    /**
     * Elastic IP parameters of the node.
     */
    readonly publicIp: string;
    readonly region: string;
    /**
     * It corresponds to the system disk related configuration. Structure is documented below.
     */
    readonly rootVolumes: outputs.Cce.GetNodeRootVolume[];
    /**
     * The node's virtual machine ID in ECS.
     */
    readonly serverId: string;
    readonly status: string;
    /**
     * The ID of the subnet to which the NIC belongs.
     */
    readonly subnetId: string;
    /**
     * Tags of a VM node, key/value pair format.
     */
    readonly tags: {[key: string]: string};
}
/**
 * To get the specified node in a cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject<any>("clusterId");
 * const nodeName = config.requireObject<any>("nodeName");
 * const node = sbercloud.Cce.getNode({
 *     clusterId: clusterId,
 *     name: nodeName,
 * });
 * ```
 */
export function getNodeOutput(args: GetNodeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNodeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Cce/getNode:getNode", {
        "clusterId": args.clusterId,
        "name": args.name,
        "nodeId": args.nodeId,
        "region": args.region,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getNode.
 */
export interface GetNodeOutputArgs {
    /**
     * Specifies the ID of container cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies the name of the node.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the ID of the node.
     */
    nodeId?: pulumi.Input<string>;
    /**
     * Specifies the region in which to obtain the CCE nodes.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the state of the node.
     */
    status?: pulumi.Input<string>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package er

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type FlowLog struct {
	pulumi.CustomResourceState

	CreatedAt    pulumi.StringOutput    `pulumi:"createdAt"`
	Description  pulumi.StringPtrOutput `pulumi:"description"`
	Enabled      pulumi.BoolPtrOutput   `pulumi:"enabled"`
	InstanceId   pulumi.StringOutput    `pulumi:"instanceId"`
	LogGroupId   pulumi.StringOutput    `pulumi:"logGroupId"`
	LogStoreType pulumi.StringOutput    `pulumi:"logStoreType"`
	LogStreamId  pulumi.StringOutput    `pulumi:"logStreamId"`
	Name         pulumi.StringOutput    `pulumi:"name"`
	Region       pulumi.StringOutput    `pulumi:"region"`
	ResourceId   pulumi.StringOutput    `pulumi:"resourceId"`
	ResourceType pulumi.StringOutput    `pulumi:"resourceType"`
	State        pulumi.StringOutput    `pulumi:"state"`
	UpdatedAt    pulumi.StringOutput    `pulumi:"updatedAt"`
}

// NewFlowLog registers a new resource with the given unique name, arguments, and options.
func NewFlowLog(ctx *pulumi.Context,
	name string, args *FlowLogArgs, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.LogGroupId == nil {
		return nil, errors.New("invalid value for required argument 'LogGroupId'")
	}
	if args.LogStoreType == nil {
		return nil, errors.New("invalid value for required argument 'LogStoreType'")
	}
	if args.LogStreamId == nil {
		return nil, errors.New("invalid value for required argument 'LogStreamId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlowLog
	err := ctx.RegisterResource("cloudru:Er/flowLog:FlowLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLog gets an existing FlowLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowLogState, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	var resource FlowLog
	err := ctx.ReadResource("cloudru:Er/flowLog:FlowLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowLog resources.
type flowLogState struct {
	CreatedAt    *string `pulumi:"createdAt"`
	Description  *string `pulumi:"description"`
	Enabled      *bool   `pulumi:"enabled"`
	InstanceId   *string `pulumi:"instanceId"`
	LogGroupId   *string `pulumi:"logGroupId"`
	LogStoreType *string `pulumi:"logStoreType"`
	LogStreamId  *string `pulumi:"logStreamId"`
	Name         *string `pulumi:"name"`
	Region       *string `pulumi:"region"`
	ResourceId   *string `pulumi:"resourceId"`
	ResourceType *string `pulumi:"resourceType"`
	State        *string `pulumi:"state"`
	UpdatedAt    *string `pulumi:"updatedAt"`
}

type FlowLogState struct {
	CreatedAt    pulumi.StringPtrInput
	Description  pulumi.StringPtrInput
	Enabled      pulumi.BoolPtrInput
	InstanceId   pulumi.StringPtrInput
	LogGroupId   pulumi.StringPtrInput
	LogStoreType pulumi.StringPtrInput
	LogStreamId  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	ResourceId   pulumi.StringPtrInput
	ResourceType pulumi.StringPtrInput
	State        pulumi.StringPtrInput
	UpdatedAt    pulumi.StringPtrInput
}

func (FlowLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogState)(nil)).Elem()
}

type flowLogArgs struct {
	Description  *string `pulumi:"description"`
	Enabled      *bool   `pulumi:"enabled"`
	InstanceId   string  `pulumi:"instanceId"`
	LogGroupId   string  `pulumi:"logGroupId"`
	LogStoreType string  `pulumi:"logStoreType"`
	LogStreamId  string  `pulumi:"logStreamId"`
	Name         *string `pulumi:"name"`
	Region       *string `pulumi:"region"`
	ResourceId   string  `pulumi:"resourceId"`
	ResourceType string  `pulumi:"resourceType"`
}

// The set of arguments for constructing a FlowLog resource.
type FlowLogArgs struct {
	Description  pulumi.StringPtrInput
	Enabled      pulumi.BoolPtrInput
	InstanceId   pulumi.StringInput
	LogGroupId   pulumi.StringInput
	LogStoreType pulumi.StringInput
	LogStreamId  pulumi.StringInput
	Name         pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	ResourceId   pulumi.StringInput
	ResourceType pulumi.StringInput
}

func (FlowLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogArgs)(nil)).Elem()
}

type FlowLogInput interface {
	pulumi.Input

	ToFlowLogOutput() FlowLogOutput
	ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput
}

func (*FlowLog) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (i *FlowLog) ToFlowLogOutput() FlowLogOutput {
	return i.ToFlowLogOutputWithContext(context.Background())
}

func (i *FlowLog) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogOutput)
}

// FlowLogArrayInput is an input type that accepts FlowLogArray and FlowLogArrayOutput values.
// You can construct a concrete instance of `FlowLogArrayInput` via:
//
//	FlowLogArray{ FlowLogArgs{...} }
type FlowLogArrayInput interface {
	pulumi.Input

	ToFlowLogArrayOutput() FlowLogArrayOutput
	ToFlowLogArrayOutputWithContext(context.Context) FlowLogArrayOutput
}

type FlowLogArray []FlowLogInput

func (FlowLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (i FlowLogArray) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return i.ToFlowLogArrayOutputWithContext(context.Background())
}

func (i FlowLogArray) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogArrayOutput)
}

// FlowLogMapInput is an input type that accepts FlowLogMap and FlowLogMapOutput values.
// You can construct a concrete instance of `FlowLogMapInput` via:
//
//	FlowLogMap{ "key": FlowLogArgs{...} }
type FlowLogMapInput interface {
	pulumi.Input

	ToFlowLogMapOutput() FlowLogMapOutput
	ToFlowLogMapOutputWithContext(context.Context) FlowLogMapOutput
}

type FlowLogMap map[string]FlowLogInput

func (FlowLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (i FlowLogMap) ToFlowLogMapOutput() FlowLogMapOutput {
	return i.ToFlowLogMapOutputWithContext(context.Background())
}

func (i FlowLogMap) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogMapOutput)
}

type FlowLogOutput struct{ *pulumi.OutputState }

func (FlowLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (o FlowLogOutput) ToFlowLogOutput() FlowLogOutput {
	return o
}

func (o FlowLogOutput) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return o
}

func (o FlowLogOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o FlowLogOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FlowLogOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o FlowLogOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o FlowLogOutput) LogGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogGroupId }).(pulumi.StringOutput)
}

func (o FlowLogOutput) LogStoreType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogStoreType }).(pulumi.StringOutput)
}

func (o FlowLogOutput) LogStreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogStreamId }).(pulumi.StringOutput)
}

func (o FlowLogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FlowLogOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o FlowLogOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

func (o FlowLogOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

func (o FlowLogOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o FlowLogOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type FlowLogArrayOutput struct{ *pulumi.OutputState }

func (FlowLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) Index(i pulumi.IntInput) FlowLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].([]*FlowLog)[vs[1].(int)]
	}).(FlowLogOutput)
}

type FlowLogMapOutput struct{ *pulumi.OutputState }

func (FlowLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (o FlowLogMapOutput) ToFlowLogMapOutput() FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) MapIndex(k pulumi.StringInput) FlowLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].(map[string]*FlowLog)[vs[1].(string)]
	}).(FlowLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogInput)(nil)).Elem(), &FlowLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogArrayInput)(nil)).Elem(), FlowLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogMapInput)(nil)).Elem(), FlowLogMap{})
	pulumi.RegisterOutputType(FlowLogOutput{})
	pulumi.RegisterOutputType(FlowLogArrayOutput{})
	pulumi.RegisterOutputType(FlowLogMapOutput{})
}

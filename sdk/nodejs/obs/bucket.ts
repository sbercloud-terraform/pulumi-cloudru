// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketState, opts?: pulumi.CustomResourceOptions): Bucket {
        return new Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Obs/bucket:Bucket';

    /**
     * Returns true if the given object is an instance of Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bucket.__pulumiType;
    }

    declare public readonly acl: pulumi.Output<string | undefined>;
    declare public readonly bucket: pulumi.Output<string>;
    declare public /*out*/ readonly bucketDomainName: pulumi.Output<string>;
    declare public /*out*/ readonly bucketVersion: pulumi.Output<string>;
    declare public readonly corsRules: pulumi.Output<outputs.Obs.BucketCorsRule[] | undefined>;
    declare public readonly encryption: pulumi.Output<boolean | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    declare public readonly kmsKeyId: pulumi.Output<string | undefined>;
    declare public readonly kmsKeyProjectId: pulumi.Output<string>;
    declare public readonly lifecycleRules: pulumi.Output<outputs.Obs.BucketLifecycleRule[] | undefined>;
    declare public readonly loggings: pulumi.Output<outputs.Obs.BucketLogging[] | undefined>;
    declare public readonly multiAz: pulumi.Output<boolean>;
    declare public readonly parallelFs: pulumi.Output<boolean | undefined>;
    declare public readonly policy: pulumi.Output<string>;
    declare public readonly policyFormat: pulumi.Output<string | undefined>;
    declare public readonly quota: pulumi.Output<number | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly sseAlgorithm: pulumi.Output<string>;
    declare public readonly storageClass: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly storageInfos: pulumi.Output<outputs.Obs.BucketStorageInfo[]>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly userDomainNames: pulumi.Output<string[]>;
    declare public readonly versioning: pulumi.Output<boolean | undefined>;
    declare public readonly website: pulumi.Output<outputs.Obs.BucketWebsite | undefined>;

    /**
     * Create a Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketArgs | BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketState | undefined;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["bucketDomainName"] = state?.bucketDomainName;
            resourceInputs["bucketVersion"] = state?.bucketVersion;
            resourceInputs["corsRules"] = state?.corsRules;
            resourceInputs["encryption"] = state?.encryption;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["kmsKeyProjectId"] = state?.kmsKeyProjectId;
            resourceInputs["lifecycleRules"] = state?.lifecycleRules;
            resourceInputs["loggings"] = state?.loggings;
            resourceInputs["multiAz"] = state?.multiAz;
            resourceInputs["parallelFs"] = state?.parallelFs;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["policyFormat"] = state?.policyFormat;
            resourceInputs["quota"] = state?.quota;
            resourceInputs["region"] = state?.region;
            resourceInputs["sseAlgorithm"] = state?.sseAlgorithm;
            resourceInputs["storageClass"] = state?.storageClass;
            resourceInputs["storageInfos"] = state?.storageInfos;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["userDomainNames"] = state?.userDomainNames;
            resourceInputs["versioning"] = state?.versioning;
            resourceInputs["website"] = state?.website;
        } else {
            const args = argsOrState as BucketArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["acl"] = args?.acl;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["corsRules"] = args?.corsRules;
            resourceInputs["encryption"] = args?.encryption;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["kmsKeyProjectId"] = args?.kmsKeyProjectId;
            resourceInputs["lifecycleRules"] = args?.lifecycleRules;
            resourceInputs["loggings"] = args?.loggings;
            resourceInputs["multiAz"] = args?.multiAz;
            resourceInputs["parallelFs"] = args?.parallelFs;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["policyFormat"] = args?.policyFormat;
            resourceInputs["quota"] = args?.quota;
            resourceInputs["region"] = args?.region;
            resourceInputs["sseAlgorithm"] = args?.sseAlgorithm;
            resourceInputs["storageClass"] = args?.storageClass;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["userDomainNames"] = args?.userDomainNames;
            resourceInputs["versioning"] = args?.versioning;
            resourceInputs["website"] = args?.website;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
            resourceInputs["bucketVersion"] = undefined /*out*/;
            resourceInputs["storageInfos"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Bucket resources.
 */
export interface BucketState {
    acl?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    bucketDomainName?: pulumi.Input<string>;
    bucketVersion?: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.Obs.BucketCorsRule>[]>;
    encryption?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyProjectId?: pulumi.Input<string>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLifecycleRule>[]>;
    loggings?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLogging>[]>;
    multiAz?: pulumi.Input<boolean>;
    parallelFs?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
    policyFormat?: pulumi.Input<string>;
    quota?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    sseAlgorithm?: pulumi.Input<string>;
    storageClass?: pulumi.Input<string>;
    storageInfos?: pulumi.Input<pulumi.Input<inputs.Obs.BucketStorageInfo>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    versioning?: pulumi.Input<boolean>;
    website?: pulumi.Input<inputs.Obs.BucketWebsite>;
}

/**
 * The set of arguments for constructing a Bucket resource.
 */
export interface BucketArgs {
    acl?: pulumi.Input<string>;
    bucket: pulumi.Input<string>;
    corsRules?: pulumi.Input<pulumi.Input<inputs.Obs.BucketCorsRule>[]>;
    encryption?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    forceDestroy?: pulumi.Input<boolean>;
    kmsKeyId?: pulumi.Input<string>;
    kmsKeyProjectId?: pulumi.Input<string>;
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLifecycleRule>[]>;
    loggings?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLogging>[]>;
    multiAz?: pulumi.Input<boolean>;
    parallelFs?: pulumi.Input<boolean>;
    policy?: pulumi.Input<string>;
    policyFormat?: pulumi.Input<string>;
    quota?: pulumi.Input<number>;
    region?: pulumi.Input<string>;
    sseAlgorithm?: pulumi.Input<string>;
    storageClass?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    userDomainNames?: pulumi.Input<pulumi.Input<string>[]>;
    versioning?: pulumi.Input<boolean>;
    website?: pulumi.Input<inputs.Obs.BucketWebsite>;
}

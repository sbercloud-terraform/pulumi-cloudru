// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class BucketObject extends pulumi.CustomResource {
    /**
     * Get an existing BucketObject resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketObjectState, opts?: pulumi.CustomResourceOptions): BucketObject {
        return new BucketObject(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Obs/bucketObject:BucketObject';

    /**
     * Returns true if the given object is an instance of BucketObject.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketObject {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketObject.__pulumiType;
    }

    declare public readonly acl: pulumi.Output<string | undefined>;
    declare public readonly bucket: pulumi.Output<string>;
    declare public readonly content: pulumi.Output<string | undefined>;
    declare public readonly contentType: pulumi.Output<string>;
    declare public readonly encryption: pulumi.Output<boolean | undefined>;
    declare public readonly etag: pulumi.Output<string>;
    declare public readonly key: pulumi.Output<string>;
    declare public readonly kmsKeyId: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly size: pulumi.Output<number>;
    declare public readonly source: pulumi.Output<string | undefined>;
    declare public readonly storageClass: pulumi.Output<string>;
    declare public /*out*/ readonly versionId: pulumi.Output<string>;

    /**
     * Create a BucketObject resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketObjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketObjectArgs | BucketObjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketObjectState | undefined;
            resourceInputs["acl"] = state?.acl;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["content"] = state?.content;
            resourceInputs["contentType"] = state?.contentType;
            resourceInputs["encryption"] = state?.encryption;
            resourceInputs["etag"] = state?.etag;
            resourceInputs["key"] = state?.key;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["region"] = state?.region;
            resourceInputs["size"] = state?.size;
            resourceInputs["source"] = state?.source;
            resourceInputs["storageClass"] = state?.storageClass;
            resourceInputs["versionId"] = state?.versionId;
        } else {
            const args = argsOrState as BucketObjectArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if (args?.key === undefined && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["acl"] = args?.acl;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["content"] = args?.content;
            resourceInputs["contentType"] = args?.contentType;
            resourceInputs["encryption"] = args?.encryption;
            resourceInputs["etag"] = args?.etag;
            resourceInputs["key"] = args?.key;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["region"] = args?.region;
            resourceInputs["source"] = args?.source;
            resourceInputs["storageClass"] = args?.storageClass;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["versionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketObject.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketObject resources.
 */
export interface BucketObjectState {
    acl?: pulumi.Input<string>;
    bucket?: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    encryption?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    source?: pulumi.Input<string>;
    storageClass?: pulumi.Input<string>;
    versionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketObject resource.
 */
export interface BucketObjectArgs {
    acl?: pulumi.Input<string>;
    bucket: pulumi.Input<string>;
    content?: pulumi.Input<string>;
    contentType?: pulumi.Input<string>;
    encryption?: pulumi.Input<boolean>;
    etag?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    kmsKeyId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    source?: pulumi.Input<string>;
    storageClass?: pulumi.Input<string>;
}

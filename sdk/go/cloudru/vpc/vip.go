// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Vip struct {
	pulumi.CustomResourceState

	DeviceOwner pulumi.StringOutput `pulumi:"deviceOwner"`
	IpAddress   pulumi.StringOutput `pulumi:"ipAddress"`
	IpVersion   pulumi.IntOutput    `pulumi:"ipVersion"`
	MacAddress  pulumi.StringOutput `pulumi:"macAddress"`
	Name        pulumi.StringOutput `pulumi:"name"`
	NetworkId   pulumi.StringOutput `pulumi:"networkId"`
	Region      pulumi.StringOutput `pulumi:"region"`
	Status      pulumi.StringOutput `pulumi:"status"`
	// Deprecated: use ipVersion instead
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewVip registers a new resource with the given unique name, arguments, and options.
func NewVip(ctx *pulumi.Context,
	name string, args *VipArgs, opts ...pulumi.ResourceOption) (*Vip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vip
	err := ctx.RegisterResource("cloudru:Vpc/vip:Vip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVip gets an existing Vip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VipState, opts ...pulumi.ResourceOption) (*Vip, error) {
	var resource Vip
	err := ctx.ReadResource("cloudru:Vpc/vip:Vip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vip resources.
type vipState struct {
	DeviceOwner *string `pulumi:"deviceOwner"`
	IpAddress   *string `pulumi:"ipAddress"`
	IpVersion   *int    `pulumi:"ipVersion"`
	MacAddress  *string `pulumi:"macAddress"`
	Name        *string `pulumi:"name"`
	NetworkId   *string `pulumi:"networkId"`
	Region      *string `pulumi:"region"`
	Status      *string `pulumi:"status"`
	// Deprecated: use ipVersion instead
	SubnetId *string `pulumi:"subnetId"`
}

type VipState struct {
	DeviceOwner pulumi.StringPtrInput
	IpAddress   pulumi.StringPtrInput
	IpVersion   pulumi.IntPtrInput
	MacAddress  pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	NetworkId   pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	Status      pulumi.StringPtrInput
	// Deprecated: use ipVersion instead
	SubnetId pulumi.StringPtrInput
}

func (VipState) ElementType() reflect.Type {
	return reflect.TypeOf((*vipState)(nil)).Elem()
}

type vipArgs struct {
	IpAddress *string `pulumi:"ipAddress"`
	IpVersion *int    `pulumi:"ipVersion"`
	Name      *string `pulumi:"name"`
	NetworkId string  `pulumi:"networkId"`
	Region    *string `pulumi:"region"`
	// Deprecated: use ipVersion instead
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a Vip resource.
type VipArgs struct {
	IpAddress pulumi.StringPtrInput
	IpVersion pulumi.IntPtrInput
	Name      pulumi.StringPtrInput
	NetworkId pulumi.StringInput
	Region    pulumi.StringPtrInput
	// Deprecated: use ipVersion instead
	SubnetId pulumi.StringPtrInput
}

func (VipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vipArgs)(nil)).Elem()
}

type VipInput interface {
	pulumi.Input

	ToVipOutput() VipOutput
	ToVipOutputWithContext(ctx context.Context) VipOutput
}

func (*Vip) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (i *Vip) ToVipOutput() VipOutput {
	return i.ToVipOutputWithContext(context.Background())
}

func (i *Vip) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipOutput)
}

// VipArrayInput is an input type that accepts VipArray and VipArrayOutput values.
// You can construct a concrete instance of `VipArrayInput` via:
//
//	VipArray{ VipArgs{...} }
type VipArrayInput interface {
	pulumi.Input

	ToVipArrayOutput() VipArrayOutput
	ToVipArrayOutputWithContext(context.Context) VipArrayOutput
}

type VipArray []VipInput

func (VipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (i VipArray) ToVipArrayOutput() VipArrayOutput {
	return i.ToVipArrayOutputWithContext(context.Background())
}

func (i VipArray) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipArrayOutput)
}

// VipMapInput is an input type that accepts VipMap and VipMapOutput values.
// You can construct a concrete instance of `VipMapInput` via:
//
//	VipMap{ "key": VipArgs{...} }
type VipMapInput interface {
	pulumi.Input

	ToVipMapOutput() VipMapOutput
	ToVipMapOutputWithContext(context.Context) VipMapOutput
}

type VipMap map[string]VipInput

func (VipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (i VipMap) ToVipMapOutput() VipMapOutput {
	return i.ToVipMapOutputWithContext(context.Background())
}

func (i VipMap) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipMapOutput)
}

type VipOutput struct{ *pulumi.OutputState }

func (VipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (o VipOutput) ToVipOutput() VipOutput {
	return o
}

func (o VipOutput) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return o
}

func (o VipOutput) DeviceOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.DeviceOwner }).(pulumi.StringOutput)
}

func (o VipOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

func (o VipOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.IpVersion }).(pulumi.IntOutput)
}

func (o VipOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

func (o VipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VipOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o VipOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Deprecated: use ipVersion instead
func (o VipOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type VipArrayOutput struct{ *pulumi.OutputState }

func (VipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (o VipArrayOutput) ToVipArrayOutput() VipArrayOutput {
	return o
}

func (o VipArrayOutput) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return o
}

func (o VipArrayOutput) Index(i pulumi.IntInput) VipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].([]*Vip)[vs[1].(int)]
	}).(VipOutput)
}

type VipMapOutput struct{ *pulumi.OutputState }

func (VipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (o VipMapOutput) ToVipMapOutput() VipMapOutput {
	return o
}

func (o VipMapOutput) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return o
}

func (o VipMapOutput) MapIndex(k pulumi.StringInput) VipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].(map[string]*Vip)[vs[1].(string)]
	}).(VipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VipInput)(nil)).Elem(), &Vip{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipArrayInput)(nil)).Elem(), VipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipMapInput)(nil)).Elem(), VipMap{})
	pulumi.RegisterOutputType(VipOutput{})
	pulumi.RegisterOutputType(VipArrayOutput{})
	pulumi.RegisterOutputType(VipMapOutput{})
}

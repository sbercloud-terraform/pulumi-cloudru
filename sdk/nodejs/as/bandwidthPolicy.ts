// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class BandwidthPolicy extends pulumi.CustomResource {
    /**
     * Get an existing BandwidthPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BandwidthPolicyState, opts?: pulumi.CustomResourceOptions): BandwidthPolicy {
        return new BandwidthPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:As/bandwidthPolicy:BandwidthPolicy';

    /**
     * Returns true if the given object is an instance of BandwidthPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BandwidthPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BandwidthPolicy.__pulumiType;
    }

    /**
     * Specifies identification of operation the AS bandwidth policy.
     */
    declare public readonly action: pulumi.Output<string | undefined>;
    /**
     * Specifies the alarm rule ID.
     */
    declare public readonly alarmId: pulumi.Output<string>;
    /**
     * Specifies the scaling bandwidth ID.
     */
    declare public readonly bandwidthId: pulumi.Output<string>;
    /**
     * Specifies the cooldown period (in seconds).
     */
    declare public readonly coolDownTime: pulumi.Output<number>;
    /**
     * The creation time of the bandwidth policy.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Specifies the description of the AS policy.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Specifies the alarm interval of the bandwidth policy.
     */
    declare public readonly intervalAlarmActions: pulumi.Output<outputs.As.BandwidthPolicyIntervalAlarmAction[]>;
    /**
     * The bandwidth policy additional information.
     */
    declare public /*out*/ readonly metaDatas: pulumi.Output<outputs.As.BandwidthPolicyMetaData[]>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly scalingPolicyAction: pulumi.Output<outputs.As.BandwidthPolicyScalingPolicyAction>;
    /**
     * Specifies the AS policy name.
     */
    declare public readonly scalingPolicyName: pulumi.Output<string>;
    /**
     * Specifies the AS policy type.
     */
    declare public readonly scalingPolicyType: pulumi.Output<string>;
    /**
     * the scaling resource type.
     */
    declare public /*out*/ readonly scalingResourceType: pulumi.Output<string>;
    declare public readonly scheduledPolicy: pulumi.Output<outputs.As.BandwidthPolicyScheduledPolicy>;
    /**
     * the AS policy status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a BandwidthPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BandwidthPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BandwidthPolicyArgs | BandwidthPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BandwidthPolicyState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["alarmId"] = state?.alarmId;
            resourceInputs["bandwidthId"] = state?.bandwidthId;
            resourceInputs["coolDownTime"] = state?.coolDownTime;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["intervalAlarmActions"] = state?.intervalAlarmActions;
            resourceInputs["metaDatas"] = state?.metaDatas;
            resourceInputs["region"] = state?.region;
            resourceInputs["scalingPolicyAction"] = state?.scalingPolicyAction;
            resourceInputs["scalingPolicyName"] = state?.scalingPolicyName;
            resourceInputs["scalingPolicyType"] = state?.scalingPolicyType;
            resourceInputs["scalingResourceType"] = state?.scalingResourceType;
            resourceInputs["scheduledPolicy"] = state?.scheduledPolicy;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as BandwidthPolicyArgs | undefined;
            if (args?.bandwidthId === undefined && !opts.urn) {
                throw new Error("Missing required property 'bandwidthId'");
            }
            if (args?.scalingPolicyName === undefined && !opts.urn) {
                throw new Error("Missing required property 'scalingPolicyName'");
            }
            if (args?.scalingPolicyType === undefined && !opts.urn) {
                throw new Error("Missing required property 'scalingPolicyType'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["alarmId"] = args?.alarmId;
            resourceInputs["bandwidthId"] = args?.bandwidthId;
            resourceInputs["coolDownTime"] = args?.coolDownTime;
            resourceInputs["description"] = args?.description;
            resourceInputs["intervalAlarmActions"] = args?.intervalAlarmActions;
            resourceInputs["region"] = args?.region;
            resourceInputs["scalingPolicyAction"] = args?.scalingPolicyAction;
            resourceInputs["scalingPolicyName"] = args?.scalingPolicyName;
            resourceInputs["scalingPolicyType"] = args?.scalingPolicyType;
            resourceInputs["scheduledPolicy"] = args?.scheduledPolicy;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["metaDatas"] = undefined /*out*/;
            resourceInputs["scalingResourceType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BandwidthPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BandwidthPolicy resources.
 */
export interface BandwidthPolicyState {
    /**
     * Specifies identification of operation the AS bandwidth policy.
     */
    action?: pulumi.Input<string>;
    /**
     * Specifies the alarm rule ID.
     */
    alarmId?: pulumi.Input<string>;
    /**
     * Specifies the scaling bandwidth ID.
     */
    bandwidthId?: pulumi.Input<string>;
    /**
     * Specifies the cooldown period (in seconds).
     */
    coolDownTime?: pulumi.Input<number>;
    /**
     * The creation time of the bandwidth policy.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specifies the description of the AS policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the alarm interval of the bandwidth policy.
     */
    intervalAlarmActions?: pulumi.Input<pulumi.Input<inputs.As.BandwidthPolicyIntervalAlarmAction>[]>;
    /**
     * The bandwidth policy additional information.
     */
    metaDatas?: pulumi.Input<pulumi.Input<inputs.As.BandwidthPolicyMetaData>[]>;
    region?: pulumi.Input<string>;
    scalingPolicyAction?: pulumi.Input<inputs.As.BandwidthPolicyScalingPolicyAction>;
    /**
     * Specifies the AS policy name.
     */
    scalingPolicyName?: pulumi.Input<string>;
    /**
     * Specifies the AS policy type.
     */
    scalingPolicyType?: pulumi.Input<string>;
    /**
     * the scaling resource type.
     */
    scalingResourceType?: pulumi.Input<string>;
    scheduledPolicy?: pulumi.Input<inputs.As.BandwidthPolicyScheduledPolicy>;
    /**
     * the AS policy status.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BandwidthPolicy resource.
 */
export interface BandwidthPolicyArgs {
    /**
     * Specifies identification of operation the AS bandwidth policy.
     */
    action?: pulumi.Input<string>;
    /**
     * Specifies the alarm rule ID.
     */
    alarmId?: pulumi.Input<string>;
    /**
     * Specifies the scaling bandwidth ID.
     */
    bandwidthId: pulumi.Input<string>;
    /**
     * Specifies the cooldown period (in seconds).
     */
    coolDownTime?: pulumi.Input<number>;
    /**
     * Specifies the description of the AS policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the alarm interval of the bandwidth policy.
     */
    intervalAlarmActions?: pulumi.Input<pulumi.Input<inputs.As.BandwidthPolicyIntervalAlarmAction>[]>;
    region?: pulumi.Input<string>;
    scalingPolicyAction?: pulumi.Input<inputs.As.BandwidthPolicyScalingPolicyAction>;
    /**
     * Specifies the AS policy name.
     */
    scalingPolicyName: pulumi.Input<string>;
    /**
     * Specifies the AS policy type.
     */
    scalingPolicyType: pulumi.Input<string>;
    scheduledPolicy?: pulumi.Input<inputs.As.BandwidthPolicyScheduledPolicy>;
}

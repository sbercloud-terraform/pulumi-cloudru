// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FgsApplication extends pulumi.CustomResource {
    /**
     * Get an existing FgsApplication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FgsApplicationState, opts?: pulumi.CustomResourceOptions): FgsApplication {
        return new FgsApplication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/fgsApplication:FgsApplication';

    /**
     * Returns true if the given object is an instance of FgsApplication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FgsApplication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FgsApplication.__pulumiType;
    }

    /**
     * The agency name used by the application.
     */
    declare public readonly agencyName: pulumi.Output<string | undefined>;
    /**
     * The description of the application.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The application name
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The template parameters, in JSON format.
     */
    declare public readonly params: pulumi.Output<string | undefined>;
    /**
     * The region where the application is located.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The repository information.
     */
    declare public /*out*/ readonly repositories: pulumi.Output<outputs.FgsApplicationRepository[]>;
    /**
     * The ID of the stack where the application is deployed.
     */
    declare public /*out*/ readonly stackId: pulumi.Output<string>;
    /**
     * The list of the stack resources information.
     */
    declare public /*out*/ readonly stackResources: pulumi.Output<outputs.FgsApplicationStackResource[]>;
    /**
     * The application status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The ID of the template used by the application.
     */
    declare public readonly templateId: pulumi.Output<string | undefined>;

    /**
     * Create a FgsApplication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FgsApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FgsApplicationArgs | FgsApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FgsApplicationState | undefined;
            resourceInputs["agencyName"] = state?.agencyName;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["params"] = state?.params;
            resourceInputs["region"] = state?.region;
            resourceInputs["repositories"] = state?.repositories;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["stackResources"] = state?.stackResources;
            resourceInputs["status"] = state?.status;
            resourceInputs["templateId"] = state?.templateId;
        } else {
            const args = argsOrState as FgsApplicationArgs | undefined;
            resourceInputs["agencyName"] = args?.agencyName;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["params"] = args?.params;
            resourceInputs["region"] = args?.region;
            resourceInputs["templateId"] = args?.templateId;
            resourceInputs["repositories"] = undefined /*out*/;
            resourceInputs["stackId"] = undefined /*out*/;
            resourceInputs["stackResources"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FgsApplication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FgsApplication resources.
 */
export interface FgsApplicationState {
    /**
     * The agency name used by the application.
     */
    agencyName?: pulumi.Input<string>;
    /**
     * The description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * The application name
     */
    name?: pulumi.Input<string>;
    /**
     * The template parameters, in JSON format.
     */
    params?: pulumi.Input<string>;
    /**
     * The region where the application is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The repository information.
     */
    repositories?: pulumi.Input<pulumi.Input<inputs.FgsApplicationRepository>[]>;
    /**
     * The ID of the stack where the application is deployed.
     */
    stackId?: pulumi.Input<string>;
    /**
     * The list of the stack resources information.
     */
    stackResources?: pulumi.Input<pulumi.Input<inputs.FgsApplicationStackResource>[]>;
    /**
     * The application status.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the template used by the application.
     */
    templateId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FgsApplication resource.
 */
export interface FgsApplicationArgs {
    /**
     * The agency name used by the application.
     */
    agencyName?: pulumi.Input<string>;
    /**
     * The description of the application.
     */
    description?: pulumi.Input<string>;
    /**
     * The application name
     */
    name?: pulumi.Input<string>;
    /**
     * The template parameters, in JSON format.
     */
    params?: pulumi.Input<string>;
    /**
     * The region where the application is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the template used by the application.
     */
    templateId?: pulumi.Input<string>;
}

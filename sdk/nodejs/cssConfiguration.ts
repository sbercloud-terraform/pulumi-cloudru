// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CssConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing CssConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CssConfigurationState, opts?: pulumi.CustomResourceOptions): CssConfiguration {
        return new CssConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:index/cssConfiguration:CssConfiguration';

    /**
     * Returns true if the given object is an instance of CssConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CssConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CssConfiguration.__pulumiType;
    }

    /**
     * The CSS cluster ID.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * Whether to return the Access-Control-Allow-Credentials of the header during cross-domain access.
     */
    declare public readonly httpCorsAllowCredetials: pulumi.Output<string>;
    /**
     * Headers allowed for cross-domain access.
     */
    declare public readonly httpCorsAllowHeaders: pulumi.Output<string>;
    /**
     * Methods allowed for cross-domain access.
     */
    declare public readonly httpCorsAllowMethods: pulumi.Output<string>;
    /**
     * Origin IP address allowed for cross-domain access, for example, **122.122.122.122:9200**.
     */
    declare public readonly httpCorsAllowOrigin: pulumi.Output<string>;
    /**
     * Whether to allow cross-domain access.
     */
    declare public readonly httpCorsEnabled: pulumi.Output<string>;
    /**
     * Cache duration of the browser. The cache is automatically cleared after the time range you specify.
     */
    declare public readonly httpCorsMaxAge: pulumi.Output<string>;
    /**
     * Cache size in the query phase. Value range: **1** to **100**.
     */
    declare public readonly indicesQueriesCacheSize: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * Configured for migrating data from the current cluster to the target cluster through the reindex API.
     */
    declare public readonly reindexRemoteWhitelist: pulumi.Output<string>;
    /**
     * Queue size in the force merge thread pool.
     */
    declare public readonly threadPoolForceMergeSize: pulumi.Output<string>;

    /**
     * Create a CssConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CssConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CssConfigurationArgs | CssConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CssConfigurationState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["httpCorsAllowCredetials"] = state?.httpCorsAllowCredetials;
            resourceInputs["httpCorsAllowHeaders"] = state?.httpCorsAllowHeaders;
            resourceInputs["httpCorsAllowMethods"] = state?.httpCorsAllowMethods;
            resourceInputs["httpCorsAllowOrigin"] = state?.httpCorsAllowOrigin;
            resourceInputs["httpCorsEnabled"] = state?.httpCorsEnabled;
            resourceInputs["httpCorsMaxAge"] = state?.httpCorsMaxAge;
            resourceInputs["indicesQueriesCacheSize"] = state?.indicesQueriesCacheSize;
            resourceInputs["region"] = state?.region;
            resourceInputs["reindexRemoteWhitelist"] = state?.reindexRemoteWhitelist;
            resourceInputs["threadPoolForceMergeSize"] = state?.threadPoolForceMergeSize;
        } else {
            const args = argsOrState as CssConfigurationArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["httpCorsAllowCredetials"] = args?.httpCorsAllowCredetials;
            resourceInputs["httpCorsAllowHeaders"] = args?.httpCorsAllowHeaders;
            resourceInputs["httpCorsAllowMethods"] = args?.httpCorsAllowMethods;
            resourceInputs["httpCorsAllowOrigin"] = args?.httpCorsAllowOrigin;
            resourceInputs["httpCorsEnabled"] = args?.httpCorsEnabled;
            resourceInputs["httpCorsMaxAge"] = args?.httpCorsMaxAge;
            resourceInputs["indicesQueriesCacheSize"] = args?.indicesQueriesCacheSize;
            resourceInputs["region"] = args?.region;
            resourceInputs["reindexRemoteWhitelist"] = args?.reindexRemoteWhitelist;
            resourceInputs["threadPoolForceMergeSize"] = args?.threadPoolForceMergeSize;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CssConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CssConfiguration resources.
 */
export interface CssConfigurationState {
    /**
     * The CSS cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Whether to return the Access-Control-Allow-Credentials of the header during cross-domain access.
     */
    httpCorsAllowCredetials?: pulumi.Input<string>;
    /**
     * Headers allowed for cross-domain access.
     */
    httpCorsAllowHeaders?: pulumi.Input<string>;
    /**
     * Methods allowed for cross-domain access.
     */
    httpCorsAllowMethods?: pulumi.Input<string>;
    /**
     * Origin IP address allowed for cross-domain access, for example, **122.122.122.122:9200**.
     */
    httpCorsAllowOrigin?: pulumi.Input<string>;
    /**
     * Whether to allow cross-domain access.
     */
    httpCorsEnabled?: pulumi.Input<string>;
    /**
     * Cache duration of the browser. The cache is automatically cleared after the time range you specify.
     */
    httpCorsMaxAge?: pulumi.Input<string>;
    /**
     * Cache size in the query phase. Value range: **1** to **100**.
     */
    indicesQueriesCacheSize?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Configured for migrating data from the current cluster to the target cluster through the reindex API.
     */
    reindexRemoteWhitelist?: pulumi.Input<string>;
    /**
     * Queue size in the force merge thread pool.
     */
    threadPoolForceMergeSize?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CssConfiguration resource.
 */
export interface CssConfigurationArgs {
    /**
     * The CSS cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Whether to return the Access-Control-Allow-Credentials of the header during cross-domain access.
     */
    httpCorsAllowCredetials?: pulumi.Input<string>;
    /**
     * Headers allowed for cross-domain access.
     */
    httpCorsAllowHeaders?: pulumi.Input<string>;
    /**
     * Methods allowed for cross-domain access.
     */
    httpCorsAllowMethods?: pulumi.Input<string>;
    /**
     * Origin IP address allowed for cross-domain access, for example, **122.122.122.122:9200**.
     */
    httpCorsAllowOrigin?: pulumi.Input<string>;
    /**
     * Whether to allow cross-domain access.
     */
    httpCorsEnabled?: pulumi.Input<string>;
    /**
     * Cache duration of the browser. The cache is automatically cleared after the time range you specify.
     */
    httpCorsMaxAge?: pulumi.Input<string>;
    /**
     * Cache size in the query phase. Value range: **1** to **100**.
     */
    indicesQueriesCacheSize?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Configured for migrating data from the current cluster to the target cluster through the reindex API.
     */
    reindexRemoteWhitelist?: pulumi.Input<string>;
    /**
     * Queue size in the force merge thread pool.
     */
    threadPoolForceMergeSize?: pulumi.Input<string>;
}

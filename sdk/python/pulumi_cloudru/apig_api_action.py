# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ApigApiActionArgs', 'ApigApiAction']

@pulumi.input_type
class ApigApiActionArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[_builtins.str],
                 api_id: pulumi.Input[_builtins.str],
                 env_id: pulumi.Input[_builtins.str],
                 instance_id: pulumi.Input[_builtins.str],
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ApigApiAction resource.
        :param pulumi.Input[_builtins.str] action: The operation on the API will be performed.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be published.
        :param pulumi.Input[_builtins.str] env_id: The ID of the environment to which the API will be published.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] region: The region where the APIG instance to which the API belongs is located.
        :param pulumi.Input[_builtins.str] remark: The description of the publish action.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "env_id", env_id)
        pulumi.set(__self__, "instance_id", instance_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Input[_builtins.str]:
        """
        The operation on the API will be performed.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the API to be published.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the environment to which the API will be published.
        """
        return pulumi.get(self, "env_id")

    @env_id.setter
    def env_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "env_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the APIG instance to which the API belongs is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the publish action.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class _ApigApiActionState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 api_name: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 publish_id: Optional[pulumi.Input[_builtins.str]] = None,
                 publish_time: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None,
                 version_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ApigApiAction resources.
        :param pulumi.Input[_builtins.str] action: The operation on the API will be performed.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be published.
        :param pulumi.Input[_builtins.str] api_name: The name of the API.
        :param pulumi.Input[_builtins.str] env_id: The ID of the environment to which the API will be published.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] publish_id: The ID of the publish record.
        :param pulumi.Input[_builtins.str] publish_time: The time when the API was published, in UTC format.
        :param pulumi.Input[_builtins.str] region: The region where the APIG instance to which the API belongs is located.
        :param pulumi.Input[_builtins.str] remark: The description of the publish action.
        :param pulumi.Input[_builtins.str] version_id: The version ID of the online API.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if api_name is not None:
            pulumi.set(__self__, "api_name", api_name)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if env_id is not None:
            pulumi.set(__self__, "env_id", env_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if publish_id is not None:
            pulumi.set(__self__, "publish_id", publish_id)
        if publish_time is not None:
            pulumi.set(__self__, "publish_time", publish_time)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The operation on the API will be performed.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "action", value)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the API to be published.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="apiName")
    def api_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the API.
        """
        return pulumi.get(self, "api_name")

    @api_name.setter
    def api_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_name", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the environment to which the API will be published.
        """
        return pulumi.get(self, "env_id")

    @env_id.setter
    def env_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "env_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="publishId")
    def publish_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the publish record.
        """
        return pulumi.get(self, "publish_id")

    @publish_id.setter
    def publish_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publish_id", value)

    @_builtins.property
    @pulumi.getter(name="publishTime")
    def publish_time(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The time when the API was published, in UTC format.
        """
        return pulumi.get(self, "publish_time")

    @publish_time.setter
    def publish_time(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "publish_time", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region where the APIG instance to which the API belongs is located.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the publish action.
        """
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "remark", value)

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The version ID of the online API.
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version_id", value)


@pulumi.type_token("cloudru:index/apigApiAction:ApigApiAction")
class ApigApiAction(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ApigApiAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: The operation on the API will be performed.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be published.
        :param pulumi.Input[_builtins.str] env_id: The ID of the environment to which the API will be published.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] region: The region where the APIG instance to which the API belongs is located.
        :param pulumi.Input[_builtins.str] remark: The description of the publish action.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigApiActionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ApigApiAction resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApigApiActionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigApiActionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[_builtins.str]] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 env_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 remark: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigApiActionArgs.__new__(ApigApiActionArgs)

            if action is None and not opts.urn:
                raise TypeError("Missing required property 'action'")
            __props__.__dict__["action"] = action
            if api_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_id'")
            __props__.__dict__["api_id"] = api_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            if env_id is None and not opts.urn:
                raise TypeError("Missing required property 'env_id'")
            __props__.__dict__["env_id"] = env_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["region"] = region
            __props__.__dict__["remark"] = remark
            __props__.__dict__["api_name"] = None
            __props__.__dict__["publish_id"] = None
            __props__.__dict__["publish_time"] = None
            __props__.__dict__["version_id"] = None
        super(ApigApiAction, __self__).__init__(
            'cloudru:index/apigApiAction:ApigApiAction',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[_builtins.str]] = None,
            api_id: Optional[pulumi.Input[_builtins.str]] = None,
            api_name: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            env_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            publish_id: Optional[pulumi.Input[_builtins.str]] = None,
            publish_time: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            remark: Optional[pulumi.Input[_builtins.str]] = None,
            version_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'ApigApiAction':
        """
        Get an existing ApigApiAction resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] action: The operation on the API will be performed.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be published.
        :param pulumi.Input[_builtins.str] api_name: The name of the API.
        :param pulumi.Input[_builtins.str] env_id: The ID of the environment to which the API will be published.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] publish_id: The ID of the publish record.
        :param pulumi.Input[_builtins.str] publish_time: The time when the API was published, in UTC format.
        :param pulumi.Input[_builtins.str] region: The region where the APIG instance to which the API belongs is located.
        :param pulumi.Input[_builtins.str] remark: The description of the publish action.
        :param pulumi.Input[_builtins.str] version_id: The version ID of the online API.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigApiActionState.__new__(_ApigApiActionState)

        __props__.__dict__["action"] = action
        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["api_name"] = api_name
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["env_id"] = env_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["publish_id"] = publish_id
        __props__.__dict__["publish_time"] = publish_time
        __props__.__dict__["region"] = region
        __props__.__dict__["remark"] = remark
        __props__.__dict__["version_id"] = version_id
        return ApigApiAction(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def action(self) -> pulumi.Output[_builtins.str]:
        """
        The operation on the API will be performed.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the API to be published.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="apiName")
    def api_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the API.
        """
        return pulumi.get(self, "api_name")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the environment to which the API will be published.
        """
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="publishId")
    def publish_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the publish record.
        """
        return pulumi.get(self, "publish_id")

    @_builtins.property
    @pulumi.getter(name="publishTime")
    def publish_time(self) -> pulumi.Output[_builtins.str]:
        """
        The time when the API was published, in UTC format.
        """
        return pulumi.get(self, "publish_time")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region where the APIG instance to which the API belongs is located.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def remark(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The description of the publish action.
        """
        return pulumi.get(self, "remark")

    @_builtins.property
    @pulumi.getter(name="versionId")
    def version_id(self) -> pulumi.Output[_builtins.str]:
        """
        The version ID of the online API.
        """
        return pulumi.get(self, "version_id")


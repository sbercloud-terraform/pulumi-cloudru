# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ZoneDnssecInfo',
    'ZoneRouter',
]

@pulumi.output_type
class ZoneDnssecInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "digestAlgorithm":
            suggest = "digest_algorithm"
        elif key == "digestType":
            suggest = "digest_type"
        elif key == "dsRecord":
            suggest = "ds_record"
        elif key == "keyTag":
            suggest = "key_tag"
        elif key == "kskPublicKey":
            suggest = "ksk_public_key"
        elif key == "signatureType":
            suggest = "signature_type"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneDnssecInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneDnssecInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneDnssecInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[_builtins.str] = None,
                 digest: Optional[_builtins.str] = None,
                 digest_algorithm: Optional[_builtins.str] = None,
                 digest_type: Optional[_builtins.int] = None,
                 ds_record: Optional[_builtins.str] = None,
                 flag: Optional[_builtins.int] = None,
                 key_tag: Optional[_builtins.int] = None,
                 ksk_public_key: Optional[_builtins.str] = None,
                 signature: Optional[_builtins.str] = None,
                 signature_type: Optional[_builtins.int] = None,
                 updated_at: Optional[_builtins.str] = None):
        """
        :param _builtins.str created_at: Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        :param _builtins.str digest: Indicates the digest.
        :param _builtins.str digest_algorithm: Indicates the digest algorithm.
        :param _builtins.int digest_type: Indicates the digest type.
        :param _builtins.str ds_record: Indicates the DS record.
        :param _builtins.int flag: Indicates the flag.
        :param _builtins.int key_tag: Indicates the key tag.
        :param _builtins.str ksk_public_key: Indicates the public key.
        :param _builtins.str signature: Indicates the signature algorithm.
        :param _builtins.int signature_type: Indicates the signature type.
        :param _builtins.str updated_at: Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if digest_algorithm is not None:
            pulumi.set(__self__, "digest_algorithm", digest_algorithm)
        if digest_type is not None:
            pulumi.set(__self__, "digest_type", digest_type)
        if ds_record is not None:
            pulumi.set(__self__, "ds_record", ds_record)
        if flag is not None:
            pulumi.set(__self__, "flag", flag)
        if key_tag is not None:
            pulumi.set(__self__, "key_tag", key_tag)
        if ksk_public_key is not None:
            pulumi.set(__self__, "ksk_public_key", ksk_public_key)
        if signature is not None:
            pulumi.set(__self__, "signature", signature)
        if signature_type is not None:
            pulumi.set(__self__, "signature_type", signature_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        Indicates the creation time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def digest(self) -> Optional[_builtins.str]:
        """
        Indicates the digest.
        """
        return pulumi.get(self, "digest")

    @_builtins.property
    @pulumi.getter(name="digestAlgorithm")
    def digest_algorithm(self) -> Optional[_builtins.str]:
        """
        Indicates the digest algorithm.
        """
        return pulumi.get(self, "digest_algorithm")

    @_builtins.property
    @pulumi.getter(name="digestType")
    def digest_type(self) -> Optional[_builtins.int]:
        """
        Indicates the digest type.
        """
        return pulumi.get(self, "digest_type")

    @_builtins.property
    @pulumi.getter(name="dsRecord")
    def ds_record(self) -> Optional[_builtins.str]:
        """
        Indicates the DS record.
        """
        return pulumi.get(self, "ds_record")

    @_builtins.property
    @pulumi.getter
    def flag(self) -> Optional[_builtins.int]:
        """
        Indicates the flag.
        """
        return pulumi.get(self, "flag")

    @_builtins.property
    @pulumi.getter(name="keyTag")
    def key_tag(self) -> Optional[_builtins.int]:
        """
        Indicates the key tag.
        """
        return pulumi.get(self, "key_tag")

    @_builtins.property
    @pulumi.getter(name="kskPublicKey")
    def ksk_public_key(self) -> Optional[_builtins.str]:
        """
        Indicates the public key.
        """
        return pulumi.get(self, "ksk_public_key")

    @_builtins.property
    @pulumi.getter
    def signature(self) -> Optional[_builtins.str]:
        """
        Indicates the signature algorithm.
        """
        return pulumi.get(self, "signature")

    @_builtins.property
    @pulumi.getter(name="signatureType")
    def signature_type(self) -> Optional[_builtins.int]:
        """
        Indicates the signature type.
        """
        return pulumi.get(self, "signature_type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        Indicates the update time. Format is **yyyy-MM-dd'T'HH:mm:ss.SSS**.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class ZoneRouter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routerId":
            suggest = "router_id"
        elif key == "routerRegion":
            suggest = "router_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZoneRouter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZoneRouter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZoneRouter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 router_id: _builtins.str,
                 router_region: Optional[_builtins.str] = None):
        """
        :param _builtins.str router_id: The ID of the associated VPC.
        :param _builtins.str router_region: The region of the VPC.
        """
        pulumi.set(__self__, "router_id", router_id)
        if router_region is not None:
            pulumi.set(__self__, "router_region", router_region)

    @_builtins.property
    @pulumi.getter(name="routerId")
    def router_id(self) -> _builtins.str:
        """
        The ID of the associated VPC.
        """
        return pulumi.get(self, "router_id")

    @_builtins.property
    @pulumi.getter(name="routerRegion")
    def router_region(self) -> Optional[_builtins.str]:
        """
        The region of the VPC.
        """
        return pulumi.get(self, "router_region")



// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Using this data source to query the list of available resource quotas for FunctionGraph service within SberCloud.
func GetFgsQuotas(ctx *pulumi.Context, args *GetFgsQuotasArgs, opts ...pulumi.InvokeOption) (*GetFgsQuotasResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFgsQuotasResult
	err := ctx.Invoke("sbercloud:index/getFgsQuotas:getFgsQuotas", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFgsQuotas.
type GetFgsQuotasArgs struct {
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getFgsQuotas.
type GetFgsQuotasResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// All quotas that match the filter parameters.
	Quotas []GetFgsQuotasQuota `pulumi:"quotas"`
	Region string              `pulumi:"region"`
}

func GetFgsQuotasOutput(ctx *pulumi.Context, args GetFgsQuotasOutputArgs, opts ...pulumi.InvokeOption) GetFgsQuotasResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetFgsQuotasResultOutput, error) {
			args := v.(GetFgsQuotasArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getFgsQuotas:getFgsQuotas", args, GetFgsQuotasResultOutput{}, options).(GetFgsQuotasResultOutput), nil
		}).(GetFgsQuotasResultOutput)
}

// A collection of arguments for invoking getFgsQuotas.
type GetFgsQuotasOutputArgs struct {
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetFgsQuotasOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFgsQuotasArgs)(nil)).Elem()
}

// A collection of values returned by getFgsQuotas.
type GetFgsQuotasResultOutput struct{ *pulumi.OutputState }

func (GetFgsQuotasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFgsQuotasResult)(nil)).Elem()
}

func (o GetFgsQuotasResultOutput) ToGetFgsQuotasResultOutput() GetFgsQuotasResultOutput {
	return o
}

func (o GetFgsQuotasResultOutput) ToGetFgsQuotasResultOutputWithContext(ctx context.Context) GetFgsQuotasResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetFgsQuotasResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFgsQuotasResult) string { return v.Id }).(pulumi.StringOutput)
}

// All quotas that match the filter parameters.
func (o GetFgsQuotasResultOutput) Quotas() GetFgsQuotasQuotaArrayOutput {
	return o.ApplyT(func(v GetFgsQuotasResult) []GetFgsQuotasQuota { return v.Quotas }).(GetFgsQuotasQuotaArrayOutput)
}

func (o GetFgsQuotasResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetFgsQuotasResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFgsQuotasResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a DCS instance within SberCloud.
//
// ## Example Usage
//
// ### Create a single mode Redis instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			projectId := cfg.RequireObject("projectId")
//			instanceId := cfg.RequireObject("instanceId")
//			backupId := cfg.RequireObject("backupId")
//			_, err := sbercloud.NewDcsRestore(ctx, "test", &sbercloud.DcsRestoreArgs{
//				ProjectId:  pulumi.Any(projectId),
//				InstanceId: pulumi.Any(instanceId),
//				BackupId:   pulumi.Any(backupId),
//				Remark:     pulumi.String("restore instance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DCS instance can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:index/dcsRestore:DcsRestore instance_1 80e373f9-872e-4046-aae9-ccd9ddc55511
// ```
//
// # Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
//
// API response, security or some other reason.
//
// The missing attributes include: `password`, `auto_renew`, `period`, `period_unit`, `rename_commands`,
//
// `internal_version`, `save_days`, `backup_type`, `begin_at`, `period_type`, `backup_at`.
//
// It is generally recommended running `pulumi preview` after importing an instance.
//
// # You can then decide if changes should be applied to the instance, or the resource definition should be updated to
//
// align with the instance. Also you can ignore changes as below.
//
// resource "sbercloud_dcs_instance" "instance_1" {
//
//	  ...
//
//	lifecycle {
//
//	  ignore_changes = [
//
//	    password, rename_commands,
//
//	  ]
//
//	}
//
// }
type DcsRestore struct {
	pulumi.CustomResourceState

	// ID of the backup record.
	BackupId pulumi.StringOutput `pulumi:"backupId"`
	// A dcsInstance ID in UUID format.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The enterprise project id of the dcs instance. Changing this creates a new instance.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Description of DCS instance restoration.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Array of the restoration records.
	RestoreRecords DcsRestoreRestoreRecordArrayOutput `pulumi:"restoreRecords"`
}

// NewDcsRestore registers a new resource with the given unique name, arguments, and options.
func NewDcsRestore(ctx *pulumi.Context,
	name string, args *DcsRestoreArgs, opts ...pulumi.ResourceOption) (*DcsRestore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupId == nil {
		return nil, errors.New("invalid value for required argument 'BackupId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DcsRestore
	err := ctx.RegisterResource("sbercloud:index/dcsRestore:DcsRestore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDcsRestore gets an existing DcsRestore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDcsRestore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DcsRestoreState, opts ...pulumi.ResourceOption) (*DcsRestore, error) {
	var resource DcsRestore
	err := ctx.ReadResource("sbercloud:index/dcsRestore:DcsRestore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DcsRestore resources.
type dcsRestoreState struct {
	// ID of the backup record.
	BackupId *string `pulumi:"backupId"`
	// A dcsInstance ID in UUID format.
	InstanceId *string `pulumi:"instanceId"`
	// The enterprise project id of the dcs instance. Changing this creates a new instance.
	ProjectId *string `pulumi:"projectId"`
	// Description of DCS instance restoration.
	Remark *string `pulumi:"remark"`
	// Array of the restoration records.
	RestoreRecords []DcsRestoreRestoreRecord `pulumi:"restoreRecords"`
}

type DcsRestoreState struct {
	// ID of the backup record.
	BackupId pulumi.StringPtrInput
	// A dcsInstance ID in UUID format.
	InstanceId pulumi.StringPtrInput
	// The enterprise project id of the dcs instance. Changing this creates a new instance.
	ProjectId pulumi.StringPtrInput
	// Description of DCS instance restoration.
	Remark pulumi.StringPtrInput
	// Array of the restoration records.
	RestoreRecords DcsRestoreRestoreRecordArrayInput
}

func (DcsRestoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*dcsRestoreState)(nil)).Elem()
}

type dcsRestoreArgs struct {
	// ID of the backup record.
	BackupId string `pulumi:"backupId"`
	// A dcsInstance ID in UUID format.
	InstanceId string `pulumi:"instanceId"`
	// The enterprise project id of the dcs instance. Changing this creates a new instance.
	ProjectId string `pulumi:"projectId"`
	// Description of DCS instance restoration.
	Remark *string `pulumi:"remark"`
}

// The set of arguments for constructing a DcsRestore resource.
type DcsRestoreArgs struct {
	// ID of the backup record.
	BackupId pulumi.StringInput
	// A dcsInstance ID in UUID format.
	InstanceId pulumi.StringInput
	// The enterprise project id of the dcs instance. Changing this creates a new instance.
	ProjectId pulumi.StringInput
	// Description of DCS instance restoration.
	Remark pulumi.StringPtrInput
}

func (DcsRestoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dcsRestoreArgs)(nil)).Elem()
}

type DcsRestoreInput interface {
	pulumi.Input

	ToDcsRestoreOutput() DcsRestoreOutput
	ToDcsRestoreOutputWithContext(ctx context.Context) DcsRestoreOutput
}

func (*DcsRestore) ElementType() reflect.Type {
	return reflect.TypeOf((**DcsRestore)(nil)).Elem()
}

func (i *DcsRestore) ToDcsRestoreOutput() DcsRestoreOutput {
	return i.ToDcsRestoreOutputWithContext(context.Background())
}

func (i *DcsRestore) ToDcsRestoreOutputWithContext(ctx context.Context) DcsRestoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsRestoreOutput)
}

// DcsRestoreArrayInput is an input type that accepts DcsRestoreArray and DcsRestoreArrayOutput values.
// You can construct a concrete instance of `DcsRestoreArrayInput` via:
//
//	DcsRestoreArray{ DcsRestoreArgs{...} }
type DcsRestoreArrayInput interface {
	pulumi.Input

	ToDcsRestoreArrayOutput() DcsRestoreArrayOutput
	ToDcsRestoreArrayOutputWithContext(context.Context) DcsRestoreArrayOutput
}

type DcsRestoreArray []DcsRestoreInput

func (DcsRestoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DcsRestore)(nil)).Elem()
}

func (i DcsRestoreArray) ToDcsRestoreArrayOutput() DcsRestoreArrayOutput {
	return i.ToDcsRestoreArrayOutputWithContext(context.Background())
}

func (i DcsRestoreArray) ToDcsRestoreArrayOutputWithContext(ctx context.Context) DcsRestoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsRestoreArrayOutput)
}

// DcsRestoreMapInput is an input type that accepts DcsRestoreMap and DcsRestoreMapOutput values.
// You can construct a concrete instance of `DcsRestoreMapInput` via:
//
//	DcsRestoreMap{ "key": DcsRestoreArgs{...} }
type DcsRestoreMapInput interface {
	pulumi.Input

	ToDcsRestoreMapOutput() DcsRestoreMapOutput
	ToDcsRestoreMapOutputWithContext(context.Context) DcsRestoreMapOutput
}

type DcsRestoreMap map[string]DcsRestoreInput

func (DcsRestoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DcsRestore)(nil)).Elem()
}

func (i DcsRestoreMap) ToDcsRestoreMapOutput() DcsRestoreMapOutput {
	return i.ToDcsRestoreMapOutputWithContext(context.Background())
}

func (i DcsRestoreMap) ToDcsRestoreMapOutputWithContext(ctx context.Context) DcsRestoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsRestoreMapOutput)
}

type DcsRestoreOutput struct{ *pulumi.OutputState }

func (DcsRestoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DcsRestore)(nil)).Elem()
}

func (o DcsRestoreOutput) ToDcsRestoreOutput() DcsRestoreOutput {
	return o
}

func (o DcsRestoreOutput) ToDcsRestoreOutputWithContext(ctx context.Context) DcsRestoreOutput {
	return o
}

// ID of the backup record.
func (o DcsRestoreOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsRestore) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

// A dcsInstance ID in UUID format.
func (o DcsRestoreOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsRestore) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The enterprise project id of the dcs instance. Changing this creates a new instance.
func (o DcsRestoreOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsRestore) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Description of DCS instance restoration.
func (o DcsRestoreOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DcsRestore) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Array of the restoration records.
func (o DcsRestoreOutput) RestoreRecords() DcsRestoreRestoreRecordArrayOutput {
	return o.ApplyT(func(v *DcsRestore) DcsRestoreRestoreRecordArrayOutput { return v.RestoreRecords }).(DcsRestoreRestoreRecordArrayOutput)
}

type DcsRestoreArrayOutput struct{ *pulumi.OutputState }

func (DcsRestoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DcsRestore)(nil)).Elem()
}

func (o DcsRestoreArrayOutput) ToDcsRestoreArrayOutput() DcsRestoreArrayOutput {
	return o
}

func (o DcsRestoreArrayOutput) ToDcsRestoreArrayOutputWithContext(ctx context.Context) DcsRestoreArrayOutput {
	return o
}

func (o DcsRestoreArrayOutput) Index(i pulumi.IntInput) DcsRestoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DcsRestore {
		return vs[0].([]*DcsRestore)[vs[1].(int)]
	}).(DcsRestoreOutput)
}

type DcsRestoreMapOutput struct{ *pulumi.OutputState }

func (DcsRestoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DcsRestore)(nil)).Elem()
}

func (o DcsRestoreMapOutput) ToDcsRestoreMapOutput() DcsRestoreMapOutput {
	return o
}

func (o DcsRestoreMapOutput) ToDcsRestoreMapOutputWithContext(ctx context.Context) DcsRestoreMapOutput {
	return o
}

func (o DcsRestoreMapOutput) MapIndex(k pulumi.StringInput) DcsRestoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DcsRestore {
		return vs[0].(map[string]*DcsRestore)[vs[1].(string)]
	}).(DcsRestoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DcsRestoreInput)(nil)).Elem(), &DcsRestore{})
	pulumi.RegisterInputType(reflect.TypeOf((*DcsRestoreArrayInput)(nil)).Elem(), DcsRestoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DcsRestoreMapInput)(nil)).Elem(), DcsRestoreMap{})
	pulumi.RegisterOutputType(DcsRestoreOutput{})
	pulumi.RegisterOutputType(DcsRestoreArrayOutput{})
	pulumi.RegisterOutputType(DcsRestoreMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to query the detailed information list of the EVS disks within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/evs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			targetServer := cfg.RequireObject("targetServer")
//			_, err := evs.GetVolumes(ctx, &evs.GetVolumesArgs{
//				ServerId: pulumi.StringRef(targetServer),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVolumes(ctx *pulumi.Context, args *GetVolumesArgs, opts ...pulumi.InvokeOption) (*GetVolumesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVolumesResult
	err := ctx.Invoke("sbercloud:Evs/getVolumes:getVolumes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumes.
type GetVolumesArgs struct {
	// Specifies the availability zone for the disks.
	AvailabilityZone     *string `pulumi:"availabilityZone"`
	DedicatedStorageId   *string `pulumi:"dedicatedStorageId"`
	DedicatedStorageName *string `pulumi:"dedicatedStorageName"`
	// Specifies the enterprise project ID for filtering.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	Ids                 *string `pulumi:"ids"`
	Metadata            *string `pulumi:"metadata"`
	// The disk name.
	Name *string `pulumi:"name"`
	// Specifies the region in which to query the disk list.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the server ID to which the disks are attached.
	ServerId *string `pulumi:"serverId"`
	// The service type, such as EVS, DSS or DESS.
	ServiceType *string `pulumi:"serviceType"`
	// Specifies whether the disk is shareable.
	Shareable *bool   `pulumi:"shareable"`
	SortDir   *string `pulumi:"sortDir"`
	SortKey   *string `pulumi:"sortKey"`
	// Specifies the disk status. The valid values are as following:
	// + **FREEZED**
	// + **BIND_ERROR**
	// + **BINDING**
	// + **PENDING_DELETE**
	// + **PENDING_CREATE**
	// + **NOTIFYING**
	// + **NOTIFY_DELETE**
	// + **PENDING_UPDATE**
	// + **DOWN**
	// + **ACTIVE**
	// + **ELB**
	// + **ERROR**
	// + **VPN**
	Status *string `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired disk.
	Tags         map[string]string `pulumi:"tags"`
	VolumeId     *string           `pulumi:"volumeId"`
	VolumeTypeId *string           `pulumi:"volumeTypeId"`
}

// A collection of values returned by getVolumes.
type GetVolumesResult struct {
	// The availability zone of the disk.
	AvailabilityZone     *string `pulumi:"availabilityZone"`
	DedicatedStorageId   *string `pulumi:"dedicatedStorageId"`
	DedicatedStorageName *string `pulumi:"dedicatedStorageName"`
	// The ID of the enterprise project associated with the disk.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id       string  `pulumi:"id"`
	Ids      *string `pulumi:"ids"`
	Metadata *string `pulumi:"metadata"`
	// The disk name.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// The ID of the server to which the disk is attached.
	ServerId *string `pulumi:"serverId"`
	// The service type, such as EVS, DSS or DESS.
	ServiceType *string `pulumi:"serviceType"`
	// Whether the disk is shareable.
	Shareable *bool   `pulumi:"shareable"`
	SortDir   *string `pulumi:"sortDir"`
	SortKey   *string `pulumi:"sortKey"`
	// The disk status.
	Status *string `pulumi:"status"`
	// The disk tags.
	Tags         map[string]string `pulumi:"tags"`
	VolumeId     *string           `pulumi:"volumeId"`
	VolumeTypeId *string           `pulumi:"volumeTypeId"`
	// The detailed information of the disks. Structure is documented below.
	Volumes []GetVolumesVolume `pulumi:"volumes"`
}

func GetVolumesOutput(ctx *pulumi.Context, args GetVolumesOutputArgs, opts ...pulumi.InvokeOption) GetVolumesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVolumesResultOutput, error) {
			args := v.(GetVolumesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Evs/getVolumes:getVolumes", args, GetVolumesResultOutput{}, options).(GetVolumesResultOutput), nil
		}).(GetVolumesResultOutput)
}

// A collection of arguments for invoking getVolumes.
type GetVolumesOutputArgs struct {
	// Specifies the availability zone for the disks.
	AvailabilityZone     pulumi.StringPtrInput `pulumi:"availabilityZone"`
	DedicatedStorageId   pulumi.StringPtrInput `pulumi:"dedicatedStorageId"`
	DedicatedStorageName pulumi.StringPtrInput `pulumi:"dedicatedStorageName"`
	// Specifies the enterprise project ID for filtering.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	Ids                 pulumi.StringPtrInput `pulumi:"ids"`
	Metadata            pulumi.StringPtrInput `pulumi:"metadata"`
	// The disk name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to query the disk list.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the server ID to which the disks are attached.
	ServerId pulumi.StringPtrInput `pulumi:"serverId"`
	// The service type, such as EVS, DSS or DESS.
	ServiceType pulumi.StringPtrInput `pulumi:"serviceType"`
	// Specifies whether the disk is shareable.
	Shareable pulumi.BoolPtrInput   `pulumi:"shareable"`
	SortDir   pulumi.StringPtrInput `pulumi:"sortDir"`
	SortKey   pulumi.StringPtrInput `pulumi:"sortKey"`
	// Specifies the disk status. The valid values are as following:
	// + **FREEZED**
	// + **BIND_ERROR**
	// + **BINDING**
	// + **PENDING_DELETE**
	// + **PENDING_CREATE**
	// + **NOTIFYING**
	// + **NOTIFY_DELETE**
	// + **PENDING_UPDATE**
	// + **DOWN**
	// + **ACTIVE**
	// + **ELB**
	// + **ERROR**
	// + **VPN**
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired disk.
	Tags         pulumi.StringMapInput `pulumi:"tags"`
	VolumeId     pulumi.StringPtrInput `pulumi:"volumeId"`
	VolumeTypeId pulumi.StringPtrInput `pulumi:"volumeTypeId"`
}

func (GetVolumesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesArgs)(nil)).Elem()
}

// A collection of values returned by getVolumes.
type GetVolumesResultOutput struct{ *pulumi.OutputState }

func (GetVolumesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesResult)(nil)).Elem()
}

func (o GetVolumesResultOutput) ToGetVolumesResultOutput() GetVolumesResultOutput {
	return o
}

func (o GetVolumesResultOutput) ToGetVolumesResultOutputWithContext(ctx context.Context) GetVolumesResultOutput {
	return o
}

// The availability zone of the disk.
func (o GetVolumesResultOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) DedicatedStorageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.DedicatedStorageId }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) DedicatedStorageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.DedicatedStorageName }).(pulumi.StringPtrOutput)
}

// The ID of the enterprise project associated with the disk.
func (o GetVolumesResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVolumesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVolumesResultOutput) Ids() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.Ids }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.Metadata }).(pulumi.StringPtrOutput)
}

// The disk name.
func (o GetVolumesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The ID of the server to which the disk is attached.
func (o GetVolumesResultOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.ServerId }).(pulumi.StringPtrOutput)
}

// The service type, such as EVS, DSS or DESS.
func (o GetVolumesResultOutput) ServiceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.ServiceType }).(pulumi.StringPtrOutput)
}

// Whether the disk is shareable.
func (o GetVolumesResultOutput) Shareable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *bool { return v.Shareable }).(pulumi.BoolPtrOutput)
}

func (o GetVolumesResultOutput) SortDir() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.SortDir }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) SortKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.SortKey }).(pulumi.StringPtrOutput)
}

// The disk status.
func (o GetVolumesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The disk tags.
func (o GetVolumesResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVolumesResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetVolumesResultOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) VolumeTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.VolumeTypeId }).(pulumi.StringPtrOutput)
}

// The detailed information of the disks. Structure is documented below.
func (o GetVolumesResultOutput) Volumes() GetVolumesVolumeArrayOutput {
	return o.ApplyT(func(v GetVolumesResult) []GetVolumesVolume { return v.Volumes }).(GetVolumesVolumeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVolumesResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SmnTopic struct {
	pulumi.CustomResourceState

	// schema: Internal
	AccessPolicy           pulumi.StringPtrOutput `pulumi:"accessPolicy"`
	CreateTime             pulumi.StringOutput    `pulumi:"createTime"`
	DisplayName            pulumi.StringPtrOutput `pulumi:"displayName"`
	EnterpriseProjectId    pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	Introduction           pulumi.StringPtrOutput `pulumi:"introduction"`
	Name                   pulumi.StringOutput    `pulumi:"name"`
	PushPolicy             pulumi.IntOutput       `pulumi:"pushPolicy"`
	Region                 pulumi.StringOutput    `pulumi:"region"`
	ServicesPublishAllowed pulumi.StringPtrOutput `pulumi:"servicesPublishAllowed"`
	Tags                   pulumi.StringMapOutput `pulumi:"tags"`
	TopicUrn               pulumi.StringOutput    `pulumi:"topicUrn"`
	UpdateTime             pulumi.StringOutput    `pulumi:"updateTime"`
	UsersPublishAllowed    pulumi.StringPtrOutput `pulumi:"usersPublishAllowed"`
}

// NewSmnTopic registers a new resource with the given unique name, arguments, and options.
func NewSmnTopic(ctx *pulumi.Context,
	name string, args *SmnTopicArgs, opts ...pulumi.ResourceOption) (*SmnTopic, error) {
	if args == nil {
		args = &SmnTopicArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmnTopic
	err := ctx.RegisterResource("sbercloud:index/smnTopic:SmnTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmnTopic gets an existing SmnTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmnTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmnTopicState, opts ...pulumi.ResourceOption) (*SmnTopic, error) {
	var resource SmnTopic
	err := ctx.ReadResource("sbercloud:index/smnTopic:SmnTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmnTopic resources.
type smnTopicState struct {
	// schema: Internal
	AccessPolicy           *string           `pulumi:"accessPolicy"`
	CreateTime             *string           `pulumi:"createTime"`
	DisplayName            *string           `pulumi:"displayName"`
	EnterpriseProjectId    *string           `pulumi:"enterpriseProjectId"`
	Introduction           *string           `pulumi:"introduction"`
	Name                   *string           `pulumi:"name"`
	PushPolicy             *int              `pulumi:"pushPolicy"`
	Region                 *string           `pulumi:"region"`
	ServicesPublishAllowed *string           `pulumi:"servicesPublishAllowed"`
	Tags                   map[string]string `pulumi:"tags"`
	TopicUrn               *string           `pulumi:"topicUrn"`
	UpdateTime             *string           `pulumi:"updateTime"`
	UsersPublishAllowed    *string           `pulumi:"usersPublishAllowed"`
}

type SmnTopicState struct {
	// schema: Internal
	AccessPolicy           pulumi.StringPtrInput
	CreateTime             pulumi.StringPtrInput
	DisplayName            pulumi.StringPtrInput
	EnterpriseProjectId    pulumi.StringPtrInput
	Introduction           pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	PushPolicy             pulumi.IntPtrInput
	Region                 pulumi.StringPtrInput
	ServicesPublishAllowed pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	TopicUrn               pulumi.StringPtrInput
	UpdateTime             pulumi.StringPtrInput
	UsersPublishAllowed    pulumi.StringPtrInput
}

func (SmnTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*smnTopicState)(nil)).Elem()
}

type smnTopicArgs struct {
	// schema: Internal
	AccessPolicy           *string           `pulumi:"accessPolicy"`
	DisplayName            *string           `pulumi:"displayName"`
	EnterpriseProjectId    *string           `pulumi:"enterpriseProjectId"`
	Introduction           *string           `pulumi:"introduction"`
	Name                   *string           `pulumi:"name"`
	Region                 *string           `pulumi:"region"`
	ServicesPublishAllowed *string           `pulumi:"servicesPublishAllowed"`
	Tags                   map[string]string `pulumi:"tags"`
	UsersPublishAllowed    *string           `pulumi:"usersPublishAllowed"`
}

// The set of arguments for constructing a SmnTopic resource.
type SmnTopicArgs struct {
	// schema: Internal
	AccessPolicy           pulumi.StringPtrInput
	DisplayName            pulumi.StringPtrInput
	EnterpriseProjectId    pulumi.StringPtrInput
	Introduction           pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	Region                 pulumi.StringPtrInput
	ServicesPublishAllowed pulumi.StringPtrInput
	Tags                   pulumi.StringMapInput
	UsersPublishAllowed    pulumi.StringPtrInput
}

func (SmnTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smnTopicArgs)(nil)).Elem()
}

type SmnTopicInput interface {
	pulumi.Input

	ToSmnTopicOutput() SmnTopicOutput
	ToSmnTopicOutputWithContext(ctx context.Context) SmnTopicOutput
}

func (*SmnTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**SmnTopic)(nil)).Elem()
}

func (i *SmnTopic) ToSmnTopicOutput() SmnTopicOutput {
	return i.ToSmnTopicOutputWithContext(context.Background())
}

func (i *SmnTopic) ToSmnTopicOutputWithContext(ctx context.Context) SmnTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnTopicOutput)
}

// SmnTopicArrayInput is an input type that accepts SmnTopicArray and SmnTopicArrayOutput values.
// You can construct a concrete instance of `SmnTopicArrayInput` via:
//
//	SmnTopicArray{ SmnTopicArgs{...} }
type SmnTopicArrayInput interface {
	pulumi.Input

	ToSmnTopicArrayOutput() SmnTopicArrayOutput
	ToSmnTopicArrayOutputWithContext(context.Context) SmnTopicArrayOutput
}

type SmnTopicArray []SmnTopicInput

func (SmnTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmnTopic)(nil)).Elem()
}

func (i SmnTopicArray) ToSmnTopicArrayOutput() SmnTopicArrayOutput {
	return i.ToSmnTopicArrayOutputWithContext(context.Background())
}

func (i SmnTopicArray) ToSmnTopicArrayOutputWithContext(ctx context.Context) SmnTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnTopicArrayOutput)
}

// SmnTopicMapInput is an input type that accepts SmnTopicMap and SmnTopicMapOutput values.
// You can construct a concrete instance of `SmnTopicMapInput` via:
//
//	SmnTopicMap{ "key": SmnTopicArgs{...} }
type SmnTopicMapInput interface {
	pulumi.Input

	ToSmnTopicMapOutput() SmnTopicMapOutput
	ToSmnTopicMapOutputWithContext(context.Context) SmnTopicMapOutput
}

type SmnTopicMap map[string]SmnTopicInput

func (SmnTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmnTopic)(nil)).Elem()
}

func (i SmnTopicMap) ToSmnTopicMapOutput() SmnTopicMapOutput {
	return i.ToSmnTopicMapOutputWithContext(context.Background())
}

func (i SmnTopicMap) ToSmnTopicMapOutputWithContext(ctx context.Context) SmnTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnTopicMapOutput)
}

type SmnTopicOutput struct{ *pulumi.OutputState }

func (SmnTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmnTopic)(nil)).Elem()
}

func (o SmnTopicOutput) ToSmnTopicOutput() SmnTopicOutput {
	return o
}

func (o SmnTopicOutput) ToSmnTopicOutputWithContext(ctx context.Context) SmnTopicOutput {
	return o
}

// schema: Internal
func (o SmnTopicOutput) AccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringPtrOutput { return v.AccessPolicy }).(pulumi.StringPtrOutput)
}

func (o SmnTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o SmnTopicOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o SmnTopicOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o SmnTopicOutput) Introduction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringPtrOutput { return v.Introduction }).(pulumi.StringPtrOutput)
}

func (o SmnTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SmnTopicOutput) PushPolicy() pulumi.IntOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.IntOutput { return v.PushPolicy }).(pulumi.IntOutput)
}

func (o SmnTopicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SmnTopicOutput) ServicesPublishAllowed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringPtrOutput { return v.ServicesPublishAllowed }).(pulumi.StringPtrOutput)
}

func (o SmnTopicOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SmnTopicOutput) TopicUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringOutput { return v.TopicUrn }).(pulumi.StringOutput)
}

func (o SmnTopicOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o SmnTopicOutput) UsersPublishAllowed() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmnTopic) pulumi.StringPtrOutput { return v.UsersPublishAllowed }).(pulumi.StringPtrOutput)
}

type SmnTopicArrayOutput struct{ *pulumi.OutputState }

func (SmnTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmnTopic)(nil)).Elem()
}

func (o SmnTopicArrayOutput) ToSmnTopicArrayOutput() SmnTopicArrayOutput {
	return o
}

func (o SmnTopicArrayOutput) ToSmnTopicArrayOutputWithContext(ctx context.Context) SmnTopicArrayOutput {
	return o
}

func (o SmnTopicArrayOutput) Index(i pulumi.IntInput) SmnTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmnTopic {
		return vs[0].([]*SmnTopic)[vs[1].(int)]
	}).(SmnTopicOutput)
}

type SmnTopicMapOutput struct{ *pulumi.OutputState }

func (SmnTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmnTopic)(nil)).Elem()
}

func (o SmnTopicMapOutput) ToSmnTopicMapOutput() SmnTopicMapOutput {
	return o
}

func (o SmnTopicMapOutput) ToSmnTopicMapOutputWithContext(ctx context.Context) SmnTopicMapOutput {
	return o
}

func (o SmnTopicMapOutput) MapIndex(k pulumi.StringInput) SmnTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmnTopic {
		return vs[0].(map[string]*SmnTopic)[vs[1].(string)]
	}).(SmnTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmnTopicInput)(nil)).Elem(), &SmnTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmnTopicArrayInput)(nil)).Elem(), SmnTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmnTopicMapInput)(nil)).Elem(), SmnTopicMap{})
	pulumi.RegisterOutputType(SmnTopicOutput{})
	pulumi.RegisterOutputType(SmnTopicArrayOutput{})
	pulumi.RegisterOutputType(SmnTopicMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type CbrBackupShareAccepter struct {
	pulumi.CustomResourceState

	// The ID of the shared source backup.
	BackupId pulumi.StringOutput `pulumi:"backupId"`
	// The region where the backup will be stored.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the project to which the source backup belongs.
	SourceProjectId pulumi.StringOutput `pulumi:"sourceProjectId"`
	// The ID of the vault which the backup will be stored.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewCbrBackupShareAccepter registers a new resource with the given unique name, arguments, and options.
func NewCbrBackupShareAccepter(ctx *pulumi.Context,
	name string, args *CbrBackupShareAccepterArgs, opts ...pulumi.ResourceOption) (*CbrBackupShareAccepter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupId == nil {
		return nil, errors.New("invalid value for required argument 'BackupId'")
	}
	if args.VaultId == nil {
		return nil, errors.New("invalid value for required argument 'VaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CbrBackupShareAccepter
	err := ctx.RegisterResource("cloudru:index/cbrBackupShareAccepter:CbrBackupShareAccepter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCbrBackupShareAccepter gets an existing CbrBackupShareAccepter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCbrBackupShareAccepter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CbrBackupShareAccepterState, opts ...pulumi.ResourceOption) (*CbrBackupShareAccepter, error) {
	var resource CbrBackupShareAccepter
	err := ctx.ReadResource("cloudru:index/cbrBackupShareAccepter:CbrBackupShareAccepter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CbrBackupShareAccepter resources.
type cbrBackupShareAccepterState struct {
	// The ID of the shared source backup.
	BackupId *string `pulumi:"backupId"`
	// The region where the backup will be stored.
	Region *string `pulumi:"region"`
	// The ID of the project to which the source backup belongs.
	SourceProjectId *string `pulumi:"sourceProjectId"`
	// The ID of the vault which the backup will be stored.
	VaultId *string `pulumi:"vaultId"`
}

type CbrBackupShareAccepterState struct {
	// The ID of the shared source backup.
	BackupId pulumi.StringPtrInput
	// The region where the backup will be stored.
	Region pulumi.StringPtrInput
	// The ID of the project to which the source backup belongs.
	SourceProjectId pulumi.StringPtrInput
	// The ID of the vault which the backup will be stored.
	VaultId pulumi.StringPtrInput
}

func (CbrBackupShareAccepterState) ElementType() reflect.Type {
	return reflect.TypeOf((*cbrBackupShareAccepterState)(nil)).Elem()
}

type cbrBackupShareAccepterArgs struct {
	// The ID of the shared source backup.
	BackupId string `pulumi:"backupId"`
	// The region where the backup will be stored.
	Region *string `pulumi:"region"`
	// The ID of the vault which the backup will be stored.
	VaultId string `pulumi:"vaultId"`
}

// The set of arguments for constructing a CbrBackupShareAccepter resource.
type CbrBackupShareAccepterArgs struct {
	// The ID of the shared source backup.
	BackupId pulumi.StringInput
	// The region where the backup will be stored.
	Region pulumi.StringPtrInput
	// The ID of the vault which the backup will be stored.
	VaultId pulumi.StringInput
}

func (CbrBackupShareAccepterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cbrBackupShareAccepterArgs)(nil)).Elem()
}

type CbrBackupShareAccepterInput interface {
	pulumi.Input

	ToCbrBackupShareAccepterOutput() CbrBackupShareAccepterOutput
	ToCbrBackupShareAccepterOutputWithContext(ctx context.Context) CbrBackupShareAccepterOutput
}

func (*CbrBackupShareAccepter) ElementType() reflect.Type {
	return reflect.TypeOf((**CbrBackupShareAccepter)(nil)).Elem()
}

func (i *CbrBackupShareAccepter) ToCbrBackupShareAccepterOutput() CbrBackupShareAccepterOutput {
	return i.ToCbrBackupShareAccepterOutputWithContext(context.Background())
}

func (i *CbrBackupShareAccepter) ToCbrBackupShareAccepterOutputWithContext(ctx context.Context) CbrBackupShareAccepterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrBackupShareAccepterOutput)
}

// CbrBackupShareAccepterArrayInput is an input type that accepts CbrBackupShareAccepterArray and CbrBackupShareAccepterArrayOutput values.
// You can construct a concrete instance of `CbrBackupShareAccepterArrayInput` via:
//
//	CbrBackupShareAccepterArray{ CbrBackupShareAccepterArgs{...} }
type CbrBackupShareAccepterArrayInput interface {
	pulumi.Input

	ToCbrBackupShareAccepterArrayOutput() CbrBackupShareAccepterArrayOutput
	ToCbrBackupShareAccepterArrayOutputWithContext(context.Context) CbrBackupShareAccepterArrayOutput
}

type CbrBackupShareAccepterArray []CbrBackupShareAccepterInput

func (CbrBackupShareAccepterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CbrBackupShareAccepter)(nil)).Elem()
}

func (i CbrBackupShareAccepterArray) ToCbrBackupShareAccepterArrayOutput() CbrBackupShareAccepterArrayOutput {
	return i.ToCbrBackupShareAccepterArrayOutputWithContext(context.Background())
}

func (i CbrBackupShareAccepterArray) ToCbrBackupShareAccepterArrayOutputWithContext(ctx context.Context) CbrBackupShareAccepterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrBackupShareAccepterArrayOutput)
}

// CbrBackupShareAccepterMapInput is an input type that accepts CbrBackupShareAccepterMap and CbrBackupShareAccepterMapOutput values.
// You can construct a concrete instance of `CbrBackupShareAccepterMapInput` via:
//
//	CbrBackupShareAccepterMap{ "key": CbrBackupShareAccepterArgs{...} }
type CbrBackupShareAccepterMapInput interface {
	pulumi.Input

	ToCbrBackupShareAccepterMapOutput() CbrBackupShareAccepterMapOutput
	ToCbrBackupShareAccepterMapOutputWithContext(context.Context) CbrBackupShareAccepterMapOutput
}

type CbrBackupShareAccepterMap map[string]CbrBackupShareAccepterInput

func (CbrBackupShareAccepterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CbrBackupShareAccepter)(nil)).Elem()
}

func (i CbrBackupShareAccepterMap) ToCbrBackupShareAccepterMapOutput() CbrBackupShareAccepterMapOutput {
	return i.ToCbrBackupShareAccepterMapOutputWithContext(context.Background())
}

func (i CbrBackupShareAccepterMap) ToCbrBackupShareAccepterMapOutputWithContext(ctx context.Context) CbrBackupShareAccepterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CbrBackupShareAccepterMapOutput)
}

type CbrBackupShareAccepterOutput struct{ *pulumi.OutputState }

func (CbrBackupShareAccepterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CbrBackupShareAccepter)(nil)).Elem()
}

func (o CbrBackupShareAccepterOutput) ToCbrBackupShareAccepterOutput() CbrBackupShareAccepterOutput {
	return o
}

func (o CbrBackupShareAccepterOutput) ToCbrBackupShareAccepterOutputWithContext(ctx context.Context) CbrBackupShareAccepterOutput {
	return o
}

// The ID of the shared source backup.
func (o CbrBackupShareAccepterOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrBackupShareAccepter) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

// The region where the backup will be stored.
func (o CbrBackupShareAccepterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrBackupShareAccepter) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the project to which the source backup belongs.
func (o CbrBackupShareAccepterOutput) SourceProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrBackupShareAccepter) pulumi.StringOutput { return v.SourceProjectId }).(pulumi.StringOutput)
}

// The ID of the vault which the backup will be stored.
func (o CbrBackupShareAccepterOutput) VaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *CbrBackupShareAccepter) pulumi.StringOutput { return v.VaultId }).(pulumi.StringOutput)
}

type CbrBackupShareAccepterArrayOutput struct{ *pulumi.OutputState }

func (CbrBackupShareAccepterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CbrBackupShareAccepter)(nil)).Elem()
}

func (o CbrBackupShareAccepterArrayOutput) ToCbrBackupShareAccepterArrayOutput() CbrBackupShareAccepterArrayOutput {
	return o
}

func (o CbrBackupShareAccepterArrayOutput) ToCbrBackupShareAccepterArrayOutputWithContext(ctx context.Context) CbrBackupShareAccepterArrayOutput {
	return o
}

func (o CbrBackupShareAccepterArrayOutput) Index(i pulumi.IntInput) CbrBackupShareAccepterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CbrBackupShareAccepter {
		return vs[0].([]*CbrBackupShareAccepter)[vs[1].(int)]
	}).(CbrBackupShareAccepterOutput)
}

type CbrBackupShareAccepterMapOutput struct{ *pulumi.OutputState }

func (CbrBackupShareAccepterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CbrBackupShareAccepter)(nil)).Elem()
}

func (o CbrBackupShareAccepterMapOutput) ToCbrBackupShareAccepterMapOutput() CbrBackupShareAccepterMapOutput {
	return o
}

func (o CbrBackupShareAccepterMapOutput) ToCbrBackupShareAccepterMapOutputWithContext(ctx context.Context) CbrBackupShareAccepterMapOutput {
	return o
}

func (o CbrBackupShareAccepterMapOutput) MapIndex(k pulumi.StringInput) CbrBackupShareAccepterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CbrBackupShareAccepter {
		return vs[0].(map[string]*CbrBackupShareAccepter)[vs[1].(string)]
	}).(CbrBackupShareAccepterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CbrBackupShareAccepterInput)(nil)).Elem(), &CbrBackupShareAccepter{})
	pulumi.RegisterInputType(reflect.TypeOf((*CbrBackupShareAccepterArrayInput)(nil)).Elem(), CbrBackupShareAccepterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CbrBackupShareAccepterMapInput)(nil)).Elem(), CbrBackupShareAccepterMap{})
	pulumi.RegisterOutputType(CbrBackupShareAccepterOutput{})
	pulumi.RegisterOutputType(CbrBackupShareAccepterArrayOutput{})
	pulumi.RegisterOutputType(CbrBackupShareAccepterMapOutput{})
}

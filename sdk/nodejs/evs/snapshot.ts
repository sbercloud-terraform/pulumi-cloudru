// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an EVS snapshot resource.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const myvolume = new sbercloud.evs.Volume("myvolume", {
 *     name: "volume",
 *     description: "my volume",
 *     volumeType: "SSD",
 *     size: 20,
 *     availabilityZone: "ru-moscow-1a",
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * const snapshot1 = new sbercloud.evs.Snapshot("snapshot_1", {
 *     name: "snapshot-001",
 *     description: "Daily backup",
 *     volumeId: myvolume.id,
 * });
 * ```
 *
 * The following arguments are supported:
 *
 * * `region` - (Optional, String, ForceNew) The region in which to create the evs snapshot resource. If omitted, the provider-level region will be used. Changing this creates a new EVS snapshot resource.
 *
 * * `volumeId` - (Required, String, ForceNew) The id of the snapshot's source disk. Changing the parameter creates a new snapshot.
 *
 * * `name` - (Required, String) The name of the snapshot. The value can contain a maximum of 255 bytes.
 *
 * * `description` - (Optional, String) The description of the snapshot. The value can contain a maximum of 255 bytes.
 *
 * * `force` - (Optional, Bool) Specifies the flag for forcibly creating a snapshot. Default to false.
 *
 * In addition to all arguments above, the following attributes are exported:
 *
 * * `id` - The id of the snapshot.
 *
 * * `status` - The status of the snapshot.
 *
 * * `size` - The size of the snapshot in GB.
 *
 * EVS snapshot can be imported using the `snapshot id`, e.g.
 */
export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotState, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Evs/snapshot:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly force!: pulumi.Output<boolean | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string}>;
    /**
     * The script configuration value of this change is also the original value used for comparison with
     *  the new value next time the change is made. The corresponding parameter name is 'metadata'.
     */
    public /*out*/ readonly metadataOrigin!: pulumi.Output<{[key: string]: string}>;
    public readonly name!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly size!: pulumi.Output<number>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotArgs | SnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["metadataOrigin"] = state ? state.metadataOrigin : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as SnapshotArgs | undefined;
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["metadataOrigin"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Snapshot resources.
 */
export interface SnapshotState {
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    force?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The script configuration value of this change is also the original value used for comparison with
     *  the new value next time the change is made. The corresponding parameter name is 'metadata'.
     */
    metadataOrigin?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    description?: pulumi.Input<string>;
    force?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    volumeId: pulumi.Input<string>;
}

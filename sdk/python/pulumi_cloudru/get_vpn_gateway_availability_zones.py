# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVpnGatewayAvailabilityZonesResult',
    'AwaitableGetVpnGatewayAvailabilityZonesResult',
    'get_vpn_gateway_availability_zones',
    'get_vpn_gateway_availability_zones_output',
]

@pulumi.output_type
class GetVpnGatewayAvailabilityZonesResult:
    """
    A collection of values returned by getVpnGatewayAvailabilityZones.
    """
    def __init__(__self__, attachment_type=None, flavor=None, id=None, names=None, region=None):
        if attachment_type and not isinstance(attachment_type, str):
            raise TypeError("Expected argument 'attachment_type' to be a str")
        pulumi.set(__self__, "attachment_type", attachment_type)
        if flavor and not isinstance(flavor, str):
            raise TypeError("Expected argument 'flavor' to be a str")
        pulumi.set(__self__, "flavor", flavor)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="attachmentType")
    def attachment_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "attachment_type")

    @property
    @pulumi.getter
    def flavor(self) -> builtins.str:
        return pulumi.get(self, "flavor")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def names(self) -> Sequence[builtins.str]:
        """
        The names of the availability zones.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetVpnGatewayAvailabilityZonesResult(GetVpnGatewayAvailabilityZonesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpnGatewayAvailabilityZonesResult(
            attachment_type=self.attachment_type,
            flavor=self.flavor,
            id=self.id,
            names=self.names,
            region=self.region)


def get_vpn_gateway_availability_zones(attachment_type: Optional[builtins.str] = None,
                                       flavor: Optional[builtins.str] = None,
                                       region: Optional[builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpnGatewayAvailabilityZonesResult:
    """
    Use this data source to get the list of VPN gateway availability zones.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    flavor = config.require_object("flavor")
    test = sbercloud.get_vpn_gateway_availability_zones(flavor=flavor)
    ```


    :param builtins.str attachment_type: Specifies the attachment type.
           The value can be **vpc** and **er**. Defaults to **vpc**.
    :param builtins.str flavor: Specifies the flavor name.
           The value can be **Basic**, **Professional1**, **Professional2** and **GM**.
    :param builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['attachmentType'] = attachment_type
    __args__['flavor'] = flavor
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getVpnGatewayAvailabilityZones:getVpnGatewayAvailabilityZones', __args__, opts=opts, typ=GetVpnGatewayAvailabilityZonesResult).value

    return AwaitableGetVpnGatewayAvailabilityZonesResult(
        attachment_type=pulumi.get(__ret__, 'attachment_type'),
        flavor=pulumi.get(__ret__, 'flavor'),
        id=pulumi.get(__ret__, 'id'),
        names=pulumi.get(__ret__, 'names'),
        region=pulumi.get(__ret__, 'region'))
def get_vpn_gateway_availability_zones_output(attachment_type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                              flavor: Optional[pulumi.Input[builtins.str]] = None,
                                              region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpnGatewayAvailabilityZonesResult]:
    """
    Use this data source to get the list of VPN gateway availability zones.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    flavor = config.require_object("flavor")
    test = sbercloud.get_vpn_gateway_availability_zones(flavor=flavor)
    ```


    :param builtins.str attachment_type: Specifies the attachment type.
           The value can be **vpc** and **er**. Defaults to **vpc**.
    :param builtins.str flavor: Specifies the flavor name.
           The value can be **Basic**, **Professional1**, **Professional2** and **GM**.
    :param builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['attachmentType'] = attachment_type
    __args__['flavor'] = flavor
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getVpnGatewayAvailabilityZones:getVpnGatewayAvailabilityZones', __args__, opts=opts, typ=GetVpnGatewayAvailabilityZonesResult)
    return __ret__.apply(lambda __response__: GetVpnGatewayAvailabilityZonesResult(
        attachment_type=pulumi.get(__response__, 'attachment_type'),
        flavor=pulumi.get(__response__, 'flavor'),
        id=pulumi.get(__response__, 'id'),
        names=pulumi.get(__response__, 'names'),
        region=pulumi.get(__response__, 'region')))

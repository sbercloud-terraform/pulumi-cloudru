// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to get the list of RocketMQ consumers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const group = config.requireObject<any>("group");
 * const test = sbercloud.getDmsRocketmqConsumers({
 *     instanceId: instanceId,
 *     group: group,
 *     isDetail: true,
 * });
 * ```
 */
export function getDmsRocketmqConsumers(args: GetDmsRocketmqConsumersArgs, opts?: pulumi.InvokeOptions): Promise<GetDmsRocketmqConsumersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:index/getDmsRocketmqConsumers:getDmsRocketmqConsumers", {
        "group": args.group,
        "instanceId": args.instanceId,
        "isDetail": args.isDetail,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getDmsRocketmqConsumers.
 */
export interface GetDmsRocketmqConsumersArgs {
    /**
     * Specifies the consumer group name.
     */
    group: string;
    /**
     * Specifies the instance ID.
     */
    instanceId: string;
    /**
     * Specifies whether to query the consumer details.
     */
    isDetail?: boolean;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
}

/**
 * A collection of values returned by getDmsRocketmqConsumers.
 */
export interface GetDmsRocketmqConsumersResult {
    /**
     * Indicates the list of consumer subscription details.
     */
    readonly clients: outputs.GetDmsRocketmqConsumersClient[];
    readonly group: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly isDetail?: boolean;
    /**
     * Indicates whether the consumer group is online.
     */
    readonly online: boolean;
    readonly region: string;
    /**
     * Indicates whether subscriptions are consistent.
     */
    readonly subscriptionConsistency: boolean;
}
/**
 * Use this data source to get the list of RocketMQ consumers.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const group = config.requireObject<any>("group");
 * const test = sbercloud.getDmsRocketmqConsumers({
 *     instanceId: instanceId,
 *     group: group,
 *     isDetail: true,
 * });
 * ```
 */
export function getDmsRocketmqConsumersOutput(args: GetDmsRocketmqConsumersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDmsRocketmqConsumersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:index/getDmsRocketmqConsumers:getDmsRocketmqConsumers", {
        "group": args.group,
        "instanceId": args.instanceId,
        "isDetail": args.isDetail,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getDmsRocketmqConsumers.
 */
export interface GetDmsRocketmqConsumersOutputArgs {
    /**
     * Specifies the consumer group name.
     */
    group: pulumi.Input<string>;
    /**
     * Specifies the instance ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies whether to query the consumer details.
     */
    isDetail?: pulumi.Input<boolean>;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { GetCertificateArgs, GetCertificateResult, GetCertificateOutputArgs } from "./getCertificate";
export const getCertificate: typeof import("./getCertificate").getCertificate = null as any;
export const getCertificateOutput: typeof import("./getCertificate").getCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getCertificate","getCertificateOutput"], () => require("./getCertificate"));

export { GetListenersArgs, GetListenersResult, GetListenersOutputArgs } from "./getListeners";
export const getListeners: typeof import("./getListeners").getListeners = null as any;
export const getListenersOutput: typeof import("./getListeners").getListenersOutput = null as any;
utilities.lazyLoad(exports, ["getListeners","getListenersOutput"], () => require("./getListeners"));

export { GetLoadbalancerArgs, GetLoadbalancerResult, GetLoadbalancerOutputArgs } from "./getLoadbalancer";
export const getLoadbalancer: typeof import("./getLoadbalancer").getLoadbalancer = null as any;
export const getLoadbalancerOutput: typeof import("./getLoadbalancer").getLoadbalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadbalancer","getLoadbalancerOutput"], () => require("./getLoadbalancer"));

export { GetPoolsArgs, GetPoolsResult, GetPoolsOutputArgs } from "./getPools";
export const getPools: typeof import("./getPools").getPools = null as any;
export const getPoolsOutput: typeof import("./getPools").getPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getPools","getPoolsOutput"], () => require("./getPools"));

export { L7policyArgs, L7policyState } from "./l7policy";
export type L7policy = import("./l7policy").L7policy;
export const L7policy: typeof import("./l7policy").L7policy = null as any;
utilities.lazyLoad(exports, ["L7policy"], () => require("./l7policy"));

export { L7ruleArgs, L7ruleState } from "./l7rule";
export type L7rule = import("./l7rule").L7rule;
export const L7rule: typeof import("./l7rule").L7rule = null as any;
utilities.lazyLoad(exports, ["L7rule"], () => require("./l7rule"));

export { ListenerArgs, ListenerState } from "./listener";
export type Listener = import("./listener").Listener;
export const Listener: typeof import("./listener").Listener = null as any;
utilities.lazyLoad(exports, ["Listener"], () => require("./listener"));

export { LoadbalancerArgs, LoadbalancerState } from "./loadbalancer";
export type Loadbalancer = import("./loadbalancer").Loadbalancer;
export const Loadbalancer: typeof import("./loadbalancer").Loadbalancer = null as any;
utilities.lazyLoad(exports, ["Loadbalancer"], () => require("./loadbalancer"));

export { MemberArgs, MemberState } from "./member";
export type Member = import("./member").Member;
export const Member: typeof import("./member").Member = null as any;
utilities.lazyLoad(exports, ["Member"], () => require("./member"));

export { MonitorArgs, MonitorState } from "./monitor";
export type Monitor = import("./monitor").Monitor;
export const Monitor: typeof import("./monitor").Monitor = null as any;
utilities.lazyLoad(exports, ["Monitor"], () => require("./monitor"));

export { PoolArgs, PoolState } from "./pool";
export type Pool = import("./pool").Pool;
export const Pool: typeof import("./pool").Pool = null as any;
utilities.lazyLoad(exports, ["Pool"], () => require("./pool"));

export { WhitelistArgs, WhitelistState } from "./whitelist";
export type Whitelist = import("./whitelist").Whitelist;
export const Whitelist: typeof import("./whitelist").Whitelist = null as any;
utilities.lazyLoad(exports, ["Whitelist"], () => require("./whitelist"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudru:Elb/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "cloudru:Elb/l7policy:L7policy":
                return new L7policy(name, <any>undefined, { urn })
            case "cloudru:Elb/l7rule:L7rule":
                return new L7rule(name, <any>undefined, { urn })
            case "cloudru:Elb/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "cloudru:Elb/loadbalancer:Loadbalancer":
                return new Loadbalancer(name, <any>undefined, { urn })
            case "cloudru:Elb/member:Member":
                return new Member(name, <any>undefined, { urn })
            case "cloudru:Elb/monitor:Monitor":
                return new Monitor(name, <any>undefined, { urn })
            case "cloudru:Elb/pool:Pool":
                return new Pool(name, <any>undefined, { urn })
            case "cloudru:Elb/whitelist:Whitelist":
                return new Whitelist(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudru", "Elb/certificate", _module)
pulumi.runtime.registerResourceModule("cloudru", "Elb/l7policy", _module)
pulumi.runtime.registerResourceModule("cloudru", "Elb/l7rule", _module)
pulumi.runtime.registerResourceModule("cloudru", "Elb/listener", _module)
pulumi.runtime.registerResourceModule("cloudru", "Elb/loadbalancer", _module)
pulumi.runtime.registerResourceModule("cloudru", "Elb/member", _module)
pulumi.runtime.registerResourceModule("cloudru", "Elb/monitor", _module)
pulumi.runtime.registerResourceModule("cloudru", "Elb/pool", _module)
pulumi.runtime.registerResourceModule("cloudru", "Elb/whitelist", _module)

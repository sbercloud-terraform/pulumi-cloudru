// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApigAclPolicyArgs, ApigAclPolicyState } from "./apigAclPolicy";
export type ApigAclPolicy = import("./apigAclPolicy").ApigAclPolicy;
export const ApigAclPolicy: typeof import("./apigAclPolicy").ApigAclPolicy = null as any;
utilities.lazyLoad(exports, ["ApigAclPolicy"], () => require("./apigAclPolicy"));

export { ApigAclPolicyAssociateArgs, ApigAclPolicyAssociateState } from "./apigAclPolicyAssociate";
export type ApigAclPolicyAssociate = import("./apigAclPolicyAssociate").ApigAclPolicyAssociate;
export const ApigAclPolicyAssociate: typeof import("./apigAclPolicyAssociate").ApigAclPolicyAssociate = null as any;
utilities.lazyLoad(exports, ["ApigAclPolicyAssociate"], () => require("./apigAclPolicyAssociate"));

export { ApigApiActionArgs, ApigApiActionState } from "./apigApiAction";
export type ApigApiAction = import("./apigApiAction").ApigApiAction;
export const ApigApiAction: typeof import("./apigApiAction").ApigApiAction = null as any;
utilities.lazyLoad(exports, ["ApigApiAction"], () => require("./apigApiAction"));

export { ApigApiBatchActionArgs, ApigApiBatchActionState } from "./apigApiBatchAction";
export type ApigApiBatchAction = import("./apigApiBatchAction").ApigApiBatchAction;
export const ApigApiBatchAction: typeof import("./apigApiBatchAction").ApigApiBatchAction = null as any;
utilities.lazyLoad(exports, ["ApigApiBatchAction"], () => require("./apigApiBatchAction"));

export { ApigApiCheckArgs, ApigApiCheckState } from "./apigApiCheck";
export type ApigApiCheck = import("./apigApiCheck").ApigApiCheck;
export const ApigApiCheck: typeof import("./apigApiCheck").ApigApiCheck = null as any;
utilities.lazyLoad(exports, ["ApigApiCheck"], () => require("./apigApiCheck"));

export { ApigApiDebugArgs, ApigApiDebugState } from "./apigApiDebug";
export type ApigApiDebug = import("./apigApiDebug").ApigApiDebug;
export const ApigApiDebug: typeof import("./apigApiDebug").ApigApiDebug = null as any;
utilities.lazyLoad(exports, ["ApigApiDebug"], () => require("./apigApiDebug"));

export { ApigApiVersionUnpublishArgs, ApigApiVersionUnpublishState } from "./apigApiVersionUnpublish";
export type ApigApiVersionUnpublish = import("./apigApiVersionUnpublish").ApigApiVersionUnpublish;
export const ApigApiVersionUnpublish: typeof import("./apigApiVersionUnpublish").ApigApiVersionUnpublish = null as any;
utilities.lazyLoad(exports, ["ApigApiVersionUnpublish"], () => require("./apigApiVersionUnpublish"));

export { ApigAppcodeArgs, ApigAppcodeState } from "./apigAppcode";
export type ApigAppcode = import("./apigAppcode").ApigAppcode;
export const ApigAppcode: typeof import("./apigAppcode").ApigAppcode = null as any;
utilities.lazyLoad(exports, ["ApigAppcode"], () => require("./apigAppcode"));

export { ApigApplicationAclArgs, ApigApplicationAclState } from "./apigApplicationAcl";
export type ApigApplicationAcl = import("./apigApplicationAcl").ApigApplicationAcl;
export const ApigApplicationAcl: typeof import("./apigApplicationAcl").ApigApplicationAcl = null as any;
utilities.lazyLoad(exports, ["ApigApplicationAcl"], () => require("./apigApplicationAcl"));

export { ApigApplicationAuthorizationArgs, ApigApplicationAuthorizationState } from "./apigApplicationAuthorization";
export type ApigApplicationAuthorization = import("./apigApplicationAuthorization").ApigApplicationAuthorization;
export const ApigApplicationAuthorization: typeof import("./apigApplicationAuthorization").ApigApplicationAuthorization = null as any;
utilities.lazyLoad(exports, ["ApigApplicationAuthorization"], () => require("./apigApplicationAuthorization"));

export { ApigApplicationQuotaArgs, ApigApplicationQuotaState } from "./apigApplicationQuota";
export type ApigApplicationQuota = import("./apigApplicationQuota").ApigApplicationQuota;
export const ApigApplicationQuota: typeof import("./apigApplicationQuota").ApigApplicationQuota = null as any;
utilities.lazyLoad(exports, ["ApigApplicationQuota"], () => require("./apigApplicationQuota"));

export { ApigApplicationQuotaAssociateArgs, ApigApplicationQuotaAssociateState } from "./apigApplicationQuotaAssociate";
export type ApigApplicationQuotaAssociate = import("./apigApplicationQuotaAssociate").ApigApplicationQuotaAssociate;
export const ApigApplicationQuotaAssociate: typeof import("./apigApplicationQuotaAssociate").ApigApplicationQuotaAssociate = null as any;
utilities.lazyLoad(exports, ["ApigApplicationQuotaAssociate"], () => require("./apigApplicationQuotaAssociate"));

export { ApigCertificateArgs, ApigCertificateState } from "./apigCertificate";
export type ApigCertificate = import("./apigCertificate").ApigCertificate;
export const ApigCertificate: typeof import("./apigCertificate").ApigCertificate = null as any;
utilities.lazyLoad(exports, ["ApigCertificate"], () => require("./apigCertificate"));

export { ApigChannelArgs, ApigChannelState } from "./apigChannel";
export type ApigChannel = import("./apigChannel").ApigChannel;
export const ApigChannel: typeof import("./apigChannel").ApigChannel = null as any;
utilities.lazyLoad(exports, ["ApigChannel"], () => require("./apigChannel"));

export { ApigEndpointConnectionManagementArgs, ApigEndpointConnectionManagementState } from "./apigEndpointConnectionManagement";
export type ApigEndpointConnectionManagement = import("./apigEndpointConnectionManagement").ApigEndpointConnectionManagement;
export const ApigEndpointConnectionManagement: typeof import("./apigEndpointConnectionManagement").ApigEndpointConnectionManagement = null as any;
utilities.lazyLoad(exports, ["ApigEndpointConnectionManagement"], () => require("./apigEndpointConnectionManagement"));

export { ApigEndpointWhitelistArgs, ApigEndpointWhitelistState } from "./apigEndpointWhitelist";
export type ApigEndpointWhitelist = import("./apigEndpointWhitelist").ApigEndpointWhitelist;
export const ApigEndpointWhitelist: typeof import("./apigEndpointWhitelist").ApigEndpointWhitelist = null as any;
utilities.lazyLoad(exports, ["ApigEndpointWhitelist"], () => require("./apigEndpointWhitelist"));

export { ApigEnvironmentVariableArgs, ApigEnvironmentVariableState } from "./apigEnvironmentVariable";
export type ApigEnvironmentVariable = import("./apigEnvironmentVariable").ApigEnvironmentVariable;
export const ApigEnvironmentVariable: typeof import("./apigEnvironmentVariable").ApigEnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["ApigEnvironmentVariable"], () => require("./apigEnvironmentVariable"));

export { ApigInstanceFeatureArgs, ApigInstanceFeatureState } from "./apigInstanceFeature";
export type ApigInstanceFeature = import("./apigInstanceFeature").ApigInstanceFeature;
export const ApigInstanceFeature: typeof import("./apigInstanceFeature").ApigInstanceFeature = null as any;
utilities.lazyLoad(exports, ["ApigInstanceFeature"], () => require("./apigInstanceFeature"));

export { ApigInstanceRoutesArgs, ApigInstanceRoutesState } from "./apigInstanceRoutes";
export type ApigInstanceRoutes = import("./apigInstanceRoutes").ApigInstanceRoutes;
export const ApigInstanceRoutes: typeof import("./apigInstanceRoutes").ApigInstanceRoutes = null as any;
utilities.lazyLoad(exports, ["ApigInstanceRoutes"], () => require("./apigInstanceRoutes"));

export { ApigPluginArgs, ApigPluginState } from "./apigPlugin";
export type ApigPlugin = import("./apigPlugin").ApigPlugin;
export const ApigPlugin: typeof import("./apigPlugin").ApigPlugin = null as any;
utilities.lazyLoad(exports, ["ApigPlugin"], () => require("./apigPlugin"));

export { ApigPluginAssociateArgs, ApigPluginAssociateState } from "./apigPluginAssociate";
export type ApigPluginAssociate = import("./apigPluginAssociate").ApigPluginAssociate;
export const ApigPluginAssociate: typeof import("./apigPluginAssociate").ApigPluginAssociate = null as any;
utilities.lazyLoad(exports, ["ApigPluginAssociate"], () => require("./apigPluginAssociate"));

export { ApigPluginBatchApisAssociateArgs, ApigPluginBatchApisAssociateState } from "./apigPluginBatchApisAssociate";
export type ApigPluginBatchApisAssociate = import("./apigPluginBatchApisAssociate").ApigPluginBatchApisAssociate;
export const ApigPluginBatchApisAssociate: typeof import("./apigPluginBatchApisAssociate").ApigPluginBatchApisAssociate = null as any;
utilities.lazyLoad(exports, ["ApigPluginBatchApisAssociate"], () => require("./apigPluginBatchApisAssociate"));

export { ApigSignatureArgs, ApigSignatureState } from "./apigSignature";
export type ApigSignature = import("./apigSignature").ApigSignature;
export const ApigSignature: typeof import("./apigSignature").ApigSignature = null as any;
utilities.lazyLoad(exports, ["ApigSignature"], () => require("./apigSignature"));

export { ApigSignatureAssociateArgs, ApigSignatureAssociateState } from "./apigSignatureAssociate";
export type ApigSignatureAssociate = import("./apigSignatureAssociate").ApigSignatureAssociate;
export const ApigSignatureAssociate: typeof import("./apigSignatureAssociate").ApigSignatureAssociate = null as any;
utilities.lazyLoad(exports, ["ApigSignatureAssociate"], () => require("./apigSignatureAssociate"));

export { CbhAssetAgencyAuthorizationArgs, CbhAssetAgencyAuthorizationState } from "./cbhAssetAgencyAuthorization";
export type CbhAssetAgencyAuthorization = import("./cbhAssetAgencyAuthorization").CbhAssetAgencyAuthorization;
export const CbhAssetAgencyAuthorization: typeof import("./cbhAssetAgencyAuthorization").CbhAssetAgencyAuthorization = null as any;
utilities.lazyLoad(exports, ["CbhAssetAgencyAuthorization"], () => require("./cbhAssetAgencyAuthorization"));

export { CbhHaInstanceArgs, CbhHaInstanceState } from "./cbhHaInstance";
export type CbhHaInstance = import("./cbhHaInstance").CbhHaInstance;
export const CbhHaInstance: typeof import("./cbhHaInstance").CbhHaInstance = null as any;
utilities.lazyLoad(exports, ["CbhHaInstance"], () => require("./cbhHaInstance"));

export { CbhInstanceArgs, CbhInstanceState } from "./cbhInstance";
export type CbhInstance = import("./cbhInstance").CbhInstance;
export const CbhInstance: typeof import("./cbhInstance").CbhInstance = null as any;
utilities.lazyLoad(exports, ["CbhInstance"], () => require("./cbhInstance"));

export { CbrBackupShareArgs, CbrBackupShareState } from "./cbrBackupShare";
export type CbrBackupShare = import("./cbrBackupShare").CbrBackupShare;
export const CbrBackupShare: typeof import("./cbrBackupShare").CbrBackupShare = null as any;
utilities.lazyLoad(exports, ["CbrBackupShare"], () => require("./cbrBackupShare"));

export { CbrBackupShareAccepterArgs, CbrBackupShareAccepterState } from "./cbrBackupShareAccepter";
export type CbrBackupShareAccepter = import("./cbrBackupShareAccepter").CbrBackupShareAccepter;
export const CbrBackupShareAccepter: typeof import("./cbrBackupShareAccepter").CbrBackupShareAccepter = null as any;
utilities.lazyLoad(exports, ["CbrBackupShareAccepter"], () => require("./cbrBackupShareAccepter"));

export { CbrCheckpointArgs, CbrCheckpointState } from "./cbrCheckpoint";
export type CbrCheckpoint = import("./cbrCheckpoint").CbrCheckpoint;
export const CbrCheckpoint: typeof import("./cbrCheckpoint").CbrCheckpoint = null as any;
utilities.lazyLoad(exports, ["CbrCheckpoint"], () => require("./cbrCheckpoint"));

export { CceClusterUpgradeArgs, CceClusterUpgradeState } from "./cceClusterUpgrade";
export type CceClusterUpgrade = import("./cceClusterUpgrade").CceClusterUpgrade;
export const CceClusterUpgrade: typeof import("./cceClusterUpgrade").CceClusterUpgrade = null as any;
utilities.lazyLoad(exports, ["CceClusterUpgrade"], () => require("./cceClusterUpgrade"));

export { CceNodesRemoveArgs, CceNodesRemoveState } from "./cceNodesRemove";
export type CceNodesRemove = import("./cceNodesRemove").CceNodesRemove;
export const CceNodesRemove: typeof import("./cceNodesRemove").CceNodesRemove = null as any;
utilities.lazyLoad(exports, ["CceNodesRemove"], () => require("./cceNodesRemove"));

export { CssConfigurationArgs, CssConfigurationState } from "./cssConfiguration";
export type CssConfiguration = import("./cssConfiguration").CssConfiguration;
export const CssConfiguration: typeof import("./cssConfiguration").CssConfiguration = null as any;
utilities.lazyLoad(exports, ["CssConfiguration"], () => require("./cssConfiguration"));

export { DcsAccountArgs, DcsAccountState } from "./dcsAccount";
export type DcsAccount = import("./dcsAccount").DcsAccount;
export const DcsAccount: typeof import("./dcsAccount").DcsAccount = null as any;
utilities.lazyLoad(exports, ["DcsAccount"], () => require("./dcsAccount"));

export { DcsBackupArgs, DcsBackupState } from "./dcsBackup";
export type DcsBackup = import("./dcsBackup").DcsBackup;
export const DcsBackup: typeof import("./dcsBackup").DcsBackup = null as any;
utilities.lazyLoad(exports, ["DcsBackup"], () => require("./dcsBackup"));

export { DcsParametersArgs, DcsParametersState } from "./dcsParameters";
export type DcsParameters = import("./dcsParameters").DcsParameters;
export const DcsParameters: typeof import("./dcsParameters").DcsParameters = null as any;
utilities.lazyLoad(exports, ["DcsParameters"], () => require("./dcsParameters"));

export { DcsRestoreArgs, DcsRestoreState } from "./dcsRestore";
export type DcsRestore = import("./dcsRestore").DcsRestore;
export const DcsRestore: typeof import("./dcsRestore").DcsRestore = null as any;
utilities.lazyLoad(exports, ["DcsRestore"], () => require("./dcsRestore"));

export { DdsParameterTemplateArgs, DdsParameterTemplateState } from "./ddsParameterTemplate";
export type DdsParameterTemplate = import("./ddsParameterTemplate").DdsParameterTemplate;
export const DdsParameterTemplate: typeof import("./ddsParameterTemplate").DdsParameterTemplate = null as any;
utilities.lazyLoad(exports, ["DdsParameterTemplate"], () => require("./ddsParameterTemplate"));

export { DdsParameterTemplateApplyArgs, DdsParameterTemplateApplyState } from "./ddsParameterTemplateApply";
export type DdsParameterTemplateApply = import("./ddsParameterTemplateApply").DdsParameterTemplateApply;
export const DdsParameterTemplateApply: typeof import("./ddsParameterTemplateApply").DdsParameterTemplateApply = null as any;
utilities.lazyLoad(exports, ["DdsParameterTemplateApply"], () => require("./ddsParameterTemplateApply"));

export { DdsParameterTemplateCompareArgs, DdsParameterTemplateCompareState } from "./ddsParameterTemplateCompare";
export type DdsParameterTemplateCompare = import("./ddsParameterTemplateCompare").DdsParameterTemplateCompare;
export const DdsParameterTemplateCompare: typeof import("./ddsParameterTemplateCompare").DdsParameterTemplateCompare = null as any;
utilities.lazyLoad(exports, ["DdsParameterTemplateCompare"], () => require("./ddsParameterTemplateCompare"));

export { DdsParameterTemplateCopyArgs, DdsParameterTemplateCopyState } from "./ddsParameterTemplateCopy";
export type DdsParameterTemplateCopy = import("./ddsParameterTemplateCopy").DdsParameterTemplateCopy;
export const DdsParameterTemplateCopy: typeof import("./ddsParameterTemplateCopy").DdsParameterTemplateCopy = null as any;
utilities.lazyLoad(exports, ["DdsParameterTemplateCopy"], () => require("./ddsParameterTemplateCopy"));

export { DdsParameterTemplateResetArgs, DdsParameterTemplateResetState } from "./ddsParameterTemplateReset";
export type DdsParameterTemplateReset = import("./ddsParameterTemplateReset").DdsParameterTemplateReset;
export const DdsParameterTemplateReset: typeof import("./ddsParameterTemplateReset").DdsParameterTemplateReset = null as any;
utilities.lazyLoad(exports, ["DdsParameterTemplateReset"], () => require("./ddsParameterTemplateReset"));

export { DmsInstanceArgs, DmsInstanceState } from "./dmsInstance";
export type DmsInstance = import("./dmsInstance").DmsInstance;
export const DmsInstance: typeof import("./dmsInstance").DmsInstance = null as any;
utilities.lazyLoad(exports, ["DmsInstance"], () => require("./dmsInstance"));

export { DmsKafkaConsumerGroupArgs, DmsKafkaConsumerGroupState } from "./dmsKafkaConsumerGroup";
export type DmsKafkaConsumerGroup = import("./dmsKafkaConsumerGroup").DmsKafkaConsumerGroup;
export const DmsKafkaConsumerGroup: typeof import("./dmsKafkaConsumerGroup").DmsKafkaConsumerGroup = null as any;
utilities.lazyLoad(exports, ["DmsKafkaConsumerGroup"], () => require("./dmsKafkaConsumerGroup"));

export { DmsKafkaMessageProduceArgs, DmsKafkaMessageProduceState } from "./dmsKafkaMessageProduce";
export type DmsKafkaMessageProduce = import("./dmsKafkaMessageProduce").DmsKafkaMessageProduce;
export const DmsKafkaMessageProduce: typeof import("./dmsKafkaMessageProduce").DmsKafkaMessageProduce = null as any;
utilities.lazyLoad(exports, ["DmsKafkaMessageProduce"], () => require("./dmsKafkaMessageProduce"));

export { DmsRocketmqConsumerGroupArgs, DmsRocketmqConsumerGroupState } from "./dmsRocketmqConsumerGroup";
export type DmsRocketmqConsumerGroup = import("./dmsRocketmqConsumerGroup").DmsRocketmqConsumerGroup;
export const DmsRocketmqConsumerGroup: typeof import("./dmsRocketmqConsumerGroup").DmsRocketmqConsumerGroup = null as any;
utilities.lazyLoad(exports, ["DmsRocketmqConsumerGroup"], () => require("./dmsRocketmqConsumerGroup"));

export { DmsRocketmqConsumptionVerifyArgs, DmsRocketmqConsumptionVerifyState } from "./dmsRocketmqConsumptionVerify";
export type DmsRocketmqConsumptionVerify = import("./dmsRocketmqConsumptionVerify").DmsRocketmqConsumptionVerify;
export const DmsRocketmqConsumptionVerify: typeof import("./dmsRocketmqConsumptionVerify").DmsRocketmqConsumptionVerify = null as any;
utilities.lazyLoad(exports, ["DmsRocketmqConsumptionVerify"], () => require("./dmsRocketmqConsumptionVerify"));

export { DmsRocketmqDeadLetterResendArgs, DmsRocketmqDeadLetterResendState } from "./dmsRocketmqDeadLetterResend";
export type DmsRocketmqDeadLetterResend = import("./dmsRocketmqDeadLetterResend").DmsRocketmqDeadLetterResend;
export const DmsRocketmqDeadLetterResend: typeof import("./dmsRocketmqDeadLetterResend").DmsRocketmqDeadLetterResend = null as any;
utilities.lazyLoad(exports, ["DmsRocketmqDeadLetterResend"], () => require("./dmsRocketmqDeadLetterResend"));

export { DmsRocketmqInstanceArgs, DmsRocketmqInstanceState } from "./dmsRocketmqInstance";
export type DmsRocketmqInstance = import("./dmsRocketmqInstance").DmsRocketmqInstance;
export const DmsRocketmqInstance: typeof import("./dmsRocketmqInstance").DmsRocketmqInstance = null as any;
utilities.lazyLoad(exports, ["DmsRocketmqInstance"], () => require("./dmsRocketmqInstance"));

export { DmsRocketmqMessageOffsetResetArgs, DmsRocketmqMessageOffsetResetState } from "./dmsRocketmqMessageOffsetReset";
export type DmsRocketmqMessageOffsetReset = import("./dmsRocketmqMessageOffsetReset").DmsRocketmqMessageOffsetReset;
export const DmsRocketmqMessageOffsetReset: typeof import("./dmsRocketmqMessageOffsetReset").DmsRocketmqMessageOffsetReset = null as any;
utilities.lazyLoad(exports, ["DmsRocketmqMessageOffsetReset"], () => require("./dmsRocketmqMessageOffsetReset"));

export { DmsRocketmqMigrationTaskArgs, DmsRocketmqMigrationTaskState } from "./dmsRocketmqMigrationTask";
export type DmsRocketmqMigrationTask = import("./dmsRocketmqMigrationTask").DmsRocketmqMigrationTask;
export const DmsRocketmqMigrationTask: typeof import("./dmsRocketmqMigrationTask").DmsRocketmqMigrationTask = null as any;
utilities.lazyLoad(exports, ["DmsRocketmqMigrationTask"], () => require("./dmsRocketmqMigrationTask"));

export { DmsRocketmqTopicArgs, DmsRocketmqTopicState } from "./dmsRocketmqTopic";
export type DmsRocketmqTopic = import("./dmsRocketmqTopic").DmsRocketmqTopic;
export const DmsRocketmqTopic: typeof import("./dmsRocketmqTopic").DmsRocketmqTopic = null as any;
utilities.lazyLoad(exports, ["DmsRocketmqTopic"], () => require("./dmsRocketmqTopic"));

export { DmsRocketmqUserArgs, DmsRocketmqUserState } from "./dmsRocketmqUser";
export type DmsRocketmqUser = import("./dmsRocketmqUser").DmsRocketmqUser;
export const DmsRocketmqUser: typeof import("./dmsRocketmqUser").DmsRocketmqUser = null as any;
utilities.lazyLoad(exports, ["DmsRocketmqUser"], () => require("./dmsRocketmqUser"));

export { ElbCertificateArgs, ElbCertificateState } from "./elbCertificate";
export type ElbCertificate = import("./elbCertificate").ElbCertificate;
export const ElbCertificate: typeof import("./elbCertificate").ElbCertificate = null as any;
utilities.lazyLoad(exports, ["ElbCertificate"], () => require("./elbCertificate"));

export { ElbIpgroupArgs, ElbIpgroupState } from "./elbIpgroup";
export type ElbIpgroup = import("./elbIpgroup").ElbIpgroup;
export const ElbIpgroup: typeof import("./elbIpgroup").ElbIpgroup = null as any;
utilities.lazyLoad(exports, ["ElbIpgroup"], () => require("./elbIpgroup"));

export { ElbL7policyArgs, ElbL7policyState } from "./elbL7policy";
export type ElbL7policy = import("./elbL7policy").ElbL7policy;
export const ElbL7policy: typeof import("./elbL7policy").ElbL7policy = null as any;
utilities.lazyLoad(exports, ["ElbL7policy"], () => require("./elbL7policy"));

export { ElbL7ruleArgs, ElbL7ruleState } from "./elbL7rule";
export type ElbL7rule = import("./elbL7rule").ElbL7rule;
export const ElbL7rule: typeof import("./elbL7rule").ElbL7rule = null as any;
utilities.lazyLoad(exports, ["ElbL7rule"], () => require("./elbL7rule"));

export { ElbListenerArgs, ElbListenerState } from "./elbListener";
export type ElbListener = import("./elbListener").ElbListener;
export const ElbListener: typeof import("./elbListener").ElbListener = null as any;
utilities.lazyLoad(exports, ["ElbListener"], () => require("./elbListener"));

export { ElbLoadbalancerArgs, ElbLoadbalancerState } from "./elbLoadbalancer";
export type ElbLoadbalancer = import("./elbLoadbalancer").ElbLoadbalancer;
export const ElbLoadbalancer: typeof import("./elbLoadbalancer").ElbLoadbalancer = null as any;
utilities.lazyLoad(exports, ["ElbLoadbalancer"], () => require("./elbLoadbalancer"));

export { ElbMemberArgs, ElbMemberState } from "./elbMember";
export type ElbMember = import("./elbMember").ElbMember;
export const ElbMember: typeof import("./elbMember").ElbMember = null as any;
utilities.lazyLoad(exports, ["ElbMember"], () => require("./elbMember"));

export { ElbMonitorArgs, ElbMonitorState } from "./elbMonitor";
export type ElbMonitor = import("./elbMonitor").ElbMonitor;
export const ElbMonitor: typeof import("./elbMonitor").ElbMonitor = null as any;
utilities.lazyLoad(exports, ["ElbMonitor"], () => require("./elbMonitor"));

export { ElbPoolArgs, ElbPoolState } from "./elbPool";
export type ElbPool = import("./elbPool").ElbPool;
export const ElbPool: typeof import("./elbPool").ElbPool = null as any;
utilities.lazyLoad(exports, ["ElbPool"], () => require("./elbPool"));

export { ElbSecurityPolicyArgs, ElbSecurityPolicyState } from "./elbSecurityPolicy";
export type ElbSecurityPolicy = import("./elbSecurityPolicy").ElbSecurityPolicy;
export const ElbSecurityPolicy: typeof import("./elbSecurityPolicy").ElbSecurityPolicy = null as any;
utilities.lazyLoad(exports, ["ElbSecurityPolicy"], () => require("./elbSecurityPolicy"));

export { FgsApplicationArgs, FgsApplicationState } from "./fgsApplication";
export type FgsApplication = import("./fgsApplication").FgsApplication;
export const FgsApplication: typeof import("./fgsApplication").FgsApplication = null as any;
utilities.lazyLoad(exports, ["FgsApplication"], () => require("./fgsApplication"));

export { FgsAsyncInvokeConfigurationArgs, FgsAsyncInvokeConfigurationState } from "./fgsAsyncInvokeConfiguration";
export type FgsAsyncInvokeConfiguration = import("./fgsAsyncInvokeConfiguration").FgsAsyncInvokeConfiguration;
export const FgsAsyncInvokeConfiguration: typeof import("./fgsAsyncInvokeConfiguration").FgsAsyncInvokeConfiguration = null as any;
utilities.lazyLoad(exports, ["FgsAsyncInvokeConfiguration"], () => require("./fgsAsyncInvokeConfiguration"));

export { FgsDependencyVersionArgs, FgsDependencyVersionState } from "./fgsDependencyVersion";
export type FgsDependencyVersion = import("./fgsDependencyVersion").FgsDependencyVersion;
export const FgsDependencyVersion: typeof import("./fgsDependencyVersion").FgsDependencyVersion = null as any;
utilities.lazyLoad(exports, ["FgsDependencyVersion"], () => require("./fgsDependencyVersion"));

export { FgsFunctionEventArgs, FgsFunctionEventState } from "./fgsFunctionEvent";
export type FgsFunctionEvent = import("./fgsFunctionEvent").FgsFunctionEvent;
export const FgsFunctionEvent: typeof import("./fgsFunctionEvent").FgsFunctionEvent = null as any;
utilities.lazyLoad(exports, ["FgsFunctionEvent"], () => require("./fgsFunctionEvent"));

export { FgsFunctionToppingArgs, FgsFunctionToppingState } from "./fgsFunctionTopping";
export type FgsFunctionTopping = import("./fgsFunctionTopping").FgsFunctionTopping;
export const FgsFunctionTopping: typeof import("./fgsFunctionTopping").FgsFunctionTopping = null as any;
utilities.lazyLoad(exports, ["FgsFunctionTopping"], () => require("./fgsFunctionTopping"));

export { FgsFunctionTriggerArgs, FgsFunctionTriggerState } from "./fgsFunctionTrigger";
export type FgsFunctionTrigger = import("./fgsFunctionTrigger").FgsFunctionTrigger;
export const FgsFunctionTrigger: typeof import("./fgsFunctionTrigger").FgsFunctionTrigger = null as any;
utilities.lazyLoad(exports, ["FgsFunctionTrigger"], () => require("./fgsFunctionTrigger"));

export { FgsFunctionTriggerStatusActionArgs, FgsFunctionTriggerStatusActionState } from "./fgsFunctionTriggerStatusAction";
export type FgsFunctionTriggerStatusAction = import("./fgsFunctionTriggerStatusAction").FgsFunctionTriggerStatusAction;
export const FgsFunctionTriggerStatusAction: typeof import("./fgsFunctionTriggerStatusAction").FgsFunctionTriggerStatusAction = null as any;
utilities.lazyLoad(exports, ["FgsFunctionTriggerStatusAction"], () => require("./fgsFunctionTriggerStatusAction"));

export { FgsLtsLogEnableArgs, FgsLtsLogEnableState } from "./fgsLtsLogEnable";
export type FgsLtsLogEnable = import("./fgsLtsLogEnable").FgsLtsLogEnable;
export const FgsLtsLogEnable: typeof import("./fgsLtsLogEnable").FgsLtsLogEnable = null as any;
utilities.lazyLoad(exports, ["FgsLtsLogEnable"], () => require("./fgsLtsLogEnable"));

export { GesGraphArgs, GesGraphState } from "./gesGraph";
export type GesGraph = import("./gesGraph").GesGraph;
export const GesGraph: typeof import("./gesGraph").GesGraph = null as any;
utilities.lazyLoad(exports, ["GesGraph"], () => require("./gesGraph"));

export { GetApigAclPoliciesArgs, GetApigAclPoliciesResult, GetApigAclPoliciesOutputArgs } from "./getApigAclPolicies";
export const getApigAclPolicies: typeof import("./getApigAclPolicies").getApigAclPolicies = null as any;
export const getApigAclPoliciesOutput: typeof import("./getApigAclPolicies").getApigAclPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getApigAclPolicies","getApigAclPoliciesOutput"], () => require("./getApigAclPolicies"));

export { GetApigApiArgs, GetApigApiResult, GetApigApiOutputArgs } from "./getApigApi";
export const getApigApi: typeof import("./getApigApi").getApigApi = null as any;
export const getApigApiOutput: typeof import("./getApigApi").getApigApiOutput = null as any;
utilities.lazyLoad(exports, ["getApigApi","getApigApiOutput"], () => require("./getApigApi"));

export { GetApigApiAssociatedAclPoliciesArgs, GetApigApiAssociatedAclPoliciesResult, GetApigApiAssociatedAclPoliciesOutputArgs } from "./getApigApiAssociatedAclPolicies";
export const getApigApiAssociatedAclPolicies: typeof import("./getApigApiAssociatedAclPolicies").getApigApiAssociatedAclPolicies = null as any;
export const getApigApiAssociatedAclPoliciesOutput: typeof import("./getApigApiAssociatedAclPolicies").getApigApiAssociatedAclPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getApigApiAssociatedAclPolicies","getApigApiAssociatedAclPoliciesOutput"], () => require("./getApigApiAssociatedAclPolicies"));

export { GetApigApiAssociatedApplicationsArgs, GetApigApiAssociatedApplicationsResult, GetApigApiAssociatedApplicationsOutputArgs } from "./getApigApiAssociatedApplications";
export const getApigApiAssociatedApplications: typeof import("./getApigApiAssociatedApplications").getApigApiAssociatedApplications = null as any;
export const getApigApiAssociatedApplicationsOutput: typeof import("./getApigApiAssociatedApplications").getApigApiAssociatedApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getApigApiAssociatedApplications","getApigApiAssociatedApplicationsOutput"], () => require("./getApigApiAssociatedApplications"));

export { GetApigApiAssociatedPluginsArgs, GetApigApiAssociatedPluginsResult, GetApigApiAssociatedPluginsOutputArgs } from "./getApigApiAssociatedPlugins";
export const getApigApiAssociatedPlugins: typeof import("./getApigApiAssociatedPlugins").getApigApiAssociatedPlugins = null as any;
export const getApigApiAssociatedPluginsOutput: typeof import("./getApigApiAssociatedPlugins").getApigApiAssociatedPluginsOutput = null as any;
utilities.lazyLoad(exports, ["getApigApiAssociatedPlugins","getApigApiAssociatedPluginsOutput"], () => require("./getApigApiAssociatedPlugins"));

export { GetApigApiAssociatedSignaturesArgs, GetApigApiAssociatedSignaturesResult, GetApigApiAssociatedSignaturesOutputArgs } from "./getApigApiAssociatedSignatures";
export const getApigApiAssociatedSignatures: typeof import("./getApigApiAssociatedSignatures").getApigApiAssociatedSignatures = null as any;
export const getApigApiAssociatedSignaturesOutput: typeof import("./getApigApiAssociatedSignatures").getApigApiAssociatedSignaturesOutput = null as any;
utilities.lazyLoad(exports, ["getApigApiAssociatedSignatures","getApigApiAssociatedSignaturesOutput"], () => require("./getApigApiAssociatedSignatures"));

export { GetApigApiAssociatedThrottlingPoliciesArgs, GetApigApiAssociatedThrottlingPoliciesResult, GetApigApiAssociatedThrottlingPoliciesOutputArgs } from "./getApigApiAssociatedThrottlingPolicies";
export const getApigApiAssociatedThrottlingPolicies: typeof import("./getApigApiAssociatedThrottlingPolicies").getApigApiAssociatedThrottlingPolicies = null as any;
export const getApigApiAssociatedThrottlingPoliciesOutput: typeof import("./getApigApiAssociatedThrottlingPolicies").getApigApiAssociatedThrottlingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getApigApiAssociatedThrottlingPolicies","getApigApiAssociatedThrottlingPoliciesOutput"], () => require("./getApigApiAssociatedThrottlingPolicies"));

export { GetApigApiBasicConfigurationsArgs, GetApigApiBasicConfigurationsResult, GetApigApiBasicConfigurationsOutputArgs } from "./getApigApiBasicConfigurations";
export const getApigApiBasicConfigurations: typeof import("./getApigApiBasicConfigurations").getApigApiBasicConfigurations = null as any;
export const getApigApiBasicConfigurationsOutput: typeof import("./getApigApiBasicConfigurations").getApigApiBasicConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getApigApiBasicConfigurations","getApigApiBasicConfigurationsOutput"], () => require("./getApigApiBasicConfigurations"));

export { GetApigAppcodesArgs, GetApigAppcodesResult, GetApigAppcodesOutputArgs } from "./getApigAppcodes";
export const getApigAppcodes: typeof import("./getApigAppcodes").getApigAppcodes = null as any;
export const getApigAppcodesOutput: typeof import("./getApigAppcodes").getApigAppcodesOutput = null as any;
utilities.lazyLoad(exports, ["getApigAppcodes","getApigAppcodesOutput"], () => require("./getApigAppcodes"));

export { GetApigApplicationAclArgs, GetApigApplicationAclResult, GetApigApplicationAclOutputArgs } from "./getApigApplicationAcl";
export const getApigApplicationAcl: typeof import("./getApigApplicationAcl").getApigApplicationAcl = null as any;
export const getApigApplicationAclOutput: typeof import("./getApigApplicationAcl").getApigApplicationAclOutput = null as any;
utilities.lazyLoad(exports, ["getApigApplicationAcl","getApigApplicationAclOutput"], () => require("./getApigApplicationAcl"));

export { GetApigApplicationQuotasArgs, GetApigApplicationQuotasResult, GetApigApplicationQuotasOutputArgs } from "./getApigApplicationQuotas";
export const getApigApplicationQuotas: typeof import("./getApigApplicationQuotas").getApigApplicationQuotas = null as any;
export const getApigApplicationQuotasOutput: typeof import("./getApigApplicationQuotas").getApigApplicationQuotasOutput = null as any;
utilities.lazyLoad(exports, ["getApigApplicationQuotas","getApigApplicationQuotasOutput"], () => require("./getApigApplicationQuotas"));

export { GetApigApplicationsArgs, GetApigApplicationsResult, GetApigApplicationsOutputArgs } from "./getApigApplications";
export const getApigApplications: typeof import("./getApigApplications").getApigApplications = null as any;
export const getApigApplicationsOutput: typeof import("./getApigApplications").getApigApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getApigApplications","getApigApplicationsOutput"], () => require("./getApigApplications"));

export { GetApigChannelsArgs, GetApigChannelsResult, GetApigChannelsOutputArgs } from "./getApigChannels";
export const getApigChannels: typeof import("./getApigChannels").getApigChannels = null as any;
export const getApigChannelsOutput: typeof import("./getApigChannels").getApigChannelsOutput = null as any;
utilities.lazyLoad(exports, ["getApigChannels","getApigChannelsOutput"], () => require("./getApigChannels"));

export { GetApigCustomAuthorizersArgs, GetApigCustomAuthorizersResult, GetApigCustomAuthorizersOutputArgs } from "./getApigCustomAuthorizers";
export const getApigCustomAuthorizers: typeof import("./getApigCustomAuthorizers").getApigCustomAuthorizers = null as any;
export const getApigCustomAuthorizersOutput: typeof import("./getApigCustomAuthorizers").getApigCustomAuthorizersOutput = null as any;
utilities.lazyLoad(exports, ["getApigCustomAuthorizers","getApigCustomAuthorizersOutput"], () => require("./getApigCustomAuthorizers"));

export { GetApigEndpointConnectionsArgs, GetApigEndpointConnectionsResult, GetApigEndpointConnectionsOutputArgs } from "./getApigEndpointConnections";
export const getApigEndpointConnections: typeof import("./getApigEndpointConnections").getApigEndpointConnections = null as any;
export const getApigEndpointConnectionsOutput: typeof import("./getApigEndpointConnections").getApigEndpointConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getApigEndpointConnections","getApigEndpointConnectionsOutput"], () => require("./getApigEndpointConnections"));

export { GetApigEnvironmentVariablesArgs, GetApigEnvironmentVariablesResult, GetApigEnvironmentVariablesOutputArgs } from "./getApigEnvironmentVariables";
export const getApigEnvironmentVariables: typeof import("./getApigEnvironmentVariables").getApigEnvironmentVariables = null as any;
export const getApigEnvironmentVariablesOutput: typeof import("./getApigEnvironmentVariables").getApigEnvironmentVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getApigEnvironmentVariables","getApigEnvironmentVariablesOutput"], () => require("./getApigEnvironmentVariables"));

export { GetApigGroupsArgs, GetApigGroupsResult, GetApigGroupsOutputArgs } from "./getApigGroups";
export const getApigGroups: typeof import("./getApigGroups").getApigGroups = null as any;
export const getApigGroupsOutput: typeof import("./getApigGroups").getApigGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getApigGroups","getApigGroupsOutput"], () => require("./getApigGroups"));

export { GetApigInstanceFeaturesArgs, GetApigInstanceFeaturesResult, GetApigInstanceFeaturesOutputArgs } from "./getApigInstanceFeatures";
export const getApigInstanceFeatures: typeof import("./getApigInstanceFeatures").getApigInstanceFeatures = null as any;
export const getApigInstanceFeaturesOutput: typeof import("./getApigInstanceFeatures").getApigInstanceFeaturesOutput = null as any;
utilities.lazyLoad(exports, ["getApigInstanceFeatures","getApigInstanceFeaturesOutput"], () => require("./getApigInstanceFeatures"));

export { GetApigInstanceSupportedFeaturesArgs, GetApigInstanceSupportedFeaturesResult, GetApigInstanceSupportedFeaturesOutputArgs } from "./getApigInstanceSupportedFeatures";
export const getApigInstanceSupportedFeatures: typeof import("./getApigInstanceSupportedFeatures").getApigInstanceSupportedFeatures = null as any;
export const getApigInstanceSupportedFeaturesOutput: typeof import("./getApigInstanceSupportedFeatures").getApigInstanceSupportedFeaturesOutput = null as any;
utilities.lazyLoad(exports, ["getApigInstanceSupportedFeatures","getApigInstanceSupportedFeaturesOutput"], () => require("./getApigInstanceSupportedFeatures"));

export { GetApigInstancesArgs, GetApigInstancesResult, GetApigInstancesOutputArgs } from "./getApigInstances";
export const getApigInstances: typeof import("./getApigInstances").getApigInstances = null as any;
export const getApigInstancesOutput: typeof import("./getApigInstances").getApigInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getApigInstances","getApigInstancesOutput"], () => require("./getApigInstances"));

export { GetApigSignaturesArgs, GetApigSignaturesResult, GetApigSignaturesOutputArgs } from "./getApigSignatures";
export const getApigSignatures: typeof import("./getApigSignatures").getApigSignatures = null as any;
export const getApigSignaturesOutput: typeof import("./getApigSignatures").getApigSignaturesOutput = null as any;
utilities.lazyLoad(exports, ["getApigSignatures","getApigSignaturesOutput"], () => require("./getApigSignatures"));

export { GetApigThrottlingPoliciesArgs, GetApigThrottlingPoliciesResult, GetApigThrottlingPoliciesOutputArgs } from "./getApigThrottlingPolicies";
export const getApigThrottlingPolicies: typeof import("./getApigThrottlingPolicies").getApigThrottlingPolicies = null as any;
export const getApigThrottlingPoliciesOutput: typeof import("./getApigThrottlingPolicies").getApigThrottlingPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getApigThrottlingPolicies","getApigThrottlingPoliciesOutput"], () => require("./getApigThrottlingPolicies"));

export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));

export { GetCbhAvailabilityZonesArgs, GetCbhAvailabilityZonesResult, GetCbhAvailabilityZonesOutputArgs } from "./getCbhAvailabilityZones";
export const getCbhAvailabilityZones: typeof import("./getCbhAvailabilityZones").getCbhAvailabilityZones = null as any;
export const getCbhAvailabilityZonesOutput: typeof import("./getCbhAvailabilityZones").getCbhAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getCbhAvailabilityZones","getCbhAvailabilityZonesOutput"], () => require("./getCbhAvailabilityZones"));

export { GetCbhFlavorsArgs, GetCbhFlavorsResult, GetCbhFlavorsOutputArgs } from "./getCbhFlavors";
export const getCbhFlavors: typeof import("./getCbhFlavors").getCbhFlavors = null as any;
export const getCbhFlavorsOutput: typeof import("./getCbhFlavors").getCbhFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getCbhFlavors","getCbhFlavorsOutput"], () => require("./getCbhFlavors"));

export { GetCbhInstancesArgs, GetCbhInstancesResult, GetCbhInstancesOutputArgs } from "./getCbhInstances";
export const getCbhInstances: typeof import("./getCbhInstances").getCbhInstances = null as any;
export const getCbhInstancesOutput: typeof import("./getCbhInstances").getCbhInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getCbhInstances","getCbhInstancesOutput"], () => require("./getCbhInstances"));

export { GetCbrBackupArgs, GetCbrBackupResult, GetCbrBackupOutputArgs } from "./getCbrBackup";
export const getCbrBackup: typeof import("./getCbrBackup").getCbrBackup = null as any;
export const getCbrBackupOutput: typeof import("./getCbrBackup").getCbrBackupOutput = null as any;
utilities.lazyLoad(exports, ["getCbrBackup","getCbrBackupOutput"], () => require("./getCbrBackup"));

export { GetCbrPoliciesArgs, GetCbrPoliciesResult, GetCbrPoliciesOutputArgs } from "./getCbrPolicies";
export const getCbrPolicies: typeof import("./getCbrPolicies").getCbrPolicies = null as any;
export const getCbrPoliciesOutput: typeof import("./getCbrPolicies").getCbrPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getCbrPolicies","getCbrPoliciesOutput"], () => require("./getCbrPolicies"));

export { GetCdmFlavorsArgs, GetCdmFlavorsResult, GetCdmFlavorsOutputArgs } from "./getCdmFlavors";
export const getCdmFlavors: typeof import("./getCdmFlavors").getCdmFlavors = null as any;
export const getCdmFlavorsOutput: typeof import("./getCdmFlavors").getCdmFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getCdmFlavors","getCdmFlavorsOutput"], () => require("./getCdmFlavors"));

export { GetDcsAccountsArgs, GetDcsAccountsResult, GetDcsAccountsOutputArgs } from "./getDcsAccounts";
export const getDcsAccounts: typeof import("./getDcsAccounts").getDcsAccounts = null as any;
export const getDcsAccountsOutput: typeof import("./getDcsAccounts").getDcsAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getDcsAccounts","getDcsAccountsOutput"], () => require("./getDcsAccounts"));

export { GetDcsAzArgs, GetDcsAzResult, GetDcsAzOutputArgs } from "./getDcsAz";
export const getDcsAz: typeof import("./getDcsAz").getDcsAz = null as any;
export const getDcsAzOutput: typeof import("./getDcsAz").getDcsAzOutput = null as any;
utilities.lazyLoad(exports, ["getDcsAz","getDcsAzOutput"], () => require("./getDcsAz"));

export { GetDcsProductArgs, GetDcsProductResult, GetDcsProductOutputArgs } from "./getDcsProduct";
export const getDcsProduct: typeof import("./getDcsProduct").getDcsProduct = null as any;
export const getDcsProductOutput: typeof import("./getDcsProduct").getDcsProductOutput = null as any;
utilities.lazyLoad(exports, ["getDcsProduct","getDcsProductOutput"], () => require("./getDcsProduct"));

export { GetDmsAzArgs, GetDmsAzResult, GetDmsAzOutputArgs } from "./getDmsAz";
export const getDmsAz: typeof import("./getDmsAz").getDmsAz = null as any;
export const getDmsAzOutput: typeof import("./getDmsAz").getDmsAzOutput = null as any;
utilities.lazyLoad(exports, ["getDmsAz","getDmsAzOutput"], () => require("./getDmsAz"));

export { GetDmsKafkaConsumerGroupsArgs, GetDmsKafkaConsumerGroupsResult, GetDmsKafkaConsumerGroupsOutputArgs } from "./getDmsKafkaConsumerGroups";
export const getDmsKafkaConsumerGroups: typeof import("./getDmsKafkaConsumerGroups").getDmsKafkaConsumerGroups = null as any;
export const getDmsKafkaConsumerGroupsOutput: typeof import("./getDmsKafkaConsumerGroups").getDmsKafkaConsumerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsKafkaConsumerGroups","getDmsKafkaConsumerGroupsOutput"], () => require("./getDmsKafkaConsumerGroups"));

export { GetDmsKafkaMessagesArgs, GetDmsKafkaMessagesResult, GetDmsKafkaMessagesOutputArgs } from "./getDmsKafkaMessages";
export const getDmsKafkaMessages: typeof import("./getDmsKafkaMessages").getDmsKafkaMessages = null as any;
export const getDmsKafkaMessagesOutput: typeof import("./getDmsKafkaMessages").getDmsKafkaMessagesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsKafkaMessages","getDmsKafkaMessagesOutput"], () => require("./getDmsKafkaMessages"));

export { GetDmsKafkaUsersArgs, GetDmsKafkaUsersResult, GetDmsKafkaUsersOutputArgs } from "./getDmsKafkaUsers";
export const getDmsKafkaUsers: typeof import("./getDmsKafkaUsers").getDmsKafkaUsers = null as any;
export const getDmsKafkaUsersOutput: typeof import("./getDmsKafkaUsers").getDmsKafkaUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDmsKafkaUsers","getDmsKafkaUsersOutput"], () => require("./getDmsKafkaUsers"));

export { GetDmsRabbitmqFlavorsArgs, GetDmsRabbitmqFlavorsResult, GetDmsRabbitmqFlavorsOutputArgs } from "./getDmsRabbitmqFlavors";
export const getDmsRabbitmqFlavors: typeof import("./getDmsRabbitmqFlavors").getDmsRabbitmqFlavors = null as any;
export const getDmsRabbitmqFlavorsOutput: typeof import("./getDmsRabbitmqFlavors").getDmsRabbitmqFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRabbitmqFlavors","getDmsRabbitmqFlavorsOutput"], () => require("./getDmsRabbitmqFlavors"));

export { GetDmsRocketmqBrokerArgs, GetDmsRocketmqBrokerResult, GetDmsRocketmqBrokerOutputArgs } from "./getDmsRocketmqBroker";
export const getDmsRocketmqBroker: typeof import("./getDmsRocketmqBroker").getDmsRocketmqBroker = null as any;
export const getDmsRocketmqBrokerOutput: typeof import("./getDmsRocketmqBroker").getDmsRocketmqBrokerOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqBroker","getDmsRocketmqBrokerOutput"], () => require("./getDmsRocketmqBroker"));

export { GetDmsRocketmqConsumerGroupAccessUsersArgs, GetDmsRocketmqConsumerGroupAccessUsersResult, GetDmsRocketmqConsumerGroupAccessUsersOutputArgs } from "./getDmsRocketmqConsumerGroupAccessUsers";
export const getDmsRocketmqConsumerGroupAccessUsers: typeof import("./getDmsRocketmqConsumerGroupAccessUsers").getDmsRocketmqConsumerGroupAccessUsers = null as any;
export const getDmsRocketmqConsumerGroupAccessUsersOutput: typeof import("./getDmsRocketmqConsumerGroupAccessUsers").getDmsRocketmqConsumerGroupAccessUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqConsumerGroupAccessUsers","getDmsRocketmqConsumerGroupAccessUsersOutput"], () => require("./getDmsRocketmqConsumerGroupAccessUsers"));

export { GetDmsRocketmqConsumerGroupsArgs, GetDmsRocketmqConsumerGroupsResult, GetDmsRocketmqConsumerGroupsOutputArgs } from "./getDmsRocketmqConsumerGroups";
export const getDmsRocketmqConsumerGroups: typeof import("./getDmsRocketmqConsumerGroups").getDmsRocketmqConsumerGroups = null as any;
export const getDmsRocketmqConsumerGroupsOutput: typeof import("./getDmsRocketmqConsumerGroups").getDmsRocketmqConsumerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqConsumerGroups","getDmsRocketmqConsumerGroupsOutput"], () => require("./getDmsRocketmqConsumerGroups"));

export { GetDmsRocketmqConsumersArgs, GetDmsRocketmqConsumersResult, GetDmsRocketmqConsumersOutputArgs } from "./getDmsRocketmqConsumers";
export const getDmsRocketmqConsumers: typeof import("./getDmsRocketmqConsumers").getDmsRocketmqConsumers = null as any;
export const getDmsRocketmqConsumersOutput: typeof import("./getDmsRocketmqConsumers").getDmsRocketmqConsumersOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqConsumers","getDmsRocketmqConsumersOutput"], () => require("./getDmsRocketmqConsumers"));

export { GetDmsRocketmqExtendFlavorsArgs, GetDmsRocketmqExtendFlavorsResult, GetDmsRocketmqExtendFlavorsOutputArgs } from "./getDmsRocketmqExtendFlavors";
export const getDmsRocketmqExtendFlavors: typeof import("./getDmsRocketmqExtendFlavors").getDmsRocketmqExtendFlavors = null as any;
export const getDmsRocketmqExtendFlavorsOutput: typeof import("./getDmsRocketmqExtendFlavors").getDmsRocketmqExtendFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqExtendFlavors","getDmsRocketmqExtendFlavorsOutput"], () => require("./getDmsRocketmqExtendFlavors"));

export { GetDmsRocketmqFlavorsArgs, GetDmsRocketmqFlavorsResult, GetDmsRocketmqFlavorsOutputArgs } from "./getDmsRocketmqFlavors";
export const getDmsRocketmqFlavors: typeof import("./getDmsRocketmqFlavors").getDmsRocketmqFlavors = null as any;
export const getDmsRocketmqFlavorsOutput: typeof import("./getDmsRocketmqFlavors").getDmsRocketmqFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqFlavors","getDmsRocketmqFlavorsOutput"], () => require("./getDmsRocketmqFlavors"));

export { GetDmsRocketmqInstancesArgs, GetDmsRocketmqInstancesResult, GetDmsRocketmqInstancesOutputArgs } from "./getDmsRocketmqInstances";
export const getDmsRocketmqInstances: typeof import("./getDmsRocketmqInstances").getDmsRocketmqInstances = null as any;
export const getDmsRocketmqInstancesOutput: typeof import("./getDmsRocketmqInstances").getDmsRocketmqInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqInstances","getDmsRocketmqInstancesOutput"], () => require("./getDmsRocketmqInstances"));

export { GetDmsRocketmqMessageTracesArgs, GetDmsRocketmqMessageTracesResult, GetDmsRocketmqMessageTracesOutputArgs } from "./getDmsRocketmqMessageTraces";
export const getDmsRocketmqMessageTraces: typeof import("./getDmsRocketmqMessageTraces").getDmsRocketmqMessageTraces = null as any;
export const getDmsRocketmqMessageTracesOutput: typeof import("./getDmsRocketmqMessageTraces").getDmsRocketmqMessageTracesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqMessageTraces","getDmsRocketmqMessageTracesOutput"], () => require("./getDmsRocketmqMessageTraces"));

export { GetDmsRocketmqMessagesArgs, GetDmsRocketmqMessagesResult, GetDmsRocketmqMessagesOutputArgs } from "./getDmsRocketmqMessages";
export const getDmsRocketmqMessages: typeof import("./getDmsRocketmqMessages").getDmsRocketmqMessages = null as any;
export const getDmsRocketmqMessagesOutput: typeof import("./getDmsRocketmqMessages").getDmsRocketmqMessagesOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqMessages","getDmsRocketmqMessagesOutput"], () => require("./getDmsRocketmqMessages"));

export { GetDmsRocketmqMigrationTasksArgs, GetDmsRocketmqMigrationTasksResult, GetDmsRocketmqMigrationTasksOutputArgs } from "./getDmsRocketmqMigrationTasks";
export const getDmsRocketmqMigrationTasks: typeof import("./getDmsRocketmqMigrationTasks").getDmsRocketmqMigrationTasks = null as any;
export const getDmsRocketmqMigrationTasksOutput: typeof import("./getDmsRocketmqMigrationTasks").getDmsRocketmqMigrationTasksOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqMigrationTasks","getDmsRocketmqMigrationTasksOutput"], () => require("./getDmsRocketmqMigrationTasks"));

export { GetDmsRocketmqTopicAccessUsersArgs, GetDmsRocketmqTopicAccessUsersResult, GetDmsRocketmqTopicAccessUsersOutputArgs } from "./getDmsRocketmqTopicAccessUsers";
export const getDmsRocketmqTopicAccessUsers: typeof import("./getDmsRocketmqTopicAccessUsers").getDmsRocketmqTopicAccessUsers = null as any;
export const getDmsRocketmqTopicAccessUsersOutput: typeof import("./getDmsRocketmqTopicAccessUsers").getDmsRocketmqTopicAccessUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqTopicAccessUsers","getDmsRocketmqTopicAccessUsersOutput"], () => require("./getDmsRocketmqTopicAccessUsers"));

export { GetDmsRocketmqTopicConsumerGroupsArgs, GetDmsRocketmqTopicConsumerGroupsResult, GetDmsRocketmqTopicConsumerGroupsOutputArgs } from "./getDmsRocketmqTopicConsumerGroups";
export const getDmsRocketmqTopicConsumerGroups: typeof import("./getDmsRocketmqTopicConsumerGroups").getDmsRocketmqTopicConsumerGroups = null as any;
export const getDmsRocketmqTopicConsumerGroupsOutput: typeof import("./getDmsRocketmqTopicConsumerGroups").getDmsRocketmqTopicConsumerGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqTopicConsumerGroups","getDmsRocketmqTopicConsumerGroupsOutput"], () => require("./getDmsRocketmqTopicConsumerGroups"));

export { GetDmsRocketmqTopicsArgs, GetDmsRocketmqTopicsResult, GetDmsRocketmqTopicsOutputArgs } from "./getDmsRocketmqTopics";
export const getDmsRocketmqTopics: typeof import("./getDmsRocketmqTopics").getDmsRocketmqTopics = null as any;
export const getDmsRocketmqTopicsOutput: typeof import("./getDmsRocketmqTopics").getDmsRocketmqTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqTopics","getDmsRocketmqTopicsOutput"], () => require("./getDmsRocketmqTopics"));

export { GetDmsRocketmqUsersArgs, GetDmsRocketmqUsersResult, GetDmsRocketmqUsersOutputArgs } from "./getDmsRocketmqUsers";
export const getDmsRocketmqUsers: typeof import("./getDmsRocketmqUsers").getDmsRocketmqUsers = null as any;
export const getDmsRocketmqUsersOutput: typeof import("./getDmsRocketmqUsers").getDmsRocketmqUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDmsRocketmqUsers","getDmsRocketmqUsersOutput"], () => require("./getDmsRocketmqUsers"));

export { GetDnsZonesArgs, GetDnsZonesResult, GetDnsZonesOutputArgs } from "./getDnsZones";
export const getDnsZones: typeof import("./getDnsZones").getDnsZones = null as any;
export const getDnsZonesOutput: typeof import("./getDnsZones").getDnsZonesOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZones","getDnsZonesOutput"], () => require("./getDnsZones"));

export { GetElbCertificateArgs, GetElbCertificateResult, GetElbCertificateOutputArgs } from "./getElbCertificate";
export const getElbCertificate: typeof import("./getElbCertificate").getElbCertificate = null as any;
export const getElbCertificateOutput: typeof import("./getElbCertificate").getElbCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getElbCertificate","getElbCertificateOutput"], () => require("./getElbCertificate"));

export { GetElbFlavorsArgs, GetElbFlavorsResult, GetElbFlavorsOutputArgs } from "./getElbFlavors";
export const getElbFlavors: typeof import("./getElbFlavors").getElbFlavors = null as any;
export const getElbFlavorsOutput: typeof import("./getElbFlavors").getElbFlavorsOutput = null as any;
utilities.lazyLoad(exports, ["getElbFlavors","getElbFlavorsOutput"], () => require("./getElbFlavors"));

export { GetElbPoolsArgs, GetElbPoolsResult, GetElbPoolsOutputArgs } from "./getElbPools";
export const getElbPools: typeof import("./getElbPools").getElbPools = null as any;
export const getElbPoolsOutput: typeof import("./getElbPools").getElbPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getElbPools","getElbPoolsOutput"], () => require("./getElbPools"));

export { GetFgsApplicationTemplatesArgs, GetFgsApplicationTemplatesResult, GetFgsApplicationTemplatesOutputArgs } from "./getFgsApplicationTemplates";
export const getFgsApplicationTemplates: typeof import("./getFgsApplicationTemplates").getFgsApplicationTemplates = null as any;
export const getFgsApplicationTemplatesOutput: typeof import("./getFgsApplicationTemplates").getFgsApplicationTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getFgsApplicationTemplates","getFgsApplicationTemplatesOutput"], () => require("./getFgsApplicationTemplates"));

export { GetFgsApplicationsArgs, GetFgsApplicationsResult, GetFgsApplicationsOutputArgs } from "./getFgsApplications";
export const getFgsApplications: typeof import("./getFgsApplications").getFgsApplications = null as any;
export const getFgsApplicationsOutput: typeof import("./getFgsApplications").getFgsApplicationsOutput = null as any;
utilities.lazyLoad(exports, ["getFgsApplications","getFgsApplicationsOutput"], () => require("./getFgsApplications"));

export { GetFgsDependencyVersionsArgs, GetFgsDependencyVersionsResult, GetFgsDependencyVersionsOutputArgs } from "./getFgsDependencyVersions";
export const getFgsDependencyVersions: typeof import("./getFgsDependencyVersions").getFgsDependencyVersions = null as any;
export const getFgsDependencyVersionsOutput: typeof import("./getFgsDependencyVersions").getFgsDependencyVersionsOutput = null as any;
utilities.lazyLoad(exports, ["getFgsDependencyVersions","getFgsDependencyVersionsOutput"], () => require("./getFgsDependencyVersions"));

export { GetFgsFunctionEventsArgs, GetFgsFunctionEventsResult, GetFgsFunctionEventsOutputArgs } from "./getFgsFunctionEvents";
export const getFgsFunctionEvents: typeof import("./getFgsFunctionEvents").getFgsFunctionEvents = null as any;
export const getFgsFunctionEventsOutput: typeof import("./getFgsFunctionEvents").getFgsFunctionEventsOutput = null as any;
utilities.lazyLoad(exports, ["getFgsFunctionEvents","getFgsFunctionEventsOutput"], () => require("./getFgsFunctionEvents"));

export { GetFgsFunctionTriggersArgs, GetFgsFunctionTriggersResult, GetFgsFunctionTriggersOutputArgs } from "./getFgsFunctionTriggers";
export const getFgsFunctionTriggers: typeof import("./getFgsFunctionTriggers").getFgsFunctionTriggers = null as any;
export const getFgsFunctionTriggersOutput: typeof import("./getFgsFunctionTriggers").getFgsFunctionTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getFgsFunctionTriggers","getFgsFunctionTriggersOutput"], () => require("./getFgsFunctionTriggers"));

export { GetFgsFunctionsArgs, GetFgsFunctionsResult, GetFgsFunctionsOutputArgs } from "./getFgsFunctions";
export const getFgsFunctions: typeof import("./getFgsFunctions").getFgsFunctions = null as any;
export const getFgsFunctionsOutput: typeof import("./getFgsFunctions").getFgsFunctionsOutput = null as any;
utilities.lazyLoad(exports, ["getFgsFunctions","getFgsFunctionsOutput"], () => require("./getFgsFunctions"));

export { GetFgsQuotasArgs, GetFgsQuotasResult, GetFgsQuotasOutputArgs } from "./getFgsQuotas";
export const getFgsQuotas: typeof import("./getFgsQuotas").getFgsQuotas = null as any;
export const getFgsQuotasOutput: typeof import("./getFgsQuotas").getFgsQuotasOutput = null as any;
utilities.lazyLoad(exports, ["getFgsQuotas","getFgsQuotasOutput"], () => require("./getFgsQuotas"));

export { GetIdentityRoleV3Args, GetIdentityRoleV3Result, GetIdentityRoleV3OutputArgs } from "./getIdentityRoleV3";
export const getIdentityRoleV3: typeof import("./getIdentityRoleV3").getIdentityRoleV3 = null as any;
export const getIdentityRoleV3Output: typeof import("./getIdentityRoleV3").getIdentityRoleV3Output = null as any;
utilities.lazyLoad(exports, ["getIdentityRoleV3","getIdentityRoleV3Output"], () => require("./getIdentityRoleV3"));

export { GetKpsFailedTasksArgs, GetKpsFailedTasksResult, GetKpsFailedTasksOutputArgs } from "./getKpsFailedTasks";
export const getKpsFailedTasks: typeof import("./getKpsFailedTasks").getKpsFailedTasks = null as any;
export const getKpsFailedTasksOutput: typeof import("./getKpsFailedTasks").getKpsFailedTasksOutput = null as any;
utilities.lazyLoad(exports, ["getKpsFailedTasks","getKpsFailedTasksOutput"], () => require("./getKpsFailedTasks"));

export { GetKpsRunningTasksArgs, GetKpsRunningTasksResult, GetKpsRunningTasksOutputArgs } from "./getKpsRunningTasks";
export const getKpsRunningTasks: typeof import("./getKpsRunningTasks").getKpsRunningTasks = null as any;
export const getKpsRunningTasksOutput: typeof import("./getKpsRunningTasks").getKpsRunningTasksOutput = null as any;
utilities.lazyLoad(exports, ["getKpsRunningTasks","getKpsRunningTasksOutput"], () => require("./getKpsRunningTasks"));

export { GetSfsFileSystemV2Args, GetSfsFileSystemV2Result, GetSfsFileSystemV2OutputArgs } from "./getSfsFileSystemV2";
export const getSfsFileSystemV2: typeof import("./getSfsFileSystemV2").getSfsFileSystemV2 = null as any;
export const getSfsFileSystemV2Output: typeof import("./getSfsFileSystemV2").getSfsFileSystemV2Output = null as any;
utilities.lazyLoad(exports, ["getSfsFileSystemV2","getSfsFileSystemV2Output"], () => require("./getSfsFileSystemV2"));

export { GetSfsTurboDataTasksArgs, GetSfsTurboDataTasksResult, GetSfsTurboDataTasksOutputArgs } from "./getSfsTurboDataTasks";
export const getSfsTurboDataTasks: typeof import("./getSfsTurboDataTasks").getSfsTurboDataTasks = null as any;
export const getSfsTurboDataTasksOutput: typeof import("./getSfsTurboDataTasks").getSfsTurboDataTasksOutput = null as any;
utilities.lazyLoad(exports, ["getSfsTurboDataTasks","getSfsTurboDataTasksOutput"], () => require("./getSfsTurboDataTasks"));

export { GetSfsTurboDuTasksArgs, GetSfsTurboDuTasksResult, GetSfsTurboDuTasksOutputArgs } from "./getSfsTurboDuTasks";
export const getSfsTurboDuTasks: typeof import("./getSfsTurboDuTasks").getSfsTurboDuTasks = null as any;
export const getSfsTurboDuTasksOutput: typeof import("./getSfsTurboDuTasks").getSfsTurboDuTasksOutput = null as any;
utilities.lazyLoad(exports, ["getSfsTurboDuTasks","getSfsTurboDuTasksOutput"], () => require("./getSfsTurboDuTasks"));

export { GetSfsTurboObsTargetsArgs, GetSfsTurboObsTargetsResult, GetSfsTurboObsTargetsOutputArgs } from "./getSfsTurboObsTargets";
export const getSfsTurboObsTargets: typeof import("./getSfsTurboObsTargets").getSfsTurboObsTargets = null as any;
export const getSfsTurboObsTargetsOutput: typeof import("./getSfsTurboObsTargets").getSfsTurboObsTargetsOutput = null as any;
utilities.lazyLoad(exports, ["getSfsTurboObsTargets","getSfsTurboObsTargetsOutput"], () => require("./getSfsTurboObsTargets"));

export { GetSfsTurboPermRulesArgs, GetSfsTurboPermRulesResult, GetSfsTurboPermRulesOutputArgs } from "./getSfsTurboPermRules";
export const getSfsTurboPermRules: typeof import("./getSfsTurboPermRules").getSfsTurboPermRules = null as any;
export const getSfsTurboPermRulesOutput: typeof import("./getSfsTurboPermRules").getSfsTurboPermRulesOutput = null as any;
utilities.lazyLoad(exports, ["getSfsTurboPermRules","getSfsTurboPermRulesOutput"], () => require("./getSfsTurboPermRules"));

export { GetVpcRouteArgs, GetVpcRouteResult, GetVpcRouteOutputArgs } from "./getVpcRoute";
export const getVpcRoute: typeof import("./getVpcRoute").getVpcRoute = null as any;
export const getVpcRouteOutput: typeof import("./getVpcRoute").getVpcRouteOutput = null as any;
utilities.lazyLoad(exports, ["getVpcRoute","getVpcRouteOutput"], () => require("./getVpcRoute"));

export { GetVpnConnectionHealthChecksArgs, GetVpnConnectionHealthChecksResult, GetVpnConnectionHealthChecksOutputArgs } from "./getVpnConnectionHealthChecks";
export const getVpnConnectionHealthChecks: typeof import("./getVpnConnectionHealthChecks").getVpnConnectionHealthChecks = null as any;
export const getVpnConnectionHealthChecksOutput: typeof import("./getVpnConnectionHealthChecks").getVpnConnectionHealthChecksOutput = null as any;
utilities.lazyLoad(exports, ["getVpnConnectionHealthChecks","getVpnConnectionHealthChecksOutput"], () => require("./getVpnConnectionHealthChecks"));

export { GetVpnConnectionsArgs, GetVpnConnectionsResult, GetVpnConnectionsOutputArgs } from "./getVpnConnections";
export const getVpnConnections: typeof import("./getVpnConnections").getVpnConnections = null as any;
export const getVpnConnectionsOutput: typeof import("./getVpnConnections").getVpnConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpnConnections","getVpnConnectionsOutput"], () => require("./getVpnConnections"));

export { GetVpnCustomerGatewaysArgs, GetVpnCustomerGatewaysResult, GetVpnCustomerGatewaysOutputArgs } from "./getVpnCustomerGateways";
export const getVpnCustomerGateways: typeof import("./getVpnCustomerGateways").getVpnCustomerGateways = null as any;
export const getVpnCustomerGatewaysOutput: typeof import("./getVpnCustomerGateways").getVpnCustomerGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpnCustomerGateways","getVpnCustomerGatewaysOutput"], () => require("./getVpnCustomerGateways"));

export { GetVpnGatewayAvailabilityZonesArgs, GetVpnGatewayAvailabilityZonesResult, GetVpnGatewayAvailabilityZonesOutputArgs } from "./getVpnGatewayAvailabilityZones";
export const getVpnGatewayAvailabilityZones: typeof import("./getVpnGatewayAvailabilityZones").getVpnGatewayAvailabilityZones = null as any;
export const getVpnGatewayAvailabilityZonesOutput: typeof import("./getVpnGatewayAvailabilityZones").getVpnGatewayAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGatewayAvailabilityZones","getVpnGatewayAvailabilityZonesOutput"], () => require("./getVpnGatewayAvailabilityZones"));

export { GetVpnGatewaysArgs, GetVpnGatewaysResult, GetVpnGatewaysOutputArgs } from "./getVpnGateways";
export const getVpnGateways: typeof import("./getVpnGateways").getVpnGateways = null as any;
export const getVpnGatewaysOutput: typeof import("./getVpnGateways").getVpnGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVpnGateways","getVpnGatewaysOutput"], () => require("./getVpnGateways"));

export { IdentityGroupMembershipV3Args, IdentityGroupMembershipV3State } from "./identityGroupMembershipV3";
export type IdentityGroupMembershipV3 = import("./identityGroupMembershipV3").IdentityGroupMembershipV3;
export const IdentityGroupMembershipV3: typeof import("./identityGroupMembershipV3").IdentityGroupMembershipV3 = null as any;
utilities.lazyLoad(exports, ["IdentityGroupMembershipV3"], () => require("./identityGroupMembershipV3"));

export { IdentityGroupV3Args, IdentityGroupV3State } from "./identityGroupV3";
export type IdentityGroupV3 = import("./identityGroupV3").IdentityGroupV3;
export const IdentityGroupV3: typeof import("./identityGroupV3").IdentityGroupV3 = null as any;
utilities.lazyLoad(exports, ["IdentityGroupV3"], () => require("./identityGroupV3"));

export { IdentityRoleAssignmentV3Args, IdentityRoleAssignmentV3State } from "./identityRoleAssignmentV3";
export type IdentityRoleAssignmentV3 = import("./identityRoleAssignmentV3").IdentityRoleAssignmentV3;
export const IdentityRoleAssignmentV3: typeof import("./identityRoleAssignmentV3").IdentityRoleAssignmentV3 = null as any;
utilities.lazyLoad(exports, ["IdentityRoleAssignmentV3"], () => require("./identityRoleAssignmentV3"));

export { IdentityUserV3Args, IdentityUserV3State } from "./identityUserV3";
export type IdentityUserV3 = import("./identityUserV3").IdentityUserV3;
export const IdentityUserV3: typeof import("./identityUserV3").IdentityUserV3 = null as any;
utilities.lazyLoad(exports, ["IdentityUserV3"], () => require("./identityUserV3"));

export { KpsKeypairAssociateArgs, KpsKeypairAssociateState } from "./kpsKeypairAssociate";
export type KpsKeypairAssociate = import("./kpsKeypairAssociate").KpsKeypairAssociate;
export const KpsKeypairAssociate: typeof import("./kpsKeypairAssociate").KpsKeypairAssociate = null as any;
utilities.lazyLoad(exports, ["KpsKeypairAssociate"], () => require("./kpsKeypairAssociate"));

export { KpsKeypairDisassociateArgs, KpsKeypairDisassociateState } from "./kpsKeypairDisassociate";
export type KpsKeypairDisassociate = import("./kpsKeypairDisassociate").KpsKeypairDisassociate;
export const KpsKeypairDisassociate: typeof import("./kpsKeypairDisassociate").KpsKeypairDisassociate = null as any;
utilities.lazyLoad(exports, ["KpsKeypairDisassociate"], () => require("./kpsKeypairDisassociate"));

export { NetworkingEipAssociateArgs, NetworkingEipAssociateState } from "./networkingEipAssociate";
export type NetworkingEipAssociate = import("./networkingEipAssociate").NetworkingEipAssociate;
export const NetworkingEipAssociate: typeof import("./networkingEipAssociate").NetworkingEipAssociate = null as any;
utilities.lazyLoad(exports, ["NetworkingEipAssociate"], () => require("./networkingEipAssociate"));

export { ObsBucketAclArgs, ObsBucketAclState } from "./obsBucketAcl";
export type ObsBucketAcl = import("./obsBucketAcl").ObsBucketAcl;
export const ObsBucketAcl: typeof import("./obsBucketAcl").ObsBucketAcl = null as any;
utilities.lazyLoad(exports, ["ObsBucketAcl"], () => require("./obsBucketAcl"));

export * from "./provider";
import { Provider } from "./provider";

export { SfsTurboDataTaskArgs, SfsTurboDataTaskState } from "./sfsTurboDataTask";
export type SfsTurboDataTask = import("./sfsTurboDataTask").SfsTurboDataTask;
export const SfsTurboDataTask: typeof import("./sfsTurboDataTask").SfsTurboDataTask = null as any;
utilities.lazyLoad(exports, ["SfsTurboDataTask"], () => require("./sfsTurboDataTask"));

export { SfsTurboDirArgs, SfsTurboDirState } from "./sfsTurboDir";
export type SfsTurboDir = import("./sfsTurboDir").SfsTurboDir;
export const SfsTurboDir: typeof import("./sfsTurboDir").SfsTurboDir = null as any;
utilities.lazyLoad(exports, ["SfsTurboDir"], () => require("./sfsTurboDir"));

export { SfsTurboDirQuotaArgs, SfsTurboDirQuotaState } from "./sfsTurboDirQuota";
export type SfsTurboDirQuota = import("./sfsTurboDirQuota").SfsTurboDirQuota;
export const SfsTurboDirQuota: typeof import("./sfsTurboDirQuota").SfsTurboDirQuota = null as any;
utilities.lazyLoad(exports, ["SfsTurboDirQuota"], () => require("./sfsTurboDirQuota"));

export { SfsTurboDuTaskArgs, SfsTurboDuTaskState } from "./sfsTurboDuTask";
export type SfsTurboDuTask = import("./sfsTurboDuTask").SfsTurboDuTask;
export const SfsTurboDuTask: typeof import("./sfsTurboDuTask").SfsTurboDuTask = null as any;
utilities.lazyLoad(exports, ["SfsTurboDuTask"], () => require("./sfsTurboDuTask"));

export { SfsTurboObsTargetArgs, SfsTurboObsTargetState } from "./sfsTurboObsTarget";
export type SfsTurboObsTarget = import("./sfsTurboObsTarget").SfsTurboObsTarget;
export const SfsTurboObsTarget: typeof import("./sfsTurboObsTarget").SfsTurboObsTarget = null as any;
utilities.lazyLoad(exports, ["SfsTurboObsTarget"], () => require("./sfsTurboObsTarget"));

export { SfsTurboPermRuleArgs, SfsTurboPermRuleState } from "./sfsTurboPermRule";
export type SfsTurboPermRule = import("./sfsTurboPermRule").SfsTurboPermRule;
export const SfsTurboPermRule: typeof import("./sfsTurboPermRule").SfsTurboPermRule = null as any;
utilities.lazyLoad(exports, ["SfsTurboPermRule"], () => require("./sfsTurboPermRule"));

export { SmnMessageDetectionArgs, SmnMessageDetectionState } from "./smnMessageDetection";
export type SmnMessageDetection = import("./smnMessageDetection").SmnMessageDetection;
export const SmnMessageDetection: typeof import("./smnMessageDetection").SmnMessageDetection = null as any;
utilities.lazyLoad(exports, ["SmnMessageDetection"], () => require("./smnMessageDetection"));

export { SmnSubscriptionArgs, SmnSubscriptionState } from "./smnSubscription";
export type SmnSubscription = import("./smnSubscription").SmnSubscription;
export const SmnSubscription: typeof import("./smnSubscription").SmnSubscription = null as any;
utilities.lazyLoad(exports, ["SmnSubscription"], () => require("./smnSubscription"));

export { SmnTopicArgs, SmnTopicState } from "./smnTopic";
export type SmnTopic = import("./smnTopic").SmnTopic;
export const SmnTopic: typeof import("./smnTopic").SmnTopic = null as any;
utilities.lazyLoad(exports, ["SmnTopic"], () => require("./smnTopic"));

export { SwrOrganizationArgs, SwrOrganizationState } from "./swrOrganization";
export type SwrOrganization = import("./swrOrganization").SwrOrganization;
export const SwrOrganization: typeof import("./swrOrganization").SwrOrganization = null as any;
utilities.lazyLoad(exports, ["SwrOrganization"], () => require("./swrOrganization"));

export { SwrOrganizationPermissionsArgs, SwrOrganizationPermissionsState } from "./swrOrganizationPermissions";
export type SwrOrganizationPermissions = import("./swrOrganizationPermissions").SwrOrganizationPermissions;
export const SwrOrganizationPermissions: typeof import("./swrOrganizationPermissions").SwrOrganizationPermissions = null as any;
utilities.lazyLoad(exports, ["SwrOrganizationPermissions"], () => require("./swrOrganizationPermissions"));

export { SwrRepositoryArgs, SwrRepositoryState } from "./swrRepository";
export type SwrRepository = import("./swrRepository").SwrRepository;
export const SwrRepository: typeof import("./swrRepository").SwrRepository = null as any;
utilities.lazyLoad(exports, ["SwrRepository"], () => require("./swrRepository"));

export { VpnConnectionArgs, VpnConnectionState } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));

export { VpnConnectionHealthCheckArgs, VpnConnectionHealthCheckState } from "./vpnConnectionHealthCheck";
export type VpnConnectionHealthCheck = import("./vpnConnectionHealthCheck").VpnConnectionHealthCheck;
export const VpnConnectionHealthCheck: typeof import("./vpnConnectionHealthCheck").VpnConnectionHealthCheck = null as any;
utilities.lazyLoad(exports, ["VpnConnectionHealthCheck"], () => require("./vpnConnectionHealthCheck"));

export { VpnCustomerGatewayArgs, VpnCustomerGatewayState } from "./vpnCustomerGateway";
export type VpnCustomerGateway = import("./vpnCustomerGateway").VpnCustomerGateway;
export const VpnCustomerGateway: typeof import("./vpnCustomerGateway").VpnCustomerGateway = null as any;
utilities.lazyLoad(exports, ["VpnCustomerGateway"], () => require("./vpnCustomerGateway"));

export { VpnGatewayArgs, VpnGatewayState } from "./vpnGateway";
export type VpnGateway = import("./vpnGateway").VpnGateway;
export const VpnGateway: typeof import("./vpnGateway").VpnGateway = null as any;
utilities.lazyLoad(exports, ["VpnGateway"], () => require("./vpnGateway"));


// Export sub-modules:
import * as aom from "./aom";
import * as as from "./as";
import * as cbr from "./cbr";
import * as cce from "./cce";
import * as cdm from "./cdm";
import * as ces from "./ces";
import * as cfw from "./cfw";
import * as config from "./config";
import * as css from "./css";
import * as cts from "./cts";
import * as dcs from "./dcs";
import * as dds from "./dds";
import * as dedicatedapig from "./dedicatedapig";
import * as dew from "./dew";
import * as dis from "./dis";
import * as dli from "./dli";
import * as dms from "./dms";
import * as dns from "./dns";
import * as drs from "./drs";
import * as dws from "./dws";
import * as ecs from "./ecs";
import * as eip from "./eip";
import * as elb from "./elb";
import * as eps from "./eps";
import * as er from "./er";
import * as evs from "./evs";
import * as functiongraph from "./functiongraph";
import * as iam from "./iam";
import * as ims from "./ims";
import * as lts from "./lts";
import * as mrs from "./mrs";
import * as nat from "./nat";
import * as networkacl from "./networkacl";
import * as obs from "./obs";
import * as rds from "./rds";
import * as sfs from "./sfs";
import * as sharedapig from "./sharedapig";
import * as types from "./types";
import * as vpc from "./vpc";
import * as vpcep from "./vpcep";

export {
    aom,
    as,
    cbr,
    cce,
    cdm,
    ces,
    cfw,
    config,
    css,
    cts,
    dcs,
    dds,
    dedicatedapig,
    dew,
    dis,
    dli,
    dms,
    dns,
    drs,
    dws,
    ecs,
    eip,
    elb,
    eps,
    er,
    evs,
    functiongraph,
    iam,
    ims,
    lts,
    mrs,
    nat,
    networkacl,
    obs,
    rds,
    sfs,
    sharedapig,
    types,
    vpc,
    vpcep,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudru:index/apigAclPolicy:ApigAclPolicy":
                return new ApigAclPolicy(name, <any>undefined, { urn })
            case "cloudru:index/apigAclPolicyAssociate:ApigAclPolicyAssociate":
                return new ApigAclPolicyAssociate(name, <any>undefined, { urn })
            case "cloudru:index/apigApiAction:ApigApiAction":
                return new ApigApiAction(name, <any>undefined, { urn })
            case "cloudru:index/apigApiBatchAction:ApigApiBatchAction":
                return new ApigApiBatchAction(name, <any>undefined, { urn })
            case "cloudru:index/apigApiCheck:ApigApiCheck":
                return new ApigApiCheck(name, <any>undefined, { urn })
            case "cloudru:index/apigApiDebug:ApigApiDebug":
                return new ApigApiDebug(name, <any>undefined, { urn })
            case "cloudru:index/apigApiVersionUnpublish:ApigApiVersionUnpublish":
                return new ApigApiVersionUnpublish(name, <any>undefined, { urn })
            case "cloudru:index/apigAppcode:ApigAppcode":
                return new ApigAppcode(name, <any>undefined, { urn })
            case "cloudru:index/apigApplicationAcl:ApigApplicationAcl":
                return new ApigApplicationAcl(name, <any>undefined, { urn })
            case "cloudru:index/apigApplicationAuthorization:ApigApplicationAuthorization":
                return new ApigApplicationAuthorization(name, <any>undefined, { urn })
            case "cloudru:index/apigApplicationQuota:ApigApplicationQuota":
                return new ApigApplicationQuota(name, <any>undefined, { urn })
            case "cloudru:index/apigApplicationQuotaAssociate:ApigApplicationQuotaAssociate":
                return new ApigApplicationQuotaAssociate(name, <any>undefined, { urn })
            case "cloudru:index/apigCertificate:ApigCertificate":
                return new ApigCertificate(name, <any>undefined, { urn })
            case "cloudru:index/apigChannel:ApigChannel":
                return new ApigChannel(name, <any>undefined, { urn })
            case "cloudru:index/apigEndpointConnectionManagement:ApigEndpointConnectionManagement":
                return new ApigEndpointConnectionManagement(name, <any>undefined, { urn })
            case "cloudru:index/apigEndpointWhitelist:ApigEndpointWhitelist":
                return new ApigEndpointWhitelist(name, <any>undefined, { urn })
            case "cloudru:index/apigEnvironmentVariable:ApigEnvironmentVariable":
                return new ApigEnvironmentVariable(name, <any>undefined, { urn })
            case "cloudru:index/apigInstanceFeature:ApigInstanceFeature":
                return new ApigInstanceFeature(name, <any>undefined, { urn })
            case "cloudru:index/apigInstanceRoutes:ApigInstanceRoutes":
                return new ApigInstanceRoutes(name, <any>undefined, { urn })
            case "cloudru:index/apigPlugin:ApigPlugin":
                return new ApigPlugin(name, <any>undefined, { urn })
            case "cloudru:index/apigPluginAssociate:ApigPluginAssociate":
                return new ApigPluginAssociate(name, <any>undefined, { urn })
            case "cloudru:index/apigPluginBatchApisAssociate:ApigPluginBatchApisAssociate":
                return new ApigPluginBatchApisAssociate(name, <any>undefined, { urn })
            case "cloudru:index/apigSignature:ApigSignature":
                return new ApigSignature(name, <any>undefined, { urn })
            case "cloudru:index/apigSignatureAssociate:ApigSignatureAssociate":
                return new ApigSignatureAssociate(name, <any>undefined, { urn })
            case "cloudru:index/cbhAssetAgencyAuthorization:CbhAssetAgencyAuthorization":
                return new CbhAssetAgencyAuthorization(name, <any>undefined, { urn })
            case "cloudru:index/cbhHaInstance:CbhHaInstance":
                return new CbhHaInstance(name, <any>undefined, { urn })
            case "cloudru:index/cbhInstance:CbhInstance":
                return new CbhInstance(name, <any>undefined, { urn })
            case "cloudru:index/cbrBackupShare:CbrBackupShare":
                return new CbrBackupShare(name, <any>undefined, { urn })
            case "cloudru:index/cbrBackupShareAccepter:CbrBackupShareAccepter":
                return new CbrBackupShareAccepter(name, <any>undefined, { urn })
            case "cloudru:index/cbrCheckpoint:CbrCheckpoint":
                return new CbrCheckpoint(name, <any>undefined, { urn })
            case "cloudru:index/cceClusterUpgrade:CceClusterUpgrade":
                return new CceClusterUpgrade(name, <any>undefined, { urn })
            case "cloudru:index/cceNodesRemove:CceNodesRemove":
                return new CceNodesRemove(name, <any>undefined, { urn })
            case "cloudru:index/cssConfiguration:CssConfiguration":
                return new CssConfiguration(name, <any>undefined, { urn })
            case "cloudru:index/dcsAccount:DcsAccount":
                return new DcsAccount(name, <any>undefined, { urn })
            case "cloudru:index/dcsBackup:DcsBackup":
                return new DcsBackup(name, <any>undefined, { urn })
            case "cloudru:index/dcsParameters:DcsParameters":
                return new DcsParameters(name, <any>undefined, { urn })
            case "cloudru:index/dcsRestore:DcsRestore":
                return new DcsRestore(name, <any>undefined, { urn })
            case "cloudru:index/ddsParameterTemplate:DdsParameterTemplate":
                return new DdsParameterTemplate(name, <any>undefined, { urn })
            case "cloudru:index/ddsParameterTemplateApply:DdsParameterTemplateApply":
                return new DdsParameterTemplateApply(name, <any>undefined, { urn })
            case "cloudru:index/ddsParameterTemplateCompare:DdsParameterTemplateCompare":
                return new DdsParameterTemplateCompare(name, <any>undefined, { urn })
            case "cloudru:index/ddsParameterTemplateCopy:DdsParameterTemplateCopy":
                return new DdsParameterTemplateCopy(name, <any>undefined, { urn })
            case "cloudru:index/ddsParameterTemplateReset:DdsParameterTemplateReset":
                return new DdsParameterTemplateReset(name, <any>undefined, { urn })
            case "cloudru:index/dmsInstance:DmsInstance":
                return new DmsInstance(name, <any>undefined, { urn })
            case "cloudru:index/dmsKafkaConsumerGroup:DmsKafkaConsumerGroup":
                return new DmsKafkaConsumerGroup(name, <any>undefined, { urn })
            case "cloudru:index/dmsKafkaMessageProduce:DmsKafkaMessageProduce":
                return new DmsKafkaMessageProduce(name, <any>undefined, { urn })
            case "cloudru:index/dmsRocketmqConsumerGroup:DmsRocketmqConsumerGroup":
                return new DmsRocketmqConsumerGroup(name, <any>undefined, { urn })
            case "cloudru:index/dmsRocketmqConsumptionVerify:DmsRocketmqConsumptionVerify":
                return new DmsRocketmqConsumptionVerify(name, <any>undefined, { urn })
            case "cloudru:index/dmsRocketmqDeadLetterResend:DmsRocketmqDeadLetterResend":
                return new DmsRocketmqDeadLetterResend(name, <any>undefined, { urn })
            case "cloudru:index/dmsRocketmqInstance:DmsRocketmqInstance":
                return new DmsRocketmqInstance(name, <any>undefined, { urn })
            case "cloudru:index/dmsRocketmqMessageOffsetReset:DmsRocketmqMessageOffsetReset":
                return new DmsRocketmqMessageOffsetReset(name, <any>undefined, { urn })
            case "cloudru:index/dmsRocketmqMigrationTask:DmsRocketmqMigrationTask":
                return new DmsRocketmqMigrationTask(name, <any>undefined, { urn })
            case "cloudru:index/dmsRocketmqTopic:DmsRocketmqTopic":
                return new DmsRocketmqTopic(name, <any>undefined, { urn })
            case "cloudru:index/dmsRocketmqUser:DmsRocketmqUser":
                return new DmsRocketmqUser(name, <any>undefined, { urn })
            case "cloudru:index/elbCertificate:ElbCertificate":
                return new ElbCertificate(name, <any>undefined, { urn })
            case "cloudru:index/elbIpgroup:ElbIpgroup":
                return new ElbIpgroup(name, <any>undefined, { urn })
            case "cloudru:index/elbL7policy:ElbL7policy":
                return new ElbL7policy(name, <any>undefined, { urn })
            case "cloudru:index/elbL7rule:ElbL7rule":
                return new ElbL7rule(name, <any>undefined, { urn })
            case "cloudru:index/elbListener:ElbListener":
                return new ElbListener(name, <any>undefined, { urn })
            case "cloudru:index/elbLoadbalancer:ElbLoadbalancer":
                return new ElbLoadbalancer(name, <any>undefined, { urn })
            case "cloudru:index/elbMember:ElbMember":
                return new ElbMember(name, <any>undefined, { urn })
            case "cloudru:index/elbMonitor:ElbMonitor":
                return new ElbMonitor(name, <any>undefined, { urn })
            case "cloudru:index/elbPool:ElbPool":
                return new ElbPool(name, <any>undefined, { urn })
            case "cloudru:index/elbSecurityPolicy:ElbSecurityPolicy":
                return new ElbSecurityPolicy(name, <any>undefined, { urn })
            case "cloudru:index/fgsApplication:FgsApplication":
                return new FgsApplication(name, <any>undefined, { urn })
            case "cloudru:index/fgsAsyncInvokeConfiguration:FgsAsyncInvokeConfiguration":
                return new FgsAsyncInvokeConfiguration(name, <any>undefined, { urn })
            case "cloudru:index/fgsDependencyVersion:FgsDependencyVersion":
                return new FgsDependencyVersion(name, <any>undefined, { urn })
            case "cloudru:index/fgsFunctionEvent:FgsFunctionEvent":
                return new FgsFunctionEvent(name, <any>undefined, { urn })
            case "cloudru:index/fgsFunctionTopping:FgsFunctionTopping":
                return new FgsFunctionTopping(name, <any>undefined, { urn })
            case "cloudru:index/fgsFunctionTrigger:FgsFunctionTrigger":
                return new FgsFunctionTrigger(name, <any>undefined, { urn })
            case "cloudru:index/fgsFunctionTriggerStatusAction:FgsFunctionTriggerStatusAction":
                return new FgsFunctionTriggerStatusAction(name, <any>undefined, { urn })
            case "cloudru:index/fgsLtsLogEnable:FgsLtsLogEnable":
                return new FgsLtsLogEnable(name, <any>undefined, { urn })
            case "cloudru:index/gesGraph:GesGraph":
                return new GesGraph(name, <any>undefined, { urn })
            case "cloudru:index/identityGroupMembershipV3:IdentityGroupMembershipV3":
                return new IdentityGroupMembershipV3(name, <any>undefined, { urn })
            case "cloudru:index/identityGroupV3:IdentityGroupV3":
                return new IdentityGroupV3(name, <any>undefined, { urn })
            case "cloudru:index/identityRoleAssignmentV3:IdentityRoleAssignmentV3":
                return new IdentityRoleAssignmentV3(name, <any>undefined, { urn })
            case "cloudru:index/identityUserV3:IdentityUserV3":
                return new IdentityUserV3(name, <any>undefined, { urn })
            case "cloudru:index/kpsKeypairAssociate:KpsKeypairAssociate":
                return new KpsKeypairAssociate(name, <any>undefined, { urn })
            case "cloudru:index/kpsKeypairDisassociate:KpsKeypairDisassociate":
                return new KpsKeypairDisassociate(name, <any>undefined, { urn })
            case "cloudru:index/networkingEipAssociate:NetworkingEipAssociate":
                return new NetworkingEipAssociate(name, <any>undefined, { urn })
            case "cloudru:index/obsBucketAcl:ObsBucketAcl":
                return new ObsBucketAcl(name, <any>undefined, { urn })
            case "cloudru:index/sfsTurboDataTask:SfsTurboDataTask":
                return new SfsTurboDataTask(name, <any>undefined, { urn })
            case "cloudru:index/sfsTurboDir:SfsTurboDir":
                return new SfsTurboDir(name, <any>undefined, { urn })
            case "cloudru:index/sfsTurboDirQuota:SfsTurboDirQuota":
                return new SfsTurboDirQuota(name, <any>undefined, { urn })
            case "cloudru:index/sfsTurboDuTask:SfsTurboDuTask":
                return new SfsTurboDuTask(name, <any>undefined, { urn })
            case "cloudru:index/sfsTurboObsTarget:SfsTurboObsTarget":
                return new SfsTurboObsTarget(name, <any>undefined, { urn })
            case "cloudru:index/sfsTurboPermRule:SfsTurboPermRule":
                return new SfsTurboPermRule(name, <any>undefined, { urn })
            case "cloudru:index/smnMessageDetection:SmnMessageDetection":
                return new SmnMessageDetection(name, <any>undefined, { urn })
            case "cloudru:index/smnSubscription:SmnSubscription":
                return new SmnSubscription(name, <any>undefined, { urn })
            case "cloudru:index/smnTopic:SmnTopic":
                return new SmnTopic(name, <any>undefined, { urn })
            case "cloudru:index/swrOrganization:SwrOrganization":
                return new SwrOrganization(name, <any>undefined, { urn })
            case "cloudru:index/swrOrganizationPermissions:SwrOrganizationPermissions":
                return new SwrOrganizationPermissions(name, <any>undefined, { urn })
            case "cloudru:index/swrRepository:SwrRepository":
                return new SwrRepository(name, <any>undefined, { urn })
            case "cloudru:index/vpnConnection:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "cloudru:index/vpnConnectionHealthCheck:VpnConnectionHealthCheck":
                return new VpnConnectionHealthCheck(name, <any>undefined, { urn })
            case "cloudru:index/vpnCustomerGateway:VpnCustomerGateway":
                return new VpnCustomerGateway(name, <any>undefined, { urn })
            case "cloudru:index/vpnGateway:VpnGateway":
                return new VpnGateway(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudru", "index/apigAclPolicy", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigAclPolicyAssociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApiAction", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApiBatchAction", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApiCheck", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApiDebug", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApiVersionUnpublish", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigAppcode", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApplicationAcl", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApplicationAuthorization", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApplicationQuota", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigApplicationQuotaAssociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigCertificate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigChannel", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigEndpointConnectionManagement", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigEndpointWhitelist", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigEnvironmentVariable", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigInstanceFeature", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigInstanceRoutes", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigPlugin", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigPluginAssociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigPluginBatchApisAssociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigSignature", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/apigSignatureAssociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cbhAssetAgencyAuthorization", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cbhHaInstance", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cbhInstance", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cbrBackupShare", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cbrBackupShareAccepter", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cbrCheckpoint", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cceClusterUpgrade", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cceNodesRemove", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/cssConfiguration", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dcsAccount", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dcsBackup", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dcsParameters", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dcsRestore", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/ddsParameterTemplate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/ddsParameterTemplateApply", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/ddsParameterTemplateCompare", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/ddsParameterTemplateCopy", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/ddsParameterTemplateReset", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsInstance", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsKafkaConsumerGroup", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsKafkaMessageProduce", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsRocketmqConsumerGroup", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsRocketmqConsumptionVerify", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsRocketmqDeadLetterResend", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsRocketmqInstance", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsRocketmqMessageOffsetReset", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsRocketmqMigrationTask", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsRocketmqTopic", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/dmsRocketmqUser", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbCertificate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbIpgroup", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbL7policy", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbL7rule", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbListener", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbLoadbalancer", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbMember", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbMonitor", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbPool", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/elbSecurityPolicy", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/fgsApplication", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/fgsAsyncInvokeConfiguration", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/fgsDependencyVersion", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/fgsFunctionEvent", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/fgsFunctionTopping", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/fgsFunctionTrigger", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/fgsFunctionTriggerStatusAction", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/fgsLtsLogEnable", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/gesGraph", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/identityGroupMembershipV3", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/identityGroupV3", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/identityRoleAssignmentV3", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/identityUserV3", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/kpsKeypairAssociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/kpsKeypairDisassociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/networkingEipAssociate", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/obsBucketAcl", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/sfsTurboDataTask", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/sfsTurboDir", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/sfsTurboDirQuota", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/sfsTurboDuTask", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/sfsTurboObsTarget", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/sfsTurboPermRule", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/smnMessageDetection", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/smnSubscription", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/smnTopic", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/swrOrganization", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/swrOrganizationPermissions", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/swrRepository", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/vpnConnection", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/vpnConnectionHealthCheck", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/vpnCustomerGateway", _module)
pulumi.runtime.registerResourceModule("cloudru", "index/vpnGateway", _module)
pulumi.runtime.registerResourcePackage("cloudru", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudru") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VipAssociate extends pulumi.CustomResource {
    /**
     * Get an existing VipAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VipAssociateState, opts?: pulumi.CustomResourceOptions): VipAssociate {
        return new VipAssociate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Vpc/vipAssociate:VipAssociate';

    /**
     * Returns true if the given object is an instance of VipAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VipAssociate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VipAssociate.__pulumiType;
    }

    declare public /*out*/ readonly ipAddresses: pulumi.Output<string[]>;
    declare public readonly portIds: pulumi.Output<string[]>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly vipId: pulumi.Output<string>;
    declare public /*out*/ readonly vipIpAddress: pulumi.Output<string>;
    declare public /*out*/ readonly vipSubnetId: pulumi.Output<string>;

    /**
     * Create a VipAssociate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VipAssociateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VipAssociateArgs | VipAssociateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VipAssociateState | undefined;
            resourceInputs["ipAddresses"] = state?.ipAddresses;
            resourceInputs["portIds"] = state?.portIds;
            resourceInputs["region"] = state?.region;
            resourceInputs["vipId"] = state?.vipId;
            resourceInputs["vipIpAddress"] = state?.vipIpAddress;
            resourceInputs["vipSubnetId"] = state?.vipSubnetId;
        } else {
            const args = argsOrState as VipAssociateArgs | undefined;
            if (args?.portIds === undefined && !opts.urn) {
                throw new Error("Missing required property 'portIds'");
            }
            if (args?.vipId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vipId'");
            }
            resourceInputs["portIds"] = args?.portIds;
            resourceInputs["region"] = args?.region;
            resourceInputs["vipId"] = args?.vipId;
            resourceInputs["ipAddresses"] = undefined /*out*/;
            resourceInputs["vipIpAddress"] = undefined /*out*/;
            resourceInputs["vipSubnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VipAssociate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VipAssociate resources.
 */
export interface VipAssociateState {
    ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    portIds?: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    vipId?: pulumi.Input<string>;
    vipIpAddress?: pulumi.Input<string>;
    vipSubnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VipAssociate resource.
 */
export interface VipAssociateArgs {
    portIds: pulumi.Input<pulumi.Input<string>[]>;
    region?: pulumi.Input<string>;
    vipId: pulumi.Input<string>;
}

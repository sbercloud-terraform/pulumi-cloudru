// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a keypair resource within SberCloud.
 *
 * By default, keypair use the SSH-2 (RSA, 2048) algorithm for encryption and decryption.
 *
 * Keys imported support the following cryptographic algorithms:
 *
 *  * RSA-1024
 *  * RSA-2048
 *  * RSA-4096
 *
 * ## Example Usage
 *
 * ### Create a new KPS keypair
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const kmsKeyId = config.requireObject<any>("kmsKeyId");
 * const kmsKeyName = config.requireObject<any>("kmsKeyName");
 * const keyFile = config.requireObject<any>("keyFile");
 * const test = new sbercloud.dew.Keypair("test", {
 *     name: "test-name",
 *     scope: "user",
 *     encryptionType: "kms",
 *     kmsKeyId: kmsKeyId,
 *     kmsKeyName: kmsKeyName,
 *     description: "test description",
 *     keyFile: keyFile,
 * });
 * ```
 *
 * ### Import an existing KPS keypair
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const publicKey = config.requireObject<any>("publicKey");
 * const privateKey = config.requireObject<any>("privateKey");
 * const test = new sbercloud.dew.Keypair("test", {
 *     name: "test-name",
 *     scope: "account",
 *     encryptionType: "default",
 *     description: "test description",
 *     publicKey: publicKey,
 *     privateKey: privateKey,
 * });
 * ```
 *
 * ### Import an existing KPS keypair without private key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const publicKey = config.requireObject<any>("publicKey");
 * const test = new sbercloud.dew.Keypair("test", {
 *     name: "test-name",
 *     scope: "account",
 *     description: "test description",
 *     publicKey: publicKey,
 * });
 * ```
 *
 * ## Import
 *
 * Keypair can be imported using the `name`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Dew/keypair:Keypair test <name>
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason. The missing attributes include: `encryption_type`, `kms_key_id`,
 *
 * `kms_key_name`, `key_file` and `private_key`. It is generally recommended running `pulumi preview` after importing a keypair.
 *
 * You can then decide if changes should be applied to the keypair, or the resource definition
 *
 * should be updated to align with the keypair. Also, you can ignore changes as below.
 *
 * hcl
 *
 * resource "sbercloud_kps_keypair" "test" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       encryption_type, kms_key_id, kms_key_name, key_file, private_key
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class Keypair extends pulumi.CustomResource {
    /**
     * Get an existing Keypair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeypairState, opts?: pulumi.CustomResourceOptions): Keypair {
        return new Keypair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Dew/keypair:Keypair';

    /**
     * Returns true if the given object is an instance of Keypair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Keypair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Keypair.__pulumiType;
    }

    /**
     * The keypair creation time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specifies the description of keypair.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies encryption mode. The options are as follows:
     * + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
     * + **kms**: KMS encryption mode.
     *
     * > 1. Please configure this field to **default** if the KMS service is not available at the site.
     * <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
     */
    declare public readonly encryptionType: pulumi.Output<string>;
    /**
     * Fingerprint information about a keypair.
     */
    declare public /*out*/ readonly fingerprint: pulumi.Output<string>;
    /**
     * Whether the private key is managed by sberCloud.
     */
    declare public /*out*/ readonly isManaged: pulumi.Output<boolean>;
    /**
     * Specifies the path of the created private key.
     * The private key file (**.pem**) is created only when creating a KPS keypair.
     * Importing an existing keypair will not obtain the private key information.
     *
     * Changing this parameter will create a new resource.
     *
     * ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
     */
    declare public readonly keyFile: pulumi.Output<string>;
    /**
     * Specifies the KMS key ID to encrypt private keys.
     */
    declare public readonly kmsKeyId: pulumi.Output<string | undefined>;
    /**
     * Specifies the KMS key name to encrypt private keys.
     *
     * > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
     * <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
     * `kmsKeyName`.
     */
    declare public readonly kmsKeyName: pulumi.Output<string | undefined>;
    /**
     * Specifies a unique name for the keypair. The name can contain a maximum of `64`
     * characters, including letters, digits, underscores (_) and hyphens (-).
     * Changing this parameter will create a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the imported OpenSSH-formatted private key.
     *
     * > 1. Setting this field to empty during editing will clear the private key.
     * <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
     */
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    /**
     * Specifies the imported OpenSSH-formatted public key.
     * It is required when import keypair. Changing this parameter will create a new resource.
     */
    declare public readonly publicKey: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the keypair resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the scope of keypair. The options are as follows:
     * + **account**: Tenant-level, available to all users under the same account.
     * + **user**: User-level, only available to user.
     *
     * Defaults to `user`. Changing this parameter will create a new resource.
     */
    declare public readonly scope: pulumi.Output<string>;
    /**
     * Specifies the user ID to which the keypair belongs.
     *
     * > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
     * <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
     */
    declare public readonly userId: pulumi.Output<string>;

    /**
     * Create a Keypair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeypairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeypairArgs | KeypairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeypairState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["encryptionType"] = state?.encryptionType;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["isManaged"] = state?.isManaged;
            resourceInputs["keyFile"] = state?.keyFile;
            resourceInputs["kmsKeyId"] = state?.kmsKeyId;
            resourceInputs["kmsKeyName"] = state?.kmsKeyName;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["publicKey"] = state?.publicKey;
            resourceInputs["region"] = state?.region;
            resourceInputs["scope"] = state?.scope;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as KeypairArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["encryptionType"] = args?.encryptionType;
            resourceInputs["keyFile"] = args?.keyFile;
            resourceInputs["kmsKeyId"] = args?.kmsKeyId;
            resourceInputs["kmsKeyName"] = args?.kmsKeyName;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["publicKey"] = args?.publicKey;
            resourceInputs["region"] = args?.region;
            resourceInputs["scope"] = args?.scope;
            resourceInputs["userId"] = args?.userId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["isManaged"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Keypair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Keypair resources.
 */
export interface KeypairState {
    /**
     * The keypair creation time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the description of keypair.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies encryption mode. The options are as follows:
     * + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
     * + **kms**: KMS encryption mode.
     *
     * > 1. Please configure this field to **default** if the KMS service is not available at the site.
     * <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
     */
    encryptionType?: pulumi.Input<string>;
    /**
     * Fingerprint information about a keypair.
     */
    fingerprint?: pulumi.Input<string>;
    /**
     * Whether the private key is managed by sberCloud.
     */
    isManaged?: pulumi.Input<boolean>;
    /**
     * Specifies the path of the created private key.
     * The private key file (**.pem**) is created only when creating a KPS keypair.
     * Importing an existing keypair will not obtain the private key information.
     *
     * Changing this parameter will create a new resource.
     *
     * ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Specifies the KMS key ID to encrypt private keys.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the KMS key name to encrypt private keys.
     *
     * > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
     * <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
     * `kmsKeyName`.
     */
    kmsKeyName?: pulumi.Input<string>;
    /**
     * Specifies a unique name for the keypair. The name can contain a maximum of `64`
     * characters, including letters, digits, underscores (_) and hyphens (-).
     * Changing this parameter will create a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the imported OpenSSH-formatted private key.
     *
     * > 1. Setting this field to empty during editing will clear the private key.
     * <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Specifies the imported OpenSSH-formatted public key.
     * It is required when import keypair. Changing this parameter will create a new resource.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the keypair resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scope of keypair. The options are as follows:
     * + **account**: Tenant-level, available to all users under the same account.
     * + **user**: User-level, only available to user.
     *
     * Defaults to `user`. Changing this parameter will create a new resource.
     */
    scope?: pulumi.Input<string>;
    /**
     * Specifies the user ID to which the keypair belongs.
     *
     * > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
     * <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Keypair resource.
 */
export interface KeypairArgs {
    /**
     * Specifies the description of keypair.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies encryption mode. The options are as follows:
     * + **default**: The default encryption mode. Applicable to sites where KMS is not deployed.
     * + **kms**: KMS encryption mode.
     *
     * > 1. Please configure this field to **default** if the KMS service is not available at the site.
     * <br/>2. Due to API restrictions, `privateKey` must be configured when editing this field.
     */
    encryptionType?: pulumi.Input<string>;
    /**
     * Specifies the path of the created private key.
     * The private key file (**.pem**) is created only when creating a KPS keypair.
     * Importing an existing keypair will not obtain the private key information.
     *
     * Changing this parameter will create a new resource.
     *
     * ->**NOTE:** If the private key file already exists, it will be overwritten after a new keypair is created.
     */
    keyFile?: pulumi.Input<string>;
    /**
     * Specifies the KMS key ID to encrypt private keys.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the KMS key name to encrypt private keys.
     *
     * > 1. At least one of `kmsKeyId` or `kmsKeyName` must be set when `encryptionType` is set to **kms**.
     * <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing `kmsKeyId` or
     * `kmsKeyName`.
     */
    kmsKeyName?: pulumi.Input<string>;
    /**
     * Specifies a unique name for the keypair. The name can contain a maximum of `64`
     * characters, including letters, digits, underscores (_) and hyphens (-).
     * Changing this parameter will create a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the imported OpenSSH-formatted private key.
     *
     * > 1. Setting this field to empty during editing will clear the private key.
     * <br/>2. Due to API restrictions, `encryptionType` must be configured when configuring this field.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Specifies the imported OpenSSH-formatted public key.
     * It is required when import keypair. Changing this parameter will create a new resource.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the keypair resource. If omitted, the
     * provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scope of keypair. The options are as follows:
     * + **account**: Tenant-level, available to all users under the same account.
     * + **user**: User-level, only available to user.
     *
     * Defaults to `user`. Changing this parameter will create a new resource.
     */
    scope?: pulumi.Input<string>;
    /**
     * Specifies the user ID to which the keypair belongs.
     *
     * > 1. If the `scope` set to **user**, this parameter value must be the ID of the user who creates the resource.
     * <br/>2. Due to API restrictions, `privateKey` and `encryptionType` must be configured when editing this field.
     */
    userId?: pulumi.Input<string>;
}

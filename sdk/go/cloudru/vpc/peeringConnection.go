// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type PeeringConnection struct {
	pulumi.CustomResourceState

	Description  pulumi.StringOutput `pulumi:"description"`
	Name         pulumi.StringOutput `pulumi:"name"`
	PeerTenantId pulumi.StringOutput `pulumi:"peerTenantId"`
	PeerVpcId    pulumi.StringOutput `pulumi:"peerVpcId"`
	Region       pulumi.StringOutput `pulumi:"region"`
	Status       pulumi.StringOutput `pulumi:"status"`
	VpcId        pulumi.StringOutput `pulumi:"vpcId"`
}

// NewPeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewPeeringConnection(ctx *pulumi.Context,
	name string, args *PeeringConnectionArgs, opts ...pulumi.ResourceOption) (*PeeringConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerVpcId == nil {
		return nil, errors.New("invalid value for required argument 'PeerVpcId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PeeringConnection
	err := ctx.RegisterResource("cloudru:Vpc/peeringConnection:PeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeeringConnection gets an existing PeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringConnectionState, opts ...pulumi.ResourceOption) (*PeeringConnection, error) {
	var resource PeeringConnection
	err := ctx.ReadResource("cloudru:Vpc/peeringConnection:PeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeeringConnection resources.
type peeringConnectionState struct {
	Description  *string `pulumi:"description"`
	Name         *string `pulumi:"name"`
	PeerTenantId *string `pulumi:"peerTenantId"`
	PeerVpcId    *string `pulumi:"peerVpcId"`
	Region       *string `pulumi:"region"`
	Status       *string `pulumi:"status"`
	VpcId        *string `pulumi:"vpcId"`
}

type PeeringConnectionState struct {
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	PeerTenantId pulumi.StringPtrInput
	PeerVpcId    pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	Status       pulumi.StringPtrInput
	VpcId        pulumi.StringPtrInput
}

func (PeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringConnectionState)(nil)).Elem()
}

type peeringConnectionArgs struct {
	Description  *string `pulumi:"description"`
	Name         *string `pulumi:"name"`
	PeerTenantId *string `pulumi:"peerTenantId"`
	PeerVpcId    string  `pulumi:"peerVpcId"`
	Region       *string `pulumi:"region"`
	VpcId        string  `pulumi:"vpcId"`
}

// The set of arguments for constructing a PeeringConnection resource.
type PeeringConnectionArgs struct {
	Description  pulumi.StringPtrInput
	Name         pulumi.StringPtrInput
	PeerTenantId pulumi.StringPtrInput
	PeerVpcId    pulumi.StringInput
	Region       pulumi.StringPtrInput
	VpcId        pulumi.StringInput
}

func (PeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringConnectionArgs)(nil)).Elem()
}

type PeeringConnectionInput interface {
	pulumi.Input

	ToPeeringConnectionOutput() PeeringConnectionOutput
	ToPeeringConnectionOutputWithContext(ctx context.Context) PeeringConnectionOutput
}

func (*PeeringConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringConnection)(nil)).Elem()
}

func (i *PeeringConnection) ToPeeringConnectionOutput() PeeringConnectionOutput {
	return i.ToPeeringConnectionOutputWithContext(context.Background())
}

func (i *PeeringConnection) ToPeeringConnectionOutputWithContext(ctx context.Context) PeeringConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionOutput)
}

// PeeringConnectionArrayInput is an input type that accepts PeeringConnectionArray and PeeringConnectionArrayOutput values.
// You can construct a concrete instance of `PeeringConnectionArrayInput` via:
//
//	PeeringConnectionArray{ PeeringConnectionArgs{...} }
type PeeringConnectionArrayInput interface {
	pulumi.Input

	ToPeeringConnectionArrayOutput() PeeringConnectionArrayOutput
	ToPeeringConnectionArrayOutputWithContext(context.Context) PeeringConnectionArrayOutput
}

type PeeringConnectionArray []PeeringConnectionInput

func (PeeringConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeringConnection)(nil)).Elem()
}

func (i PeeringConnectionArray) ToPeeringConnectionArrayOutput() PeeringConnectionArrayOutput {
	return i.ToPeeringConnectionArrayOutputWithContext(context.Background())
}

func (i PeeringConnectionArray) ToPeeringConnectionArrayOutputWithContext(ctx context.Context) PeeringConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionArrayOutput)
}

// PeeringConnectionMapInput is an input type that accepts PeeringConnectionMap and PeeringConnectionMapOutput values.
// You can construct a concrete instance of `PeeringConnectionMapInput` via:
//
//	PeeringConnectionMap{ "key": PeeringConnectionArgs{...} }
type PeeringConnectionMapInput interface {
	pulumi.Input

	ToPeeringConnectionMapOutput() PeeringConnectionMapOutput
	ToPeeringConnectionMapOutputWithContext(context.Context) PeeringConnectionMapOutput
}

type PeeringConnectionMap map[string]PeeringConnectionInput

func (PeeringConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeringConnection)(nil)).Elem()
}

func (i PeeringConnectionMap) ToPeeringConnectionMapOutput() PeeringConnectionMapOutput {
	return i.ToPeeringConnectionMapOutputWithContext(context.Background())
}

func (i PeeringConnectionMap) ToPeeringConnectionMapOutputWithContext(ctx context.Context) PeeringConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeeringConnectionMapOutput)
}

type PeeringConnectionOutput struct{ *pulumi.OutputState }

func (PeeringConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeeringConnection)(nil)).Elem()
}

func (o PeeringConnectionOutput) ToPeeringConnectionOutput() PeeringConnectionOutput {
	return o
}

func (o PeeringConnectionOutput) ToPeeringConnectionOutputWithContext(ctx context.Context) PeeringConnectionOutput {
	return o
}

func (o PeeringConnectionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnection) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o PeeringConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PeeringConnectionOutput) PeerTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnection) pulumi.StringOutput { return v.PeerTenantId }).(pulumi.StringOutput)
}

func (o PeeringConnectionOutput) PeerVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnection) pulumi.StringOutput { return v.PeerVpcId }).(pulumi.StringOutput)
}

func (o PeeringConnectionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnection) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o PeeringConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnection) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PeeringConnectionOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeeringConnection) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type PeeringConnectionArrayOutput struct{ *pulumi.OutputState }

func (PeeringConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeeringConnection)(nil)).Elem()
}

func (o PeeringConnectionArrayOutput) ToPeeringConnectionArrayOutput() PeeringConnectionArrayOutput {
	return o
}

func (o PeeringConnectionArrayOutput) ToPeeringConnectionArrayOutputWithContext(ctx context.Context) PeeringConnectionArrayOutput {
	return o
}

func (o PeeringConnectionArrayOutput) Index(i pulumi.IntInput) PeeringConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PeeringConnection {
		return vs[0].([]*PeeringConnection)[vs[1].(int)]
	}).(PeeringConnectionOutput)
}

type PeeringConnectionMapOutput struct{ *pulumi.OutputState }

func (PeeringConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeeringConnection)(nil)).Elem()
}

func (o PeeringConnectionMapOutput) ToPeeringConnectionMapOutput() PeeringConnectionMapOutput {
	return o
}

func (o PeeringConnectionMapOutput) ToPeeringConnectionMapOutputWithContext(ctx context.Context) PeeringConnectionMapOutput {
	return o
}

func (o PeeringConnectionMapOutput) MapIndex(k pulumi.StringInput) PeeringConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PeeringConnection {
		return vs[0].(map[string]*PeeringConnection)[vs[1].(string)]
	}).(PeeringConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionInput)(nil)).Elem(), &PeeringConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionArrayInput)(nil)).Elem(), PeeringConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeeringConnectionMapInput)(nil)).Elem(), PeeringConnectionMap{})
	pulumi.RegisterOutputType(PeeringConnectionOutput{})
	pulumi.RegisterOutputType(PeeringConnectionArrayOutput{})
	pulumi.RegisterOutputType(PeeringConnectionMapOutput{})
}

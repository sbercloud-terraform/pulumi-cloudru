// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddressGroupArgs, AddressGroupState } from "./addressGroup";
export type AddressGroup = import("./addressGroup").AddressGroup;
export const AddressGroup: typeof import("./addressGroup").AddressGroup = null as any;
utilities.lazyLoad(exports, ["AddressGroup"], () => require("./addressGroup"));

export { BandwidthArgs, BandwidthState } from "./bandwidth";
export type Bandwidth = import("./bandwidth").Bandwidth;
export const Bandwidth: typeof import("./bandwidth").Bandwidth = null as any;
utilities.lazyLoad(exports, ["Bandwidth"], () => require("./bandwidth"));

export { EipArgs, EipState } from "./eip";
export type Eip = import("./eip").Eip;
export const Eip: typeof import("./eip").Eip = null as any;
utilities.lazyLoad(exports, ["Eip"], () => require("./eip"));

export { GetAddressGroupsArgs, GetAddressGroupsResult, GetAddressGroupsOutputArgs } from "./getAddressGroups";
export const getAddressGroups: typeof import("./getAddressGroups").getAddressGroups = null as any;
export const getAddressGroupsOutput: typeof import("./getAddressGroups").getAddressGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroups","getAddressGroupsOutput"], () => require("./getAddressGroups"));

export { GetIdsArgs, GetIdsResult, GetIdsOutputArgs } from "./getIds";
export const getIds: typeof import("./getIds").getIds = null as any;
export const getIdsOutput: typeof import("./getIds").getIdsOutput = null as any;
utilities.lazyLoad(exports, ["getIds","getIdsOutput"], () => require("./getIds"));

export { GetPeeringConnectionArgs, GetPeeringConnectionResult, GetPeeringConnectionOutputArgs } from "./getPeeringConnection";
export const getPeeringConnection: typeof import("./getPeeringConnection").getPeeringConnection = null as any;
export const getPeeringConnectionOutput: typeof import("./getPeeringConnection").getPeeringConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getPeeringConnection","getPeeringConnectionOutput"], () => require("./getPeeringConnection"));

export { GetPortArgs, GetPortResult, GetPortOutputArgs } from "./getPort";
export const getPort: typeof import("./getPort").getPort = null as any;
export const getPortOutput: typeof import("./getPort").getPortOutput = null as any;
utilities.lazyLoad(exports, ["getPort","getPortOutput"], () => require("./getPort"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetRoutesArgs, GetRoutesResult, GetRoutesOutputArgs } from "./getRoutes";
export const getRoutes: typeof import("./getRoutes").getRoutes = null as any;
export const getRoutesOutput: typeof import("./getRoutes").getRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getRoutes","getRoutesOutput"], () => require("./getRoutes"));

export { GetSecgroupArgs, GetSecgroupResult, GetSecgroupOutputArgs } from "./getSecgroup";
export const getSecgroup: typeof import("./getSecgroup").getSecgroup = null as any;
export const getSecgroupOutput: typeof import("./getSecgroup").getSecgroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecgroup","getSecgroupOutput"], () => require("./getSecgroup"));

export { GetSecgroupsArgs, GetSecgroupsResult, GetSecgroupsOutputArgs } from "./getSecgroups";
export const getSecgroups: typeof import("./getSecgroups").getSecgroups = null as any;
export const getSecgroupsOutput: typeof import("./getSecgroups").getSecgroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecgroups","getSecgroupsOutput"], () => require("./getSecgroups"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubnetIdsArgs, GetSubnetIdsResult, GetSubnetIdsOutputArgs } from "./getSubnetIds";
export const getSubnetIds: typeof import("./getSubnetIds").getSubnetIds = null as any;
export const getSubnetIdsOutput: typeof import("./getSubnetIds").getSubnetIdsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnetIds","getSubnetIdsOutput"], () => require("./getSubnetIds"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetVpcArgs, GetVpcResult, GetVpcOutputArgs } from "./getVpc";
export const getVpc: typeof import("./getVpc").getVpc = null as any;
export const getVpcOutput: typeof import("./getVpc").getVpcOutput = null as any;
utilities.lazyLoad(exports, ["getVpc","getVpcOutput"], () => require("./getVpc"));

export { GetVpcsArgs, GetVpcsResult, GetVpcsOutputArgs } from "./getVpcs";
export const getVpcs: typeof import("./getVpcs").getVpcs = null as any;
export const getVpcsOutput: typeof import("./getVpcs").getVpcsOutput = null as any;
utilities.lazyLoad(exports, ["getVpcs","getVpcsOutput"], () => require("./getVpcs"));

export { PeeringConnectionArgs, PeeringConnectionState } from "./peeringConnection";
export type PeeringConnection = import("./peeringConnection").PeeringConnection;
export const PeeringConnection: typeof import("./peeringConnection").PeeringConnection = null as any;
utilities.lazyLoad(exports, ["PeeringConnection"], () => require("./peeringConnection"));

export { PeeringConnectionAccepterArgs, PeeringConnectionAccepterState } from "./peeringConnectionAccepter";
export type PeeringConnectionAccepter = import("./peeringConnectionAccepter").PeeringConnectionAccepter;
export const PeeringConnectionAccepter: typeof import("./peeringConnectionAccepter").PeeringConnectionAccepter = null as any;
utilities.lazyLoad(exports, ["PeeringConnectionAccepter"], () => require("./peeringConnectionAccepter"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { SecgroupArgs, SecgroupState } from "./secgroup";
export type Secgroup = import("./secgroup").Secgroup;
export const Secgroup: typeof import("./secgroup").Secgroup = null as any;
utilities.lazyLoad(exports, ["Secgroup"], () => require("./secgroup"));

export { SecgroupRuleArgs, SecgroupRuleState } from "./secgroupRule";
export type SecgroupRule = import("./secgroupRule").SecgroupRule;
export const SecgroupRule: typeof import("./secgroupRule").SecgroupRule = null as any;
utilities.lazyLoad(exports, ["SecgroupRule"], () => require("./secgroupRule"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { VipArgs, VipState } from "./vip";
export type Vip = import("./vip").Vip;
export const Vip: typeof import("./vip").Vip = null as any;
utilities.lazyLoad(exports, ["Vip"], () => require("./vip"));

export { VipAssociateArgs, VipAssociateState } from "./vipAssociate";
export type VipAssociate = import("./vipAssociate").VipAssociate;
export const VipAssociate: typeof import("./vipAssociate").VipAssociate = null as any;
utilities.lazyLoad(exports, ["VipAssociate"], () => require("./vipAssociate"));

export { VpcArgs, VpcState } from "./vpc";
export type Vpc = import("./vpc").Vpc;
export const Vpc: typeof import("./vpc").Vpc = null as any;
utilities.lazyLoad(exports, ["Vpc"], () => require("./vpc"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sbercloud:Vpc/addressGroup:AddressGroup":
                return new AddressGroup(name, <any>undefined, { urn })
            case "sbercloud:Vpc/bandwidth:Bandwidth":
                return new Bandwidth(name, <any>undefined, { urn })
            case "sbercloud:Vpc/eip:Eip":
                return new Eip(name, <any>undefined, { urn })
            case "sbercloud:Vpc/peeringConnection:PeeringConnection":
                return new PeeringConnection(name, <any>undefined, { urn })
            case "sbercloud:Vpc/peeringConnectionAccepter:PeeringConnectionAccepter":
                return new PeeringConnectionAccepter(name, <any>undefined, { urn })
            case "sbercloud:Vpc/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "sbercloud:Vpc/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "sbercloud:Vpc/secgroup:Secgroup":
                return new Secgroup(name, <any>undefined, { urn })
            case "sbercloud:Vpc/secgroupRule:SecgroupRule":
                return new SecgroupRule(name, <any>undefined, { urn })
            case "sbercloud:Vpc/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "sbercloud:Vpc/vip:Vip":
                return new Vip(name, <any>undefined, { urn })
            case "sbercloud:Vpc/vipAssociate:VipAssociate":
                return new VipAssociate(name, <any>undefined, { urn })
            case "sbercloud:Vpc/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/addressGroup", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/bandwidth", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/eip", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/peeringConnection", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/peeringConnectionAccepter", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/route", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/routeTable", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/secgroup", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/secgroupRule", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/subnet", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/vip", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/vipAssociate", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Vpc/vpc", _module)

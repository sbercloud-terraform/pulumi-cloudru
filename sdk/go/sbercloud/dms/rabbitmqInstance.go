// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manage DMS RabbitMQ instance resources within SberCloud.
//
// ## Example Usage
//
// ## Import
//
// DMS RabbitMQ instance can be imported using the instance id, e.g.
//
// ```sh
// $ pulumi import sbercloud:Dms/rabbitmqInstance:RabbitmqInstance  sbercloud_dms_rabbitmq_instance.instance_1 8d3c7938-dc47-4937-a30f-c80de381c5e3
// ```
//
// # Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
//
// API response, security or some other reason. The missing attributes include:
//
// `password`, `auto_renew`, `period` and `period_unit`. It is generally recommended running `pulumi preview` after
//
// importing a DMS RabbitMQ instance. You can then decide if changes should be applied to the instance, or the resource
//
// definition should be updated to align with the instance. Also you can ignore changes as below.
//
// resource "sbercloud_dms_rabbitmq_instance" "instance_1" {
//
//	  ...
//
//	lifecycle {
//
//	  ignore_changes = [
//
//	    password, auto_renew, period, period_unit,
//
//	  ]
//
//	}
//
// }
type RabbitmqInstance struct {
	pulumi.CustomResourceState

	// Specifies a username. A username consists of 4 to 64 characters and
	// supports only letters, digits, and hyphens (-). Changing this creates a new instance resource.
	AccessUser pulumi.StringPtrOutput `pulumi:"accessUser"`
	// Specifies whether auto renew is enabled. Valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// Specifies the names of an AZ.
	// The parameter value can not be left blank or an empty array.
	// Changing this creates a new instance resource.
	//
	// > The parameter behavior of `availabilityZones` has been changed from `list` to `set`.
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// Deprecated: available_zones has deprecated, please use "availabilityZones" instead.
	AvailableZones pulumi.StringArrayOutput `pulumi:"availableZones"`
	// Specifies the broker numbers.
	// It is required when creating a cluster instance with `flavorId`.
	//
	// > **NOTE:** Change this will change number of nodes and storage capacity. If you specify the value of
	// `storageSpace`, you need to manually modify the value of `storageSpace` after changing the `brokerNum`.
	BrokerNum pulumi.IntOutput `pulumi:"brokerNum"`
	// Specifies the charging mode of the instance. Valid values are
	// **prePaid** and **postPaid**, defaults to **postPaid**. Changing this creates a new resource.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Indicates the IP address of the DMS RabbitMQ instance.
	ConnectAddress pulumi.StringOutput `pulumi:"connectAddress"`
	CreatedAt      pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the description of the DMS RabbitMQ instance.
	// It is a character string containing not more than 1,024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	EnableAcl   pulumi.BoolOutput      `pulumi:"enableAcl"`
	// Indicates whether public access to the DMS RabbitMQ instance is enabled.
	EnablePublicIp pulumi.BoolOutput `pulumi:"enablePublicIp"`
	// Indicates the message engine.
	Engine pulumi.StringOutput `pulumi:"engine"`
	// Specifies the version of the RabbitMQ engine. Default to "3.7.17".
	// Changing this creates a new instance resource.
	EngineVersion pulumi.StringPtrOutput `pulumi:"engineVersion"`
	// Specifies the enterprise project ID of the RabbitMQ instance.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	ExtendTimes         pulumi.IntOutput    `pulumi:"extendTimes"`
	// Specifies a flavor ID.
	// It is mandatory when the `chargingMode` is **prePaid**.
	FlavorId        pulumi.StringPtrOutput `pulumi:"flavorId"`
	IsLogicalVolume pulumi.BoolOutput      `pulumi:"isLogicalVolume"`
	// Specifies the time at which a maintenance time window starts. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window.
	// The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00. Parameters `maintainBegin`
	// and `maintainEnd` must be set in pairs. If parameter `maintainBegin` is left blank, parameter `maintainEnd` is also
	// blank. In this case, the system automatically allocates the default start time 02:00.
	MaintainBegin pulumi.StringOutput `pulumi:"maintainBegin"`
	// Specifies the time at which a maintenance time window ends. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window. The end time is four hours later than the start time.
	// For example, if the start time is 22:00, the end time is 02:00.
	// Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// If parameter `maintainEnd` is left  blank, parameter `maintainBegin` is also blank.
	// In this case, the system automatically allocates the default end time 06:00.
	MaintainEnd pulumi.StringOutput `pulumi:"maintainEnd"`
	// Indicates the management address of the DMS RabbitMQ instance.
	ManagementConnectAddress pulumi.StringOutput `pulumi:"managementConnectAddress"`
	// Deprecated: typo in manegement_connect_address, please use "managementConnectAddress" instead.
	ManegementConnectAddress pulumi.StringOutput `pulumi:"manegementConnectAddress"`
	// Specifies the name of the DMS RabbitMQ instance. An instance name starts with a letter,
	// consists of 4 to 64 characters, and supports only letters, digits, hyphens (-) and underscores (_).
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the ID of a subnet. Changing this creates a new instance
	// resource.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Specifies the password of the DMS RabbitMQ instance. A password must meet
	// the following complexity requirements: Must be 8 to 32 characters long. Must contain at least 2 of the following
	// character types: lowercase letters, uppercase letters, digits,
	// and special characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
	// Changing this creates a new instance resource.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Specifies the charging period of the instance. If `periodUnit` is set to
	// **month**, the value ranges from 1 to 9. If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**. Changing this creates a new resource.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the instance.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new resource.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// Indicates the port number of the DMS RabbitMQ instance.
	Port pulumi.IntOutput `pulumi:"port"`
	// Deprecated: product_id has deprecated, please use "flavorId" instead.
	ProductId       pulumi.StringPtrOutput `pulumi:"productId"`
	PublicIpAddress pulumi.StringOutput    `pulumi:"publicIpAddress"`
	// Specifies the ID of the elastic IP address (EIP)
	// bound to the DMS RabbitMQ instance.
	PublicIpId pulumi.StringPtrOutput `pulumi:"publicIpId"`
	// The region in which to create the DMS RabbitMQ instance resource. If omitted,
	// the provider-level region will be used. Changing this creates a new instance resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates a resource specifications identifier.
	ResourceSpecCode pulumi.StringOutput `pulumi:"resourceSpecCode"`
	// Specifies the ID of a security group.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// Indicates the instance specification. For a single-node DMS RabbitMQ instance, VM specifications are
	// returned. For a cluster DMS RabbitMQ instance, VM specifications and the number of nodes are returned.
	Specification pulumi.StringOutput `pulumi:"specification"`
	// Specifies whether to enable public access for the DMS RabbitMQ instance.
	// Changing this creates a new instance resource.
	SslEnable pulumi.BoolPtrOutput `pulumi:"sslEnable"`
	// Indicates the status of the DMS RabbitMQ instance.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the message storage space, unit is GB.
	// It is required when creating a instance with `flavorId`. Value range:
	// + Single-node RabbitMQ instance: 100â€“90000 GB
	// + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB,
	//   and 300 GB x Number of nodes to 90000 GB
	//
	// Changing this creates a new instance resource.
	//
	// The storage capacity of the product used by default. Changing this creates a new instance resource.
	StorageSpace pulumi.IntOutput `pulumi:"storageSpace"`
	// Specifies the storage I/O specification.
	// Valid values are **dms.physical.storage.high** and **dms.physical.storage.ultra**.
	// Changing this creates a new instance resource.
	StorageSpecCode pulumi.StringOutput `pulumi:"storageSpecCode"`
	// The key/value pairs to associate with the DMS RabbitMQ instance.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Indicates the DMS RabbitMQ instance type.
	Type pulumi.StringOutput `pulumi:"type"`
	// Indicates the used message storage space. Unit: GB
	UsedStorageSpace pulumi.IntOutput `pulumi:"usedStorageSpace"`
	// Indicates the ID of the user who created the DMS RabbitMQ instance
	UserId pulumi.StringOutput `pulumi:"userId"`
	// Indicates the name of the user who created the DMS RabbitMQ instance
	UserName pulumi.StringOutput `pulumi:"userName"`
	// Specifies the ID of a VPC. Changing this creates a new instance resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRabbitmqInstance registers a new resource with the given unique name, arguments, and options.
func NewRabbitmqInstance(ctx *pulumi.Context,
	name string, args *RabbitmqInstanceArgs, opts ...pulumi.ResourceOption) (*RabbitmqInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.StorageSpecCode == nil {
		return nil, errors.New("invalid value for required argument 'StorageSpecCode'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RabbitmqInstance
	err := ctx.RegisterResource("sbercloud:Dms/rabbitmqInstance:RabbitmqInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRabbitmqInstance gets an existing RabbitmqInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRabbitmqInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RabbitmqInstanceState, opts ...pulumi.ResourceOption) (*RabbitmqInstance, error) {
	var resource RabbitmqInstance
	err := ctx.ReadResource("sbercloud:Dms/rabbitmqInstance:RabbitmqInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RabbitmqInstance resources.
type rabbitmqInstanceState struct {
	// Specifies a username. A username consists of 4 to 64 characters and
	// supports only letters, digits, and hyphens (-). Changing this creates a new instance resource.
	AccessUser *string `pulumi:"accessUser"`
	// Specifies whether auto renew is enabled. Valid values are **true** and **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the names of an AZ.
	// The parameter value can not be left blank or an empty array.
	// Changing this creates a new instance resource.
	//
	// > The parameter behavior of `availabilityZones` has been changed from `list` to `set`.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Deprecated: available_zones has deprecated, please use "availabilityZones" instead.
	AvailableZones []string `pulumi:"availableZones"`
	// Specifies the broker numbers.
	// It is required when creating a cluster instance with `flavorId`.
	//
	// > **NOTE:** Change this will change number of nodes and storage capacity. If you specify the value of
	// `storageSpace`, you need to manually modify the value of `storageSpace` after changing the `brokerNum`.
	BrokerNum *int `pulumi:"brokerNum"`
	// Specifies the charging mode of the instance. Valid values are
	// **prePaid** and **postPaid**, defaults to **postPaid**. Changing this creates a new resource.
	ChargingMode *string `pulumi:"chargingMode"`
	// Indicates the IP address of the DMS RabbitMQ instance.
	ConnectAddress *string `pulumi:"connectAddress"`
	CreatedAt      *string `pulumi:"createdAt"`
	// Specifies the description of the DMS RabbitMQ instance.
	// It is a character string containing not more than 1,024 characters.
	Description *string `pulumi:"description"`
	EnableAcl   *bool   `pulumi:"enableAcl"`
	// Indicates whether public access to the DMS RabbitMQ instance is enabled.
	EnablePublicIp *bool `pulumi:"enablePublicIp"`
	// Indicates the message engine.
	Engine *string `pulumi:"engine"`
	// Specifies the version of the RabbitMQ engine. Default to "3.7.17".
	// Changing this creates a new instance resource.
	EngineVersion *string `pulumi:"engineVersion"`
	// Specifies the enterprise project ID of the RabbitMQ instance.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	ExtendTimes         *int    `pulumi:"extendTimes"`
	// Specifies a flavor ID.
	// It is mandatory when the `chargingMode` is **prePaid**.
	FlavorId        *string `pulumi:"flavorId"`
	IsLogicalVolume *bool   `pulumi:"isLogicalVolume"`
	// Specifies the time at which a maintenance time window starts. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window.
	// The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00. Parameters `maintainBegin`
	// and `maintainEnd` must be set in pairs. If parameter `maintainBegin` is left blank, parameter `maintainEnd` is also
	// blank. In this case, the system automatically allocates the default start time 02:00.
	MaintainBegin *string `pulumi:"maintainBegin"`
	// Specifies the time at which a maintenance time window ends. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window. The end time is four hours later than the start time.
	// For example, if the start time is 22:00, the end time is 02:00.
	// Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// If parameter `maintainEnd` is left  blank, parameter `maintainBegin` is also blank.
	// In this case, the system automatically allocates the default end time 06:00.
	MaintainEnd *string `pulumi:"maintainEnd"`
	// Indicates the management address of the DMS RabbitMQ instance.
	ManagementConnectAddress *string `pulumi:"managementConnectAddress"`
	// Deprecated: typo in manegement_connect_address, please use "managementConnectAddress" instead.
	ManegementConnectAddress *string `pulumi:"manegementConnectAddress"`
	// Specifies the name of the DMS RabbitMQ instance. An instance name starts with a letter,
	// consists of 4 to 64 characters, and supports only letters, digits, hyphens (-) and underscores (_).
	Name *string `pulumi:"name"`
	// Specifies the ID of a subnet. Changing this creates a new instance
	// resource.
	NetworkId *string `pulumi:"networkId"`
	// Specifies the password of the DMS RabbitMQ instance. A password must meet
	// the following complexity requirements: Must be 8 to 32 characters long. Must contain at least 2 of the following
	// character types: lowercase letters, uppercase letters, digits,
	// and special characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
	// Changing this creates a new instance resource.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the instance. If `periodUnit` is set to
	// **month**, the value ranges from 1 to 9. If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**. Changing this creates a new resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the instance.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Indicates the port number of the DMS RabbitMQ instance.
	Port *int `pulumi:"port"`
	// Deprecated: product_id has deprecated, please use "flavorId" instead.
	ProductId       *string `pulumi:"productId"`
	PublicIpAddress *string `pulumi:"publicIpAddress"`
	// Specifies the ID of the elastic IP address (EIP)
	// bound to the DMS RabbitMQ instance.
	PublicIpId *string `pulumi:"publicIpId"`
	// The region in which to create the DMS RabbitMQ instance resource. If omitted,
	// the provider-level region will be used. Changing this creates a new instance resource.
	Region *string `pulumi:"region"`
	// Indicates a resource specifications identifier.
	ResourceSpecCode *string `pulumi:"resourceSpecCode"`
	// Specifies the ID of a security group.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Indicates the instance specification. For a single-node DMS RabbitMQ instance, VM specifications are
	// returned. For a cluster DMS RabbitMQ instance, VM specifications and the number of nodes are returned.
	Specification *string `pulumi:"specification"`
	// Specifies whether to enable public access for the DMS RabbitMQ instance.
	// Changing this creates a new instance resource.
	SslEnable *bool `pulumi:"sslEnable"`
	// Indicates the status of the DMS RabbitMQ instance.
	Status *string `pulumi:"status"`
	// Specifies the message storage space, unit is GB.
	// It is required when creating a instance with `flavorId`. Value range:
	// + Single-node RabbitMQ instance: 100â€“90000 GB
	// + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB,
	//   and 300 GB x Number of nodes to 90000 GB
	//
	// Changing this creates a new instance resource.
	//
	// The storage capacity of the product used by default. Changing this creates a new instance resource.
	StorageSpace *int `pulumi:"storageSpace"`
	// Specifies the storage I/O specification.
	// Valid values are **dms.physical.storage.high** and **dms.physical.storage.ultra**.
	// Changing this creates a new instance resource.
	StorageSpecCode *string `pulumi:"storageSpecCode"`
	// The key/value pairs to associate with the DMS RabbitMQ instance.
	Tags map[string]string `pulumi:"tags"`
	// Indicates the DMS RabbitMQ instance type.
	Type *string `pulumi:"type"`
	// Indicates the used message storage space. Unit: GB
	UsedStorageSpace *int `pulumi:"usedStorageSpace"`
	// Indicates the ID of the user who created the DMS RabbitMQ instance
	UserId *string `pulumi:"userId"`
	// Indicates the name of the user who created the DMS RabbitMQ instance
	UserName *string `pulumi:"userName"`
	// Specifies the ID of a VPC. Changing this creates a new instance resource.
	VpcId *string `pulumi:"vpcId"`
}

type RabbitmqInstanceState struct {
	// Specifies a username. A username consists of 4 to 64 characters and
	// supports only letters, digits, and hyphens (-). Changing this creates a new instance resource.
	AccessUser pulumi.StringPtrInput
	// Specifies whether auto renew is enabled. Valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the names of an AZ.
	// The parameter value can not be left blank or an empty array.
	// Changing this creates a new instance resource.
	//
	// > The parameter behavior of `availabilityZones` has been changed from `list` to `set`.
	AvailabilityZones pulumi.StringArrayInput
	// Deprecated: available_zones has deprecated, please use "availabilityZones" instead.
	AvailableZones pulumi.StringArrayInput
	// Specifies the broker numbers.
	// It is required when creating a cluster instance with `flavorId`.
	//
	// > **NOTE:** Change this will change number of nodes and storage capacity. If you specify the value of
	// `storageSpace`, you need to manually modify the value of `storageSpace` after changing the `brokerNum`.
	BrokerNum pulumi.IntPtrInput
	// Specifies the charging mode of the instance. Valid values are
	// **prePaid** and **postPaid**, defaults to **postPaid**. Changing this creates a new resource.
	ChargingMode pulumi.StringPtrInput
	// Indicates the IP address of the DMS RabbitMQ instance.
	ConnectAddress pulumi.StringPtrInput
	CreatedAt      pulumi.StringPtrInput
	// Specifies the description of the DMS RabbitMQ instance.
	// It is a character string containing not more than 1,024 characters.
	Description pulumi.StringPtrInput
	EnableAcl   pulumi.BoolPtrInput
	// Indicates whether public access to the DMS RabbitMQ instance is enabled.
	EnablePublicIp pulumi.BoolPtrInput
	// Indicates the message engine.
	Engine pulumi.StringPtrInput
	// Specifies the version of the RabbitMQ engine. Default to "3.7.17".
	// Changing this creates a new instance resource.
	EngineVersion pulumi.StringPtrInput
	// Specifies the enterprise project ID of the RabbitMQ instance.
	EnterpriseProjectId pulumi.StringPtrInput
	ExtendTimes         pulumi.IntPtrInput
	// Specifies a flavor ID.
	// It is mandatory when the `chargingMode` is **prePaid**.
	FlavorId        pulumi.StringPtrInput
	IsLogicalVolume pulumi.BoolPtrInput
	// Specifies the time at which a maintenance time window starts. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window.
	// The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00. Parameters `maintainBegin`
	// and `maintainEnd` must be set in pairs. If parameter `maintainBegin` is left blank, parameter `maintainEnd` is also
	// blank. In this case, the system automatically allocates the default start time 02:00.
	MaintainBegin pulumi.StringPtrInput
	// Specifies the time at which a maintenance time window ends. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window. The end time is four hours later than the start time.
	// For example, if the start time is 22:00, the end time is 02:00.
	// Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// If parameter `maintainEnd` is left  blank, parameter `maintainBegin` is also blank.
	// In this case, the system automatically allocates the default end time 06:00.
	MaintainEnd pulumi.StringPtrInput
	// Indicates the management address of the DMS RabbitMQ instance.
	ManagementConnectAddress pulumi.StringPtrInput
	// Deprecated: typo in manegement_connect_address, please use "managementConnectAddress" instead.
	ManegementConnectAddress pulumi.StringPtrInput
	// Specifies the name of the DMS RabbitMQ instance. An instance name starts with a letter,
	// consists of 4 to 64 characters, and supports only letters, digits, hyphens (-) and underscores (_).
	Name pulumi.StringPtrInput
	// Specifies the ID of a subnet. Changing this creates a new instance
	// resource.
	NetworkId pulumi.StringPtrInput
	// Specifies the password of the DMS RabbitMQ instance. A password must meet
	// the following complexity requirements: Must be 8 to 32 characters long. Must contain at least 2 of the following
	// character types: lowercase letters, uppercase letters, digits,
	// and special characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
	// Changing this creates a new instance resource.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the instance. If `periodUnit` is set to
	// **month**, the value ranges from 1 to 9. If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**. Changing this creates a new resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the instance.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new resource.
	PeriodUnit pulumi.StringPtrInput
	// Indicates the port number of the DMS RabbitMQ instance.
	Port pulumi.IntPtrInput
	// Deprecated: product_id has deprecated, please use "flavorId" instead.
	ProductId       pulumi.StringPtrInput
	PublicIpAddress pulumi.StringPtrInput
	// Specifies the ID of the elastic IP address (EIP)
	// bound to the DMS RabbitMQ instance.
	PublicIpId pulumi.StringPtrInput
	// The region in which to create the DMS RabbitMQ instance resource. If omitted,
	// the provider-level region will be used. Changing this creates a new instance resource.
	Region pulumi.StringPtrInput
	// Indicates a resource specifications identifier.
	ResourceSpecCode pulumi.StringPtrInput
	// Specifies the ID of a security group.
	SecurityGroupId pulumi.StringPtrInput
	// Indicates the instance specification. For a single-node DMS RabbitMQ instance, VM specifications are
	// returned. For a cluster DMS RabbitMQ instance, VM specifications and the number of nodes are returned.
	Specification pulumi.StringPtrInput
	// Specifies whether to enable public access for the DMS RabbitMQ instance.
	// Changing this creates a new instance resource.
	SslEnable pulumi.BoolPtrInput
	// Indicates the status of the DMS RabbitMQ instance.
	Status pulumi.StringPtrInput
	// Specifies the message storage space, unit is GB.
	// It is required when creating a instance with `flavorId`. Value range:
	// + Single-node RabbitMQ instance: 100â€“90000 GB
	// + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB,
	//   and 300 GB x Number of nodes to 90000 GB
	//
	// Changing this creates a new instance resource.
	//
	// The storage capacity of the product used by default. Changing this creates a new instance resource.
	StorageSpace pulumi.IntPtrInput
	// Specifies the storage I/O specification.
	// Valid values are **dms.physical.storage.high** and **dms.physical.storage.ultra**.
	// Changing this creates a new instance resource.
	StorageSpecCode pulumi.StringPtrInput
	// The key/value pairs to associate with the DMS RabbitMQ instance.
	Tags pulumi.StringMapInput
	// Indicates the DMS RabbitMQ instance type.
	Type pulumi.StringPtrInput
	// Indicates the used message storage space. Unit: GB
	UsedStorageSpace pulumi.IntPtrInput
	// Indicates the ID of the user who created the DMS RabbitMQ instance
	UserId pulumi.StringPtrInput
	// Indicates the name of the user who created the DMS RabbitMQ instance
	UserName pulumi.StringPtrInput
	// Specifies the ID of a VPC. Changing this creates a new instance resource.
	VpcId pulumi.StringPtrInput
}

func (RabbitmqInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqInstanceState)(nil)).Elem()
}

type rabbitmqInstanceArgs struct {
	// Specifies a username. A username consists of 4 to 64 characters and
	// supports only letters, digits, and hyphens (-). Changing this creates a new instance resource.
	AccessUser *string `pulumi:"accessUser"`
	// Specifies whether auto renew is enabled. Valid values are **true** and **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the names of an AZ.
	// The parameter value can not be left blank or an empty array.
	// Changing this creates a new instance resource.
	//
	// > The parameter behavior of `availabilityZones` has been changed from `list` to `set`.
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Deprecated: available_zones has deprecated, please use "availabilityZones" instead.
	AvailableZones []string `pulumi:"availableZones"`
	// Specifies the broker numbers.
	// It is required when creating a cluster instance with `flavorId`.
	//
	// > **NOTE:** Change this will change number of nodes and storage capacity. If you specify the value of
	// `storageSpace`, you need to manually modify the value of `storageSpace` after changing the `brokerNum`.
	BrokerNum *int `pulumi:"brokerNum"`
	// Specifies the charging mode of the instance. Valid values are
	// **prePaid** and **postPaid**, defaults to **postPaid**. Changing this creates a new resource.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the description of the DMS RabbitMQ instance.
	// It is a character string containing not more than 1,024 characters.
	Description *string `pulumi:"description"`
	EnableAcl   *bool   `pulumi:"enableAcl"`
	// Specifies the version of the RabbitMQ engine. Default to "3.7.17".
	// Changing this creates a new instance resource.
	EngineVersion *string `pulumi:"engineVersion"`
	// Specifies the enterprise project ID of the RabbitMQ instance.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies a flavor ID.
	// It is mandatory when the `chargingMode` is **prePaid**.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the time at which a maintenance time window starts. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window.
	// The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00. Parameters `maintainBegin`
	// and `maintainEnd` must be set in pairs. If parameter `maintainBegin` is left blank, parameter `maintainEnd` is also
	// blank. In this case, the system automatically allocates the default start time 02:00.
	MaintainBegin *string `pulumi:"maintainBegin"`
	// Specifies the time at which a maintenance time window ends. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window. The end time is four hours later than the start time.
	// For example, if the start time is 22:00, the end time is 02:00.
	// Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// If parameter `maintainEnd` is left  blank, parameter `maintainBegin` is also blank.
	// In this case, the system automatically allocates the default end time 06:00.
	MaintainEnd *string `pulumi:"maintainEnd"`
	// Specifies the name of the DMS RabbitMQ instance. An instance name starts with a letter,
	// consists of 4 to 64 characters, and supports only letters, digits, hyphens (-) and underscores (_).
	Name *string `pulumi:"name"`
	// Specifies the ID of a subnet. Changing this creates a new instance
	// resource.
	NetworkId string `pulumi:"networkId"`
	// Specifies the password of the DMS RabbitMQ instance. A password must meet
	// the following complexity requirements: Must be 8 to 32 characters long. Must contain at least 2 of the following
	// character types: lowercase letters, uppercase letters, digits,
	// and special characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
	// Changing this creates a new instance resource.
	Password *string `pulumi:"password"`
	// Specifies the charging period of the instance. If `periodUnit` is set to
	// **month**, the value ranges from 1 to 9. If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**. Changing this creates a new resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the instance.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Deprecated: product_id has deprecated, please use "flavorId" instead.
	ProductId *string `pulumi:"productId"`
	// Specifies the ID of the elastic IP address (EIP)
	// bound to the DMS RabbitMQ instance.
	PublicIpId *string `pulumi:"publicIpId"`
	// The region in which to create the DMS RabbitMQ instance resource. If omitted,
	// the provider-level region will be used. Changing this creates a new instance resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of a security group.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Specifies whether to enable public access for the DMS RabbitMQ instance.
	// Changing this creates a new instance resource.
	SslEnable *bool `pulumi:"sslEnable"`
	// Specifies the message storage space, unit is GB.
	// It is required when creating a instance with `flavorId`. Value range:
	// + Single-node RabbitMQ instance: 100â€“90000 GB
	// + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB,
	//   and 300 GB x Number of nodes to 90000 GB
	//
	// Changing this creates a new instance resource.
	//
	// The storage capacity of the product used by default. Changing this creates a new instance resource.
	StorageSpace *int `pulumi:"storageSpace"`
	// Specifies the storage I/O specification.
	// Valid values are **dms.physical.storage.high** and **dms.physical.storage.ultra**.
	// Changing this creates a new instance resource.
	StorageSpecCode string `pulumi:"storageSpecCode"`
	// The key/value pairs to associate with the DMS RabbitMQ instance.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the ID of a VPC. Changing this creates a new instance resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a RabbitmqInstance resource.
type RabbitmqInstanceArgs struct {
	// Specifies a username. A username consists of 4 to 64 characters and
	// supports only letters, digits, and hyphens (-). Changing this creates a new instance resource.
	AccessUser pulumi.StringPtrInput
	// Specifies whether auto renew is enabled. Valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the names of an AZ.
	// The parameter value can not be left blank or an empty array.
	// Changing this creates a new instance resource.
	//
	// > The parameter behavior of `availabilityZones` has been changed from `list` to `set`.
	AvailabilityZones pulumi.StringArrayInput
	// Deprecated: available_zones has deprecated, please use "availabilityZones" instead.
	AvailableZones pulumi.StringArrayInput
	// Specifies the broker numbers.
	// It is required when creating a cluster instance with `flavorId`.
	//
	// > **NOTE:** Change this will change number of nodes and storage capacity. If you specify the value of
	// `storageSpace`, you need to manually modify the value of `storageSpace` after changing the `brokerNum`.
	BrokerNum pulumi.IntPtrInput
	// Specifies the charging mode of the instance. Valid values are
	// **prePaid** and **postPaid**, defaults to **postPaid**. Changing this creates a new resource.
	ChargingMode pulumi.StringPtrInput
	// Specifies the description of the DMS RabbitMQ instance.
	// It is a character string containing not more than 1,024 characters.
	Description pulumi.StringPtrInput
	EnableAcl   pulumi.BoolPtrInput
	// Specifies the version of the RabbitMQ engine. Default to "3.7.17".
	// Changing this creates a new instance resource.
	EngineVersion pulumi.StringPtrInput
	// Specifies the enterprise project ID of the RabbitMQ instance.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies a flavor ID.
	// It is mandatory when the `chargingMode` is **prePaid**.
	FlavorId pulumi.StringPtrInput
	// Specifies the time at which a maintenance time window starts. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window.
	// The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00. Parameters `maintainBegin`
	// and `maintainEnd` must be set in pairs. If parameter `maintainBegin` is left blank, parameter `maintainEnd` is also
	// blank. In this case, the system automatically allocates the default start time 02:00.
	MaintainBegin pulumi.StringPtrInput
	// Specifies the time at which a maintenance time window ends. Format: HH:mm.
	// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
	// time window. The end time is four hours later than the start time.
	// For example, if the start time is 22:00, the end time is 02:00.
	// Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
	// If parameter `maintainEnd` is left  blank, parameter `maintainBegin` is also blank.
	// In this case, the system automatically allocates the default end time 06:00.
	MaintainEnd pulumi.StringPtrInput
	// Specifies the name of the DMS RabbitMQ instance. An instance name starts with a letter,
	// consists of 4 to 64 characters, and supports only letters, digits, hyphens (-) and underscores (_).
	Name pulumi.StringPtrInput
	// Specifies the ID of a subnet. Changing this creates a new instance
	// resource.
	NetworkId pulumi.StringInput
	// Specifies the password of the DMS RabbitMQ instance. A password must meet
	// the following complexity requirements: Must be 8 to 32 characters long. Must contain at least 2 of the following
	// character types: lowercase letters, uppercase letters, digits,
	// and special characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
	// Changing this creates a new instance resource.
	Password pulumi.StringPtrInput
	// Specifies the charging period of the instance. If `periodUnit` is set to
	// **month**, the value ranges from 1 to 9. If `periodUnit` is set to **year**, the value ranges from 1 to 3.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**. Changing this creates a new resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the instance.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this creates a new resource.
	PeriodUnit pulumi.StringPtrInput
	// Deprecated: product_id has deprecated, please use "flavorId" instead.
	ProductId pulumi.StringPtrInput
	// Specifies the ID of the elastic IP address (EIP)
	// bound to the DMS RabbitMQ instance.
	PublicIpId pulumi.StringPtrInput
	// The region in which to create the DMS RabbitMQ instance resource. If omitted,
	// the provider-level region will be used. Changing this creates a new instance resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of a security group.
	SecurityGroupId pulumi.StringInput
	// Specifies whether to enable public access for the DMS RabbitMQ instance.
	// Changing this creates a new instance resource.
	SslEnable pulumi.BoolPtrInput
	// Specifies the message storage space, unit is GB.
	// It is required when creating a instance with `flavorId`. Value range:
	// + Single-node RabbitMQ instance: 100â€“90000 GB
	// + Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB,
	//   and 300 GB x Number of nodes to 90000 GB
	//
	// Changing this creates a new instance resource.
	//
	// The storage capacity of the product used by default. Changing this creates a new instance resource.
	StorageSpace pulumi.IntPtrInput
	// Specifies the storage I/O specification.
	// Valid values are **dms.physical.storage.high** and **dms.physical.storage.ultra**.
	// Changing this creates a new instance resource.
	StorageSpecCode pulumi.StringInput
	// The key/value pairs to associate with the DMS RabbitMQ instance.
	Tags pulumi.StringMapInput
	// Specifies the ID of a VPC. Changing this creates a new instance resource.
	VpcId pulumi.StringInput
}

func (RabbitmqInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rabbitmqInstanceArgs)(nil)).Elem()
}

type RabbitmqInstanceInput interface {
	pulumi.Input

	ToRabbitmqInstanceOutput() RabbitmqInstanceOutput
	ToRabbitmqInstanceOutputWithContext(ctx context.Context) RabbitmqInstanceOutput
}

func (*RabbitmqInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqInstance)(nil)).Elem()
}

func (i *RabbitmqInstance) ToRabbitmqInstanceOutput() RabbitmqInstanceOutput {
	return i.ToRabbitmqInstanceOutputWithContext(context.Background())
}

func (i *RabbitmqInstance) ToRabbitmqInstanceOutputWithContext(ctx context.Context) RabbitmqInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceOutput)
}

// RabbitmqInstanceArrayInput is an input type that accepts RabbitmqInstanceArray and RabbitmqInstanceArrayOutput values.
// You can construct a concrete instance of `RabbitmqInstanceArrayInput` via:
//
//	RabbitmqInstanceArray{ RabbitmqInstanceArgs{...} }
type RabbitmqInstanceArrayInput interface {
	pulumi.Input

	ToRabbitmqInstanceArrayOutput() RabbitmqInstanceArrayOutput
	ToRabbitmqInstanceArrayOutputWithContext(context.Context) RabbitmqInstanceArrayOutput
}

type RabbitmqInstanceArray []RabbitmqInstanceInput

func (RabbitmqInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqInstance)(nil)).Elem()
}

func (i RabbitmqInstanceArray) ToRabbitmqInstanceArrayOutput() RabbitmqInstanceArrayOutput {
	return i.ToRabbitmqInstanceArrayOutputWithContext(context.Background())
}

func (i RabbitmqInstanceArray) ToRabbitmqInstanceArrayOutputWithContext(ctx context.Context) RabbitmqInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceArrayOutput)
}

// RabbitmqInstanceMapInput is an input type that accepts RabbitmqInstanceMap and RabbitmqInstanceMapOutput values.
// You can construct a concrete instance of `RabbitmqInstanceMapInput` via:
//
//	RabbitmqInstanceMap{ "key": RabbitmqInstanceArgs{...} }
type RabbitmqInstanceMapInput interface {
	pulumi.Input

	ToRabbitmqInstanceMapOutput() RabbitmqInstanceMapOutput
	ToRabbitmqInstanceMapOutputWithContext(context.Context) RabbitmqInstanceMapOutput
}

type RabbitmqInstanceMap map[string]RabbitmqInstanceInput

func (RabbitmqInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqInstance)(nil)).Elem()
}

func (i RabbitmqInstanceMap) ToRabbitmqInstanceMapOutput() RabbitmqInstanceMapOutput {
	return i.ToRabbitmqInstanceMapOutputWithContext(context.Background())
}

func (i RabbitmqInstanceMap) ToRabbitmqInstanceMapOutputWithContext(ctx context.Context) RabbitmqInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RabbitmqInstanceMapOutput)
}

type RabbitmqInstanceOutput struct{ *pulumi.OutputState }

func (RabbitmqInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RabbitmqInstance)(nil)).Elem()
}

func (o RabbitmqInstanceOutput) ToRabbitmqInstanceOutput() RabbitmqInstanceOutput {
	return o
}

func (o RabbitmqInstanceOutput) ToRabbitmqInstanceOutputWithContext(ctx context.Context) RabbitmqInstanceOutput {
	return o
}

// Specifies a username. A username consists of 4 to 64 characters and
// supports only letters, digits, and hyphens (-). Changing this creates a new instance resource.
func (o RabbitmqInstanceOutput) AccessUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.AccessUser }).(pulumi.StringPtrOutput)
}

// Specifies whether auto renew is enabled. Valid values are **true** and **false**.
func (o RabbitmqInstanceOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// Specifies the names of an AZ.
// The parameter value can not be left blank or an empty array.
// Changing this creates a new instance resource.
//
// > The parameter behavior of `availabilityZones` has been changed from `list` to `set`.
func (o RabbitmqInstanceOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Deprecated: available_zones has deprecated, please use "availabilityZones" instead.
func (o RabbitmqInstanceOutput) AvailableZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringArrayOutput { return v.AvailableZones }).(pulumi.StringArrayOutput)
}

// Specifies the broker numbers.
// It is required when creating a cluster instance with `flavorId`.
//
// > **NOTE:** Change this will change number of nodes and storage capacity. If you specify the value of
// `storageSpace`, you need to manually modify the value of `storageSpace` after changing the `brokerNum`.
func (o RabbitmqInstanceOutput) BrokerNum() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.IntOutput { return v.BrokerNum }).(pulumi.IntOutput)
}

// Specifies the charging mode of the instance. Valid values are
// **prePaid** and **postPaid**, defaults to **postPaid**. Changing this creates a new resource.
func (o RabbitmqInstanceOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Indicates the IP address of the DMS RabbitMQ instance.
func (o RabbitmqInstanceOutput) ConnectAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.ConnectAddress }).(pulumi.StringOutput)
}

func (o RabbitmqInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the description of the DMS RabbitMQ instance.
// It is a character string containing not more than 1,024 characters.
func (o RabbitmqInstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RabbitmqInstanceOutput) EnableAcl() pulumi.BoolOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.BoolOutput { return v.EnableAcl }).(pulumi.BoolOutput)
}

// Indicates whether public access to the DMS RabbitMQ instance is enabled.
func (o RabbitmqInstanceOutput) EnablePublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.BoolOutput { return v.EnablePublicIp }).(pulumi.BoolOutput)
}

// Indicates the message engine.
func (o RabbitmqInstanceOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// Specifies the version of the RabbitMQ engine. Default to "3.7.17".
// Changing this creates a new instance resource.
func (o RabbitmqInstanceOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// Specifies the enterprise project ID of the RabbitMQ instance.
func (o RabbitmqInstanceOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o RabbitmqInstanceOutput) ExtendTimes() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.IntOutput { return v.ExtendTimes }).(pulumi.IntOutput)
}

// Specifies a flavor ID.
// It is mandatory when the `chargingMode` is **prePaid**.
func (o RabbitmqInstanceOutput) FlavorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.FlavorId }).(pulumi.StringPtrOutput)
}

func (o RabbitmqInstanceOutput) IsLogicalVolume() pulumi.BoolOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.BoolOutput { return v.IsLogicalVolume }).(pulumi.BoolOutput)
}

// Specifies the time at which a maintenance time window starts. Format: HH:mm.
// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
// time window.
// The start time must be set to 22:00, 02:00, 06:00, 10:00, 14:00, or 18:00. Parameters `maintainBegin`
// and `maintainEnd` must be set in pairs. If parameter `maintainBegin` is left blank, parameter `maintainEnd` is also
// blank. In this case, the system automatically allocates the default start time 02:00.
func (o RabbitmqInstanceOutput) MaintainBegin() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.MaintainBegin }).(pulumi.StringOutput)
}

// Specifies the time at which a maintenance time window ends. Format: HH:mm.
// The start time and end time of a maintenance time window must indicate the time segment of a supported maintenance
// time window. The end time is four hours later than the start time.
// For example, if the start time is 22:00, the end time is 02:00.
// Parameters `maintainBegin` and `maintainEnd` must be set in pairs.
// If parameter `maintainEnd` is left  blank, parameter `maintainBegin` is also blank.
// In this case, the system automatically allocates the default end time 06:00.
func (o RabbitmqInstanceOutput) MaintainEnd() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.MaintainEnd }).(pulumi.StringOutput)
}

// Indicates the management address of the DMS RabbitMQ instance.
func (o RabbitmqInstanceOutput) ManagementConnectAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.ManagementConnectAddress }).(pulumi.StringOutput)
}

// Deprecated: typo in manegement_connect_address, please use "managementConnectAddress" instead.
func (o RabbitmqInstanceOutput) ManegementConnectAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.ManegementConnectAddress }).(pulumi.StringOutput)
}

// Specifies the name of the DMS RabbitMQ instance. An instance name starts with a letter,
// consists of 4 to 64 characters, and supports only letters, digits, hyphens (-) and underscores (_).
func (o RabbitmqInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the ID of a subnet. Changing this creates a new instance
// resource.
func (o RabbitmqInstanceOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Specifies the password of the DMS RabbitMQ instance. A password must meet
// the following complexity requirements: Must be 8 to 32 characters long. Must contain at least 2 of the following
// character types: lowercase letters, uppercase letters, digits,
// and special characters (`~!@#$%^&*()-_=+\\|[{}]:'",<.>/?).
// Changing this creates a new instance resource.
func (o RabbitmqInstanceOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the charging period of the instance. If `periodUnit` is set to
// **month**, the value ranges from 1 to 9. If `periodUnit` is set to **year**, the value ranges from 1 to 3.
// This parameter is mandatory if `chargingMode` is set to **prePaid**. Changing this creates a new resource.
func (o RabbitmqInstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the instance.
// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this creates a new resource.
func (o RabbitmqInstanceOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Indicates the port number of the DMS RabbitMQ instance.
func (o RabbitmqInstanceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Deprecated: product_id has deprecated, please use "flavorId" instead.
func (o RabbitmqInstanceOutput) ProductId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.ProductId }).(pulumi.StringPtrOutput)
}

func (o RabbitmqInstanceOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// Specifies the ID of the elastic IP address (EIP)
// bound to the DMS RabbitMQ instance.
func (o RabbitmqInstanceOutput) PublicIpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringPtrOutput { return v.PublicIpId }).(pulumi.StringPtrOutput)
}

// The region in which to create the DMS RabbitMQ instance resource. If omitted,
// the provider-level region will be used. Changing this creates a new instance resource.
func (o RabbitmqInstanceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates a resource specifications identifier.
func (o RabbitmqInstanceOutput) ResourceSpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.ResourceSpecCode }).(pulumi.StringOutput)
}

// Specifies the ID of a security group.
func (o RabbitmqInstanceOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Indicates the instance specification. For a single-node DMS RabbitMQ instance, VM specifications are
// returned. For a cluster DMS RabbitMQ instance, VM specifications and the number of nodes are returned.
func (o RabbitmqInstanceOutput) Specification() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.Specification }).(pulumi.StringOutput)
}

// Specifies whether to enable public access for the DMS RabbitMQ instance.
// Changing this creates a new instance resource.
func (o RabbitmqInstanceOutput) SslEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.BoolPtrOutput { return v.SslEnable }).(pulumi.BoolPtrOutput)
}

// Indicates the status of the DMS RabbitMQ instance.
func (o RabbitmqInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the message storage space, unit is GB.
// It is required when creating a instance with `flavorId`. Value range:
//   - Single-node RabbitMQ instance: 100â€“90000 GB
//   - Cluster RabbitMQ instance: 100 GB x Number of nodes to 90000 GB, 200 GB x Number of nodes to 90000 GB,
//     and 300 GB x Number of nodes to 90000 GB
//
// Changing this creates a new instance resource.
//
// The storage capacity of the product used by default. Changing this creates a new instance resource.
func (o RabbitmqInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.IntOutput { return v.StorageSpace }).(pulumi.IntOutput)
}

// Specifies the storage I/O specification.
// Valid values are **dms.physical.storage.high** and **dms.physical.storage.ultra**.
// Changing this creates a new instance resource.
func (o RabbitmqInstanceOutput) StorageSpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.StorageSpecCode }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the DMS RabbitMQ instance.
func (o RabbitmqInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Indicates the DMS RabbitMQ instance type.
func (o RabbitmqInstanceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Indicates the used message storage space. Unit: GB
func (o RabbitmqInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.IntOutput { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// Indicates the ID of the user who created the DMS RabbitMQ instance
func (o RabbitmqInstanceOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// Indicates the name of the user who created the DMS RabbitMQ instance
func (o RabbitmqInstanceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// Specifies the ID of a VPC. Changing this creates a new instance resource.
func (o RabbitmqInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RabbitmqInstance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type RabbitmqInstanceArrayOutput struct{ *pulumi.OutputState }

func (RabbitmqInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RabbitmqInstance)(nil)).Elem()
}

func (o RabbitmqInstanceArrayOutput) ToRabbitmqInstanceArrayOutput() RabbitmqInstanceArrayOutput {
	return o
}

func (o RabbitmqInstanceArrayOutput) ToRabbitmqInstanceArrayOutputWithContext(ctx context.Context) RabbitmqInstanceArrayOutput {
	return o
}

func (o RabbitmqInstanceArrayOutput) Index(i pulumi.IntInput) RabbitmqInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RabbitmqInstance {
		return vs[0].([]*RabbitmqInstance)[vs[1].(int)]
	}).(RabbitmqInstanceOutput)
}

type RabbitmqInstanceMapOutput struct{ *pulumi.OutputState }

func (RabbitmqInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RabbitmqInstance)(nil)).Elem()
}

func (o RabbitmqInstanceMapOutput) ToRabbitmqInstanceMapOutput() RabbitmqInstanceMapOutput {
	return o
}

func (o RabbitmqInstanceMapOutput) ToRabbitmqInstanceMapOutputWithContext(ctx context.Context) RabbitmqInstanceMapOutput {
	return o
}

func (o RabbitmqInstanceMapOutput) MapIndex(k pulumi.StringInput) RabbitmqInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RabbitmqInstance {
		return vs[0].(map[string]*RabbitmqInstance)[vs[1].(string)]
	}).(RabbitmqInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqInstanceInput)(nil)).Elem(), &RabbitmqInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqInstanceArrayInput)(nil)).Elem(), RabbitmqInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RabbitmqInstanceMapInput)(nil)).Elem(), RabbitmqInstanceMap{})
	pulumi.RegisterOutputType(RabbitmqInstanceOutput{})
	pulumi.RegisterOutputType(RabbitmqInstanceArrayOutput{})
	pulumi.RegisterOutputType(RabbitmqInstanceMapOutput{})
}

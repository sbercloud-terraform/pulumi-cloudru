// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type MysqlBinlog struct {
	pulumi.CustomResourceState

	BinlogRetentionHours pulumi.IntOutput    `pulumi:"binlogRetentionHours"`
	InstanceId           pulumi.StringOutput `pulumi:"instanceId"`
	Region               pulumi.StringOutput `pulumi:"region"`
}

// NewMysqlBinlog registers a new resource with the given unique name, arguments, and options.
func NewMysqlBinlog(ctx *pulumi.Context,
	name string, args *MysqlBinlogArgs, opts ...pulumi.ResourceOption) (*MysqlBinlog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BinlogRetentionHours == nil {
		return nil, errors.New("invalid value for required argument 'BinlogRetentionHours'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MysqlBinlog
	err := ctx.RegisterResource("sbercloud:Rds/mysqlBinlog:MysqlBinlog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlBinlog gets an existing MysqlBinlog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlBinlog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlBinlogState, opts ...pulumi.ResourceOption) (*MysqlBinlog, error) {
	var resource MysqlBinlog
	err := ctx.ReadResource("sbercloud:Rds/mysqlBinlog:MysqlBinlog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlBinlog resources.
type mysqlBinlogState struct {
	BinlogRetentionHours *int    `pulumi:"binlogRetentionHours"`
	InstanceId           *string `pulumi:"instanceId"`
	Region               *string `pulumi:"region"`
}

type MysqlBinlogState struct {
	BinlogRetentionHours pulumi.IntPtrInput
	InstanceId           pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
}

func (MysqlBinlogState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlBinlogState)(nil)).Elem()
}

type mysqlBinlogArgs struct {
	BinlogRetentionHours int     `pulumi:"binlogRetentionHours"`
	InstanceId           string  `pulumi:"instanceId"`
	Region               *string `pulumi:"region"`
}

// The set of arguments for constructing a MysqlBinlog resource.
type MysqlBinlogArgs struct {
	BinlogRetentionHours pulumi.IntInput
	InstanceId           pulumi.StringInput
	Region               pulumi.StringPtrInput
}

func (MysqlBinlogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlBinlogArgs)(nil)).Elem()
}

type MysqlBinlogInput interface {
	pulumi.Input

	ToMysqlBinlogOutput() MysqlBinlogOutput
	ToMysqlBinlogOutputWithContext(ctx context.Context) MysqlBinlogOutput
}

func (*MysqlBinlog) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBinlog)(nil)).Elem()
}

func (i *MysqlBinlog) ToMysqlBinlogOutput() MysqlBinlogOutput {
	return i.ToMysqlBinlogOutputWithContext(context.Background())
}

func (i *MysqlBinlog) ToMysqlBinlogOutputWithContext(ctx context.Context) MysqlBinlogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBinlogOutput)
}

// MysqlBinlogArrayInput is an input type that accepts MysqlBinlogArray and MysqlBinlogArrayOutput values.
// You can construct a concrete instance of `MysqlBinlogArrayInput` via:
//
//	MysqlBinlogArray{ MysqlBinlogArgs{...} }
type MysqlBinlogArrayInput interface {
	pulumi.Input

	ToMysqlBinlogArrayOutput() MysqlBinlogArrayOutput
	ToMysqlBinlogArrayOutputWithContext(context.Context) MysqlBinlogArrayOutput
}

type MysqlBinlogArray []MysqlBinlogInput

func (MysqlBinlogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlBinlog)(nil)).Elem()
}

func (i MysqlBinlogArray) ToMysqlBinlogArrayOutput() MysqlBinlogArrayOutput {
	return i.ToMysqlBinlogArrayOutputWithContext(context.Background())
}

func (i MysqlBinlogArray) ToMysqlBinlogArrayOutputWithContext(ctx context.Context) MysqlBinlogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBinlogArrayOutput)
}

// MysqlBinlogMapInput is an input type that accepts MysqlBinlogMap and MysqlBinlogMapOutput values.
// You can construct a concrete instance of `MysqlBinlogMapInput` via:
//
//	MysqlBinlogMap{ "key": MysqlBinlogArgs{...} }
type MysqlBinlogMapInput interface {
	pulumi.Input

	ToMysqlBinlogMapOutput() MysqlBinlogMapOutput
	ToMysqlBinlogMapOutputWithContext(context.Context) MysqlBinlogMapOutput
}

type MysqlBinlogMap map[string]MysqlBinlogInput

func (MysqlBinlogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlBinlog)(nil)).Elem()
}

func (i MysqlBinlogMap) ToMysqlBinlogMapOutput() MysqlBinlogMapOutput {
	return i.ToMysqlBinlogMapOutputWithContext(context.Background())
}

func (i MysqlBinlogMap) ToMysqlBinlogMapOutputWithContext(ctx context.Context) MysqlBinlogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlBinlogMapOutput)
}

type MysqlBinlogOutput struct{ *pulumi.OutputState }

func (MysqlBinlogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlBinlog)(nil)).Elem()
}

func (o MysqlBinlogOutput) ToMysqlBinlogOutput() MysqlBinlogOutput {
	return o
}

func (o MysqlBinlogOutput) ToMysqlBinlogOutputWithContext(ctx context.Context) MysqlBinlogOutput {
	return o
}

func (o MysqlBinlogOutput) BinlogRetentionHours() pulumi.IntOutput {
	return o.ApplyT(func(v *MysqlBinlog) pulumi.IntOutput { return v.BinlogRetentionHours }).(pulumi.IntOutput)
}

func (o MysqlBinlogOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBinlog) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o MysqlBinlogOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlBinlog) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type MysqlBinlogArrayOutput struct{ *pulumi.OutputState }

func (MysqlBinlogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlBinlog)(nil)).Elem()
}

func (o MysqlBinlogArrayOutput) ToMysqlBinlogArrayOutput() MysqlBinlogArrayOutput {
	return o
}

func (o MysqlBinlogArrayOutput) ToMysqlBinlogArrayOutputWithContext(ctx context.Context) MysqlBinlogArrayOutput {
	return o
}

func (o MysqlBinlogArrayOutput) Index(i pulumi.IntInput) MysqlBinlogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlBinlog {
		return vs[0].([]*MysqlBinlog)[vs[1].(int)]
	}).(MysqlBinlogOutput)
}

type MysqlBinlogMapOutput struct{ *pulumi.OutputState }

func (MysqlBinlogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlBinlog)(nil)).Elem()
}

func (o MysqlBinlogMapOutput) ToMysqlBinlogMapOutput() MysqlBinlogMapOutput {
	return o
}

func (o MysqlBinlogMapOutput) ToMysqlBinlogMapOutputWithContext(ctx context.Context) MysqlBinlogMapOutput {
	return o
}

func (o MysqlBinlogMapOutput) MapIndex(k pulumi.StringInput) MysqlBinlogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlBinlog {
		return vs[0].(map[string]*MysqlBinlog)[vs[1].(string)]
	}).(MysqlBinlogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlBinlogInput)(nil)).Elem(), &MysqlBinlog{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlBinlogArrayInput)(nil)).Elem(), MysqlBinlogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlBinlogMapInput)(nil)).Elem(), MysqlBinlogMap{})
	pulumi.RegisterOutputType(MysqlBinlogOutput{})
	pulumi.RegisterOutputType(MysqlBinlogArrayOutput{})
	pulumi.RegisterOutputType(MysqlBinlogMapOutput{})
}

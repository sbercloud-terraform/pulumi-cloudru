// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Tracker extends pulumi.CustomResource {
    /**
     * Get an existing Tracker resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrackerState, opts?: pulumi.CustomResourceOptions): Tracker {
        return new Tracker(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Cts/tracker:Tracker';

    /**
     * Returns true if the given object is an instance of Tracker.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Tracker {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Tracker.__pulumiType;
    }

    declare public /*out*/ readonly agencyName: pulumi.Output<string>;
    declare public readonly bucketName: pulumi.Output<string | undefined>;
    declare public readonly compressType: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly createTime: pulumi.Output<number>;
    declare public readonly deleteTracker: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly detail: pulumi.Output<string>;
    declare public /*out*/ readonly domainId: pulumi.Output<string>;
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    declare public readonly excludeServices: pulumi.Output<string[] | undefined>;
    declare public readonly filePrefix: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly groupId: pulumi.Output<string>;
    declare public /*out*/ readonly isAuthorizedBucket: pulumi.Output<boolean>;
    declare public readonly isSortByService: pulumi.Output<boolean | undefined>;
    declare public readonly kmsId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly logGroupName: pulumi.Output<string>;
    declare public /*out*/ readonly logTopicName: pulumi.Output<string>;
    declare public readonly ltsEnabled: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly name: pulumi.Output<string>;
    declare public readonly organizationEnabled: pulumi.Output<boolean>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public /*out*/ readonly streamId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly transferEnabled: pulumi.Output<boolean>;
    declare public /*out*/ readonly type: pulumi.Output<string>;
    declare public readonly validateFile: pulumi.Output<boolean | undefined>;

    /**
     * Create a Tracker resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TrackerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrackerArgs | TrackerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrackerState | undefined;
            resourceInputs["agencyName"] = state?.agencyName;
            resourceInputs["bucketName"] = state?.bucketName;
            resourceInputs["compressType"] = state?.compressType;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["deleteTracker"] = state?.deleteTracker;
            resourceInputs["detail"] = state?.detail;
            resourceInputs["domainId"] = state?.domainId;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["excludeServices"] = state?.excludeServices;
            resourceInputs["filePrefix"] = state?.filePrefix;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["isAuthorizedBucket"] = state?.isAuthorizedBucket;
            resourceInputs["isSortByService"] = state?.isSortByService;
            resourceInputs["kmsId"] = state?.kmsId;
            resourceInputs["logGroupName"] = state?.logGroupName;
            resourceInputs["logTopicName"] = state?.logTopicName;
            resourceInputs["ltsEnabled"] = state?.ltsEnabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["organizationEnabled"] = state?.organizationEnabled;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["streamId"] = state?.streamId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["transferEnabled"] = state?.transferEnabled;
            resourceInputs["type"] = state?.type;
            resourceInputs["validateFile"] = state?.validateFile;
        } else {
            const args = argsOrState as TrackerArgs | undefined;
            resourceInputs["bucketName"] = args?.bucketName;
            resourceInputs["compressType"] = args?.compressType;
            resourceInputs["deleteTracker"] = args?.deleteTracker;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["excludeServices"] = args?.excludeServices;
            resourceInputs["filePrefix"] = args?.filePrefix;
            resourceInputs["isSortByService"] = args?.isSortByService;
            resourceInputs["kmsId"] = args?.kmsId;
            resourceInputs["ltsEnabled"] = args?.ltsEnabled;
            resourceInputs["organizationEnabled"] = args?.organizationEnabled;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["validateFile"] = args?.validateFile;
            resourceInputs["agencyName"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["detail"] = undefined /*out*/;
            resourceInputs["domainId"] = undefined /*out*/;
            resourceInputs["groupId"] = undefined /*out*/;
            resourceInputs["isAuthorizedBucket"] = undefined /*out*/;
            resourceInputs["logGroupName"] = undefined /*out*/;
            resourceInputs["logTopicName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["streamId"] = undefined /*out*/;
            resourceInputs["transferEnabled"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Tracker.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Tracker resources.
 */
export interface TrackerState {
    agencyName?: pulumi.Input<string>;
    bucketName?: pulumi.Input<string>;
    compressType?: pulumi.Input<string>;
    createTime?: pulumi.Input<number>;
    deleteTracker?: pulumi.Input<boolean>;
    detail?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    excludeServices?: pulumi.Input<pulumi.Input<string>[]>;
    filePrefix?: pulumi.Input<string>;
    groupId?: pulumi.Input<string>;
    isAuthorizedBucket?: pulumi.Input<boolean>;
    isSortByService?: pulumi.Input<boolean>;
    kmsId?: pulumi.Input<string>;
    logGroupName?: pulumi.Input<string>;
    logTopicName?: pulumi.Input<string>;
    ltsEnabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    organizationEnabled?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    streamId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    transferEnabled?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    validateFile?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Tracker resource.
 */
export interface TrackerArgs {
    bucketName?: pulumi.Input<string>;
    compressType?: pulumi.Input<string>;
    deleteTracker?: pulumi.Input<boolean>;
    enabled?: pulumi.Input<boolean>;
    excludeServices?: pulumi.Input<pulumi.Input<string>[]>;
    filePrefix?: pulumi.Input<string>;
    isSortByService?: pulumi.Input<boolean>;
    kmsId?: pulumi.Input<string>;
    ltsEnabled?: pulumi.Input<boolean>;
    organizationEnabled?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    validateFile?: pulumi.Input<boolean>;
}

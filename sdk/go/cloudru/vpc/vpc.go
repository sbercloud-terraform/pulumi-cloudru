// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Vpc struct {
	pulumi.CustomResourceState

	BlockServiceEndpointStates pulumi.StringPtrOutput `pulumi:"blockServiceEndpointStates"`
	Cidr                       pulumi.StringOutput    `pulumi:"cidr"`
	Description                pulumi.StringPtrOutput `pulumi:"description"`
	EnhancedLocalRoute         pulumi.StringOutput    `pulumi:"enhancedLocalRoute"`
	EnterpriseProjectId        pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	Name                       pulumi.StringOutput    `pulumi:"name"`
	Region                     pulumi.StringOutput    `pulumi:"region"`
	// Deprecated: use huaweicloudVpcRouteTable data source to get all routes
	Routes VpcRouteArrayOutput `pulumi:"routes"`
	// schema: Deprecated; use secondaryCidrs instead
	SecondaryCidr  pulumi.StringPtrOutput   `pulumi:"secondaryCidr"`
	SecondaryCidrs pulumi.StringArrayOutput `pulumi:"secondaryCidrs"`
	Status         pulumi.StringOutput      `pulumi:"status"`
	Tags           pulumi.StringMapOutput   `pulumi:"tags"`
}

// NewVpc registers a new resource with the given unique name, arguments, and options.
func NewVpc(ctx *pulumi.Context,
	name string, args *VpcArgs, opts ...pulumi.ResourceOption) (*Vpc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vpc
	err := ctx.RegisterResource("cloudru:Vpc/vpc:Vpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpc gets an existing Vpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcState, opts ...pulumi.ResourceOption) (*Vpc, error) {
	var resource Vpc
	err := ctx.ReadResource("cloudru:Vpc/vpc:Vpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpc resources.
type vpcState struct {
	BlockServiceEndpointStates *string `pulumi:"blockServiceEndpointStates"`
	Cidr                       *string `pulumi:"cidr"`
	Description                *string `pulumi:"description"`
	EnhancedLocalRoute         *string `pulumi:"enhancedLocalRoute"`
	EnterpriseProjectId        *string `pulumi:"enterpriseProjectId"`
	Name                       *string `pulumi:"name"`
	Region                     *string `pulumi:"region"`
	// Deprecated: use huaweicloudVpcRouteTable data source to get all routes
	Routes []VpcRoute `pulumi:"routes"`
	// schema: Deprecated; use secondaryCidrs instead
	SecondaryCidr  *string           `pulumi:"secondaryCidr"`
	SecondaryCidrs []string          `pulumi:"secondaryCidrs"`
	Status         *string           `pulumi:"status"`
	Tags           map[string]string `pulumi:"tags"`
}

type VpcState struct {
	BlockServiceEndpointStates pulumi.StringPtrInput
	Cidr                       pulumi.StringPtrInput
	Description                pulumi.StringPtrInput
	EnhancedLocalRoute         pulumi.StringPtrInput
	EnterpriseProjectId        pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	Region                     pulumi.StringPtrInput
	// Deprecated: use huaweicloudVpcRouteTable data source to get all routes
	Routes VpcRouteArrayInput
	// schema: Deprecated; use secondaryCidrs instead
	SecondaryCidr  pulumi.StringPtrInput
	SecondaryCidrs pulumi.StringArrayInput
	Status         pulumi.StringPtrInput
	Tags           pulumi.StringMapInput
}

func (VpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	BlockServiceEndpointStates *string `pulumi:"blockServiceEndpointStates"`
	Cidr                       string  `pulumi:"cidr"`
	Description                *string `pulumi:"description"`
	EnhancedLocalRoute         *string `pulumi:"enhancedLocalRoute"`
	EnterpriseProjectId        *string `pulumi:"enterpriseProjectId"`
	Name                       *string `pulumi:"name"`
	Region                     *string `pulumi:"region"`
	// schema: Deprecated; use secondaryCidrs instead
	SecondaryCidr  *string           `pulumi:"secondaryCidr"`
	SecondaryCidrs []string          `pulumi:"secondaryCidrs"`
	Tags           map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Vpc resource.
type VpcArgs struct {
	BlockServiceEndpointStates pulumi.StringPtrInput
	Cidr                       pulumi.StringInput
	Description                pulumi.StringPtrInput
	EnhancedLocalRoute         pulumi.StringPtrInput
	EnterpriseProjectId        pulumi.StringPtrInput
	Name                       pulumi.StringPtrInput
	Region                     pulumi.StringPtrInput
	// schema: Deprecated; use secondaryCidrs instead
	SecondaryCidr  pulumi.StringPtrInput
	SecondaryCidrs pulumi.StringArrayInput
	Tags           pulumi.StringMapInput
}

func (VpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VpcInput interface {
	pulumi.Input

	ToVpcOutput() VpcOutput
	ToVpcOutputWithContext(ctx context.Context) VpcOutput
}

func (*Vpc) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (i *Vpc) ToVpcOutput() VpcOutput {
	return i.ToVpcOutputWithContext(context.Background())
}

func (i *Vpc) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcOutput)
}

// VpcArrayInput is an input type that accepts VpcArray and VpcArrayOutput values.
// You can construct a concrete instance of `VpcArrayInput` via:
//
//	VpcArray{ VpcArgs{...} }
type VpcArrayInput interface {
	pulumi.Input

	ToVpcArrayOutput() VpcArrayOutput
	ToVpcArrayOutputWithContext(context.Context) VpcArrayOutput
}

type VpcArray []VpcInput

func (VpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (i VpcArray) ToVpcArrayOutput() VpcArrayOutput {
	return i.ToVpcArrayOutputWithContext(context.Background())
}

func (i VpcArray) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcArrayOutput)
}

// VpcMapInput is an input type that accepts VpcMap and VpcMapOutput values.
// You can construct a concrete instance of `VpcMapInput` via:
//
//	VpcMap{ "key": VpcArgs{...} }
type VpcMapInput interface {
	pulumi.Input

	ToVpcMapOutput() VpcMapOutput
	ToVpcMapOutputWithContext(context.Context) VpcMapOutput
}

type VpcMap map[string]VpcInput

func (VpcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (i VpcMap) ToVpcMapOutput() VpcMapOutput {
	return i.ToVpcMapOutputWithContext(context.Background())
}

func (i VpcMap) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcMapOutput)
}

type VpcOutput struct{ *pulumi.OutputState }

func (VpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (o VpcOutput) ToVpcOutput() VpcOutput {
	return o
}

func (o VpcOutput) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return o
}

func (o VpcOutput) BlockServiceEndpointStates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.BlockServiceEndpointStates }).(pulumi.StringPtrOutput)
}

func (o VpcOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

func (o VpcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VpcOutput) EnhancedLocalRoute() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.EnhancedLocalRoute }).(pulumi.StringOutput)
}

func (o VpcOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o VpcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: use huaweicloudVpcRouteTable data source to get all routes
func (o VpcOutput) Routes() VpcRouteArrayOutput {
	return o.ApplyT(func(v *Vpc) VpcRouteArrayOutput { return v.Routes }).(VpcRouteArrayOutput)
}

// schema: Deprecated; use secondaryCidrs instead
func (o VpcOutput) SecondaryCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.SecondaryCidr }).(pulumi.StringPtrOutput)
}

func (o VpcOutput) SecondaryCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.SecondaryCidrs }).(pulumi.StringArrayOutput)
}

func (o VpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VpcOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type VpcArrayOutput struct{ *pulumi.OutputState }

func (VpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (o VpcArrayOutput) ToVpcArrayOutput() VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) Index(i pulumi.IntInput) VpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].([]*Vpc)[vs[1].(int)]
	}).(VpcOutput)
}

type VpcMapOutput struct{ *pulumi.OutputState }

func (VpcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (o VpcMapOutput) ToVpcMapOutput() VpcMapOutput {
	return o
}

func (o VpcMapOutput) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return o
}

func (o VpcMapOutput) MapIndex(k pulumi.StringInput) VpcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].(map[string]*Vpc)[vs[1].(string)]
	}).(VpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInput)(nil)).Elem(), &Vpc{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcArrayInput)(nil)).Elem(), VpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcMapInput)(nil)).Elem(), VpcMap{})
	pulumi.RegisterOutputType(VpcOutput{})
	pulumi.RegisterOutputType(VpcArrayOutput{})
	pulumi.RegisterOutputType(VpcMapOutput{})
}

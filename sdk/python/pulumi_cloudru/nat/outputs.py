# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GatewaySessionConf',
]

@pulumi.output_type
class GatewaySessionConf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "icmpSessionExpireTime":
            suggest = "icmp_session_expire_time"
        elif key == "tcpSessionExpireTime":
            suggest = "tcp_session_expire_time"
        elif key == "tcpTimeWaitTime":
            suggest = "tcp_time_wait_time"
        elif key == "udpSessionExpireTime":
            suggest = "udp_session_expire_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GatewaySessionConf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GatewaySessionConf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GatewaySessionConf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 icmp_session_expire_time: Optional[_builtins.int] = None,
                 tcp_session_expire_time: Optional[_builtins.int] = None,
                 tcp_time_wait_time: Optional[_builtins.int] = None,
                 udp_session_expire_time: Optional[_builtins.int] = None):
        """
        :param _builtins.int icmp_session_expire_time: The ICMP session expiration time.
        :param _builtins.int tcp_session_expire_time: The TCP session expiration time.
        :param _builtins.int tcp_time_wait_time: The duration of TIME_WAIT state when TCP connection is closed.
        :param _builtins.int udp_session_expire_time: The UDP session expiration time.
        """
        if icmp_session_expire_time is not None:
            pulumi.set(__self__, "icmp_session_expire_time", icmp_session_expire_time)
        if tcp_session_expire_time is not None:
            pulumi.set(__self__, "tcp_session_expire_time", tcp_session_expire_time)
        if tcp_time_wait_time is not None:
            pulumi.set(__self__, "tcp_time_wait_time", tcp_time_wait_time)
        if udp_session_expire_time is not None:
            pulumi.set(__self__, "udp_session_expire_time", udp_session_expire_time)

    @_builtins.property
    @pulumi.getter(name="icmpSessionExpireTime")
    def icmp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        The ICMP session expiration time.
        """
        return pulumi.get(self, "icmp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpSessionExpireTime")
    def tcp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        The TCP session expiration time.
        """
        return pulumi.get(self, "tcp_session_expire_time")

    @_builtins.property
    @pulumi.getter(name="tcpTimeWaitTime")
    def tcp_time_wait_time(self) -> Optional[_builtins.int]:
        """
        The duration of TIME_WAIT state when TCP connection is closed.
        """
        return pulumi.get(self, "tcp_time_wait_time")

    @_builtins.property
    @pulumi.getter(name="udpSessionExpireTime")
    def udp_session_expire_time(self) -> Optional[_builtins.int]:
        """
        The UDP session expiration time.
        """
        return pulumi.get(self, "udp_session_expire_time")



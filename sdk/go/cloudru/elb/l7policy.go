// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type L7policy struct {
	pulumi.CustomResourceState

	Action             pulumi.StringOutput    `pulumi:"action"`
	AdminStateUp       pulumi.BoolPtrOutput   `pulumi:"adminStateUp"`
	Description        pulumi.StringPtrOutput `pulumi:"description"`
	ListenerId         pulumi.StringOutput    `pulumi:"listenerId"`
	Name               pulumi.StringOutput    `pulumi:"name"`
	Position           pulumi.IntOutput       `pulumi:"position"`
	RedirectListenerId pulumi.StringPtrOutput `pulumi:"redirectListenerId"`
	RedirectPoolId     pulumi.StringPtrOutput `pulumi:"redirectPoolId"`
	Region             pulumi.StringOutput    `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewL7policy registers a new resource with the given unique name, arguments, and options.
func NewL7policy(ctx *pulumi.Context,
	name string, args *L7policyArgs, opts ...pulumi.ResourceOption) (*L7policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource L7policy
	err := ctx.RegisterResource("cloudru:Elb/l7policy:L7policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetL7policy gets an existing L7policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetL7policy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *L7policyState, opts ...pulumi.ResourceOption) (*L7policy, error) {
	var resource L7policy
	err := ctx.ReadResource("cloudru:Elb/l7policy:L7policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering L7policy resources.
type l7policyState struct {
	Action             *string `pulumi:"action"`
	AdminStateUp       *bool   `pulumi:"adminStateUp"`
	Description        *string `pulumi:"description"`
	ListenerId         *string `pulumi:"listenerId"`
	Name               *string `pulumi:"name"`
	Position           *int    `pulumi:"position"`
	RedirectListenerId *string `pulumi:"redirectListenerId"`
	RedirectPoolId     *string `pulumi:"redirectPoolId"`
	Region             *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
}

type L7policyState struct {
	Action             pulumi.StringPtrInput
	AdminStateUp       pulumi.BoolPtrInput
	Description        pulumi.StringPtrInput
	ListenerId         pulumi.StringPtrInput
	Name               pulumi.StringPtrInput
	Position           pulumi.IntPtrInput
	RedirectListenerId pulumi.StringPtrInput
	RedirectPoolId     pulumi.StringPtrInput
	Region             pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
}

func (L7policyState) ElementType() reflect.Type {
	return reflect.TypeOf((*l7policyState)(nil)).Elem()
}

type l7policyArgs struct {
	Action             string  `pulumi:"action"`
	AdminStateUp       *bool   `pulumi:"adminStateUp"`
	Description        *string `pulumi:"description"`
	ListenerId         string  `pulumi:"listenerId"`
	Name               *string `pulumi:"name"`
	Position           *int    `pulumi:"position"`
	RedirectListenerId *string `pulumi:"redirectListenerId"`
	RedirectPoolId     *string `pulumi:"redirectPoolId"`
	Region             *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a L7policy resource.
type L7policyArgs struct {
	Action             pulumi.StringInput
	AdminStateUp       pulumi.BoolPtrInput
	Description        pulumi.StringPtrInput
	ListenerId         pulumi.StringInput
	Name               pulumi.StringPtrInput
	Position           pulumi.IntPtrInput
	RedirectListenerId pulumi.StringPtrInput
	RedirectPoolId     pulumi.StringPtrInput
	Region             pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
}

func (L7policyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*l7policyArgs)(nil)).Elem()
}

type L7policyInput interface {
	pulumi.Input

	ToL7policyOutput() L7policyOutput
	ToL7policyOutputWithContext(ctx context.Context) L7policyOutput
}

func (*L7policy) ElementType() reflect.Type {
	return reflect.TypeOf((**L7policy)(nil)).Elem()
}

func (i *L7policy) ToL7policyOutput() L7policyOutput {
	return i.ToL7policyOutputWithContext(context.Background())
}

func (i *L7policy) ToL7policyOutputWithContext(ctx context.Context) L7policyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyOutput)
}

// L7policyArrayInput is an input type that accepts L7policyArray and L7policyArrayOutput values.
// You can construct a concrete instance of `L7policyArrayInput` via:
//
//	L7policyArray{ L7policyArgs{...} }
type L7policyArrayInput interface {
	pulumi.Input

	ToL7policyArrayOutput() L7policyArrayOutput
	ToL7policyArrayOutputWithContext(context.Context) L7policyArrayOutput
}

type L7policyArray []L7policyInput

func (L7policyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L7policy)(nil)).Elem()
}

func (i L7policyArray) ToL7policyArrayOutput() L7policyArrayOutput {
	return i.ToL7policyArrayOutputWithContext(context.Background())
}

func (i L7policyArray) ToL7policyArrayOutputWithContext(ctx context.Context) L7policyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyArrayOutput)
}

// L7policyMapInput is an input type that accepts L7policyMap and L7policyMapOutput values.
// You can construct a concrete instance of `L7policyMapInput` via:
//
//	L7policyMap{ "key": L7policyArgs{...} }
type L7policyMapInput interface {
	pulumi.Input

	ToL7policyMapOutput() L7policyMapOutput
	ToL7policyMapOutputWithContext(context.Context) L7policyMapOutput
}

type L7policyMap map[string]L7policyInput

func (L7policyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L7policy)(nil)).Elem()
}

func (i L7policyMap) ToL7policyMapOutput() L7policyMapOutput {
	return i.ToL7policyMapOutputWithContext(context.Background())
}

func (i L7policyMap) ToL7policyMapOutputWithContext(ctx context.Context) L7policyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyMapOutput)
}

type L7policyOutput struct{ *pulumi.OutputState }

func (L7policyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L7policy)(nil)).Elem()
}

func (o L7policyOutput) ToL7policyOutput() L7policyOutput {
	return o
}

func (o L7policyOutput) ToL7policyOutputWithContext(ctx context.Context) L7policyOutput {
	return o
}

func (o L7policyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o L7policyOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o L7policyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o L7policyOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

func (o L7policyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o L7policyOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *L7policy) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

func (o L7policyOutput) RedirectListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringPtrOutput { return v.RedirectListenerId }).(pulumi.StringPtrOutput)
}

func (o L7policyOutput) RedirectPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringPtrOutput { return v.RedirectPoolId }).(pulumi.StringPtrOutput)
}

func (o L7policyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o L7policyOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type L7policyArrayOutput struct{ *pulumi.OutputState }

func (L7policyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L7policy)(nil)).Elem()
}

func (o L7policyArrayOutput) ToL7policyArrayOutput() L7policyArrayOutput {
	return o
}

func (o L7policyArrayOutput) ToL7policyArrayOutputWithContext(ctx context.Context) L7policyArrayOutput {
	return o
}

func (o L7policyArrayOutput) Index(i pulumi.IntInput) L7policyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *L7policy {
		return vs[0].([]*L7policy)[vs[1].(int)]
	}).(L7policyOutput)
}

type L7policyMapOutput struct{ *pulumi.OutputState }

func (L7policyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L7policy)(nil)).Elem()
}

func (o L7policyMapOutput) ToL7policyMapOutput() L7policyMapOutput {
	return o
}

func (o L7policyMapOutput) ToL7policyMapOutputWithContext(ctx context.Context) L7policyMapOutput {
	return o
}

func (o L7policyMapOutput) MapIndex(k pulumi.StringInput) L7policyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *L7policy {
		return vs[0].(map[string]*L7policy)[vs[1].(string)]
	}).(L7policyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyInput)(nil)).Elem(), &L7policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyArrayInput)(nil)).Elem(), L7policyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyMapInput)(nil)).Elem(), L7policyMap{})
	pulumi.RegisterOutputType(L7policyOutput{})
	pulumi.RegisterOutputType(L7policyArrayOutput{})
	pulumi.RegisterOutputType(L7policyMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkacl

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Acl struct {
	pulumi.CustomResourceState

	Description      pulumi.StringPtrOutput   `pulumi:"description"`
	InboundPolicyId  pulumi.StringOutput      `pulumi:"inboundPolicyId"`
	InboundRules     pulumi.StringArrayOutput `pulumi:"inboundRules"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	OutboundPolicyId pulumi.StringOutput      `pulumi:"outboundPolicyId"`
	OutboundRules    pulumi.StringArrayOutput `pulumi:"outboundRules"`
	Ports            pulumi.StringArrayOutput `pulumi:"ports"`
	Region           pulumi.StringOutput      `pulumi:"region"`
	Status           pulumi.StringOutput      `pulumi:"status"`
	Subnets          pulumi.StringArrayOutput `pulumi:"subnets"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		args = &AclArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("sbercloud:NetworkAcl/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("sbercloud:NetworkAcl/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	Description      *string  `pulumi:"description"`
	InboundPolicyId  *string  `pulumi:"inboundPolicyId"`
	InboundRules     []string `pulumi:"inboundRules"`
	Name             *string  `pulumi:"name"`
	OutboundPolicyId *string  `pulumi:"outboundPolicyId"`
	OutboundRules    []string `pulumi:"outboundRules"`
	Ports            []string `pulumi:"ports"`
	Region           *string  `pulumi:"region"`
	Status           *string  `pulumi:"status"`
	Subnets          []string `pulumi:"subnets"`
}

type AclState struct {
	Description      pulumi.StringPtrInput
	InboundPolicyId  pulumi.StringPtrInput
	InboundRules     pulumi.StringArrayInput
	Name             pulumi.StringPtrInput
	OutboundPolicyId pulumi.StringPtrInput
	OutboundRules    pulumi.StringArrayInput
	Ports            pulumi.StringArrayInput
	Region           pulumi.StringPtrInput
	Status           pulumi.StringPtrInput
	Subnets          pulumi.StringArrayInput
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	Description   *string  `pulumi:"description"`
	InboundRules  []string `pulumi:"inboundRules"`
	Name          *string  `pulumi:"name"`
	OutboundRules []string `pulumi:"outboundRules"`
	Region        *string  `pulumi:"region"`
	Subnets       []string `pulumi:"subnets"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	Description   pulumi.StringPtrInput
	InboundRules  pulumi.StringArrayInput
	Name          pulumi.StringPtrInput
	OutboundRules pulumi.StringArrayInput
	Region        pulumi.StringPtrInput
	Subnets       pulumi.StringArrayInput
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(ctx context.Context) AclOutput
}

func (*Acl) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (i *Acl) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i *Acl) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//	AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

// AclMapInput is an input type that accepts AclMap and AclMapOutput values.
// You can construct a concrete instance of `AclMapInput` via:
//
//	AclMap{ "key": AclArgs{...} }
type AclMapInput interface {
	pulumi.Input

	ToAclMapOutput() AclMapOutput
	ToAclMapOutputWithContext(context.Context) AclMapOutput
}

type AclMap map[string]AclInput

func (AclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (i AclMap) ToAclMapOutput() AclMapOutput {
	return i.ToAclMapOutputWithContext(context.Background())
}

func (i AclMap) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMapOutput)
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

func (o AclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AclOutput) InboundPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.InboundPolicyId }).(pulumi.StringOutput)
}

func (o AclOutput) InboundRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.InboundRules }).(pulumi.StringArrayOutput)
}

func (o AclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AclOutput) OutboundPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.OutboundPolicyId }).(pulumi.StringOutput)
}

func (o AclOutput) OutboundRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.OutboundRules }).(pulumi.StringArrayOutput)
}

func (o AclOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.Ports }).(pulumi.StringArrayOutput)
}

func (o AclOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AclOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o AclOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].([]*Acl)[vs[1].(int)]
	}).(AclOutput)
}

type AclMapOutput struct{ *pulumi.OutputState }

func (AclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (o AclMapOutput) ToAclMapOutput() AclMapOutput {
	return o
}

func (o AclMapOutput) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return o
}

func (o AclMapOutput) MapIndex(k pulumi.StringInput) AclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].(map[string]*Acl)[vs[1].(string)]
	}).(AclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclInput)(nil)).Elem(), &Acl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclArrayInput)(nil)).Elem(), AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMapInput)(nil)).Elem(), AclMap{})
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclMapOutput{})
}

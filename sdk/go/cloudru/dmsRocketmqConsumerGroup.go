// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DmsRocketmqConsumerGroup struct {
	pulumi.CustomResourceState

	// Specifies whether to broadcast of the consumer group.
	Broadcast pulumi.BoolOutput `pulumi:"broadcast"`
	// Specifies the list of associated brokers of the consumer group.
	Brokers pulumi.StringArrayOutput `pulumi:"brokers"`
	// Specifies whether to consume orderly.
	ConsumeOrderly pulumi.BoolOutput `pulumi:"consumeOrderly"`
	// Specifies the description of the consumer group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the consumer group is enabled or not. Default to true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the ID of the rocketMQ instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the name of the consumer group.
	Name   pulumi.StringOutput `pulumi:"name"`
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the maximum number of retry times.
	RetryMaxTimes pulumi.IntOutput `pulumi:"retryMaxTimes"`
}

// NewDmsRocketmqConsumerGroup registers a new resource with the given unique name, arguments, and options.
func NewDmsRocketmqConsumerGroup(ctx *pulumi.Context,
	name string, args *DmsRocketmqConsumerGroupArgs, opts ...pulumi.ResourceOption) (*DmsRocketmqConsumerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RetryMaxTimes == nil {
		return nil, errors.New("invalid value for required argument 'RetryMaxTimes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsRocketmqConsumerGroup
	err := ctx.RegisterResource("cloudru:index/dmsRocketmqConsumerGroup:DmsRocketmqConsumerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsRocketmqConsumerGroup gets an existing DmsRocketmqConsumerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsRocketmqConsumerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsRocketmqConsumerGroupState, opts ...pulumi.ResourceOption) (*DmsRocketmqConsumerGroup, error) {
	var resource DmsRocketmqConsumerGroup
	err := ctx.ReadResource("cloudru:index/dmsRocketmqConsumerGroup:DmsRocketmqConsumerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsRocketmqConsumerGroup resources.
type dmsRocketmqConsumerGroupState struct {
	// Specifies whether to broadcast of the consumer group.
	Broadcast *bool `pulumi:"broadcast"`
	// Specifies the list of associated brokers of the consumer group.
	Brokers []string `pulumi:"brokers"`
	// Specifies whether to consume orderly.
	ConsumeOrderly *bool `pulumi:"consumeOrderly"`
	// Specifies the description of the consumer group.
	Description *string `pulumi:"description"`
	// Specifies the consumer group is enabled or not. Default to true.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the ID of the rocketMQ instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the name of the consumer group.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// Specifies the maximum number of retry times.
	RetryMaxTimes *int `pulumi:"retryMaxTimes"`
}

type DmsRocketmqConsumerGroupState struct {
	// Specifies whether to broadcast of the consumer group.
	Broadcast pulumi.BoolPtrInput
	// Specifies the list of associated brokers of the consumer group.
	Brokers pulumi.StringArrayInput
	// Specifies whether to consume orderly.
	ConsumeOrderly pulumi.BoolPtrInput
	// Specifies the description of the consumer group.
	Description pulumi.StringPtrInput
	// Specifies the consumer group is enabled or not. Default to true.
	Enabled pulumi.BoolPtrInput
	// Specifies the ID of the rocketMQ instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the name of the consumer group.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the maximum number of retry times.
	RetryMaxTimes pulumi.IntPtrInput
}

func (DmsRocketmqConsumerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsRocketmqConsumerGroupState)(nil)).Elem()
}

type dmsRocketmqConsumerGroupArgs struct {
	// Specifies whether to broadcast of the consumer group.
	Broadcast *bool `pulumi:"broadcast"`
	// Specifies the list of associated brokers of the consumer group.
	Brokers []string `pulumi:"brokers"`
	// Specifies whether to consume orderly.
	ConsumeOrderly *bool `pulumi:"consumeOrderly"`
	// Specifies the description of the consumer group.
	Description *string `pulumi:"description"`
	// Specifies the consumer group is enabled or not. Default to true.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the ID of the rocketMQ instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the name of the consumer group.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// Specifies the maximum number of retry times.
	RetryMaxTimes int `pulumi:"retryMaxTimes"`
}

// The set of arguments for constructing a DmsRocketmqConsumerGroup resource.
type DmsRocketmqConsumerGroupArgs struct {
	// Specifies whether to broadcast of the consumer group.
	Broadcast pulumi.BoolPtrInput
	// Specifies the list of associated brokers of the consumer group.
	Brokers pulumi.StringArrayInput
	// Specifies whether to consume orderly.
	ConsumeOrderly pulumi.BoolPtrInput
	// Specifies the description of the consumer group.
	Description pulumi.StringPtrInput
	// Specifies the consumer group is enabled or not. Default to true.
	Enabled pulumi.BoolPtrInput
	// Specifies the ID of the rocketMQ instance.
	InstanceId pulumi.StringInput
	// Specifies the name of the consumer group.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the maximum number of retry times.
	RetryMaxTimes pulumi.IntInput
}

func (DmsRocketmqConsumerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsRocketmqConsumerGroupArgs)(nil)).Elem()
}

type DmsRocketmqConsumerGroupInput interface {
	pulumi.Input

	ToDmsRocketmqConsumerGroupOutput() DmsRocketmqConsumerGroupOutput
	ToDmsRocketmqConsumerGroupOutputWithContext(ctx context.Context) DmsRocketmqConsumerGroupOutput
}

func (*DmsRocketmqConsumerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsRocketmqConsumerGroup)(nil)).Elem()
}

func (i *DmsRocketmqConsumerGroup) ToDmsRocketmqConsumerGroupOutput() DmsRocketmqConsumerGroupOutput {
	return i.ToDmsRocketmqConsumerGroupOutputWithContext(context.Background())
}

func (i *DmsRocketmqConsumerGroup) ToDmsRocketmqConsumerGroupOutputWithContext(ctx context.Context) DmsRocketmqConsumerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqConsumerGroupOutput)
}

// DmsRocketmqConsumerGroupArrayInput is an input type that accepts DmsRocketmqConsumerGroupArray and DmsRocketmqConsumerGroupArrayOutput values.
// You can construct a concrete instance of `DmsRocketmqConsumerGroupArrayInput` via:
//
//	DmsRocketmqConsumerGroupArray{ DmsRocketmqConsumerGroupArgs{...} }
type DmsRocketmqConsumerGroupArrayInput interface {
	pulumi.Input

	ToDmsRocketmqConsumerGroupArrayOutput() DmsRocketmqConsumerGroupArrayOutput
	ToDmsRocketmqConsumerGroupArrayOutputWithContext(context.Context) DmsRocketmqConsumerGroupArrayOutput
}

type DmsRocketmqConsumerGroupArray []DmsRocketmqConsumerGroupInput

func (DmsRocketmqConsumerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsRocketmqConsumerGroup)(nil)).Elem()
}

func (i DmsRocketmqConsumerGroupArray) ToDmsRocketmqConsumerGroupArrayOutput() DmsRocketmqConsumerGroupArrayOutput {
	return i.ToDmsRocketmqConsumerGroupArrayOutputWithContext(context.Background())
}

func (i DmsRocketmqConsumerGroupArray) ToDmsRocketmqConsumerGroupArrayOutputWithContext(ctx context.Context) DmsRocketmqConsumerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqConsumerGroupArrayOutput)
}

// DmsRocketmqConsumerGroupMapInput is an input type that accepts DmsRocketmqConsumerGroupMap and DmsRocketmqConsumerGroupMapOutput values.
// You can construct a concrete instance of `DmsRocketmqConsumerGroupMapInput` via:
//
//	DmsRocketmqConsumerGroupMap{ "key": DmsRocketmqConsumerGroupArgs{...} }
type DmsRocketmqConsumerGroupMapInput interface {
	pulumi.Input

	ToDmsRocketmqConsumerGroupMapOutput() DmsRocketmqConsumerGroupMapOutput
	ToDmsRocketmqConsumerGroupMapOutputWithContext(context.Context) DmsRocketmqConsumerGroupMapOutput
}

type DmsRocketmqConsumerGroupMap map[string]DmsRocketmqConsumerGroupInput

func (DmsRocketmqConsumerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsRocketmqConsumerGroup)(nil)).Elem()
}

func (i DmsRocketmqConsumerGroupMap) ToDmsRocketmqConsumerGroupMapOutput() DmsRocketmqConsumerGroupMapOutput {
	return i.ToDmsRocketmqConsumerGroupMapOutputWithContext(context.Background())
}

func (i DmsRocketmqConsumerGroupMap) ToDmsRocketmqConsumerGroupMapOutputWithContext(ctx context.Context) DmsRocketmqConsumerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsRocketmqConsumerGroupMapOutput)
}

type DmsRocketmqConsumerGroupOutput struct{ *pulumi.OutputState }

func (DmsRocketmqConsumerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsRocketmqConsumerGroup)(nil)).Elem()
}

func (o DmsRocketmqConsumerGroupOutput) ToDmsRocketmqConsumerGroupOutput() DmsRocketmqConsumerGroupOutput {
	return o
}

func (o DmsRocketmqConsumerGroupOutput) ToDmsRocketmqConsumerGroupOutputWithContext(ctx context.Context) DmsRocketmqConsumerGroupOutput {
	return o
}

// Specifies whether to broadcast of the consumer group.
func (o DmsRocketmqConsumerGroupOutput) Broadcast() pulumi.BoolOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.BoolOutput { return v.Broadcast }).(pulumi.BoolOutput)
}

// Specifies the list of associated brokers of the consumer group.
func (o DmsRocketmqConsumerGroupOutput) Brokers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.StringArrayOutput { return v.Brokers }).(pulumi.StringArrayOutput)
}

// Specifies whether to consume orderly.
func (o DmsRocketmqConsumerGroupOutput) ConsumeOrderly() pulumi.BoolOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.BoolOutput { return v.ConsumeOrderly }).(pulumi.BoolOutput)
}

// Specifies the description of the consumer group.
func (o DmsRocketmqConsumerGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the consumer group is enabled or not. Default to true.
func (o DmsRocketmqConsumerGroupOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of the rocketMQ instance.
func (o DmsRocketmqConsumerGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the name of the consumer group.
func (o DmsRocketmqConsumerGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DmsRocketmqConsumerGroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the maximum number of retry times.
func (o DmsRocketmqConsumerGroupOutput) RetryMaxTimes() pulumi.IntOutput {
	return o.ApplyT(func(v *DmsRocketmqConsumerGroup) pulumi.IntOutput { return v.RetryMaxTimes }).(pulumi.IntOutput)
}

type DmsRocketmqConsumerGroupArrayOutput struct{ *pulumi.OutputState }

func (DmsRocketmqConsumerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsRocketmqConsumerGroup)(nil)).Elem()
}

func (o DmsRocketmqConsumerGroupArrayOutput) ToDmsRocketmqConsumerGroupArrayOutput() DmsRocketmqConsumerGroupArrayOutput {
	return o
}

func (o DmsRocketmqConsumerGroupArrayOutput) ToDmsRocketmqConsumerGroupArrayOutputWithContext(ctx context.Context) DmsRocketmqConsumerGroupArrayOutput {
	return o
}

func (o DmsRocketmqConsumerGroupArrayOutput) Index(i pulumi.IntInput) DmsRocketmqConsumerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsRocketmqConsumerGroup {
		return vs[0].([]*DmsRocketmqConsumerGroup)[vs[1].(int)]
	}).(DmsRocketmqConsumerGroupOutput)
}

type DmsRocketmqConsumerGroupMapOutput struct{ *pulumi.OutputState }

func (DmsRocketmqConsumerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsRocketmqConsumerGroup)(nil)).Elem()
}

func (o DmsRocketmqConsumerGroupMapOutput) ToDmsRocketmqConsumerGroupMapOutput() DmsRocketmqConsumerGroupMapOutput {
	return o
}

func (o DmsRocketmqConsumerGroupMapOutput) ToDmsRocketmqConsumerGroupMapOutputWithContext(ctx context.Context) DmsRocketmqConsumerGroupMapOutput {
	return o
}

func (o DmsRocketmqConsumerGroupMapOutput) MapIndex(k pulumi.StringInput) DmsRocketmqConsumerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsRocketmqConsumerGroup {
		return vs[0].(map[string]*DmsRocketmqConsumerGroup)[vs[1].(string)]
	}).(DmsRocketmqConsumerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqConsumerGroupInput)(nil)).Elem(), &DmsRocketmqConsumerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqConsumerGroupArrayInput)(nil)).Elem(), DmsRocketmqConsumerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsRocketmqConsumerGroupMapInput)(nil)).Elem(), DmsRocketmqConsumerGroupMap{})
	pulumi.RegisterOutputType(DmsRocketmqConsumerGroupOutput{})
	pulumi.RegisterOutputType(DmsRocketmqConsumerGroupArrayOutput{})
	pulumi.RegisterOutputType(DmsRocketmqConsumerGroupMapOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetApigEnvironmentVariablesResult',
    'AwaitableGetApigEnvironmentVariablesResult',
    'get_apig_environment_variables',
    'get_apig_environment_variables_output',
]

@pulumi.output_type
class GetApigEnvironmentVariablesResult:
    """
    A collection of values returned by getApigEnvironmentVariables.
    """
    def __init__(__self__, env_id=None, group_id=None, id=None, instance_id=None, name=None, region=None, variables=None):
        if env_id and not isinstance(env_id, str):
            raise TypeError("Expected argument 'env_id' to be a str")
        pulumi.set(__self__, "env_id", env_id)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if variables and not isinstance(variables, list):
            raise TypeError("Expected argument 'variables' to be a list")
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="envId")
    def env_id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "env_id")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> builtins.str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> builtins.str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GetApigEnvironmentVariablesVariableResult']:
        return pulumi.get(self, "variables")


class AwaitableGetApigEnvironmentVariablesResult(GetApigEnvironmentVariablesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApigEnvironmentVariablesResult(
            env_id=self.env_id,
            group_id=self.group_id,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            variables=self.variables)


def get_apig_environment_variables(env_id: Optional[builtins.str] = None,
                                   group_id: Optional[builtins.str] = None,
                                   instance_id: Optional[builtins.str] = None,
                                   name: Optional[builtins.str] = None,
                                   region: Optional[builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApigEnvironmentVariablesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['envId'] = env_id
    __args__['groupId'] = group_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getApigEnvironmentVariables:getApigEnvironmentVariables', __args__, opts=opts, typ=GetApigEnvironmentVariablesResult).value

    return AwaitableGetApigEnvironmentVariablesResult(
        env_id=pulumi.get(__ret__, 'env_id'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        variables=pulumi.get(__ret__, 'variables'))
def get_apig_environment_variables_output(env_id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                          group_id: Optional[pulumi.Input[builtins.str]] = None,
                                          instance_id: Optional[pulumi.Input[builtins.str]] = None,
                                          name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                          region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApigEnvironmentVariablesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['envId'] = env_id
    __args__['groupId'] = group_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getApigEnvironmentVariables:getApigEnvironmentVariables', __args__, opts=opts, typ=GetApigEnvironmentVariablesResult)
    return __ret__.apply(lambda __response__: GetApigEnvironmentVariablesResult(
        env_id=pulumi.get(__response__, 'env_id'),
        group_id=pulumi.get(__response__, 'group_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        variables=pulumi.get(__response__, 'variables')))

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type KafkaTopic struct {
	pulumi.CustomResourceState

	AgingTime           pulumi.IntOutput            `pulumi:"agingTime"`
	Configs             KafkaTopicConfigArrayOutput `pulumi:"configs"`
	CreatedAt           pulumi.StringOutput         `pulumi:"createdAt"`
	Description         pulumi.StringPtrOutput      `pulumi:"description"`
	InstanceId          pulumi.StringOutput         `pulumi:"instanceId"`
	Name                pulumi.StringOutput         `pulumi:"name"`
	NewPartitionBrokers pulumi.IntArrayOutput       `pulumi:"newPartitionBrokers"`
	Partitions          pulumi.IntOutput            `pulumi:"partitions"`
	PoliciesOnly        pulumi.BoolOutput           `pulumi:"policiesOnly"`
	Region              pulumi.StringOutput         `pulumi:"region"`
	Replicas            pulumi.IntOutput            `pulumi:"replicas"`
	SyncFlushing        pulumi.BoolOutput           `pulumi:"syncFlushing"`
	SyncReplication     pulumi.BoolOutput           `pulumi:"syncReplication"`
	Type                pulumi.StringOutput         `pulumi:"type"`
}

// NewKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopic(ctx *pulumi.Context,
	name string, args *KafkaTopicArgs, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaTopic
	err := ctx.RegisterResource("sbercloud:Dms/kafkaTopic:KafkaTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopic gets an existing KafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicState, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	var resource KafkaTopic
	err := ctx.ReadResource("sbercloud:Dms/kafkaTopic:KafkaTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopic resources.
type kafkaTopicState struct {
	AgingTime           *int               `pulumi:"agingTime"`
	Configs             []KafkaTopicConfig `pulumi:"configs"`
	CreatedAt           *string            `pulumi:"createdAt"`
	Description         *string            `pulumi:"description"`
	InstanceId          *string            `pulumi:"instanceId"`
	Name                *string            `pulumi:"name"`
	NewPartitionBrokers []int              `pulumi:"newPartitionBrokers"`
	Partitions          *int               `pulumi:"partitions"`
	PoliciesOnly        *bool              `pulumi:"policiesOnly"`
	Region              *string            `pulumi:"region"`
	Replicas            *int               `pulumi:"replicas"`
	SyncFlushing        *bool              `pulumi:"syncFlushing"`
	SyncReplication     *bool              `pulumi:"syncReplication"`
	Type                *string            `pulumi:"type"`
}

type KafkaTopicState struct {
	AgingTime           pulumi.IntPtrInput
	Configs             KafkaTopicConfigArrayInput
	CreatedAt           pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	InstanceId          pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	NewPartitionBrokers pulumi.IntArrayInput
	Partitions          pulumi.IntPtrInput
	PoliciesOnly        pulumi.BoolPtrInput
	Region              pulumi.StringPtrInput
	Replicas            pulumi.IntPtrInput
	SyncFlushing        pulumi.BoolPtrInput
	SyncReplication     pulumi.BoolPtrInput
	Type                pulumi.StringPtrInput
}

func (KafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicState)(nil)).Elem()
}

type kafkaTopicArgs struct {
	AgingTime           *int               `pulumi:"agingTime"`
	Configs             []KafkaTopicConfig `pulumi:"configs"`
	Description         *string            `pulumi:"description"`
	InstanceId          string             `pulumi:"instanceId"`
	Name                *string            `pulumi:"name"`
	NewPartitionBrokers []int              `pulumi:"newPartitionBrokers"`
	Partitions          int                `pulumi:"partitions"`
	Region              *string            `pulumi:"region"`
	Replicas            *int               `pulumi:"replicas"`
	SyncFlushing        *bool              `pulumi:"syncFlushing"`
	SyncReplication     *bool              `pulumi:"syncReplication"`
}

// The set of arguments for constructing a KafkaTopic resource.
type KafkaTopicArgs struct {
	AgingTime           pulumi.IntPtrInput
	Configs             KafkaTopicConfigArrayInput
	Description         pulumi.StringPtrInput
	InstanceId          pulumi.StringInput
	Name                pulumi.StringPtrInput
	NewPartitionBrokers pulumi.IntArrayInput
	Partitions          pulumi.IntInput
	Region              pulumi.StringPtrInput
	Replicas            pulumi.IntPtrInput
	SyncFlushing        pulumi.BoolPtrInput
	SyncReplication     pulumi.BoolPtrInput
}

func (KafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicArgs)(nil)).Elem()
}

type KafkaTopicInput interface {
	pulumi.Input

	ToKafkaTopicOutput() KafkaTopicOutput
	ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput
}

func (*KafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (i *KafkaTopic) ToKafkaTopicOutput() KafkaTopicOutput {
	return i.ToKafkaTopicOutputWithContext(context.Background())
}

func (i *KafkaTopic) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicOutput)
}

// KafkaTopicArrayInput is an input type that accepts KafkaTopicArray and KafkaTopicArrayOutput values.
// You can construct a concrete instance of `KafkaTopicArrayInput` via:
//
//	KafkaTopicArray{ KafkaTopicArgs{...} }
type KafkaTopicArrayInput interface {
	pulumi.Input

	ToKafkaTopicArrayOutput() KafkaTopicArrayOutput
	ToKafkaTopicArrayOutputWithContext(context.Context) KafkaTopicArrayOutput
}

type KafkaTopicArray []KafkaTopicInput

func (KafkaTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return i.ToKafkaTopicArrayOutputWithContext(context.Background())
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicArrayOutput)
}

// KafkaTopicMapInput is an input type that accepts KafkaTopicMap and KafkaTopicMapOutput values.
// You can construct a concrete instance of `KafkaTopicMapInput` via:
//
//	KafkaTopicMap{ "key": KafkaTopicArgs{...} }
type KafkaTopicMapInput interface {
	pulumi.Input

	ToKafkaTopicMapOutput() KafkaTopicMapOutput
	ToKafkaTopicMapOutputWithContext(context.Context) KafkaTopicMapOutput
}

type KafkaTopicMap map[string]KafkaTopicInput

func (KafkaTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicMap) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return i.ToKafkaTopicMapOutputWithContext(context.Background())
}

func (i KafkaTopicMap) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicMapOutput)
}

type KafkaTopicOutput struct{ *pulumi.OutputState }

func (KafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicOutput) ToKafkaTopicOutput() KafkaTopicOutput {
	return o
}

func (o KafkaTopicOutput) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return o
}

func (o KafkaTopicOutput) AgingTime() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.AgingTime }).(pulumi.IntOutput)
}

func (o KafkaTopicOutput) Configs() KafkaTopicConfigArrayOutput {
	return o.ApplyT(func(v *KafkaTopic) KafkaTopicConfigArrayOutput { return v.Configs }).(KafkaTopicConfigArrayOutput)
}

func (o KafkaTopicOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o KafkaTopicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o KafkaTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o KafkaTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KafkaTopicOutput) NewPartitionBrokers() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntArrayOutput { return v.NewPartitionBrokers }).(pulumi.IntArrayOutput)
}

func (o KafkaTopicOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.Partitions }).(pulumi.IntOutput)
}

func (o KafkaTopicOutput) PoliciesOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.BoolOutput { return v.PoliciesOnly }).(pulumi.BoolOutput)
}

func (o KafkaTopicOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o KafkaTopicOutput) Replicas() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.Replicas }).(pulumi.IntOutput)
}

func (o KafkaTopicOutput) SyncFlushing() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.BoolOutput { return v.SyncFlushing }).(pulumi.BoolOutput)
}

func (o KafkaTopicOutput) SyncReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.BoolOutput { return v.SyncReplication }).(pulumi.BoolOutput)
}

func (o KafkaTopicOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type KafkaTopicArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) Index(i pulumi.IntInput) KafkaTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].([]*KafkaTopic)[vs[1].(int)]
	}).(KafkaTopicOutput)
}

type KafkaTopicMapOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) MapIndex(k pulumi.StringInput) KafkaTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].(map[string]*KafkaTopic)[vs[1].(string)]
	}).(KafkaTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicInput)(nil)).Elem(), &KafkaTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicArrayInput)(nil)).Elem(), KafkaTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicMapInput)(nil)).Elem(), KafkaTopicMap{})
	pulumi.RegisterOutputType(KafkaTopicOutput{})
	pulumi.RegisterOutputType(KafkaTopicArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapOutput{})
}

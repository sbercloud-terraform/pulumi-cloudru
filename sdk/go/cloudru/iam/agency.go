// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Agency struct {
	pulumi.CustomResourceState

	AllResourcesRoles pulumi.StringArrayOutput `pulumi:"allResourcesRoles"`
	CreateTime        pulumi.StringOutput      `pulumi:"createTime"`
	// schema: Required
	DelegatedDomainName pulumi.StringPtrOutput `pulumi:"delegatedDomainName"`
	// schema: Internal
	DelegatedServiceName pulumi.StringPtrOutput       `pulumi:"delegatedServiceName"`
	Description          pulumi.StringOutput          `pulumi:"description"`
	DomainRoles          pulumi.StringArrayOutput     `pulumi:"domainRoles"`
	Duration             pulumi.StringPtrOutput       `pulumi:"duration"`
	ExpireTime           pulumi.StringOutput          `pulumi:"expireTime"`
	Name                 pulumi.StringOutput          `pulumi:"name"`
	ProjectRoles         AgencyProjectRoleArrayOutput `pulumi:"projectRoles"`
}

// NewAgency registers a new resource with the given unique name, arguments, and options.
func NewAgency(ctx *pulumi.Context,
	name string, args *AgencyArgs, opts ...pulumi.ResourceOption) (*Agency, error) {
	if args == nil {
		args = &AgencyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Agency
	err := ctx.RegisterResource("cloudru:Iam/agency:Agency", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAgency gets an existing Agency resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAgency(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AgencyState, opts ...pulumi.ResourceOption) (*Agency, error) {
	var resource Agency
	err := ctx.ReadResource("cloudru:Iam/agency:Agency", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Agency resources.
type agencyState struct {
	AllResourcesRoles []string `pulumi:"allResourcesRoles"`
	CreateTime        *string  `pulumi:"createTime"`
	// schema: Required
	DelegatedDomainName *string `pulumi:"delegatedDomainName"`
	// schema: Internal
	DelegatedServiceName *string             `pulumi:"delegatedServiceName"`
	Description          *string             `pulumi:"description"`
	DomainRoles          []string            `pulumi:"domainRoles"`
	Duration             *string             `pulumi:"duration"`
	ExpireTime           *string             `pulumi:"expireTime"`
	Name                 *string             `pulumi:"name"`
	ProjectRoles         []AgencyProjectRole `pulumi:"projectRoles"`
}

type AgencyState struct {
	AllResourcesRoles pulumi.StringArrayInput
	CreateTime        pulumi.StringPtrInput
	// schema: Required
	DelegatedDomainName pulumi.StringPtrInput
	// schema: Internal
	DelegatedServiceName pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DomainRoles          pulumi.StringArrayInput
	Duration             pulumi.StringPtrInput
	ExpireTime           pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	ProjectRoles         AgencyProjectRoleArrayInput
}

func (AgencyState) ElementType() reflect.Type {
	return reflect.TypeOf((*agencyState)(nil)).Elem()
}

type agencyArgs struct {
	AllResourcesRoles []string `pulumi:"allResourcesRoles"`
	// schema: Required
	DelegatedDomainName *string `pulumi:"delegatedDomainName"`
	// schema: Internal
	DelegatedServiceName *string             `pulumi:"delegatedServiceName"`
	Description          *string             `pulumi:"description"`
	DomainRoles          []string            `pulumi:"domainRoles"`
	Duration             *string             `pulumi:"duration"`
	Name                 *string             `pulumi:"name"`
	ProjectRoles         []AgencyProjectRole `pulumi:"projectRoles"`
}

// The set of arguments for constructing a Agency resource.
type AgencyArgs struct {
	AllResourcesRoles pulumi.StringArrayInput
	// schema: Required
	DelegatedDomainName pulumi.StringPtrInput
	// schema: Internal
	DelegatedServiceName pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DomainRoles          pulumi.StringArrayInput
	Duration             pulumi.StringPtrInput
	Name                 pulumi.StringPtrInput
	ProjectRoles         AgencyProjectRoleArrayInput
}

func (AgencyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*agencyArgs)(nil)).Elem()
}

type AgencyInput interface {
	pulumi.Input

	ToAgencyOutput() AgencyOutput
	ToAgencyOutputWithContext(ctx context.Context) AgencyOutput
}

func (*Agency) ElementType() reflect.Type {
	return reflect.TypeOf((**Agency)(nil)).Elem()
}

func (i *Agency) ToAgencyOutput() AgencyOutput {
	return i.ToAgencyOutputWithContext(context.Background())
}

func (i *Agency) ToAgencyOutputWithContext(ctx context.Context) AgencyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgencyOutput)
}

// AgencyArrayInput is an input type that accepts AgencyArray and AgencyArrayOutput values.
// You can construct a concrete instance of `AgencyArrayInput` via:
//
//	AgencyArray{ AgencyArgs{...} }
type AgencyArrayInput interface {
	pulumi.Input

	ToAgencyArrayOutput() AgencyArrayOutput
	ToAgencyArrayOutputWithContext(context.Context) AgencyArrayOutput
}

type AgencyArray []AgencyInput

func (AgencyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Agency)(nil)).Elem()
}

func (i AgencyArray) ToAgencyArrayOutput() AgencyArrayOutput {
	return i.ToAgencyArrayOutputWithContext(context.Background())
}

func (i AgencyArray) ToAgencyArrayOutputWithContext(ctx context.Context) AgencyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgencyArrayOutput)
}

// AgencyMapInput is an input type that accepts AgencyMap and AgencyMapOutput values.
// You can construct a concrete instance of `AgencyMapInput` via:
//
//	AgencyMap{ "key": AgencyArgs{...} }
type AgencyMapInput interface {
	pulumi.Input

	ToAgencyMapOutput() AgencyMapOutput
	ToAgencyMapOutputWithContext(context.Context) AgencyMapOutput
}

type AgencyMap map[string]AgencyInput

func (AgencyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Agency)(nil)).Elem()
}

func (i AgencyMap) ToAgencyMapOutput() AgencyMapOutput {
	return i.ToAgencyMapOutputWithContext(context.Background())
}

func (i AgencyMap) ToAgencyMapOutputWithContext(ctx context.Context) AgencyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AgencyMapOutput)
}

type AgencyOutput struct{ *pulumi.OutputState }

func (AgencyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Agency)(nil)).Elem()
}

func (o AgencyOutput) ToAgencyOutput() AgencyOutput {
	return o
}

func (o AgencyOutput) ToAgencyOutputWithContext(ctx context.Context) AgencyOutput {
	return o
}

func (o AgencyOutput) AllResourcesRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringArrayOutput { return v.AllResourcesRoles }).(pulumi.StringArrayOutput)
}

func (o AgencyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// schema: Required
func (o AgencyOutput) DelegatedDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringPtrOutput { return v.DelegatedDomainName }).(pulumi.StringPtrOutput)
}

// schema: Internal
func (o AgencyOutput) DelegatedServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringPtrOutput { return v.DelegatedServiceName }).(pulumi.StringPtrOutput)
}

func (o AgencyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o AgencyOutput) DomainRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringArrayOutput { return v.DomainRoles }).(pulumi.StringArrayOutput)
}

func (o AgencyOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringPtrOutput { return v.Duration }).(pulumi.StringPtrOutput)
}

func (o AgencyOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

func (o AgencyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Agency) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AgencyOutput) ProjectRoles() AgencyProjectRoleArrayOutput {
	return o.ApplyT(func(v *Agency) AgencyProjectRoleArrayOutput { return v.ProjectRoles }).(AgencyProjectRoleArrayOutput)
}

type AgencyArrayOutput struct{ *pulumi.OutputState }

func (AgencyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Agency)(nil)).Elem()
}

func (o AgencyArrayOutput) ToAgencyArrayOutput() AgencyArrayOutput {
	return o
}

func (o AgencyArrayOutput) ToAgencyArrayOutputWithContext(ctx context.Context) AgencyArrayOutput {
	return o
}

func (o AgencyArrayOutput) Index(i pulumi.IntInput) AgencyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Agency {
		return vs[0].([]*Agency)[vs[1].(int)]
	}).(AgencyOutput)
}

type AgencyMapOutput struct{ *pulumi.OutputState }

func (AgencyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Agency)(nil)).Elem()
}

func (o AgencyMapOutput) ToAgencyMapOutput() AgencyMapOutput {
	return o
}

func (o AgencyMapOutput) ToAgencyMapOutputWithContext(ctx context.Context) AgencyMapOutput {
	return o
}

func (o AgencyMapOutput) MapIndex(k pulumi.StringInput) AgencyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Agency {
		return vs[0].(map[string]*Agency)[vs[1].(string)]
	}).(AgencyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AgencyInput)(nil)).Elem(), &Agency{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgencyArrayInput)(nil)).Elem(), AgencyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AgencyMapInput)(nil)).Elem(), AgencyMap{})
	pulumi.RegisterOutputType(AgencyOutput{})
	pulumi.RegisterOutputType(AgencyArrayOutput{})
	pulumi.RegisterOutputType(AgencyMapOutput{})
}

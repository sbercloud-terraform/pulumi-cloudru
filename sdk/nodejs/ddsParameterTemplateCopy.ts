// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DdsParameterTemplateCopy extends pulumi.CustomResource {
    /**
     * Get an existing DdsParameterTemplateCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DdsParameterTemplateCopyState, opts?: pulumi.CustomResourceOptions): DdsParameterTemplateCopy {
        return new DdsParameterTemplateCopy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:index/ddsParameterTemplateCopy:DdsParameterTemplateCopy';

    /**
     * Returns true if the given object is an instance of DdsParameterTemplateCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DdsParameterTemplateCopy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DdsParameterTemplateCopy.__pulumiType;
    }

    /**
     * Specifies the parameter template ID.
     */
    declare public readonly configurationId: pulumi.Output<string>;
    /**
     * Indicates the create time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Specifies the description of replicated parameter template.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of replicated parameter template.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Indicates the database version.
     */
    declare public /*out*/ readonly nodeVersion: pulumi.Output<string>;
    /**
     * Specifies the mapping between parameter names and parameter values.
     */
    declare public readonly parameterValues: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Indicates the parameters defined by users based on the default parameter templates.
     */
    declare public /*out*/ readonly parameters: pulumi.Output<outputs.DdsParameterTemplateCopyParameter[]>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * Indicates the update time.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a DdsParameterTemplateCopy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DdsParameterTemplateCopyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DdsParameterTemplateCopyArgs | DdsParameterTemplateCopyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DdsParameterTemplateCopyState | undefined;
            resourceInputs["configurationId"] = state?.configurationId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeVersion"] = state?.nodeVersion;
            resourceInputs["parameterValues"] = state?.parameterValues;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["region"] = state?.region;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as DdsParameterTemplateCopyArgs | undefined;
            if (args?.configurationId === undefined && !opts.urn) {
                throw new Error("Missing required property 'configurationId'");
            }
            resourceInputs["configurationId"] = args?.configurationId;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["parameterValues"] = args?.parameterValues;
            resourceInputs["region"] = args?.region;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["nodeVersion"] = undefined /*out*/;
            resourceInputs["parameters"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DdsParameterTemplateCopy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DdsParameterTemplateCopy resources.
 */
export interface DdsParameterTemplateCopyState {
    /**
     * Specifies the parameter template ID.
     */
    configurationId?: pulumi.Input<string>;
    /**
     * Indicates the create time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the description of replicated parameter template.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of replicated parameter template.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates the database version.
     */
    nodeVersion?: pulumi.Input<string>;
    /**
     * Specifies the mapping between parameter names and parameter values.
     */
    parameterValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates the parameters defined by users based on the default parameter templates.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.DdsParameterTemplateCopyParameter>[]>;
    region?: pulumi.Input<string>;
    /**
     * Indicates the update time.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DdsParameterTemplateCopy resource.
 */
export interface DdsParameterTemplateCopyArgs {
    /**
     * Specifies the parameter template ID.
     */
    configurationId: pulumi.Input<string>;
    /**
     * Specifies the description of replicated parameter template.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of replicated parameter template.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the mapping between parameter names and parameter values.
     */
    parameterValues?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    region?: pulumi.Input<string>;
}

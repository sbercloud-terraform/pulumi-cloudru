// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ElbMonitor struct {
	pulumi.CustomResourceState

	DomainName pulumi.StringOutput `pulumi:"domainName"`
	Interval   pulumi.IntOutput    `pulumi:"interval"`
	MaxRetries pulumi.IntOutput    `pulumi:"maxRetries"`
	PoolId     pulumi.StringOutput `pulumi:"poolId"`
	Port       pulumi.IntOutput    `pulumi:"port"`
	Protocol   pulumi.StringOutput `pulumi:"protocol"`
	Region     pulumi.StringOutput `pulumi:"region"`
	StatusCode pulumi.StringOutput `pulumi:"statusCode"`
	Timeout    pulumi.IntOutput    `pulumi:"timeout"`
	UrlPath    pulumi.StringOutput `pulumi:"urlPath"`
}

// NewElbMonitor registers a new resource with the given unique name, arguments, and options.
func NewElbMonitor(ctx *pulumi.Context,
	name string, args *ElbMonitorArgs, opts ...pulumi.ResourceOption) (*ElbMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.MaxRetries == nil {
		return nil, errors.New("invalid value for required argument 'MaxRetries'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElbMonitor
	err := ctx.RegisterResource("sbercloud:index/elbMonitor:ElbMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbMonitor gets an existing ElbMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbMonitorState, opts ...pulumi.ResourceOption) (*ElbMonitor, error) {
	var resource ElbMonitor
	err := ctx.ReadResource("sbercloud:index/elbMonitor:ElbMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbMonitor resources.
type elbMonitorState struct {
	DomainName *string `pulumi:"domainName"`
	Interval   *int    `pulumi:"interval"`
	MaxRetries *int    `pulumi:"maxRetries"`
	PoolId     *string `pulumi:"poolId"`
	Port       *int    `pulumi:"port"`
	Protocol   *string `pulumi:"protocol"`
	Region     *string `pulumi:"region"`
	StatusCode *string `pulumi:"statusCode"`
	Timeout    *int    `pulumi:"timeout"`
	UrlPath    *string `pulumi:"urlPath"`
}

type ElbMonitorState struct {
	DomainName pulumi.StringPtrInput
	Interval   pulumi.IntPtrInput
	MaxRetries pulumi.IntPtrInput
	PoolId     pulumi.StringPtrInput
	Port       pulumi.IntPtrInput
	Protocol   pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	StatusCode pulumi.StringPtrInput
	Timeout    pulumi.IntPtrInput
	UrlPath    pulumi.StringPtrInput
}

func (ElbMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbMonitorState)(nil)).Elem()
}

type elbMonitorArgs struct {
	DomainName *string `pulumi:"domainName"`
	Interval   int     `pulumi:"interval"`
	MaxRetries int     `pulumi:"maxRetries"`
	PoolId     string  `pulumi:"poolId"`
	Port       *int    `pulumi:"port"`
	Protocol   string  `pulumi:"protocol"`
	Region     *string `pulumi:"region"`
	StatusCode *string `pulumi:"statusCode"`
	Timeout    int     `pulumi:"timeout"`
	UrlPath    *string `pulumi:"urlPath"`
}

// The set of arguments for constructing a ElbMonitor resource.
type ElbMonitorArgs struct {
	DomainName pulumi.StringPtrInput
	Interval   pulumi.IntInput
	MaxRetries pulumi.IntInput
	PoolId     pulumi.StringInput
	Port       pulumi.IntPtrInput
	Protocol   pulumi.StringInput
	Region     pulumi.StringPtrInput
	StatusCode pulumi.StringPtrInput
	Timeout    pulumi.IntInput
	UrlPath    pulumi.StringPtrInput
}

func (ElbMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbMonitorArgs)(nil)).Elem()
}

type ElbMonitorInput interface {
	pulumi.Input

	ToElbMonitorOutput() ElbMonitorOutput
	ToElbMonitorOutputWithContext(ctx context.Context) ElbMonitorOutput
}

func (*ElbMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbMonitor)(nil)).Elem()
}

func (i *ElbMonitor) ToElbMonitorOutput() ElbMonitorOutput {
	return i.ToElbMonitorOutputWithContext(context.Background())
}

func (i *ElbMonitor) ToElbMonitorOutputWithContext(ctx context.Context) ElbMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMonitorOutput)
}

// ElbMonitorArrayInput is an input type that accepts ElbMonitorArray and ElbMonitorArrayOutput values.
// You can construct a concrete instance of `ElbMonitorArrayInput` via:
//
//	ElbMonitorArray{ ElbMonitorArgs{...} }
type ElbMonitorArrayInput interface {
	pulumi.Input

	ToElbMonitorArrayOutput() ElbMonitorArrayOutput
	ToElbMonitorArrayOutputWithContext(context.Context) ElbMonitorArrayOutput
}

type ElbMonitorArray []ElbMonitorInput

func (ElbMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbMonitor)(nil)).Elem()
}

func (i ElbMonitorArray) ToElbMonitorArrayOutput() ElbMonitorArrayOutput {
	return i.ToElbMonitorArrayOutputWithContext(context.Background())
}

func (i ElbMonitorArray) ToElbMonitorArrayOutputWithContext(ctx context.Context) ElbMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMonitorArrayOutput)
}

// ElbMonitorMapInput is an input type that accepts ElbMonitorMap and ElbMonitorMapOutput values.
// You can construct a concrete instance of `ElbMonitorMapInput` via:
//
//	ElbMonitorMap{ "key": ElbMonitorArgs{...} }
type ElbMonitorMapInput interface {
	pulumi.Input

	ToElbMonitorMapOutput() ElbMonitorMapOutput
	ToElbMonitorMapOutputWithContext(context.Context) ElbMonitorMapOutput
}

type ElbMonitorMap map[string]ElbMonitorInput

func (ElbMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbMonitor)(nil)).Elem()
}

func (i ElbMonitorMap) ToElbMonitorMapOutput() ElbMonitorMapOutput {
	return i.ToElbMonitorMapOutputWithContext(context.Background())
}

func (i ElbMonitorMap) ToElbMonitorMapOutputWithContext(ctx context.Context) ElbMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMonitorMapOutput)
}

type ElbMonitorOutput struct{ *pulumi.OutputState }

func (ElbMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbMonitor)(nil)).Elem()
}

func (o ElbMonitorOutput) ToElbMonitorOutput() ElbMonitorOutput {
	return o
}

func (o ElbMonitorOutput) ToElbMonitorOutputWithContext(ctx context.Context) ElbMonitorOutput {
	return o
}

func (o ElbMonitorOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

func (o ElbMonitorOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

func (o ElbMonitorOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.IntOutput { return v.MaxRetries }).(pulumi.IntOutput)
}

func (o ElbMonitorOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

func (o ElbMonitorOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o ElbMonitorOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o ElbMonitorOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ElbMonitorOutput) StatusCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.StatusCode }).(pulumi.StringOutput)
}

func (o ElbMonitorOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

func (o ElbMonitorOutput) UrlPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMonitor) pulumi.StringOutput { return v.UrlPath }).(pulumi.StringOutput)
}

type ElbMonitorArrayOutput struct{ *pulumi.OutputState }

func (ElbMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbMonitor)(nil)).Elem()
}

func (o ElbMonitorArrayOutput) ToElbMonitorArrayOutput() ElbMonitorArrayOutput {
	return o
}

func (o ElbMonitorArrayOutput) ToElbMonitorArrayOutputWithContext(ctx context.Context) ElbMonitorArrayOutput {
	return o
}

func (o ElbMonitorArrayOutput) Index(i pulumi.IntInput) ElbMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbMonitor {
		return vs[0].([]*ElbMonitor)[vs[1].(int)]
	}).(ElbMonitorOutput)
}

type ElbMonitorMapOutput struct{ *pulumi.OutputState }

func (ElbMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbMonitor)(nil)).Elem()
}

func (o ElbMonitorMapOutput) ToElbMonitorMapOutput() ElbMonitorMapOutput {
	return o
}

func (o ElbMonitorMapOutput) ToElbMonitorMapOutputWithContext(ctx context.Context) ElbMonitorMapOutput {
	return o
}

func (o ElbMonitorMapOutput) MapIndex(k pulumi.StringInput) ElbMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbMonitor {
		return vs[0].(map[string]*ElbMonitor)[vs[1].(string)]
	}).(ElbMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMonitorInput)(nil)).Elem(), &ElbMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMonitorArrayInput)(nil)).Elem(), ElbMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMonitorMapInput)(nil)).Elem(), ElbMonitorMap{})
	pulumi.RegisterOutputType(ElbMonitorOutput{})
	pulumi.RegisterOutputType(ElbMonitorArrayOutput{})
	pulumi.RegisterOutputType(ElbMonitorMapOutput{})
}

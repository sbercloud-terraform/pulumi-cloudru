// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type InstanceBandwidth struct {
	ChargeMode  *string           `pulumi:"chargeMode"`
	ExtendParam map[string]string `pulumi:"extendParam"`
	Id          *string           `pulumi:"id"`
	ShareType   string            `pulumi:"shareType"`
	Size        *int              `pulumi:"size"`
}

// InstanceBandwidthInput is an input type that accepts InstanceBandwidthArgs and InstanceBandwidthOutput values.
// You can construct a concrete instance of `InstanceBandwidthInput` via:
//
//	InstanceBandwidthArgs{...}
type InstanceBandwidthInput interface {
	pulumi.Input

	ToInstanceBandwidthOutput() InstanceBandwidthOutput
	ToInstanceBandwidthOutputWithContext(context.Context) InstanceBandwidthOutput
}

type InstanceBandwidthArgs struct {
	ChargeMode  pulumi.StringPtrInput `pulumi:"chargeMode"`
	ExtendParam pulumi.StringMapInput `pulumi:"extendParam"`
	Id          pulumi.StringPtrInput `pulumi:"id"`
	ShareType   pulumi.StringInput    `pulumi:"shareType"`
	Size        pulumi.IntPtrInput    `pulumi:"size"`
}

func (InstanceBandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBandwidth)(nil)).Elem()
}

func (i InstanceBandwidthArgs) ToInstanceBandwidthOutput() InstanceBandwidthOutput {
	return i.ToInstanceBandwidthOutputWithContext(context.Background())
}

func (i InstanceBandwidthArgs) ToInstanceBandwidthOutputWithContext(ctx context.Context) InstanceBandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBandwidthOutput)
}

func (i InstanceBandwidthArgs) ToInstanceBandwidthPtrOutput() InstanceBandwidthPtrOutput {
	return i.ToInstanceBandwidthPtrOutputWithContext(context.Background())
}

func (i InstanceBandwidthArgs) ToInstanceBandwidthPtrOutputWithContext(ctx context.Context) InstanceBandwidthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBandwidthOutput).ToInstanceBandwidthPtrOutputWithContext(ctx)
}

// InstanceBandwidthPtrInput is an input type that accepts InstanceBandwidthArgs, InstanceBandwidthPtr and InstanceBandwidthPtrOutput values.
// You can construct a concrete instance of `InstanceBandwidthPtrInput` via:
//
//	        InstanceBandwidthArgs{...}
//
//	or:
//
//	        nil
type InstanceBandwidthPtrInput interface {
	pulumi.Input

	ToInstanceBandwidthPtrOutput() InstanceBandwidthPtrOutput
	ToInstanceBandwidthPtrOutputWithContext(context.Context) InstanceBandwidthPtrOutput
}

type instanceBandwidthPtrType InstanceBandwidthArgs

func InstanceBandwidthPtr(v *InstanceBandwidthArgs) InstanceBandwidthPtrInput {
	return (*instanceBandwidthPtrType)(v)
}

func (*instanceBandwidthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBandwidth)(nil)).Elem()
}

func (i *instanceBandwidthPtrType) ToInstanceBandwidthPtrOutput() InstanceBandwidthPtrOutput {
	return i.ToInstanceBandwidthPtrOutputWithContext(context.Background())
}

func (i *instanceBandwidthPtrType) ToInstanceBandwidthPtrOutputWithContext(ctx context.Context) InstanceBandwidthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBandwidthPtrOutput)
}

type InstanceBandwidthOutput struct{ *pulumi.OutputState }

func (InstanceBandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBandwidth)(nil)).Elem()
}

func (o InstanceBandwidthOutput) ToInstanceBandwidthOutput() InstanceBandwidthOutput {
	return o
}

func (o InstanceBandwidthOutput) ToInstanceBandwidthOutputWithContext(ctx context.Context) InstanceBandwidthOutput {
	return o
}

func (o InstanceBandwidthOutput) ToInstanceBandwidthPtrOutput() InstanceBandwidthPtrOutput {
	return o.ToInstanceBandwidthPtrOutputWithContext(context.Background())
}

func (o InstanceBandwidthOutput) ToInstanceBandwidthPtrOutputWithContext(ctx context.Context) InstanceBandwidthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceBandwidth) *InstanceBandwidth {
		return &v
	}).(InstanceBandwidthPtrOutput)
}

func (o InstanceBandwidthOutput) ChargeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBandwidth) *string { return v.ChargeMode }).(pulumi.StringPtrOutput)
}

func (o InstanceBandwidthOutput) ExtendParam() pulumi.StringMapOutput {
	return o.ApplyT(func(v InstanceBandwidth) map[string]string { return v.ExtendParam }).(pulumi.StringMapOutput)
}

func (o InstanceBandwidthOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBandwidth) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o InstanceBandwidthOutput) ShareType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceBandwidth) string { return v.ShareType }).(pulumi.StringOutput)
}

func (o InstanceBandwidthOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceBandwidth) *int { return v.Size }).(pulumi.IntPtrOutput)
}

type InstanceBandwidthPtrOutput struct{ *pulumi.OutputState }

func (InstanceBandwidthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBandwidth)(nil)).Elem()
}

func (o InstanceBandwidthPtrOutput) ToInstanceBandwidthPtrOutput() InstanceBandwidthPtrOutput {
	return o
}

func (o InstanceBandwidthPtrOutput) ToInstanceBandwidthPtrOutputWithContext(ctx context.Context) InstanceBandwidthPtrOutput {
	return o
}

func (o InstanceBandwidthPtrOutput) Elem() InstanceBandwidthOutput {
	return o.ApplyT(func(v *InstanceBandwidth) InstanceBandwidth {
		if v != nil {
			return *v
		}
		var ret InstanceBandwidth
		return ret
	}).(InstanceBandwidthOutput)
}

func (o InstanceBandwidthPtrOutput) ChargeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBandwidth) *string {
		if v == nil {
			return nil
		}
		return v.ChargeMode
	}).(pulumi.StringPtrOutput)
}

func (o InstanceBandwidthPtrOutput) ExtendParam() pulumi.StringMapOutput {
	return o.ApplyT(func(v *InstanceBandwidth) map[string]string {
		if v == nil {
			return nil
		}
		return v.ExtendParam
	}).(pulumi.StringMapOutput)
}

func (o InstanceBandwidthPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBandwidth) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

func (o InstanceBandwidthPtrOutput) ShareType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBandwidth) *string {
		if v == nil {
			return nil
		}
		return &v.ShareType
	}).(pulumi.StringPtrOutput)
}

func (o InstanceBandwidthPtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBandwidth) *int {
		if v == nil {
			return nil
		}
		return v.Size
	}).(pulumi.IntPtrOutput)
}

type InstanceDataDisk struct {
	DssPoolId  *string `pulumi:"dssPoolId"`
	Iops       *int    `pulumi:"iops"`
	KmsKeyId   *string `pulumi:"kmsKeyId"`
	Size       int     `pulumi:"size"`
	SnapshotId *string `pulumi:"snapshotId"`
	Throughput *int    `pulumi:"throughput"`
	Type       string  `pulumi:"type"`
}

// InstanceDataDiskInput is an input type that accepts InstanceDataDiskArgs and InstanceDataDiskOutput values.
// You can construct a concrete instance of `InstanceDataDiskInput` via:
//
//	InstanceDataDiskArgs{...}
type InstanceDataDiskInput interface {
	pulumi.Input

	ToInstanceDataDiskOutput() InstanceDataDiskOutput
	ToInstanceDataDiskOutputWithContext(context.Context) InstanceDataDiskOutput
}

type InstanceDataDiskArgs struct {
	DssPoolId  pulumi.StringPtrInput `pulumi:"dssPoolId"`
	Iops       pulumi.IntPtrInput    `pulumi:"iops"`
	KmsKeyId   pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	Size       pulumi.IntInput       `pulumi:"size"`
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	Throughput pulumi.IntPtrInput    `pulumi:"throughput"`
	Type       pulumi.StringInput    `pulumi:"type"`
}

func (InstanceDataDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataDisk)(nil)).Elem()
}

func (i InstanceDataDiskArgs) ToInstanceDataDiskOutput() InstanceDataDiskOutput {
	return i.ToInstanceDataDiskOutputWithContext(context.Background())
}

func (i InstanceDataDiskArgs) ToInstanceDataDiskOutputWithContext(ctx context.Context) InstanceDataDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataDiskOutput)
}

// InstanceDataDiskArrayInput is an input type that accepts InstanceDataDiskArray and InstanceDataDiskArrayOutput values.
// You can construct a concrete instance of `InstanceDataDiskArrayInput` via:
//
//	InstanceDataDiskArray{ InstanceDataDiskArgs{...} }
type InstanceDataDiskArrayInput interface {
	pulumi.Input

	ToInstanceDataDiskArrayOutput() InstanceDataDiskArrayOutput
	ToInstanceDataDiskArrayOutputWithContext(context.Context) InstanceDataDiskArrayOutput
}

type InstanceDataDiskArray []InstanceDataDiskInput

func (InstanceDataDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDataDisk)(nil)).Elem()
}

func (i InstanceDataDiskArray) ToInstanceDataDiskArrayOutput() InstanceDataDiskArrayOutput {
	return i.ToInstanceDataDiskArrayOutputWithContext(context.Background())
}

func (i InstanceDataDiskArray) ToInstanceDataDiskArrayOutputWithContext(ctx context.Context) InstanceDataDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataDiskArrayOutput)
}

type InstanceDataDiskOutput struct{ *pulumi.OutputState }

func (InstanceDataDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataDisk)(nil)).Elem()
}

func (o InstanceDataDiskOutput) ToInstanceDataDiskOutput() InstanceDataDiskOutput {
	return o
}

func (o InstanceDataDiskOutput) ToInstanceDataDiskOutputWithContext(ctx context.Context) InstanceDataDiskOutput {
	return o
}

func (o InstanceDataDiskOutput) DssPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDataDisk) *string { return v.DssPoolId }).(pulumi.StringPtrOutput)
}

func (o InstanceDataDiskOutput) Iops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceDataDisk) *int { return v.Iops }).(pulumi.IntPtrOutput)
}

func (o InstanceDataDiskOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDataDisk) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o InstanceDataDiskOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDataDisk) int { return v.Size }).(pulumi.IntOutput)
}

func (o InstanceDataDiskOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDataDisk) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o InstanceDataDiskOutput) Throughput() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceDataDisk) *int { return v.Throughput }).(pulumi.IntPtrOutput)
}

func (o InstanceDataDiskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDataDisk) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceDataDiskArrayOutput struct{ *pulumi.OutputState }

func (InstanceDataDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDataDisk)(nil)).Elem()
}

func (o InstanceDataDiskArrayOutput) ToInstanceDataDiskArrayOutput() InstanceDataDiskArrayOutput {
	return o
}

func (o InstanceDataDiskArrayOutput) ToInstanceDataDiskArrayOutputWithContext(ctx context.Context) InstanceDataDiskArrayOutput {
	return o
}

func (o InstanceDataDiskArrayOutput) Index(i pulumi.IntInput) InstanceDataDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceDataDisk {
		return vs[0].([]InstanceDataDisk)[vs[1].(int)]
	}).(InstanceDataDiskOutput)
}

type InstanceEnclaveOptions struct {
	Enabled bool `pulumi:"enabled"`
}

// InstanceEnclaveOptionsInput is an input type that accepts InstanceEnclaveOptionsArgs and InstanceEnclaveOptionsOutput values.
// You can construct a concrete instance of `InstanceEnclaveOptionsInput` via:
//
//	InstanceEnclaveOptionsArgs{...}
type InstanceEnclaveOptionsInput interface {
	pulumi.Input

	ToInstanceEnclaveOptionsOutput() InstanceEnclaveOptionsOutput
	ToInstanceEnclaveOptionsOutputWithContext(context.Context) InstanceEnclaveOptionsOutput
}

type InstanceEnclaveOptionsArgs struct {
	Enabled pulumi.BoolInput `pulumi:"enabled"`
}

func (InstanceEnclaveOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEnclaveOptions)(nil)).Elem()
}

func (i InstanceEnclaveOptionsArgs) ToInstanceEnclaveOptionsOutput() InstanceEnclaveOptionsOutput {
	return i.ToInstanceEnclaveOptionsOutputWithContext(context.Background())
}

func (i InstanceEnclaveOptionsArgs) ToInstanceEnclaveOptionsOutputWithContext(ctx context.Context) InstanceEnclaveOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEnclaveOptionsOutput)
}

func (i InstanceEnclaveOptionsArgs) ToInstanceEnclaveOptionsPtrOutput() InstanceEnclaveOptionsPtrOutput {
	return i.ToInstanceEnclaveOptionsPtrOutputWithContext(context.Background())
}

func (i InstanceEnclaveOptionsArgs) ToInstanceEnclaveOptionsPtrOutputWithContext(ctx context.Context) InstanceEnclaveOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEnclaveOptionsOutput).ToInstanceEnclaveOptionsPtrOutputWithContext(ctx)
}

// InstanceEnclaveOptionsPtrInput is an input type that accepts InstanceEnclaveOptionsArgs, InstanceEnclaveOptionsPtr and InstanceEnclaveOptionsPtrOutput values.
// You can construct a concrete instance of `InstanceEnclaveOptionsPtrInput` via:
//
//	        InstanceEnclaveOptionsArgs{...}
//
//	or:
//
//	        nil
type InstanceEnclaveOptionsPtrInput interface {
	pulumi.Input

	ToInstanceEnclaveOptionsPtrOutput() InstanceEnclaveOptionsPtrOutput
	ToInstanceEnclaveOptionsPtrOutputWithContext(context.Context) InstanceEnclaveOptionsPtrOutput
}

type instanceEnclaveOptionsPtrType InstanceEnclaveOptionsArgs

func InstanceEnclaveOptionsPtr(v *InstanceEnclaveOptionsArgs) InstanceEnclaveOptionsPtrInput {
	return (*instanceEnclaveOptionsPtrType)(v)
}

func (*instanceEnclaveOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceEnclaveOptions)(nil)).Elem()
}

func (i *instanceEnclaveOptionsPtrType) ToInstanceEnclaveOptionsPtrOutput() InstanceEnclaveOptionsPtrOutput {
	return i.ToInstanceEnclaveOptionsPtrOutputWithContext(context.Background())
}

func (i *instanceEnclaveOptionsPtrType) ToInstanceEnclaveOptionsPtrOutputWithContext(ctx context.Context) InstanceEnclaveOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEnclaveOptionsPtrOutput)
}

type InstanceEnclaveOptionsOutput struct{ *pulumi.OutputState }

func (InstanceEnclaveOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEnclaveOptions)(nil)).Elem()
}

func (o InstanceEnclaveOptionsOutput) ToInstanceEnclaveOptionsOutput() InstanceEnclaveOptionsOutput {
	return o
}

func (o InstanceEnclaveOptionsOutput) ToInstanceEnclaveOptionsOutputWithContext(ctx context.Context) InstanceEnclaveOptionsOutput {
	return o
}

func (o InstanceEnclaveOptionsOutput) ToInstanceEnclaveOptionsPtrOutput() InstanceEnclaveOptionsPtrOutput {
	return o.ToInstanceEnclaveOptionsPtrOutputWithContext(context.Background())
}

func (o InstanceEnclaveOptionsOutput) ToInstanceEnclaveOptionsPtrOutputWithContext(ctx context.Context) InstanceEnclaveOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceEnclaveOptions) *InstanceEnclaveOptions {
		return &v
	}).(InstanceEnclaveOptionsPtrOutput)
}

func (o InstanceEnclaveOptionsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceEnclaveOptions) bool { return v.Enabled }).(pulumi.BoolOutput)
}

type InstanceEnclaveOptionsPtrOutput struct{ *pulumi.OutputState }

func (InstanceEnclaveOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceEnclaveOptions)(nil)).Elem()
}

func (o InstanceEnclaveOptionsPtrOutput) ToInstanceEnclaveOptionsPtrOutput() InstanceEnclaveOptionsPtrOutput {
	return o
}

func (o InstanceEnclaveOptionsPtrOutput) ToInstanceEnclaveOptionsPtrOutputWithContext(ctx context.Context) InstanceEnclaveOptionsPtrOutput {
	return o
}

func (o InstanceEnclaveOptionsPtrOutput) Elem() InstanceEnclaveOptionsOutput {
	return o.ApplyT(func(v *InstanceEnclaveOptions) InstanceEnclaveOptions {
		if v != nil {
			return *v
		}
		var ret InstanceEnclaveOptions
		return ret
	}).(InstanceEnclaveOptionsOutput)
}

func (o InstanceEnclaveOptionsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceEnclaveOptions) *bool {
		if v == nil {
			return nil
		}
		return &v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type InstanceNetwork struct {
	AccessNetwork *bool   `pulumi:"accessNetwork"`
	FixedIpV4     *string `pulumi:"fixedIpV4"`
	// schema: Computed
	FixedIpV6  *string `pulumi:"fixedIpV6"`
	Ipv6Enable *bool   `pulumi:"ipv6Enable"`
	Mac        *string `pulumi:"mac"`
	// schema: Computed
	Port            *string `pulumi:"port"`
	SourceDestCheck *bool   `pulumi:"sourceDestCheck"`
	// schema: Required
	Uuid *string `pulumi:"uuid"`
}

// InstanceNetworkInput is an input type that accepts InstanceNetworkArgs and InstanceNetworkOutput values.
// You can construct a concrete instance of `InstanceNetworkInput` via:
//
//	InstanceNetworkArgs{...}
type InstanceNetworkInput interface {
	pulumi.Input

	ToInstanceNetworkOutput() InstanceNetworkOutput
	ToInstanceNetworkOutputWithContext(context.Context) InstanceNetworkOutput
}

type InstanceNetworkArgs struct {
	AccessNetwork pulumi.BoolPtrInput   `pulumi:"accessNetwork"`
	FixedIpV4     pulumi.StringPtrInput `pulumi:"fixedIpV4"`
	// schema: Computed
	FixedIpV6  pulumi.StringPtrInput `pulumi:"fixedIpV6"`
	Ipv6Enable pulumi.BoolPtrInput   `pulumi:"ipv6Enable"`
	Mac        pulumi.StringPtrInput `pulumi:"mac"`
	// schema: Computed
	Port            pulumi.StringPtrInput `pulumi:"port"`
	SourceDestCheck pulumi.BoolPtrInput   `pulumi:"sourceDestCheck"`
	// schema: Required
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
}

func (InstanceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetwork)(nil)).Elem()
}

func (i InstanceNetworkArgs) ToInstanceNetworkOutput() InstanceNetworkOutput {
	return i.ToInstanceNetworkOutputWithContext(context.Background())
}

func (i InstanceNetworkArgs) ToInstanceNetworkOutputWithContext(ctx context.Context) InstanceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkOutput)
}

// InstanceNetworkArrayInput is an input type that accepts InstanceNetworkArray and InstanceNetworkArrayOutput values.
// You can construct a concrete instance of `InstanceNetworkArrayInput` via:
//
//	InstanceNetworkArray{ InstanceNetworkArgs{...} }
type InstanceNetworkArrayInput interface {
	pulumi.Input

	ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput
	ToInstanceNetworkArrayOutputWithContext(context.Context) InstanceNetworkArrayOutput
}

type InstanceNetworkArray []InstanceNetworkInput

func (InstanceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetwork)(nil)).Elem()
}

func (i InstanceNetworkArray) ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput {
	return i.ToInstanceNetworkArrayOutputWithContext(context.Background())
}

func (i InstanceNetworkArray) ToInstanceNetworkArrayOutputWithContext(ctx context.Context) InstanceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNetworkArrayOutput)
}

type InstanceNetworkOutput struct{ *pulumi.OutputState }

func (InstanceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNetwork)(nil)).Elem()
}

func (o InstanceNetworkOutput) ToInstanceNetworkOutput() InstanceNetworkOutput {
	return o
}

func (o InstanceNetworkOutput) ToInstanceNetworkOutputWithContext(ctx context.Context) InstanceNetworkOutput {
	return o
}

func (o InstanceNetworkOutput) AccessNetwork() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *bool { return v.AccessNetwork }).(pulumi.BoolPtrOutput)
}

func (o InstanceNetworkOutput) FixedIpV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *string { return v.FixedIpV4 }).(pulumi.StringPtrOutput)
}

// schema: Computed
func (o InstanceNetworkOutput) FixedIpV6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *string { return v.FixedIpV6 }).(pulumi.StringPtrOutput)
}

func (o InstanceNetworkOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *bool { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

func (o InstanceNetworkOutput) Mac() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *string { return v.Mac }).(pulumi.StringPtrOutput)
}

// schema: Computed
func (o InstanceNetworkOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *string { return v.Port }).(pulumi.StringPtrOutput)
}

func (o InstanceNetworkOutput) SourceDestCheck() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *bool { return v.SourceDestCheck }).(pulumi.BoolPtrOutput)
}

// schema: Required
func (o InstanceNetworkOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNetwork) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

type InstanceNetworkArrayOutput struct{ *pulumi.OutputState }

func (InstanceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNetwork)(nil)).Elem()
}

func (o InstanceNetworkArrayOutput) ToInstanceNetworkArrayOutput() InstanceNetworkArrayOutput {
	return o
}

func (o InstanceNetworkArrayOutput) ToInstanceNetworkArrayOutputWithContext(ctx context.Context) InstanceNetworkArrayOutput {
	return o
}

func (o InstanceNetworkArrayOutput) Index(i pulumi.IntInput) InstanceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNetwork {
		return vs[0].([]InstanceNetwork)[vs[1].(int)]
	}).(InstanceNetworkOutput)
}

type InstanceSchedulerHint struct {
	DehId *string `pulumi:"dehId"`
	// schema: Internal
	FaultDomain *string `pulumi:"faultDomain"`
	Group       *string `pulumi:"group"`
	Tenancy     *string `pulumi:"tenancy"`
}

// InstanceSchedulerHintInput is an input type that accepts InstanceSchedulerHintArgs and InstanceSchedulerHintOutput values.
// You can construct a concrete instance of `InstanceSchedulerHintInput` via:
//
//	InstanceSchedulerHintArgs{...}
type InstanceSchedulerHintInput interface {
	pulumi.Input

	ToInstanceSchedulerHintOutput() InstanceSchedulerHintOutput
	ToInstanceSchedulerHintOutputWithContext(context.Context) InstanceSchedulerHintOutput
}

type InstanceSchedulerHintArgs struct {
	DehId pulumi.StringPtrInput `pulumi:"dehId"`
	// schema: Internal
	FaultDomain pulumi.StringPtrInput `pulumi:"faultDomain"`
	Group       pulumi.StringPtrInput `pulumi:"group"`
	Tenancy     pulumi.StringPtrInput `pulumi:"tenancy"`
}

func (InstanceSchedulerHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSchedulerHint)(nil)).Elem()
}

func (i InstanceSchedulerHintArgs) ToInstanceSchedulerHintOutput() InstanceSchedulerHintOutput {
	return i.ToInstanceSchedulerHintOutputWithContext(context.Background())
}

func (i InstanceSchedulerHintArgs) ToInstanceSchedulerHintOutputWithContext(ctx context.Context) InstanceSchedulerHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSchedulerHintOutput)
}

// InstanceSchedulerHintArrayInput is an input type that accepts InstanceSchedulerHintArray and InstanceSchedulerHintArrayOutput values.
// You can construct a concrete instance of `InstanceSchedulerHintArrayInput` via:
//
//	InstanceSchedulerHintArray{ InstanceSchedulerHintArgs{...} }
type InstanceSchedulerHintArrayInput interface {
	pulumi.Input

	ToInstanceSchedulerHintArrayOutput() InstanceSchedulerHintArrayOutput
	ToInstanceSchedulerHintArrayOutputWithContext(context.Context) InstanceSchedulerHintArrayOutput
}

type InstanceSchedulerHintArray []InstanceSchedulerHintInput

func (InstanceSchedulerHintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSchedulerHint)(nil)).Elem()
}

func (i InstanceSchedulerHintArray) ToInstanceSchedulerHintArrayOutput() InstanceSchedulerHintArrayOutput {
	return i.ToInstanceSchedulerHintArrayOutputWithContext(context.Background())
}

func (i InstanceSchedulerHintArray) ToInstanceSchedulerHintArrayOutputWithContext(ctx context.Context) InstanceSchedulerHintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSchedulerHintArrayOutput)
}

type InstanceSchedulerHintOutput struct{ *pulumi.OutputState }

func (InstanceSchedulerHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSchedulerHint)(nil)).Elem()
}

func (o InstanceSchedulerHintOutput) ToInstanceSchedulerHintOutput() InstanceSchedulerHintOutput {
	return o
}

func (o InstanceSchedulerHintOutput) ToInstanceSchedulerHintOutputWithContext(ctx context.Context) InstanceSchedulerHintOutput {
	return o
}

func (o InstanceSchedulerHintOutput) DehId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSchedulerHint) *string { return v.DehId }).(pulumi.StringPtrOutput)
}

// schema: Internal
func (o InstanceSchedulerHintOutput) FaultDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSchedulerHint) *string { return v.FaultDomain }).(pulumi.StringPtrOutput)
}

func (o InstanceSchedulerHintOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSchedulerHint) *string { return v.Group }).(pulumi.StringPtrOutput)
}

func (o InstanceSchedulerHintOutput) Tenancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSchedulerHint) *string { return v.Tenancy }).(pulumi.StringPtrOutput)
}

type InstanceSchedulerHintArrayOutput struct{ *pulumi.OutputState }

func (InstanceSchedulerHintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSchedulerHint)(nil)).Elem()
}

func (o InstanceSchedulerHintArrayOutput) ToInstanceSchedulerHintArrayOutput() InstanceSchedulerHintArrayOutput {
	return o
}

func (o InstanceSchedulerHintArrayOutput) ToInstanceSchedulerHintArrayOutputWithContext(ctx context.Context) InstanceSchedulerHintArrayOutput {
	return o
}

func (o InstanceSchedulerHintArrayOutput) Index(i pulumi.IntInput) InstanceSchedulerHintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSchedulerHint {
		return vs[0].([]InstanceSchedulerHint)[vs[1].(int)]
	}).(InstanceSchedulerHintOutput)
}

type InstanceVolumeAttached struct {
	BootIndex  *int    `pulumi:"bootIndex"`
	KmsKeyId   *string `pulumi:"kmsKeyId"`
	PciAddress *string `pulumi:"pciAddress"`
	Size       *int    `pulumi:"size"`
	Type       *string `pulumi:"type"`
	VolumeId   *string `pulumi:"volumeId"`
}

// InstanceVolumeAttachedInput is an input type that accepts InstanceVolumeAttachedArgs and InstanceVolumeAttachedOutput values.
// You can construct a concrete instance of `InstanceVolumeAttachedInput` via:
//
//	InstanceVolumeAttachedArgs{...}
type InstanceVolumeAttachedInput interface {
	pulumi.Input

	ToInstanceVolumeAttachedOutput() InstanceVolumeAttachedOutput
	ToInstanceVolumeAttachedOutputWithContext(context.Context) InstanceVolumeAttachedOutput
}

type InstanceVolumeAttachedArgs struct {
	BootIndex  pulumi.IntPtrInput    `pulumi:"bootIndex"`
	KmsKeyId   pulumi.StringPtrInput `pulumi:"kmsKeyId"`
	PciAddress pulumi.StringPtrInput `pulumi:"pciAddress"`
	Size       pulumi.IntPtrInput    `pulumi:"size"`
	Type       pulumi.StringPtrInput `pulumi:"type"`
	VolumeId   pulumi.StringPtrInput `pulumi:"volumeId"`
}

func (InstanceVolumeAttachedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceVolumeAttached)(nil)).Elem()
}

func (i InstanceVolumeAttachedArgs) ToInstanceVolumeAttachedOutput() InstanceVolumeAttachedOutput {
	return i.ToInstanceVolumeAttachedOutputWithContext(context.Background())
}

func (i InstanceVolumeAttachedArgs) ToInstanceVolumeAttachedOutputWithContext(ctx context.Context) InstanceVolumeAttachedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceVolumeAttachedOutput)
}

// InstanceVolumeAttachedArrayInput is an input type that accepts InstanceVolumeAttachedArray and InstanceVolumeAttachedArrayOutput values.
// You can construct a concrete instance of `InstanceVolumeAttachedArrayInput` via:
//
//	InstanceVolumeAttachedArray{ InstanceVolumeAttachedArgs{...} }
type InstanceVolumeAttachedArrayInput interface {
	pulumi.Input

	ToInstanceVolumeAttachedArrayOutput() InstanceVolumeAttachedArrayOutput
	ToInstanceVolumeAttachedArrayOutputWithContext(context.Context) InstanceVolumeAttachedArrayOutput
}

type InstanceVolumeAttachedArray []InstanceVolumeAttachedInput

func (InstanceVolumeAttachedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceVolumeAttached)(nil)).Elem()
}

func (i InstanceVolumeAttachedArray) ToInstanceVolumeAttachedArrayOutput() InstanceVolumeAttachedArrayOutput {
	return i.ToInstanceVolumeAttachedArrayOutputWithContext(context.Background())
}

func (i InstanceVolumeAttachedArray) ToInstanceVolumeAttachedArrayOutputWithContext(ctx context.Context) InstanceVolumeAttachedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceVolumeAttachedArrayOutput)
}

type InstanceVolumeAttachedOutput struct{ *pulumi.OutputState }

func (InstanceVolumeAttachedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceVolumeAttached)(nil)).Elem()
}

func (o InstanceVolumeAttachedOutput) ToInstanceVolumeAttachedOutput() InstanceVolumeAttachedOutput {
	return o
}

func (o InstanceVolumeAttachedOutput) ToInstanceVolumeAttachedOutputWithContext(ctx context.Context) InstanceVolumeAttachedOutput {
	return o
}

func (o InstanceVolumeAttachedOutput) BootIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceVolumeAttached) *int { return v.BootIndex }).(pulumi.IntPtrOutput)
}

func (o InstanceVolumeAttachedOutput) KmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVolumeAttached) *string { return v.KmsKeyId }).(pulumi.StringPtrOutput)
}

func (o InstanceVolumeAttachedOutput) PciAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVolumeAttached) *string { return v.PciAddress }).(pulumi.StringPtrOutput)
}

func (o InstanceVolumeAttachedOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceVolumeAttached) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o InstanceVolumeAttachedOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVolumeAttached) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o InstanceVolumeAttachedOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVolumeAttached) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

type InstanceVolumeAttachedArrayOutput struct{ *pulumi.OutputState }

func (InstanceVolumeAttachedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceVolumeAttached)(nil)).Elem()
}

func (o InstanceVolumeAttachedArrayOutput) ToInstanceVolumeAttachedArrayOutput() InstanceVolumeAttachedArrayOutput {
	return o
}

func (o InstanceVolumeAttachedArrayOutput) ToInstanceVolumeAttachedArrayOutputWithContext(ctx context.Context) InstanceVolumeAttachedArrayOutput {
	return o
}

func (o InstanceVolumeAttachedArrayOutput) Index(i pulumi.IntInput) InstanceVolumeAttachedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceVolumeAttached {
		return vs[0].([]InstanceVolumeAttached)[vs[1].(int)]
	}).(InstanceVolumeAttachedOutput)
}

type GetFlavorsFlavor struct {
	CpuCoreCount    int    `pulumi:"cpuCoreCount"`
	Generation      string `pulumi:"generation"`
	Id              string `pulumi:"id"`
	MemorySize      int    `pulumi:"memorySize"`
	PerformanceType string `pulumi:"performanceType"`
	StorageType     string `pulumi:"storageType"`
}

// GetFlavorsFlavorInput is an input type that accepts GetFlavorsFlavorArgs and GetFlavorsFlavorOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorInput` via:
//
//	GetFlavorsFlavorArgs{...}
type GetFlavorsFlavorInput interface {
	pulumi.Input

	ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput
	ToGetFlavorsFlavorOutputWithContext(context.Context) GetFlavorsFlavorOutput
}

type GetFlavorsFlavorArgs struct {
	CpuCoreCount    pulumi.IntInput    `pulumi:"cpuCoreCount"`
	Generation      pulumi.StringInput `pulumi:"generation"`
	Id              pulumi.StringInput `pulumi:"id"`
	MemorySize      pulumi.IntInput    `pulumi:"memorySize"`
	PerformanceType pulumi.StringInput `pulumi:"performanceType"`
	StorageType     pulumi.StringInput `pulumi:"storageType"`
}

func (GetFlavorsFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return i.ToGetFlavorsFlavorOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorOutput)
}

// GetFlavorsFlavorArrayInput is an input type that accepts GetFlavorsFlavorArray and GetFlavorsFlavorArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorArrayInput` via:
//
//	GetFlavorsFlavorArray{ GetFlavorsFlavorArgs{...} }
type GetFlavorsFlavorArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput
	ToGetFlavorsFlavorArrayOutputWithContext(context.Context) GetFlavorsFlavorArrayOutput
}

type GetFlavorsFlavorArray []GetFlavorsFlavorInput

func (GetFlavorsFlavorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return i.ToGetFlavorsFlavorArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorArrayOutput)
}

type GetFlavorsFlavorOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) CpuCoreCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) int { return v.CpuCoreCount }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorOutput) Generation() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Generation }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) int { return v.MemorySize }).(pulumi.IntOutput)
}

func (o GetFlavorsFlavorOutput) PerformanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.PerformanceType }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.StorageType }).(pulumi.StringOutput)
}

type GetFlavorsFlavorArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavor {
		return vs[0].([]GetFlavorsFlavor)[vs[1].(int)]
	}).(GetFlavorsFlavorOutput)
}

type GetInstanceNetwork struct {
	FixedIpV4 string `pulumi:"fixedIpV4"`
	FixedIpV6 string `pulumi:"fixedIpV6"`
	Mac       string `pulumi:"mac"`
	Port      string `pulumi:"port"`
	Uuid      string `pulumi:"uuid"`
}

// GetInstanceNetworkInput is an input type that accepts GetInstanceNetworkArgs and GetInstanceNetworkOutput values.
// You can construct a concrete instance of `GetInstanceNetworkInput` via:
//
//	GetInstanceNetworkArgs{...}
type GetInstanceNetworkInput interface {
	pulumi.Input

	ToGetInstanceNetworkOutput() GetInstanceNetworkOutput
	ToGetInstanceNetworkOutputWithContext(context.Context) GetInstanceNetworkOutput
}

type GetInstanceNetworkArgs struct {
	FixedIpV4 pulumi.StringInput `pulumi:"fixedIpV4"`
	FixedIpV6 pulumi.StringInput `pulumi:"fixedIpV6"`
	Mac       pulumi.StringInput `pulumi:"mac"`
	Port      pulumi.StringInput `pulumi:"port"`
	Uuid      pulumi.StringInput `pulumi:"uuid"`
}

func (GetInstanceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetwork)(nil)).Elem()
}

func (i GetInstanceNetworkArgs) ToGetInstanceNetworkOutput() GetInstanceNetworkOutput {
	return i.ToGetInstanceNetworkOutputWithContext(context.Background())
}

func (i GetInstanceNetworkArgs) ToGetInstanceNetworkOutputWithContext(ctx context.Context) GetInstanceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkOutput)
}

// GetInstanceNetworkArrayInput is an input type that accepts GetInstanceNetworkArray and GetInstanceNetworkArrayOutput values.
// You can construct a concrete instance of `GetInstanceNetworkArrayInput` via:
//
//	GetInstanceNetworkArray{ GetInstanceNetworkArgs{...} }
type GetInstanceNetworkArrayInput interface {
	pulumi.Input

	ToGetInstanceNetworkArrayOutput() GetInstanceNetworkArrayOutput
	ToGetInstanceNetworkArrayOutputWithContext(context.Context) GetInstanceNetworkArrayOutput
}

type GetInstanceNetworkArray []GetInstanceNetworkInput

func (GetInstanceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetwork)(nil)).Elem()
}

func (i GetInstanceNetworkArray) ToGetInstanceNetworkArrayOutput() GetInstanceNetworkArrayOutput {
	return i.ToGetInstanceNetworkArrayOutputWithContext(context.Background())
}

func (i GetInstanceNetworkArray) ToGetInstanceNetworkArrayOutputWithContext(ctx context.Context) GetInstanceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceNetworkArrayOutput)
}

type GetInstanceNetworkOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceNetwork)(nil)).Elem()
}

func (o GetInstanceNetworkOutput) ToGetInstanceNetworkOutput() GetInstanceNetworkOutput {
	return o
}

func (o GetInstanceNetworkOutput) ToGetInstanceNetworkOutputWithContext(ctx context.Context) GetInstanceNetworkOutput {
	return o
}

func (o GetInstanceNetworkOutput) FixedIpV4() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetwork) string { return v.FixedIpV4 }).(pulumi.StringOutput)
}

func (o GetInstanceNetworkOutput) FixedIpV6() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetwork) string { return v.FixedIpV6 }).(pulumi.StringOutput)
}

func (o GetInstanceNetworkOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetwork) string { return v.Mac }).(pulumi.StringOutput)
}

func (o GetInstanceNetworkOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetwork) string { return v.Port }).(pulumi.StringOutput)
}

func (o GetInstanceNetworkOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceNetwork) string { return v.Uuid }).(pulumi.StringOutput)
}

type GetInstanceNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceNetwork)(nil)).Elem()
}

func (o GetInstanceNetworkArrayOutput) ToGetInstanceNetworkArrayOutput() GetInstanceNetworkArrayOutput {
	return o
}

func (o GetInstanceNetworkArrayOutput) ToGetInstanceNetworkArrayOutputWithContext(ctx context.Context) GetInstanceNetworkArrayOutput {
	return o
}

func (o GetInstanceNetworkArrayOutput) Index(i pulumi.IntInput) GetInstanceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceNetwork {
		return vs[0].([]GetInstanceNetwork)[vs[1].(int)]
	}).(GetInstanceNetworkOutput)
}

type GetInstanceSchedulerHint struct {
	Group string `pulumi:"group"`
}

// GetInstanceSchedulerHintInput is an input type that accepts GetInstanceSchedulerHintArgs and GetInstanceSchedulerHintOutput values.
// You can construct a concrete instance of `GetInstanceSchedulerHintInput` via:
//
//	GetInstanceSchedulerHintArgs{...}
type GetInstanceSchedulerHintInput interface {
	pulumi.Input

	ToGetInstanceSchedulerHintOutput() GetInstanceSchedulerHintOutput
	ToGetInstanceSchedulerHintOutputWithContext(context.Context) GetInstanceSchedulerHintOutput
}

type GetInstanceSchedulerHintArgs struct {
	Group pulumi.StringInput `pulumi:"group"`
}

func (GetInstanceSchedulerHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSchedulerHint)(nil)).Elem()
}

func (i GetInstanceSchedulerHintArgs) ToGetInstanceSchedulerHintOutput() GetInstanceSchedulerHintOutput {
	return i.ToGetInstanceSchedulerHintOutputWithContext(context.Background())
}

func (i GetInstanceSchedulerHintArgs) ToGetInstanceSchedulerHintOutputWithContext(ctx context.Context) GetInstanceSchedulerHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSchedulerHintOutput)
}

// GetInstanceSchedulerHintArrayInput is an input type that accepts GetInstanceSchedulerHintArray and GetInstanceSchedulerHintArrayOutput values.
// You can construct a concrete instance of `GetInstanceSchedulerHintArrayInput` via:
//
//	GetInstanceSchedulerHintArray{ GetInstanceSchedulerHintArgs{...} }
type GetInstanceSchedulerHintArrayInput interface {
	pulumi.Input

	ToGetInstanceSchedulerHintArrayOutput() GetInstanceSchedulerHintArrayOutput
	ToGetInstanceSchedulerHintArrayOutputWithContext(context.Context) GetInstanceSchedulerHintArrayOutput
}

type GetInstanceSchedulerHintArray []GetInstanceSchedulerHintInput

func (GetInstanceSchedulerHintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSchedulerHint)(nil)).Elem()
}

func (i GetInstanceSchedulerHintArray) ToGetInstanceSchedulerHintArrayOutput() GetInstanceSchedulerHintArrayOutput {
	return i.ToGetInstanceSchedulerHintArrayOutputWithContext(context.Background())
}

func (i GetInstanceSchedulerHintArray) ToGetInstanceSchedulerHintArrayOutputWithContext(ctx context.Context) GetInstanceSchedulerHintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSchedulerHintArrayOutput)
}

type GetInstanceSchedulerHintOutput struct{ *pulumi.OutputState }

func (GetInstanceSchedulerHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSchedulerHint)(nil)).Elem()
}

func (o GetInstanceSchedulerHintOutput) ToGetInstanceSchedulerHintOutput() GetInstanceSchedulerHintOutput {
	return o
}

func (o GetInstanceSchedulerHintOutput) ToGetInstanceSchedulerHintOutputWithContext(ctx context.Context) GetInstanceSchedulerHintOutput {
	return o
}

func (o GetInstanceSchedulerHintOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSchedulerHint) string { return v.Group }).(pulumi.StringOutput)
}

type GetInstanceSchedulerHintArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceSchedulerHintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSchedulerHint)(nil)).Elem()
}

func (o GetInstanceSchedulerHintArrayOutput) ToGetInstanceSchedulerHintArrayOutput() GetInstanceSchedulerHintArrayOutput {
	return o
}

func (o GetInstanceSchedulerHintArrayOutput) ToGetInstanceSchedulerHintArrayOutputWithContext(ctx context.Context) GetInstanceSchedulerHintArrayOutput {
	return o
}

func (o GetInstanceSchedulerHintArrayOutput) Index(i pulumi.IntInput) GetInstanceSchedulerHintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceSchedulerHint {
		return vs[0].([]GetInstanceSchedulerHint)[vs[1].(int)]
	}).(GetInstanceSchedulerHintOutput)
}

type GetInstanceVolumeAttached struct {
	BootIndex   int    `pulumi:"bootIndex"`
	IsSysVolume bool   `pulumi:"isSysVolume"`
	PciAddress  string `pulumi:"pciAddress"`
	Size        int    `pulumi:"size"`
	Type        string `pulumi:"type"`
	VolumeId    string `pulumi:"volumeId"`
}

// GetInstanceVolumeAttachedInput is an input type that accepts GetInstanceVolumeAttachedArgs and GetInstanceVolumeAttachedOutput values.
// You can construct a concrete instance of `GetInstanceVolumeAttachedInput` via:
//
//	GetInstanceVolumeAttachedArgs{...}
type GetInstanceVolumeAttachedInput interface {
	pulumi.Input

	ToGetInstanceVolumeAttachedOutput() GetInstanceVolumeAttachedOutput
	ToGetInstanceVolumeAttachedOutputWithContext(context.Context) GetInstanceVolumeAttachedOutput
}

type GetInstanceVolumeAttachedArgs struct {
	BootIndex   pulumi.IntInput    `pulumi:"bootIndex"`
	IsSysVolume pulumi.BoolInput   `pulumi:"isSysVolume"`
	PciAddress  pulumi.StringInput `pulumi:"pciAddress"`
	Size        pulumi.IntInput    `pulumi:"size"`
	Type        pulumi.StringInput `pulumi:"type"`
	VolumeId    pulumi.StringInput `pulumi:"volumeId"`
}

func (GetInstanceVolumeAttachedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceVolumeAttached)(nil)).Elem()
}

func (i GetInstanceVolumeAttachedArgs) ToGetInstanceVolumeAttachedOutput() GetInstanceVolumeAttachedOutput {
	return i.ToGetInstanceVolumeAttachedOutputWithContext(context.Background())
}

func (i GetInstanceVolumeAttachedArgs) ToGetInstanceVolumeAttachedOutputWithContext(ctx context.Context) GetInstanceVolumeAttachedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceVolumeAttachedOutput)
}

// GetInstanceVolumeAttachedArrayInput is an input type that accepts GetInstanceVolumeAttachedArray and GetInstanceVolumeAttachedArrayOutput values.
// You can construct a concrete instance of `GetInstanceVolumeAttachedArrayInput` via:
//
//	GetInstanceVolumeAttachedArray{ GetInstanceVolumeAttachedArgs{...} }
type GetInstanceVolumeAttachedArrayInput interface {
	pulumi.Input

	ToGetInstanceVolumeAttachedArrayOutput() GetInstanceVolumeAttachedArrayOutput
	ToGetInstanceVolumeAttachedArrayOutputWithContext(context.Context) GetInstanceVolumeAttachedArrayOutput
}

type GetInstanceVolumeAttachedArray []GetInstanceVolumeAttachedInput

func (GetInstanceVolumeAttachedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceVolumeAttached)(nil)).Elem()
}

func (i GetInstanceVolumeAttachedArray) ToGetInstanceVolumeAttachedArrayOutput() GetInstanceVolumeAttachedArrayOutput {
	return i.ToGetInstanceVolumeAttachedArrayOutputWithContext(context.Background())
}

func (i GetInstanceVolumeAttachedArray) ToGetInstanceVolumeAttachedArrayOutputWithContext(ctx context.Context) GetInstanceVolumeAttachedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceVolumeAttachedArrayOutput)
}

type GetInstanceVolumeAttachedOutput struct{ *pulumi.OutputState }

func (GetInstanceVolumeAttachedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceVolumeAttached)(nil)).Elem()
}

func (o GetInstanceVolumeAttachedOutput) ToGetInstanceVolumeAttachedOutput() GetInstanceVolumeAttachedOutput {
	return o
}

func (o GetInstanceVolumeAttachedOutput) ToGetInstanceVolumeAttachedOutputWithContext(ctx context.Context) GetInstanceVolumeAttachedOutput {
	return o
}

func (o GetInstanceVolumeAttachedOutput) BootIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceVolumeAttached) int { return v.BootIndex }).(pulumi.IntOutput)
}

func (o GetInstanceVolumeAttachedOutput) IsSysVolume() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstanceVolumeAttached) bool { return v.IsSysVolume }).(pulumi.BoolOutput)
}

func (o GetInstanceVolumeAttachedOutput) PciAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVolumeAttached) string { return v.PciAddress }).(pulumi.StringOutput)
}

func (o GetInstanceVolumeAttachedOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceVolumeAttached) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetInstanceVolumeAttachedOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVolumeAttached) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetInstanceVolumeAttachedOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVolumeAttached) string { return v.VolumeId }).(pulumi.StringOutput)
}

type GetInstanceVolumeAttachedArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceVolumeAttachedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceVolumeAttached)(nil)).Elem()
}

func (o GetInstanceVolumeAttachedArrayOutput) ToGetInstanceVolumeAttachedArrayOutput() GetInstanceVolumeAttachedArrayOutput {
	return o
}

func (o GetInstanceVolumeAttachedArrayOutput) ToGetInstanceVolumeAttachedArrayOutputWithContext(ctx context.Context) GetInstanceVolumeAttachedArrayOutput {
	return o
}

func (o GetInstanceVolumeAttachedArrayOutput) Index(i pulumi.IntInput) GetInstanceVolumeAttachedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceVolumeAttached {
		return vs[0].([]GetInstanceVolumeAttached)[vs[1].(int)]
	}).(GetInstanceVolumeAttachedOutput)
}

type GetInstancesInstance struct {
	AvailabilityZone    string                               `pulumi:"availabilityZone"`
	ChargingMode        string                               `pulumi:"chargingMode"`
	EnterpriseProjectId string                               `pulumi:"enterpriseProjectId"`
	ExpiredTime         string                               `pulumi:"expiredTime"`
	FlavorId            string                               `pulumi:"flavorId"`
	FlavorName          string                               `pulumi:"flavorName"`
	Id                  string                               `pulumi:"id"`
	ImageId             string                               `pulumi:"imageId"`
	ImageName           string                               `pulumi:"imageName"`
	KeyPair             string                               `pulumi:"keyPair"`
	Name                string                               `pulumi:"name"`
	Networks            []GetInstancesInstanceNetwork        `pulumi:"networks"`
	PublicIp            string                               `pulumi:"publicIp"`
	SchedulerHints      []GetInstancesInstanceSchedulerHint  `pulumi:"schedulerHints"`
	SecurityGroupIds    []string                             `pulumi:"securityGroupIds"`
	Status              string                               `pulumi:"status"`
	SystemDiskId        string                               `pulumi:"systemDiskId"`
	Tags                map[string]string                    `pulumi:"tags"`
	UserData            string                               `pulumi:"userData"`
	VolumeAttacheds     []GetInstancesInstanceVolumeAttached `pulumi:"volumeAttacheds"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	AvailabilityZone    pulumi.StringInput                           `pulumi:"availabilityZone"`
	ChargingMode        pulumi.StringInput                           `pulumi:"chargingMode"`
	EnterpriseProjectId pulumi.StringInput                           `pulumi:"enterpriseProjectId"`
	ExpiredTime         pulumi.StringInput                           `pulumi:"expiredTime"`
	FlavorId            pulumi.StringInput                           `pulumi:"flavorId"`
	FlavorName          pulumi.StringInput                           `pulumi:"flavorName"`
	Id                  pulumi.StringInput                           `pulumi:"id"`
	ImageId             pulumi.StringInput                           `pulumi:"imageId"`
	ImageName           pulumi.StringInput                           `pulumi:"imageName"`
	KeyPair             pulumi.StringInput                           `pulumi:"keyPair"`
	Name                pulumi.StringInput                           `pulumi:"name"`
	Networks            GetInstancesInstanceNetworkArrayInput        `pulumi:"networks"`
	PublicIp            pulumi.StringInput                           `pulumi:"publicIp"`
	SchedulerHints      GetInstancesInstanceSchedulerHintArrayInput  `pulumi:"schedulerHints"`
	SecurityGroupIds    pulumi.StringArrayInput                      `pulumi:"securityGroupIds"`
	Status              pulumi.StringInput                           `pulumi:"status"`
	SystemDiskId        pulumi.StringInput                           `pulumi:"systemDiskId"`
	Tags                pulumi.StringMapInput                        `pulumi:"tags"`
	UserData            pulumi.StringInput                           `pulumi:"userData"`
	VolumeAttacheds     GetInstancesInstanceVolumeAttachedArrayInput `pulumi:"volumeAttacheds"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.FlavorId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) FlavorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.FlavorName }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ImageId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ImageName }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) KeyPair() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.KeyPair }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) Networks() GetInstancesInstanceNetworkArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceNetwork { return v.Networks }).(GetInstancesInstanceNetworkArrayOutput)
}

func (o GetInstancesInstanceOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) SchedulerHints() GetInstancesInstanceSchedulerHintArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceSchedulerHint { return v.SchedulerHints }).(GetInstancesInstanceSchedulerHintArrayOutput)
}

func (o GetInstancesInstanceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) SystemDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.SystemDiskId }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetInstancesInstance) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetInstancesInstanceOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.UserData }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceOutput) VolumeAttacheds() GetInstancesInstanceVolumeAttachedArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceVolumeAttached { return v.VolumeAttacheds }).(GetInstancesInstanceVolumeAttachedArrayOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetInstancesInstanceNetwork struct {
	FixedIpV4 string `pulumi:"fixedIpV4"`
	FixedIpV6 string `pulumi:"fixedIpV6"`
	Mac       string `pulumi:"mac"`
	Port      string `pulumi:"port"`
	Uuid      string `pulumi:"uuid"`
}

// GetInstancesInstanceNetworkInput is an input type that accepts GetInstancesInstanceNetworkArgs and GetInstancesInstanceNetworkOutput values.
// You can construct a concrete instance of `GetInstancesInstanceNetworkInput` via:
//
//	GetInstancesInstanceNetworkArgs{...}
type GetInstancesInstanceNetworkInput interface {
	pulumi.Input

	ToGetInstancesInstanceNetworkOutput() GetInstancesInstanceNetworkOutput
	ToGetInstancesInstanceNetworkOutputWithContext(context.Context) GetInstancesInstanceNetworkOutput
}

type GetInstancesInstanceNetworkArgs struct {
	FixedIpV4 pulumi.StringInput `pulumi:"fixedIpV4"`
	FixedIpV6 pulumi.StringInput `pulumi:"fixedIpV6"`
	Mac       pulumi.StringInput `pulumi:"mac"`
	Port      pulumi.StringInput `pulumi:"port"`
	Uuid      pulumi.StringInput `pulumi:"uuid"`
}

func (GetInstancesInstanceNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceNetwork)(nil)).Elem()
}

func (i GetInstancesInstanceNetworkArgs) ToGetInstancesInstanceNetworkOutput() GetInstancesInstanceNetworkOutput {
	return i.ToGetInstancesInstanceNetworkOutputWithContext(context.Background())
}

func (i GetInstancesInstanceNetworkArgs) ToGetInstancesInstanceNetworkOutputWithContext(ctx context.Context) GetInstancesInstanceNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceNetworkOutput)
}

// GetInstancesInstanceNetworkArrayInput is an input type that accepts GetInstancesInstanceNetworkArray and GetInstancesInstanceNetworkArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceNetworkArrayInput` via:
//
//	GetInstancesInstanceNetworkArray{ GetInstancesInstanceNetworkArgs{...} }
type GetInstancesInstanceNetworkArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceNetworkArrayOutput() GetInstancesInstanceNetworkArrayOutput
	ToGetInstancesInstanceNetworkArrayOutputWithContext(context.Context) GetInstancesInstanceNetworkArrayOutput
}

type GetInstancesInstanceNetworkArray []GetInstancesInstanceNetworkInput

func (GetInstancesInstanceNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceNetwork)(nil)).Elem()
}

func (i GetInstancesInstanceNetworkArray) ToGetInstancesInstanceNetworkArrayOutput() GetInstancesInstanceNetworkArrayOutput {
	return i.ToGetInstancesInstanceNetworkArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceNetworkArray) ToGetInstancesInstanceNetworkArrayOutputWithContext(ctx context.Context) GetInstancesInstanceNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceNetworkArrayOutput)
}

type GetInstancesInstanceNetworkOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceNetwork)(nil)).Elem()
}

func (o GetInstancesInstanceNetworkOutput) ToGetInstancesInstanceNetworkOutput() GetInstancesInstanceNetworkOutput {
	return o
}

func (o GetInstancesInstanceNetworkOutput) ToGetInstancesInstanceNetworkOutputWithContext(ctx context.Context) GetInstancesInstanceNetworkOutput {
	return o
}

func (o GetInstancesInstanceNetworkOutput) FixedIpV4() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetwork) string { return v.FixedIpV4 }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceNetworkOutput) FixedIpV6() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetwork) string { return v.FixedIpV6 }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceNetworkOutput) Mac() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetwork) string { return v.Mac }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceNetworkOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetwork) string { return v.Port }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceNetworkOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetwork) string { return v.Uuid }).(pulumi.StringOutput)
}

type GetInstancesInstanceNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceNetwork)(nil)).Elem()
}

func (o GetInstancesInstanceNetworkArrayOutput) ToGetInstancesInstanceNetworkArrayOutput() GetInstancesInstanceNetworkArrayOutput {
	return o
}

func (o GetInstancesInstanceNetworkArrayOutput) ToGetInstancesInstanceNetworkArrayOutputWithContext(ctx context.Context) GetInstancesInstanceNetworkArrayOutput {
	return o
}

func (o GetInstancesInstanceNetworkArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceNetwork {
		return vs[0].([]GetInstancesInstanceNetwork)[vs[1].(int)]
	}).(GetInstancesInstanceNetworkOutput)
}

type GetInstancesInstanceSchedulerHint struct {
	Group string `pulumi:"group"`
}

// GetInstancesInstanceSchedulerHintInput is an input type that accepts GetInstancesInstanceSchedulerHintArgs and GetInstancesInstanceSchedulerHintOutput values.
// You can construct a concrete instance of `GetInstancesInstanceSchedulerHintInput` via:
//
//	GetInstancesInstanceSchedulerHintArgs{...}
type GetInstancesInstanceSchedulerHintInput interface {
	pulumi.Input

	ToGetInstancesInstanceSchedulerHintOutput() GetInstancesInstanceSchedulerHintOutput
	ToGetInstancesInstanceSchedulerHintOutputWithContext(context.Context) GetInstancesInstanceSchedulerHintOutput
}

type GetInstancesInstanceSchedulerHintArgs struct {
	Group pulumi.StringInput `pulumi:"group"`
}

func (GetInstancesInstanceSchedulerHintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceSchedulerHint)(nil)).Elem()
}

func (i GetInstancesInstanceSchedulerHintArgs) ToGetInstancesInstanceSchedulerHintOutput() GetInstancesInstanceSchedulerHintOutput {
	return i.ToGetInstancesInstanceSchedulerHintOutputWithContext(context.Background())
}

func (i GetInstancesInstanceSchedulerHintArgs) ToGetInstancesInstanceSchedulerHintOutputWithContext(ctx context.Context) GetInstancesInstanceSchedulerHintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceSchedulerHintOutput)
}

// GetInstancesInstanceSchedulerHintArrayInput is an input type that accepts GetInstancesInstanceSchedulerHintArray and GetInstancesInstanceSchedulerHintArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceSchedulerHintArrayInput` via:
//
//	GetInstancesInstanceSchedulerHintArray{ GetInstancesInstanceSchedulerHintArgs{...} }
type GetInstancesInstanceSchedulerHintArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceSchedulerHintArrayOutput() GetInstancesInstanceSchedulerHintArrayOutput
	ToGetInstancesInstanceSchedulerHintArrayOutputWithContext(context.Context) GetInstancesInstanceSchedulerHintArrayOutput
}

type GetInstancesInstanceSchedulerHintArray []GetInstancesInstanceSchedulerHintInput

func (GetInstancesInstanceSchedulerHintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceSchedulerHint)(nil)).Elem()
}

func (i GetInstancesInstanceSchedulerHintArray) ToGetInstancesInstanceSchedulerHintArrayOutput() GetInstancesInstanceSchedulerHintArrayOutput {
	return i.ToGetInstancesInstanceSchedulerHintArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceSchedulerHintArray) ToGetInstancesInstanceSchedulerHintArrayOutputWithContext(ctx context.Context) GetInstancesInstanceSchedulerHintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceSchedulerHintArrayOutput)
}

type GetInstancesInstanceSchedulerHintOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceSchedulerHintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceSchedulerHint)(nil)).Elem()
}

func (o GetInstancesInstanceSchedulerHintOutput) ToGetInstancesInstanceSchedulerHintOutput() GetInstancesInstanceSchedulerHintOutput {
	return o
}

func (o GetInstancesInstanceSchedulerHintOutput) ToGetInstancesInstanceSchedulerHintOutputWithContext(ctx context.Context) GetInstancesInstanceSchedulerHintOutput {
	return o
}

func (o GetInstancesInstanceSchedulerHintOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceSchedulerHint) string { return v.Group }).(pulumi.StringOutput)
}

type GetInstancesInstanceSchedulerHintArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceSchedulerHintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceSchedulerHint)(nil)).Elem()
}

func (o GetInstancesInstanceSchedulerHintArrayOutput) ToGetInstancesInstanceSchedulerHintArrayOutput() GetInstancesInstanceSchedulerHintArrayOutput {
	return o
}

func (o GetInstancesInstanceSchedulerHintArrayOutput) ToGetInstancesInstanceSchedulerHintArrayOutputWithContext(ctx context.Context) GetInstancesInstanceSchedulerHintArrayOutput {
	return o
}

func (o GetInstancesInstanceSchedulerHintArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceSchedulerHintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceSchedulerHint {
		return vs[0].([]GetInstancesInstanceSchedulerHint)[vs[1].(int)]
	}).(GetInstancesInstanceSchedulerHintOutput)
}

type GetInstancesInstanceVolumeAttached struct {
	BootIndex   int    `pulumi:"bootIndex"`
	IsSysVolume bool   `pulumi:"isSysVolume"`
	PciAddress  string `pulumi:"pciAddress"`
	Size        int    `pulumi:"size"`
	Type        string `pulumi:"type"`
	VolumeId    string `pulumi:"volumeId"`
}

// GetInstancesInstanceVolumeAttachedInput is an input type that accepts GetInstancesInstanceVolumeAttachedArgs and GetInstancesInstanceVolumeAttachedOutput values.
// You can construct a concrete instance of `GetInstancesInstanceVolumeAttachedInput` via:
//
//	GetInstancesInstanceVolumeAttachedArgs{...}
type GetInstancesInstanceVolumeAttachedInput interface {
	pulumi.Input

	ToGetInstancesInstanceVolumeAttachedOutput() GetInstancesInstanceVolumeAttachedOutput
	ToGetInstancesInstanceVolumeAttachedOutputWithContext(context.Context) GetInstancesInstanceVolumeAttachedOutput
}

type GetInstancesInstanceVolumeAttachedArgs struct {
	BootIndex   pulumi.IntInput    `pulumi:"bootIndex"`
	IsSysVolume pulumi.BoolInput   `pulumi:"isSysVolume"`
	PciAddress  pulumi.StringInput `pulumi:"pciAddress"`
	Size        pulumi.IntInput    `pulumi:"size"`
	Type        pulumi.StringInput `pulumi:"type"`
	VolumeId    pulumi.StringInput `pulumi:"volumeId"`
}

func (GetInstancesInstanceVolumeAttachedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceVolumeAttached)(nil)).Elem()
}

func (i GetInstancesInstanceVolumeAttachedArgs) ToGetInstancesInstanceVolumeAttachedOutput() GetInstancesInstanceVolumeAttachedOutput {
	return i.ToGetInstancesInstanceVolumeAttachedOutputWithContext(context.Background())
}

func (i GetInstancesInstanceVolumeAttachedArgs) ToGetInstancesInstanceVolumeAttachedOutputWithContext(ctx context.Context) GetInstancesInstanceVolumeAttachedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceVolumeAttachedOutput)
}

// GetInstancesInstanceVolumeAttachedArrayInput is an input type that accepts GetInstancesInstanceVolumeAttachedArray and GetInstancesInstanceVolumeAttachedArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceVolumeAttachedArrayInput` via:
//
//	GetInstancesInstanceVolumeAttachedArray{ GetInstancesInstanceVolumeAttachedArgs{...} }
type GetInstancesInstanceVolumeAttachedArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceVolumeAttachedArrayOutput() GetInstancesInstanceVolumeAttachedArrayOutput
	ToGetInstancesInstanceVolumeAttachedArrayOutputWithContext(context.Context) GetInstancesInstanceVolumeAttachedArrayOutput
}

type GetInstancesInstanceVolumeAttachedArray []GetInstancesInstanceVolumeAttachedInput

func (GetInstancesInstanceVolumeAttachedArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceVolumeAttached)(nil)).Elem()
}

func (i GetInstancesInstanceVolumeAttachedArray) ToGetInstancesInstanceVolumeAttachedArrayOutput() GetInstancesInstanceVolumeAttachedArrayOutput {
	return i.ToGetInstancesInstanceVolumeAttachedArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceVolumeAttachedArray) ToGetInstancesInstanceVolumeAttachedArrayOutputWithContext(ctx context.Context) GetInstancesInstanceVolumeAttachedArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceVolumeAttachedArrayOutput)
}

type GetInstancesInstanceVolumeAttachedOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceVolumeAttachedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceVolumeAttached)(nil)).Elem()
}

func (o GetInstancesInstanceVolumeAttachedOutput) ToGetInstancesInstanceVolumeAttachedOutput() GetInstancesInstanceVolumeAttachedOutput {
	return o
}

func (o GetInstancesInstanceVolumeAttachedOutput) ToGetInstancesInstanceVolumeAttachedOutputWithContext(ctx context.Context) GetInstancesInstanceVolumeAttachedOutput {
	return o
}

func (o GetInstancesInstanceVolumeAttachedOutput) BootIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolumeAttached) int { return v.BootIndex }).(pulumi.IntOutput)
}

func (o GetInstancesInstanceVolumeAttachedOutput) IsSysVolume() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolumeAttached) bool { return v.IsSysVolume }).(pulumi.BoolOutput)
}

func (o GetInstancesInstanceVolumeAttachedOutput) PciAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolumeAttached) string { return v.PciAddress }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceVolumeAttachedOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolumeAttached) int { return v.Size }).(pulumi.IntOutput)
}

func (o GetInstancesInstanceVolumeAttachedOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolumeAttached) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetInstancesInstanceVolumeAttachedOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolumeAttached) string { return v.VolumeId }).(pulumi.StringOutput)
}

type GetInstancesInstanceVolumeAttachedArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceVolumeAttachedArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceVolumeAttached)(nil)).Elem()
}

func (o GetInstancesInstanceVolumeAttachedArrayOutput) ToGetInstancesInstanceVolumeAttachedArrayOutput() GetInstancesInstanceVolumeAttachedArrayOutput {
	return o
}

func (o GetInstancesInstanceVolumeAttachedArrayOutput) ToGetInstancesInstanceVolumeAttachedArrayOutputWithContext(ctx context.Context) GetInstancesInstanceVolumeAttachedArrayOutput {
	return o
}

func (o GetInstancesInstanceVolumeAttachedArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceVolumeAttachedOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceVolumeAttached {
		return vs[0].([]GetInstancesInstanceVolumeAttached)[vs[1].(int)]
	}).(GetInstancesInstanceVolumeAttachedOutput)
}

type GetServergroupsServergroup struct {
	Id       string   `pulumi:"id"`
	Members  []string `pulumi:"members"`
	Name     string   `pulumi:"name"`
	Policies []string `pulumi:"policies"`
}

// GetServergroupsServergroupInput is an input type that accepts GetServergroupsServergroupArgs and GetServergroupsServergroupOutput values.
// You can construct a concrete instance of `GetServergroupsServergroupInput` via:
//
//	GetServergroupsServergroupArgs{...}
type GetServergroupsServergroupInput interface {
	pulumi.Input

	ToGetServergroupsServergroupOutput() GetServergroupsServergroupOutput
	ToGetServergroupsServergroupOutputWithContext(context.Context) GetServergroupsServergroupOutput
}

type GetServergroupsServergroupArgs struct {
	Id       pulumi.StringInput      `pulumi:"id"`
	Members  pulumi.StringArrayInput `pulumi:"members"`
	Name     pulumi.StringInput      `pulumi:"name"`
	Policies pulumi.StringArrayInput `pulumi:"policies"`
}

func (GetServergroupsServergroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServergroupsServergroup)(nil)).Elem()
}

func (i GetServergroupsServergroupArgs) ToGetServergroupsServergroupOutput() GetServergroupsServergroupOutput {
	return i.ToGetServergroupsServergroupOutputWithContext(context.Background())
}

func (i GetServergroupsServergroupArgs) ToGetServergroupsServergroupOutputWithContext(ctx context.Context) GetServergroupsServergroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServergroupsServergroupOutput)
}

// GetServergroupsServergroupArrayInput is an input type that accepts GetServergroupsServergroupArray and GetServergroupsServergroupArrayOutput values.
// You can construct a concrete instance of `GetServergroupsServergroupArrayInput` via:
//
//	GetServergroupsServergroupArray{ GetServergroupsServergroupArgs{...} }
type GetServergroupsServergroupArrayInput interface {
	pulumi.Input

	ToGetServergroupsServergroupArrayOutput() GetServergroupsServergroupArrayOutput
	ToGetServergroupsServergroupArrayOutputWithContext(context.Context) GetServergroupsServergroupArrayOutput
}

type GetServergroupsServergroupArray []GetServergroupsServergroupInput

func (GetServergroupsServergroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServergroupsServergroup)(nil)).Elem()
}

func (i GetServergroupsServergroupArray) ToGetServergroupsServergroupArrayOutput() GetServergroupsServergroupArrayOutput {
	return i.ToGetServergroupsServergroupArrayOutputWithContext(context.Background())
}

func (i GetServergroupsServergroupArray) ToGetServergroupsServergroupArrayOutputWithContext(ctx context.Context) GetServergroupsServergroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServergroupsServergroupArrayOutput)
}

type GetServergroupsServergroupOutput struct{ *pulumi.OutputState }

func (GetServergroupsServergroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServergroupsServergroup)(nil)).Elem()
}

func (o GetServergroupsServergroupOutput) ToGetServergroupsServergroupOutput() GetServergroupsServergroupOutput {
	return o
}

func (o GetServergroupsServergroupOutput) ToGetServergroupsServergroupOutputWithContext(ctx context.Context) GetServergroupsServergroupOutput {
	return o
}

func (o GetServergroupsServergroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServergroupsServergroup) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServergroupsServergroupOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServergroupsServergroup) []string { return v.Members }).(pulumi.StringArrayOutput)
}

func (o GetServergroupsServergroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServergroupsServergroup) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServergroupsServergroupOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetServergroupsServergroup) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type GetServergroupsServergroupArrayOutput struct{ *pulumi.OutputState }

func (GetServergroupsServergroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServergroupsServergroup)(nil)).Elem()
}

func (o GetServergroupsServergroupArrayOutput) ToGetServergroupsServergroupArrayOutput() GetServergroupsServergroupArrayOutput {
	return o
}

func (o GetServergroupsServergroupArrayOutput) ToGetServergroupsServergroupArrayOutputWithContext(ctx context.Context) GetServergroupsServergroupArrayOutput {
	return o
}

func (o GetServergroupsServergroupArrayOutput) Index(i pulumi.IntInput) GetServergroupsServergroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServergroupsServergroup {
		return vs[0].([]GetServergroupsServergroup)[vs[1].(int)]
	}).(GetServergroupsServergroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBandwidthInput)(nil)).Elem(), InstanceBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBandwidthPtrInput)(nil)).Elem(), InstanceBandwidthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataDiskInput)(nil)).Elem(), InstanceDataDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataDiskArrayInput)(nil)).Elem(), InstanceDataDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEnclaveOptionsInput)(nil)).Elem(), InstanceEnclaveOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEnclaveOptionsPtrInput)(nil)).Elem(), InstanceEnclaveOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNetworkInput)(nil)).Elem(), InstanceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNetworkArrayInput)(nil)).Elem(), InstanceNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSchedulerHintInput)(nil)).Elem(), InstanceSchedulerHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSchedulerHintArrayInput)(nil)).Elem(), InstanceSchedulerHintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceVolumeAttachedInput)(nil)).Elem(), InstanceVolumeAttachedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceVolumeAttachedArrayInput)(nil)).Elem(), InstanceVolumeAttachedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorInput)(nil)).Elem(), GetFlavorsFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorArrayInput)(nil)).Elem(), GetFlavorsFlavorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceNetworkInput)(nil)).Elem(), GetInstanceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceNetworkArrayInput)(nil)).Elem(), GetInstanceNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSchedulerHintInput)(nil)).Elem(), GetInstanceSchedulerHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSchedulerHintArrayInput)(nil)).Elem(), GetInstanceSchedulerHintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceVolumeAttachedInput)(nil)).Elem(), GetInstanceVolumeAttachedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceVolumeAttachedArrayInput)(nil)).Elem(), GetInstanceVolumeAttachedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceNetworkInput)(nil)).Elem(), GetInstancesInstanceNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceNetworkArrayInput)(nil)).Elem(), GetInstancesInstanceNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceSchedulerHintInput)(nil)).Elem(), GetInstancesInstanceSchedulerHintArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceSchedulerHintArrayInput)(nil)).Elem(), GetInstancesInstanceSchedulerHintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceVolumeAttachedInput)(nil)).Elem(), GetInstancesInstanceVolumeAttachedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceVolumeAttachedArrayInput)(nil)).Elem(), GetInstancesInstanceVolumeAttachedArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServergroupsServergroupInput)(nil)).Elem(), GetServergroupsServergroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServergroupsServergroupArrayInput)(nil)).Elem(), GetServergroupsServergroupArray{})
	pulumi.RegisterOutputType(InstanceBandwidthOutput{})
	pulumi.RegisterOutputType(InstanceBandwidthPtrOutput{})
	pulumi.RegisterOutputType(InstanceDataDiskOutput{})
	pulumi.RegisterOutputType(InstanceDataDiskArrayOutput{})
	pulumi.RegisterOutputType(InstanceEnclaveOptionsOutput{})
	pulumi.RegisterOutputType(InstanceEnclaveOptionsPtrOutput{})
	pulumi.RegisterOutputType(InstanceNetworkOutput{})
	pulumi.RegisterOutputType(InstanceNetworkArrayOutput{})
	pulumi.RegisterOutputType(InstanceSchedulerHintOutput{})
	pulumi.RegisterOutputType(InstanceSchedulerHintArrayOutput{})
	pulumi.RegisterOutputType(InstanceVolumeAttachedOutput{})
	pulumi.RegisterOutputType(InstanceVolumeAttachedArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkOutput{})
	pulumi.RegisterOutputType(GetInstanceNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceSchedulerHintOutput{})
	pulumi.RegisterOutputType(GetInstanceSchedulerHintArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceVolumeAttachedOutput{})
	pulumi.RegisterOutputType(GetInstanceVolumeAttachedArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceNetworkOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceSchedulerHintOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceSchedulerHintArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceVolumeAttachedOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceVolumeAttachedArrayOutput{})
	pulumi.RegisterOutputType(GetServergroupsServergroupOutput{})
	pulumi.RegisterOutputType(GetServergroupsServergroupArrayOutput{})
}

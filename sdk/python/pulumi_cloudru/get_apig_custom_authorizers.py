# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetApigCustomAuthorizersResult',
    'AwaitableGetApigCustomAuthorizersResult',
    'get_apig_custom_authorizers',
    'get_apig_custom_authorizers_output',
]

@pulumi.output_type
class GetApigCustomAuthorizersResult:
    """
    A collection of values returned by getApigCustomAuthorizers.
    """
    def __init__(__self__, authorizer_id=None, authorizers=None, id=None, instance_id=None, name=None, region=None, type=None):
        if authorizer_id and not isinstance(authorizer_id, str):
            raise TypeError("Expected argument 'authorizer_id' to be a str")
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        if authorizers and not isinstance(authorizers, list):
            raise TypeError("Expected argument 'authorizers' to be a list")
        pulumi.set(__self__, "authorizers", authorizers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter
    def authorizers(self) -> Sequence['outputs.GetApigCustomAuthorizersAuthorizerResult']:
        return pulumi.get(self, "authorizers")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "type")


class AwaitableGetApigCustomAuthorizersResult(GetApigCustomAuthorizersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApigCustomAuthorizersResult(
            authorizer_id=self.authorizer_id,
            authorizers=self.authorizers,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            type=self.type)


def get_apig_custom_authorizers(authorizer_id: Optional[_builtins.str] = None,
                                instance_id: Optional[_builtins.str] = None,
                                name: Optional[_builtins.str] = None,
                                region: Optional[_builtins.str] = None,
                                type: Optional[_builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApigCustomAuthorizersResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authorizerId'] = authorizer_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getApigCustomAuthorizers:getApigCustomAuthorizers', __args__, opts=opts, typ=GetApigCustomAuthorizersResult).value

    return AwaitableGetApigCustomAuthorizersResult(
        authorizer_id=pulumi.get(__ret__, 'authorizer_id'),
        authorizers=pulumi.get(__ret__, 'authorizers'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        type=pulumi.get(__ret__, 'type'))
def get_apig_custom_authorizers_output(authorizer_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                       name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApigCustomAuthorizersResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['authorizerId'] = authorizer_id
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getApigCustomAuthorizers:getApigCustomAuthorizers', __args__, opts=opts, typ=GetApigCustomAuthorizersResult)
    return __ret__.apply(lambda __response__: GetApigCustomAuthorizersResult(
        authorizer_id=pulumi.get(__response__, 'authorizer_id'),
        authorizers=pulumi.get(__response__, 'authorizers'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        type=pulumi.get(__response__, 'type')))

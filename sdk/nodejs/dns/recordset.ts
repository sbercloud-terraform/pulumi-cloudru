// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a DNS record set resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### Record Set with Public Zone
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const exampleZone = new sbercloud.dns.Zone("example_zone", {
 *     name: "example.com.",
 *     email: "email2@example.com",
 *     description: "a public zone",
 *     ttl: 6000,
 *     zoneType: "public",
 * });
 * const test = new sbercloud.dns.Recordset("test", {
 *     zoneId: exampleZone.id,
 *     name: "rs.example.com.",
 *     description: "An example record set",
 *     ttl: 3000,
 *     type: "A",
 *     records: ["10.0.0.1"],
 * });
 * ```
 *
 * ### Record Set with Private Zone
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const exampleZone = new sbercloud.dns.Zone("example_zone", {
 *     name: "example.com.",
 *     email: "email2@example.com",
 *     description: "a private zone",
 *     ttl: 6000,
 *     zoneType: "private",
 * });
 * const test = new sbercloud.dns.Recordset("test", {
 *     zoneId: exampleZone.id,
 *     name: "rs.example.com.",
 *     description: "An example record set",
 *     ttl: 3000,
 *     type: "A",
 *     records: ["10.0.0.1"],
 * });
 * ```
 *
 * ## Import
 *
 * The DNS recordset can be imported using `zone_id`, `recordset_id`, separated by slashes, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Dns/recordset:Recordset test <zone_id>/<recordset_id>
 * ```
 */
export class Recordset extends pulumi.CustomResource {
    /**
     * Get an existing Recordset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordsetState, opts?: pulumi.CustomResourceOptions): Recordset {
        return new Recordset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Dns/recordset:Recordset';

    /**
     * Returns true if the given object is an instance of Recordset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Recordset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Recordset.__pulumiType;
    }

    /**
     * Specifies the description of the record set.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the record set.
     * The name suffixed with a zone name, which is a complete host name ended with a dot.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies an array of DNS records. The value rules vary depending on the record set type.
     */
    declare public readonly records: pulumi.Output<string[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the DNS recordset.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the time to live (TTL) of the record set (in seconds).
     * The value range is 1–2147483647. The default value is 300.
     */
    declare public readonly ttl: pulumi.Output<number | undefined>;
    /**
     * Specifies the type of the record set.
     * Value options: **A**, **AAAA**, **MX**, **CNAME**, **TXT**, **NS**, **SRV**, **CAA**.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Specifies the zone ID.
     * Changing this parameter will create a new resource.
     */
    declare public readonly zoneId: pulumi.Output<string>;

    /**
     * Create a Recordset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordsetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordsetArgs | RecordsetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordsetState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["records"] = state?.records;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["type"] = state?.type;
            resourceInputs["zoneId"] = state?.zoneId;
        } else {
            const args = argsOrState as RecordsetArgs | undefined;
            if (args?.records === undefined && !opts.urn) {
                throw new Error("Missing required property 'records'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.zoneId === undefined && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["records"] = args?.records;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["type"] = args?.type;
            resourceInputs["zoneId"] = args?.zoneId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Recordset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Recordset resources.
 */
export interface RecordsetState {
    /**
     * Specifies the description of the record set.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of the record set.
     * The name suffixed with a zone name, which is a complete host name ended with a dot.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies an array of DNS records. The value rules vary depending on the record set type.
     */
    records?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the DNS recordset.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the time to live (TTL) of the record set (in seconds).
     * The value range is 1–2147483647. The default value is 300.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Specifies the type of the record set.
     * Value options: **A**, **AAAA**, **MX**, **CNAME**, **TXT**, **NS**, **SRV**, **CAA**.
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the zone ID.
     * Changing this parameter will create a new resource.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Recordset resource.
 */
export interface RecordsetArgs {
    /**
     * Specifies the description of the record set.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of the record set.
     * The name suffixed with a zone name, which is a complete host name ended with a dot.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies an array of DNS records. The value rules vary depending on the record set type.
     */
    records: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the DNS recordset.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the time to live (TTL) of the record set (in seconds).
     * The value range is 1–2147483647. The default value is 300.
     */
    ttl?: pulumi.Input<number>;
    /**
     * Specifies the type of the record set.
     * Value options: **A**, **AAAA**, **MX**, **CNAME**, **TXT**, **NS**, **SRV**, **CAA**.
     */
    type: pulumi.Input<string>;
    /**
     * Specifies the zone ID.
     * Changing this parameter will create a new resource.
     */
    zoneId: pulumi.Input<string>;
}

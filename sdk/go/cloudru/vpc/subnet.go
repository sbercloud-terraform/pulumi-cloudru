// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Subnet struct {
	pulumi.CustomResourceState

	AvailabilityZone pulumi.StringOutput      `pulumi:"availabilityZone"`
	Cidr             pulumi.StringOutput      `pulumi:"cidr"`
	Description      pulumi.StringPtrOutput   `pulumi:"description"`
	DhcpEnable       pulumi.BoolPtrOutput     `pulumi:"dhcpEnable"`
	DhcpLeaseTime    pulumi.StringOutput      `pulumi:"dhcpLeaseTime"`
	DnsLists         pulumi.StringArrayOutput `pulumi:"dnsLists"`
	GatewayIp        pulumi.StringOutput      `pulumi:"gatewayIp"`
	Ipv4SubnetId     pulumi.StringOutput      `pulumi:"ipv4SubnetId"`
	Ipv6Cidr         pulumi.StringOutput      `pulumi:"ipv6Cidr"`
	Ipv6Enable       pulumi.BoolPtrOutput     `pulumi:"ipv6Enable"`
	Ipv6Gateway      pulumi.StringOutput      `pulumi:"ipv6Gateway"`
	Ipv6SubnetId     pulumi.StringOutput      `pulumi:"ipv6SubnetId"`
	Name             pulumi.StringOutput      `pulumi:"name"`
	NtpServerAddress pulumi.StringPtrOutput   `pulumi:"ntpServerAddress"`
	PrimaryDns       pulumi.StringOutput      `pulumi:"primaryDns"`
	Region           pulumi.StringOutput      `pulumi:"region"`
	SecondaryDns     pulumi.StringOutput      `pulumi:"secondaryDns"`
	// schema: Deprecated
	SubnetId pulumi.StringOutput    `pulumi:"subnetId"`
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	VpcId    pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.GatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'GatewayIp'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("cloudru:Vpc/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("cloudru:Vpc/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	AvailabilityZone *string  `pulumi:"availabilityZone"`
	Cidr             *string  `pulumi:"cidr"`
	Description      *string  `pulumi:"description"`
	DhcpEnable       *bool    `pulumi:"dhcpEnable"`
	DhcpLeaseTime    *string  `pulumi:"dhcpLeaseTime"`
	DnsLists         []string `pulumi:"dnsLists"`
	GatewayIp        *string  `pulumi:"gatewayIp"`
	Ipv4SubnetId     *string  `pulumi:"ipv4SubnetId"`
	Ipv6Cidr         *string  `pulumi:"ipv6Cidr"`
	Ipv6Enable       *bool    `pulumi:"ipv6Enable"`
	Ipv6Gateway      *string  `pulumi:"ipv6Gateway"`
	Ipv6SubnetId     *string  `pulumi:"ipv6SubnetId"`
	Name             *string  `pulumi:"name"`
	NtpServerAddress *string  `pulumi:"ntpServerAddress"`
	PrimaryDns       *string  `pulumi:"primaryDns"`
	Region           *string  `pulumi:"region"`
	SecondaryDns     *string  `pulumi:"secondaryDns"`
	// schema: Deprecated
	SubnetId *string           `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	VpcId    *string           `pulumi:"vpcId"`
}

type SubnetState struct {
	AvailabilityZone pulumi.StringPtrInput
	Cidr             pulumi.StringPtrInput
	Description      pulumi.StringPtrInput
	DhcpEnable       pulumi.BoolPtrInput
	DhcpLeaseTime    pulumi.StringPtrInput
	DnsLists         pulumi.StringArrayInput
	GatewayIp        pulumi.StringPtrInput
	Ipv4SubnetId     pulumi.StringPtrInput
	Ipv6Cidr         pulumi.StringPtrInput
	Ipv6Enable       pulumi.BoolPtrInput
	Ipv6Gateway      pulumi.StringPtrInput
	Ipv6SubnetId     pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	NtpServerAddress pulumi.StringPtrInput
	PrimaryDns       pulumi.StringPtrInput
	Region           pulumi.StringPtrInput
	SecondaryDns     pulumi.StringPtrInput
	// schema: Deprecated
	SubnetId pulumi.StringPtrInput
	Tags     pulumi.StringMapInput
	VpcId    pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	AvailabilityZone *string           `pulumi:"availabilityZone"`
	Cidr             string            `pulumi:"cidr"`
	Description      *string           `pulumi:"description"`
	DhcpEnable       *bool             `pulumi:"dhcpEnable"`
	DhcpLeaseTime    *string           `pulumi:"dhcpLeaseTime"`
	DnsLists         []string          `pulumi:"dnsLists"`
	GatewayIp        string            `pulumi:"gatewayIp"`
	Ipv6Enable       *bool             `pulumi:"ipv6Enable"`
	Name             *string           `pulumi:"name"`
	NtpServerAddress *string           `pulumi:"ntpServerAddress"`
	PrimaryDns       *string           `pulumi:"primaryDns"`
	Region           *string           `pulumi:"region"`
	SecondaryDns     *string           `pulumi:"secondaryDns"`
	Tags             map[string]string `pulumi:"tags"`
	VpcId            string            `pulumi:"vpcId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	AvailabilityZone pulumi.StringPtrInput
	Cidr             pulumi.StringInput
	Description      pulumi.StringPtrInput
	DhcpEnable       pulumi.BoolPtrInput
	DhcpLeaseTime    pulumi.StringPtrInput
	DnsLists         pulumi.StringArrayInput
	GatewayIp        pulumi.StringInput
	Ipv6Enable       pulumi.BoolPtrInput
	Name             pulumi.StringPtrInput
	NtpServerAddress pulumi.StringPtrInput
	PrimaryDns       pulumi.StringPtrInput
	Region           pulumi.StringPtrInput
	SecondaryDns     pulumi.StringPtrInput
	Tags             pulumi.StringMapInput
	VpcId            pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

func (o SubnetOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o SubnetOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

func (o SubnetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) DhcpEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.DhcpEnable }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) DhcpLeaseTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.DhcpLeaseTime }).(pulumi.StringOutput)
}

func (o SubnetOutput) DnsLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringArrayOutput { return v.DnsLists }).(pulumi.StringArrayOutput)
}

func (o SubnetOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

func (o SubnetOutput) Ipv4SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Ipv4SubnetId }).(pulumi.StringOutput)
}

func (o SubnetOutput) Ipv6Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Ipv6Cidr }).(pulumi.StringOutput)
}

func (o SubnetOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolPtrOutput { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

func (o SubnetOutput) Ipv6Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Ipv6Gateway }).(pulumi.StringOutput)
}

func (o SubnetOutput) Ipv6SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Ipv6SubnetId }).(pulumi.StringOutput)
}

func (o SubnetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SubnetOutput) NtpServerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.NtpServerAddress }).(pulumi.StringPtrOutput)
}

func (o SubnetOutput) PrimaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.PrimaryDns }).(pulumi.StringOutput)
}

func (o SubnetOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SubnetOutput) SecondaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SecondaryDns }).(pulumi.StringOutput)
}

// schema: Deprecated
func (o SubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o SubnetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}

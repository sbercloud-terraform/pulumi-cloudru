// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type PgPlugin struct {
	pulumi.CustomResourceState

	DatabaseName           pulumi.StringOutput `pulumi:"databaseName"`
	Description            pulumi.StringOutput `pulumi:"description"`
	InstanceId             pulumi.StringOutput `pulumi:"instanceId"`
	Name                   pulumi.StringOutput `pulumi:"name"`
	Region                 pulumi.StringOutput `pulumi:"region"`
	SharedPreloadLibraries pulumi.StringOutput `pulumi:"sharedPreloadLibraries"`
	Version                pulumi.StringOutput `pulumi:"version"`
}

// NewPgPlugin registers a new resource with the given unique name, arguments, and options.
func NewPgPlugin(ctx *pulumi.Context,
	name string, args *PgPluginArgs, opts ...pulumi.ResourceOption) (*PgPlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseName == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PgPlugin
	err := ctx.RegisterResource("sbercloud:Rds/pgPlugin:PgPlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgPlugin gets an existing PgPlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgPlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgPluginState, opts ...pulumi.ResourceOption) (*PgPlugin, error) {
	var resource PgPlugin
	err := ctx.ReadResource("sbercloud:Rds/pgPlugin:PgPlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgPlugin resources.
type pgPluginState struct {
	DatabaseName           *string `pulumi:"databaseName"`
	Description            *string `pulumi:"description"`
	InstanceId             *string `pulumi:"instanceId"`
	Name                   *string `pulumi:"name"`
	Region                 *string `pulumi:"region"`
	SharedPreloadLibraries *string `pulumi:"sharedPreloadLibraries"`
	Version                *string `pulumi:"version"`
}

type PgPluginState struct {
	DatabaseName           pulumi.StringPtrInput
	Description            pulumi.StringPtrInput
	InstanceId             pulumi.StringPtrInput
	Name                   pulumi.StringPtrInput
	Region                 pulumi.StringPtrInput
	SharedPreloadLibraries pulumi.StringPtrInput
	Version                pulumi.StringPtrInput
}

func (PgPluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgPluginState)(nil)).Elem()
}

type pgPluginArgs struct {
	DatabaseName string  `pulumi:"databaseName"`
	InstanceId   string  `pulumi:"instanceId"`
	Name         *string `pulumi:"name"`
	Region       *string `pulumi:"region"`
}

// The set of arguments for constructing a PgPlugin resource.
type PgPluginArgs struct {
	DatabaseName pulumi.StringInput
	InstanceId   pulumi.StringInput
	Name         pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
}

func (PgPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgPluginArgs)(nil)).Elem()
}

type PgPluginInput interface {
	pulumi.Input

	ToPgPluginOutput() PgPluginOutput
	ToPgPluginOutputWithContext(ctx context.Context) PgPluginOutput
}

func (*PgPlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**PgPlugin)(nil)).Elem()
}

func (i *PgPlugin) ToPgPluginOutput() PgPluginOutput {
	return i.ToPgPluginOutputWithContext(context.Background())
}

func (i *PgPlugin) ToPgPluginOutputWithContext(ctx context.Context) PgPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgPluginOutput)
}

// PgPluginArrayInput is an input type that accepts PgPluginArray and PgPluginArrayOutput values.
// You can construct a concrete instance of `PgPluginArrayInput` via:
//
//	PgPluginArray{ PgPluginArgs{...} }
type PgPluginArrayInput interface {
	pulumi.Input

	ToPgPluginArrayOutput() PgPluginArrayOutput
	ToPgPluginArrayOutputWithContext(context.Context) PgPluginArrayOutput
}

type PgPluginArray []PgPluginInput

func (PgPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgPlugin)(nil)).Elem()
}

func (i PgPluginArray) ToPgPluginArrayOutput() PgPluginArrayOutput {
	return i.ToPgPluginArrayOutputWithContext(context.Background())
}

func (i PgPluginArray) ToPgPluginArrayOutputWithContext(ctx context.Context) PgPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgPluginArrayOutput)
}

// PgPluginMapInput is an input type that accepts PgPluginMap and PgPluginMapOutput values.
// You can construct a concrete instance of `PgPluginMapInput` via:
//
//	PgPluginMap{ "key": PgPluginArgs{...} }
type PgPluginMapInput interface {
	pulumi.Input

	ToPgPluginMapOutput() PgPluginMapOutput
	ToPgPluginMapOutputWithContext(context.Context) PgPluginMapOutput
}

type PgPluginMap map[string]PgPluginInput

func (PgPluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgPlugin)(nil)).Elem()
}

func (i PgPluginMap) ToPgPluginMapOutput() PgPluginMapOutput {
	return i.ToPgPluginMapOutputWithContext(context.Background())
}

func (i PgPluginMap) ToPgPluginMapOutputWithContext(ctx context.Context) PgPluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgPluginMapOutput)
}

type PgPluginOutput struct{ *pulumi.OutputState }

func (PgPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgPlugin)(nil)).Elem()
}

func (o PgPluginOutput) ToPgPluginOutput() PgPluginOutput {
	return o
}

func (o PgPluginOutput) ToPgPluginOutputWithContext(ctx context.Context) PgPluginOutput {
	return o
}

func (o PgPluginOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPlugin) pulumi.StringOutput { return v.DatabaseName }).(pulumi.StringOutput)
}

func (o PgPluginOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPlugin) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o PgPluginOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPlugin) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o PgPluginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPlugin) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PgPluginOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPlugin) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o PgPluginOutput) SharedPreloadLibraries() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPlugin) pulumi.StringOutput { return v.SharedPreloadLibraries }).(pulumi.StringOutput)
}

func (o PgPluginOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *PgPlugin) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type PgPluginArrayOutput struct{ *pulumi.OutputState }

func (PgPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgPlugin)(nil)).Elem()
}

func (o PgPluginArrayOutput) ToPgPluginArrayOutput() PgPluginArrayOutput {
	return o
}

func (o PgPluginArrayOutput) ToPgPluginArrayOutputWithContext(ctx context.Context) PgPluginArrayOutput {
	return o
}

func (o PgPluginArrayOutput) Index(i pulumi.IntInput) PgPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgPlugin {
		return vs[0].([]*PgPlugin)[vs[1].(int)]
	}).(PgPluginOutput)
}

type PgPluginMapOutput struct{ *pulumi.OutputState }

func (PgPluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgPlugin)(nil)).Elem()
}

func (o PgPluginMapOutput) ToPgPluginMapOutput() PgPluginMapOutput {
	return o
}

func (o PgPluginMapOutput) ToPgPluginMapOutputWithContext(ctx context.Context) PgPluginMapOutput {
	return o
}

func (o PgPluginMapOutput) MapIndex(k pulumi.StringInput) PgPluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgPlugin {
		return vs[0].(map[string]*PgPlugin)[vs[1].(string)]
	}).(PgPluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgPluginInput)(nil)).Elem(), &PgPlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgPluginArrayInput)(nil)).Elem(), PgPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgPluginMapInput)(nil)).Elem(), PgPluginMap{})
	pulumi.RegisterOutputType(PgPluginOutput{})
	pulumi.RegisterOutputType(PgPluginArrayOutput{})
	pulumi.RegisterOutputType(PgPluginMapOutput{})
}

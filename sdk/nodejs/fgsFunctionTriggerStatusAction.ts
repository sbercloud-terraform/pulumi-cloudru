// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FgsFunctionTriggerStatusAction extends pulumi.CustomResource {
    /**
     * Get an existing FgsFunctionTriggerStatusAction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FgsFunctionTriggerStatusActionState, opts?: pulumi.CustomResourceOptions): FgsFunctionTriggerStatusAction {
        return new FgsFunctionTriggerStatusAction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/fgsFunctionTriggerStatusAction:FgsFunctionTriggerStatusAction';

    /**
     * Returns true if the given object is an instance of FgsFunctionTriggerStatusAction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FgsFunctionTriggerStatusAction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FgsFunctionTriggerStatusAction.__pulumiType;
    }

    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * The event data of the trigger.
     */
    public readonly eventData!: pulumi.Output<string>;
    /**
     * The URN of the function.
     */
    public readonly functionUrn!: pulumi.Output<string>;
    /**
     * The region where the function trigger is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The trigger ID.
     */
    public readonly triggerId!: pulumi.Output<string>;
    /**
     * The status of the trigger. Valid values are ACTIVE and DISABLED.
     */
    public readonly triggerStatus!: pulumi.Output<string>;
    /**
     * The trigger type code.
     */
    public readonly triggerTypeCode!: pulumi.Output<string>;

    /**
     * Create a FgsFunctionTriggerStatusAction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FgsFunctionTriggerStatusActionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FgsFunctionTriggerStatusActionArgs | FgsFunctionTriggerStatusActionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FgsFunctionTriggerStatusActionState | undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["eventData"] = state ? state.eventData : undefined;
            resourceInputs["functionUrn"] = state ? state.functionUrn : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["triggerId"] = state ? state.triggerId : undefined;
            resourceInputs["triggerStatus"] = state ? state.triggerStatus : undefined;
            resourceInputs["triggerTypeCode"] = state ? state.triggerTypeCode : undefined;
        } else {
            const args = argsOrState as FgsFunctionTriggerStatusActionArgs | undefined;
            if ((!args || args.eventData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventData'");
            }
            if ((!args || args.functionUrn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionUrn'");
            }
            if ((!args || args.triggerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerId'");
            }
            if ((!args || args.triggerStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerStatus'");
            }
            if ((!args || args.triggerTypeCode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'triggerTypeCode'");
            }
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["eventData"] = args ? args.eventData : undefined;
            resourceInputs["functionUrn"] = args ? args.functionUrn : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["triggerId"] = args ? args.triggerId : undefined;
            resourceInputs["triggerStatus"] = args ? args.triggerStatus : undefined;
            resourceInputs["triggerTypeCode"] = args ? args.triggerTypeCode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FgsFunctionTriggerStatusAction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FgsFunctionTriggerStatusAction resources.
 */
export interface FgsFunctionTriggerStatusActionState {
    enableForceNew?: pulumi.Input<string>;
    /**
     * The event data of the trigger.
     */
    eventData?: pulumi.Input<string>;
    /**
     * The URN of the function.
     */
    functionUrn?: pulumi.Input<string>;
    /**
     * The region where the function trigger is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The trigger ID.
     */
    triggerId?: pulumi.Input<string>;
    /**
     * The status of the trigger. Valid values are ACTIVE and DISABLED.
     */
    triggerStatus?: pulumi.Input<string>;
    /**
     * The trigger type code.
     */
    triggerTypeCode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FgsFunctionTriggerStatusAction resource.
 */
export interface FgsFunctionTriggerStatusActionArgs {
    enableForceNew?: pulumi.Input<string>;
    /**
     * The event data of the trigger.
     */
    eventData: pulumi.Input<string>;
    /**
     * The URN of the function.
     */
    functionUrn: pulumi.Input<string>;
    /**
     * The region where the function trigger is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The trigger ID.
     */
    triggerId: pulumi.Input<string>;
    /**
     * The status of the trigger. Valid values are ACTIVE and DISABLED.
     */
    triggerStatus: pulumi.Input<string>;
    /**
     * The trigger type code.
     */
    triggerTypeCode: pulumi.Input<string>;
}

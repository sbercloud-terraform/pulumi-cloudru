// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages CTS **system** tracker resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			bucketName := cfg.RequireObject("bucketName")
//			_, err := cts.NewTracker(ctx, "tracker", &cts.TrackerArgs{
//				BucketName: pulumi.Any(bucketName),
//				FilePrefix: pulumi.String("cts"),
//				LtsEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CTS tracker can be imported using `name`, only __system__ is available. e.g.
//
// ```sh
// $ pulumi import sbercloud:Cts/tracker:Tracker tracker system
// ```
type Tracker struct {
	pulumi.CustomResourceState

	AgencyName pulumi.StringOutput `pulumi:"agencyName"`
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName    pulumi.StringPtrOutput `pulumi:"bucketName"`
	CompressType  pulumi.StringPtrOutput `pulumi:"compressType"`
	CreateTime    pulumi.IntOutput       `pulumi:"createTime"`
	DeleteTracker pulumi.BoolPtrOutput   `pulumi:"deleteTracker"`
	Detail        pulumi.StringOutput    `pulumi:"detail"`
	DomainId      pulumi.StringOutput    `pulumi:"domainId"`
	// Specifies whether tracker is enabled.
	Enabled         pulumi.BoolPtrOutput     `pulumi:"enabled"`
	ExcludeServices pulumi.StringArrayOutput `pulumi:"excludeServices"`
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix         pulumi.StringPtrOutput `pulumi:"filePrefix"`
	GroupId            pulumi.StringOutput    `pulumi:"groupId"`
	IsAuthorizedBucket pulumi.BoolOutput      `pulumi:"isAuthorizedBucket"`
	IsSortByService    pulumi.BoolPtrOutput   `pulumi:"isSortByService"`
	// Specifies the ID of KMS key used for trace file encryption.
	KmsId        pulumi.StringPtrOutput `pulumi:"kmsId"`
	LogGroupName pulumi.StringOutput    `pulumi:"logGroupName"`
	LogTopicName pulumi.StringOutput    `pulumi:"logTopicName"`
	// Specifies whether trace analysis is enabled.
	LtsEnabled pulumi.BoolPtrOutput `pulumi:"ltsEnabled"`
	// The tracker name, only **system** is available.
	Name                pulumi.StringOutput `pulumi:"name"`
	OrganizationEnabled pulumi.BoolOutput   `pulumi:"organizationEnabled"`
	// Specifies the region in which to manage the CTS system tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The tracker status, the value can be **enabled**, **disabled** or **error**.
	Status   pulumi.StringOutput    `pulumi:"status"`
	StreamId pulumi.StringOutput    `pulumi:"streamId"`
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	// Whether traces will be transferred.
	TransferEnabled pulumi.BoolOutput `pulumi:"transferEnabled"`
	// The tracker type, only **system** is available.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile pulumi.BoolPtrOutput `pulumi:"validateFile"`
}

// NewTracker registers a new resource with the given unique name, arguments, and options.
func NewTracker(ctx *pulumi.Context,
	name string, args *TrackerArgs, opts ...pulumi.ResourceOption) (*Tracker, error) {
	if args == nil {
		args = &TrackerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Tracker
	err := ctx.RegisterResource("sbercloud:Cts/tracker:Tracker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTracker gets an existing Tracker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTracker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrackerState, opts ...pulumi.ResourceOption) (*Tracker, error) {
	var resource Tracker
	err := ctx.ReadResource("sbercloud:Cts/tracker:Tracker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Tracker resources.
type trackerState struct {
	AgencyName *string `pulumi:"agencyName"`
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName    *string `pulumi:"bucketName"`
	CompressType  *string `pulumi:"compressType"`
	CreateTime    *int    `pulumi:"createTime"`
	DeleteTracker *bool   `pulumi:"deleteTracker"`
	Detail        *string `pulumi:"detail"`
	DomainId      *string `pulumi:"domainId"`
	// Specifies whether tracker is enabled.
	Enabled         *bool    `pulumi:"enabled"`
	ExcludeServices []string `pulumi:"excludeServices"`
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix         *string `pulumi:"filePrefix"`
	GroupId            *string `pulumi:"groupId"`
	IsAuthorizedBucket *bool   `pulumi:"isAuthorizedBucket"`
	IsSortByService    *bool   `pulumi:"isSortByService"`
	// Specifies the ID of KMS key used for trace file encryption.
	KmsId        *string `pulumi:"kmsId"`
	LogGroupName *string `pulumi:"logGroupName"`
	LogTopicName *string `pulumi:"logTopicName"`
	// Specifies whether trace analysis is enabled.
	LtsEnabled *bool `pulumi:"ltsEnabled"`
	// The tracker name, only **system** is available.
	Name                *string `pulumi:"name"`
	OrganizationEnabled *bool   `pulumi:"organizationEnabled"`
	// Specifies the region in which to manage the CTS system tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The tracker status, the value can be **enabled**, **disabled** or **error**.
	Status   *string           `pulumi:"status"`
	StreamId *string           `pulumi:"streamId"`
	Tags     map[string]string `pulumi:"tags"`
	// Whether traces will be transferred.
	TransferEnabled *bool `pulumi:"transferEnabled"`
	// The tracker type, only **system** is available.
	Type *string `pulumi:"type"`
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile *bool `pulumi:"validateFile"`
}

type TrackerState struct {
	AgencyName pulumi.StringPtrInput
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName    pulumi.StringPtrInput
	CompressType  pulumi.StringPtrInput
	CreateTime    pulumi.IntPtrInput
	DeleteTracker pulumi.BoolPtrInput
	Detail        pulumi.StringPtrInput
	DomainId      pulumi.StringPtrInput
	// Specifies whether tracker is enabled.
	Enabled         pulumi.BoolPtrInput
	ExcludeServices pulumi.StringArrayInput
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix         pulumi.StringPtrInput
	GroupId            pulumi.StringPtrInput
	IsAuthorizedBucket pulumi.BoolPtrInput
	IsSortByService    pulumi.BoolPtrInput
	// Specifies the ID of KMS key used for trace file encryption.
	KmsId        pulumi.StringPtrInput
	LogGroupName pulumi.StringPtrInput
	LogTopicName pulumi.StringPtrInput
	// Specifies whether trace analysis is enabled.
	LtsEnabled pulumi.BoolPtrInput
	// The tracker name, only **system** is available.
	Name                pulumi.StringPtrInput
	OrganizationEnabled pulumi.BoolPtrInput
	// Specifies the region in which to manage the CTS system tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The tracker status, the value can be **enabled**, **disabled** or **error**.
	Status   pulumi.StringPtrInput
	StreamId pulumi.StringPtrInput
	Tags     pulumi.StringMapInput
	// Whether traces will be transferred.
	TransferEnabled pulumi.BoolPtrInput
	// The tracker type, only **system** is available.
	Type pulumi.StringPtrInput
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile pulumi.BoolPtrInput
}

func (TrackerState) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerState)(nil)).Elem()
}

type trackerArgs struct {
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName    *string `pulumi:"bucketName"`
	CompressType  *string `pulumi:"compressType"`
	DeleteTracker *bool   `pulumi:"deleteTracker"`
	// Specifies whether tracker is enabled.
	Enabled         *bool    `pulumi:"enabled"`
	ExcludeServices []string `pulumi:"excludeServices"`
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix      *string `pulumi:"filePrefix"`
	IsSortByService *bool   `pulumi:"isSortByService"`
	// Specifies the ID of KMS key used for trace file encryption.
	KmsId *string `pulumi:"kmsId"`
	// Specifies whether trace analysis is enabled.
	LtsEnabled          *bool `pulumi:"ltsEnabled"`
	OrganizationEnabled *bool `pulumi:"organizationEnabled"`
	// Specifies the region in which to manage the CTS system tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string           `pulumi:"region"`
	Tags   map[string]string `pulumi:"tags"`
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile *bool `pulumi:"validateFile"`
}

// The set of arguments for constructing a Tracker resource.
type TrackerArgs struct {
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName    pulumi.StringPtrInput
	CompressType  pulumi.StringPtrInput
	DeleteTracker pulumi.BoolPtrInput
	// Specifies whether tracker is enabled.
	Enabled         pulumi.BoolPtrInput
	ExcludeServices pulumi.StringArrayInput
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix      pulumi.StringPtrInput
	IsSortByService pulumi.BoolPtrInput
	// Specifies the ID of KMS key used for trace file encryption.
	KmsId pulumi.StringPtrInput
	// Specifies whether trace analysis is enabled.
	LtsEnabled          pulumi.BoolPtrInput
	OrganizationEnabled pulumi.BoolPtrInput
	// Specifies the region in which to manage the CTS system tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	Tags   pulumi.StringMapInput
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile pulumi.BoolPtrInput
}

func (TrackerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trackerArgs)(nil)).Elem()
}

type TrackerInput interface {
	pulumi.Input

	ToTrackerOutput() TrackerOutput
	ToTrackerOutputWithContext(ctx context.Context) TrackerOutput
}

func (*Tracker) ElementType() reflect.Type {
	return reflect.TypeOf((**Tracker)(nil)).Elem()
}

func (i *Tracker) ToTrackerOutput() TrackerOutput {
	return i.ToTrackerOutputWithContext(context.Background())
}

func (i *Tracker) ToTrackerOutputWithContext(ctx context.Context) TrackerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerOutput)
}

// TrackerArrayInput is an input type that accepts TrackerArray and TrackerArrayOutput values.
// You can construct a concrete instance of `TrackerArrayInput` via:
//
//	TrackerArray{ TrackerArgs{...} }
type TrackerArrayInput interface {
	pulumi.Input

	ToTrackerArrayOutput() TrackerArrayOutput
	ToTrackerArrayOutputWithContext(context.Context) TrackerArrayOutput
}

type TrackerArray []TrackerInput

func (TrackerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tracker)(nil)).Elem()
}

func (i TrackerArray) ToTrackerArrayOutput() TrackerArrayOutput {
	return i.ToTrackerArrayOutputWithContext(context.Background())
}

func (i TrackerArray) ToTrackerArrayOutputWithContext(ctx context.Context) TrackerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerArrayOutput)
}

// TrackerMapInput is an input type that accepts TrackerMap and TrackerMapOutput values.
// You can construct a concrete instance of `TrackerMapInput` via:
//
//	TrackerMap{ "key": TrackerArgs{...} }
type TrackerMapInput interface {
	pulumi.Input

	ToTrackerMapOutput() TrackerMapOutput
	ToTrackerMapOutputWithContext(context.Context) TrackerMapOutput
}

type TrackerMap map[string]TrackerInput

func (TrackerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tracker)(nil)).Elem()
}

func (i TrackerMap) ToTrackerMapOutput() TrackerMapOutput {
	return i.ToTrackerMapOutputWithContext(context.Background())
}

func (i TrackerMap) ToTrackerMapOutputWithContext(ctx context.Context) TrackerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrackerMapOutput)
}

type TrackerOutput struct{ *pulumi.OutputState }

func (TrackerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tracker)(nil)).Elem()
}

func (o TrackerOutput) ToTrackerOutput() TrackerOutput {
	return o
}

func (o TrackerOutput) ToTrackerOutputWithContext(ctx context.Context) TrackerOutput {
	return o
}

func (o TrackerOutput) AgencyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.AgencyName }).(pulumi.StringOutput)
}

// Specifies the OBS bucket to which traces will be transferred.
func (o TrackerOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o TrackerOutput) CompressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.CompressType }).(pulumi.StringPtrOutput)
}

func (o TrackerOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Tracker) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

func (o TrackerOutput) DeleteTracker() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.DeleteTracker }).(pulumi.BoolPtrOutput)
}

func (o TrackerOutput) Detail() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Detail }).(pulumi.StringOutput)
}

func (o TrackerOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Specifies whether tracker is enabled.
func (o TrackerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o TrackerOutput) ExcludeServices() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringArrayOutput { return v.ExcludeServices }).(pulumi.StringArrayOutput)
}

// Specifies the file name prefix to mark trace files that need to be stored
// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
// and periods (.) are allowed.
func (o TrackerOutput) FilePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.FilePrefix }).(pulumi.StringPtrOutput)
}

func (o TrackerOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o TrackerOutput) IsAuthorizedBucket() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolOutput { return v.IsAuthorizedBucket }).(pulumi.BoolOutput)
}

func (o TrackerOutput) IsSortByService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.IsSortByService }).(pulumi.BoolPtrOutput)
}

// Specifies the ID of KMS key used for trace file encryption.
func (o TrackerOutput) KmsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringPtrOutput { return v.KmsId }).(pulumi.StringPtrOutput)
}

func (o TrackerOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

func (o TrackerOutput) LogTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.LogTopicName }).(pulumi.StringOutput)
}

// Specifies whether trace analysis is enabled.
func (o TrackerOutput) LtsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.LtsEnabled }).(pulumi.BoolPtrOutput)
}

// The tracker name, only **system** is available.
func (o TrackerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TrackerOutput) OrganizationEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolOutput { return v.OrganizationEnabled }).(pulumi.BoolOutput)
}

// Specifies the region in which to manage the CTS system tracker resource.
// If omitted, the provider-level region will be used. Changing this creates a new resource.
func (o TrackerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The tracker status, the value can be **enabled**, **disabled** or **error**.
func (o TrackerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o TrackerOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

func (o TrackerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Whether traces will be transferred.
func (o TrackerOutput) TransferEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolOutput { return v.TransferEnabled }).(pulumi.BoolOutput)
}

// The tracker type, only **system** is available.
func (o TrackerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Tracker) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether trace file verification is enabled during trace transfer.
func (o TrackerOutput) ValidateFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tracker) pulumi.BoolPtrOutput { return v.ValidateFile }).(pulumi.BoolPtrOutput)
}

type TrackerArrayOutput struct{ *pulumi.OutputState }

func (TrackerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Tracker)(nil)).Elem()
}

func (o TrackerArrayOutput) ToTrackerArrayOutput() TrackerArrayOutput {
	return o
}

func (o TrackerArrayOutput) ToTrackerArrayOutputWithContext(ctx context.Context) TrackerArrayOutput {
	return o
}

func (o TrackerArrayOutput) Index(i pulumi.IntInput) TrackerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Tracker {
		return vs[0].([]*Tracker)[vs[1].(int)]
	}).(TrackerOutput)
}

type TrackerMapOutput struct{ *pulumi.OutputState }

func (TrackerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Tracker)(nil)).Elem()
}

func (o TrackerMapOutput) ToTrackerMapOutput() TrackerMapOutput {
	return o
}

func (o TrackerMapOutput) ToTrackerMapOutputWithContext(ctx context.Context) TrackerMapOutput {
	return o
}

func (o TrackerMapOutput) MapIndex(k pulumi.StringInput) TrackerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Tracker {
		return vs[0].(map[string]*Tracker)[vs[1].(string)]
	}).(TrackerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerInput)(nil)).Elem(), &Tracker{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerArrayInput)(nil)).Elem(), TrackerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrackerMapInput)(nil)).Elem(), TrackerMap{})
	pulumi.RegisterOutputType(TrackerOutput{})
	pulumi.RegisterOutputType(TrackerArrayOutput{})
	pulumi.RegisterOutputType(TrackerMapOutput{})
}

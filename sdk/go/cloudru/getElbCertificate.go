// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the certificate in SberCloud Dedicated Load Balance (Dedicated ELB).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			certificateName := cfg.RequireObject("certificateName")
//			_, err := sbercloud.LookupElbCertificate(ctx, &cloudru.LookupElbCertificateArgs{
//				Name: certificateName,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupElbCertificate(ctx *pulumi.Context, args *LookupElbCertificateArgs, opts ...pulumi.InvokeOption) (*LookupElbCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupElbCertificateResult
	err := ctx.Invoke("sbercloud:index/getElbCertificate:getElbCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getElbCertificate.
type LookupElbCertificateArgs struct {
	// The name of certificate. The value is case sensitive and does not supports fuzzy matching.
	//
	// > **NOTE:** The certificate name is not unique. Only returns the last created one when matched multiple certificates.
	Name string `pulumi:"name"`
	// The region in which to obtain the Dedicated ELB certificate. If omitted, the
	// provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getElbCertificate.
type LookupElbCertificateResult struct {
	// Human-readable description for the Certificate.
	Description string `pulumi:"description"`
	// The domain of the Certificate. This parameter is valid only when `type` is "server".
	Domain string `pulumi:"domain"`
	// Indicates the time when the certificate expires.
	Expiration string `pulumi:"expiration"`
	// The provider-assigned unique ID for this managed resource.
	Id     string `pulumi:"id"`
	Name   string `pulumi:"name"`
	Region string `pulumi:"region"`
	// Specifies the certificate type. The value can be one of the following:
	Type string `pulumi:"type"`
}

func LookupElbCertificateOutput(ctx *pulumi.Context, args LookupElbCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupElbCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupElbCertificateResultOutput, error) {
			args := v.(LookupElbCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getElbCertificate:getElbCertificate", args, LookupElbCertificateResultOutput{}, options).(LookupElbCertificateResultOutput), nil
		}).(LookupElbCertificateResultOutput)
}

// A collection of arguments for invoking getElbCertificate.
type LookupElbCertificateOutputArgs struct {
	// The name of certificate. The value is case sensitive and does not supports fuzzy matching.
	//
	// > **NOTE:** The certificate name is not unique. Only returns the last created one when matched multiple certificates.
	Name pulumi.StringInput `pulumi:"name"`
	// The region in which to obtain the Dedicated ELB certificate. If omitted, the
	// provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (LookupElbCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupElbCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getElbCertificate.
type LookupElbCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupElbCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupElbCertificateResult)(nil)).Elem()
}

func (o LookupElbCertificateResultOutput) ToLookupElbCertificateResultOutput() LookupElbCertificateResultOutput {
	return o
}

func (o LookupElbCertificateResultOutput) ToLookupElbCertificateResultOutputWithContext(ctx context.Context) LookupElbCertificateResultOutput {
	return o
}

// Human-readable description for the Certificate.
func (o LookupElbCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

// The domain of the Certificate. This parameter is valid only when `type` is "server".
func (o LookupElbCertificateResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Domain }).(pulumi.StringOutput)
}

// Indicates the time when the certificate expires.
func (o LookupElbCertificateResultOutput) Expiration() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Expiration }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupElbCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupElbCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupElbCertificateResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Region }).(pulumi.StringOutput)
}

// Specifies the certificate type. The value can be one of the following:
func (o LookupElbCertificateResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupElbCertificateResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupElbCertificateResultOutput{})
}

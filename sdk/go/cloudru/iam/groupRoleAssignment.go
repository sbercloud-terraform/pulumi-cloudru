// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type GroupRoleAssignment struct {
	pulumi.CustomResourceState

	DomainId            pulumi.StringPtrOutput `pulumi:"domainId"`
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	GroupId             pulumi.StringOutput    `pulumi:"groupId"`
	ProjectId           pulumi.StringPtrOutput `pulumi:"projectId"`
	RoleId              pulumi.StringOutput    `pulumi:"roleId"`
}

// NewGroupRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewGroupRoleAssignment(ctx *pulumi.Context,
	name string, args *GroupRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*GroupRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GroupRoleAssignment
	err := ctx.RegisterResource("cloudru:Iam/groupRoleAssignment:GroupRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupRoleAssignment gets an existing GroupRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupRoleAssignmentState, opts ...pulumi.ResourceOption) (*GroupRoleAssignment, error) {
	var resource GroupRoleAssignment
	err := ctx.ReadResource("cloudru:Iam/groupRoleAssignment:GroupRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupRoleAssignment resources.
type groupRoleAssignmentState struct {
	DomainId            *string `pulumi:"domainId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	GroupId             *string `pulumi:"groupId"`
	ProjectId           *string `pulumi:"projectId"`
	RoleId              *string `pulumi:"roleId"`
}

type GroupRoleAssignmentState struct {
	DomainId            pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	GroupId             pulumi.StringPtrInput
	ProjectId           pulumi.StringPtrInput
	RoleId              pulumi.StringPtrInput
}

func (GroupRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRoleAssignmentState)(nil)).Elem()
}

type groupRoleAssignmentArgs struct {
	DomainId            *string `pulumi:"domainId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	GroupId             string  `pulumi:"groupId"`
	ProjectId           *string `pulumi:"projectId"`
	RoleId              string  `pulumi:"roleId"`
}

// The set of arguments for constructing a GroupRoleAssignment resource.
type GroupRoleAssignmentArgs struct {
	DomainId            pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	GroupId             pulumi.StringInput
	ProjectId           pulumi.StringPtrInput
	RoleId              pulumi.StringInput
}

func (GroupRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupRoleAssignmentArgs)(nil)).Elem()
}

type GroupRoleAssignmentInput interface {
	pulumi.Input

	ToGroupRoleAssignmentOutput() GroupRoleAssignmentOutput
	ToGroupRoleAssignmentOutputWithContext(ctx context.Context) GroupRoleAssignmentOutput
}

func (*GroupRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRoleAssignment)(nil)).Elem()
}

func (i *GroupRoleAssignment) ToGroupRoleAssignmentOutput() GroupRoleAssignmentOutput {
	return i.ToGroupRoleAssignmentOutputWithContext(context.Background())
}

func (i *GroupRoleAssignment) ToGroupRoleAssignmentOutputWithContext(ctx context.Context) GroupRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleAssignmentOutput)
}

// GroupRoleAssignmentArrayInput is an input type that accepts GroupRoleAssignmentArray and GroupRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `GroupRoleAssignmentArrayInput` via:
//
//	GroupRoleAssignmentArray{ GroupRoleAssignmentArgs{...} }
type GroupRoleAssignmentArrayInput interface {
	pulumi.Input

	ToGroupRoleAssignmentArrayOutput() GroupRoleAssignmentArrayOutput
	ToGroupRoleAssignmentArrayOutputWithContext(context.Context) GroupRoleAssignmentArrayOutput
}

type GroupRoleAssignmentArray []GroupRoleAssignmentInput

func (GroupRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupRoleAssignment)(nil)).Elem()
}

func (i GroupRoleAssignmentArray) ToGroupRoleAssignmentArrayOutput() GroupRoleAssignmentArrayOutput {
	return i.ToGroupRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i GroupRoleAssignmentArray) ToGroupRoleAssignmentArrayOutputWithContext(ctx context.Context) GroupRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleAssignmentArrayOutput)
}

// GroupRoleAssignmentMapInput is an input type that accepts GroupRoleAssignmentMap and GroupRoleAssignmentMapOutput values.
// You can construct a concrete instance of `GroupRoleAssignmentMapInput` via:
//
//	GroupRoleAssignmentMap{ "key": GroupRoleAssignmentArgs{...} }
type GroupRoleAssignmentMapInput interface {
	pulumi.Input

	ToGroupRoleAssignmentMapOutput() GroupRoleAssignmentMapOutput
	ToGroupRoleAssignmentMapOutputWithContext(context.Context) GroupRoleAssignmentMapOutput
}

type GroupRoleAssignmentMap map[string]GroupRoleAssignmentInput

func (GroupRoleAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupRoleAssignment)(nil)).Elem()
}

func (i GroupRoleAssignmentMap) ToGroupRoleAssignmentMapOutput() GroupRoleAssignmentMapOutput {
	return i.ToGroupRoleAssignmentMapOutputWithContext(context.Background())
}

func (i GroupRoleAssignmentMap) ToGroupRoleAssignmentMapOutputWithContext(ctx context.Context) GroupRoleAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupRoleAssignmentMapOutput)
}

type GroupRoleAssignmentOutput struct{ *pulumi.OutputState }

func (GroupRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupRoleAssignment)(nil)).Elem()
}

func (o GroupRoleAssignmentOutput) ToGroupRoleAssignmentOutput() GroupRoleAssignmentOutput {
	return o
}

func (o GroupRoleAssignmentOutput) ToGroupRoleAssignmentOutputWithContext(ctx context.Context) GroupRoleAssignmentOutput {
	return o
}

func (o GroupRoleAssignmentOutput) DomainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupRoleAssignment) pulumi.StringPtrOutput { return v.DomainId }).(pulumi.StringPtrOutput)
}

func (o GroupRoleAssignmentOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupRoleAssignment) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

func (o GroupRoleAssignmentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupRoleAssignment) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o GroupRoleAssignmentOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupRoleAssignment) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o GroupRoleAssignmentOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupRoleAssignment) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type GroupRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (GroupRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupRoleAssignment)(nil)).Elem()
}

func (o GroupRoleAssignmentArrayOutput) ToGroupRoleAssignmentArrayOutput() GroupRoleAssignmentArrayOutput {
	return o
}

func (o GroupRoleAssignmentArrayOutput) ToGroupRoleAssignmentArrayOutputWithContext(ctx context.Context) GroupRoleAssignmentArrayOutput {
	return o
}

func (o GroupRoleAssignmentArrayOutput) Index(i pulumi.IntInput) GroupRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupRoleAssignment {
		return vs[0].([]*GroupRoleAssignment)[vs[1].(int)]
	}).(GroupRoleAssignmentOutput)
}

type GroupRoleAssignmentMapOutput struct{ *pulumi.OutputState }

func (GroupRoleAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupRoleAssignment)(nil)).Elem()
}

func (o GroupRoleAssignmentMapOutput) ToGroupRoleAssignmentMapOutput() GroupRoleAssignmentMapOutput {
	return o
}

func (o GroupRoleAssignmentMapOutput) ToGroupRoleAssignmentMapOutputWithContext(ctx context.Context) GroupRoleAssignmentMapOutput {
	return o
}

func (o GroupRoleAssignmentMapOutput) MapIndex(k pulumi.StringInput) GroupRoleAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupRoleAssignment {
		return vs[0].(map[string]*GroupRoleAssignment)[vs[1].(string)]
	}).(GroupRoleAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleAssignmentInput)(nil)).Elem(), &GroupRoleAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleAssignmentArrayInput)(nil)).Elem(), GroupRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupRoleAssignmentMapInput)(nil)).Elem(), GroupRoleAssignmentMap{})
	pulumi.RegisterOutputType(GroupRoleAssignmentOutput{})
	pulumi.RegisterOutputType(GroupRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(GroupRoleAssignmentMapOutput{})
}

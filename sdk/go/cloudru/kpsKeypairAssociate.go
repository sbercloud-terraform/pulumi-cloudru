// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type KpsKeypairAssociate struct {
	pulumi.CustomResourceState

	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the name of SSH keypair.
	KeypairName pulumi.StringOutput `pulumi:"keypairName"`
	// Specifies the region in which to query the resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ECS information.
	Server KpsKeypairAssociateServerOutput `pulumi:"server"`
}

// NewKpsKeypairAssociate registers a new resource with the given unique name, arguments, and options.
func NewKpsKeypairAssociate(ctx *pulumi.Context,
	name string, args *KpsKeypairAssociateArgs, opts ...pulumi.ResourceOption) (*KpsKeypairAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeypairName == nil {
		return nil, errors.New("invalid value for required argument 'KeypairName'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KpsKeypairAssociate
	err := ctx.RegisterResource("sbercloud:index/kpsKeypairAssociate:KpsKeypairAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKpsKeypairAssociate gets an existing KpsKeypairAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKpsKeypairAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KpsKeypairAssociateState, opts ...pulumi.ResourceOption) (*KpsKeypairAssociate, error) {
	var resource KpsKeypairAssociate
	err := ctx.ReadResource("sbercloud:index/kpsKeypairAssociate:KpsKeypairAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KpsKeypairAssociate resources.
type kpsKeypairAssociateState struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the name of SSH keypair.
	KeypairName *string `pulumi:"keypairName"`
	// Specifies the region in which to query the resource.
	Region *string `pulumi:"region"`
	// Specifies the ECS information.
	Server *KpsKeypairAssociateServer `pulumi:"server"`
}

type KpsKeypairAssociateState struct {
	EnableForceNew pulumi.StringPtrInput
	// Specifies the name of SSH keypair.
	KeypairName pulumi.StringPtrInput
	// Specifies the region in which to query the resource.
	Region pulumi.StringPtrInput
	// Specifies the ECS information.
	Server KpsKeypairAssociateServerPtrInput
}

func (KpsKeypairAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*kpsKeypairAssociateState)(nil)).Elem()
}

type kpsKeypairAssociateArgs struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the name of SSH keypair.
	KeypairName string `pulumi:"keypairName"`
	// Specifies the region in which to query the resource.
	Region *string `pulumi:"region"`
	// Specifies the ECS information.
	Server KpsKeypairAssociateServer `pulumi:"server"`
}

// The set of arguments for constructing a KpsKeypairAssociate resource.
type KpsKeypairAssociateArgs struct {
	EnableForceNew pulumi.StringPtrInput
	// Specifies the name of SSH keypair.
	KeypairName pulumi.StringInput
	// Specifies the region in which to query the resource.
	Region pulumi.StringPtrInput
	// Specifies the ECS information.
	Server KpsKeypairAssociateServerInput
}

func (KpsKeypairAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kpsKeypairAssociateArgs)(nil)).Elem()
}

type KpsKeypairAssociateInput interface {
	pulumi.Input

	ToKpsKeypairAssociateOutput() KpsKeypairAssociateOutput
	ToKpsKeypairAssociateOutputWithContext(ctx context.Context) KpsKeypairAssociateOutput
}

func (*KpsKeypairAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**KpsKeypairAssociate)(nil)).Elem()
}

func (i *KpsKeypairAssociate) ToKpsKeypairAssociateOutput() KpsKeypairAssociateOutput {
	return i.ToKpsKeypairAssociateOutputWithContext(context.Background())
}

func (i *KpsKeypairAssociate) ToKpsKeypairAssociateOutputWithContext(ctx context.Context) KpsKeypairAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairAssociateOutput)
}

// KpsKeypairAssociateArrayInput is an input type that accepts KpsKeypairAssociateArray and KpsKeypairAssociateArrayOutput values.
// You can construct a concrete instance of `KpsKeypairAssociateArrayInput` via:
//
//	KpsKeypairAssociateArray{ KpsKeypairAssociateArgs{...} }
type KpsKeypairAssociateArrayInput interface {
	pulumi.Input

	ToKpsKeypairAssociateArrayOutput() KpsKeypairAssociateArrayOutput
	ToKpsKeypairAssociateArrayOutputWithContext(context.Context) KpsKeypairAssociateArrayOutput
}

type KpsKeypairAssociateArray []KpsKeypairAssociateInput

func (KpsKeypairAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KpsKeypairAssociate)(nil)).Elem()
}

func (i KpsKeypairAssociateArray) ToKpsKeypairAssociateArrayOutput() KpsKeypairAssociateArrayOutput {
	return i.ToKpsKeypairAssociateArrayOutputWithContext(context.Background())
}

func (i KpsKeypairAssociateArray) ToKpsKeypairAssociateArrayOutputWithContext(ctx context.Context) KpsKeypairAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairAssociateArrayOutput)
}

// KpsKeypairAssociateMapInput is an input type that accepts KpsKeypairAssociateMap and KpsKeypairAssociateMapOutput values.
// You can construct a concrete instance of `KpsKeypairAssociateMapInput` via:
//
//	KpsKeypairAssociateMap{ "key": KpsKeypairAssociateArgs{...} }
type KpsKeypairAssociateMapInput interface {
	pulumi.Input

	ToKpsKeypairAssociateMapOutput() KpsKeypairAssociateMapOutput
	ToKpsKeypairAssociateMapOutputWithContext(context.Context) KpsKeypairAssociateMapOutput
}

type KpsKeypairAssociateMap map[string]KpsKeypairAssociateInput

func (KpsKeypairAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KpsKeypairAssociate)(nil)).Elem()
}

func (i KpsKeypairAssociateMap) ToKpsKeypairAssociateMapOutput() KpsKeypairAssociateMapOutput {
	return i.ToKpsKeypairAssociateMapOutputWithContext(context.Background())
}

func (i KpsKeypairAssociateMap) ToKpsKeypairAssociateMapOutputWithContext(ctx context.Context) KpsKeypairAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairAssociateMapOutput)
}

type KpsKeypairAssociateOutput struct{ *pulumi.OutputState }

func (KpsKeypairAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpsKeypairAssociate)(nil)).Elem()
}

func (o KpsKeypairAssociateOutput) ToKpsKeypairAssociateOutput() KpsKeypairAssociateOutput {
	return o
}

func (o KpsKeypairAssociateOutput) ToKpsKeypairAssociateOutputWithContext(ctx context.Context) KpsKeypairAssociateOutput {
	return o
}

func (o KpsKeypairAssociateOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpsKeypairAssociate) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the name of SSH keypair.
func (o KpsKeypairAssociateOutput) KeypairName() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypairAssociate) pulumi.StringOutput { return v.KeypairName }).(pulumi.StringOutput)
}

// Specifies the region in which to query the resource.
func (o KpsKeypairAssociateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypairAssociate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ECS information.
func (o KpsKeypairAssociateOutput) Server() KpsKeypairAssociateServerOutput {
	return o.ApplyT(func(v *KpsKeypairAssociate) KpsKeypairAssociateServerOutput { return v.Server }).(KpsKeypairAssociateServerOutput)
}

type KpsKeypairAssociateArrayOutput struct{ *pulumi.OutputState }

func (KpsKeypairAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KpsKeypairAssociate)(nil)).Elem()
}

func (o KpsKeypairAssociateArrayOutput) ToKpsKeypairAssociateArrayOutput() KpsKeypairAssociateArrayOutput {
	return o
}

func (o KpsKeypairAssociateArrayOutput) ToKpsKeypairAssociateArrayOutputWithContext(ctx context.Context) KpsKeypairAssociateArrayOutput {
	return o
}

func (o KpsKeypairAssociateArrayOutput) Index(i pulumi.IntInput) KpsKeypairAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KpsKeypairAssociate {
		return vs[0].([]*KpsKeypairAssociate)[vs[1].(int)]
	}).(KpsKeypairAssociateOutput)
}

type KpsKeypairAssociateMapOutput struct{ *pulumi.OutputState }

func (KpsKeypairAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KpsKeypairAssociate)(nil)).Elem()
}

func (o KpsKeypairAssociateMapOutput) ToKpsKeypairAssociateMapOutput() KpsKeypairAssociateMapOutput {
	return o
}

func (o KpsKeypairAssociateMapOutput) ToKpsKeypairAssociateMapOutputWithContext(ctx context.Context) KpsKeypairAssociateMapOutput {
	return o
}

func (o KpsKeypairAssociateMapOutput) MapIndex(k pulumi.StringInput) KpsKeypairAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KpsKeypairAssociate {
		return vs[0].(map[string]*KpsKeypairAssociate)[vs[1].(string)]
	}).(KpsKeypairAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairAssociateInput)(nil)).Elem(), &KpsKeypairAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairAssociateArrayInput)(nil)).Elem(), KpsKeypairAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairAssociateMapInput)(nil)).Elem(), KpsKeypairAssociateMap{})
	pulumi.RegisterOutputType(KpsKeypairAssociateOutput{})
	pulumi.RegisterOutputType(KpsKeypairAssociateArrayOutput{})
	pulumi.RegisterOutputType(KpsKeypairAssociateMapOutput{})
}

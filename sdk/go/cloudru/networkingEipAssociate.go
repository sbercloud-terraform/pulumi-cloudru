// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type NetworkingEipAssociate struct {
	pulumi.CustomResourceState

	FixedIp    pulumi.StringOutput `pulumi:"fixedIp"`
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	NetworkId  pulumi.StringOutput `pulumi:"networkId"`
	PortId     pulumi.StringOutput `pulumi:"portId"`
	PublicIp   pulumi.StringOutput `pulumi:"publicIp"`
	PublicIpv6 pulumi.StringOutput `pulumi:"publicIpv6"`
	Region     pulumi.StringOutput `pulumi:"region"`
	Status     pulumi.StringOutput `pulumi:"status"`
}

// NewNetworkingEipAssociate registers a new resource with the given unique name, arguments, and options.
func NewNetworkingEipAssociate(ctx *pulumi.Context,
	name string, args *NetworkingEipAssociateArgs, opts ...pulumi.ResourceOption) (*NetworkingEipAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicIp == nil {
		return nil, errors.New("invalid value for required argument 'PublicIp'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkingEipAssociate
	err := ctx.RegisterResource("cloudru:index/networkingEipAssociate:NetworkingEipAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkingEipAssociate gets an existing NetworkingEipAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkingEipAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkingEipAssociateState, opts ...pulumi.ResourceOption) (*NetworkingEipAssociate, error) {
	var resource NetworkingEipAssociate
	err := ctx.ReadResource("cloudru:index/networkingEipAssociate:NetworkingEipAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkingEipAssociate resources.
type networkingEipAssociateState struct {
	FixedIp    *string `pulumi:"fixedIp"`
	MacAddress *string `pulumi:"macAddress"`
	NetworkId  *string `pulumi:"networkId"`
	PortId     *string `pulumi:"portId"`
	PublicIp   *string `pulumi:"publicIp"`
	PublicIpv6 *string `pulumi:"publicIpv6"`
	Region     *string `pulumi:"region"`
	Status     *string `pulumi:"status"`
}

type NetworkingEipAssociateState struct {
	FixedIp    pulumi.StringPtrInput
	MacAddress pulumi.StringPtrInput
	NetworkId  pulumi.StringPtrInput
	PortId     pulumi.StringPtrInput
	PublicIp   pulumi.StringPtrInput
	PublicIpv6 pulumi.StringPtrInput
	Region     pulumi.StringPtrInput
	Status     pulumi.StringPtrInput
}

func (NetworkingEipAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingEipAssociateState)(nil)).Elem()
}

type networkingEipAssociateArgs struct {
	FixedIp   *string `pulumi:"fixedIp"`
	NetworkId *string `pulumi:"networkId"`
	PortId    *string `pulumi:"portId"`
	PublicIp  string  `pulumi:"publicIp"`
	Region    *string `pulumi:"region"`
}

// The set of arguments for constructing a NetworkingEipAssociate resource.
type NetworkingEipAssociateArgs struct {
	FixedIp   pulumi.StringPtrInput
	NetworkId pulumi.StringPtrInput
	PortId    pulumi.StringPtrInput
	PublicIp  pulumi.StringInput
	Region    pulumi.StringPtrInput
}

func (NetworkingEipAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkingEipAssociateArgs)(nil)).Elem()
}

type NetworkingEipAssociateInput interface {
	pulumi.Input

	ToNetworkingEipAssociateOutput() NetworkingEipAssociateOutput
	ToNetworkingEipAssociateOutputWithContext(ctx context.Context) NetworkingEipAssociateOutput
}

func (*NetworkingEipAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingEipAssociate)(nil)).Elem()
}

func (i *NetworkingEipAssociate) ToNetworkingEipAssociateOutput() NetworkingEipAssociateOutput {
	return i.ToNetworkingEipAssociateOutputWithContext(context.Background())
}

func (i *NetworkingEipAssociate) ToNetworkingEipAssociateOutputWithContext(ctx context.Context) NetworkingEipAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingEipAssociateOutput)
}

// NetworkingEipAssociateArrayInput is an input type that accepts NetworkingEipAssociateArray and NetworkingEipAssociateArrayOutput values.
// You can construct a concrete instance of `NetworkingEipAssociateArrayInput` via:
//
//	NetworkingEipAssociateArray{ NetworkingEipAssociateArgs{...} }
type NetworkingEipAssociateArrayInput interface {
	pulumi.Input

	ToNetworkingEipAssociateArrayOutput() NetworkingEipAssociateArrayOutput
	ToNetworkingEipAssociateArrayOutputWithContext(context.Context) NetworkingEipAssociateArrayOutput
}

type NetworkingEipAssociateArray []NetworkingEipAssociateInput

func (NetworkingEipAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingEipAssociate)(nil)).Elem()
}

func (i NetworkingEipAssociateArray) ToNetworkingEipAssociateArrayOutput() NetworkingEipAssociateArrayOutput {
	return i.ToNetworkingEipAssociateArrayOutputWithContext(context.Background())
}

func (i NetworkingEipAssociateArray) ToNetworkingEipAssociateArrayOutputWithContext(ctx context.Context) NetworkingEipAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingEipAssociateArrayOutput)
}

// NetworkingEipAssociateMapInput is an input type that accepts NetworkingEipAssociateMap and NetworkingEipAssociateMapOutput values.
// You can construct a concrete instance of `NetworkingEipAssociateMapInput` via:
//
//	NetworkingEipAssociateMap{ "key": NetworkingEipAssociateArgs{...} }
type NetworkingEipAssociateMapInput interface {
	pulumi.Input

	ToNetworkingEipAssociateMapOutput() NetworkingEipAssociateMapOutput
	ToNetworkingEipAssociateMapOutputWithContext(context.Context) NetworkingEipAssociateMapOutput
}

type NetworkingEipAssociateMap map[string]NetworkingEipAssociateInput

func (NetworkingEipAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingEipAssociate)(nil)).Elem()
}

func (i NetworkingEipAssociateMap) ToNetworkingEipAssociateMapOutput() NetworkingEipAssociateMapOutput {
	return i.ToNetworkingEipAssociateMapOutputWithContext(context.Background())
}

func (i NetworkingEipAssociateMap) ToNetworkingEipAssociateMapOutputWithContext(ctx context.Context) NetworkingEipAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkingEipAssociateMapOutput)
}

type NetworkingEipAssociateOutput struct{ *pulumi.OutputState }

func (NetworkingEipAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkingEipAssociate)(nil)).Elem()
}

func (o NetworkingEipAssociateOutput) ToNetworkingEipAssociateOutput() NetworkingEipAssociateOutput {
	return o
}

func (o NetworkingEipAssociateOutput) ToNetworkingEipAssociateOutputWithContext(ctx context.Context) NetworkingEipAssociateOutput {
	return o
}

func (o NetworkingEipAssociateOutput) FixedIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingEipAssociate) pulumi.StringOutput { return v.FixedIp }).(pulumi.StringOutput)
}

func (o NetworkingEipAssociateOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingEipAssociate) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

func (o NetworkingEipAssociateOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingEipAssociate) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

func (o NetworkingEipAssociateOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingEipAssociate) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

func (o NetworkingEipAssociateOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingEipAssociate) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o NetworkingEipAssociateOutput) PublicIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingEipAssociate) pulumi.StringOutput { return v.PublicIpv6 }).(pulumi.StringOutput)
}

func (o NetworkingEipAssociateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingEipAssociate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o NetworkingEipAssociateOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkingEipAssociate) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type NetworkingEipAssociateArrayOutput struct{ *pulumi.OutputState }

func (NetworkingEipAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkingEipAssociate)(nil)).Elem()
}

func (o NetworkingEipAssociateArrayOutput) ToNetworkingEipAssociateArrayOutput() NetworkingEipAssociateArrayOutput {
	return o
}

func (o NetworkingEipAssociateArrayOutput) ToNetworkingEipAssociateArrayOutputWithContext(ctx context.Context) NetworkingEipAssociateArrayOutput {
	return o
}

func (o NetworkingEipAssociateArrayOutput) Index(i pulumi.IntInput) NetworkingEipAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkingEipAssociate {
		return vs[0].([]*NetworkingEipAssociate)[vs[1].(int)]
	}).(NetworkingEipAssociateOutput)
}

type NetworkingEipAssociateMapOutput struct{ *pulumi.OutputState }

func (NetworkingEipAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkingEipAssociate)(nil)).Elem()
}

func (o NetworkingEipAssociateMapOutput) ToNetworkingEipAssociateMapOutput() NetworkingEipAssociateMapOutput {
	return o
}

func (o NetworkingEipAssociateMapOutput) ToNetworkingEipAssociateMapOutputWithContext(ctx context.Context) NetworkingEipAssociateMapOutput {
	return o
}

func (o NetworkingEipAssociateMapOutput) MapIndex(k pulumi.StringInput) NetworkingEipAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkingEipAssociate {
		return vs[0].(map[string]*NetworkingEipAssociate)[vs[1].(string)]
	}).(NetworkingEipAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingEipAssociateInput)(nil)).Elem(), &NetworkingEipAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingEipAssociateArrayInput)(nil)).Elem(), NetworkingEipAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkingEipAssociateMapInput)(nil)).Elem(), NetworkingEipAssociateMap{})
	pulumi.RegisterOutputType(NetworkingEipAssociateOutput{})
	pulumi.RegisterOutputType(NetworkingEipAssociateArrayOutput{})
	pulumi.RegisterOutputType(NetworkingEipAssociateMapOutput{})
}

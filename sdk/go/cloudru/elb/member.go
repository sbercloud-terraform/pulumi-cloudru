// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages an ELB member resource within SberCloud. This is an alternative to `sbercloudLbMemberV2`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/elb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := elb.NewMember(ctx, "member_1", &elb.MemberArgs{
//				Address:      pulumi.String("192.168.199.23"),
//				ProtocolPort: pulumi.Int(8080),
//				PoolId:       pulumi.Any(poolId),
//				SubnetId:     pulumi.Any(subnetId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB member can be imported using the pool ID and member ID separated by a slash, e.g.
//
// ```sh
// $ pulumi import sbercloud:Elb/member:Member member_1 e0bd694a-abbe-450e-b329-0931fd1cc5eb/4086b0c9-b18c-4d1c-b6b8-4c56c3ad2a9e
// ```
type Member struct {
	pulumi.CustomResourceState

	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address pulumi.StringOutput `pulumi:"address"`
	// The administrative state of the member.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp        pulumi.BoolPtrOutput `pulumi:"adminStateUp"`
	BackendServerStatus pulumi.BoolOutput    `pulumi:"backendServerStatus"`
	// Human-readable name for the member.
	Name            pulumi.StringOutput `pulumi:"name"`
	OperatingStatus pulumi.StringOutput `pulumi:"operatingStatus"`
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort pulumi.IntOutput `pulumi:"protocolPort"`
	// The region in which to create the ELB member resource. If omitted, the
	// provider-level region will be used. Changing this creates a new member.
	Region pulumi.StringOutput `pulumi:"region"`
	// The subnet in which to access the member
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewMember registers a new resource with the given unique name, arguments, and options.
func NewMember(ctx *pulumi.Context,
	name string, args *MemberArgs, opts ...pulumi.ResourceOption) (*Member, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.ProtocolPort == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolPort'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Member
	err := ctx.RegisterResource("sbercloud:Elb/member:Member", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMember gets an existing Member resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MemberState, opts ...pulumi.ResourceOption) (*Member, error) {
	var resource Member
	err := ctx.ReadResource("sbercloud:Elb/member:Member", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Member resources.
type memberState struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address *string `pulumi:"address"`
	// The administrative state of the member.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp        *bool `pulumi:"adminStateUp"`
	BackendServerStatus *bool `pulumi:"backendServerStatus"`
	// Human-readable name for the member.
	Name            *string `pulumi:"name"`
	OperatingStatus *string `pulumi:"operatingStatus"`
	// The id of the pool that this member will be assigned to.
	PoolId *string `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort *int `pulumi:"protocolPort"`
	// The region in which to create the ELB member resource. If omitted, the
	// provider-level region will be used. Changing this creates a new member.
	Region *string `pulumi:"region"`
	// The subnet in which to access the member
	SubnetId *string `pulumi:"subnetId"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight *int `pulumi:"weight"`
}

type MemberState struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address pulumi.StringPtrInput
	// The administrative state of the member.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp        pulumi.BoolPtrInput
	BackendServerStatus pulumi.BoolPtrInput
	// Human-readable name for the member.
	Name            pulumi.StringPtrInput
	OperatingStatus pulumi.StringPtrInput
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringPtrInput
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort pulumi.IntPtrInput
	// The region in which to create the ELB member resource. If omitted, the
	// provider-level region will be used. Changing this creates a new member.
	Region pulumi.StringPtrInput
	// The subnet in which to access the member
	SubnetId pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntPtrInput
}

func (MemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*memberState)(nil)).Elem()
}

type memberArgs struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address string `pulumi:"address"`
	// The administrative state of the member.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `pulumi:"adminStateUp"`
	// Human-readable name for the member.
	Name *string `pulumi:"name"`
	// The id of the pool that this member will be assigned to.
	PoolId string `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort int `pulumi:"protocolPort"`
	// The region in which to create the ELB member resource. If omitted, the
	// provider-level region will be used. Changing this creates a new member.
	Region *string `pulumi:"region"`
	// The subnet in which to access the member
	SubnetId string `pulumi:"subnetId"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a Member resource.
type MemberArgs struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address pulumi.StringInput
	// The administrative state of the member.
	// A valid value is true (UP) or false (DOWN).
	AdminStateUp pulumi.BoolPtrInput
	// Human-readable name for the member.
	Name pulumi.StringPtrInput
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringInput
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort pulumi.IntInput
	// The region in which to create the ELB member resource. If omitted, the
	// provider-level region will be used. Changing this creates a new member.
	Region pulumi.StringPtrInput
	// The subnet in which to access the member
	SubnetId pulumi.StringInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntPtrInput
}

func (MemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*memberArgs)(nil)).Elem()
}

type MemberInput interface {
	pulumi.Input

	ToMemberOutput() MemberOutput
	ToMemberOutputWithContext(ctx context.Context) MemberOutput
}

func (*Member) ElementType() reflect.Type {
	return reflect.TypeOf((**Member)(nil)).Elem()
}

func (i *Member) ToMemberOutput() MemberOutput {
	return i.ToMemberOutputWithContext(context.Background())
}

func (i *Member) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberOutput)
}

// MemberArrayInput is an input type that accepts MemberArray and MemberArrayOutput values.
// You can construct a concrete instance of `MemberArrayInput` via:
//
//	MemberArray{ MemberArgs{...} }
type MemberArrayInput interface {
	pulumi.Input

	ToMemberArrayOutput() MemberArrayOutput
	ToMemberArrayOutputWithContext(context.Context) MemberArrayOutput
}

type MemberArray []MemberInput

func (MemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Member)(nil)).Elem()
}

func (i MemberArray) ToMemberArrayOutput() MemberArrayOutput {
	return i.ToMemberArrayOutputWithContext(context.Background())
}

func (i MemberArray) ToMemberArrayOutputWithContext(ctx context.Context) MemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberArrayOutput)
}

// MemberMapInput is an input type that accepts MemberMap and MemberMapOutput values.
// You can construct a concrete instance of `MemberMapInput` via:
//
//	MemberMap{ "key": MemberArgs{...} }
type MemberMapInput interface {
	pulumi.Input

	ToMemberMapOutput() MemberMapOutput
	ToMemberMapOutputWithContext(context.Context) MemberMapOutput
}

type MemberMap map[string]MemberInput

func (MemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Member)(nil)).Elem()
}

func (i MemberMap) ToMemberMapOutput() MemberMapOutput {
	return i.ToMemberMapOutputWithContext(context.Background())
}

func (i MemberMap) ToMemberMapOutputWithContext(ctx context.Context) MemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MemberMapOutput)
}

type MemberOutput struct{ *pulumi.OutputState }

func (MemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Member)(nil)).Elem()
}

func (o MemberOutput) ToMemberOutput() MemberOutput {
	return o
}

func (o MemberOutput) ToMemberOutputWithContext(ctx context.Context) MemberOutput {
	return o
}

// The IP address of the member to receive traffic from the load balancer.
// Changing this creates a new member.
func (o MemberOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// The administrative state of the member.
// A valid value is true (UP) or false (DOWN).
func (o MemberOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Member) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o MemberOutput) BackendServerStatus() pulumi.BoolOutput {
	return o.ApplyT(func(v *Member) pulumi.BoolOutput { return v.BackendServerStatus }).(pulumi.BoolOutput)
}

// Human-readable name for the member.
func (o MemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MemberOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.OperatingStatus }).(pulumi.StringOutput)
}

// The id of the pool that this member will be assigned to.
func (o MemberOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// The port on which to listen for client traffic. Changing this creates a
// new member.
func (o MemberOutput) ProtocolPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Member) pulumi.IntOutput { return v.ProtocolPort }).(pulumi.IntOutput)
}

// The region in which to create the ELB member resource. If omitted, the
// provider-level region will be used. Changing this creates a new member.
func (o MemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The subnet in which to access the member
func (o MemberOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o MemberOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Member) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// A positive integer value that indicates the relative portion of traffic that this member
// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
// member with a weight of 2.
func (o MemberOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *Member) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type MemberArrayOutput struct{ *pulumi.OutputState }

func (MemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Member)(nil)).Elem()
}

func (o MemberArrayOutput) ToMemberArrayOutput() MemberArrayOutput {
	return o
}

func (o MemberArrayOutput) ToMemberArrayOutputWithContext(ctx context.Context) MemberArrayOutput {
	return o
}

func (o MemberArrayOutput) Index(i pulumi.IntInput) MemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Member {
		return vs[0].([]*Member)[vs[1].(int)]
	}).(MemberOutput)
}

type MemberMapOutput struct{ *pulumi.OutputState }

func (MemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Member)(nil)).Elem()
}

func (o MemberMapOutput) ToMemberMapOutput() MemberMapOutput {
	return o
}

func (o MemberMapOutput) ToMemberMapOutputWithContext(ctx context.Context) MemberMapOutput {
	return o
}

func (o MemberMapOutput) MapIndex(k pulumi.StringInput) MemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Member {
		return vs[0].(map[string]*Member)[vs[1].(string)]
	}).(MemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MemberInput)(nil)).Elem(), &Member{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemberArrayInput)(nil)).Elem(), MemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MemberMapInput)(nil)).Elem(), MemberMap{})
	pulumi.RegisterOutputType(MemberOutput{})
	pulumi.RegisterOutputType(MemberArrayOutput{})
	pulumi.RegisterOutputType(MemberMapOutput{})
}

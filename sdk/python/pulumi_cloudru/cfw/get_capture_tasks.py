# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCaptureTasksResult',
    'AwaitableGetCaptureTasksResult',
    'get_capture_tasks',
    'get_capture_tasks_output',
]

@pulumi.output_type
class GetCaptureTasksResult:
    """
    A collection of values returned by getCaptureTasks.
    """
    def __init__(__self__, fw_instance_id=None, id=None, records=None, region=None):
        if fw_instance_id and not isinstance(fw_instance_id, str):
            raise TypeError("Expected argument 'fw_instance_id' to be a str")
        pulumi.set(__self__, "fw_instance_id", fw_instance_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if records and not isinstance(records, list):
            raise TypeError("Expected argument 'records' to be a list")
        pulumi.set(__self__, "records", records)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="fwInstanceId")
    def fw_instance_id(self) -> builtins.str:
        return pulumi.get(self, "fw_instance_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def records(self) -> Sequence['outputs.GetCaptureTasksRecordResult']:
        """
        List of capture task information.
        """
        return pulumi.get(self, "records")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetCaptureTasksResult(GetCaptureTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCaptureTasksResult(
            fw_instance_id=self.fw_instance_id,
            id=self.id,
            records=self.records,
            region=self.region)


def get_capture_tasks(fw_instance_id: Optional[builtins.str] = None,
                      region: Optional[builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCaptureTasksResult:
    """
    Use this data source to get the list of CFW capture tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    fw_instance_id = config.require_object("fwInstanceId")
    test = sbercloud.Cfw.get_capture_tasks(fw_instance_id=fw_instance_id)
    ```


    :param builtins.str fw_instance_id: Specifies the ID of the firewall instance.
    :param builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['fwInstanceId'] = fw_instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:Cfw/getCaptureTasks:getCaptureTasks', __args__, opts=opts, typ=GetCaptureTasksResult).value

    return AwaitableGetCaptureTasksResult(
        fw_instance_id=pulumi.get(__ret__, 'fw_instance_id'),
        id=pulumi.get(__ret__, 'id'),
        records=pulumi.get(__ret__, 'records'),
        region=pulumi.get(__ret__, 'region'))
def get_capture_tasks_output(fw_instance_id: Optional[pulumi.Input[builtins.str]] = None,
                             region: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCaptureTasksResult]:
    """
    Use this data source to get the list of CFW capture tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    fw_instance_id = config.require_object("fwInstanceId")
    test = sbercloud.Cfw.get_capture_tasks(fw_instance_id=fw_instance_id)
    ```


    :param builtins.str fw_instance_id: Specifies the ID of the firewall instance.
    :param builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['fwInstanceId'] = fw_instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:Cfw/getCaptureTasks:getCaptureTasks', __args__, opts=opts, typ=GetCaptureTasksResult)
    return __ret__.apply(lambda __response__: GetCaptureTasksResult(
        fw_instance_id=pulumi.get(__response__, 'fw_instance_id'),
        id=pulumi.get(__response__, 'id'),
        records=pulumi.get(__response__, 'records'),
        region=pulumi.get(__response__, 'region')))

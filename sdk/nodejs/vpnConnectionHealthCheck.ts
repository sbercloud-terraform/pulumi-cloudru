// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a VPN connection health check resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const connectionId = config.requireObject<any>("connectionId");
 * const test = new sbercloud.VpnConnectionHealthCheck("test", {connectionId: connectionId});
 * ```
 *
 * ## Import
 *
 * The health check can be imported using the `id`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:index/vpnConnectionHealthCheck:VpnConnectionHealthCheck test <id>
 * ```
 */
export class VpnConnectionHealthCheck extends pulumi.CustomResource {
    /**
     * Get an existing VpnConnectionHealthCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnConnectionHealthCheckState, opts?: pulumi.CustomResourceOptions): VpnConnectionHealthCheck {
        return new VpnConnectionHealthCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/vpnConnectionHealthCheck:VpnConnectionHealthCheck';

    /**
     * Returns true if the given object is an instance of VpnConnectionHealthCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnConnectionHealthCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnectionHealthCheck.__pulumiType;
    }

    /**
     * Specifies the ID of the VPN connection to monitor.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly connectionId!: pulumi.Output<string>;
    /**
     * The destination IP address of the VPN connection.
     */
    public /*out*/ readonly destinationIp!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The source IP address of the VPN connection.
     */
    public /*out*/ readonly sourceIp!: pulumi.Output<string>;
    /**
     * The status of the connection health check.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a VpnConnectionHealthCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnConnectionHealthCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnConnectionHealthCheckArgs | VpnConnectionHealthCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnConnectionHealthCheckState | undefined;
            resourceInputs["connectionId"] = state ? state.connectionId : undefined;
            resourceInputs["destinationIp"] = state ? state.destinationIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as VpnConnectionHealthCheckArgs | undefined;
            if ((!args || args.connectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionId'");
            }
            resourceInputs["connectionId"] = args ? args.connectionId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["destinationIp"] = undefined /*out*/;
            resourceInputs["sourceIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnConnectionHealthCheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnConnectionHealthCheck resources.
 */
export interface VpnConnectionHealthCheckState {
    /**
     * Specifies the ID of the VPN connection to monitor.
     *
     * Changing this parameter will create a new resource.
     */
    connectionId?: pulumi.Input<string>;
    /**
     * The destination IP address of the VPN connection.
     */
    destinationIp?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The source IP address of the VPN connection.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * The status of the connection health check.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnConnectionHealthCheck resource.
 */
export interface VpnConnectionHealthCheckArgs {
    /**
     * Specifies the ID of the VPN connection to monitor.
     *
     * Changing this parameter will create a new resource.
     */
    connectionId: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
}

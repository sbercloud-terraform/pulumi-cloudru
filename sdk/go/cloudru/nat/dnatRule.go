// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DnatRule struct {
	pulumi.CustomResourceState

	// The creation time of the DNAT rule.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the DNAT rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort pulumi.IntPtrOutput `pulumi:"externalServicePort"`
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange pulumi.StringPtrOutput `pulumi:"externalServicePortRange"`
	// The floating IP address of the DNAT rule.
	FloatingIpAddress pulumi.StringOutput `pulumi:"floatingIpAddress"`
	// The ID of the floating IP address.
	FloatingIpId pulumi.StringPtrOutput `pulumi:"floatingIpId"`
	// The global EIP address connected by the DNAT rule.
	GlobalEipAddress pulumi.StringOutput `pulumi:"globalEipAddress"`
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId pulumi.StringPtrOutput `pulumi:"globalEipId"`
	// The port used by Floating IP provide services for external systems.
	InternalServicePort pulumi.IntPtrOutput `pulumi:"internalServicePort"`
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange pulumi.StringPtrOutput `pulumi:"internalServicePortRange"`
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// The port ID of network.
	PortId pulumi.StringOutput `pulumi:"portId"`
	// The private IP address of a user.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// The protocol type.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The region where the DNAT rule is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The current status of the DNAT rule.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDnatRule registers a new resource with the given unique name, arguments, and options.
func NewDnatRule(ctx *pulumi.Context,
	name string, args *DnatRuleArgs, opts ...pulumi.ResourceOption) (*DnatRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnatRule
	err := ctx.RegisterResource("cloudru:Nat/dnatRule:DnatRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnatRule gets an existing DnatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnatRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnatRuleState, opts ...pulumi.ResourceOption) (*DnatRule, error) {
	var resource DnatRule
	err := ctx.ReadResource("cloudru:Nat/dnatRule:DnatRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnatRule resources.
type dnatRuleState struct {
	// The creation time of the DNAT rule.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the DNAT rule.
	Description *string `pulumi:"description"`
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort *int `pulumi:"externalServicePort"`
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange *string `pulumi:"externalServicePortRange"`
	// The floating IP address of the DNAT rule.
	FloatingIpAddress *string `pulumi:"floatingIpAddress"`
	// The ID of the floating IP address.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The global EIP address connected by the DNAT rule.
	GlobalEipAddress *string `pulumi:"globalEipAddress"`
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId *string `pulumi:"globalEipId"`
	// The port used by Floating IP provide services for external systems.
	InternalServicePort *int `pulumi:"internalServicePort"`
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange *string `pulumi:"internalServicePortRange"`
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// The port ID of network.
	PortId *string `pulumi:"portId"`
	// The private IP address of a user.
	PrivateIp *string `pulumi:"privateIp"`
	// The protocol type.
	Protocol *string `pulumi:"protocol"`
	// The region where the DNAT rule is located.
	Region *string `pulumi:"region"`
	// The current status of the DNAT rule.
	Status *string `pulumi:"status"`
}

type DnatRuleState struct {
	// The creation time of the DNAT rule.
	CreatedAt pulumi.StringPtrInput
	// The description of the DNAT rule.
	Description pulumi.StringPtrInput
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort pulumi.IntPtrInput
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange pulumi.StringPtrInput
	// The floating IP address of the DNAT rule.
	FloatingIpAddress pulumi.StringPtrInput
	// The ID of the floating IP address.
	FloatingIpId pulumi.StringPtrInput
	// The global EIP address connected by the DNAT rule.
	GlobalEipAddress pulumi.StringPtrInput
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId pulumi.StringPtrInput
	// The port used by Floating IP provide services for external systems.
	InternalServicePort pulumi.IntPtrInput
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange pulumi.StringPtrInput
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId pulumi.StringPtrInput
	// The port ID of network.
	PortId pulumi.StringPtrInput
	// The private IP address of a user.
	PrivateIp pulumi.StringPtrInput
	// The protocol type.
	Protocol pulumi.StringPtrInput
	// The region where the DNAT rule is located.
	Region pulumi.StringPtrInput
	// The current status of the DNAT rule.
	Status pulumi.StringPtrInput
}

func (DnatRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnatRuleState)(nil)).Elem()
}

type dnatRuleArgs struct {
	// The description of the DNAT rule.
	Description *string `pulumi:"description"`
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort *int `pulumi:"externalServicePort"`
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange *string `pulumi:"externalServicePortRange"`
	// The ID of the floating IP address.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId *string `pulumi:"globalEipId"`
	// The port used by Floating IP provide services for external systems.
	InternalServicePort *int `pulumi:"internalServicePort"`
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange *string `pulumi:"internalServicePortRange"`
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The port ID of network.
	PortId *string `pulumi:"portId"`
	// The private IP address of a user.
	PrivateIp *string `pulumi:"privateIp"`
	// The protocol type.
	Protocol string `pulumi:"protocol"`
	// The region where the DNAT rule is located.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a DnatRule resource.
type DnatRuleArgs struct {
	// The description of the DNAT rule.
	Description pulumi.StringPtrInput
	// The port range used by Floating IP provide services for external systems.
	ExternalServicePort pulumi.IntPtrInput
	// The port range used by ECSs or BMSs to provide services for external systems.
	ExternalServicePortRange pulumi.StringPtrInput
	// The ID of the floating IP address.
	FloatingIpId pulumi.StringPtrInput
	// The ID of the global EIP connected by the DNAT rule.
	GlobalEipId pulumi.StringPtrInput
	// The port used by Floating IP provide services for external systems.
	InternalServicePort pulumi.IntPtrInput
	// The port used by ECSs or BMSs to provide services for external systems.
	InternalServicePortRange pulumi.StringPtrInput
	// The ID of the NAT gateway to which the DNAT rule belongs.
	NatGatewayId pulumi.StringInput
	// The port ID of network.
	PortId pulumi.StringPtrInput
	// The private IP address of a user.
	PrivateIp pulumi.StringPtrInput
	// The protocol type.
	Protocol pulumi.StringInput
	// The region where the DNAT rule is located.
	Region pulumi.StringPtrInput
}

func (DnatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnatRuleArgs)(nil)).Elem()
}

type DnatRuleInput interface {
	pulumi.Input

	ToDnatRuleOutput() DnatRuleOutput
	ToDnatRuleOutputWithContext(ctx context.Context) DnatRuleOutput
}

func (*DnatRule) ElementType() reflect.Type {
	return reflect.TypeOf((**DnatRule)(nil)).Elem()
}

func (i *DnatRule) ToDnatRuleOutput() DnatRuleOutput {
	return i.ToDnatRuleOutputWithContext(context.Background())
}

func (i *DnatRule) ToDnatRuleOutputWithContext(ctx context.Context) DnatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatRuleOutput)
}

// DnatRuleArrayInput is an input type that accepts DnatRuleArray and DnatRuleArrayOutput values.
// You can construct a concrete instance of `DnatRuleArrayInput` via:
//
//	DnatRuleArray{ DnatRuleArgs{...} }
type DnatRuleArrayInput interface {
	pulumi.Input

	ToDnatRuleArrayOutput() DnatRuleArrayOutput
	ToDnatRuleArrayOutputWithContext(context.Context) DnatRuleArrayOutput
}

type DnatRuleArray []DnatRuleInput

func (DnatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnatRule)(nil)).Elem()
}

func (i DnatRuleArray) ToDnatRuleArrayOutput() DnatRuleArrayOutput {
	return i.ToDnatRuleArrayOutputWithContext(context.Background())
}

func (i DnatRuleArray) ToDnatRuleArrayOutputWithContext(ctx context.Context) DnatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatRuleArrayOutput)
}

// DnatRuleMapInput is an input type that accepts DnatRuleMap and DnatRuleMapOutput values.
// You can construct a concrete instance of `DnatRuleMapInput` via:
//
//	DnatRuleMap{ "key": DnatRuleArgs{...} }
type DnatRuleMapInput interface {
	pulumi.Input

	ToDnatRuleMapOutput() DnatRuleMapOutput
	ToDnatRuleMapOutputWithContext(context.Context) DnatRuleMapOutput
}

type DnatRuleMap map[string]DnatRuleInput

func (DnatRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnatRule)(nil)).Elem()
}

func (i DnatRuleMap) ToDnatRuleMapOutput() DnatRuleMapOutput {
	return i.ToDnatRuleMapOutputWithContext(context.Background())
}

func (i DnatRuleMap) ToDnatRuleMapOutputWithContext(ctx context.Context) DnatRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatRuleMapOutput)
}

type DnatRuleOutput struct{ *pulumi.OutputState }

func (DnatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnatRule)(nil)).Elem()
}

func (o DnatRuleOutput) ToDnatRuleOutput() DnatRuleOutput {
	return o
}

func (o DnatRuleOutput) ToDnatRuleOutputWithContext(ctx context.Context) DnatRuleOutput {
	return o
}

// The creation time of the DNAT rule.
func (o DnatRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the DNAT rule.
func (o DnatRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The port range used by Floating IP provide services for external systems.
func (o DnatRuleOutput) ExternalServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.IntPtrOutput { return v.ExternalServicePort }).(pulumi.IntPtrOutput)
}

// The port range used by ECSs or BMSs to provide services for external systems.
func (o DnatRuleOutput) ExternalServicePortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringPtrOutput { return v.ExternalServicePortRange }).(pulumi.StringPtrOutput)
}

// The floating IP address of the DNAT rule.
func (o DnatRuleOutput) FloatingIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.FloatingIpAddress }).(pulumi.StringOutput)
}

// The ID of the floating IP address.
func (o DnatRuleOutput) FloatingIpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringPtrOutput { return v.FloatingIpId }).(pulumi.StringPtrOutput)
}

// The global EIP address connected by the DNAT rule.
func (o DnatRuleOutput) GlobalEipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.GlobalEipAddress }).(pulumi.StringOutput)
}

// The ID of the global EIP connected by the DNAT rule.
func (o DnatRuleOutput) GlobalEipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringPtrOutput { return v.GlobalEipId }).(pulumi.StringPtrOutput)
}

// The port used by Floating IP provide services for external systems.
func (o DnatRuleOutput) InternalServicePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.IntPtrOutput { return v.InternalServicePort }).(pulumi.IntPtrOutput)
}

// The port used by ECSs or BMSs to provide services for external systems.
func (o DnatRuleOutput) InternalServicePortRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringPtrOutput { return v.InternalServicePortRange }).(pulumi.StringPtrOutput)
}

// The ID of the NAT gateway to which the DNAT rule belongs.
func (o DnatRuleOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The port ID of network.
func (o DnatRuleOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.PortId }).(pulumi.StringOutput)
}

// The private IP address of a user.
func (o DnatRuleOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// The protocol type.
func (o DnatRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The region where the DNAT rule is located.
func (o DnatRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The current status of the DNAT rule.
func (o DnatRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DnatRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type DnatRuleArrayOutput struct{ *pulumi.OutputState }

func (DnatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnatRule)(nil)).Elem()
}

func (o DnatRuleArrayOutput) ToDnatRuleArrayOutput() DnatRuleArrayOutput {
	return o
}

func (o DnatRuleArrayOutput) ToDnatRuleArrayOutputWithContext(ctx context.Context) DnatRuleArrayOutput {
	return o
}

func (o DnatRuleArrayOutput) Index(i pulumi.IntInput) DnatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnatRule {
		return vs[0].([]*DnatRule)[vs[1].(int)]
	}).(DnatRuleOutput)
}

type DnatRuleMapOutput struct{ *pulumi.OutputState }

func (DnatRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnatRule)(nil)).Elem()
}

func (o DnatRuleMapOutput) ToDnatRuleMapOutput() DnatRuleMapOutput {
	return o
}

func (o DnatRuleMapOutput) ToDnatRuleMapOutputWithContext(ctx context.Context) DnatRuleMapOutput {
	return o
}

func (o DnatRuleMapOutput) MapIndex(k pulumi.StringInput) DnatRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnatRule {
		return vs[0].(map[string]*DnatRule)[vs[1].(string)]
	}).(DnatRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnatRuleInput)(nil)).Elem(), &DnatRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnatRuleArrayInput)(nil)).Elem(), DnatRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnatRuleMapInput)(nil)).Elem(), DnatRuleMap{})
	pulumi.RegisterOutputType(DnatRuleOutput{})
	pulumi.RegisterOutputType(DnatRuleArrayOutput{})
	pulumi.RegisterOutputType(DnatRuleMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddonArgs, AddonState } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { GetAddonTemplateArgs, GetAddonTemplateResult, GetAddonTemplateOutputArgs } from "./getAddonTemplate";
export const getAddonTemplate: typeof import("./getAddonTemplate").getAddonTemplate = null as any;
export const getAddonTemplateOutput: typeof import("./getAddonTemplate").getAddonTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getAddonTemplate","getAddonTemplateOutput"], () => require("./getAddonTemplate"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterCertificatesArgs, GetClusterCertificatesResult, GetClusterCertificatesOutputArgs } from "./getClusterCertificates";
export const getClusterCertificates: typeof import("./getClusterCertificates").getClusterCertificates = null as any;
export const getClusterCertificatesOutput: typeof import("./getClusterCertificates").getClusterCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getClusterCertificates","getClusterCertificatesOutput"], () => require("./getClusterCertificates"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetNodeArgs, GetNodeResult, GetNodeOutputArgs } from "./getNode";
export const getNode: typeof import("./getNode").getNode = null as any;
export const getNodeOutput: typeof import("./getNode").getNodeOutput = null as any;
utilities.lazyLoad(exports, ["getNode","getNodeOutput"], () => require("./getNode"));

export { GetNodePoolArgs, GetNodePoolResult, GetNodePoolOutputArgs } from "./getNodePool";
export const getNodePool: typeof import("./getNodePool").getNodePool = null as any;
export const getNodePoolOutput: typeof import("./getNodePool").getNodePoolOutput = null as any;
utilities.lazyLoad(exports, ["getNodePool","getNodePoolOutput"], () => require("./getNodePool"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { NodeAttachArgs, NodeAttachState } from "./nodeAttach";
export type NodeAttach = import("./nodeAttach").NodeAttach;
export const NodeAttach: typeof import("./nodeAttach").NodeAttach = null as any;
utilities.lazyLoad(exports, ["NodeAttach"], () => require("./nodeAttach"));

export { NodePoolArgs, NodePoolState } from "./nodePool";
export type NodePool = import("./nodePool").NodePool;
export const NodePool: typeof import("./nodePool").NodePool = null as any;
utilities.lazyLoad(exports, ["NodePool"], () => require("./nodePool"));

export { PvcArgs, PvcState } from "./pvc";
export type Pvc = import("./pvc").Pvc;
export const Pvc: typeof import("./pvc").Pvc = null as any;
utilities.lazyLoad(exports, ["Pvc"], () => require("./pvc"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudru:Cce/addon:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "cloudru:Cce/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "cloudru:Cce/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "cloudru:Cce/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "cloudru:Cce/nodeAttach:NodeAttach":
                return new NodeAttach(name, <any>undefined, { urn })
            case "cloudru:Cce/nodePool:NodePool":
                return new NodePool(name, <any>undefined, { urn })
            case "cloudru:Cce/pvc:Pvc":
                return new Pvc(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudru", "Cce/addon", _module)
pulumi.runtime.registerResourceModule("cloudru", "Cce/cluster", _module)
pulumi.runtime.registerResourceModule("cloudru", "Cce/namespace", _module)
pulumi.runtime.registerResourceModule("cloudru", "Cce/node", _module)
pulumi.runtime.registerResourceModule("cloudru", "Cce/nodeAttach", _module)
pulumi.runtime.registerResourceModule("cloudru", "Cce/nodePool", _module)
pulumi.runtime.registerResourceModule("cloudru", "Cce/pvc", _module)

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ces

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a Cloud Eye alarm rule resource within SberCloud.
//
// ## Example Usage
//
// ## Import
//
// CES alarm rules can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import sbercloud:Ces/alarmrule:Alarmrule alarm_rule al1619578509719Ga0X1RGWv
// ```
type Alarmrule struct {
	pulumi.CustomResourceState

	// Specifies whether to enable the action to be triggered by an alarm. The
	// default value is true.
	AlarmActionEnabled pulumi.BoolPtrOutput `pulumi:"alarmActionEnabled"`
	// Specifies the action triggered by an alarm. The structure is described
	// below.
	AlarmActions AlarmruleAlarmActionArrayOutput `pulumi:"alarmActions"`
	// The value can be a string of 0 to 256 characters.
	AlarmDescription pulumi.StringPtrOutput `pulumi:"alarmDescription"`
	// Specifies whether to enable the alarm. The default value is true.
	AlarmEnabled pulumi.BoolPtrOutput `pulumi:"alarmEnabled"`
	AlarmLevel   pulumi.IntPtrOutput  `pulumi:"alarmLevel"`
	// Specifies the name of an alarm rule. The value can be a string of 1 to 128
	// characters that can consist of letters, digits, underscores (_), hyphens (-) and chinese characters.
	AlarmName pulumi.StringOutput `pulumi:"alarmName"`
	// Indicates the alarm status. The value can be:
	// + ok: The alarm status is normal;
	// + alarm: An alarm is generated;
	// + insufficient_data: The required data is insufficient.
	AlarmState pulumi.StringOutput `pulumi:"alarmState"`
	// Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
	// **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
	AlarmType pulumi.StringOutput `pulumi:"alarmType"`
	// Specifies the alarm triggering condition. The structure is described below.
	Condition AlarmruleConditionOutput `pulumi:"condition"`
	// Specifies the enterprise project id of the alarm rule. Changing
	// this creates a new resource.
	//
	// > **Note** If alarmActionEnabled is set to true, either alarmActions or okActions cannot be empty. If alarmActions
	// and okActions coexist, their corresponding notificationList must be of the **same value**.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions AlarmruleInsufficientdataActionArrayOutput `pulumi:"insufficientdataActions"`
	// Specifies the alarm metrics. The structure is described below. Changing this
	// creates a new resource.
	Metric AlarmruleMetricOutput `pulumi:"metric"`
	// Specifies the action triggered by the clearing of an alarm. The structure is
	// described below.
	OkActions AlarmruleOkActionArrayOutput `pulumi:"okActions"`
	// The region in which to create the alarm rule resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates the time when the alarm status changed. The value is a UNIX timestamp and the unit is ms.
	UpdateTime pulumi.IntOutput `pulumi:"updateTime"`
}

// NewAlarmrule registers a new resource with the given unique name, arguments, and options.
func NewAlarmrule(ctx *pulumi.Context,
	name string, args *AlarmruleArgs, opts ...pulumi.ResourceOption) (*Alarmrule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmName == nil {
		return nil, errors.New("invalid value for required argument 'AlarmName'")
	}
	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Alarmrule
	err := ctx.RegisterResource("sbercloud:Ces/alarmrule:Alarmrule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlarmrule gets an existing Alarmrule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarmrule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlarmruleState, opts ...pulumi.ResourceOption) (*Alarmrule, error) {
	var resource Alarmrule
	err := ctx.ReadResource("sbercloud:Ces/alarmrule:Alarmrule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alarmrule resources.
type alarmruleState struct {
	// Specifies whether to enable the action to be triggered by an alarm. The
	// default value is true.
	AlarmActionEnabled *bool `pulumi:"alarmActionEnabled"`
	// Specifies the action triggered by an alarm. The structure is described
	// below.
	AlarmActions []AlarmruleAlarmAction `pulumi:"alarmActions"`
	// The value can be a string of 0 to 256 characters.
	AlarmDescription *string `pulumi:"alarmDescription"`
	// Specifies whether to enable the alarm. The default value is true.
	AlarmEnabled *bool `pulumi:"alarmEnabled"`
	AlarmLevel   *int  `pulumi:"alarmLevel"`
	// Specifies the name of an alarm rule. The value can be a string of 1 to 128
	// characters that can consist of letters, digits, underscores (_), hyphens (-) and chinese characters.
	AlarmName *string `pulumi:"alarmName"`
	// Indicates the alarm status. The value can be:
	// + ok: The alarm status is normal;
	// + alarm: An alarm is generated;
	// + insufficient_data: The required data is insufficient.
	AlarmState *string `pulumi:"alarmState"`
	// Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
	// **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
	AlarmType *string `pulumi:"alarmType"`
	// Specifies the alarm triggering condition. The structure is described below.
	Condition *AlarmruleCondition `pulumi:"condition"`
	// Specifies the enterprise project id of the alarm rule. Changing
	// this creates a new resource.
	//
	// > **Note** If alarmActionEnabled is set to true, either alarmActions or okActions cannot be empty. If alarmActions
	// and okActions coexist, their corresponding notificationList must be of the **same value**.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions []AlarmruleInsufficientdataAction `pulumi:"insufficientdataActions"`
	// Specifies the alarm metrics. The structure is described below. Changing this
	// creates a new resource.
	Metric *AlarmruleMetric `pulumi:"metric"`
	// Specifies the action triggered by the clearing of an alarm. The structure is
	// described below.
	OkActions []AlarmruleOkAction `pulumi:"okActions"`
	// The region in which to create the alarm rule resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Indicates the time when the alarm status changed. The value is a UNIX timestamp and the unit is ms.
	UpdateTime *int `pulumi:"updateTime"`
}

type AlarmruleState struct {
	// Specifies whether to enable the action to be triggered by an alarm. The
	// default value is true.
	AlarmActionEnabled pulumi.BoolPtrInput
	// Specifies the action triggered by an alarm. The structure is described
	// below.
	AlarmActions AlarmruleAlarmActionArrayInput
	// The value can be a string of 0 to 256 characters.
	AlarmDescription pulumi.StringPtrInput
	// Specifies whether to enable the alarm. The default value is true.
	AlarmEnabled pulumi.BoolPtrInput
	AlarmLevel   pulumi.IntPtrInput
	// Specifies the name of an alarm rule. The value can be a string of 1 to 128
	// characters that can consist of letters, digits, underscores (_), hyphens (-) and chinese characters.
	AlarmName pulumi.StringPtrInput
	// Indicates the alarm status. The value can be:
	// + ok: The alarm status is normal;
	// + alarm: An alarm is generated;
	// + insufficient_data: The required data is insufficient.
	AlarmState pulumi.StringPtrInput
	// Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
	// **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
	AlarmType pulumi.StringPtrInput
	// Specifies the alarm triggering condition. The structure is described below.
	Condition AlarmruleConditionPtrInput
	// Specifies the enterprise project id of the alarm rule. Changing
	// this creates a new resource.
	//
	// > **Note** If alarmActionEnabled is set to true, either alarmActions or okActions cannot be empty. If alarmActions
	// and okActions coexist, their corresponding notificationList must be of the **same value**.
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions AlarmruleInsufficientdataActionArrayInput
	// Specifies the alarm metrics. The structure is described below. Changing this
	// creates a new resource.
	Metric AlarmruleMetricPtrInput
	// Specifies the action triggered by the clearing of an alarm. The structure is
	// described below.
	OkActions AlarmruleOkActionArrayInput
	// The region in which to create the alarm rule resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Indicates the time when the alarm status changed. The value is a UNIX timestamp and the unit is ms.
	UpdateTime pulumi.IntPtrInput
}

func (AlarmruleState) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmruleState)(nil)).Elem()
}

type alarmruleArgs struct {
	// Specifies whether to enable the action to be triggered by an alarm. The
	// default value is true.
	AlarmActionEnabled *bool `pulumi:"alarmActionEnabled"`
	// Specifies the action triggered by an alarm. The structure is described
	// below.
	AlarmActions []AlarmruleAlarmAction `pulumi:"alarmActions"`
	// The value can be a string of 0 to 256 characters.
	AlarmDescription *string `pulumi:"alarmDescription"`
	// Specifies whether to enable the alarm. The default value is true.
	AlarmEnabled *bool `pulumi:"alarmEnabled"`
	AlarmLevel   *int  `pulumi:"alarmLevel"`
	// Specifies the name of an alarm rule. The value can be a string of 1 to 128
	// characters that can consist of letters, digits, underscores (_), hyphens (-) and chinese characters.
	AlarmName string `pulumi:"alarmName"`
	// Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
	// **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
	AlarmType *string `pulumi:"alarmType"`
	// Specifies the alarm triggering condition. The structure is described below.
	Condition AlarmruleCondition `pulumi:"condition"`
	// Specifies the enterprise project id of the alarm rule. Changing
	// this creates a new resource.
	//
	// > **Note** If alarmActionEnabled is set to true, either alarmActions or okActions cannot be empty. If alarmActions
	// and okActions coexist, their corresponding notificationList must be of the **same value**.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions []AlarmruleInsufficientdataAction `pulumi:"insufficientdataActions"`
	// Specifies the alarm metrics. The structure is described below. Changing this
	// creates a new resource.
	Metric AlarmruleMetric `pulumi:"metric"`
	// Specifies the action triggered by the clearing of an alarm. The structure is
	// described below.
	OkActions []AlarmruleOkAction `pulumi:"okActions"`
	// The region in which to create the alarm rule resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a Alarmrule resource.
type AlarmruleArgs struct {
	// Specifies whether to enable the action to be triggered by an alarm. The
	// default value is true.
	AlarmActionEnabled pulumi.BoolPtrInput
	// Specifies the action triggered by an alarm. The structure is described
	// below.
	AlarmActions AlarmruleAlarmActionArrayInput
	// The value can be a string of 0 to 256 characters.
	AlarmDescription pulumi.StringPtrInput
	// Specifies whether to enable the alarm. The default value is true.
	AlarmEnabled pulumi.BoolPtrInput
	AlarmLevel   pulumi.IntPtrInput
	// Specifies the name of an alarm rule. The value can be a string of 1 to 128
	// characters that can consist of letters, digits, underscores (_), hyphens (-) and chinese characters.
	AlarmName pulumi.StringInput
	// Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
	// **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
	AlarmType pulumi.StringPtrInput
	// Specifies the alarm triggering condition. The structure is described below.
	Condition AlarmruleConditionInput
	// Specifies the enterprise project id of the alarm rule. Changing
	// this creates a new resource.
	//
	// > **Note** If alarmActionEnabled is set to true, either alarmActions or okActions cannot be empty. If alarmActions
	// and okActions coexist, their corresponding notificationList must be of the **same value**.
	EnterpriseProjectId pulumi.StringPtrInput
	// Deprecated: insufficientdata_actions is deprecated
	InsufficientdataActions AlarmruleInsufficientdataActionArrayInput
	// Specifies the alarm metrics. The structure is described below. Changing this
	// creates a new resource.
	Metric AlarmruleMetricInput
	// Specifies the action triggered by the clearing of an alarm. The structure is
	// described below.
	OkActions AlarmruleOkActionArrayInput
	// The region in which to create the alarm rule resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (AlarmruleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmruleArgs)(nil)).Elem()
}

type AlarmruleInput interface {
	pulumi.Input

	ToAlarmruleOutput() AlarmruleOutput
	ToAlarmruleOutputWithContext(ctx context.Context) AlarmruleOutput
}

func (*Alarmrule) ElementType() reflect.Type {
	return reflect.TypeOf((**Alarmrule)(nil)).Elem()
}

func (i *Alarmrule) ToAlarmruleOutput() AlarmruleOutput {
	return i.ToAlarmruleOutputWithContext(context.Background())
}

func (i *Alarmrule) ToAlarmruleOutputWithContext(ctx context.Context) AlarmruleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleOutput)
}

// AlarmruleArrayInput is an input type that accepts AlarmruleArray and AlarmruleArrayOutput values.
// You can construct a concrete instance of `AlarmruleArrayInput` via:
//
//	AlarmruleArray{ AlarmruleArgs{...} }
type AlarmruleArrayInput interface {
	pulumi.Input

	ToAlarmruleArrayOutput() AlarmruleArrayOutput
	ToAlarmruleArrayOutputWithContext(context.Context) AlarmruleArrayOutput
}

type AlarmruleArray []AlarmruleInput

func (AlarmruleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alarmrule)(nil)).Elem()
}

func (i AlarmruleArray) ToAlarmruleArrayOutput() AlarmruleArrayOutput {
	return i.ToAlarmruleArrayOutputWithContext(context.Background())
}

func (i AlarmruleArray) ToAlarmruleArrayOutputWithContext(ctx context.Context) AlarmruleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleArrayOutput)
}

// AlarmruleMapInput is an input type that accepts AlarmruleMap and AlarmruleMapOutput values.
// You can construct a concrete instance of `AlarmruleMapInput` via:
//
//	AlarmruleMap{ "key": AlarmruleArgs{...} }
type AlarmruleMapInput interface {
	pulumi.Input

	ToAlarmruleMapOutput() AlarmruleMapOutput
	ToAlarmruleMapOutputWithContext(context.Context) AlarmruleMapOutput
}

type AlarmruleMap map[string]AlarmruleInput

func (AlarmruleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alarmrule)(nil)).Elem()
}

func (i AlarmruleMap) ToAlarmruleMapOutput() AlarmruleMapOutput {
	return i.ToAlarmruleMapOutputWithContext(context.Background())
}

func (i AlarmruleMap) ToAlarmruleMapOutputWithContext(ctx context.Context) AlarmruleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmruleMapOutput)
}

type AlarmruleOutput struct{ *pulumi.OutputState }

func (AlarmruleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alarmrule)(nil)).Elem()
}

func (o AlarmruleOutput) ToAlarmruleOutput() AlarmruleOutput {
	return o
}

func (o AlarmruleOutput) ToAlarmruleOutputWithContext(ctx context.Context) AlarmruleOutput {
	return o
}

// Specifies whether to enable the action to be triggered by an alarm. The
// default value is true.
func (o AlarmruleOutput) AlarmActionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.BoolPtrOutput { return v.AlarmActionEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the action triggered by an alarm. The structure is described
// below.
func (o AlarmruleOutput) AlarmActions() AlarmruleAlarmActionArrayOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleAlarmActionArrayOutput { return v.AlarmActions }).(AlarmruleAlarmActionArrayOutput)
}

// The value can be a string of 0 to 256 characters.
func (o AlarmruleOutput) AlarmDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringPtrOutput { return v.AlarmDescription }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the alarm. The default value is true.
func (o AlarmruleOutput) AlarmEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.BoolPtrOutput { return v.AlarmEnabled }).(pulumi.BoolPtrOutput)
}

func (o AlarmruleOutput) AlarmLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.IntPtrOutput { return v.AlarmLevel }).(pulumi.IntPtrOutput)
}

// Specifies the name of an alarm rule. The value can be a string of 1 to 128
// characters that can consist of letters, digits, underscores (_), hyphens (-) and chinese characters.
func (o AlarmruleOutput) AlarmName() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.AlarmName }).(pulumi.StringOutput)
}

// Indicates the alarm status. The value can be:
// + ok: The alarm status is normal;
// + alarm: An alarm is generated;
// + insufficient_data: The required data is insufficient.
func (o AlarmruleOutput) AlarmState() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.AlarmState }).(pulumi.StringOutput)
}

// Specifies the alarm type. The value can be **EVENT.SYS**, **EVENT.CUSTOM**,
// **MULTI_INSTANCE** and **ALL_INSTANCE**. Defaults to **MULTI_INSTANCE**.
func (o AlarmruleOutput) AlarmType() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.AlarmType }).(pulumi.StringOutput)
}

// Specifies the alarm triggering condition. The structure is described below.
func (o AlarmruleOutput) Condition() AlarmruleConditionOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleConditionOutput { return v.Condition }).(AlarmruleConditionOutput)
}

// Specifies the enterprise project id of the alarm rule. Changing
// this creates a new resource.
//
// > **Note** If alarmActionEnabled is set to true, either alarmActions or okActions cannot be empty. If alarmActions
// and okActions coexist, their corresponding notificationList must be of the **same value**.
func (o AlarmruleOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Deprecated: insufficientdata_actions is deprecated
func (o AlarmruleOutput) InsufficientdataActions() AlarmruleInsufficientdataActionArrayOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleInsufficientdataActionArrayOutput { return v.InsufficientdataActions }).(AlarmruleInsufficientdataActionArrayOutput)
}

// Specifies the alarm metrics. The structure is described below. Changing this
// creates a new resource.
func (o AlarmruleOutput) Metric() AlarmruleMetricOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleMetricOutput { return v.Metric }).(AlarmruleMetricOutput)
}

// Specifies the action triggered by the clearing of an alarm. The structure is
// described below.
func (o AlarmruleOutput) OkActions() AlarmruleOkActionArrayOutput {
	return o.ApplyT(func(v *Alarmrule) AlarmruleOkActionArrayOutput { return v.OkActions }).(AlarmruleOkActionArrayOutput)
}

// The region in which to create the alarm rule resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o AlarmruleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the time when the alarm status changed. The value is a UNIX timestamp and the unit is ms.
func (o AlarmruleOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Alarmrule) pulumi.IntOutput { return v.UpdateTime }).(pulumi.IntOutput)
}

type AlarmruleArrayOutput struct{ *pulumi.OutputState }

func (AlarmruleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alarmrule)(nil)).Elem()
}

func (o AlarmruleArrayOutput) ToAlarmruleArrayOutput() AlarmruleArrayOutput {
	return o
}

func (o AlarmruleArrayOutput) ToAlarmruleArrayOutputWithContext(ctx context.Context) AlarmruleArrayOutput {
	return o
}

func (o AlarmruleArrayOutput) Index(i pulumi.IntInput) AlarmruleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alarmrule {
		return vs[0].([]*Alarmrule)[vs[1].(int)]
	}).(AlarmruleOutput)
}

type AlarmruleMapOutput struct{ *pulumi.OutputState }

func (AlarmruleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alarmrule)(nil)).Elem()
}

func (o AlarmruleMapOutput) ToAlarmruleMapOutput() AlarmruleMapOutput {
	return o
}

func (o AlarmruleMapOutput) ToAlarmruleMapOutputWithContext(ctx context.Context) AlarmruleMapOutput {
	return o
}

func (o AlarmruleMapOutput) MapIndex(k pulumi.StringInput) AlarmruleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alarmrule {
		return vs[0].(map[string]*Alarmrule)[vs[1].(string)]
	}).(AlarmruleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleInput)(nil)).Elem(), &Alarmrule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleArrayInput)(nil)).Elem(), AlarmruleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmruleMapInput)(nil)).Elem(), AlarmruleMap{})
	pulumi.RegisterOutputType(AlarmruleOutput{})
	pulumi.RegisterOutputType(AlarmruleArrayOutput{})
	pulumi.RegisterOutputType(AlarmruleMapOutput{})
}

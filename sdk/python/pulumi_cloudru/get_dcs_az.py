# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDcsAzResult',
    'AwaitableGetDcsAzResult',
    'get_dcs_az',
    'get_dcs_az_output',
]

@pulumi.output_type
class GetDcsAzResult:
    """
    A collection of values returned by getDcsAz.
    """
    def __init__(__self__, code=None, id=None, name=None, port=None, region=None):
        if code and not isinstance(code, str):
            raise TypeError("Expected argument 'code' to be a str")
        pulumi.set(__self__, "code", code)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port and not isinstance(port, str):
            raise TypeError("Expected argument 'port' to be a str")
        pulumi.set(__self__, "port", port)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Indicates the name of an AZ.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.str:
        """
        Indicates the port number of an AZ.
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDcsAzResult(GetDcsAzResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDcsAzResult(
            code=self.code,
            id=self.id,
            name=self.name,
            port=self.port,
            region=self.region)


def get_dcs_az(code: Optional[_builtins.str] = None,
               name: Optional[_builtins.str] = None,
               port: Optional[_builtins.str] = None,
               region: Optional[_builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDcsAzResult:
    """
    Use this data source to get the ID of an available SberCloud dcs az.

    !> **WARNING:** It has been deprecated. This data source is used for the `available_zones` of the
    `Dcs.Instance` resource. Now `available_zones` has been deprecated and this data source is no longer used.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    az1 = sbercloud.get_dcs_az(port="443",
        code="ru-moscow-1a")
    ```


    :param _builtins.str code: Specifies the code of an AZ, e.g. "ru-moscow-1a".
    :param _builtins.str name: Indicates the name of an AZ.
    :param _builtins.str port: Indicates the port number of an AZ.
    :param _builtins.str region: The region in which to obtain the dcs az. If omitted, the provider-level region will be
           used.
    """
    __args__ = dict()
    __args__['code'] = code
    __args__['name'] = name
    __args__['port'] = port
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDcsAz:getDcsAz', __args__, opts=opts, typ=GetDcsAzResult).value

    return AwaitableGetDcsAzResult(
        code=pulumi.get(__ret__, 'code'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        port=pulumi.get(__ret__, 'port'),
        region=pulumi.get(__ret__, 'region'))
def get_dcs_az_output(code: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      port: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDcsAzResult]:
    """
    Use this data source to get the ID of an available SberCloud dcs az.

    !> **WARNING:** It has been deprecated. This data source is used for the `available_zones` of the
    `Dcs.Instance` resource. Now `available_zones` has been deprecated and this data source is no longer used.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    az1 = sbercloud.get_dcs_az(port="443",
        code="ru-moscow-1a")
    ```


    :param _builtins.str code: Specifies the code of an AZ, e.g. "ru-moscow-1a".
    :param _builtins.str name: Indicates the name of an AZ.
    :param _builtins.str port: Indicates the port number of an AZ.
    :param _builtins.str region: The region in which to obtain the dcs az. If omitted, the provider-level region will be
           used.
    """
    __args__ = dict()
    __args__['code'] = code
    __args__['name'] = name
    __args__['port'] = port
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDcsAz:getDcsAz', __args__, opts=opts, typ=GetDcsAzResult)
    return __ret__.apply(lambda __response__: GetDcsAzResult(
        code=pulumi.get(__response__, 'code'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        port=pulumi.get(__response__, 'port'),
        region=pulumi.get(__response__, 'region')))

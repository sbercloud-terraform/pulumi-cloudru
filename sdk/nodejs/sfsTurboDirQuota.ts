// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SfsTurboDirQuota extends pulumi.CustomResource {
    /**
     * Get an existing SfsTurboDirQuota resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SfsTurboDirQuotaState, opts?: pulumi.CustomResourceOptions): SfsTurboDirQuota {
        return new SfsTurboDirQuota(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/sfsTurboDirQuota:SfsTurboDirQuota';

    /**
     * Returns true if the given object is an instance of SfsTurboDirQuota.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SfsTurboDirQuota {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SfsTurboDirQuota.__pulumiType;
    }

    /**
     * Specifies the size of the directory.
     */
    declare public readonly capacity: pulumi.Output<number | undefined>;
    /**
     * Specifies the maximum number of inodes allowed in the directory.
     */
    declare public readonly inode: pulumi.Output<number | undefined>;
    /**
     * Specifies the valid full path of an existing directory.
     */
    declare public readonly path: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the SFS Turbo ID.
     */
    declare public readonly shareId: pulumi.Output<string>;
    /**
     * Specifies the size of the used directory.
     */
    declare public /*out*/ readonly usedCapacity: pulumi.Output<number>;
    /**
     * Specifies the number of used inodes in the directory.
     */
    declare public /*out*/ readonly usedInode: pulumi.Output<number>;

    /**
     * Create a SfsTurboDirQuota resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SfsTurboDirQuotaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SfsTurboDirQuotaArgs | SfsTurboDirQuotaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SfsTurboDirQuotaState | undefined;
            resourceInputs["capacity"] = state?.capacity;
            resourceInputs["inode"] = state?.inode;
            resourceInputs["path"] = state?.path;
            resourceInputs["region"] = state?.region;
            resourceInputs["shareId"] = state?.shareId;
            resourceInputs["usedCapacity"] = state?.usedCapacity;
            resourceInputs["usedInode"] = state?.usedInode;
        } else {
            const args = argsOrState as SfsTurboDirQuotaArgs | undefined;
            if (args?.path === undefined && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if (args?.shareId === undefined && !opts.urn) {
                throw new Error("Missing required property 'shareId'");
            }
            resourceInputs["capacity"] = args?.capacity;
            resourceInputs["inode"] = args?.inode;
            resourceInputs["path"] = args?.path;
            resourceInputs["region"] = args?.region;
            resourceInputs["shareId"] = args?.shareId;
            resourceInputs["usedCapacity"] = undefined /*out*/;
            resourceInputs["usedInode"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SfsTurboDirQuota.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SfsTurboDirQuota resources.
 */
export interface SfsTurboDirQuotaState {
    /**
     * Specifies the size of the directory.
     */
    capacity?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of inodes allowed in the directory.
     */
    inode?: pulumi.Input<number>;
    /**
     * Specifies the valid full path of an existing directory.
     */
    path?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the SFS Turbo ID.
     */
    shareId?: pulumi.Input<string>;
    /**
     * Specifies the size of the used directory.
     */
    usedCapacity?: pulumi.Input<number>;
    /**
     * Specifies the number of used inodes in the directory.
     */
    usedInode?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SfsTurboDirQuota resource.
 */
export interface SfsTurboDirQuotaArgs {
    /**
     * Specifies the size of the directory.
     */
    capacity?: pulumi.Input<number>;
    /**
     * Specifies the maximum number of inodes allowed in the directory.
     */
    inode?: pulumi.Input<number>;
    /**
     * Specifies the valid full path of an existing directory.
     */
    path: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the SFS Turbo ID.
     */
    shareId: pulumi.Input<string>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a VPC custom route table resource within SberCloud.
//
// > **NOTE:** To use a custom route table, you need to submit a service ticket to increase quota.
//
// ## Example Usage
//
// ### Basic Custom Route Table
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			vpcPeeringId := cfg.RequireObject("vpcPeeringId")
//			_, err := vpc.NewRouteTable(ctx, "demo", &vpc.RouteTableArgs{
//				Name:        pulumi.String("demo"),
//				VpcId:       pulumi.Any(vpcId),
//				Description: pulumi.String("a custom route table demo"),
//				Routes: vpc.RouteTableRouteArray{
//					&vpc.RouteTableRouteArgs{
//						Destination: pulumi.String("172.16.0.0/16"),
//						Type:        pulumi.String("peering"),
//						Nexthop:     pulumi.Any(vpcPeeringId),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Associating Subnets with a Route Table
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			vpcPeeringId := cfg.RequireObject("vpcPeeringId")
//			subnetIds, err := vpc.GetSubnetIds(ctx, &vpc.GetSubnetIdsArgs{
//				VpcId: vpcId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewRouteTable(ctx, "demo", &vpc.RouteTableArgs{
//				Name:    pulumi.String("demo"),
//				VpcId:   pulumi.Any(vpcId),
//				Subnets: interface{}(subnetIds.Ids),
//				Routes: vpc.RouteTableRouteArray{
//					&vpc.RouteTableRouteArgs{
//						Destination: pulumi.String("172.16.0.0/16"),
//						Type:        pulumi.String("peering"),
//						Nexthop:     pulumi.Any(vpcPeeringId),
//					},
//					&vpc.RouteTableRouteArgs{
//						Destination: pulumi.String("192.168.100.0/24"),
//						Type:        pulumi.String("vip"),
//						Nexthop:     pulumi.String("192.168.10.200"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// vpc route tables can be imported using the `id`, e.g.
//
// ```sh
// $ pulumi import sbercloud:Vpc/routeTable:RouteTable demo e1b3208a-544b-42a7-84e6-5d70371dd982
// ```
type RouteTable struct {
	pulumi.CustomResourceState

	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the route table name. The value is a string of no more than
	// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the vpc route table.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the route object list. The route object
	// is documented below.
	//
	// <a name="routeObject"></a>
	// The `route` block supports:
	Routes RouteTableRouteArrayOutput `pulumi:"routes"`
	// Specifies an array of one or more subnets associating with the route table.
	//
	// > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
	// The default route table determines the inbound traffic.
	Subnets pulumi.StringArrayOutput `pulumi:"subnets"`
	// Specifies the VPC ID for which a route table is to be added.
	// Changing this creates a new resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRouteTable registers a new resource with the given unique name, arguments, and options.
func NewRouteTable(ctx *pulumi.Context,
	name string, args *RouteTableArgs, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTable
	err := ctx.RegisterResource("sbercloud:Vpc/routeTable:RouteTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTable gets an existing RouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableState, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	var resource RouteTable
	err := ctx.ReadResource("sbercloud:Vpc/routeTable:RouteTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTable resources.
type routeTableState struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// Specifies the route table name. The value is a string of no more than
	// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `pulumi:"name"`
	// The region in which to create the vpc route table.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the route object list. The route object
	// is documented below.
	//
	// <a name="routeObject"></a>
	// The `route` block supports:
	Routes []RouteTableRoute `pulumi:"routes"`
	// Specifies an array of one or more subnets associating with the route table.
	//
	// > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
	// The default route table determines the inbound traffic.
	Subnets []string `pulumi:"subnets"`
	// Specifies the VPC ID for which a route table is to be added.
	// Changing this creates a new resource.
	VpcId *string `pulumi:"vpcId"`
}

type RouteTableState struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput
	// Specifies the route table name. The value is a string of no more than
	// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name pulumi.StringPtrInput
	// The region in which to create the vpc route table.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the route object list. The route object
	// is documented below.
	//
	// <a name="routeObject"></a>
	// The `route` block supports:
	Routes RouteTableRouteArrayInput
	// Specifies an array of one or more subnets associating with the route table.
	//
	// > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
	// The default route table determines the inbound traffic.
	Subnets pulumi.StringArrayInput
	// Specifies the VPC ID for which a route table is to be added.
	// Changing this creates a new resource.
	VpcId pulumi.StringPtrInput
}

func (RouteTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableState)(nil)).Elem()
}

type routeTableArgs struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// Specifies the route table name. The value is a string of no more than
	// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name *string `pulumi:"name"`
	// The region in which to create the vpc route table.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the route object list. The route object
	// is documented below.
	//
	// <a name="routeObject"></a>
	// The `route` block supports:
	Routes []RouteTableRoute `pulumi:"routes"`
	// Specifies an array of one or more subnets associating with the route table.
	//
	// > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
	// The default route table determines the inbound traffic.
	Subnets []string `pulumi:"subnets"`
	// Specifies the VPC ID for which a route table is to be added.
	// Changing this creates a new resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a RouteTable resource.
type RouteTableArgs struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput
	// Specifies the route table name. The value is a string of no more than
	// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
	Name pulumi.StringPtrInput
	// The region in which to create the vpc route table.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the route object list. The route object
	// is documented below.
	//
	// <a name="routeObject"></a>
	// The `route` block supports:
	Routes RouteTableRouteArrayInput
	// Specifies an array of one or more subnets associating with the route table.
	//
	// > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
	// The default route table determines the inbound traffic.
	Subnets pulumi.StringArrayInput
	// Specifies the VPC ID for which a route table is to be added.
	// Changing this creates a new resource.
	VpcId pulumi.StringInput
}

func (RouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableArgs)(nil)).Elem()
}

type RouteTableInput interface {
	pulumi.Input

	ToRouteTableOutput() RouteTableOutput
	ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput
}

func (*RouteTable) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (i *RouteTable) ToRouteTableOutput() RouteTableOutput {
	return i.ToRouteTableOutputWithContext(context.Background())
}

func (i *RouteTable) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableOutput)
}

// RouteTableArrayInput is an input type that accepts RouteTableArray and RouteTableArrayOutput values.
// You can construct a concrete instance of `RouteTableArrayInput` via:
//
//	RouteTableArray{ RouteTableArgs{...} }
type RouteTableArrayInput interface {
	pulumi.Input

	ToRouteTableArrayOutput() RouteTableArrayOutput
	ToRouteTableArrayOutputWithContext(context.Context) RouteTableArrayOutput
}

type RouteTableArray []RouteTableInput

func (RouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (i RouteTableArray) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return i.ToRouteTableArrayOutputWithContext(context.Background())
}

func (i RouteTableArray) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableArrayOutput)
}

// RouteTableMapInput is an input type that accepts RouteTableMap and RouteTableMapOutput values.
// You can construct a concrete instance of `RouteTableMapInput` via:
//
//	RouteTableMap{ "key": RouteTableArgs{...} }
type RouteTableMapInput interface {
	pulumi.Input

	ToRouteTableMapOutput() RouteTableMapOutput
	ToRouteTableMapOutputWithContext(context.Context) RouteTableMapOutput
}

type RouteTableMap map[string]RouteTableInput

func (RouteTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (i RouteTableMap) ToRouteTableMapOutput() RouteTableMapOutput {
	return i.ToRouteTableMapOutputWithContext(context.Background())
}

func (i RouteTableMap) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableMapOutput)
}

type RouteTableOutput struct{ *pulumi.OutputState }

func (RouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (o RouteTableOutput) ToRouteTableOutput() RouteTableOutput {
	return o
}

func (o RouteTableOutput) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return o
}

// Specifies the supplementary information about the route.
// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
func (o RouteTableOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the route table name. The value is a string of no more than
// 64 characters that can contain letters, digits, underscores (_), hyphens (-), and periods (.).
func (o RouteTableOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the vpc route table.
// If omitted, the provider-level region will be used. Changing this creates a new resource.
func (o RouteTableOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the route object list. The route object
// is documented below.
//
// <a name="routeObject"></a>
// The `route` block supports:
func (o RouteTableOutput) Routes() RouteTableRouteArrayOutput {
	return o.ApplyT(func(v *RouteTable) RouteTableRouteArrayOutput { return v.Routes }).(RouteTableRouteArrayOutput)
}

// Specifies an array of one or more subnets associating with the route table.
//
// > **NOTE:** The custom route table associated with a subnet affects only the outbound traffic.
// The default route table determines the inbound traffic.
func (o RouteTableOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

// Specifies the VPC ID for which a route table is to be added.
// Changing this creates a new resource.
func (o RouteTableOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type RouteTableArrayOutput struct{ *pulumi.OutputState }

func (RouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) Index(i pulumi.IntInput) RouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].([]*RouteTable)[vs[1].(int)]
	}).(RouteTableOutput)
}

type RouteTableMapOutput struct{ *pulumi.OutputState }

func (RouteTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (o RouteTableMapOutput) ToRouteTableMapOutput() RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) MapIndex(k pulumi.StringInput) RouteTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].(map[string]*RouteTable)[vs[1].(string)]
	}).(RouteTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableInput)(nil)).Elem(), &RouteTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableArrayInput)(nil)).Elem(), RouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableMapInput)(nil)).Elem(), RouteTableMap{})
	pulumi.RegisterOutputType(RouteTableOutput{})
	pulumi.RegisterOutputType(RouteTableArrayOutput{})
	pulumi.RegisterOutputType(RouteTableMapOutput{})
}

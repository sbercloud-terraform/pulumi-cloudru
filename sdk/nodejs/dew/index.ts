// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetDataKeyArgs, GetDataKeyResult, GetDataKeyOutputArgs } from "./getDataKey";
export const getDataKey: typeof import("./getDataKey").getDataKey = null as any;
export const getDataKeyOutput: typeof import("./getDataKey").getDataKeyOutput = null as any;
utilities.lazyLoad(exports, ["getDataKey","getDataKeyOutput"], () => require("./getDataKey"));

export { GetKeyArgs, GetKeyResult, GetKeyOutputArgs } from "./getKey";
export const getKey: typeof import("./getKey").getKey = null as any;
export const getKeyOutput: typeof import("./getKey").getKeyOutput = null as any;
utilities.lazyLoad(exports, ["getKey","getKeyOutput"], () => require("./getKey"));

export { GetKeypairsArgs, GetKeypairsResult, GetKeypairsOutputArgs } from "./getKeypairs";
export const getKeypairs: typeof import("./getKeypairs").getKeypairs = null as any;
export const getKeypairsOutput: typeof import("./getKeypairs").getKeypairsOutput = null as any;
utilities.lazyLoad(exports, ["getKeypairs","getKeypairsOutput"], () => require("./getKeypairs"));

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));

export { KeypairArgs, KeypairState } from "./keypair";
export type Keypair = import("./keypair").Keypair;
export const Keypair: typeof import("./keypair").Keypair = null as any;
utilities.lazyLoad(exports, ["Keypair"], () => require("./keypair"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudru:Dew/key:Key":
                return new Key(name, <any>undefined, { urn })
            case "cloudru:Dew/keypair:Keypair":
                return new Keypair(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudru", "Dew/key", _module)
pulumi.runtime.registerResourceModule("cloudru", "Dew/keypair", _module)

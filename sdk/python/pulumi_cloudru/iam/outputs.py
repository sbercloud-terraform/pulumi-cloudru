# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AclIpCidr',
    'AclIpRange',
    'AgencyProjectRole',
    'ProviderAccessConfig',
    'ProviderConversionConversionRule',
    'ProviderConversionConversionRuleLocal',
    'ProviderConversionConversionRuleRemote',
    'ProviderConversionRule',
    'ProviderConversionRuleLocal',
    'ProviderConversionRuleRemote',
    'GetGroupUserResult',
    'GetProjectsProjectResult',
    'GetUsersUserResult',
]

@pulumi.output_type
class AclIpCidr(dict):
    def __init__(__self__, *,
                 cidr: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "cidr", cidr)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def cidr(self) -> _builtins.str:
        return pulumi.get(self, "cidr")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class AclIpRange(dict):
    def __init__(__self__, *,
                 range: _builtins.str,
                 description: Optional[_builtins.str] = None):
        pulumi.set(__self__, "range", range)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def range(self) -> _builtins.str:
        return pulumi.get(self, "range")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class AgencyProjectRole(dict):
    def __init__(__self__, *,
                 project: _builtins.str,
                 roles: Sequence[_builtins.str]):
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter
    def project(self) -> _builtins.str:
        return pulumi.get(self, "project")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class ProviderAccessConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessType":
            suggest = "access_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "providerUrl":
            suggest = "provider_url"
        elif key == "signingKey":
            suggest = "signing_key"
        elif key == "authorizationEndpoint":
            suggest = "authorization_endpoint"
        elif key == "responseMode":
            suggest = "response_mode"
        elif key == "responseType":
            suggest = "response_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProviderAccessConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProviderAccessConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProviderAccessConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_type: _builtins.str,
                 client_id: _builtins.str,
                 provider_url: _builtins.str,
                 signing_key: _builtins.str,
                 authorization_endpoint: Optional[_builtins.str] = None,
                 response_mode: Optional[_builtins.str] = None,
                 response_type: Optional[_builtins.str] = None,
                 scopes: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "access_type", access_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "provider_url", provider_url)
        pulumi.set(__self__, "signing_key", signing_key)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if response_mode is not None:
            pulumi.set(__self__, "response_mode", response_mode)
        if response_type is not None:
            pulumi.set(__self__, "response_type", response_type)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @_builtins.property
    @pulumi.getter(name="accessType")
    def access_type(self) -> _builtins.str:
        return pulumi.get(self, "access_type")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> _builtins.str:
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="providerUrl")
    def provider_url(self) -> _builtins.str:
        return pulumi.get(self, "provider_url")

    @_builtins.property
    @pulumi.getter(name="signingKey")
    def signing_key(self) -> _builtins.str:
        return pulumi.get(self, "signing_key")

    @_builtins.property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "authorization_endpoint")

    @_builtins.property
    @pulumi.getter(name="responseMode")
    def response_mode(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "response_mode")

    @_builtins.property
    @pulumi.getter(name="responseType")
    def response_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "response_type")

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "scopes")


@pulumi.output_type
class ProviderConversionConversionRule(dict):
    def __init__(__self__, *,
                 locals: Sequence['outputs.ProviderConversionConversionRuleLocal'],
                 remotes: Sequence['outputs.ProviderConversionConversionRuleRemote']):
        pulumi.set(__self__, "locals", locals)
        pulumi.set(__self__, "remotes", remotes)

    @_builtins.property
    @pulumi.getter
    def locals(self) -> Sequence['outputs.ProviderConversionConversionRuleLocal']:
        return pulumi.get(self, "locals")

    @_builtins.property
    @pulumi.getter
    def remotes(self) -> Sequence['outputs.ProviderConversionConversionRuleRemote']:
        return pulumi.get(self, "remotes")


@pulumi.output_type
class ProviderConversionConversionRuleLocal(dict):
    def __init__(__self__, *,
                 group: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        if group is not None:
            pulumi.set(__self__, "group", group)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class ProviderConversionConversionRuleRemote(dict):
    def __init__(__self__, *,
                 attribute: _builtins.str,
                 condition: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        pulumi.set(__self__, "attribute", attribute)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def attribute(self) -> _builtins.str:
        return pulumi.get(self, "attribute")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ProviderConversionRule(dict):
    def __init__(__self__, *,
                 locals: Optional[Sequence['outputs.ProviderConversionRuleLocal']] = None,
                 remotes: Optional[Sequence['outputs.ProviderConversionRuleRemote']] = None):
        if locals is not None:
            pulumi.set(__self__, "locals", locals)
        if remotes is not None:
            pulumi.set(__self__, "remotes", remotes)

    @_builtins.property
    @pulumi.getter
    def locals(self) -> Optional[Sequence['outputs.ProviderConversionRuleLocal']]:
        return pulumi.get(self, "locals")

    @_builtins.property
    @pulumi.getter
    def remotes(self) -> Optional[Sequence['outputs.ProviderConversionRuleRemote']]:
        return pulumi.get(self, "remotes")


@pulumi.output_type
class ProviderConversionRuleLocal(dict):
    def __init__(__self__, *,
                 group: Optional[_builtins.str] = None,
                 username: Optional[_builtins.str] = None):
        if group is not None:
            pulumi.set(__self__, "group", group)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @_builtins.property
    @pulumi.getter
    def group(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "group")

    @_builtins.property
    @pulumi.getter
    def username(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class ProviderConversionRuleRemote(dict):
    def __init__(__self__, *,
                 attribute: Optional[_builtins.str] = None,
                 condition: Optional[_builtins.str] = None,
                 values: Optional[Sequence[_builtins.str]] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def attribute(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "attribute")

    @_builtins.property
    @pulumi.getter
    def condition(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "condition")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetGroupUserResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str,
                 password_expires_at: _builtins.str,
                 password_status: _builtins.bool,
                 password_strength: _builtins.str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password_expires_at", password_expires_at)
        pulumi.set(__self__, "password_status", password_status)
        pulumi.set(__self__, "password_strength", password_strength)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="passwordExpiresAt")
    def password_expires_at(self) -> _builtins.str:
        return pulumi.get(self, "password_expires_at")

    @_builtins.property
    @pulumi.getter(name="passwordStatus")
    def password_status(self) -> _builtins.bool:
        return pulumi.get(self, "password_status")

    @_builtins.property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> _builtins.str:
        return pulumi.get(self, "password_strength")


@pulumi.output_type
class GetProjectsProjectResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 id: _builtins.str,
                 name: _builtins.str):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 enabled: _builtins.bool,
                 groups: Sequence[_builtins.str],
                 id: _builtins.str,
                 name: _builtins.str,
                 password_expires_at: _builtins.str,
                 password_status: _builtins.bool):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password_expires_at", password_expires_at)
        pulumi.set(__self__, "password_status", password_status)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="passwordExpiresAt")
    def password_expires_at(self) -> _builtins.str:
        return pulumi.get(self, "password_expires_at")

    @_builtins.property
    @pulumi.getter(name="passwordStatus")
    def password_status(self) -> _builtins.bool:
        return pulumi.get(self, "password_status")



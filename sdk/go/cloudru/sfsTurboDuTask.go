// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SfsTurboDuTask struct {
	pulumi.CustomResourceState

	BeginTime pulumi.StringOutput               `pulumi:"beginTime"`
	DirUsages SfsTurboDuTaskDirUsageArrayOutput `pulumi:"dirUsages"`
	EndTime   pulumi.StringOutput               `pulumi:"endTime"`
	Path      pulumi.StringOutput               `pulumi:"path"`
	Region    pulumi.StringOutput               `pulumi:"region"`
	ShareId   pulumi.StringOutput               `pulumi:"shareId"`
	Status    pulumi.StringOutput               `pulumi:"status"`
}

// NewSfsTurboDuTask registers a new resource with the given unique name, arguments, and options.
func NewSfsTurboDuTask(ctx *pulumi.Context,
	name string, args *SfsTurboDuTaskArgs, opts ...pulumi.ResourceOption) (*SfsTurboDuTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ShareId == nil {
		return nil, errors.New("invalid value for required argument 'ShareId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SfsTurboDuTask
	err := ctx.RegisterResource("sbercloud:index/sfsTurboDuTask:SfsTurboDuTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSfsTurboDuTask gets an existing SfsTurboDuTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSfsTurboDuTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SfsTurboDuTaskState, opts ...pulumi.ResourceOption) (*SfsTurboDuTask, error) {
	var resource SfsTurboDuTask
	err := ctx.ReadResource("sbercloud:index/sfsTurboDuTask:SfsTurboDuTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SfsTurboDuTask resources.
type sfsTurboDuTaskState struct {
	BeginTime *string                  `pulumi:"beginTime"`
	DirUsages []SfsTurboDuTaskDirUsage `pulumi:"dirUsages"`
	EndTime   *string                  `pulumi:"endTime"`
	Path      *string                  `pulumi:"path"`
	Region    *string                  `pulumi:"region"`
	ShareId   *string                  `pulumi:"shareId"`
	Status    *string                  `pulumi:"status"`
}

type SfsTurboDuTaskState struct {
	BeginTime pulumi.StringPtrInput
	DirUsages SfsTurboDuTaskDirUsageArrayInput
	EndTime   pulumi.StringPtrInput
	Path      pulumi.StringPtrInput
	Region    pulumi.StringPtrInput
	ShareId   pulumi.StringPtrInput
	Status    pulumi.StringPtrInput
}

func (SfsTurboDuTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboDuTaskState)(nil)).Elem()
}

type sfsTurboDuTaskArgs struct {
	Path    string  `pulumi:"path"`
	Region  *string `pulumi:"region"`
	ShareId string  `pulumi:"shareId"`
}

// The set of arguments for constructing a SfsTurboDuTask resource.
type SfsTurboDuTaskArgs struct {
	Path    pulumi.StringInput
	Region  pulumi.StringPtrInput
	ShareId pulumi.StringInput
}

func (SfsTurboDuTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboDuTaskArgs)(nil)).Elem()
}

type SfsTurboDuTaskInput interface {
	pulumi.Input

	ToSfsTurboDuTaskOutput() SfsTurboDuTaskOutput
	ToSfsTurboDuTaskOutputWithContext(ctx context.Context) SfsTurboDuTaskOutput
}

func (*SfsTurboDuTask) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboDuTask)(nil)).Elem()
}

func (i *SfsTurboDuTask) ToSfsTurboDuTaskOutput() SfsTurboDuTaskOutput {
	return i.ToSfsTurboDuTaskOutputWithContext(context.Background())
}

func (i *SfsTurboDuTask) ToSfsTurboDuTaskOutputWithContext(ctx context.Context) SfsTurboDuTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDuTaskOutput)
}

// SfsTurboDuTaskArrayInput is an input type that accepts SfsTurboDuTaskArray and SfsTurboDuTaskArrayOutput values.
// You can construct a concrete instance of `SfsTurboDuTaskArrayInput` via:
//
//	SfsTurboDuTaskArray{ SfsTurboDuTaskArgs{...} }
type SfsTurboDuTaskArrayInput interface {
	pulumi.Input

	ToSfsTurboDuTaskArrayOutput() SfsTurboDuTaskArrayOutput
	ToSfsTurboDuTaskArrayOutputWithContext(context.Context) SfsTurboDuTaskArrayOutput
}

type SfsTurboDuTaskArray []SfsTurboDuTaskInput

func (SfsTurboDuTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboDuTask)(nil)).Elem()
}

func (i SfsTurboDuTaskArray) ToSfsTurboDuTaskArrayOutput() SfsTurboDuTaskArrayOutput {
	return i.ToSfsTurboDuTaskArrayOutputWithContext(context.Background())
}

func (i SfsTurboDuTaskArray) ToSfsTurboDuTaskArrayOutputWithContext(ctx context.Context) SfsTurboDuTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDuTaskArrayOutput)
}

// SfsTurboDuTaskMapInput is an input type that accepts SfsTurboDuTaskMap and SfsTurboDuTaskMapOutput values.
// You can construct a concrete instance of `SfsTurboDuTaskMapInput` via:
//
//	SfsTurboDuTaskMap{ "key": SfsTurboDuTaskArgs{...} }
type SfsTurboDuTaskMapInput interface {
	pulumi.Input

	ToSfsTurboDuTaskMapOutput() SfsTurboDuTaskMapOutput
	ToSfsTurboDuTaskMapOutputWithContext(context.Context) SfsTurboDuTaskMapOutput
}

type SfsTurboDuTaskMap map[string]SfsTurboDuTaskInput

func (SfsTurboDuTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboDuTask)(nil)).Elem()
}

func (i SfsTurboDuTaskMap) ToSfsTurboDuTaskMapOutput() SfsTurboDuTaskMapOutput {
	return i.ToSfsTurboDuTaskMapOutputWithContext(context.Background())
}

func (i SfsTurboDuTaskMap) ToSfsTurboDuTaskMapOutputWithContext(ctx context.Context) SfsTurboDuTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDuTaskMapOutput)
}

type SfsTurboDuTaskOutput struct{ *pulumi.OutputState }

func (SfsTurboDuTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboDuTask)(nil)).Elem()
}

func (o SfsTurboDuTaskOutput) ToSfsTurboDuTaskOutput() SfsTurboDuTaskOutput {
	return o
}

func (o SfsTurboDuTaskOutput) ToSfsTurboDuTaskOutputWithContext(ctx context.Context) SfsTurboDuTaskOutput {
	return o
}

func (o SfsTurboDuTaskOutput) BeginTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDuTask) pulumi.StringOutput { return v.BeginTime }).(pulumi.StringOutput)
}

func (o SfsTurboDuTaskOutput) DirUsages() SfsTurboDuTaskDirUsageArrayOutput {
	return o.ApplyT(func(v *SfsTurboDuTask) SfsTurboDuTaskDirUsageArrayOutput { return v.DirUsages }).(SfsTurboDuTaskDirUsageArrayOutput)
}

func (o SfsTurboDuTaskOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDuTask) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

func (o SfsTurboDuTaskOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDuTask) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

func (o SfsTurboDuTaskOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDuTask) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SfsTurboDuTaskOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDuTask) pulumi.StringOutput { return v.ShareId }).(pulumi.StringOutput)
}

func (o SfsTurboDuTaskOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDuTask) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type SfsTurboDuTaskArrayOutput struct{ *pulumi.OutputState }

func (SfsTurboDuTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboDuTask)(nil)).Elem()
}

func (o SfsTurboDuTaskArrayOutput) ToSfsTurboDuTaskArrayOutput() SfsTurboDuTaskArrayOutput {
	return o
}

func (o SfsTurboDuTaskArrayOutput) ToSfsTurboDuTaskArrayOutputWithContext(ctx context.Context) SfsTurboDuTaskArrayOutput {
	return o
}

func (o SfsTurboDuTaskArrayOutput) Index(i pulumi.IntInput) SfsTurboDuTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SfsTurboDuTask {
		return vs[0].([]*SfsTurboDuTask)[vs[1].(int)]
	}).(SfsTurboDuTaskOutput)
}

type SfsTurboDuTaskMapOutput struct{ *pulumi.OutputState }

func (SfsTurboDuTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboDuTask)(nil)).Elem()
}

func (o SfsTurboDuTaskMapOutput) ToSfsTurboDuTaskMapOutput() SfsTurboDuTaskMapOutput {
	return o
}

func (o SfsTurboDuTaskMapOutput) ToSfsTurboDuTaskMapOutputWithContext(ctx context.Context) SfsTurboDuTaskMapOutput {
	return o
}

func (o SfsTurboDuTaskMapOutput) MapIndex(k pulumi.StringInput) SfsTurboDuTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SfsTurboDuTask {
		return vs[0].(map[string]*SfsTurboDuTask)[vs[1].(string)]
	}).(SfsTurboDuTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDuTaskInput)(nil)).Elem(), &SfsTurboDuTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDuTaskArrayInput)(nil)).Elem(), SfsTurboDuTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDuTaskMapInput)(nil)).Elem(), SfsTurboDuTaskMap{})
	pulumi.RegisterOutputType(SfsTurboDuTaskOutput{})
	pulumi.RegisterOutputType(SfsTurboDuTaskArrayOutput{})
	pulumi.RegisterOutputType(SfsTurboDuTaskMapOutput{})
}

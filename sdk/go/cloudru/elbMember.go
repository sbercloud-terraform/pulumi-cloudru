// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages an ELB member resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			elbPoolId := cfg.RequireObject("elbPoolId")
//			ipv4SubnetId := cfg.RequireObject("ipv4SubnetId")
//			_, err := sbercloud.NewElbMember(ctx, "member_1", &sbercloud.ElbMemberArgs{
//				Address:      pulumi.String("192.168.199.23"),
//				ProtocolPort: pulumi.Int(8080),
//				PoolId:       pulumi.Any(elbPoolId),
//				SubnetId:     pulumi.Any(ipv4SubnetId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB member can be imported using the pool ID and member ID separated by a slash, e.g.
//
// ```sh
// $ pulumi import sbercloud:index/elbMember:ElbMember member_1 e0bd694a-abbe-450e-b329-0931fd1cc5eb/4086b0c9-b18c-4d1c-b6b8-4c56c3ad2a9e
// ```
type ElbMember struct {
	pulumi.CustomResourceState

	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address    pulumi.StringOutput `pulumi:"address"`
	CreatedAt  pulumi.StringOutput `pulumi:"createdAt"`
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	IpVersion  pulumi.StringOutput `pulumi:"ipVersion"`
	MemberType pulumi.StringOutput `pulumi:"memberType"`
	// Human-readable name for the member.
	Name            pulumi.StringOutput `pulumi:"name"`
	OperatingStatus pulumi.StringOutput `pulumi:"operatingStatus"`
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringOutput `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort pulumi.IntOutput           `pulumi:"protocolPort"`
	Reasons      ElbMemberReasonArrayOutput `pulumi:"reasons"`
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region   pulumi.StringOutput        `pulumi:"region"`
	Statuses ElbMemberStatusArrayOutput `pulumi:"statuses"`
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId  pulumi.StringPtrOutput `pulumi:"subnetId"`
	UpdatedAt pulumi.StringOutput    `pulumi:"updatedAt"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewElbMember registers a new resource with the given unique name, arguments, and options.
func NewElbMember(ctx *pulumi.Context,
	name string, args *ElbMemberArgs, opts ...pulumi.ResourceOption) (*ElbMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElbMember
	err := ctx.RegisterResource("sbercloud:index/elbMember:ElbMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbMember gets an existing ElbMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbMemberState, opts ...pulumi.ResourceOption) (*ElbMember, error) {
	var resource ElbMember
	err := ctx.ReadResource("sbercloud:index/elbMember:ElbMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbMember resources.
type elbMemberState struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address    *string `pulumi:"address"`
	CreatedAt  *string `pulumi:"createdAt"`
	InstanceId *string `pulumi:"instanceId"`
	IpVersion  *string `pulumi:"ipVersion"`
	MemberType *string `pulumi:"memberType"`
	// Human-readable name for the member.
	Name            *string `pulumi:"name"`
	OperatingStatus *string `pulumi:"operatingStatus"`
	// The id of the pool that this member will be assigned to.
	PoolId *string `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort *int              `pulumi:"protocolPort"`
	Reasons      []ElbMemberReason `pulumi:"reasons"`
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region   *string           `pulumi:"region"`
	Statuses []ElbMemberStatus `pulumi:"statuses"`
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId  *string `pulumi:"subnetId"`
	UpdatedAt *string `pulumi:"updatedAt"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight *int `pulumi:"weight"`
}

type ElbMemberState struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address    pulumi.StringPtrInput
	CreatedAt  pulumi.StringPtrInput
	InstanceId pulumi.StringPtrInput
	IpVersion  pulumi.StringPtrInput
	MemberType pulumi.StringPtrInput
	// Human-readable name for the member.
	Name            pulumi.StringPtrInput
	OperatingStatus pulumi.StringPtrInput
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringPtrInput
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort pulumi.IntPtrInput
	Reasons      ElbMemberReasonArrayInput
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region   pulumi.StringPtrInput
	Statuses ElbMemberStatusArrayInput
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId  pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntPtrInput
}

func (ElbMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbMemberState)(nil)).Elem()
}

type elbMemberArgs struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address string `pulumi:"address"`
	// Human-readable name for the member.
	Name *string `pulumi:"name"`
	// The id of the pool that this member will be assigned to.
	PoolId string `pulumi:"poolId"`
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort *int `pulumi:"protocolPort"`
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region *string `pulumi:"region"`
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId *string `pulumi:"subnetId"`
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a ElbMember resource.
type ElbMemberArgs struct {
	// The IP address of the member to receive traffic from the load balancer.
	// Changing this creates a new member.
	Address pulumi.StringInput
	// Human-readable name for the member.
	Name pulumi.StringPtrInput
	// The id of the pool that this member will be assigned to.
	PoolId pulumi.StringInput
	// The port on which to listen for client traffic. Changing this creates a
	// new member.
	ProtocolPort pulumi.IntPtrInput
	// The region in which to create the ELB member resource. If omitted, the the
	// provider-level region will be used. Changing this creates a new member.
	Region pulumi.StringPtrInput
	// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
	// + The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
	// + If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
	//   In this case, cross-VPC backend servers must use private IPv4 addresses,
	//   and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
	SubnetId pulumi.StringPtrInput
	// A positive integer value that indicates the relative portion of traffic that this member
	// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
	// member with a weight of 2.
	Weight pulumi.IntPtrInput
}

func (ElbMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbMemberArgs)(nil)).Elem()
}

type ElbMemberInput interface {
	pulumi.Input

	ToElbMemberOutput() ElbMemberOutput
	ToElbMemberOutputWithContext(ctx context.Context) ElbMemberOutput
}

func (*ElbMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbMember)(nil)).Elem()
}

func (i *ElbMember) ToElbMemberOutput() ElbMemberOutput {
	return i.ToElbMemberOutputWithContext(context.Background())
}

func (i *ElbMember) ToElbMemberOutputWithContext(ctx context.Context) ElbMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMemberOutput)
}

// ElbMemberArrayInput is an input type that accepts ElbMemberArray and ElbMemberArrayOutput values.
// You can construct a concrete instance of `ElbMemberArrayInput` via:
//
//	ElbMemberArray{ ElbMemberArgs{...} }
type ElbMemberArrayInput interface {
	pulumi.Input

	ToElbMemberArrayOutput() ElbMemberArrayOutput
	ToElbMemberArrayOutputWithContext(context.Context) ElbMemberArrayOutput
}

type ElbMemberArray []ElbMemberInput

func (ElbMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbMember)(nil)).Elem()
}

func (i ElbMemberArray) ToElbMemberArrayOutput() ElbMemberArrayOutput {
	return i.ToElbMemberArrayOutputWithContext(context.Background())
}

func (i ElbMemberArray) ToElbMemberArrayOutputWithContext(ctx context.Context) ElbMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMemberArrayOutput)
}

// ElbMemberMapInput is an input type that accepts ElbMemberMap and ElbMemberMapOutput values.
// You can construct a concrete instance of `ElbMemberMapInput` via:
//
//	ElbMemberMap{ "key": ElbMemberArgs{...} }
type ElbMemberMapInput interface {
	pulumi.Input

	ToElbMemberMapOutput() ElbMemberMapOutput
	ToElbMemberMapOutputWithContext(context.Context) ElbMemberMapOutput
}

type ElbMemberMap map[string]ElbMemberInput

func (ElbMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbMember)(nil)).Elem()
}

func (i ElbMemberMap) ToElbMemberMapOutput() ElbMemberMapOutput {
	return i.ToElbMemberMapOutputWithContext(context.Background())
}

func (i ElbMemberMap) ToElbMemberMapOutputWithContext(ctx context.Context) ElbMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbMemberMapOutput)
}

type ElbMemberOutput struct{ *pulumi.OutputState }

func (ElbMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbMember)(nil)).Elem()
}

func (o ElbMemberOutput) ToElbMemberOutput() ElbMemberOutput {
	return o
}

func (o ElbMemberOutput) ToElbMemberOutputWithContext(ctx context.Context) ElbMemberOutput {
	return o
}

// The IP address of the member to receive traffic from the load balancer.
// Changing this creates a new member.
func (o ElbMemberOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) MemberType() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.MemberType }).(pulumi.StringOutput)
}

// Human-readable name for the member.
func (o ElbMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.OperatingStatus }).(pulumi.StringOutput)
}

// The id of the pool that this member will be assigned to.
func (o ElbMemberOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

// The port on which to listen for client traffic. Changing this creates a
// new member.
func (o ElbMemberOutput) ProtocolPort() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.IntOutput { return v.ProtocolPort }).(pulumi.IntOutput)
}

func (o ElbMemberOutput) Reasons() ElbMemberReasonArrayOutput {
	return o.ApplyT(func(v *ElbMember) ElbMemberReasonArrayOutput { return v.Reasons }).(ElbMemberReasonArrayOutput)
}

// The region in which to create the ELB member resource. If omitted, the the
// provider-level region will be used. Changing this creates a new member.
func (o ElbMemberOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ElbMemberOutput) Statuses() ElbMemberStatusArrayOutput {
	return o.ApplyT(func(v *ElbMember) ElbMemberStatusArrayOutput { return v.Statuses }).(ElbMemberStatusArrayOutput)
}

// The **IPv4 or IPv6 subnet ID** of the subnet in which to access the member.
//   - The IPv4 or IPv6 subnet must be in the same VPC as the subnet of the load balancer.
//   - If this parameter is not specified, **cross-VPC backend** has been enabled for the load balancer.
//     In this case, cross-VPC backend servers must use private IPv4 addresses,
//     and the protocol of the backend server group must be TCP, HTTP, or HTTPS.
func (o ElbMemberOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o ElbMemberOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// A positive integer value that indicates the relative portion of traffic that this member
// should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a
// member with a weight of 2.
func (o ElbMemberOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbMember) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type ElbMemberArrayOutput struct{ *pulumi.OutputState }

func (ElbMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbMember)(nil)).Elem()
}

func (o ElbMemberArrayOutput) ToElbMemberArrayOutput() ElbMemberArrayOutput {
	return o
}

func (o ElbMemberArrayOutput) ToElbMemberArrayOutputWithContext(ctx context.Context) ElbMemberArrayOutput {
	return o
}

func (o ElbMemberArrayOutput) Index(i pulumi.IntInput) ElbMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbMember {
		return vs[0].([]*ElbMember)[vs[1].(int)]
	}).(ElbMemberOutput)
}

type ElbMemberMapOutput struct{ *pulumi.OutputState }

func (ElbMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbMember)(nil)).Elem()
}

func (o ElbMemberMapOutput) ToElbMemberMapOutput() ElbMemberMapOutput {
	return o
}

func (o ElbMemberMapOutput) ToElbMemberMapOutputWithContext(ctx context.Context) ElbMemberMapOutput {
	return o
}

func (o ElbMemberMapOutput) MapIndex(k pulumi.StringInput) ElbMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbMember {
		return vs[0].(map[string]*ElbMember)[vs[1].(string)]
	}).(ElbMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMemberInput)(nil)).Elem(), &ElbMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMemberArrayInput)(nil)).Elem(), ElbMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbMemberMapInput)(nil)).Elem(), ElbMemberMap{})
	pulumi.RegisterOutputType(ElbMemberOutput{})
	pulumi.RegisterOutputType(ElbMemberArrayOutput{})
	pulumi.RegisterOutputType(ElbMemberMapOutput{})
}

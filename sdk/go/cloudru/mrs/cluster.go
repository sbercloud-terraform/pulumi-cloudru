// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mrs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Cluster struct {
	pulumi.CustomResourceState

	AnalysisCoreNodes   ClusterAnalysisCoreNodesPtrOutput    `pulumi:"analysisCoreNodes"`
	AnalysisTaskNodes   ClusterAnalysisTaskNodesPtrOutput    `pulumi:"analysisTaskNodes"`
	AutoRenew           pulumi.StringPtrOutput               `pulumi:"autoRenew"`
	AvailabilityZone    pulumi.StringOutput                  `pulumi:"availabilityZone"`
	BootstrapScripts    ClusterBootstrapScriptArrayOutput    `pulumi:"bootstrapScripts"`
	ChargingMode        pulumi.StringOutput                  `pulumi:"chargingMode"`
	ChargingStartTime   pulumi.StringOutput                  `pulumi:"chargingStartTime"`
	ComponentConfigs    ClusterComponentConfigArrayOutput    `pulumi:"componentConfigs"`
	ComponentLists      pulumi.StringArrayOutput             `pulumi:"componentLists"`
	CreateTime          pulumi.StringOutput                  `pulumi:"createTime"`
	CustomNodes         ClusterCustomNodeArrayOutput         `pulumi:"customNodes"`
	EipId               pulumi.StringOutput                  `pulumi:"eipId"`
	EnterpriseProjectId pulumi.StringOutput                  `pulumi:"enterpriseProjectId"`
	ExternalDatasources ClusterExternalDatasourceArrayOutput `pulumi:"externalDatasources"`
	LogCollection       pulumi.BoolPtrOutput                 `pulumi:"logCollection"`
	ManagerAdminPass    pulumi.StringOutput                  `pulumi:"managerAdminPass"`
	MasterNodeIp        pulumi.StringOutput                  `pulumi:"masterNodeIp"`
	MasterNodes         ClusterMasterNodesOutput             `pulumi:"masterNodes"`
	Name                pulumi.StringOutput                  `pulumi:"name"`
	NodeAdminPass       pulumi.StringPtrOutput               `pulumi:"nodeAdminPass"`
	NodeKeyPair         pulumi.StringPtrOutput               `pulumi:"nodeKeyPair"`
	Period              pulumi.IntPtrOutput                  `pulumi:"period"`
	PeriodUnit          pulumi.StringPtrOutput               `pulumi:"periodUnit"`
	PrivateIp           pulumi.StringOutput                  `pulumi:"privateIp"`
	PublicIp            pulumi.StringOutput                  `pulumi:"publicIp"`
	Region              pulumi.StringOutput                  `pulumi:"region"`
	SafeMode            pulumi.BoolPtrOutput                 `pulumi:"safeMode"`
	SecurityGroupIds    pulumi.StringArrayOutput             `pulumi:"securityGroupIds"`
	SmnNotify           ClusterSmnNotifyPtrOutput            `pulumi:"smnNotify"`
	Status              pulumi.StringOutput                  `pulumi:"status"`
	StreamingCoreNodes  ClusterStreamingCoreNodesPtrOutput   `pulumi:"streamingCoreNodes"`
	StreamingTaskNodes  ClusterStreamingTaskNodesPtrOutput   `pulumi:"streamingTaskNodes"`
	SubnetId            pulumi.StringOutput                  `pulumi:"subnetId"`
	Tags                pulumi.StringMapOutput               `pulumi:"tags"`
	TemplateId          pulumi.StringPtrOutput               `pulumi:"templateId"`
	TotalNodeNumber     pulumi.IntOutput                     `pulumi:"totalNodeNumber"`
	Type                pulumi.StringPtrOutput               `pulumi:"type"`
	UpdateTime          pulumi.StringOutput                  `pulumi:"updateTime"`
	Version             pulumi.StringOutput                  `pulumi:"version"`
	VpcId               pulumi.StringOutput                  `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.ComponentLists == nil {
		return nil, errors.New("invalid value for required argument 'ComponentLists'")
	}
	if args.ManagerAdminPass == nil {
		return nil, errors.New("invalid value for required argument 'ManagerAdminPass'")
	}
	if args.MasterNodes == nil {
		return nil, errors.New("invalid value for required argument 'MasterNodes'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.ManagerAdminPass != nil {
		args.ManagerAdminPass = pulumi.ToSecret(args.ManagerAdminPass).(pulumi.StringInput)
	}
	if args.NodeAdminPass != nil {
		args.NodeAdminPass = pulumi.ToSecret(args.NodeAdminPass).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"managerAdminPass",
		"nodeAdminPass",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("sbercloud:Mrs/cluster:cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("sbercloud:Mrs/cluster:cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	AnalysisCoreNodes   *ClusterAnalysisCoreNodes   `pulumi:"analysisCoreNodes"`
	AnalysisTaskNodes   *ClusterAnalysisTaskNodes   `pulumi:"analysisTaskNodes"`
	AutoRenew           *string                     `pulumi:"autoRenew"`
	AvailabilityZone    *string                     `pulumi:"availabilityZone"`
	BootstrapScripts    []ClusterBootstrapScript    `pulumi:"bootstrapScripts"`
	ChargingMode        *string                     `pulumi:"chargingMode"`
	ChargingStartTime   *string                     `pulumi:"chargingStartTime"`
	ComponentConfigs    []ClusterComponentConfig    `pulumi:"componentConfigs"`
	ComponentLists      []string                    `pulumi:"componentLists"`
	CreateTime          *string                     `pulumi:"createTime"`
	CustomNodes         []ClusterCustomNode         `pulumi:"customNodes"`
	EipId               *string                     `pulumi:"eipId"`
	EnterpriseProjectId *string                     `pulumi:"enterpriseProjectId"`
	ExternalDatasources []ClusterExternalDatasource `pulumi:"externalDatasources"`
	LogCollection       *bool                       `pulumi:"logCollection"`
	ManagerAdminPass    *string                     `pulumi:"managerAdminPass"`
	MasterNodeIp        *string                     `pulumi:"masterNodeIp"`
	MasterNodes         *ClusterMasterNodes         `pulumi:"masterNodes"`
	Name                *string                     `pulumi:"name"`
	NodeAdminPass       *string                     `pulumi:"nodeAdminPass"`
	NodeKeyPair         *string                     `pulumi:"nodeKeyPair"`
	Period              *int                        `pulumi:"period"`
	PeriodUnit          *string                     `pulumi:"periodUnit"`
	PrivateIp           *string                     `pulumi:"privateIp"`
	PublicIp            *string                     `pulumi:"publicIp"`
	Region              *string                     `pulumi:"region"`
	SafeMode            *bool                       `pulumi:"safeMode"`
	SecurityGroupIds    []string                    `pulumi:"securityGroupIds"`
	SmnNotify           *ClusterSmnNotify           `pulumi:"smnNotify"`
	Status              *string                     `pulumi:"status"`
	StreamingCoreNodes  *ClusterStreamingCoreNodes  `pulumi:"streamingCoreNodes"`
	StreamingTaskNodes  *ClusterStreamingTaskNodes  `pulumi:"streamingTaskNodes"`
	SubnetId            *string                     `pulumi:"subnetId"`
	Tags                map[string]string           `pulumi:"tags"`
	TemplateId          *string                     `pulumi:"templateId"`
	TotalNodeNumber     *int                        `pulumi:"totalNodeNumber"`
	Type                *string                     `pulumi:"type"`
	UpdateTime          *string                     `pulumi:"updateTime"`
	Version             *string                     `pulumi:"version"`
	VpcId               *string                     `pulumi:"vpcId"`
}

type ClusterState struct {
	AnalysisCoreNodes   ClusterAnalysisCoreNodesPtrInput
	AnalysisTaskNodes   ClusterAnalysisTaskNodesPtrInput
	AutoRenew           pulumi.StringPtrInput
	AvailabilityZone    pulumi.StringPtrInput
	BootstrapScripts    ClusterBootstrapScriptArrayInput
	ChargingMode        pulumi.StringPtrInput
	ChargingStartTime   pulumi.StringPtrInput
	ComponentConfigs    ClusterComponentConfigArrayInput
	ComponentLists      pulumi.StringArrayInput
	CreateTime          pulumi.StringPtrInput
	CustomNodes         ClusterCustomNodeArrayInput
	EipId               pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ExternalDatasources ClusterExternalDatasourceArrayInput
	LogCollection       pulumi.BoolPtrInput
	ManagerAdminPass    pulumi.StringPtrInput
	MasterNodeIp        pulumi.StringPtrInput
	MasterNodes         ClusterMasterNodesPtrInput
	Name                pulumi.StringPtrInput
	NodeAdminPass       pulumi.StringPtrInput
	NodeKeyPair         pulumi.StringPtrInput
	Period              pulumi.IntPtrInput
	PeriodUnit          pulumi.StringPtrInput
	PrivateIp           pulumi.StringPtrInput
	PublicIp            pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	SafeMode            pulumi.BoolPtrInput
	SecurityGroupIds    pulumi.StringArrayInput
	SmnNotify           ClusterSmnNotifyPtrInput
	Status              pulumi.StringPtrInput
	StreamingCoreNodes  ClusterStreamingCoreNodesPtrInput
	StreamingTaskNodes  ClusterStreamingTaskNodesPtrInput
	SubnetId            pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	TemplateId          pulumi.StringPtrInput
	TotalNodeNumber     pulumi.IntPtrInput
	Type                pulumi.StringPtrInput
	UpdateTime          pulumi.StringPtrInput
	Version             pulumi.StringPtrInput
	VpcId               pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	AnalysisCoreNodes   *ClusterAnalysisCoreNodes   `pulumi:"analysisCoreNodes"`
	AnalysisTaskNodes   *ClusterAnalysisTaskNodes   `pulumi:"analysisTaskNodes"`
	AutoRenew           *string                     `pulumi:"autoRenew"`
	AvailabilityZone    string                      `pulumi:"availabilityZone"`
	BootstrapScripts    []ClusterBootstrapScript    `pulumi:"bootstrapScripts"`
	ChargingMode        *string                     `pulumi:"chargingMode"`
	ComponentConfigs    []ClusterComponentConfig    `pulumi:"componentConfigs"`
	ComponentLists      []string                    `pulumi:"componentLists"`
	CustomNodes         []ClusterCustomNode         `pulumi:"customNodes"`
	EipId               *string                     `pulumi:"eipId"`
	EnterpriseProjectId *string                     `pulumi:"enterpriseProjectId"`
	ExternalDatasources []ClusterExternalDatasource `pulumi:"externalDatasources"`
	LogCollection       *bool                       `pulumi:"logCollection"`
	ManagerAdminPass    string                      `pulumi:"managerAdminPass"`
	MasterNodes         ClusterMasterNodes          `pulumi:"masterNodes"`
	Name                *string                     `pulumi:"name"`
	NodeAdminPass       *string                     `pulumi:"nodeAdminPass"`
	NodeKeyPair         *string                     `pulumi:"nodeKeyPair"`
	Period              *int                        `pulumi:"period"`
	PeriodUnit          *string                     `pulumi:"periodUnit"`
	PublicIp            *string                     `pulumi:"publicIp"`
	Region              *string                     `pulumi:"region"`
	SafeMode            *bool                       `pulumi:"safeMode"`
	SecurityGroupIds    []string                    `pulumi:"securityGroupIds"`
	SmnNotify           *ClusterSmnNotify           `pulumi:"smnNotify"`
	StreamingCoreNodes  *ClusterStreamingCoreNodes  `pulumi:"streamingCoreNodes"`
	StreamingTaskNodes  *ClusterStreamingTaskNodes  `pulumi:"streamingTaskNodes"`
	SubnetId            string                      `pulumi:"subnetId"`
	Tags                map[string]string           `pulumi:"tags"`
	TemplateId          *string                     `pulumi:"templateId"`
	Type                *string                     `pulumi:"type"`
	Version             string                      `pulumi:"version"`
	VpcId               string                      `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	AnalysisCoreNodes   ClusterAnalysisCoreNodesPtrInput
	AnalysisTaskNodes   ClusterAnalysisTaskNodesPtrInput
	AutoRenew           pulumi.StringPtrInput
	AvailabilityZone    pulumi.StringInput
	BootstrapScripts    ClusterBootstrapScriptArrayInput
	ChargingMode        pulumi.StringPtrInput
	ComponentConfigs    ClusterComponentConfigArrayInput
	ComponentLists      pulumi.StringArrayInput
	CustomNodes         ClusterCustomNodeArrayInput
	EipId               pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ExternalDatasources ClusterExternalDatasourceArrayInput
	LogCollection       pulumi.BoolPtrInput
	ManagerAdminPass    pulumi.StringInput
	MasterNodes         ClusterMasterNodesInput
	Name                pulumi.StringPtrInput
	NodeAdminPass       pulumi.StringPtrInput
	NodeKeyPair         pulumi.StringPtrInput
	Period              pulumi.IntPtrInput
	PeriodUnit          pulumi.StringPtrInput
	PublicIp            pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	SafeMode            pulumi.BoolPtrInput
	SecurityGroupIds    pulumi.StringArrayInput
	SmnNotify           ClusterSmnNotifyPtrInput
	StreamingCoreNodes  ClusterStreamingCoreNodesPtrInput
	StreamingTaskNodes  ClusterStreamingTaskNodesPtrInput
	SubnetId            pulumi.StringInput
	Tags                pulumi.StringMapInput
	TemplateId          pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
	Version             pulumi.StringInput
	VpcId               pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) AnalysisCoreNodes() ClusterAnalysisCoreNodesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAnalysisCoreNodesPtrOutput { return v.AnalysisCoreNodes }).(ClusterAnalysisCoreNodesPtrOutput)
}

func (o ClusterOutput) AnalysisTaskNodes() ClusterAnalysisTaskNodesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterAnalysisTaskNodesPtrOutput { return v.AnalysisTaskNodes }).(ClusterAnalysisTaskNodesPtrOutput)
}

func (o ClusterOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o ClusterOutput) BootstrapScripts() ClusterBootstrapScriptArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterBootstrapScriptArrayOutput { return v.BootstrapScripts }).(ClusterBootstrapScriptArrayOutput)
}

func (o ClusterOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o ClusterOutput) ChargingStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ChargingStartTime }).(pulumi.StringOutput)
}

func (o ClusterOutput) ComponentConfigs() ClusterComponentConfigArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterComponentConfigArrayOutput { return v.ComponentConfigs }).(ClusterComponentConfigArrayOutput)
}

func (o ClusterOutput) ComponentLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.ComponentLists }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o ClusterOutput) CustomNodes() ClusterCustomNodeArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterCustomNodeArrayOutput { return v.CustomNodes }).(ClusterCustomNodeArrayOutput)
}

func (o ClusterOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EipId }).(pulumi.StringOutput)
}

func (o ClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o ClusterOutput) ExternalDatasources() ClusterExternalDatasourceArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterExternalDatasourceArrayOutput { return v.ExternalDatasources }).(ClusterExternalDatasourceArrayOutput)
}

func (o ClusterOutput) LogCollection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.LogCollection }).(pulumi.BoolPtrOutput)
}

func (o ClusterOutput) ManagerAdminPass() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ManagerAdminPass }).(pulumi.StringOutput)
}

func (o ClusterOutput) MasterNodeIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.MasterNodeIp }).(pulumi.StringOutput)
}

func (o ClusterOutput) MasterNodes() ClusterMasterNodesOutput {
	return o.ApplyT(func(v *Cluster) ClusterMasterNodesOutput { return v.MasterNodes }).(ClusterMasterNodesOutput)
}

func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClusterOutput) NodeAdminPass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.NodeAdminPass }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) NodeKeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.NodeKeyPair }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o ClusterOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o ClusterOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o ClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ClusterOutput) SafeMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.SafeMode }).(pulumi.BoolPtrOutput)
}

func (o ClusterOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) SmnNotify() ClusterSmnNotifyPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterSmnNotifyPtrOutput { return v.SmnNotify }).(ClusterSmnNotifyPtrOutput)
}

func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ClusterOutput) StreamingCoreNodes() ClusterStreamingCoreNodesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterStreamingCoreNodesPtrOutput { return v.StreamingCoreNodes }).(ClusterStreamingCoreNodesPtrOutput)
}

func (o ClusterOutput) StreamingTaskNodes() ClusterStreamingTaskNodesPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterStreamingTaskNodesPtrOutput { return v.StreamingTaskNodes }).(ClusterStreamingTaskNodesPtrOutput)
}

func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ClusterOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.TemplateId }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) TotalNodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.TotalNodeNumber }).(pulumi.IntOutput)
}

func (o ClusterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

func (o ClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}

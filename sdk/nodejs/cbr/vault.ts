// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a CBR Vault resource within Sbercloud.
 *
 * ## Example Usage
 *
 * ### Create a disk type vault
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const vaultName = config.requireObject<any>("vaultName");
 * const evsVolumeId = config.requireObject<any>("evsVolumeId");
 * const test = new sbercloud.cbr.Vault("test", {
 *     name: vaultName,
 *     type: "disk",
 *     protectionType: "backup",
 *     size: 50,
 *     autoExpand: true,
 *     resources: [{
 *         includes: [evsVolumeId],
 *     }],
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ### Create an SFS turbo type vault
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const vaultName = config.requireObject<any>("vaultName");
 * const sfsTurboId = config.requireObject<any>("sfsTurboId");
 * const test = new sbercloud.cbr.Vault("test", {
 *     name: vaultName,
 *     type: "turbo",
 *     protectionType: "backup",
 *     size: 1000,
 *     resources: [{
 *         includes: [sfsTurboId],
 *     }],
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ### Create an SFS turbo type vault with replicate protection type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const vaultName = config.requireObject<any>("vaultName");
 * const test = new sbercloud.cbr.Vault("test", {
 *     name: vaultName,
 *     type: "turbo",
 *     protectionType: "replication",
 *     size: 1000,
 * });
 * ```
 *
 * ## Import
 *
 * Vaults can be imported by their `id`. For example,
 *
 * ```sh
 * $ pulumi import sbercloud:Cbr/vault:Vault test 01c33779-7c83-4182-8b6b-24a671fcedf8
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason. The missing attributes include: `period_unit`, `period`, `auto_renew`.
 *
 * It is generally recommended running `pulumi preview` after importing a vault.
 *
 * You can then decide if changes should be applied to the vault, or the resource definition should be updated to align
 *
 * with the vault. Also you can ignore changes as below.
 *
 * resource "sbercloud_cbr_vault" "test" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       period_unit, period, auto_renew,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class Vault extends pulumi.CustomResource {
    /**
     * Get an existing Vault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultState, opts?: pulumi.CustomResourceOptions): Vault {
        return new Vault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cbr/vault:Vault';

    /**
     * Returns true if the given object is an instance of Vault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vault.__pulumiType;
    }

    /**
     * The allocated capacity of the vault, in GB.
     */
    public /*out*/ readonly allocated!: pulumi.Output<number>;
    /**
     * Specifies whether automatic association is enabled. Defaults to **false**.
     */
    public readonly autoBind!: pulumi.Output<boolean>;
    /**
     * Specifies to enable auto capacity expansion for the backup protection type vault.
     * Defaults to **false**.
     *
     * > You cannot configure `autoExpand` if the vault is **prePaid** mode.
     */
    public readonly autoExpand!: pulumi.Output<boolean>;
    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether auto renew is enabled.
     * Valid values are **true** and **false**. Defaults to **false**.
     *
     * <a name="cbrVaultResources"></a>
     * The `resources` block supports:
     */
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    /**
     * The backup name prefix.
     */
    public readonly backupNamePrefix!: pulumi.Output<string>;
    /**
     * Specifies the tags to filter resources for automatic association with **auto_bind**.
     */
    public readonly bindRules!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the charging mode of the vault.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     *
     * Changing this will create a new vault.
     */
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * The cloud type of the vault.
     */
    public readonly cloudType!: pulumi.Output<string>;
    /**
     * Specifies the backup specifications.
     *
     * Only **server** type vaults support application consistent and defaults to **crash_consistent**.
     * Changing this will create a new vault.
     */
    public readonly consistentLevel!: pulumi.Output<string | undefined>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new vault.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * Specifies whether multiple availability zones are used for backing up.
     * Defaults to **false**.
     */
    public readonly isMultiAz!: pulumi.Output<boolean>;
    /**
     * Locked status of the vault.
     */
    public readonly locked!: pulumi.Output<boolean>;
    /**
     * Specifies a unique name of the CBR vault. This parameter can contain a maximum of 64
     * characters, which may consist of letters, digits, underscores(_) and hyphens (-).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the charging period of the vault.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 5.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this will create a new vault.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the vault.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this will create a new vault.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * The policy details to associate with the CBR vault.
     */
    public readonly policies!: pulumi.Output<outputs.Cbr.VaultPolicy[]>;
    /**
     * Specifies a policy to associate with the CBR vault.
     * `policyId` cannot be used with the vault of replicate protection type.
     */
    public readonly policyId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the protection type of the CBR vault.
     * The valid values are **backup** and **replication**. Vaults of type **disk** don't support **replication**.
     * Changing this will create a new vault.
     */
    public readonly protectionType!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the CBR vault. If omitted, the
     * provider-level region will be used. Changing this will create a new vault.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies an array of one or more resources to attach to the CBR vault.
     * The object structure is documented below.
     */
    public readonly resources!: pulumi.Output<outputs.Cbr.VaultResource[]>;
    /**
     * Specifies the vault capacity, in GB. The valid value range is `1` to `10,485,760`.
     *
     * > You cannot update `size` if the vault is **prePaid** mode.
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The specification code.
     */
    public /*out*/ readonly specCode!: pulumi.Output<string>;
    /**
     * The vault status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The name of the bucket for the vault.
     */
    public /*out*/ readonly storage!: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the CBR vault.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the object type of the CBR vault.
     * Changing this will create a new vault. Vaild values are as follows:
     * + **server** (Cloud Servers)
     * + **disk** (EVS Disks)
     * + **turbo** (SFS Turbo file systems)
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The used capacity, in GB.
     */
    public /*out*/ readonly used!: pulumi.Output<number>;

    /**
     * Create a Vault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultArgs | VaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VaultState | undefined;
            resourceInputs["allocated"] = state ? state.allocated : undefined;
            resourceInputs["autoBind"] = state ? state.autoBind : undefined;
            resourceInputs["autoExpand"] = state ? state.autoExpand : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["backupNamePrefix"] = state ? state.backupNamePrefix : undefined;
            resourceInputs["bindRules"] = state ? state.bindRules : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["cloudType"] = state ? state.cloudType : undefined;
            resourceInputs["consistentLevel"] = state ? state.consistentLevel : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["isMultiAz"] = state ? state.isMultiAz : undefined;
            resourceInputs["locked"] = state ? state.locked : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["protectionType"] = state ? state.protectionType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["specCode"] = state ? state.specCode : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["used"] = state ? state.used : undefined;
        } else {
            const args = argsOrState as VaultArgs | undefined;
            if ((!args || args.protectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protectionType'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["autoBind"] = args ? args.autoBind : undefined;
            resourceInputs["autoExpand"] = args ? args.autoExpand : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["backupNamePrefix"] = args ? args.backupNamePrefix : undefined;
            resourceInputs["bindRules"] = args ? args.bindRules : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["cloudType"] = args ? args.cloudType : undefined;
            resourceInputs["consistentLevel"] = args ? args.consistentLevel : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["isMultiAz"] = args ? args.isMultiAz : undefined;
            resourceInputs["locked"] = args ? args.locked : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["protectionType"] = args ? args.protectionType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["allocated"] = undefined /*out*/;
            resourceInputs["specCode"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storage"] = undefined /*out*/;
            resourceInputs["used"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vault resources.
 */
export interface VaultState {
    /**
     * The allocated capacity of the vault, in GB.
     */
    allocated?: pulumi.Input<number>;
    /**
     * Specifies whether automatic association is enabled. Defaults to **false**.
     */
    autoBind?: pulumi.Input<boolean>;
    /**
     * Specifies to enable auto capacity expansion for the backup protection type vault.
     * Defaults to **false**.
     *
     * > You cannot configure `autoExpand` if the vault is **prePaid** mode.
     */
    autoExpand?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled.
     * Valid values are **true** and **false**. Defaults to **false**.
     *
     * <a name="cbrVaultResources"></a>
     * The `resources` block supports:
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * The backup name prefix.
     */
    backupNamePrefix?: pulumi.Input<string>;
    /**
     * Specifies the tags to filter resources for automatic association with **auto_bind**.
     */
    bindRules?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the charging mode of the vault.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     *
     * Changing this will create a new vault.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * The cloud type of the vault.
     */
    cloudType?: pulumi.Input<string>;
    /**
     * Specifies the backup specifications.
     *
     * Only **server** type vaults support application consistent and defaults to **crash_consistent**.
     * Changing this will create a new vault.
     */
    consistentLevel?: pulumi.Input<string>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new vault.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies whether multiple availability zones are used for backing up.
     * Defaults to **false**.
     */
    isMultiAz?: pulumi.Input<boolean>;
    /**
     * Locked status of the vault.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Specifies a unique name of the CBR vault. This parameter can contain a maximum of 64
     * characters, which may consist of letters, digits, underscores(_) and hyphens (-).
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the vault.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 5.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this will create a new vault.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the vault.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this will create a new vault.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * The policy details to associate with the CBR vault.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.Cbr.VaultPolicy>[]>;
    /**
     * Specifies a policy to associate with the CBR vault.
     * `policyId` cannot be used with the vault of replicate protection type.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Specifies the protection type of the CBR vault.
     * The valid values are **backup** and **replication**. Vaults of type **disk** don't support **replication**.
     * Changing this will create a new vault.
     */
    protectionType?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CBR vault. If omitted, the
     * provider-level region will be used. Changing this will create a new vault.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more resources to attach to the CBR vault.
     * The object structure is documented below.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.Cbr.VaultResource>[]>;
    /**
     * Specifies the vault capacity, in GB. The valid value range is `1` to `10,485,760`.
     *
     * > You cannot update `size` if the vault is **prePaid** mode.
     */
    size?: pulumi.Input<number>;
    /**
     * The specification code.
     */
    specCode?: pulumi.Input<string>;
    /**
     * The vault status.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the bucket for the vault.
     */
    storage?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the CBR vault.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the object type of the CBR vault.
     * Changing this will create a new vault. Vaild values are as follows:
     * + **server** (Cloud Servers)
     * + **disk** (EVS Disks)
     * + **turbo** (SFS Turbo file systems)
     */
    type?: pulumi.Input<string>;
    /**
     * The used capacity, in GB.
     */
    used?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Vault resource.
 */
export interface VaultArgs {
    /**
     * Specifies whether automatic association is enabled. Defaults to **false**.
     */
    autoBind?: pulumi.Input<boolean>;
    /**
     * Specifies to enable auto capacity expansion for the backup protection type vault.
     * Defaults to **false**.
     *
     * > You cannot configure `autoExpand` if the vault is **prePaid** mode.
     */
    autoExpand?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled.
     * Valid values are **true** and **false**. Defaults to **false**.
     *
     * <a name="cbrVaultResources"></a>
     * The `resources` block supports:
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * The backup name prefix.
     */
    backupNamePrefix?: pulumi.Input<string>;
    /**
     * Specifies the tags to filter resources for automatic association with **auto_bind**.
     */
    bindRules?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the charging mode of the vault.
     * The valid values are as follows:
     * + **prePaid**: the yearly/monthly billing mode.
     * + **postPaid**: the pay-per-use billing mode.
     *
     * Changing this will create a new vault.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * The cloud type of the vault.
     */
    cloudType?: pulumi.Input<string>;
    /**
     * Specifies the backup specifications.
     *
     * Only **server** type vaults support application consistent and defaults to **crash_consistent**.
     * Changing this will create a new vault.
     */
    consistentLevel?: pulumi.Input<string>;
    /**
     * Specifies a unique ID in UUID format of enterprise project.
     * Changing this will create a new vault.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies whether multiple availability zones are used for backing up.
     * Defaults to **false**.
     */
    isMultiAz?: pulumi.Input<boolean>;
    /**
     * Locked status of the vault.
     */
    locked?: pulumi.Input<boolean>;
    /**
     * Specifies a unique name of the CBR vault. This parameter can contain a maximum of 64
     * characters, which may consist of letters, digits, underscores(_) and hyphens (-).
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the vault.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 5.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this will create a new vault.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the vault.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this will create a new vault.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * The policy details to associate with the CBR vault.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.Cbr.VaultPolicy>[]>;
    /**
     * Specifies a policy to associate with the CBR vault.
     * `policyId` cannot be used with the vault of replicate protection type.
     */
    policyId?: pulumi.Input<string>;
    /**
     * Specifies the protection type of the CBR vault.
     * The valid values are **backup** and **replication**. Vaults of type **disk** don't support **replication**.
     * Changing this will create a new vault.
     */
    protectionType: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CBR vault. If omitted, the
     * provider-level region will be used. Changing this will create a new vault.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more resources to attach to the CBR vault.
     * The object structure is documented below.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.Cbr.VaultResource>[]>;
    /**
     * Specifies the vault capacity, in GB. The valid value range is `1` to `10,485,760`.
     *
     * > You cannot update `size` if the vault is **prePaid** mode.
     */
    size: pulumi.Input<number>;
    /**
     * Specifies the key/value pairs to associate with the CBR vault.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the object type of the CBR vault.
     * Changing this will create a new vault. Vaild values are as follows:
     * + **server** (Cloud Servers)
     * + **disk** (EVS Disks)
     * + **turbo** (SFS Turbo file systems)
     */
    type: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages an ELB L7 Policy resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const listenerId = config.requireObject<any>("listenerId");
 * const poolId = config.requireObject<any>("poolId");
 * const policy1 = new sbercloud.ElbL7policy("policy_1", {
 *     name: "policy_1",
 *     description: "test description",
 *     listenerId: listenerId,
 *     redirectPoolId: poolId,
 * });
 * ```
 *
 * ## Import
 *
 * ELB policy can be imported using the policy ID, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:index/elbL7policy:ElbL7policy policy_1 5c20fdad-7288-11eb-b817-0255ac10158b
 * ```
 */
export class ElbL7policy extends pulumi.CustomResource {
    /**
     * Get an existing ElbL7policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElbL7policyState, opts?: pulumi.CustomResourceOptions): ElbL7policy {
        return new ElbL7policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/elbL7policy:ElbL7policy';

    /**
     * Returns true if the given object is an instance of ElbL7policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElbL7policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElbL7policy.__pulumiType;
    }

    public readonly action!: pulumi.Output<string | undefined>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Human-readable description for the L7 Policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly enterpriseProjectId!: pulumi.Output<string>;
    public readonly fixedResponseConfig!: pulumi.Output<outputs.ElbL7policyFixedResponseConfig>;
    /**
     * The Listener on which the L7 Policy will be associated with. Changing
     * this creates a new L7 Policy.
     */
    public readonly listenerId!: pulumi.Output<string>;
    /**
     * Human-readable name for the L7 Policy. Does not have to be unique.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly priority!: pulumi.Output<number>;
    public /*out*/ readonly provisioningStatus!: pulumi.Output<string>;
    public readonly redirectListenerId!: pulumi.Output<string>;
    /**
     * Requests matching this policy will be redirected to the pool with this ID.
     */
    public readonly redirectPoolId!: pulumi.Output<string>;
    public readonly redirectPoolsConfigs!: pulumi.Output<outputs.ElbL7policyRedirectPoolsConfig[]>;
    public readonly redirectPoolsExtendConfig!: pulumi.Output<outputs.ElbL7policyRedirectPoolsExtendConfig>;
    public readonly redirectPoolsStickySessionConfig!: pulumi.Output<outputs.ElbL7policyRedirectPoolsStickySessionConfig>;
    public readonly redirectUrlConfig!: pulumi.Output<outputs.ElbL7policyRedirectUrlConfig>;
    /**
     * The region in which to create the L7 Policy resource. If omitted, the
     * provider-level region will be used. Changing this creates a new L7 Policy.
     */
    public readonly region!: pulumi.Output<string>;
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a ElbL7policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElbL7policyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElbL7policyArgs | ElbL7policyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElbL7policyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["fixedResponseConfig"] = state ? state.fixedResponseConfig : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["provisioningStatus"] = state ? state.provisioningStatus : undefined;
            resourceInputs["redirectListenerId"] = state ? state.redirectListenerId : undefined;
            resourceInputs["redirectPoolId"] = state ? state.redirectPoolId : undefined;
            resourceInputs["redirectPoolsConfigs"] = state ? state.redirectPoolsConfigs : undefined;
            resourceInputs["redirectPoolsExtendConfig"] = state ? state.redirectPoolsExtendConfig : undefined;
            resourceInputs["redirectPoolsStickySessionConfig"] = state ? state.redirectPoolsStickySessionConfig : undefined;
            resourceInputs["redirectUrlConfig"] = state ? state.redirectUrlConfig : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as ElbL7policyArgs | undefined;
            if ((!args || args.listenerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fixedResponseConfig"] = args ? args.fixedResponseConfig : undefined;
            resourceInputs["listenerId"] = args ? args.listenerId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["redirectListenerId"] = args ? args.redirectListenerId : undefined;
            resourceInputs["redirectPoolId"] = args ? args.redirectPoolId : undefined;
            resourceInputs["redirectPoolsConfigs"] = args ? args.redirectPoolsConfigs : undefined;
            resourceInputs["redirectPoolsExtendConfig"] = args ? args.redirectPoolsExtendConfig : undefined;
            resourceInputs["redirectPoolsStickySessionConfig"] = args ? args.redirectPoolsStickySessionConfig : undefined;
            resourceInputs["redirectUrlConfig"] = args ? args.redirectUrlConfig : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enterpriseProjectId"] = undefined /*out*/;
            resourceInputs["provisioningStatus"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElbL7policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElbL7policy resources.
 */
export interface ElbL7policyState {
    action?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    /**
     * Human-readable description for the L7 Policy.
     */
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    fixedResponseConfig?: pulumi.Input<inputs.ElbL7policyFixedResponseConfig>;
    /**
     * The Listener on which the L7 Policy will be associated with. Changing
     * this creates a new L7 Policy.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * Human-readable name for the L7 Policy. Does not have to be unique.
     */
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    provisioningStatus?: pulumi.Input<string>;
    redirectListenerId?: pulumi.Input<string>;
    /**
     * Requests matching this policy will be redirected to the pool with this ID.
     */
    redirectPoolId?: pulumi.Input<string>;
    redirectPoolsConfigs?: pulumi.Input<pulumi.Input<inputs.ElbL7policyRedirectPoolsConfig>[]>;
    redirectPoolsExtendConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfig>;
    redirectPoolsStickySessionConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsStickySessionConfig>;
    redirectUrlConfig?: pulumi.Input<inputs.ElbL7policyRedirectUrlConfig>;
    /**
     * The region in which to create the L7 Policy resource. If omitted, the
     * provider-level region will be used. Changing this creates a new L7 Policy.
     */
    region?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElbL7policy resource.
 */
export interface ElbL7policyArgs {
    action?: pulumi.Input<string>;
    /**
     * Human-readable description for the L7 Policy.
     */
    description?: pulumi.Input<string>;
    fixedResponseConfig?: pulumi.Input<inputs.ElbL7policyFixedResponseConfig>;
    /**
     * The Listener on which the L7 Policy will be associated with. Changing
     * this creates a new L7 Policy.
     */
    listenerId: pulumi.Input<string>;
    /**
     * Human-readable name for the L7 Policy. Does not have to be unique.
     */
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    redirectListenerId?: pulumi.Input<string>;
    /**
     * Requests matching this policy will be redirected to the pool with this ID.
     */
    redirectPoolId?: pulumi.Input<string>;
    redirectPoolsConfigs?: pulumi.Input<pulumi.Input<inputs.ElbL7policyRedirectPoolsConfig>[]>;
    redirectPoolsExtendConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfig>;
    redirectPoolsStickySessionConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsStickySessionConfig>;
    redirectUrlConfig?: pulumi.Input<inputs.ElbL7policyRedirectUrlConfig>;
    /**
     * The region in which to create the L7 Policy resource. If omitted, the
     * provider-level region will be used. Changing this creates a new L7 Policy.
     */
    region?: pulumi.Input<string>;
}

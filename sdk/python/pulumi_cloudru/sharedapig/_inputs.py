# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ApiBackendParamArgs',
    'ApiBackendParamArgsDict',
    'ApiFuncGraphArgs',
    'ApiFuncGraphArgsDict',
    'ApiFuncGraphPolicyArgs',
    'ApiFuncGraphPolicyArgsDict',
    'ApiFuncGraphPolicyBackendParamArgs',
    'ApiFuncGraphPolicyBackendParamArgsDict',
    'ApiFuncGraphPolicyConditionArgs',
    'ApiFuncGraphPolicyConditionArgsDict',
    'ApiMockArgs',
    'ApiMockArgsDict',
    'ApiMockPolicyArgs',
    'ApiMockPolicyArgsDict',
    'ApiMockPolicyBackendParamArgs',
    'ApiMockPolicyBackendParamArgsDict',
    'ApiMockPolicyConditionArgs',
    'ApiMockPolicyConditionArgsDict',
    'ApiRequestParamArgs',
    'ApiRequestParamArgsDict',
    'ApiWebArgs',
    'ApiWebArgsDict',
    'ApiWebPolicyArgs',
    'ApiWebPolicyArgsDict',
    'ApiWebPolicyBackendParamArgs',
    'ApiWebPolicyBackendParamArgsDict',
    'ApiWebPolicyConditionArgs',
    'ApiWebPolicyConditionArgsDict',
    'GroupEnvironmentArgs',
    'GroupEnvironmentArgsDict',
    'GroupEnvironmentVariableArgs',
    'GroupEnvironmentVariableArgsDict',
    'GroupUrlDomainArgs',
    'GroupUrlDomainArgsDict',
]

MYPY = False

if not MYPY:
    class ApiBackendParamArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Where the parameter is located.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        type: pulumi.Input[_builtins.str]
        """
        The parameter type.
        """
        value: pulumi.Input[_builtins.str]
        """
        The value of the parameter
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        system_param_type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ApiBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiBackendParamArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 system_param_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Where the parameter is located.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the API. An API name consists of 3–64 characters, starting with a
               letter. Only letters, digits, and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] type: The parameter type.
        :param pulumi.Input[_builtins.str] value: The value of the parameter
        :param pulumi.Input[_builtins.str] description: Specifies the description of the API. The description cannot exceed 255 characters.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_param_type")

    @system_param_type.setter
    def system_param_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_param_type", value)


if not MYPY:
    class ApiFuncGraphArgsDict(TypedDict):
        function_urn: pulumi.Input[_builtins.str]
        """
        The URN of the FunctionGraph function.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the backend custom authorization.
        """
        function_alias_urn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The alias URN of the FunctionGraph function.
        """
        invocation_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The invocation type.
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The network architecture (framework) type of the FunctionGraph function.
        """
        request_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
        which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        The timeout for API requests to backend service.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version of the API. A maximum of 16 characters are allowed.
        """
elif False:
    ApiFuncGraphArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiFuncGraphArgs:
    def __init__(__self__, *,
                 function_urn: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 function_alias_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 invocation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 request_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] function_urn: The URN of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] authorizer_id: The ID of the backend custom authorization.
        :param pulumi.Input[_builtins.str] function_alias_urn: The alias URN of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] invocation_type: The invocation type.
        :param pulumi.Input[_builtins.str] network_type: The network architecture (framework) type of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] request_protocol: Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
               which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        :param pulumi.Input[_builtins.int] timeout: The timeout for API requests to backend service.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the API. A maximum of 16 characters are allowed.
        """
        pulumi.set(__self__, "function_urn", function_urn)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> pulumi.Input[_builtins.str]:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @function_urn.setter
    def function_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "function_urn", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @function_alias_urn.setter
    def function_alias_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_alias_urn", value)

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The invocation type.
        """
        return pulumi.get(self, "invocation_type")

    @invocation_type.setter
    def invocation_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invocation_type", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network architecture (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
        which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        """
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_protocol", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the API. A maximum of 16 characters are allowed.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ApiFuncGraphPolicyArgsDict(TypedDict):
        conditions: pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgsDict']]]
        """
        The policy conditions.
        """
        function_urn: pulumi.Input[_builtins.str]
        """
        The URN of the FunctionGraph function.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the backend custom authorization.
        """
        backend_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgsDict']]]]
        """
        The configaiton list of the backend parameters.
        """
        effective_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The effective mode of the backend policy.
        """
        function_alias_urn: NotRequired[pulumi.Input[_builtins.str]]
        """
        The alias URN of the FunctionGraph function.
        """
        invocation_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The invocation mode of the FunctionGraph function.
        """
        invocation_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The invocation mode of the FunctionGraph function.
        """
        network_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The network (framework) type of the FunctionGraph function.
        """
        request_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
        which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        The timeout for API requests to backend service.
        """
        version: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the version of the API. A maximum of 16 characters are allowed.
        """
elif False:
    ApiFuncGraphPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiFuncGraphPolicyArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgs']]],
                 function_urn: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_params: Optional[pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgs']]]] = None,
                 effective_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 function_alias_urn: Optional[pulumi.Input[_builtins.str]] = None,
                 invocation_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 invocation_type: Optional[pulumi.Input[_builtins.str]] = None,
                 network_type: Optional[pulumi.Input[_builtins.str]] = None,
                 request_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgs']]] conditions: The policy conditions.
        :param pulumi.Input[_builtins.str] function_urn: The URN of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the API. An API name consists of 3–64 characters, starting with a
               letter. Only letters, digits, and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] authorizer_id: The ID of the backend custom authorization.
        :param pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgs']]] backend_params: The configaiton list of the backend parameters.
        :param pulumi.Input[_builtins.str] effective_mode: The effective mode of the backend policy.
        :param pulumi.Input[_builtins.str] function_alias_urn: The alias URN of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] invocation_mode: The invocation mode of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] invocation_type: The invocation mode of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] network_type: The network (framework) type of the FunctionGraph function.
        :param pulumi.Input[_builtins.str] request_protocol: Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
               which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        :param pulumi.Input[_builtins.int] timeout: The timeout for API requests to backend service.
        :param pulumi.Input[_builtins.str] version: Specifies the version of the API. A maximum of 16 characters are allowed.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_mode is not None:
            pulumi.set(__self__, "invocation_mode", invocation_mode)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgs']]]:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> pulumi.Input[_builtins.str]:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @function_urn.setter
    def function_urn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "function_urn", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgs']]]]:
        """
        The configaiton list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @backend_params.setter
    def backend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiFuncGraphPolicyBackendParamArgs']]]]):
        pulumi.set(self, "backend_params", value)

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @effective_mode.setter
    def effective_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_mode", value)

    @_builtins.property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @function_alias_urn.setter
    def function_alias_urn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "function_alias_urn", value)

    @_builtins.property
    @pulumi.getter(name="invocationMode")
    def invocation_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_mode")

    @invocation_mode.setter
    def invocation_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invocation_mode", value)

    @_builtins.property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_type")

    @invocation_type.setter
    def invocation_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "invocation_type", value)

    @_builtins.property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The network (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "network_type", value)

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
        which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        """
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_protocol", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the version of the API. A maximum of 16 characters are allowed.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class ApiFuncGraphPolicyBackendParamArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Where the parameter is located.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        type: pulumi.Input[_builtins.str]
        """
        The parameter type.
        """
        value: pulumi.Input[_builtins.str]
        """
        The value of the parameter
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        system_param_type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ApiFuncGraphPolicyBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiFuncGraphPolicyBackendParamArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 system_param_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Where the parameter is located.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the API. An API name consists of 3–64 characters, starting with a
               letter. Only letters, digits, and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] type: The parameter type.
        :param pulumi.Input[_builtins.str] value: The value of the parameter
        :param pulumi.Input[_builtins.str] description: Specifies the description of the API. The description cannot exceed 255 characters.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_param_type")

    @system_param_type.setter
    def system_param_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_param_type", value)


if not MYPY:
    class ApiFuncGraphPolicyConditionArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        The value of the backend policy.
        """
        cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cookie parameter name.
        """
        frontend_authorizer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The frontend authentication parameter name.
        """
        mapped_param_location: NotRequired[pulumi.Input[_builtins.str]]
        """
        The location of a parameter generated after orchestration.
        """
        mapped_param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of a parameter generated after orchestration.
        """
        param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The request parameter name.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the backend policy.
        """
        sys_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The gateway built-in parameter name.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The condition type.
        """
elif False:
    ApiFuncGraphPolicyConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiFuncGraphPolicyConditionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frontend_authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_location: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 sys_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] value: The value of the backend policy.
        :param pulumi.Input[_builtins.str] cookie_name: The cookie parameter name.
        :param pulumi.Input[_builtins.str] frontend_authorizer_name: The frontend authentication parameter name.
        :param pulumi.Input[_builtins.str] mapped_param_location: The location of a parameter generated after orchestration.
        :param pulumi.Input[_builtins.str] mapped_param_name: The name of a parameter generated after orchestration.
        :param pulumi.Input[_builtins.str] param_name: The request parameter name.
        :param pulumi.Input[_builtins.str] source: The type of the backend policy.
        :param pulumi.Input[_builtins.str] sys_name: The gateway built-in parameter name.
        :param pulumi.Input[_builtins.str] type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @frontend_authorizer_name.setter
    def frontend_authorizer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frontend_authorizer_name", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @mapped_param_location.setter
    def mapped_param_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_location", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @mapped_param_name.setter
    def mapped_param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_name", value)

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "param_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @sys_name.setter
    def sys_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sys_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ApiMockArgsDict(TypedDict):
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the backend custom authorization.
        """
        response: NotRequired[pulumi.Input[_builtins.str]]
        """
        The response content of the mock.
        """
        status_code: NotRequired[pulumi.Input[_builtins.int]]
        """
        The custom status code of the mock response.
        """
elif False:
    ApiMockArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiMockArgs:
    def __init__(__self__, *,
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 response: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] authorizer_id: The ID of the backend custom authorization.
        :param pulumi.Input[_builtins.str] response: The response content of the mock.
        :param pulumi.Input[_builtins.int] status_code: The custom status code of the mock response.
        """
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The response content of the mock.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class ApiMockPolicyArgsDict(TypedDict):
        conditions: pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgsDict']]]
        """
        The policy conditions.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the backend custom authorization.
        """
        backend_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgsDict']]]]
        """
        The configuration list of backend parameters.
        """
        effective_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The effective mode of the backend policy.
        """
        response: NotRequired[pulumi.Input[_builtins.str]]
        """
        The response content of the mock.
        """
        status_code: NotRequired[pulumi.Input[_builtins.int]]
        """
        The custom status code of the mock response.
        """
elif False:
    ApiMockPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiMockPolicyArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgs']]],
                 name: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_params: Optional[pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgs']]]] = None,
                 effective_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 response: Optional[pulumi.Input[_builtins.str]] = None,
                 status_code: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgs']]] conditions: The policy conditions.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the API. An API name consists of 3–64 characters, starting with a
               letter. Only letters, digits, and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] authorizer_id: The ID of the backend custom authorization.
        :param pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgs']]] backend_params: The configuration list of backend parameters.
        :param pulumi.Input[_builtins.str] effective_mode: The effective mode of the backend policy.
        :param pulumi.Input[_builtins.str] response: The response content of the mock.
        :param pulumi.Input[_builtins.int] status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgs']]]:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgs']]]]:
        """
        The configuration list of backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @backend_params.setter
    def backend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiMockPolicyBackendParamArgs']]]]):
        pulumi.set(self, "backend_params", value)

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @effective_mode.setter
    def effective_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_mode", value)

    @_builtins.property
    @pulumi.getter
    def response(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The response content of the mock.
        """
        return pulumi.get(self, "response")

    @response.setter
    def response(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "response", value)

    @_builtins.property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "status_code", value)


if not MYPY:
    class ApiMockPolicyBackendParamArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Where the parameter is located.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        type: pulumi.Input[_builtins.str]
        """
        The parameter type.
        """
        value: pulumi.Input[_builtins.str]
        """
        The value of the parameter
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        system_param_type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ApiMockPolicyBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiMockPolicyBackendParamArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 system_param_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Where the parameter is located.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the API. An API name consists of 3–64 characters, starting with a
               letter. Only letters, digits, and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] type: The parameter type.
        :param pulumi.Input[_builtins.str] value: The value of the parameter
        :param pulumi.Input[_builtins.str] description: Specifies the description of the API. The description cannot exceed 255 characters.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_param_type")

    @system_param_type.setter
    def system_param_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_param_type", value)


if not MYPY:
    class ApiMockPolicyConditionArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        The value of the backend policy.
        """
        cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cookie parameter name.
        """
        frontend_authorizer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The frontend authentication parameter name.
        """
        mapped_param_location: NotRequired[pulumi.Input[_builtins.str]]
        """
        The location of a parameter generated after orchestration.
        """
        mapped_param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of a parameter generated after orchestration.
        """
        param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The request parameter name.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the backend policy.
        """
        sys_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The gateway built-in parameter name.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The condition type.
        """
elif False:
    ApiMockPolicyConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiMockPolicyConditionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frontend_authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_location: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 sys_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] value: The value of the backend policy.
        :param pulumi.Input[_builtins.str] cookie_name: The cookie parameter name.
        :param pulumi.Input[_builtins.str] frontend_authorizer_name: The frontend authentication parameter name.
        :param pulumi.Input[_builtins.str] mapped_param_location: The location of a parameter generated after orchestration.
        :param pulumi.Input[_builtins.str] mapped_param_name: The name of a parameter generated after orchestration.
        :param pulumi.Input[_builtins.str] param_name: The request parameter name.
        :param pulumi.Input[_builtins.str] source: The type of the backend policy.
        :param pulumi.Input[_builtins.str] sys_name: The gateway built-in parameter name.
        :param pulumi.Input[_builtins.str] type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @frontend_authorizer_name.setter
    def frontend_authorizer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frontend_authorizer_name", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @mapped_param_location.setter
    def mapped_param_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_location", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @mapped_param_name.setter
    def mapped_param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_name", value)

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "param_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @sys_name.setter
    def sys_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sys_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class ApiRequestParamArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        default: NotRequired[pulumi.Input[_builtins.str]]
        """
        The default value of the parameter.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        enumeration: NotRequired[pulumi.Input[_builtins.str]]
        """
        The enumerated value.
        """
        example: NotRequired[pulumi.Input[_builtins.str]]
        """
        The parameter example.
        """
        location: NotRequired[pulumi.Input[_builtins.str]]
        """
        Where this parameter is located.
        """
        maximum: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum value or length (string parameter) for parameter.
        """
        minimum: NotRequired[pulumi.Input[_builtins.int]]
        """
        The minimum value or length (string parameter) for parameter.
        """
        orchestrations: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The list of orchestration rules that parameter used.
        """
        passthrough: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to transparently transfer the parameter.
        """
        required: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether this parameter is required.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The parameter type.
        """
        valid_enable: NotRequired[pulumi.Input[_builtins.int]]
        """
        Whether to enable the parameter validation.
        """
elif False:
    ApiRequestParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiRequestParamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 default: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 enumeration: Optional[pulumi.Input[_builtins.str]] = None,
                 example: Optional[pulumi.Input[_builtins.str]] = None,
                 location: Optional[pulumi.Input[_builtins.str]] = None,
                 maximum: Optional[pulumi.Input[_builtins.int]] = None,
                 minimum: Optional[pulumi.Input[_builtins.int]] = None,
                 orchestrations: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 passthrough: Optional[pulumi.Input[_builtins.bool]] = None,
                 required: Optional[pulumi.Input[_builtins.bool]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 valid_enable: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the API. An API name consists of 3–64 characters, starting with a
               letter. Only letters, digits, and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] default: The default value of the parameter.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the API. The description cannot exceed 255 characters.
        :param pulumi.Input[_builtins.str] enumeration: The enumerated value.
        :param pulumi.Input[_builtins.str] example: The parameter example.
        :param pulumi.Input[_builtins.str] location: Where this parameter is located.
        :param pulumi.Input[_builtins.int] maximum: The maximum value or length (string parameter) for parameter.
        :param pulumi.Input[_builtins.int] minimum: The minimum value or length (string parameter) for parameter.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] orchestrations: The list of orchestration rules that parameter used.
        :param pulumi.Input[_builtins.bool] passthrough: Whether to transparently transfer the parameter.
        :param pulumi.Input[_builtins.bool] required: Whether this parameter is required.
        :param pulumi.Input[_builtins.str] type: The parameter type.
        :param pulumi.Input[_builtins.int] valid_enable: Whether to enable the parameter validation.
        """
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enumeration is not None:
            pulumi.set(__self__, "enumeration", enumeration)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if orchestrations is not None:
            pulumi.set(__self__, "orchestrations", orchestrations)
        if passthrough is not None:
            pulumi.set(__self__, "passthrough", passthrough)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_enable is not None:
            pulumi.set(__self__, "valid_enable", valid_enable)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "default", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def enumeration(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The enumerated value.
        """
        return pulumi.get(self, "enumeration")

    @enumeration.setter
    def enumeration(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enumeration", value)

    @_builtins.property
    @pulumi.getter
    def example(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The parameter example.
        """
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "example", value)

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Where this parameter is located.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "maximum", value)

    @_builtins.property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The minimum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "minimum", value)

    @_builtins.property
    @pulumi.getter
    def orchestrations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The list of orchestration rules that parameter used.
        """
        return pulumi.get(self, "orchestrations")

    @orchestrations.setter
    def orchestrations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "orchestrations", value)

    @_builtins.property
    @pulumi.getter
    def passthrough(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @passthrough.setter
    def passthrough(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "passthrough", value)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether this parameter is required.
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "required", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        Whether to enable the parameter validation.
        """
        return pulumi.get(self, "valid_enable")

    @valid_enable.setter
    def valid_enable(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "valid_enable", value)


if not MYPY:
    class ApiWebArgsDict(TypedDict):
        path: pulumi.Input[_builtins.str]
        """
        The backend request path.
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the backend custom authorization.
        """
        backend_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The backend service address, which consists of a domain name or IP address, and a port number.
        """
        host_header: NotRequired[pulumi.Input[_builtins.str]]
        """
        The proxy host header.
        """
        request_method: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request method, including 'GET','POST','PUT' and etc..
        """
        request_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
        which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        """
        retry_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of retry attempts to request the backend service.
        """
        ssl_enable: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to enable two-way authentication.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        The timeout for API requests to backend service.
        """
        vpc_channel_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The VPC channel ID.
        """
elif False:
    ApiWebArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiWebArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_address: Optional[pulumi.Input[_builtins.str]] = None,
                 host_header: Optional[pulumi.Input[_builtins.str]] = None,
                 request_method: Optional[pulumi.Input[_builtins.str]] = None,
                 request_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_count: Optional[pulumi.Input[_builtins.int]] = None,
                 ssl_enable: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_channel_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] path: The backend request path.
        :param pulumi.Input[_builtins.str] authorizer_id: The ID of the backend custom authorization.
        :param pulumi.Input[_builtins.str] backend_address: The backend service address, which consists of a domain name or IP address, and a port number.
        :param pulumi.Input[_builtins.str] host_header: The proxy host header.
        :param pulumi.Input[_builtins.str] request_method: Specifies the request method, including 'GET','POST','PUT' and etc..
        :param pulumi.Input[_builtins.str] request_protocol: Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
               which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        :param pulumi.Input[_builtins.int] retry_count: The number of retry attempts to request the backend service.
        :param pulumi.Input[_builtins.bool] ssl_enable: Whether to enable two-way authentication.
        :param pulumi.Input[_builtins.int] timeout: The timeout for API requests to backend service.
        :param pulumi.Input[_builtins.str] vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "path", path)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if ssl_enable is not None:
            pulumi.set(__self__, "ssl_enable", ssl_enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        The backend request path.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backend service address, which consists of a domain name or IP address, and a port number.
        """
        return pulumi.get(self, "backend_address")

    @backend_address.setter
    def backend_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_address", value)

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_header", value)

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request method, including 'GET','POST','PUT' and etc..
        """
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_method", value)

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
        which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        """
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_protocol", value)

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_count", value)

    @_builtins.property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "ssl_enable")

    @ssl_enable.setter
    def ssl_enable(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "ssl_enable", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")

    @vpc_channel_id.setter
    def vpc_channel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_channel_id", value)


if not MYPY:
    class ApiWebPolicyArgsDict(TypedDict):
        conditions: pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgsDict']]]
        """
        The policy conditions.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        path: pulumi.Input[_builtins.str]
        """
        The backend request address.
        """
        request_method: pulumi.Input[_builtins.str]
        """
        Specifies the request method, including 'GET','POST','PUT' and etc..
        """
        authorizer_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the backend custom authorization.
        """
        backend_address: NotRequired[pulumi.Input[_builtins.str]]
        """
        The backend service address
        """
        backend_params: NotRequired[pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgsDict']]]]
        """
        The configuration list of the backend parameters.
        """
        effective_mode: NotRequired[pulumi.Input[_builtins.str]]
        """
        The effective mode of the backend policy.
        """
        host_header: NotRequired[pulumi.Input[_builtins.str]]
        """
        The proxy host header.
        """
        request_protocol: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
        which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        """
        retry_count: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of retry attempts to request the backend service.
        """
        timeout: NotRequired[pulumi.Input[_builtins.int]]
        """
        The timeout for API requests to backend service.
        """
        vpc_channel_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The VPC channel ID.
        """
elif False:
    ApiWebPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiWebPolicyArgs:
    def __init__(__self__, *,
                 conditions: pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgs']]],
                 name: pulumi.Input[_builtins.str],
                 path: pulumi.Input[_builtins.str],
                 request_method: pulumi.Input[_builtins.str],
                 authorizer_id: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_address: Optional[pulumi.Input[_builtins.str]] = None,
                 backend_params: Optional[pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgs']]]] = None,
                 effective_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 host_header: Optional[pulumi.Input[_builtins.str]] = None,
                 request_protocol: Optional[pulumi.Input[_builtins.str]] = None,
                 retry_count: Optional[pulumi.Input[_builtins.int]] = None,
                 timeout: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_channel_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgs']]] conditions: The policy conditions.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the API. An API name consists of 3–64 characters, starting with a
               letter. Only letters, digits, and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] path: The backend request address.
        :param pulumi.Input[_builtins.str] request_method: Specifies the request method, including 'GET','POST','PUT' and etc..
        :param pulumi.Input[_builtins.str] authorizer_id: The ID of the backend custom authorization.
        :param pulumi.Input[_builtins.str] backend_address: The backend service address
        :param pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgs']]] backend_params: The configuration list of the backend parameters.
        :param pulumi.Input[_builtins.str] effective_mode: The effective mode of the backend policy.
        :param pulumi.Input[_builtins.str] host_header: The proxy host header.
        :param pulumi.Input[_builtins.str] request_protocol: Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
               which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        :param pulumi.Input[_builtins.int] retry_count: The number of retry attempts to request the backend service.
        :param pulumi.Input[_builtins.int] timeout: The timeout for API requests to backend service.
        :param pulumi.Input[_builtins.str] vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @_builtins.property
    @pulumi.getter
    def conditions(self) -> pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgs']]]:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyConditionArgs']]]):
        pulumi.set(self, "conditions", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Input[_builtins.str]:
        """
        The backend request address.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the request method, including 'GET','POST','PUT' and etc..
        """
        return pulumi.get(self, "request_method")

    @request_method.setter
    def request_method(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "request_method", value)

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @authorizer_id.setter
    def authorizer_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "authorizer_id", value)

    @_builtins.property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The backend service address
        """
        return pulumi.get(self, "backend_address")

    @backend_address.setter
    def backend_address(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "backend_address", value)

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgs']]]]:
        """
        The configuration list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @backend_params.setter
    def backend_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiWebPolicyBackendParamArgs']]]]):
        pulumi.set(self, "backend_params", value)

    @_builtins.property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @effective_mode.setter
    def effective_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "effective_mode", value)

    @_builtins.property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @host_header.setter
    def host_header(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_header", value)

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
        which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
        """
        return pulumi.get(self, "request_protocol")

    @request_protocol.setter
    def request_protocol(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_protocol", value)

    @_builtins.property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retry_count", value)

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "timeout", value)

    @_builtins.property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")

    @vpc_channel_id.setter
    def vpc_channel_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_channel_id", value)


if not MYPY:
    class ApiWebPolicyBackendParamArgsDict(TypedDict):
        location: pulumi.Input[_builtins.str]
        """
        Where the parameter is located.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        type: pulumi.Input[_builtins.str]
        """
        The parameter type.
        """
        value: pulumi.Input[_builtins.str]
        """
        The value of the parameter
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        system_param_type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ApiWebPolicyBackendParamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiWebPolicyBackendParamArgs:
    def __init__(__self__, *,
                 location: pulumi.Input[_builtins.str],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 system_param_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] location: Where the parameter is located.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the API. An API name consists of 3–64 characters, starting with a
               letter. Only letters, digits, and underscores (_) are allowed.
        :param pulumi.Input[_builtins.str] type: The parameter type.
        :param pulumi.Input[_builtins.str] value: The value of the parameter
        :param pulumi.Input[_builtins.str] description: Specifies the description of the API. The description cannot exceed 255 characters.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Input[_builtins.str]:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "location", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the API. An API name consists of 3–64 characters, starting with a
        letter. Only letters, digits, and underscores (_) are allowed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the API. The description cannot exceed 255 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "system_param_type")

    @system_param_type.setter
    def system_param_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "system_param_type", value)


if not MYPY:
    class ApiWebPolicyConditionArgsDict(TypedDict):
        value: pulumi.Input[_builtins.str]
        """
        The value of the backend policy.
        """
        cookie_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The cookie parameter name.
        """
        frontend_authorizer_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The frontend authentication parameter name.
        """
        mapped_param_location: NotRequired[pulumi.Input[_builtins.str]]
        """
        The location of a parameter generated after orchestration.
        """
        mapped_param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The name of a parameter generated after orchestration.
        """
        param_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The request parameter name.
        """
        source: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of the backend policy.
        """
        sys_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The gateway built-in parameter name.
        """
        type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The condition type.
        """
elif False:
    ApiWebPolicyConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApiWebPolicyConditionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[_builtins.str],
                 cookie_name: Optional[pulumi.Input[_builtins.str]] = None,
                 frontend_authorizer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_location: Optional[pulumi.Input[_builtins.str]] = None,
                 mapped_param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 param_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source: Optional[pulumi.Input[_builtins.str]] = None,
                 sys_name: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] value: The value of the backend policy.
        :param pulumi.Input[_builtins.str] cookie_name: The cookie parameter name.
        :param pulumi.Input[_builtins.str] frontend_authorizer_name: The frontend authentication parameter name.
        :param pulumi.Input[_builtins.str] mapped_param_location: The location of a parameter generated after orchestration.
        :param pulumi.Input[_builtins.str] mapped_param_name: The name of a parameter generated after orchestration.
        :param pulumi.Input[_builtins.str] param_name: The request parameter name.
        :param pulumi.Input[_builtins.str] source: The type of the backend policy.
        :param pulumi.Input[_builtins.str] sys_name: The gateway built-in parameter name.
        :param pulumi.Input[_builtins.str] type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cookie_name", value)

    @_builtins.property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @frontend_authorizer_name.setter
    def frontend_authorizer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "frontend_authorizer_name", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @mapped_param_location.setter
    def mapped_param_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_location", value)

    @_builtins.property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @mapped_param_name.setter
    def mapped_param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "mapped_param_name", value)

    @_builtins.property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "param_name", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source", value)

    @_builtins.property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @sys_name.setter
    def sys_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "sys_name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class GroupEnvironmentArgsDict(TypedDict):
        environment_id: pulumi.Input[_builtins.str]
        """
        The ID of the environment to which the variables belongs.
        """
        variables: pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgsDict']]]
        """
        The array of one or more environment variables. Each `variable` block supports the following:
        """
elif False:
    GroupEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupEnvironmentArgs:
    def __init__(__self__, *,
                 environment_id: pulumi.Input[_builtins.str],
                 variables: pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgs']]]):
        """
        :param pulumi.Input[_builtins.str] environment_id: The ID of the environment to which the variables belongs.
        :param pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgs']]] variables: The array of one or more environment variables. Each `variable` block supports the following:
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the environment to which the variables belongs.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "environment_id", value)

    @_builtins.property
    @pulumi.getter
    def variables(self) -> pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgs']]]:
        """
        The array of one or more environment variables. Each `variable` block supports the following:
        """
        return pulumi.get(self, "variables")

    @variables.setter
    def variables(self, value: pulumi.Input[Sequence[pulumi.Input['GroupEnvironmentVariableArgs']]]):
        pulumi.set(self, "variables", value)


if not MYPY:
    class GroupEnvironmentVariableArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The variable name.
        """
        value: pulumi.Input[_builtins.str]
        """
        The variable value.
        """
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the variable that the group has.
        """
        variable_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the variable that the group has.  
        _Deprecated: Use `id` instead._
        """
elif False:
    GroupEnvironmentVariableArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupEnvironmentVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 value: pulumi.Input[_builtins.str],
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 variable_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The variable name.
        :param pulumi.Input[_builtins.str] value: The variable value.
        :param pulumi.Input[_builtins.str] id: The ID of the variable that the group has.
        :param pulumi.Input[_builtins.str] variable_id: The ID of the variable that the group has.  
               _Deprecated: Use `id` instead._
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variable_id is not None:
            warnings.warn("""Use 'id' instead""", DeprecationWarning)
            pulumi.log.warn("""variable_id is deprecated: Use 'id' instead""")
        if variable_id is not None:
            pulumi.set(__self__, "variable_id", variable_id)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The variable name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[_builtins.str]:
        """
        The variable value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "value", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the variable that the group has.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="variableId")
    @_utilities.deprecated("""Use 'id' instead""")
    def variable_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the variable that the group has.  
        _Deprecated: Use `id` instead._
        """
        return pulumi.get(self, "variable_id")

    @variable_id.setter
    def variable_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "variable_id", value)


if not MYPY:
    class GroupUrlDomainArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        The group name.
        """
        is_http_redirect_to_https: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to enable redirection from HTTP to HTTPS.
        """
        min_ssl_version: NotRequired[pulumi.Input[_builtins.str]]
        """
        The minimum SSL protocol version.
        """
elif False:
    GroupUrlDomainArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GroupUrlDomainArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 is_http_redirect_to_https: Optional[pulumi.Input[_builtins.bool]] = None,
                 min_ssl_version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: The group name.
        :param pulumi.Input[_builtins.bool] is_http_redirect_to_https: Whether to enable redirection from HTTP to HTTPS.
        :param pulumi.Input[_builtins.str] min_ssl_version: The minimum SSL protocol version.
        """
        pulumi.set(__self__, "name", name)
        if is_http_redirect_to_https is not None:
            pulumi.set(__self__, "is_http_redirect_to_https", is_http_redirect_to_https)
        if min_ssl_version is not None:
            pulumi.set(__self__, "min_ssl_version", min_ssl_version)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The group name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="isHttpRedirectToHttps")
    def is_http_redirect_to_https(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable redirection from HTTP to HTTPS.
        """
        return pulumi.get(self, "is_http_redirect_to_https")

    @is_http_redirect_to_https.setter
    def is_http_redirect_to_https(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_http_redirect_to_https", value)

    @_builtins.property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The minimum SSL protocol version.
        """
        return pulumi.get(self, "min_ssl_version")

    @min_ssl_version.setter
    def min_ssl_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "min_ssl_version", value)



// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Node extends pulumi.CustomResource {
    /**
     * Get an existing Node resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeState, opts?: pulumi.CustomResourceOptions): Node {
        return new Node(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cce/node:Node';

    /**
     * Returns true if the given object is an instance of Node.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Node {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Node.__pulumiType;
    }

    /**
     * schema: Internal
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public readonly bandwidthChargeMode: pulumi.Output<string | undefined>;
    declare public readonly bandwidthSize: pulumi.Output<number | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    declare public readonly billingMode: pulumi.Output<number>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public readonly clusterId: pulumi.Output<string>;
    declare public readonly dataVolumes: pulumi.Output<outputs.Cce.NodeDataVolume[]>;
    declare public readonly dedicatedHostId: pulumi.Output<string | undefined>;
    declare public readonly ecsGroupId: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    declare public readonly ecsPerformanceType: pulumi.Output<string | undefined>;
    declare public readonly eipId: pulumi.Output<string | undefined>;
    /**
     * @deprecated use eipId instead
     */
    declare public readonly eipIds: pulumi.Output<string[] | undefined>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    declare public readonly extendParam: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    declare public readonly extendParamChargingMode: pulumi.Output<number | undefined>;
    declare public readonly extendParams: pulumi.Output<outputs.Cce.NodeExtendParams | undefined>;
    declare public readonly extensionNics: pulumi.Output<outputs.Cce.NodeExtensionNic[] | undefined>;
    declare public readonly fixedIp: pulumi.Output<string | undefined>;
    declare public readonly flavorId: pulumi.Output<string>;
    declare public readonly hostnameConfig: pulumi.Output<outputs.Cce.NodeHostnameConfig>;
    declare public readonly initializedConditions: pulumi.Output<string[]>;
    declare public readonly iptype: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    declare public readonly keepEcs: pulumi.Output<boolean | undefined>;
    declare public readonly keyPair: pulumi.Output<string | undefined>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * schema: Deprecated
     */
    declare public readonly maxPods: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    declare public readonly orderId: pulumi.Output<string | undefined>;
    declare public readonly os: pulumi.Output<string>;
    declare public readonly partition: pulumi.Output<string | undefined>;
    declare public readonly password: pulumi.Output<string | undefined>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    declare public readonly postinstall: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    declare public readonly preinstall: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly privateIp: pulumi.Output<string>;
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated
     */
    declare public readonly productId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly publicIp: pulumi.Output<string>;
    /**
     * schema: Deprecated
     */
    declare public readonly publicKey: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly rootVolume: pulumi.Output<outputs.Cce.NodeRootVolume>;
    declare public readonly runtime: pulumi.Output<string>;
    declare public /*out*/ readonly serverId: pulumi.Output<string>;
    declare public readonly sharetype: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly storage: pulumi.Output<outputs.Cce.NodeStorage | undefined>;
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly taints: pulumi.Output<outputs.Cce.NodeTaint[] | undefined>;

    /**
     * Create a Node resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeArgs | NodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeState | undefined;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["bandwidthChargeMode"] = state?.bandwidthChargeMode;
            resourceInputs["bandwidthSize"] = state?.bandwidthSize;
            resourceInputs["billingMode"] = state?.billingMode;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["dataVolumes"] = state?.dataVolumes;
            resourceInputs["dedicatedHostId"] = state?.dedicatedHostId;
            resourceInputs["ecsGroupId"] = state?.ecsGroupId;
            resourceInputs["ecsPerformanceType"] = state?.ecsPerformanceType;
            resourceInputs["eipId"] = state?.eipId;
            resourceInputs["eipIds"] = state?.eipIds;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["extendParam"] = state?.extendParam;
            resourceInputs["extendParamChargingMode"] = state?.extendParamChargingMode;
            resourceInputs["extendParams"] = state?.extendParams;
            resourceInputs["extensionNics"] = state?.extensionNics;
            resourceInputs["fixedIp"] = state?.fixedIp;
            resourceInputs["flavorId"] = state?.flavorId;
            resourceInputs["hostnameConfig"] = state?.hostnameConfig;
            resourceInputs["initializedConditions"] = state?.initializedConditions;
            resourceInputs["iptype"] = state?.iptype;
            resourceInputs["keepEcs"] = state?.keepEcs;
            resourceInputs["keyPair"] = state?.keyPair;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["maxPods"] = state?.maxPods;
            resourceInputs["name"] = state?.name;
            resourceInputs["orderId"] = state?.orderId;
            resourceInputs["os"] = state?.os;
            resourceInputs["partition"] = state?.partition;
            resourceInputs["password"] = state?.password;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["postinstall"] = state?.postinstall;
            resourceInputs["preinstall"] = state?.preinstall;
            resourceInputs["privateIp"] = state?.privateIp;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["productId"] = state?.productId;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["publicKey"] = state?.publicKey;
            resourceInputs["region"] = state?.region;
            resourceInputs["rootVolume"] = state?.rootVolume;
            resourceInputs["runtime"] = state?.runtime;
            resourceInputs["serverId"] = state?.serverId;
            resourceInputs["sharetype"] = state?.sharetype;
            resourceInputs["status"] = state?.status;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["taints"] = state?.taints;
        } else {
            const args = argsOrState as NodeArgs | undefined;
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.flavorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if (args?.rootVolume === undefined && !opts.urn) {
                throw new Error("Missing required property 'rootVolume'");
            }
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["bandwidthChargeMode"] = args?.bandwidthChargeMode;
            resourceInputs["bandwidthSize"] = args?.bandwidthSize;
            resourceInputs["billingMode"] = args?.billingMode;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["dataVolumes"] = args?.dataVolumes;
            resourceInputs["dedicatedHostId"] = args?.dedicatedHostId;
            resourceInputs["ecsGroupId"] = args?.ecsGroupId;
            resourceInputs["ecsPerformanceType"] = args?.ecsPerformanceType;
            resourceInputs["eipId"] = args?.eipId;
            resourceInputs["eipIds"] = args?.eipIds;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["extendParam"] = args?.extendParam;
            resourceInputs["extendParamChargingMode"] = args?.extendParamChargingMode;
            resourceInputs["extendParams"] = args?.extendParams;
            resourceInputs["extensionNics"] = args?.extensionNics;
            resourceInputs["fixedIp"] = args?.fixedIp;
            resourceInputs["flavorId"] = args?.flavorId;
            resourceInputs["hostnameConfig"] = args?.hostnameConfig;
            resourceInputs["initializedConditions"] = args?.initializedConditions;
            resourceInputs["iptype"] = args?.iptype;
            resourceInputs["keepEcs"] = args?.keepEcs;
            resourceInputs["keyPair"] = args?.keyPair;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["maxPods"] = args?.maxPods;
            resourceInputs["name"] = args?.name;
            resourceInputs["orderId"] = args?.orderId;
            resourceInputs["os"] = args?.os;
            resourceInputs["partition"] = args?.partition;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["postinstall"] = args?.postinstall;
            resourceInputs["preinstall"] = args?.preinstall;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["productId"] = args?.productId;
            resourceInputs["publicKey"] = args?.publicKey;
            resourceInputs["region"] = args?.region;
            resourceInputs["rootVolume"] = args?.rootVolume;
            resourceInputs["runtime"] = args?.runtime;
            resourceInputs["sharetype"] = args?.sharetype;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["taints"] = args?.taints;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Node.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Node resources.
 */
export interface NodeState {
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    bandwidthChargeMode?: pulumi.Input<string>;
    bandwidthSize?: pulumi.Input<number>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodeDataVolume>[]>;
    dedicatedHostId?: pulumi.Input<string>;
    ecsGroupId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    ecsPerformanceType?: pulumi.Input<string>;
    eipId?: pulumi.Input<string>;
    /**
     * @deprecated use eipId instead
     */
    eipIds?: pulumi.Input<pulumi.Input<string>[]>;
    enableForceNew?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated use chargingMode instead
     */
    extendParamChargingMode?: pulumi.Input<number>;
    extendParams?: pulumi.Input<inputs.Cce.NodeExtendParams>;
    extensionNics?: pulumi.Input<pulumi.Input<inputs.Cce.NodeExtensionNic>[]>;
    fixedIp?: pulumi.Input<string>;
    flavorId?: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.Cce.NodeHostnameConfig>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    iptype?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    keepEcs?: pulumi.Input<boolean>;
    keyPair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * schema: Deprecated
     */
    maxPods?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    orderId?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    partition?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    postinstall?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    preinstall?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    productId?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    publicKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rootVolume?: pulumi.Input<inputs.Cce.NodeRootVolume>;
    runtime?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    sharetype?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.Cce.NodeStorage>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodeTaint>[]>;
}

/**
 * The set of arguments for constructing a Node resource.
 */
export interface NodeArgs {
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    bandwidthChargeMode?: pulumi.Input<string>;
    bandwidthSize?: pulumi.Input<number>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    clusterId: pulumi.Input<string>;
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodeDataVolume>[]>;
    dedicatedHostId?: pulumi.Input<string>;
    ecsGroupId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    ecsPerformanceType?: pulumi.Input<string>;
    eipId?: pulumi.Input<string>;
    /**
     * @deprecated use eipId instead
     */
    eipIds?: pulumi.Input<pulumi.Input<string>[]>;
    enableForceNew?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated use chargingMode instead
     */
    extendParamChargingMode?: pulumi.Input<number>;
    extendParams?: pulumi.Input<inputs.Cce.NodeExtendParams>;
    extensionNics?: pulumi.Input<pulumi.Input<inputs.Cce.NodeExtensionNic>[]>;
    fixedIp?: pulumi.Input<string>;
    flavorId: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.Cce.NodeHostnameConfig>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    iptype?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    keepEcs?: pulumi.Input<boolean>;
    keyPair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * schema: Deprecated
     */
    maxPods?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * @deprecated will be removed after v1.26.0
     */
    orderId?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    partition?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    postinstall?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    preinstall?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    productId?: pulumi.Input<string>;
    /**
     * schema: Deprecated
     */
    publicKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rootVolume: pulumi.Input<inputs.Cce.NodeRootVolume>;
    runtime?: pulumi.Input<string>;
    sharetype?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.Cce.NodeStorage>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodeTaint>[]>;
}

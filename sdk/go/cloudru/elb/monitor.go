// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Monitor struct {
	pulumi.CustomResourceState

	// Deprecated: tenant_id is deprecated
	AdminStateUp  pulumi.BoolPtrOutput `pulumi:"adminStateUp"`
	Delay         pulumi.IntOutput     `pulumi:"delay"`
	DomainName    pulumi.StringOutput  `pulumi:"domainName"`
	ExpectedCodes pulumi.StringOutput  `pulumi:"expectedCodes"`
	HttpMethod    pulumi.StringOutput  `pulumi:"httpMethod"`
	MaxRetries    pulumi.IntOutput     `pulumi:"maxRetries"`
	Name          pulumi.StringOutput  `pulumi:"name"`
	PoolId        pulumi.StringOutput  `pulumi:"poolId"`
	Port          pulumi.IntPtrOutput  `pulumi:"port"`
	Region        pulumi.StringOutput  `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	Timeout  pulumi.IntOutput    `pulumi:"timeout"`
	Type     pulumi.StringOutput `pulumi:"type"`
	UrlPath  pulumi.StringOutput `pulumi:"urlPath"`
}

// NewMonitor registers a new resource with the given unique name, arguments, and options.
func NewMonitor(ctx *pulumi.Context,
	name string, args *MonitorArgs, opts ...pulumi.ResourceOption) (*Monitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Delay == nil {
		return nil, errors.New("invalid value for required argument 'Delay'")
	}
	if args.MaxRetries == nil {
		return nil, errors.New("invalid value for required argument 'MaxRetries'")
	}
	if args.PoolId == nil {
		return nil, errors.New("invalid value for required argument 'PoolId'")
	}
	if args.Timeout == nil {
		return nil, errors.New("invalid value for required argument 'Timeout'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Monitor
	err := ctx.RegisterResource("cloudru:Elb/monitor:Monitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitor gets an existing Monitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitorState, opts ...pulumi.ResourceOption) (*Monitor, error) {
	var resource Monitor
	err := ctx.ReadResource("cloudru:Elb/monitor:Monitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Monitor resources.
type monitorState struct {
	// Deprecated: tenant_id is deprecated
	AdminStateUp  *bool   `pulumi:"adminStateUp"`
	Delay         *int    `pulumi:"delay"`
	DomainName    *string `pulumi:"domainName"`
	ExpectedCodes *string `pulumi:"expectedCodes"`
	HttpMethod    *string `pulumi:"httpMethod"`
	MaxRetries    *int    `pulumi:"maxRetries"`
	Name          *string `pulumi:"name"`
	PoolId        *string `pulumi:"poolId"`
	Port          *int    `pulumi:"port"`
	Region        *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	Timeout  *int    `pulumi:"timeout"`
	Type     *string `pulumi:"type"`
	UrlPath  *string `pulumi:"urlPath"`
}

type MonitorState struct {
	// Deprecated: tenant_id is deprecated
	AdminStateUp  pulumi.BoolPtrInput
	Delay         pulumi.IntPtrInput
	DomainName    pulumi.StringPtrInput
	ExpectedCodes pulumi.StringPtrInput
	HttpMethod    pulumi.StringPtrInput
	MaxRetries    pulumi.IntPtrInput
	Name          pulumi.StringPtrInput
	PoolId        pulumi.StringPtrInput
	Port          pulumi.IntPtrInput
	Region        pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	Timeout  pulumi.IntPtrInput
	Type     pulumi.StringPtrInput
	UrlPath  pulumi.StringPtrInput
}

func (MonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorState)(nil)).Elem()
}

type monitorArgs struct {
	// Deprecated: tenant_id is deprecated
	AdminStateUp  *bool   `pulumi:"adminStateUp"`
	Delay         int     `pulumi:"delay"`
	DomainName    *string `pulumi:"domainName"`
	ExpectedCodes *string `pulumi:"expectedCodes"`
	HttpMethod    *string `pulumi:"httpMethod"`
	MaxRetries    int     `pulumi:"maxRetries"`
	Name          *string `pulumi:"name"`
	PoolId        string  `pulumi:"poolId"`
	Port          *int    `pulumi:"port"`
	Region        *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	Timeout  int     `pulumi:"timeout"`
	Type     string  `pulumi:"type"`
	UrlPath  *string `pulumi:"urlPath"`
}

// The set of arguments for constructing a Monitor resource.
type MonitorArgs struct {
	// Deprecated: tenant_id is deprecated
	AdminStateUp  pulumi.BoolPtrInput
	Delay         pulumi.IntInput
	DomainName    pulumi.StringPtrInput
	ExpectedCodes pulumi.StringPtrInput
	HttpMethod    pulumi.StringPtrInput
	MaxRetries    pulumi.IntInput
	Name          pulumi.StringPtrInput
	PoolId        pulumi.StringInput
	Port          pulumi.IntPtrInput
	Region        pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	Timeout  pulumi.IntInput
	Type     pulumi.StringInput
	UrlPath  pulumi.StringPtrInput
}

func (MonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitorArgs)(nil)).Elem()
}

type MonitorInput interface {
	pulumi.Input

	ToMonitorOutput() MonitorOutput
	ToMonitorOutputWithContext(ctx context.Context) MonitorOutput
}

func (*Monitor) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (i *Monitor) ToMonitorOutput() MonitorOutput {
	return i.ToMonitorOutputWithContext(context.Background())
}

func (i *Monitor) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorOutput)
}

// MonitorArrayInput is an input type that accepts MonitorArray and MonitorArrayOutput values.
// You can construct a concrete instance of `MonitorArrayInput` via:
//
//	MonitorArray{ MonitorArgs{...} }
type MonitorArrayInput interface {
	pulumi.Input

	ToMonitorArrayOutput() MonitorArrayOutput
	ToMonitorArrayOutputWithContext(context.Context) MonitorArrayOutput
}

type MonitorArray []MonitorInput

func (MonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (i MonitorArray) ToMonitorArrayOutput() MonitorArrayOutput {
	return i.ToMonitorArrayOutputWithContext(context.Background())
}

func (i MonitorArray) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorArrayOutput)
}

// MonitorMapInput is an input type that accepts MonitorMap and MonitorMapOutput values.
// You can construct a concrete instance of `MonitorMapInput` via:
//
//	MonitorMap{ "key": MonitorArgs{...} }
type MonitorMapInput interface {
	pulumi.Input

	ToMonitorMapOutput() MonitorMapOutput
	ToMonitorMapOutputWithContext(context.Context) MonitorMapOutput
}

type MonitorMap map[string]MonitorInput

func (MonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (i MonitorMap) ToMonitorMapOutput() MonitorMapOutput {
	return i.ToMonitorMapOutputWithContext(context.Background())
}

func (i MonitorMap) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitorMapOutput)
}

type MonitorOutput struct{ *pulumi.OutputState }

func (MonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Monitor)(nil)).Elem()
}

func (o MonitorOutput) ToMonitorOutput() MonitorOutput {
	return o
}

func (o MonitorOutput) ToMonitorOutputWithContext(ctx context.Context) MonitorOutput {
	return o
}

// Deprecated: tenant_id is deprecated
func (o MonitorOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o MonitorOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.Delay }).(pulumi.IntOutput)
}

func (o MonitorOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

func (o MonitorOutput) ExpectedCodes() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.ExpectedCodes }).(pulumi.StringOutput)
}

func (o MonitorOutput) HttpMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.HttpMethod }).(pulumi.StringOutput)
}

func (o MonitorOutput) MaxRetries() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.MaxRetries }).(pulumi.IntOutput)
}

func (o MonitorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MonitorOutput) PoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.PoolId }).(pulumi.StringOutput)
}

func (o MonitorOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

func (o MonitorOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o MonitorOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o MonitorOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Monitor) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

func (o MonitorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o MonitorOutput) UrlPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Monitor) pulumi.StringOutput { return v.UrlPath }).(pulumi.StringOutput)
}

type MonitorArrayOutput struct{ *pulumi.OutputState }

func (MonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Monitor)(nil)).Elem()
}

func (o MonitorArrayOutput) ToMonitorArrayOutput() MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) ToMonitorArrayOutputWithContext(ctx context.Context) MonitorArrayOutput {
	return o
}

func (o MonitorArrayOutput) Index(i pulumi.IntInput) MonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].([]*Monitor)[vs[1].(int)]
	}).(MonitorOutput)
}

type MonitorMapOutput struct{ *pulumi.OutputState }

func (MonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Monitor)(nil)).Elem()
}

func (o MonitorMapOutput) ToMonitorMapOutput() MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) ToMonitorMapOutputWithContext(ctx context.Context) MonitorMapOutput {
	return o
}

func (o MonitorMapOutput) MapIndex(k pulumi.StringInput) MonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Monitor {
		return vs[0].(map[string]*Monitor)[vs[1].(string)]
	}).(MonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorInput)(nil)).Elem(), &Monitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorArrayInput)(nil)).Elem(), MonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MonitorMapInput)(nil)).Elem(), MonitorMap{})
	pulumi.RegisterOutputType(MonitorOutput{})
	pulumi.RegisterOutputType(MonitorArrayOutput{})
	pulumi.RegisterOutputType(MonitorMapOutput{})
}

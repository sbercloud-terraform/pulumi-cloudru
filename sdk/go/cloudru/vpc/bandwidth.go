// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Bandwidth struct {
	pulumi.CustomResourceState

	AutoRenew           pulumi.StringPtrOutput       `pulumi:"autoRenew"`
	BandwidthType       pulumi.StringOutput          `pulumi:"bandwidthType"`
	ChargeMode          pulumi.StringOutput          `pulumi:"chargeMode"`
	ChargingMode        pulumi.StringOutput          `pulumi:"chargingMode"`
	CreatedAt           pulumi.StringOutput          `pulumi:"createdAt"`
	EnterpriseProjectId pulumi.StringOutput          `pulumi:"enterpriseProjectId"`
	Name                pulumi.StringOutput          `pulumi:"name"`
	Period              pulumi.IntPtrOutput          `pulumi:"period"`
	PeriodUnit          pulumi.StringPtrOutput       `pulumi:"periodUnit"`
	PublicBorderGroup   pulumi.StringOutput          `pulumi:"publicBorderGroup"`
	Publicips           BandwidthPublicipArrayOutput `pulumi:"publicips"`
	Region              pulumi.StringOutput          `pulumi:"region"`
	ShareType           pulumi.StringOutput          `pulumi:"shareType"`
	Size                pulumi.IntOutput             `pulumi:"size"`
	Status              pulumi.StringOutput          `pulumi:"status"`
	UpdatedAt           pulumi.StringOutput          `pulumi:"updatedAt"`
}

// NewBandwidth registers a new resource with the given unique name, arguments, and options.
func NewBandwidth(ctx *pulumi.Context,
	name string, args *BandwidthArgs, opts ...pulumi.ResourceOption) (*Bandwidth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bandwidth
	err := ctx.RegisterResource("cloudru:Vpc/bandwidth:Bandwidth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBandwidth gets an existing Bandwidth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBandwidth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BandwidthState, opts ...pulumi.ResourceOption) (*Bandwidth, error) {
	var resource Bandwidth
	err := ctx.ReadResource("cloudru:Vpc/bandwidth:Bandwidth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bandwidth resources.
type bandwidthState struct {
	AutoRenew           *string             `pulumi:"autoRenew"`
	BandwidthType       *string             `pulumi:"bandwidthType"`
	ChargeMode          *string             `pulumi:"chargeMode"`
	ChargingMode        *string             `pulumi:"chargingMode"`
	CreatedAt           *string             `pulumi:"createdAt"`
	EnterpriseProjectId *string             `pulumi:"enterpriseProjectId"`
	Name                *string             `pulumi:"name"`
	Period              *int                `pulumi:"period"`
	PeriodUnit          *string             `pulumi:"periodUnit"`
	PublicBorderGroup   *string             `pulumi:"publicBorderGroup"`
	Publicips           []BandwidthPublicip `pulumi:"publicips"`
	Region              *string             `pulumi:"region"`
	ShareType           *string             `pulumi:"shareType"`
	Size                *int                `pulumi:"size"`
	Status              *string             `pulumi:"status"`
	UpdatedAt           *string             `pulumi:"updatedAt"`
}

type BandwidthState struct {
	AutoRenew           pulumi.StringPtrInput
	BandwidthType       pulumi.StringPtrInput
	ChargeMode          pulumi.StringPtrInput
	ChargingMode        pulumi.StringPtrInput
	CreatedAt           pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Period              pulumi.IntPtrInput
	PeriodUnit          pulumi.StringPtrInput
	PublicBorderGroup   pulumi.StringPtrInput
	Publicips           BandwidthPublicipArrayInput
	Region              pulumi.StringPtrInput
	ShareType           pulumi.StringPtrInput
	Size                pulumi.IntPtrInput
	Status              pulumi.StringPtrInput
	UpdatedAt           pulumi.StringPtrInput
}

func (BandwidthState) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthState)(nil)).Elem()
}

type bandwidthArgs struct {
	AutoRenew           *string `pulumi:"autoRenew"`
	BandwidthType       *string `pulumi:"bandwidthType"`
	ChargeMode          *string `pulumi:"chargeMode"`
	ChargingMode        *string `pulumi:"chargingMode"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	Name                *string `pulumi:"name"`
	Period              *int    `pulumi:"period"`
	PeriodUnit          *string `pulumi:"periodUnit"`
	PublicBorderGroup   *string `pulumi:"publicBorderGroup"`
	Region              *string `pulumi:"region"`
	Size                int     `pulumi:"size"`
}

// The set of arguments for constructing a Bandwidth resource.
type BandwidthArgs struct {
	AutoRenew           pulumi.StringPtrInput
	BandwidthType       pulumi.StringPtrInput
	ChargeMode          pulumi.StringPtrInput
	ChargingMode        pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Period              pulumi.IntPtrInput
	PeriodUnit          pulumi.StringPtrInput
	PublicBorderGroup   pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	Size                pulumi.IntInput
}

func (BandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthArgs)(nil)).Elem()
}

type BandwidthInput interface {
	pulumi.Input

	ToBandwidthOutput() BandwidthOutput
	ToBandwidthOutputWithContext(ctx context.Context) BandwidthOutput
}

func (*Bandwidth) ElementType() reflect.Type {
	return reflect.TypeOf((**Bandwidth)(nil)).Elem()
}

func (i *Bandwidth) ToBandwidthOutput() BandwidthOutput {
	return i.ToBandwidthOutputWithContext(context.Background())
}

func (i *Bandwidth) ToBandwidthOutputWithContext(ctx context.Context) BandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthOutput)
}

// BandwidthArrayInput is an input type that accepts BandwidthArray and BandwidthArrayOutput values.
// You can construct a concrete instance of `BandwidthArrayInput` via:
//
//	BandwidthArray{ BandwidthArgs{...} }
type BandwidthArrayInput interface {
	pulumi.Input

	ToBandwidthArrayOutput() BandwidthArrayOutput
	ToBandwidthArrayOutputWithContext(context.Context) BandwidthArrayOutput
}

type BandwidthArray []BandwidthInput

func (BandwidthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bandwidth)(nil)).Elem()
}

func (i BandwidthArray) ToBandwidthArrayOutput() BandwidthArrayOutput {
	return i.ToBandwidthArrayOutputWithContext(context.Background())
}

func (i BandwidthArray) ToBandwidthArrayOutputWithContext(ctx context.Context) BandwidthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthArrayOutput)
}

// BandwidthMapInput is an input type that accepts BandwidthMap and BandwidthMapOutput values.
// You can construct a concrete instance of `BandwidthMapInput` via:
//
//	BandwidthMap{ "key": BandwidthArgs{...} }
type BandwidthMapInput interface {
	pulumi.Input

	ToBandwidthMapOutput() BandwidthMapOutput
	ToBandwidthMapOutputWithContext(context.Context) BandwidthMapOutput
}

type BandwidthMap map[string]BandwidthInput

func (BandwidthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bandwidth)(nil)).Elem()
}

func (i BandwidthMap) ToBandwidthMapOutput() BandwidthMapOutput {
	return i.ToBandwidthMapOutputWithContext(context.Background())
}

func (i BandwidthMap) ToBandwidthMapOutputWithContext(ctx context.Context) BandwidthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthMapOutput)
}

type BandwidthOutput struct{ *pulumi.OutputState }

func (BandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bandwidth)(nil)).Elem()
}

func (o BandwidthOutput) ToBandwidthOutput() BandwidthOutput {
	return o
}

func (o BandwidthOutput) ToBandwidthOutputWithContext(ctx context.Context) BandwidthOutput {
	return o
}

func (o BandwidthOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

func (o BandwidthOutput) BandwidthType() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.BandwidthType }).(pulumi.StringOutput)
}

func (o BandwidthOutput) ChargeMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.ChargeMode }).(pulumi.StringOutput)
}

func (o BandwidthOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o BandwidthOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o BandwidthOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o BandwidthOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o BandwidthOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o BandwidthOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

func (o BandwidthOutput) PublicBorderGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.PublicBorderGroup }).(pulumi.StringOutput)
}

func (o BandwidthOutput) Publicips() BandwidthPublicipArrayOutput {
	return o.ApplyT(func(v *Bandwidth) BandwidthPublicipArrayOutput { return v.Publicips }).(BandwidthPublicipArrayOutput)
}

func (o BandwidthOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o BandwidthOutput) ShareType() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.ShareType }).(pulumi.StringOutput)
}

func (o BandwidthOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o BandwidthOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o BandwidthOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Bandwidth) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type BandwidthArrayOutput struct{ *pulumi.OutputState }

func (BandwidthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bandwidth)(nil)).Elem()
}

func (o BandwidthArrayOutput) ToBandwidthArrayOutput() BandwidthArrayOutput {
	return o
}

func (o BandwidthArrayOutput) ToBandwidthArrayOutputWithContext(ctx context.Context) BandwidthArrayOutput {
	return o
}

func (o BandwidthArrayOutput) Index(i pulumi.IntInput) BandwidthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bandwidth {
		return vs[0].([]*Bandwidth)[vs[1].(int)]
	}).(BandwidthOutput)
}

type BandwidthMapOutput struct{ *pulumi.OutputState }

func (BandwidthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bandwidth)(nil)).Elem()
}

func (o BandwidthMapOutput) ToBandwidthMapOutput() BandwidthMapOutput {
	return o
}

func (o BandwidthMapOutput) ToBandwidthMapOutputWithContext(ctx context.Context) BandwidthMapOutput {
	return o
}

func (o BandwidthMapOutput) MapIndex(k pulumi.StringInput) BandwidthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bandwidth {
		return vs[0].(map[string]*Bandwidth)[vs[1].(string)]
	}).(BandwidthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthInput)(nil)).Elem(), &Bandwidth{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthArrayInput)(nil)).Elem(), BandwidthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthMapInput)(nil)).Elem(), BandwidthMap{})
	pulumi.RegisterOutputType(BandwidthOutput{})
	pulumi.RegisterOutputType(BandwidthArrayOutput{})
	pulumi.RegisterOutputType(BandwidthMapOutput{})
}

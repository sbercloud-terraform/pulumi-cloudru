// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ApigAclPolicy struct {
	pulumi.CustomResourceState

	// The entity type of the ACL policy.
	EntityType pulumi.StringOutput `pulumi:"entityType"`
	// The ID of the dedicated instance to which the ACL policy belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of the ACL policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region where the ACL policy is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The type of the ACL policy.
	Type pulumi.StringOutput `pulumi:"type"`
	// The latest update time of the ACL policy.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// One or more objects from which the access will be controlled.
	Value pulumi.StringOutput `pulumi:"value"`
}

// NewApigAclPolicy registers a new resource with the given unique name, arguments, and options.
func NewApigAclPolicy(ctx *pulumi.Context,
	name string, args *ApigAclPolicyArgs, opts ...pulumi.ResourceOption) (*ApigAclPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityType == nil {
		return nil, errors.New("invalid value for required argument 'EntityType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApigAclPolicy
	err := ctx.RegisterResource("sbercloud:index/apigAclPolicy:ApigAclPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigAclPolicy gets an existing ApigAclPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigAclPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigAclPolicyState, opts ...pulumi.ResourceOption) (*ApigAclPolicy, error) {
	var resource ApigAclPolicy
	err := ctx.ReadResource("sbercloud:index/apigAclPolicy:ApigAclPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigAclPolicy resources.
type apigAclPolicyState struct {
	// The entity type of the ACL policy.
	EntityType *string `pulumi:"entityType"`
	// The ID of the dedicated instance to which the ACL policy belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the ACL policy.
	Name *string `pulumi:"name"`
	// The region where the ACL policy is located.
	Region *string `pulumi:"region"`
	// The type of the ACL policy.
	Type *string `pulumi:"type"`
	// The latest update time of the ACL policy.
	UpdatedAt *string `pulumi:"updatedAt"`
	// One or more objects from which the access will be controlled.
	Value *string `pulumi:"value"`
}

type ApigAclPolicyState struct {
	// The entity type of the ACL policy.
	EntityType pulumi.StringPtrInput
	// The ID of the dedicated instance to which the ACL policy belongs.
	InstanceId pulumi.StringPtrInput
	// The name of the ACL policy.
	Name pulumi.StringPtrInput
	// The region where the ACL policy is located.
	Region pulumi.StringPtrInput
	// The type of the ACL policy.
	Type pulumi.StringPtrInput
	// The latest update time of the ACL policy.
	UpdatedAt pulumi.StringPtrInput
	// One or more objects from which the access will be controlled.
	Value pulumi.StringPtrInput
}

func (ApigAclPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigAclPolicyState)(nil)).Elem()
}

type apigAclPolicyArgs struct {
	// The entity type of the ACL policy.
	EntityType string `pulumi:"entityType"`
	// The ID of the dedicated instance to which the ACL policy belongs.
	InstanceId string `pulumi:"instanceId"`
	// The name of the ACL policy.
	Name *string `pulumi:"name"`
	// The region where the ACL policy is located.
	Region *string `pulumi:"region"`
	// The type of the ACL policy.
	Type string `pulumi:"type"`
	// One or more objects from which the access will be controlled.
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a ApigAclPolicy resource.
type ApigAclPolicyArgs struct {
	// The entity type of the ACL policy.
	EntityType pulumi.StringInput
	// The ID of the dedicated instance to which the ACL policy belongs.
	InstanceId pulumi.StringInput
	// The name of the ACL policy.
	Name pulumi.StringPtrInput
	// The region where the ACL policy is located.
	Region pulumi.StringPtrInput
	// The type of the ACL policy.
	Type pulumi.StringInput
	// One or more objects from which the access will be controlled.
	Value pulumi.StringInput
}

func (ApigAclPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigAclPolicyArgs)(nil)).Elem()
}

type ApigAclPolicyInput interface {
	pulumi.Input

	ToApigAclPolicyOutput() ApigAclPolicyOutput
	ToApigAclPolicyOutputWithContext(ctx context.Context) ApigAclPolicyOutput
}

func (*ApigAclPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigAclPolicy)(nil)).Elem()
}

func (i *ApigAclPolicy) ToApigAclPolicyOutput() ApigAclPolicyOutput {
	return i.ToApigAclPolicyOutputWithContext(context.Background())
}

func (i *ApigAclPolicy) ToApigAclPolicyOutputWithContext(ctx context.Context) ApigAclPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigAclPolicyOutput)
}

// ApigAclPolicyArrayInput is an input type that accepts ApigAclPolicyArray and ApigAclPolicyArrayOutput values.
// You can construct a concrete instance of `ApigAclPolicyArrayInput` via:
//
//	ApigAclPolicyArray{ ApigAclPolicyArgs{...} }
type ApigAclPolicyArrayInput interface {
	pulumi.Input

	ToApigAclPolicyArrayOutput() ApigAclPolicyArrayOutput
	ToApigAclPolicyArrayOutputWithContext(context.Context) ApigAclPolicyArrayOutput
}

type ApigAclPolicyArray []ApigAclPolicyInput

func (ApigAclPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigAclPolicy)(nil)).Elem()
}

func (i ApigAclPolicyArray) ToApigAclPolicyArrayOutput() ApigAclPolicyArrayOutput {
	return i.ToApigAclPolicyArrayOutputWithContext(context.Background())
}

func (i ApigAclPolicyArray) ToApigAclPolicyArrayOutputWithContext(ctx context.Context) ApigAclPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigAclPolicyArrayOutput)
}

// ApigAclPolicyMapInput is an input type that accepts ApigAclPolicyMap and ApigAclPolicyMapOutput values.
// You can construct a concrete instance of `ApigAclPolicyMapInput` via:
//
//	ApigAclPolicyMap{ "key": ApigAclPolicyArgs{...} }
type ApigAclPolicyMapInput interface {
	pulumi.Input

	ToApigAclPolicyMapOutput() ApigAclPolicyMapOutput
	ToApigAclPolicyMapOutputWithContext(context.Context) ApigAclPolicyMapOutput
}

type ApigAclPolicyMap map[string]ApigAclPolicyInput

func (ApigAclPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigAclPolicy)(nil)).Elem()
}

func (i ApigAclPolicyMap) ToApigAclPolicyMapOutput() ApigAclPolicyMapOutput {
	return i.ToApigAclPolicyMapOutputWithContext(context.Background())
}

func (i ApigAclPolicyMap) ToApigAclPolicyMapOutputWithContext(ctx context.Context) ApigAclPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigAclPolicyMapOutput)
}

type ApigAclPolicyOutput struct{ *pulumi.OutputState }

func (ApigAclPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigAclPolicy)(nil)).Elem()
}

func (o ApigAclPolicyOutput) ToApigAclPolicyOutput() ApigAclPolicyOutput {
	return o
}

func (o ApigAclPolicyOutput) ToApigAclPolicyOutputWithContext(ctx context.Context) ApigAclPolicyOutput {
	return o
}

// The entity type of the ACL policy.
func (o ApigAclPolicyOutput) EntityType() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigAclPolicy) pulumi.StringOutput { return v.EntityType }).(pulumi.StringOutput)
}

// The ID of the dedicated instance to which the ACL policy belongs.
func (o ApigAclPolicyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigAclPolicy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the ACL policy.
func (o ApigAclPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigAclPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region where the ACL policy is located.
func (o ApigAclPolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigAclPolicy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The type of the ACL policy.
func (o ApigAclPolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigAclPolicy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The latest update time of the ACL policy.
func (o ApigAclPolicyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigAclPolicy) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// One or more objects from which the access will be controlled.
func (o ApigAclPolicyOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigAclPolicy) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type ApigAclPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApigAclPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigAclPolicy)(nil)).Elem()
}

func (o ApigAclPolicyArrayOutput) ToApigAclPolicyArrayOutput() ApigAclPolicyArrayOutput {
	return o
}

func (o ApigAclPolicyArrayOutput) ToApigAclPolicyArrayOutputWithContext(ctx context.Context) ApigAclPolicyArrayOutput {
	return o
}

func (o ApigAclPolicyArrayOutput) Index(i pulumi.IntInput) ApigAclPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApigAclPolicy {
		return vs[0].([]*ApigAclPolicy)[vs[1].(int)]
	}).(ApigAclPolicyOutput)
}

type ApigAclPolicyMapOutput struct{ *pulumi.OutputState }

func (ApigAclPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigAclPolicy)(nil)).Elem()
}

func (o ApigAclPolicyMapOutput) ToApigAclPolicyMapOutput() ApigAclPolicyMapOutput {
	return o
}

func (o ApigAclPolicyMapOutput) ToApigAclPolicyMapOutputWithContext(ctx context.Context) ApigAclPolicyMapOutput {
	return o
}

func (o ApigAclPolicyMapOutput) MapIndex(k pulumi.StringInput) ApigAclPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApigAclPolicy {
		return vs[0].(map[string]*ApigAclPolicy)[vs[1].(string)]
	}).(ApigAclPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigAclPolicyInput)(nil)).Elem(), &ApigAclPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigAclPolicyArrayInput)(nil)).Elem(), ApigAclPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigAclPolicyMapInput)(nil)).Elem(), ApigAclPolicyMap{})
	pulumi.RegisterOutputType(ApigAclPolicyOutput{})
	pulumi.RegisterOutputType(ApigAclPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApigAclPolicyMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a flow log resource under the ER instance within SberCloud.
 *
 * Before using enterprise router, define custom endpoint as shown below:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const logGroupId = config.requireObject<any>("logGroupId");
 * const logStreamId = config.requireObject<any>("logStreamId");
 * const resourceId = config.requireObject<any>("resourceId");
 * const flowLogName = config.requireObject<any>("flowLogName");
 * const test = new sbercloud.er.FlowLog("test", {
 *     instanceId: instanceId,
 *     logStoreType: "LTS",
 *     logGroupId: logGroupId,
 *     logStreamId: logStreamId,
 *     resourceType: "attachment",
 *     resourceId: resourceId,
 *     name: flowLogName,
 *     description: "Flow log created by terraform",
 *     enabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * The flow log can be imported using the related `instance_id` and their `id`, separated by a slash (/), e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Er/flowLog:FlowLog test <instance_id>/<id>
 * ```
 */
export class FlowLog extends pulumi.CustomResource {
    /**
     * Get an existing FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowLogState, opts?: pulumi.CustomResourceOptions): FlowLog {
        return new FlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Er/flowLog:FlowLog';

    /**
     * Returns true if the given object is an instance of FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowLog.__pulumiType;
    }

    /**
     * The creation time of the flow log.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies the description of the flow log.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable the flow log function. The default value is **true**.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the ID of the ER instance to which the flow log belongs.
     * Changing this creates a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the LTS log group ID.
     * Changing this creates a new resource.
     */
    public readonly logGroupId!: pulumi.Output<string>;
    /**
     * Specifies the storage type of flow log. The valid value is **LTS**.  
     * Changing this creates a new resource.
     */
    public readonly logStoreType!: pulumi.Output<string>;
    /**
     * Specifies the LTS log stream ID.
     * Changing this creates a new resource.
     */
    public readonly logStreamId!: pulumi.Output<string>;
    /**
     * Specifies the name of the flow log.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the resource ID to which the logs to be collected.
     * Changing this creates a new resource.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * Specifies the resource type to which the logs to be collected.
     * The valid value is **attachment**.
     * Changing this creates a new resource.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The current status of the flow log.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The latest update time of the flow log.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowLogArgs | FlowLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowLogState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["logGroupId"] = state ? state.logGroupId : undefined;
            resourceInputs["logStoreType"] = state ? state.logStoreType : undefined;
            resourceInputs["logStreamId"] = state ? state.logStreamId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as FlowLogArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.logGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logGroupId'");
            }
            if ((!args || args.logStoreType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logStoreType'");
            }
            if ((!args || args.logStreamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logStreamId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["logGroupId"] = args ? args.logGroupId : undefined;
            resourceInputs["logStoreType"] = args ? args.logStoreType : undefined;
            resourceInputs["logStreamId"] = args ? args.logStreamId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlowLog resources.
 */
export interface FlowLogState {
    /**
     * The creation time of the flow log.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies the description of the flow log.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the flow log function. The default value is **true**.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the ER instance to which the flow log belongs.
     * Changing this creates a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the LTS log group ID.
     * Changing this creates a new resource.
     */
    logGroupId?: pulumi.Input<string>;
    /**
     * Specifies the storage type of flow log. The valid value is **LTS**.  
     * Changing this creates a new resource.
     */
    logStoreType?: pulumi.Input<string>;
    /**
     * Specifies the LTS log stream ID.
     * Changing this creates a new resource.
     */
    logStreamId?: pulumi.Input<string>;
    /**
     * Specifies the name of the flow log.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the resource ID to which the logs to be collected.
     * Changing this creates a new resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Specifies the resource type to which the logs to be collected.
     * The valid value is **attachment**.
     * Changing this creates a new resource.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The current status of the flow log.
     */
    state?: pulumi.Input<string>;
    /**
     * The latest update time of the flow log.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowLog resource.
 */
export interface FlowLogArgs {
    /**
     * Specifies the description of the flow log.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the flow log function. The default value is **true**.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Specifies the ID of the ER instance to which the flow log belongs.
     * Changing this creates a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the LTS log group ID.
     * Changing this creates a new resource.
     */
    logGroupId: pulumi.Input<string>;
    /**
     * Specifies the storage type of flow log. The valid value is **LTS**.  
     * Changing this creates a new resource.
     */
    logStoreType: pulumi.Input<string>;
    /**
     * Specifies the LTS log stream ID.
     * Changing this creates a new resource.
     */
    logStreamId: pulumi.Input<string>;
    /**
     * Specifies the name of the flow log.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the resource ID to which the logs to be collected.
     * Changing this creates a new resource.
     */
    resourceId: pulumi.Input<string>;
    /**
     * Specifies the resource type to which the logs to be collected.
     * The valid value is **attachment**.
     * Changing this creates a new resource.
     */
    resourceType: pulumi.Input<string>;
}

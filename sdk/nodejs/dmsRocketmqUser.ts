// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class DmsRocketmqUser extends pulumi.CustomResource {
    /**
     * Get an existing DmsRocketmqUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsRocketmqUserState, opts?: pulumi.CustomResourceOptions): DmsRocketmqUser {
        return new DmsRocketmqUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dmsRocketmqUser:DmsRocketmqUser';

    /**
     * Returns true if the given object is an instance of DmsRocketmqUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsRocketmqUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsRocketmqUser.__pulumiType;
    }

    /**
     * Specifies the access key of the user.
     */
    declare public readonly accessKey: pulumi.Output<string>;
    /**
     * Specifies whether the user is an administrator.
     */
    declare public readonly admin: pulumi.Output<boolean>;
    /**
     * Specifies the default consumer group permissions.
     * Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
     */
    declare public readonly defaultGroupPerm: pulumi.Output<string>;
    /**
     * Specifies the default topic permissions.
     * Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
     */
    declare public readonly defaultTopicPerm: pulumi.Output<string>;
    /**
     * Specifies the special consumer group permissions.
     */
    declare public readonly groupPerms: pulumi.Output<outputs.DmsRocketmqUserGroupPerm[]>;
    /**
     * Specifies the ID of the rocketMQ instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the secret key of the user.
     */
    declare public readonly secretKey: pulumi.Output<string>;
    /**
     * Specifies the special topic permissions.
     */
    declare public readonly topicPerms: pulumi.Output<outputs.DmsRocketmqUserTopicPerm[]>;
    /**
     * Specifies the IP address whitelist.
     */
    declare public readonly whiteRemoteAddress: pulumi.Output<string>;

    /**
     * Create a DmsRocketmqUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsRocketmqUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsRocketmqUserArgs | DmsRocketmqUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsRocketmqUserState | undefined;
            resourceInputs["accessKey"] = state?.accessKey;
            resourceInputs["admin"] = state?.admin;
            resourceInputs["defaultGroupPerm"] = state?.defaultGroupPerm;
            resourceInputs["defaultTopicPerm"] = state?.defaultTopicPerm;
            resourceInputs["groupPerms"] = state?.groupPerms;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["region"] = state?.region;
            resourceInputs["secretKey"] = state?.secretKey;
            resourceInputs["topicPerms"] = state?.topicPerms;
            resourceInputs["whiteRemoteAddress"] = state?.whiteRemoteAddress;
        } else {
            const args = argsOrState as DmsRocketmqUserArgs | undefined;
            if (args?.accessKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'accessKey'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.secretKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'secretKey'");
            }
            resourceInputs["accessKey"] = args?.accessKey;
            resourceInputs["admin"] = args?.admin;
            resourceInputs["defaultGroupPerm"] = args?.defaultGroupPerm;
            resourceInputs["defaultTopicPerm"] = args?.defaultTopicPerm;
            resourceInputs["groupPerms"] = args?.groupPerms;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["region"] = args?.region;
            resourceInputs["secretKey"] = args?.secretKey;
            resourceInputs["topicPerms"] = args?.topicPerms;
            resourceInputs["whiteRemoteAddress"] = args?.whiteRemoteAddress;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsRocketmqUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DmsRocketmqUser resources.
 */
export interface DmsRocketmqUserState {
    /**
     * Specifies the access key of the user.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Specifies whether the user is an administrator.
     */
    admin?: pulumi.Input<boolean>;
    /**
     * Specifies the default consumer group permissions.
     * Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
     */
    defaultGroupPerm?: pulumi.Input<string>;
    /**
     * Specifies the default topic permissions.
     * Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
     */
    defaultTopicPerm?: pulumi.Input<string>;
    /**
     * Specifies the special consumer group permissions.
     */
    groupPerms?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqUserGroupPerm>[]>;
    /**
     * Specifies the ID of the rocketMQ instance.
     */
    instanceId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the secret key of the user.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * Specifies the special topic permissions.
     */
    topicPerms?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqUserTopicPerm>[]>;
    /**
     * Specifies the IP address whitelist.
     */
    whiteRemoteAddress?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DmsRocketmqUser resource.
 */
export interface DmsRocketmqUserArgs {
    /**
     * Specifies the access key of the user.
     */
    accessKey: pulumi.Input<string>;
    /**
     * Specifies whether the user is an administrator.
     */
    admin?: pulumi.Input<boolean>;
    /**
     * Specifies the default consumer group permissions.
     * Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
     */
    defaultGroupPerm?: pulumi.Input<string>;
    /**
     * Specifies the default topic permissions.
     * Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
     */
    defaultTopicPerm?: pulumi.Input<string>;
    /**
     * Specifies the special consumer group permissions.
     */
    groupPerms?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqUserGroupPerm>[]>;
    /**
     * Specifies the ID of the rocketMQ instance.
     */
    instanceId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the secret key of the user.
     */
    secretKey: pulumi.Input<string>;
    /**
     * Specifies the special topic permissions.
     */
    topicPerms?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqUserTopicPerm>[]>;
    /**
     * Specifies the IP address whitelist.
     */
    whiteRemoteAddress?: pulumi.Input<string>;
}

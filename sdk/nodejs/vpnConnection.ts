// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnConnectionState, opts?: pulumi.CustomResourceOptions): VpnConnection {
        return new VpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/vpnConnection:VpnConnection';

    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }

    /**
     * The create time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The customer gateway ID.
     */
    declare public readonly customerGatewayId: pulumi.Output<string>;
    /**
     * Whether to enable NQA check.
     */
    declare public readonly enableNqa: pulumi.Output<boolean>;
    /**
     * The enterprise project ID.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * The VPN gateway ID.
     */
    declare public readonly gatewayId: pulumi.Output<string>;
    /**
     * The VPN gateway IP ID.
     */
    declare public readonly gatewayIp: pulumi.Output<string>;
    declare public readonly haRole: pulumi.Output<string>;
    declare public readonly ikepolicy: pulumi.Output<outputs.VpnConnectionIkepolicy>;
    declare public readonly ipsecpolicy: pulumi.Output<outputs.VpnConnectionIpsecpolicy>;
    /**
     * The name of the VPN connection.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The customer subnets.
     */
    declare public readonly peerSubnets: pulumi.Output<string[]>;
    /**
     * The policy rules. Only works when vpnType is set to **policy**
     */
    declare public readonly policyRules: pulumi.Output<outputs.VpnConnectionPolicyRule[]>;
    /**
     * The pre-shared key.
     */
    declare public readonly psk: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * The status of the VPN connection.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    /**
     * The local tunnel address.
     */
    declare public readonly tunnelLocalAddress: pulumi.Output<string>;
    /**
     * The peer tunnel address.
     */
    declare public readonly tunnelPeerAddress: pulumi.Output<string>;
    /**
     * The update time.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The connection type. The value can be **policy**, **static** or **bgp**.
     */
    declare public readonly vpnType: pulumi.Output<string>;

    /**
     * Create a VpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnConnectionArgs | VpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnConnectionState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["customerGatewayId"] = state?.customerGatewayId;
            resourceInputs["enableNqa"] = state?.enableNqa;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["gatewayId"] = state?.gatewayId;
            resourceInputs["gatewayIp"] = state?.gatewayIp;
            resourceInputs["haRole"] = state?.haRole;
            resourceInputs["ikepolicy"] = state?.ikepolicy;
            resourceInputs["ipsecpolicy"] = state?.ipsecpolicy;
            resourceInputs["name"] = state?.name;
            resourceInputs["peerSubnets"] = state?.peerSubnets;
            resourceInputs["policyRules"] = state?.policyRules;
            resourceInputs["psk"] = state?.psk;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tunnelLocalAddress"] = state?.tunnelLocalAddress;
            resourceInputs["tunnelPeerAddress"] = state?.tunnelPeerAddress;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vpnType"] = state?.vpnType;
        } else {
            const args = argsOrState as VpnConnectionArgs | undefined;
            if (args?.customerGatewayId === undefined && !opts.urn) {
                throw new Error("Missing required property 'customerGatewayId'");
            }
            if (args?.gatewayId === undefined && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if (args?.gatewayIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'gatewayIp'");
            }
            if (args?.psk === undefined && !opts.urn) {
                throw new Error("Missing required property 'psk'");
            }
            if (args?.vpnType === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpnType'");
            }
            resourceInputs["customerGatewayId"] = args?.customerGatewayId;
            resourceInputs["enableNqa"] = args?.enableNqa;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["gatewayId"] = args?.gatewayId;
            resourceInputs["gatewayIp"] = args?.gatewayIp;
            resourceInputs["haRole"] = args?.haRole;
            resourceInputs["ikepolicy"] = args?.ikepolicy;
            resourceInputs["ipsecpolicy"] = args?.ipsecpolicy;
            resourceInputs["name"] = args?.name;
            resourceInputs["peerSubnets"] = args?.peerSubnets;
            resourceInputs["policyRules"] = args?.policyRules;
            resourceInputs["psk"] = args?.psk;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tunnelLocalAddress"] = args?.tunnelLocalAddress;
            resourceInputs["tunnelPeerAddress"] = args?.tunnelPeerAddress;
            resourceInputs["vpnType"] = args?.vpnType;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnConnection resources.
 */
export interface VpnConnectionState {
    /**
     * The create time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The customer gateway ID.
     */
    customerGatewayId?: pulumi.Input<string>;
    /**
     * Whether to enable NQA check.
     */
    enableNqa?: pulumi.Input<boolean>;
    /**
     * The enterprise project ID.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The VPN gateway ID.
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * The VPN gateway IP ID.
     */
    gatewayIp?: pulumi.Input<string>;
    haRole?: pulumi.Input<string>;
    ikepolicy?: pulumi.Input<inputs.VpnConnectionIkepolicy>;
    ipsecpolicy?: pulumi.Input<inputs.VpnConnectionIpsecpolicy>;
    /**
     * The name of the VPN connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The customer subnets.
     */
    peerSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The policy rules. Only works when vpnType is set to **policy**
     */
    policyRules?: pulumi.Input<pulumi.Input<inputs.VpnConnectionPolicyRule>[]>;
    /**
     * The pre-shared key.
     */
    psk?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The status of the VPN connection.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The local tunnel address.
     */
    tunnelLocalAddress?: pulumi.Input<string>;
    /**
     * The peer tunnel address.
     */
    tunnelPeerAddress?: pulumi.Input<string>;
    /**
     * The update time.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The connection type. The value can be **policy**, **static** or **bgp**.
     */
    vpnType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnConnection resource.
 */
export interface VpnConnectionArgs {
    /**
     * The customer gateway ID.
     */
    customerGatewayId: pulumi.Input<string>;
    /**
     * Whether to enable NQA check.
     */
    enableNqa?: pulumi.Input<boolean>;
    /**
     * The enterprise project ID.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The VPN gateway ID.
     */
    gatewayId: pulumi.Input<string>;
    /**
     * The VPN gateway IP ID.
     */
    gatewayIp: pulumi.Input<string>;
    haRole?: pulumi.Input<string>;
    ikepolicy?: pulumi.Input<inputs.VpnConnectionIkepolicy>;
    ipsecpolicy?: pulumi.Input<inputs.VpnConnectionIpsecpolicy>;
    /**
     * The name of the VPN connection.
     */
    name?: pulumi.Input<string>;
    /**
     * The customer subnets.
     */
    peerSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The policy rules. Only works when vpnType is set to **policy**
     */
    policyRules?: pulumi.Input<pulumi.Input<inputs.VpnConnectionPolicyRule>[]>;
    /**
     * The pre-shared key.
     */
    psk: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The local tunnel address.
     */
    tunnelLocalAddress?: pulumi.Input<string>;
    /**
     * The peer tunnel address.
     */
    tunnelPeerAddress?: pulumi.Input<string>;
    /**
     * The connection type. The value can be **policy**, **static** or **bgp**.
     */
    vpnType: pulumi.Input<string>;
}

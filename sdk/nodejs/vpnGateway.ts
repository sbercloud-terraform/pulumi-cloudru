// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnGateway extends pulumi.CustomResource {
    /**
     * Get an existing VpnGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnGatewayState, opts?: pulumi.CustomResourceOptions): VpnGateway {
        return new VpnGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/vpnGateway:VpnGateway';

    /**
     * Returns true if the given object is an instance of VpnGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnGateway.__pulumiType;
    }

    declare public readonly accessPrivateIp1: pulumi.Output<string>;
    declare public readonly accessPrivateIp2: pulumi.Output<string>;
    /**
     * The access subnet ID of the VPN gateway.
     */
    declare public readonly accessSubnetId: pulumi.Output<string>;
    /**
     * The access VPC ID of the VPN gateway.
     */
    declare public readonly accessVpcId: pulumi.Output<string>;
    /**
     * The ASN number of BGP
     */
    declare public readonly asn: pulumi.Output<number | undefined>;
    /**
     * The attachment type.
     */
    declare public readonly attachmentType: pulumi.Output<string | undefined>;
    /**
     * The availability zone IDs.
     */
    declare public readonly availabilityZones: pulumi.Output<string[]>;
    declare public readonly certificate: pulumi.Output<outputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     */
    declare public readonly connectSubnet: pulumi.Output<string>;
    /**
     * The create time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    declare public readonly deleteEipOnTermination: pulumi.Output<boolean | undefined>;
    declare public readonly eip1: pulumi.Output<outputs.VpnGatewayEip1>;
    declare public readonly eip2: pulumi.Output<outputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * The ER attachment ID.
     */
    declare public /*out*/ readonly erAttachmentId: pulumi.Output<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     */
    declare public readonly erId: pulumi.Output<string>;
    /**
     * The flavor of the VPN gateway.
     */
    declare public readonly flavor: pulumi.Output<string>;
    /**
     * The HA mode of the VPN gateway.
     */
    declare public readonly haMode: pulumi.Output<string>;
    /**
     * The local subnets.
     */
    declare public readonly localSubnets: pulumi.Output<string[]>;
    declare public readonly masterEip: pulumi.Output<outputs.VpnGatewayMasterEip>;
    /**
     * The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The network type of the VPN gateway.
     */
    declare public readonly networkType: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly slaveEip: pulumi.Output<outputs.VpnGatewaySlaveEip>;
    /**
     * The status of VPN gateway.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The update time.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The number of used connection groups.
     */
    declare public /*out*/ readonly usedConnectionGroup: pulumi.Output<number>;
    /**
     * The number of used connections.
     */
    declare public /*out*/ readonly usedConnectionNumber: pulumi.Output<number>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a VpnGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnGatewayArgs | VpnGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnGatewayState | undefined;
            resourceInputs["accessPrivateIp1"] = state?.accessPrivateIp1;
            resourceInputs["accessPrivateIp2"] = state?.accessPrivateIp2;
            resourceInputs["accessSubnetId"] = state?.accessSubnetId;
            resourceInputs["accessVpcId"] = state?.accessVpcId;
            resourceInputs["asn"] = state?.asn;
            resourceInputs["attachmentType"] = state?.attachmentType;
            resourceInputs["availabilityZones"] = state?.availabilityZones;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["connectSubnet"] = state?.connectSubnet;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deleteEipOnTermination"] = state?.deleteEipOnTermination;
            resourceInputs["eip1"] = state?.eip1;
            resourceInputs["eip2"] = state?.eip2;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["erAttachmentId"] = state?.erAttachmentId;
            resourceInputs["erId"] = state?.erId;
            resourceInputs["flavor"] = state?.flavor;
            resourceInputs["haMode"] = state?.haMode;
            resourceInputs["localSubnets"] = state?.localSubnets;
            resourceInputs["masterEip"] = state?.masterEip;
            resourceInputs["name"] = state?.name;
            resourceInputs["networkType"] = state?.networkType;
            resourceInputs["region"] = state?.region;
            resourceInputs["slaveEip"] = state?.slaveEip;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["usedConnectionGroup"] = state?.usedConnectionGroup;
            resourceInputs["usedConnectionNumber"] = state?.usedConnectionNumber;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as VpnGatewayArgs | undefined;
            if (args?.availabilityZones === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZones'");
            }
            resourceInputs["accessPrivateIp1"] = args?.accessPrivateIp1;
            resourceInputs["accessPrivateIp2"] = args?.accessPrivateIp2;
            resourceInputs["accessSubnetId"] = args?.accessSubnetId;
            resourceInputs["accessVpcId"] = args?.accessVpcId;
            resourceInputs["asn"] = args?.asn;
            resourceInputs["attachmentType"] = args?.attachmentType;
            resourceInputs["availabilityZones"] = args?.availabilityZones;
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["connectSubnet"] = args?.connectSubnet;
            resourceInputs["deleteEipOnTermination"] = args?.deleteEipOnTermination;
            resourceInputs["eip1"] = args?.eip1;
            resourceInputs["eip2"] = args?.eip2;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["erId"] = args?.erId;
            resourceInputs["flavor"] = args?.flavor;
            resourceInputs["haMode"] = args?.haMode;
            resourceInputs["localSubnets"] = args?.localSubnets;
            resourceInputs["masterEip"] = args?.masterEip;
            resourceInputs["name"] = args?.name;
            resourceInputs["networkType"] = args?.networkType;
            resourceInputs["region"] = args?.region;
            resourceInputs["slaveEip"] = args?.slaveEip;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["erAttachmentId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["usedConnectionGroup"] = undefined /*out*/;
            resourceInputs["usedConnectionNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnGateway resources.
 */
export interface VpnGatewayState {
    accessPrivateIp1?: pulumi.Input<string>;
    accessPrivateIp2?: pulumi.Input<string>;
    /**
     * The access subnet ID of the VPN gateway.
     */
    accessSubnetId?: pulumi.Input<string>;
    /**
     * The access VPC ID of the VPN gateway.
     */
    accessVpcId?: pulumi.Input<string>;
    /**
     * The ASN number of BGP
     */
    asn?: pulumi.Input<number>;
    /**
     * The attachment type.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The availability zone IDs.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    certificate?: pulumi.Input<inputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     */
    connectSubnet?: pulumi.Input<string>;
    /**
     * The create time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    deleteEipOnTermination?: pulumi.Input<boolean>;
    eip1?: pulumi.Input<inputs.VpnGatewayEip1>;
    eip2?: pulumi.Input<inputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The ER attachment ID.
     */
    erAttachmentId?: pulumi.Input<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     */
    erId?: pulumi.Input<string>;
    /**
     * The flavor of the VPN gateway.
     */
    flavor?: pulumi.Input<string>;
    /**
     * The HA mode of the VPN gateway.
     */
    haMode?: pulumi.Input<string>;
    /**
     * The local subnets.
     */
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    masterEip?: pulumi.Input<inputs.VpnGatewayMasterEip>;
    /**
     * The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type of the VPN gateway.
     */
    networkType?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    slaveEip?: pulumi.Input<inputs.VpnGatewaySlaveEip>;
    /**
     * The status of VPN gateway.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The update time.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The number of used connection groups.
     */
    usedConnectionGroup?: pulumi.Input<number>;
    /**
     * The number of used connections.
     */
    usedConnectionNumber?: pulumi.Input<number>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnGateway resource.
 */
export interface VpnGatewayArgs {
    accessPrivateIp1?: pulumi.Input<string>;
    accessPrivateIp2?: pulumi.Input<string>;
    /**
     * The access subnet ID of the VPN gateway.
     */
    accessSubnetId?: pulumi.Input<string>;
    /**
     * The access VPC ID of the VPN gateway.
     */
    accessVpcId?: pulumi.Input<string>;
    /**
     * The ASN number of BGP
     */
    asn?: pulumi.Input<number>;
    /**
     * The attachment type.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The availability zone IDs.
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    certificate?: pulumi.Input<inputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     */
    connectSubnet?: pulumi.Input<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    deleteEipOnTermination?: pulumi.Input<boolean>;
    eip1?: pulumi.Input<inputs.VpnGatewayEip1>;
    eip2?: pulumi.Input<inputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     */
    erId?: pulumi.Input<string>;
    /**
     * The flavor of the VPN gateway.
     */
    flavor?: pulumi.Input<string>;
    /**
     * The HA mode of the VPN gateway.
     */
    haMode?: pulumi.Input<string>;
    /**
     * The local subnets.
     */
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    masterEip?: pulumi.Input<inputs.VpnGatewayMasterEip>;
    /**
     * The name of the VPN gateway. Only letters, digits, underscores(_) and hypens(-) are supported.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type of the VPN gateway.
     */
    networkType?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    slaveEip?: pulumi.Input<inputs.VpnGatewaySlaveEip>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     */
    vpcId?: pulumi.Input<string>;
}

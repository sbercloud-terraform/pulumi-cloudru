// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a CFW ACL rule resource within SberCloud.
//
// ## Example Usage
//
// ### Create a basic rule
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			description := cfg.RequireObject("description")
//			objectId := cfg.RequireObject("objectId")
//			_, err := cfw.NewAclRule(ctx, "test", &cfw.AclRuleArgs{
//				Name:              pulumi.Any(name),
//				ObjectId:          pulumi.Any(objectId),
//				Description:       pulumi.Any(description),
//				Type:              pulumi.Int(0),
//				AddressType:       pulumi.Int(0),
//				ActionType:        pulumi.Int(0),
//				LongConnectEnable: pulumi.Int(0),
//				Status:            pulumi.Int(1),
//				SourceAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//				},
//				DestinationAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.2"),
//				},
//				CustomServices: cfw.AclRuleCustomServiceArray{
//					&cfw.AclRuleCustomServiceArgs{
//						Protocol:   pulumi.Int(6),
//						SourcePort: pulumi.String("81"),
//						DestPort:   pulumi.String("82"),
//					},
//				},
//				Sequence: &cfw.AclRuleSequenceArgs{
//					Top: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a rule with the source address using the region list
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			description := cfg.RequireObject("description")
//			objectId := cfg.RequireObject("objectId")
//			_, err := cfw.NewAclRule(ctx, "test", &cfw.AclRuleArgs{
//				Name:              pulumi.Any(name),
//				ObjectId:          pulumi.Any(objectId),
//				Description:       pulumi.Any(description),
//				Type:              pulumi.Int(0),
//				AddressType:       pulumi.Int(0),
//				ActionType:        pulumi.Int(0),
//				LongConnectEnable: pulumi.Int(0),
//				Status:            pulumi.Int(1),
//				SourceRegionLists: cfw.AclRuleSourceRegionListArray{
//					&cfw.AclRuleSourceRegionListArgs{
//						DescriptionCn: pulumi.String("中国"),
//						DescriptionEn: pulumi.String("Chinese Mainland"),
//						RegionId:      pulumi.String("CN"),
//						RegionType:    pulumi.Int(0),
//					},
//				},
//				DestinationAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.2"),
//				},
//				CustomServices: cfw.AclRuleCustomServiceArray{
//					&cfw.AclRuleCustomServiceArgs{
//						Protocol:   pulumi.Int(6),
//						SourcePort: pulumi.String("81"),
//						DestPort:   pulumi.String("82"),
//					},
//				},
//				Sequence: &cfw.AclRuleSequenceArgs{
//					Top: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a rule with the custom service groups
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			description := cfg.RequireObject("description")
//			objectId := cfg.RequireObject("objectId")
//			serviceGroupId := cfg.RequireObject("serviceGroupId")
//			protocol := cfg.RequireObject("protocol")
//			_, err := cfw.NewAclRule(ctx, "test", &cfw.AclRuleArgs{
//				Name:              pulumi.Any(name),
//				ObjectId:          pulumi.Any(objectId),
//				Description:       pulumi.Any(description),
//				Type:              pulumi.Int(0),
//				AddressType:       pulumi.Int(0),
//				ActionType:        pulumi.Int(0),
//				LongConnectEnable: pulumi.Int(0),
//				Status:            pulumi.Int(1),
//				SourceAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//				},
//				DestinationAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.2"),
//				},
//				CustomServiceGroups: &cfw.AclRuleCustomServiceGroupsArgs{
//					Protocols: pulumi.IntArray{
//						protocol,
//					},
//					GroupIds: pulumi.StringArray{
//						serviceGroupId,
//					},
//				},
//				Sequence: &cfw.AclRuleSequenceArgs{
//					Top: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a rule with any service
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			description := cfg.RequireObject("description")
//			objectId := cfg.RequireObject("objectId")
//			serviceGroupId := cfg.RequireObject("serviceGroupId")
//			protocol := cfg.RequireObject("protocol")
//			_, err := cfw.NewAclRule(ctx, "test", &cfw.AclRuleArgs{
//				Name:              pulumi.Any(name),
//				ObjectId:          pulumi.Any(objectId),
//				Description:       pulumi.Any(description),
//				Type:              pulumi.Int(0),
//				AddressType:       pulumi.Int(0),
//				ActionType:        pulumi.Int(0),
//				LongConnectEnable: pulumi.Int(0),
//				Status:            pulumi.Int(1),
//				SourceAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//				},
//				DestinationAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.2"),
//				},
//				Sequence: &cfw.AclRuleSequenceArgs{
//					Top: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a rule with any source address
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			description := cfg.RequireObject("description")
//			objectId := cfg.RequireObject("objectId")
//			serviceGroupId := cfg.RequireObject("serviceGroupId")
//			protocol := cfg.RequireObject("protocol")
//			_, err := cfw.NewAclRule(ctx, "test", &cfw.AclRuleArgs{
//				Name:              pulumi.Any(name),
//				ObjectId:          pulumi.Any(objectId),
//				Description:       pulumi.Any(description),
//				Type:              pulumi.Int(0),
//				AddressType:       pulumi.Int(0),
//				ActionType:        pulumi.Int(0),
//				LongConnectEnable: pulumi.Int(0),
//				Status:            pulumi.Int(1),
//				DestinationAddresses: pulumi.StringArray{
//					pulumi.String("1.1.1.2"),
//				},
//				CustomServices: cfw.AclRuleCustomServiceArray{
//					&cfw.AclRuleCustomServiceArgs{
//						Protocol:   pulumi.Int(6),
//						SourcePort: pulumi.String("81"),
//						DestPort:   pulumi.String("82"),
//					},
//				},
//				Sequence: &cfw.AclRuleSequenceArgs{
//					Top: pulumi.Int(1),
//				},
//				Tags: pulumi.StringMap{
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The ACL rule can be imported using `object_id`, `id`, separated by a slash, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Cfw/aclRule:AclRule test <object_id>/<id>
// ```
//
// # Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
//
// API response, security or some other reason.
//
// The missing attributes include: `sequence`, `type`, `predefined_service_groups` and `source_predefined_groups`.
//
// It is generally recommended running `pulumi preview` after importing the resource.
//
// # You can then decide if changes should be applied to the instance, or the resource definition should be updated to
//
// align with the instance. Also you can ignore changes as below.
//
// hcl
//
// resource "sbercloud_cfw_acl_rule" "test" {
//
//	  ...
//
//	lifecycle {
//
//	  ignore_changes = [
//
//	    sequence, type, predefined_service_groups, source_predefined_groups,
//
//	  ]
//
//	}
//
// }
type AclRule struct {
	pulumi.CustomResourceState

	// The action type.
	// The value can be `0` (allow), `1` (deny).
	ActionType pulumi.IntOutput `pulumi:"actionType"`
	// The address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	AddressType pulumi.IntOutput `pulumi:"addressType"`
	// The application list.
	// The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
	// **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
	Applications pulumi.StringArrayOutput `pulumi:"applications"`
	// The custom service group list.
	// The customServiceGroups structure is documented below.
	CustomServiceGroups AclRuleCustomServiceGroupsPtrOutput `pulumi:"customServiceGroups"`
	// The custom service configuration.
	// The customServices structure is documented below.
	CustomServices AclRuleCustomServiceArrayOutput `pulumi:"customServices"`
	// The rule description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The destination address group list.
	DestinationAddressGroups pulumi.StringArrayOutput `pulumi:"destinationAddressGroups"`
	// The destination address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	DestinationAddressType pulumi.IntPtrOutput `pulumi:"destinationAddressType"`
	// The destination IP address list.
	DestinationAddresses pulumi.StringArrayOutput `pulumi:"destinationAddresses"`
	// The destination domain address name.
	DestinationDomainAddressName pulumi.StringPtrOutput `pulumi:"destinationDomainAddressName"`
	// The destination domain group ID.
	DestinationDomainGroupId pulumi.StringPtrOutput `pulumi:"destinationDomainGroupId"`
	// The destination domain group name.
	DestinationDomainGroupName pulumi.StringPtrOutput `pulumi:"destinationDomainGroupName"`
	// The destination domain group type.
	// The options are as follows:
	// + **4**: application domain name group;
	// + **6**: network domain name group;
	DestinationDomainGroupType pulumi.IntPtrOutput `pulumi:"destinationDomainGroupType"`
	// The destination region list.
	// The destinationRegionList structure is documented below.
	DestinationRegionLists AclRuleDestinationRegionListArrayOutput `pulumi:"destinationRegionLists"`
	// The rule direction. The options are as follows:
	// + **0**: inbound;
	// + **1**: outbound;
	Direction      pulumi.IntOutput       `pulumi:"direction"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Whether to support persistent connections.
	LongConnectEnable pulumi.IntOutput `pulumi:"longConnectEnable"`
	// The persistent connection duration (hour).
	LongConnectTimeHour pulumi.IntOutput `pulumi:"longConnectTimeHour"`
	// The persistent connection duration (minute).
	LongConnectTimeMinute pulumi.IntOutput `pulumi:"longConnectTimeMinute"`
	// The persistent Connection Duration (second).
	LongConnectTimeSecond pulumi.IntOutput `pulumi:"longConnectTimeSecond"`
	// The rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The protected object ID.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// The predefined service group list.
	// The predefinedServiceGroups structure is documented below.
	PredefinedServiceGroups AclRulePredefinedServiceGroupsPtrOutput `pulumi:"predefinedServiceGroups"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The number of times the ACL rule is hit.
	// Setting the value to **0** will clear the hit count. Value options: **0**.
	RuleHitCount pulumi.StringOutput `pulumi:"ruleHitCount"`
	// The sequence configuration.
	// The sequence structure is documented below.
	Sequence AclRuleSequenceOutput `pulumi:"sequence"`
	// The source address group list.
	SourceAddressGroups pulumi.StringArrayOutput `pulumi:"sourceAddressGroups"`
	// The source address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	SourceAddressType pulumi.IntPtrOutput `pulumi:"sourceAddressType"`
	// The source IP address list.
	SourceAddresses pulumi.StringArrayOutput `pulumi:"sourceAddresses"`
	// The source predefined address group list.
	SourcePredefinedGroups pulumi.StringArrayOutput `pulumi:"sourcePredefinedGroups"`
	// The source region list.
	// The sourceRegionList structure is documented below.
	SourceRegionLists AclRuleSourceRegionListArrayOutput `pulumi:"sourceRegionLists"`
	// The rule status. The options are as follows:
	// + **0**: disabled;
	// + **1**: enabled;
	Status pulumi.IntOutput `pulumi:"status"`
	// The key/value pairs to associate with the ACL rule.
	//
	// <a name="Sequence"></a>
	// The `sequence` block supports:
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The rule type.
	// The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
	Type pulumi.IntOutput `pulumi:"type"`
}

// NewAclRule registers a new resource with the given unique name, arguments, and options.
func NewAclRule(ctx *pulumi.Context,
	name string, args *AclRuleArgs, opts ...pulumi.ResourceOption) (*AclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActionType == nil {
		return nil, errors.New("invalid value for required argument 'ActionType'")
	}
	if args.AddressType == nil {
		return nil, errors.New("invalid value for required argument 'AddressType'")
	}
	if args.LongConnectEnable == nil {
		return nil, errors.New("invalid value for required argument 'LongConnectEnable'")
	}
	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.Sequence == nil {
		return nil, errors.New("invalid value for required argument 'Sequence'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclRule
	err := ctx.RegisterResource("sbercloud:Cfw/aclRule:AclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclRule gets an existing AclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclRuleState, opts ...pulumi.ResourceOption) (*AclRule, error) {
	var resource AclRule
	err := ctx.ReadResource("sbercloud:Cfw/aclRule:AclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclRule resources.
type aclRuleState struct {
	// The action type.
	// The value can be `0` (allow), `1` (deny).
	ActionType *int `pulumi:"actionType"`
	// The address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	AddressType *int `pulumi:"addressType"`
	// The application list.
	// The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
	// **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
	Applications []string `pulumi:"applications"`
	// The custom service group list.
	// The customServiceGroups structure is documented below.
	CustomServiceGroups *AclRuleCustomServiceGroups `pulumi:"customServiceGroups"`
	// The custom service configuration.
	// The customServices structure is documented below.
	CustomServices []AclRuleCustomService `pulumi:"customServices"`
	// The rule description.
	Description *string `pulumi:"description"`
	// The destination address group list.
	DestinationAddressGroups []string `pulumi:"destinationAddressGroups"`
	// The destination address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	DestinationAddressType *int `pulumi:"destinationAddressType"`
	// The destination IP address list.
	DestinationAddresses []string `pulumi:"destinationAddresses"`
	// The destination domain address name.
	DestinationDomainAddressName *string `pulumi:"destinationDomainAddressName"`
	// The destination domain group ID.
	DestinationDomainGroupId *string `pulumi:"destinationDomainGroupId"`
	// The destination domain group name.
	DestinationDomainGroupName *string `pulumi:"destinationDomainGroupName"`
	// The destination domain group type.
	// The options are as follows:
	// + **4**: application domain name group;
	// + **6**: network domain name group;
	DestinationDomainGroupType *int `pulumi:"destinationDomainGroupType"`
	// The destination region list.
	// The destinationRegionList structure is documented below.
	DestinationRegionLists []AclRuleDestinationRegionList `pulumi:"destinationRegionLists"`
	// The rule direction. The options are as follows:
	// + **0**: inbound;
	// + **1**: outbound;
	Direction      *int    `pulumi:"direction"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Whether to support persistent connections.
	LongConnectEnable *int `pulumi:"longConnectEnable"`
	// The persistent connection duration (hour).
	LongConnectTimeHour *int `pulumi:"longConnectTimeHour"`
	// The persistent connection duration (minute).
	LongConnectTimeMinute *int `pulumi:"longConnectTimeMinute"`
	// The persistent Connection Duration (second).
	LongConnectTimeSecond *int `pulumi:"longConnectTimeSecond"`
	// The rule name.
	Name *string `pulumi:"name"`
	// The protected object ID.
	ObjectId *string `pulumi:"objectId"`
	// The predefined service group list.
	// The predefinedServiceGroups structure is documented below.
	PredefinedServiceGroups *AclRulePredefinedServiceGroups `pulumi:"predefinedServiceGroups"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The number of times the ACL rule is hit.
	// Setting the value to **0** will clear the hit count. Value options: **0**.
	RuleHitCount *string `pulumi:"ruleHitCount"`
	// The sequence configuration.
	// The sequence structure is documented below.
	Sequence *AclRuleSequence `pulumi:"sequence"`
	// The source address group list.
	SourceAddressGroups []string `pulumi:"sourceAddressGroups"`
	// The source address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	SourceAddressType *int `pulumi:"sourceAddressType"`
	// The source IP address list.
	SourceAddresses []string `pulumi:"sourceAddresses"`
	// The source predefined address group list.
	SourcePredefinedGroups []string `pulumi:"sourcePredefinedGroups"`
	// The source region list.
	// The sourceRegionList structure is documented below.
	SourceRegionLists []AclRuleSourceRegionList `pulumi:"sourceRegionLists"`
	// The rule status. The options are as follows:
	// + **0**: disabled;
	// + **1**: enabled;
	Status *int `pulumi:"status"`
	// The key/value pairs to associate with the ACL rule.
	//
	// <a name="Sequence"></a>
	// The `sequence` block supports:
	Tags map[string]string `pulumi:"tags"`
	// The rule type.
	// The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
	Type *int `pulumi:"type"`
}

type AclRuleState struct {
	// The action type.
	// The value can be `0` (allow), `1` (deny).
	ActionType pulumi.IntPtrInput
	// The address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	AddressType pulumi.IntPtrInput
	// The application list.
	// The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
	// **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
	Applications pulumi.StringArrayInput
	// The custom service group list.
	// The customServiceGroups structure is documented below.
	CustomServiceGroups AclRuleCustomServiceGroupsPtrInput
	// The custom service configuration.
	// The customServices structure is documented below.
	CustomServices AclRuleCustomServiceArrayInput
	// The rule description.
	Description pulumi.StringPtrInput
	// The destination address group list.
	DestinationAddressGroups pulumi.StringArrayInput
	// The destination address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	DestinationAddressType pulumi.IntPtrInput
	// The destination IP address list.
	DestinationAddresses pulumi.StringArrayInput
	// The destination domain address name.
	DestinationDomainAddressName pulumi.StringPtrInput
	// The destination domain group ID.
	DestinationDomainGroupId pulumi.StringPtrInput
	// The destination domain group name.
	DestinationDomainGroupName pulumi.StringPtrInput
	// The destination domain group type.
	// The options are as follows:
	// + **4**: application domain name group;
	// + **6**: network domain name group;
	DestinationDomainGroupType pulumi.IntPtrInput
	// The destination region list.
	// The destinationRegionList structure is documented below.
	DestinationRegionLists AclRuleDestinationRegionListArrayInput
	// The rule direction. The options are as follows:
	// + **0**: inbound;
	// + **1**: outbound;
	Direction      pulumi.IntPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Whether to support persistent connections.
	LongConnectEnable pulumi.IntPtrInput
	// The persistent connection duration (hour).
	LongConnectTimeHour pulumi.IntPtrInput
	// The persistent connection duration (minute).
	LongConnectTimeMinute pulumi.IntPtrInput
	// The persistent Connection Duration (second).
	LongConnectTimeSecond pulumi.IntPtrInput
	// The rule name.
	Name pulumi.StringPtrInput
	// The protected object ID.
	ObjectId pulumi.StringPtrInput
	// The predefined service group list.
	// The predefinedServiceGroups structure is documented below.
	PredefinedServiceGroups AclRulePredefinedServiceGroupsPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The number of times the ACL rule is hit.
	// Setting the value to **0** will clear the hit count. Value options: **0**.
	RuleHitCount pulumi.StringPtrInput
	// The sequence configuration.
	// The sequence structure is documented below.
	Sequence AclRuleSequencePtrInput
	// The source address group list.
	SourceAddressGroups pulumi.StringArrayInput
	// The source address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	SourceAddressType pulumi.IntPtrInput
	// The source IP address list.
	SourceAddresses pulumi.StringArrayInput
	// The source predefined address group list.
	SourcePredefinedGroups pulumi.StringArrayInput
	// The source region list.
	// The sourceRegionList structure is documented below.
	SourceRegionLists AclRuleSourceRegionListArrayInput
	// The rule status. The options are as follows:
	// + **0**: disabled;
	// + **1**: enabled;
	Status pulumi.IntPtrInput
	// The key/value pairs to associate with the ACL rule.
	//
	// <a name="Sequence"></a>
	// The `sequence` block supports:
	Tags pulumi.StringMapInput
	// The rule type.
	// The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
	Type pulumi.IntPtrInput
}

func (AclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRuleState)(nil)).Elem()
}

type aclRuleArgs struct {
	// The action type.
	// The value can be `0` (allow), `1` (deny).
	ActionType int `pulumi:"actionType"`
	// The address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	AddressType int `pulumi:"addressType"`
	// The application list.
	// The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
	// **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
	Applications []string `pulumi:"applications"`
	// The custom service group list.
	// The customServiceGroups structure is documented below.
	CustomServiceGroups *AclRuleCustomServiceGroups `pulumi:"customServiceGroups"`
	// The custom service configuration.
	// The customServices structure is documented below.
	CustomServices []AclRuleCustomService `pulumi:"customServices"`
	// The rule description.
	Description *string `pulumi:"description"`
	// The destination address group list.
	DestinationAddressGroups []string `pulumi:"destinationAddressGroups"`
	// The destination address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	DestinationAddressType *int `pulumi:"destinationAddressType"`
	// The destination IP address list.
	DestinationAddresses []string `pulumi:"destinationAddresses"`
	// The destination domain address name.
	DestinationDomainAddressName *string `pulumi:"destinationDomainAddressName"`
	// The destination domain group ID.
	DestinationDomainGroupId *string `pulumi:"destinationDomainGroupId"`
	// The destination domain group name.
	DestinationDomainGroupName *string `pulumi:"destinationDomainGroupName"`
	// The destination domain group type.
	// The options are as follows:
	// + **4**: application domain name group;
	// + **6**: network domain name group;
	DestinationDomainGroupType *int `pulumi:"destinationDomainGroupType"`
	// The destination region list.
	// The destinationRegionList structure is documented below.
	DestinationRegionLists []AclRuleDestinationRegionList `pulumi:"destinationRegionLists"`
	// The rule direction. The options are as follows:
	// + **0**: inbound;
	// + **1**: outbound;
	Direction      *int    `pulumi:"direction"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Whether to support persistent connections.
	LongConnectEnable int `pulumi:"longConnectEnable"`
	// The persistent connection duration (hour).
	LongConnectTimeHour *int `pulumi:"longConnectTimeHour"`
	// The persistent connection duration (minute).
	LongConnectTimeMinute *int `pulumi:"longConnectTimeMinute"`
	// The persistent Connection Duration (second).
	LongConnectTimeSecond *int `pulumi:"longConnectTimeSecond"`
	// The rule name.
	Name *string `pulumi:"name"`
	// The protected object ID.
	ObjectId string `pulumi:"objectId"`
	// The predefined service group list.
	// The predefinedServiceGroups structure is documented below.
	PredefinedServiceGroups *AclRulePredefinedServiceGroups `pulumi:"predefinedServiceGroups"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The number of times the ACL rule is hit.
	// Setting the value to **0** will clear the hit count. Value options: **0**.
	RuleHitCount *string `pulumi:"ruleHitCount"`
	// The sequence configuration.
	// The sequence structure is documented below.
	Sequence AclRuleSequence `pulumi:"sequence"`
	// The source address group list.
	SourceAddressGroups []string `pulumi:"sourceAddressGroups"`
	// The source address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	SourceAddressType *int `pulumi:"sourceAddressType"`
	// The source IP address list.
	SourceAddresses []string `pulumi:"sourceAddresses"`
	// The source predefined address group list.
	SourcePredefinedGroups []string `pulumi:"sourcePredefinedGroups"`
	// The source region list.
	// The sourceRegionList structure is documented below.
	SourceRegionLists []AclRuleSourceRegionList `pulumi:"sourceRegionLists"`
	// The rule status. The options are as follows:
	// + **0**: disabled;
	// + **1**: enabled;
	Status int `pulumi:"status"`
	// The key/value pairs to associate with the ACL rule.
	//
	// <a name="Sequence"></a>
	// The `sequence` block supports:
	Tags map[string]string `pulumi:"tags"`
	// The rule type.
	// The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
	Type int `pulumi:"type"`
}

// The set of arguments for constructing a AclRule resource.
type AclRuleArgs struct {
	// The action type.
	// The value can be `0` (allow), `1` (deny).
	ActionType pulumi.IntInput
	// The address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	AddressType pulumi.IntInput
	// The application list.
	// The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
	// **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
	Applications pulumi.StringArrayInput
	// The custom service group list.
	// The customServiceGroups structure is documented below.
	CustomServiceGroups AclRuleCustomServiceGroupsPtrInput
	// The custom service configuration.
	// The customServices structure is documented below.
	CustomServices AclRuleCustomServiceArrayInput
	// The rule description.
	Description pulumi.StringPtrInput
	// The destination address group list.
	DestinationAddressGroups pulumi.StringArrayInput
	// The destination address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	DestinationAddressType pulumi.IntPtrInput
	// The destination IP address list.
	DestinationAddresses pulumi.StringArrayInput
	// The destination domain address name.
	DestinationDomainAddressName pulumi.StringPtrInput
	// The destination domain group ID.
	DestinationDomainGroupId pulumi.StringPtrInput
	// The destination domain group name.
	DestinationDomainGroupName pulumi.StringPtrInput
	// The destination domain group type.
	// The options are as follows:
	// + **4**: application domain name group;
	// + **6**: network domain name group;
	DestinationDomainGroupType pulumi.IntPtrInput
	// The destination region list.
	// The destinationRegionList structure is documented below.
	DestinationRegionLists AclRuleDestinationRegionListArrayInput
	// The rule direction. The options are as follows:
	// + **0**: inbound;
	// + **1**: outbound;
	Direction      pulumi.IntPtrInput
	EnableForceNew pulumi.StringPtrInput
	// Whether to support persistent connections.
	LongConnectEnable pulumi.IntInput
	// The persistent connection duration (hour).
	LongConnectTimeHour pulumi.IntPtrInput
	// The persistent connection duration (minute).
	LongConnectTimeMinute pulumi.IntPtrInput
	// The persistent Connection Duration (second).
	LongConnectTimeSecond pulumi.IntPtrInput
	// The rule name.
	Name pulumi.StringPtrInput
	// The protected object ID.
	ObjectId pulumi.StringInput
	// The predefined service group list.
	// The predefinedServiceGroups structure is documented below.
	PredefinedServiceGroups AclRulePredefinedServiceGroupsPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used.
	// Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The number of times the ACL rule is hit.
	// Setting the value to **0** will clear the hit count. Value options: **0**.
	RuleHitCount pulumi.StringPtrInput
	// The sequence configuration.
	// The sequence structure is documented below.
	Sequence AclRuleSequenceInput
	// The source address group list.
	SourceAddressGroups pulumi.StringArrayInput
	// The source address type.
	// The value can be `0` (IPv4), `1` (IPv6).
	SourceAddressType pulumi.IntPtrInput
	// The source IP address list.
	SourceAddresses pulumi.StringArrayInput
	// The source predefined address group list.
	SourcePredefinedGroups pulumi.StringArrayInput
	// The source region list.
	// The sourceRegionList structure is documented below.
	SourceRegionLists AclRuleSourceRegionListArrayInput
	// The rule status. The options are as follows:
	// + **0**: disabled;
	// + **1**: enabled;
	Status pulumi.IntInput
	// The key/value pairs to associate with the ACL rule.
	//
	// <a name="Sequence"></a>
	// The `sequence` block supports:
	Tags pulumi.StringMapInput
	// The rule type.
	// The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
	Type pulumi.IntInput
}

func (AclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRuleArgs)(nil)).Elem()
}

type AclRuleInput interface {
	pulumi.Input

	ToAclRuleOutput() AclRuleOutput
	ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput
}

func (*AclRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRule)(nil)).Elem()
}

func (i *AclRule) ToAclRuleOutput() AclRuleOutput {
	return i.ToAclRuleOutputWithContext(context.Background())
}

func (i *AclRule) ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleOutput)
}

// AclRuleArrayInput is an input type that accepts AclRuleArray and AclRuleArrayOutput values.
// You can construct a concrete instance of `AclRuleArrayInput` via:
//
//	AclRuleArray{ AclRuleArgs{...} }
type AclRuleArrayInput interface {
	pulumi.Input

	ToAclRuleArrayOutput() AclRuleArrayOutput
	ToAclRuleArrayOutputWithContext(context.Context) AclRuleArrayOutput
}

type AclRuleArray []AclRuleInput

func (AclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRule)(nil)).Elem()
}

func (i AclRuleArray) ToAclRuleArrayOutput() AclRuleArrayOutput {
	return i.ToAclRuleArrayOutputWithContext(context.Background())
}

func (i AclRuleArray) ToAclRuleArrayOutputWithContext(ctx context.Context) AclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleArrayOutput)
}

// AclRuleMapInput is an input type that accepts AclRuleMap and AclRuleMapOutput values.
// You can construct a concrete instance of `AclRuleMapInput` via:
//
//	AclRuleMap{ "key": AclRuleArgs{...} }
type AclRuleMapInput interface {
	pulumi.Input

	ToAclRuleMapOutput() AclRuleMapOutput
	ToAclRuleMapOutputWithContext(context.Context) AclRuleMapOutput
}

type AclRuleMap map[string]AclRuleInput

func (AclRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRule)(nil)).Elem()
}

func (i AclRuleMap) ToAclRuleMapOutput() AclRuleMapOutput {
	return i.ToAclRuleMapOutputWithContext(context.Background())
}

func (i AclRuleMap) ToAclRuleMapOutputWithContext(ctx context.Context) AclRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleMapOutput)
}

type AclRuleOutput struct{ *pulumi.OutputState }

func (AclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRule)(nil)).Elem()
}

func (o AclRuleOutput) ToAclRuleOutput() AclRuleOutput {
	return o
}

func (o AclRuleOutput) ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput {
	return o
}

// The action type.
// The value can be `0` (allow), `1` (deny).
func (o AclRuleOutput) ActionType() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.ActionType }).(pulumi.IntOutput)
}

// The address type.
// The value can be `0` (IPv4), `1` (IPv6).
func (o AclRuleOutput) AddressType() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.AddressType }).(pulumi.IntOutput)
}

// The application list.
// The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
// **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
func (o AclRuleOutput) Applications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.Applications }).(pulumi.StringArrayOutput)
}

// The custom service group list.
// The customServiceGroups structure is documented below.
func (o AclRuleOutput) CustomServiceGroups() AclRuleCustomServiceGroupsPtrOutput {
	return o.ApplyT(func(v *AclRule) AclRuleCustomServiceGroupsPtrOutput { return v.CustomServiceGroups }).(AclRuleCustomServiceGroupsPtrOutput)
}

// The custom service configuration.
// The customServices structure is documented below.
func (o AclRuleOutput) CustomServices() AclRuleCustomServiceArrayOutput {
	return o.ApplyT(func(v *AclRule) AclRuleCustomServiceArrayOutput { return v.CustomServices }).(AclRuleCustomServiceArrayOutput)
}

// The rule description.
func (o AclRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The destination address group list.
func (o AclRuleOutput) DestinationAddressGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.DestinationAddressGroups }).(pulumi.StringArrayOutput)
}

// The destination address type.
// The value can be `0` (IPv4), `1` (IPv6).
func (o AclRuleOutput) DestinationAddressType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntPtrOutput { return v.DestinationAddressType }).(pulumi.IntPtrOutput)
}

// The destination IP address list.
func (o AclRuleOutput) DestinationAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.DestinationAddresses }).(pulumi.StringArrayOutput)
}

// The destination domain address name.
func (o AclRuleOutput) DestinationDomainAddressName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.DestinationDomainAddressName }).(pulumi.StringPtrOutput)
}

// The destination domain group ID.
func (o AclRuleOutput) DestinationDomainGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.DestinationDomainGroupId }).(pulumi.StringPtrOutput)
}

// The destination domain group name.
func (o AclRuleOutput) DestinationDomainGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.DestinationDomainGroupName }).(pulumi.StringPtrOutput)
}

// The destination domain group type.
// The options are as follows:
// + **4**: application domain name group;
// + **6**: network domain name group;
func (o AclRuleOutput) DestinationDomainGroupType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntPtrOutput { return v.DestinationDomainGroupType }).(pulumi.IntPtrOutput)
}

// The destination region list.
// The destinationRegionList structure is documented below.
func (o AclRuleOutput) DestinationRegionLists() AclRuleDestinationRegionListArrayOutput {
	return o.ApplyT(func(v *AclRule) AclRuleDestinationRegionListArrayOutput { return v.DestinationRegionLists }).(AclRuleDestinationRegionListArrayOutput)
}

// The rule direction. The options are as follows:
// + **0**: inbound;
// + **1**: outbound;
func (o AclRuleOutput) Direction() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.Direction }).(pulumi.IntOutput)
}

func (o AclRuleOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Whether to support persistent connections.
func (o AclRuleOutput) LongConnectEnable() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.LongConnectEnable }).(pulumi.IntOutput)
}

// The persistent connection duration (hour).
func (o AclRuleOutput) LongConnectTimeHour() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.LongConnectTimeHour }).(pulumi.IntOutput)
}

// The persistent connection duration (minute).
func (o AclRuleOutput) LongConnectTimeMinute() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.LongConnectTimeMinute }).(pulumi.IntOutput)
}

// The persistent Connection Duration (second).
func (o AclRuleOutput) LongConnectTimeSecond() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.LongConnectTimeSecond }).(pulumi.IntOutput)
}

// The rule name.
func (o AclRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The protected object ID.
func (o AclRuleOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// The predefined service group list.
// The predefinedServiceGroups structure is documented below.
func (o AclRuleOutput) PredefinedServiceGroups() AclRulePredefinedServiceGroupsPtrOutput {
	return o.ApplyT(func(v *AclRule) AclRulePredefinedServiceGroupsPtrOutput { return v.PredefinedServiceGroups }).(AclRulePredefinedServiceGroupsPtrOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used.
// Changing this creates a new resource.
func (o AclRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The number of times the ACL rule is hit.
// Setting the value to **0** will clear the hit count. Value options: **0**.
func (o AclRuleOutput) RuleHitCount() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.RuleHitCount }).(pulumi.StringOutput)
}

// The sequence configuration.
// The sequence structure is documented below.
func (o AclRuleOutput) Sequence() AclRuleSequenceOutput {
	return o.ApplyT(func(v *AclRule) AclRuleSequenceOutput { return v.Sequence }).(AclRuleSequenceOutput)
}

// The source address group list.
func (o AclRuleOutput) SourceAddressGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.SourceAddressGroups }).(pulumi.StringArrayOutput)
}

// The source address type.
// The value can be `0` (IPv4), `1` (IPv6).
func (o AclRuleOutput) SourceAddressType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntPtrOutput { return v.SourceAddressType }).(pulumi.IntPtrOutput)
}

// The source IP address list.
func (o AclRuleOutput) SourceAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.SourceAddresses }).(pulumi.StringArrayOutput)
}

// The source predefined address group list.
func (o AclRuleOutput) SourcePredefinedGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.SourcePredefinedGroups }).(pulumi.StringArrayOutput)
}

// The source region list.
// The sourceRegionList structure is documented below.
func (o AclRuleOutput) SourceRegionLists() AclRuleSourceRegionListArrayOutput {
	return o.ApplyT(func(v *AclRule) AclRuleSourceRegionListArrayOutput { return v.SourceRegionLists }).(AclRuleSourceRegionListArrayOutput)
}

// The rule status. The options are as follows:
// + **0**: disabled;
// + **1**: enabled;
func (o AclRuleOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// The key/value pairs to associate with the ACL rule.
//
// <a name="Sequence"></a>
// The `sequence` block supports:
func (o AclRuleOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The rule type.
// The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
func (o AclRuleOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.Type }).(pulumi.IntOutput)
}

type AclRuleArrayOutput struct{ *pulumi.OutputState }

func (AclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRule)(nil)).Elem()
}

func (o AclRuleArrayOutput) ToAclRuleArrayOutput() AclRuleArrayOutput {
	return o
}

func (o AclRuleArrayOutput) ToAclRuleArrayOutputWithContext(ctx context.Context) AclRuleArrayOutput {
	return o
}

func (o AclRuleArrayOutput) Index(i pulumi.IntInput) AclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclRule {
		return vs[0].([]*AclRule)[vs[1].(int)]
	}).(AclRuleOutput)
}

type AclRuleMapOutput struct{ *pulumi.OutputState }

func (AclRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRule)(nil)).Elem()
}

func (o AclRuleMapOutput) ToAclRuleMapOutput() AclRuleMapOutput {
	return o
}

func (o AclRuleMapOutput) ToAclRuleMapOutputWithContext(ctx context.Context) AclRuleMapOutput {
	return o
}

func (o AclRuleMapOutput) MapIndex(k pulumi.StringInput) AclRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclRule {
		return vs[0].(map[string]*AclRule)[vs[1].(string)]
	}).(AclRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleInput)(nil)).Elem(), &AclRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleArrayInput)(nil)).Elem(), AclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleMapInput)(nil)).Elem(), AclRuleMap{})
	pulumi.RegisterOutputType(AclRuleOutput{})
	pulumi.RegisterOutputType(AclRuleArrayOutput{})
	pulumi.RegisterOutputType(AclRuleMapOutput{})
}

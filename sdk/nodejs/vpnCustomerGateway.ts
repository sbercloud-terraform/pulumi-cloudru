// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class VpnCustomerGateway extends pulumi.CustomResource {
    /**
     * Get an existing VpnCustomerGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnCustomerGatewayState, opts?: pulumi.CustomResourceOptions): VpnCustomerGateway {
        return new VpnCustomerGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/vpnCustomerGateway:VpnCustomerGateway';

    /**
     * Returns true if the given object is an instance of VpnCustomerGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnCustomerGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnCustomerGateway.__pulumiType;
    }

    /**
     * The BGP ASN number of the customer gateway, the default value is 65000.
     */
    declare public readonly asn: pulumi.Output<number | undefined>;
    declare public readonly certificateContent: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly certificateId: pulumi.Output<string>;
    /**
     * The create time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public /*out*/ readonly expireTime: pulumi.Output<string>;
    /**
     * The identifier type of a customer gateway.
     */
    declare public readonly idType: pulumi.Output<string | undefined>;
    /**
     * The identifier of a customer gateway.
     */
    declare public readonly idValue: pulumi.Output<string>;
    /**
     * The IP address of the customer gateway.
     */
    declare public readonly ip: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly isUpdatable: pulumi.Output<boolean>;
    declare public /*out*/ readonly issuer: pulumi.Output<string>;
    /**
     * The customer gateway name.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * The route mode of the customer gateway.
     */
    declare public readonly routeMode: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly serialNumber: pulumi.Output<string>;
    declare public /*out*/ readonly signatureAlgorithm: pulumi.Output<string>;
    declare public /*out*/ readonly subject: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The update time.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a VpnCustomerGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpnCustomerGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnCustomerGatewayArgs | VpnCustomerGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnCustomerGatewayState | undefined;
            resourceInputs["asn"] = state?.asn;
            resourceInputs["certificateContent"] = state?.certificateContent;
            resourceInputs["certificateId"] = state?.certificateId;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["expireTime"] = state?.expireTime;
            resourceInputs["idType"] = state?.idType;
            resourceInputs["idValue"] = state?.idValue;
            resourceInputs["ip"] = state?.ip;
            resourceInputs["isUpdatable"] = state?.isUpdatable;
            resourceInputs["issuer"] = state?.issuer;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["routeMode"] = state?.routeMode;
            resourceInputs["serialNumber"] = state?.serialNumber;
            resourceInputs["signatureAlgorithm"] = state?.signatureAlgorithm;
            resourceInputs["subject"] = state?.subject;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as VpnCustomerGatewayArgs | undefined;
            resourceInputs["asn"] = args?.asn;
            resourceInputs["certificateContent"] = args?.certificateContent;
            resourceInputs["idType"] = args?.idType;
            resourceInputs["idValue"] = args?.idValue;
            resourceInputs["ip"] = args?.ip;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["routeMode"] = args?.routeMode;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["certificateId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["isUpdatable"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["signatureAlgorithm"] = undefined /*out*/;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnCustomerGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnCustomerGateway resources.
 */
export interface VpnCustomerGatewayState {
    /**
     * The BGP ASN number of the customer gateway, the default value is 65000.
     */
    asn?: pulumi.Input<number>;
    certificateContent?: pulumi.Input<string>;
    certificateId?: pulumi.Input<string>;
    /**
     * The create time.
     */
    createdAt?: pulumi.Input<string>;
    expireTime?: pulumi.Input<string>;
    /**
     * The identifier type of a customer gateway.
     */
    idType?: pulumi.Input<string>;
    /**
     * The identifier of a customer gateway.
     */
    idValue?: pulumi.Input<string>;
    /**
     * The IP address of the customer gateway.
     */
    ip?: pulumi.Input<string>;
    isUpdatable?: pulumi.Input<boolean>;
    issuer?: pulumi.Input<string>;
    /**
     * The customer gateway name.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The route mode of the customer gateway.
     */
    routeMode?: pulumi.Input<string>;
    serialNumber?: pulumi.Input<string>;
    signatureAlgorithm?: pulumi.Input<string>;
    subject?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The update time.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnCustomerGateway resource.
 */
export interface VpnCustomerGatewayArgs {
    /**
     * The BGP ASN number of the customer gateway, the default value is 65000.
     */
    asn?: pulumi.Input<number>;
    certificateContent?: pulumi.Input<string>;
    /**
     * The identifier type of a customer gateway.
     */
    idType?: pulumi.Input<string>;
    /**
     * The identifier of a customer gateway.
     */
    idValue?: pulumi.Input<string>;
    /**
     * The IP address of the customer gateway.
     */
    ip?: pulumi.Input<string>;
    /**
     * The customer gateway name.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The route mode of the customer gateway.
     */
    routeMode?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

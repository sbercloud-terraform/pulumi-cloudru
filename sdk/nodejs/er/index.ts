// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AssociationArgs, AssociationState } from "./association";
export type Association = import("./association").Association;
export const Association: typeof import("./association").Association = null as any;
utilities.lazyLoad(exports, ["Association"], () => require("./association"));

export { AttachmentAccepterArgs, AttachmentAccepterState } from "./attachmentAccepter";
export type AttachmentAccepter = import("./attachmentAccepter").AttachmentAccepter;
export const AttachmentAccepter: typeof import("./attachmentAccepter").AttachmentAccepter = null as any;
utilities.lazyLoad(exports, ["AttachmentAccepter"], () => require("./attachmentAccepter"));

export { FlowLogArgs, FlowLogState } from "./flowLog";
export type FlowLog = import("./flowLog").FlowLog;
export const FlowLog: typeof import("./flowLog").FlowLog = null as any;
utilities.lazyLoad(exports, ["FlowLog"], () => require("./flowLog"));

export { GetAssociationsArgs, GetAssociationsResult, GetAssociationsOutputArgs } from "./getAssociations";
export const getAssociations: typeof import("./getAssociations").getAssociations = null as any;
export const getAssociationsOutput: typeof import("./getAssociations").getAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["getAssociations","getAssociationsOutput"], () => require("./getAssociations"));

export { GetAttachmentsArgs, GetAttachmentsResult, GetAttachmentsOutputArgs } from "./getAttachments";
export const getAttachments: typeof import("./getAttachments").getAttachments = null as any;
export const getAttachmentsOutput: typeof import("./getAttachments").getAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["getAttachments","getAttachmentsOutput"], () => require("./getAttachments"));

export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));

export { GetAvailableRoutesArgs, GetAvailableRoutesResult, GetAvailableRoutesOutputArgs } from "./getAvailableRoutes";
export const getAvailableRoutes: typeof import("./getAvailableRoutes").getAvailableRoutes = null as any;
export const getAvailableRoutesOutput: typeof import("./getAvailableRoutes").getAvailableRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailableRoutes","getAvailableRoutesOutput"], () => require("./getAvailableRoutes"));

export { GetFlowLogsArgs, GetFlowLogsResult, GetFlowLogsOutputArgs } from "./getFlowLogs";
export const getFlowLogs: typeof import("./getFlowLogs").getFlowLogs = null as any;
export const getFlowLogsOutput: typeof import("./getFlowLogs").getFlowLogsOutput = null as any;
utilities.lazyLoad(exports, ["getFlowLogs","getFlowLogsOutput"], () => require("./getFlowLogs"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetPropagationsArgs, GetPropagationsResult, GetPropagationsOutputArgs } from "./getPropagations";
export const getPropagations: typeof import("./getPropagations").getPropagations = null as any;
export const getPropagationsOutput: typeof import("./getPropagations").getPropagationsOutput = null as any;
utilities.lazyLoad(exports, ["getPropagations","getPropagationsOutput"], () => require("./getPropagations"));

export { GetQuotasArgs, GetQuotasResult, GetQuotasOutputArgs } from "./getQuotas";
export const getQuotas: typeof import("./getQuotas").getQuotas = null as any;
export const getQuotasOutput: typeof import("./getQuotas").getQuotasOutput = null as any;
utilities.lazyLoad(exports, ["getQuotas","getQuotasOutput"], () => require("./getQuotas"));

export { GetResourceTagsArgs, GetResourceTagsResult, GetResourceTagsOutputArgs } from "./getResourceTags";
export const getResourceTags: typeof import("./getResourceTags").getResourceTags = null as any;
export const getResourceTagsOutput: typeof import("./getResourceTags").getResourceTagsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceTags","getResourceTagsOutput"], () => require("./getResourceTags"));

export { GetRouteTablesArgs, GetRouteTablesResult, GetRouteTablesOutputArgs } from "./getRouteTables";
export const getRouteTables: typeof import("./getRouteTables").getRouteTables = null as any;
export const getRouteTablesOutput: typeof import("./getRouteTables").getRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTables","getRouteTablesOutput"], () => require("./getRouteTables"));

export { GetTagsArgs, GetTagsResult, GetTagsOutputArgs } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { PropagationArgs, PropagationState } from "./propagation";
export type Propagation = import("./propagation").Propagation;
export const Propagation: typeof import("./propagation").Propagation = null as any;
utilities.lazyLoad(exports, ["Propagation"], () => require("./propagation"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { StaticRouteArgs, StaticRouteState } from "./staticRoute";
export type StaticRoute = import("./staticRoute").StaticRoute;
export const StaticRoute: typeof import("./staticRoute").StaticRoute = null as any;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));

export { VpcAttachmentArgs, VpcAttachmentState } from "./vpcAttachment";
export type VpcAttachment = import("./vpcAttachment").VpcAttachment;
export const VpcAttachment: typeof import("./vpcAttachment").VpcAttachment = null as any;
utilities.lazyLoad(exports, ["VpcAttachment"], () => require("./vpcAttachment"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sbercloud:Er/association:Association":
                return new Association(name, <any>undefined, { urn })
            case "sbercloud:Er/attachmentAccepter:AttachmentAccepter":
                return new AttachmentAccepter(name, <any>undefined, { urn })
            case "sbercloud:Er/flowLog:FlowLog":
                return new FlowLog(name, <any>undefined, { urn })
            case "sbercloud:Er/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "sbercloud:Er/propagation:Propagation":
                return new Propagation(name, <any>undefined, { urn })
            case "sbercloud:Er/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "sbercloud:Er/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "sbercloud:Er/vpcAttachment:VpcAttachment":
                return new VpcAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sbercloud", "Er/association", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Er/attachmentAccepter", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Er/flowLog", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Er/instance", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Er/propagation", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Er/routeTable", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Er/staticRoute", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Er/vpcAttachment", _module)

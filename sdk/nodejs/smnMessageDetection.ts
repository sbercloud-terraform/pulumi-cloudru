// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SmnMessageDetection extends pulumi.CustomResource {
    /**
     * Get an existing SmnMessageDetection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SmnMessageDetectionState, opts?: pulumi.CustomResourceOptions): SmnMessageDetection {
        return new SmnMessageDetection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/smnMessageDetection:SmnMessageDetection';

    /**
     * Returns true if the given object is an instance of SmnMessageDetection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SmnMessageDetection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmnMessageDetection.__pulumiType;
    }

    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the endpoint address to be detected.
     */
    public readonly endpoint!: pulumi.Output<string>;
    /**
     * Specifies the extended key/value for subscriptions over HTTP or HTTPS.
     */
    public readonly extension!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the protocol type.
     */
    public readonly protocol!: pulumi.Output<string>;
    public readonly region!: pulumi.Output<string>;
    /**
     * The message detection result.
     */
    public /*out*/ readonly result!: pulumi.Output<string>;
    /**
     * Specifies the resource identifier of a topic.
     */
    public readonly topicUrn!: pulumi.Output<string>;

    /**
     * Create a SmnMessageDetection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SmnMessageDetectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SmnMessageDetectionArgs | SmnMessageDetectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SmnMessageDetectionState | undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["endpoint"] = state ? state.endpoint : undefined;
            resourceInputs["extension"] = state ? state.extension : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["result"] = state ? state.result : undefined;
            resourceInputs["topicUrn"] = state ? state.topicUrn : undefined;
        } else {
            const args = argsOrState as SmnMessageDetectionArgs | undefined;
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.topicUrn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicUrn'");
            }
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["endpoint"] = args ? args.endpoint : undefined;
            resourceInputs["extension"] = args ? args.extension : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["topicUrn"] = args ? args.topicUrn : undefined;
            resourceInputs["result"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmnMessageDetection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SmnMessageDetection resources.
 */
export interface SmnMessageDetectionState {
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the endpoint address to be detected.
     */
    endpoint?: pulumi.Input<string>;
    /**
     * Specifies the extended key/value for subscriptions over HTTP or HTTPS.
     */
    extension?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the protocol type.
     */
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The message detection result.
     */
    result?: pulumi.Input<string>;
    /**
     * Specifies the resource identifier of a topic.
     */
    topicUrn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SmnMessageDetection resource.
 */
export interface SmnMessageDetectionArgs {
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the endpoint address to be detected.
     */
    endpoint: pulumi.Input<string>;
    /**
     * Specifies the extended key/value for subscriptions over HTTP or HTTPS.
     */
    extension?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the protocol type.
     */
    protocol: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the resource identifier of a topic.
     */
    topicUrn: pulumi.Input<string>;
}

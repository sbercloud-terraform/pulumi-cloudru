# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CbhAssetAgencyAuthorizationArgs', 'CbhAssetAgencyAuthorization']

@pulumi.input_type
class CbhAssetAgencyAuthorizationArgs:
    def __init__(__self__, *,
                 csms: pulumi.Input[_builtins.bool],
                 kms: pulumi.Input[_builtins.bool],
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CbhAssetAgencyAuthorization resource.
        """
        pulumi.set(__self__, "csms", csms)
        pulumi.set(__self__, "kms", kms)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def csms(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "csms")

    @csms.setter
    def csms(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "csms", value)

    @_builtins.property
    @pulumi.getter
    def kms(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "kms")

    @kms.setter
    def kms(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "kms", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CbhAssetAgencyAuthorizationState:
    def __init__(__self__, *,
                 csms: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CbhAssetAgencyAuthorization resources.
        """
        if csms is not None:
            pulumi.set(__self__, "csms", csms)
        if kms is not None:
            pulumi.set(__self__, "kms", kms)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def csms(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "csms")

    @csms.setter
    def csms(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "csms", value)

    @_builtins.property
    @pulumi.getter
    def kms(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "kms")

    @kms.setter
    def kms(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "kms", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.type_token("cloudru:index/cbhAssetAgencyAuthorization:CbhAssetAgencyAuthorization")
class CbhAssetAgencyAuthorization(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 csms: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CbhAssetAgencyAuthorization resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CbhAssetAgencyAuthorizationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CbhAssetAgencyAuthorization resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CbhAssetAgencyAuthorizationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CbhAssetAgencyAuthorizationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 csms: Optional[pulumi.Input[_builtins.bool]] = None,
                 kms: Optional[pulumi.Input[_builtins.bool]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CbhAssetAgencyAuthorizationArgs.__new__(CbhAssetAgencyAuthorizationArgs)

            if csms is None and not opts.urn:
                raise TypeError("Missing required property 'csms'")
            __props__.__dict__["csms"] = csms
            if kms is None and not opts.urn:
                raise TypeError("Missing required property 'kms'")
            __props__.__dict__["kms"] = kms
            __props__.__dict__["region"] = region
        super(CbhAssetAgencyAuthorization, __self__).__init__(
            'cloudru:index/cbhAssetAgencyAuthorization:CbhAssetAgencyAuthorization',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            csms: Optional[pulumi.Input[_builtins.bool]] = None,
            kms: Optional[pulumi.Input[_builtins.bool]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None) -> 'CbhAssetAgencyAuthorization':
        """
        Get an existing CbhAssetAgencyAuthorization resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CbhAssetAgencyAuthorizationState.__new__(_CbhAssetAgencyAuthorizationState)

        __props__.__dict__["csms"] = csms
        __props__.__dict__["kms"] = kms
        __props__.__dict__["region"] = region
        return CbhAssetAgencyAuthorization(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def csms(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "csms")

    @_builtins.property
    @pulumi.getter
    def kms(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "kms")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")


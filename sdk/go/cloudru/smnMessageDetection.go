// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SmnMessageDetection struct {
	pulumi.CustomResourceState

	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the endpoint address to be detected.
	Endpoint pulumi.StringOutput `pulumi:"endpoint"`
	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	Extension pulumi.StringMapOutput `pulumi:"extension"`
	// Specifies the protocol type.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	Region   pulumi.StringOutput `pulumi:"region"`
	// The message detection result.
	Result pulumi.StringOutput `pulumi:"result"`
	// Specifies the resource identifier of a topic.
	TopicUrn pulumi.StringOutput `pulumi:"topicUrn"`
}

// NewSmnMessageDetection registers a new resource with the given unique name, arguments, and options.
func NewSmnMessageDetection(ctx *pulumi.Context,
	name string, args *SmnMessageDetectionArgs, opts ...pulumi.ResourceOption) (*SmnMessageDetection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.TopicUrn == nil {
		return nil, errors.New("invalid value for required argument 'TopicUrn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmnMessageDetection
	err := ctx.RegisterResource("sbercloud:index/smnMessageDetection:SmnMessageDetection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmnMessageDetection gets an existing SmnMessageDetection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmnMessageDetection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmnMessageDetectionState, opts ...pulumi.ResourceOption) (*SmnMessageDetection, error) {
	var resource SmnMessageDetection
	err := ctx.ReadResource("sbercloud:index/smnMessageDetection:SmnMessageDetection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmnMessageDetection resources.
type smnMessageDetectionState struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the endpoint address to be detected.
	Endpoint *string `pulumi:"endpoint"`
	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	Extension map[string]string `pulumi:"extension"`
	// Specifies the protocol type.
	Protocol *string `pulumi:"protocol"`
	Region   *string `pulumi:"region"`
	// The message detection result.
	Result *string `pulumi:"result"`
	// Specifies the resource identifier of a topic.
	TopicUrn *string `pulumi:"topicUrn"`
}

type SmnMessageDetectionState struct {
	EnableForceNew pulumi.StringPtrInput
	// Specifies the endpoint address to be detected.
	Endpoint pulumi.StringPtrInput
	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	Extension pulumi.StringMapInput
	// Specifies the protocol type.
	Protocol pulumi.StringPtrInput
	Region   pulumi.StringPtrInput
	// The message detection result.
	Result pulumi.StringPtrInput
	// Specifies the resource identifier of a topic.
	TopicUrn pulumi.StringPtrInput
}

func (SmnMessageDetectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*smnMessageDetectionState)(nil)).Elem()
}

type smnMessageDetectionArgs struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the endpoint address to be detected.
	Endpoint string `pulumi:"endpoint"`
	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	Extension map[string]string `pulumi:"extension"`
	// Specifies the protocol type.
	Protocol string  `pulumi:"protocol"`
	Region   *string `pulumi:"region"`
	// Specifies the resource identifier of a topic.
	TopicUrn string `pulumi:"topicUrn"`
}

// The set of arguments for constructing a SmnMessageDetection resource.
type SmnMessageDetectionArgs struct {
	EnableForceNew pulumi.StringPtrInput
	// Specifies the endpoint address to be detected.
	Endpoint pulumi.StringInput
	// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
	Extension pulumi.StringMapInput
	// Specifies the protocol type.
	Protocol pulumi.StringInput
	Region   pulumi.StringPtrInput
	// Specifies the resource identifier of a topic.
	TopicUrn pulumi.StringInput
}

func (SmnMessageDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smnMessageDetectionArgs)(nil)).Elem()
}

type SmnMessageDetectionInput interface {
	pulumi.Input

	ToSmnMessageDetectionOutput() SmnMessageDetectionOutput
	ToSmnMessageDetectionOutputWithContext(ctx context.Context) SmnMessageDetectionOutput
}

func (*SmnMessageDetection) ElementType() reflect.Type {
	return reflect.TypeOf((**SmnMessageDetection)(nil)).Elem()
}

func (i *SmnMessageDetection) ToSmnMessageDetectionOutput() SmnMessageDetectionOutput {
	return i.ToSmnMessageDetectionOutputWithContext(context.Background())
}

func (i *SmnMessageDetection) ToSmnMessageDetectionOutputWithContext(ctx context.Context) SmnMessageDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnMessageDetectionOutput)
}

// SmnMessageDetectionArrayInput is an input type that accepts SmnMessageDetectionArray and SmnMessageDetectionArrayOutput values.
// You can construct a concrete instance of `SmnMessageDetectionArrayInput` via:
//
//	SmnMessageDetectionArray{ SmnMessageDetectionArgs{...} }
type SmnMessageDetectionArrayInput interface {
	pulumi.Input

	ToSmnMessageDetectionArrayOutput() SmnMessageDetectionArrayOutput
	ToSmnMessageDetectionArrayOutputWithContext(context.Context) SmnMessageDetectionArrayOutput
}

type SmnMessageDetectionArray []SmnMessageDetectionInput

func (SmnMessageDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmnMessageDetection)(nil)).Elem()
}

func (i SmnMessageDetectionArray) ToSmnMessageDetectionArrayOutput() SmnMessageDetectionArrayOutput {
	return i.ToSmnMessageDetectionArrayOutputWithContext(context.Background())
}

func (i SmnMessageDetectionArray) ToSmnMessageDetectionArrayOutputWithContext(ctx context.Context) SmnMessageDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnMessageDetectionArrayOutput)
}

// SmnMessageDetectionMapInput is an input type that accepts SmnMessageDetectionMap and SmnMessageDetectionMapOutput values.
// You can construct a concrete instance of `SmnMessageDetectionMapInput` via:
//
//	SmnMessageDetectionMap{ "key": SmnMessageDetectionArgs{...} }
type SmnMessageDetectionMapInput interface {
	pulumi.Input

	ToSmnMessageDetectionMapOutput() SmnMessageDetectionMapOutput
	ToSmnMessageDetectionMapOutputWithContext(context.Context) SmnMessageDetectionMapOutput
}

type SmnMessageDetectionMap map[string]SmnMessageDetectionInput

func (SmnMessageDetectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmnMessageDetection)(nil)).Elem()
}

func (i SmnMessageDetectionMap) ToSmnMessageDetectionMapOutput() SmnMessageDetectionMapOutput {
	return i.ToSmnMessageDetectionMapOutputWithContext(context.Background())
}

func (i SmnMessageDetectionMap) ToSmnMessageDetectionMapOutputWithContext(ctx context.Context) SmnMessageDetectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnMessageDetectionMapOutput)
}

type SmnMessageDetectionOutput struct{ *pulumi.OutputState }

func (SmnMessageDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmnMessageDetection)(nil)).Elem()
}

func (o SmnMessageDetectionOutput) ToSmnMessageDetectionOutput() SmnMessageDetectionOutput {
	return o
}

func (o SmnMessageDetectionOutput) ToSmnMessageDetectionOutputWithContext(ctx context.Context) SmnMessageDetectionOutput {
	return o
}

func (o SmnMessageDetectionOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmnMessageDetection) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the endpoint address to be detected.
func (o SmnMessageDetectionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnMessageDetection) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

// Specifies the extended key/value for subscriptions over HTTP or HTTPS.
func (o SmnMessageDetectionOutput) Extension() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SmnMessageDetection) pulumi.StringMapOutput { return v.Extension }).(pulumi.StringMapOutput)
}

// Specifies the protocol type.
func (o SmnMessageDetectionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnMessageDetection) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o SmnMessageDetectionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnMessageDetection) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The message detection result.
func (o SmnMessageDetectionOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnMessageDetection) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

// Specifies the resource identifier of a topic.
func (o SmnMessageDetectionOutput) TopicUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnMessageDetection) pulumi.StringOutput { return v.TopicUrn }).(pulumi.StringOutput)
}

type SmnMessageDetectionArrayOutput struct{ *pulumi.OutputState }

func (SmnMessageDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmnMessageDetection)(nil)).Elem()
}

func (o SmnMessageDetectionArrayOutput) ToSmnMessageDetectionArrayOutput() SmnMessageDetectionArrayOutput {
	return o
}

func (o SmnMessageDetectionArrayOutput) ToSmnMessageDetectionArrayOutputWithContext(ctx context.Context) SmnMessageDetectionArrayOutput {
	return o
}

func (o SmnMessageDetectionArrayOutput) Index(i pulumi.IntInput) SmnMessageDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmnMessageDetection {
		return vs[0].([]*SmnMessageDetection)[vs[1].(int)]
	}).(SmnMessageDetectionOutput)
}

type SmnMessageDetectionMapOutput struct{ *pulumi.OutputState }

func (SmnMessageDetectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmnMessageDetection)(nil)).Elem()
}

func (o SmnMessageDetectionMapOutput) ToSmnMessageDetectionMapOutput() SmnMessageDetectionMapOutput {
	return o
}

func (o SmnMessageDetectionMapOutput) ToSmnMessageDetectionMapOutputWithContext(ctx context.Context) SmnMessageDetectionMapOutput {
	return o
}

func (o SmnMessageDetectionMapOutput) MapIndex(k pulumi.StringInput) SmnMessageDetectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmnMessageDetection {
		return vs[0].(map[string]*SmnMessageDetection)[vs[1].(string)]
	}).(SmnMessageDetectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmnMessageDetectionInput)(nil)).Elem(), &SmnMessageDetection{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmnMessageDetectionArrayInput)(nil)).Elem(), SmnMessageDetectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmnMessageDetectionMapInput)(nil)).Elem(), SmnMessageDetectionMap{})
	pulumi.RegisterOutputType(SmnMessageDetectionOutput{})
	pulumi.RegisterOutputType(SmnMessageDetectionArrayOutput{})
	pulumi.RegisterOutputType(SmnMessageDetectionMapOutput{})
}

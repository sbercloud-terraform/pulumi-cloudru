// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type IdentityRoleAssignmentV3 struct {
	pulumi.CustomResourceState

	DomainId            pulumi.StringPtrOutput `pulumi:"domainId"`
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	GroupId             pulumi.StringOutput    `pulumi:"groupId"`
	ProjectId           pulumi.StringPtrOutput `pulumi:"projectId"`
	RoleId              pulumi.StringOutput    `pulumi:"roleId"`
}

// NewIdentityRoleAssignmentV3 registers a new resource with the given unique name, arguments, and options.
func NewIdentityRoleAssignmentV3(ctx *pulumi.Context,
	name string, args *IdentityRoleAssignmentV3Args, opts ...pulumi.ResourceOption) (*IdentityRoleAssignmentV3, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IdentityRoleAssignmentV3
	err := ctx.RegisterResource("cloudru:index/identityRoleAssignmentV3:IdentityRoleAssignmentV3", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityRoleAssignmentV3 gets an existing IdentityRoleAssignmentV3 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityRoleAssignmentV3(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityRoleAssignmentV3State, opts ...pulumi.ResourceOption) (*IdentityRoleAssignmentV3, error) {
	var resource IdentityRoleAssignmentV3
	err := ctx.ReadResource("cloudru:index/identityRoleAssignmentV3:IdentityRoleAssignmentV3", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityRoleAssignmentV3 resources.
type identityRoleAssignmentV3State struct {
	DomainId            *string `pulumi:"domainId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	GroupId             *string `pulumi:"groupId"`
	ProjectId           *string `pulumi:"projectId"`
	RoleId              *string `pulumi:"roleId"`
}

type IdentityRoleAssignmentV3State struct {
	DomainId            pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	GroupId             pulumi.StringPtrInput
	ProjectId           pulumi.StringPtrInput
	RoleId              pulumi.StringPtrInput
}

func (IdentityRoleAssignmentV3State) ElementType() reflect.Type {
	return reflect.TypeOf((*identityRoleAssignmentV3State)(nil)).Elem()
}

type identityRoleAssignmentV3Args struct {
	DomainId            *string `pulumi:"domainId"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	GroupId             string  `pulumi:"groupId"`
	ProjectId           *string `pulumi:"projectId"`
	RoleId              string  `pulumi:"roleId"`
}

// The set of arguments for constructing a IdentityRoleAssignmentV3 resource.
type IdentityRoleAssignmentV3Args struct {
	DomainId            pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	GroupId             pulumi.StringInput
	ProjectId           pulumi.StringPtrInput
	RoleId              pulumi.StringInput
}

func (IdentityRoleAssignmentV3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*identityRoleAssignmentV3Args)(nil)).Elem()
}

type IdentityRoleAssignmentV3Input interface {
	pulumi.Input

	ToIdentityRoleAssignmentV3Output() IdentityRoleAssignmentV3Output
	ToIdentityRoleAssignmentV3OutputWithContext(ctx context.Context) IdentityRoleAssignmentV3Output
}

func (*IdentityRoleAssignmentV3) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityRoleAssignmentV3)(nil)).Elem()
}

func (i *IdentityRoleAssignmentV3) ToIdentityRoleAssignmentV3Output() IdentityRoleAssignmentV3Output {
	return i.ToIdentityRoleAssignmentV3OutputWithContext(context.Background())
}

func (i *IdentityRoleAssignmentV3) ToIdentityRoleAssignmentV3OutputWithContext(ctx context.Context) IdentityRoleAssignmentV3Output {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleAssignmentV3Output)
}

// IdentityRoleAssignmentV3ArrayInput is an input type that accepts IdentityRoleAssignmentV3Array and IdentityRoleAssignmentV3ArrayOutput values.
// You can construct a concrete instance of `IdentityRoleAssignmentV3ArrayInput` via:
//
//	IdentityRoleAssignmentV3Array{ IdentityRoleAssignmentV3Args{...} }
type IdentityRoleAssignmentV3ArrayInput interface {
	pulumi.Input

	ToIdentityRoleAssignmentV3ArrayOutput() IdentityRoleAssignmentV3ArrayOutput
	ToIdentityRoleAssignmentV3ArrayOutputWithContext(context.Context) IdentityRoleAssignmentV3ArrayOutput
}

type IdentityRoleAssignmentV3Array []IdentityRoleAssignmentV3Input

func (IdentityRoleAssignmentV3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityRoleAssignmentV3)(nil)).Elem()
}

func (i IdentityRoleAssignmentV3Array) ToIdentityRoleAssignmentV3ArrayOutput() IdentityRoleAssignmentV3ArrayOutput {
	return i.ToIdentityRoleAssignmentV3ArrayOutputWithContext(context.Background())
}

func (i IdentityRoleAssignmentV3Array) ToIdentityRoleAssignmentV3ArrayOutputWithContext(ctx context.Context) IdentityRoleAssignmentV3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleAssignmentV3ArrayOutput)
}

// IdentityRoleAssignmentV3MapInput is an input type that accepts IdentityRoleAssignmentV3Map and IdentityRoleAssignmentV3MapOutput values.
// You can construct a concrete instance of `IdentityRoleAssignmentV3MapInput` via:
//
//	IdentityRoleAssignmentV3Map{ "key": IdentityRoleAssignmentV3Args{...} }
type IdentityRoleAssignmentV3MapInput interface {
	pulumi.Input

	ToIdentityRoleAssignmentV3MapOutput() IdentityRoleAssignmentV3MapOutput
	ToIdentityRoleAssignmentV3MapOutputWithContext(context.Context) IdentityRoleAssignmentV3MapOutput
}

type IdentityRoleAssignmentV3Map map[string]IdentityRoleAssignmentV3Input

func (IdentityRoleAssignmentV3Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityRoleAssignmentV3)(nil)).Elem()
}

func (i IdentityRoleAssignmentV3Map) ToIdentityRoleAssignmentV3MapOutput() IdentityRoleAssignmentV3MapOutput {
	return i.ToIdentityRoleAssignmentV3MapOutputWithContext(context.Background())
}

func (i IdentityRoleAssignmentV3Map) ToIdentityRoleAssignmentV3MapOutputWithContext(ctx context.Context) IdentityRoleAssignmentV3MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityRoleAssignmentV3MapOutput)
}

type IdentityRoleAssignmentV3Output struct{ *pulumi.OutputState }

func (IdentityRoleAssignmentV3Output) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityRoleAssignmentV3)(nil)).Elem()
}

func (o IdentityRoleAssignmentV3Output) ToIdentityRoleAssignmentV3Output() IdentityRoleAssignmentV3Output {
	return o
}

func (o IdentityRoleAssignmentV3Output) ToIdentityRoleAssignmentV3OutputWithContext(ctx context.Context) IdentityRoleAssignmentV3Output {
	return o
}

func (o IdentityRoleAssignmentV3Output) DomainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityRoleAssignmentV3) pulumi.StringPtrOutput { return v.DomainId }).(pulumi.StringPtrOutput)
}

func (o IdentityRoleAssignmentV3Output) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityRoleAssignmentV3) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

func (o IdentityRoleAssignmentV3Output) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityRoleAssignmentV3) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o IdentityRoleAssignmentV3Output) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IdentityRoleAssignmentV3) pulumi.StringPtrOutput { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o IdentityRoleAssignmentV3Output) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *IdentityRoleAssignmentV3) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type IdentityRoleAssignmentV3ArrayOutput struct{ *pulumi.OutputState }

func (IdentityRoleAssignmentV3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityRoleAssignmentV3)(nil)).Elem()
}

func (o IdentityRoleAssignmentV3ArrayOutput) ToIdentityRoleAssignmentV3ArrayOutput() IdentityRoleAssignmentV3ArrayOutput {
	return o
}

func (o IdentityRoleAssignmentV3ArrayOutput) ToIdentityRoleAssignmentV3ArrayOutputWithContext(ctx context.Context) IdentityRoleAssignmentV3ArrayOutput {
	return o
}

func (o IdentityRoleAssignmentV3ArrayOutput) Index(i pulumi.IntInput) IdentityRoleAssignmentV3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IdentityRoleAssignmentV3 {
		return vs[0].([]*IdentityRoleAssignmentV3)[vs[1].(int)]
	}).(IdentityRoleAssignmentV3Output)
}

type IdentityRoleAssignmentV3MapOutput struct{ *pulumi.OutputState }

func (IdentityRoleAssignmentV3MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityRoleAssignmentV3)(nil)).Elem()
}

func (o IdentityRoleAssignmentV3MapOutput) ToIdentityRoleAssignmentV3MapOutput() IdentityRoleAssignmentV3MapOutput {
	return o
}

func (o IdentityRoleAssignmentV3MapOutput) ToIdentityRoleAssignmentV3MapOutputWithContext(ctx context.Context) IdentityRoleAssignmentV3MapOutput {
	return o
}

func (o IdentityRoleAssignmentV3MapOutput) MapIndex(k pulumi.StringInput) IdentityRoleAssignmentV3Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IdentityRoleAssignmentV3 {
		return vs[0].(map[string]*IdentityRoleAssignmentV3)[vs[1].(string)]
	}).(IdentityRoleAssignmentV3Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleAssignmentV3Input)(nil)).Elem(), &IdentityRoleAssignmentV3{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleAssignmentV3ArrayInput)(nil)).Elem(), IdentityRoleAssignmentV3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*IdentityRoleAssignmentV3MapInput)(nil)).Elem(), IdentityRoleAssignmentV3Map{})
	pulumi.RegisterOutputType(IdentityRoleAssignmentV3Output{})
	pulumi.RegisterOutputType(IdentityRoleAssignmentV3ArrayOutput{})
	pulumi.RegisterOutputType(IdentityRoleAssignmentV3MapOutput{})
}

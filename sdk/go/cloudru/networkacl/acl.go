// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkacl

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a network ACL resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/networkacl"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			subnet, err := vpc.GetSubnet(ctx, &vpc.GetSubnetArgs{
//				Name: pulumi.StringRef("subnet-default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			rule1, err := networkacl.NewAclRule(ctx, "rule_1", &networkacl.AclRuleArgs{
//				Name:            pulumi.String("my-rule-1"),
//				Description:     pulumi.String("drop TELNET traffic"),
//				Action:          pulumi.String("deny"),
//				Protocol:        pulumi.String("tcp"),
//				DestinationPort: pulumi.String("23"),
//				Enabled:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			rule2, err := networkacl.NewAclRule(ctx, "rule_2", &networkacl.AclRuleArgs{
//				Name:            pulumi.String("my-rule-2"),
//				Description:     pulumi.String("drop NTP traffic"),
//				Action:          pulumi.String("deny"),
//				Protocol:        pulumi.String("udp"),
//				DestinationPort: pulumi.String("123"),
//				Enabled:         pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = networkacl.NewAcl(ctx, "fw_acl", &networkacl.AclArgs{
//				Name: pulumi.String("my-fw-acl"),
//				Subnets: pulumi.StringArray{
//					pulumi.String(subnet.Id),
//				},
//				InboundRules: pulumi.StringArray{
//					rule1.ID(),
//					rule2.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Acl struct {
	pulumi.CustomResourceState

	// Specifies the supplementary information about the network ACL. This parameter can
	// contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the ingress firewall policy for the network ACL.
	InboundPolicyId pulumi.StringOutput `pulumi:"inboundPolicyId"`
	// A list of the IDs of ingress rules associated with the network ACL.
	InboundRules pulumi.StringArrayOutput `pulumi:"inboundRules"`
	// Specifies the network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, underscores (_), and hyphens (-).
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the egress firewall policy for the network ACL.
	OutboundPolicyId pulumi.StringOutput `pulumi:"outboundPolicyId"`
	// A list of the IDs of egress rules associated with the network ACL.
	OutboundRules pulumi.StringArrayOutput `pulumi:"outboundRules"`
	// A list of the port IDs of the subnet gateway.
	Ports pulumi.StringArrayOutput `pulumi:"ports"`
	// The region in which to create the network acl resource. If omitted, the
	// provider-level region will be used. Changing this creates a new network acl resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the network ACL.
	Status pulumi.StringOutput `pulumi:"status"`
	// A list of the IDs of networks associated with the network ACL.
	Subnets pulumi.StringArrayOutput `pulumi:"subnets"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		args = &AclArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("sbercloud:NetworkAcl/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("sbercloud:NetworkAcl/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	// Specifies the supplementary information about the network ACL. This parameter can
	// contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// The ID of the ingress firewall policy for the network ACL.
	InboundPolicyId *string `pulumi:"inboundPolicyId"`
	// A list of the IDs of ingress rules associated with the network ACL.
	InboundRules []string `pulumi:"inboundRules"`
	// Specifies the network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, underscores (_), and hyphens (-).
	Name *string `pulumi:"name"`
	// The ID of the egress firewall policy for the network ACL.
	OutboundPolicyId *string `pulumi:"outboundPolicyId"`
	// A list of the IDs of egress rules associated with the network ACL.
	OutboundRules []string `pulumi:"outboundRules"`
	// A list of the port IDs of the subnet gateway.
	Ports []string `pulumi:"ports"`
	// The region in which to create the network acl resource. If omitted, the
	// provider-level region will be used. Changing this creates a new network acl resource.
	Region *string `pulumi:"region"`
	// The status of the network ACL.
	Status *string `pulumi:"status"`
	// A list of the IDs of networks associated with the network ACL.
	Subnets []string `pulumi:"subnets"`
}

type AclState struct {
	// Specifies the supplementary information about the network ACL. This parameter can
	// contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput
	// The ID of the ingress firewall policy for the network ACL.
	InboundPolicyId pulumi.StringPtrInput
	// A list of the IDs of ingress rules associated with the network ACL.
	InboundRules pulumi.StringArrayInput
	// Specifies the network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, underscores (_), and hyphens (-).
	Name pulumi.StringPtrInput
	// The ID of the egress firewall policy for the network ACL.
	OutboundPolicyId pulumi.StringPtrInput
	// A list of the IDs of egress rules associated with the network ACL.
	OutboundRules pulumi.StringArrayInput
	// A list of the port IDs of the subnet gateway.
	Ports pulumi.StringArrayInput
	// The region in which to create the network acl resource. If omitted, the
	// provider-level region will be used. Changing this creates a new network acl resource.
	Region pulumi.StringPtrInput
	// The status of the network ACL.
	Status pulumi.StringPtrInput
	// A list of the IDs of networks associated with the network ACL.
	Subnets pulumi.StringArrayInput
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// Specifies the supplementary information about the network ACL. This parameter can
	// contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// A list of the IDs of ingress rules associated with the network ACL.
	InboundRules []string `pulumi:"inboundRules"`
	// Specifies the network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, underscores (_), and hyphens (-).
	Name *string `pulumi:"name"`
	// A list of the IDs of egress rules associated with the network ACL.
	OutboundRules []string `pulumi:"outboundRules"`
	// The region in which to create the network acl resource. If omitted, the
	// provider-level region will be used. Changing this creates a new network acl resource.
	Region *string `pulumi:"region"`
	// A list of the IDs of networks associated with the network ACL.
	Subnets []string `pulumi:"subnets"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	// Specifies the supplementary information about the network ACL. This parameter can
	// contain a maximum of 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput
	// A list of the IDs of ingress rules associated with the network ACL.
	InboundRules pulumi.StringArrayInput
	// Specifies the network ACL name. This parameter can contain a maximum of 64 characters,
	// which may consist of letters, digits, underscores (_), and hyphens (-).
	Name pulumi.StringPtrInput
	// A list of the IDs of egress rules associated with the network ACL.
	OutboundRules pulumi.StringArrayInput
	// The region in which to create the network acl resource. If omitted, the
	// provider-level region will be used. Changing this creates a new network acl resource.
	Region pulumi.StringPtrInput
	// A list of the IDs of networks associated with the network ACL.
	Subnets pulumi.StringArrayInput
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(ctx context.Context) AclOutput
}

func (*Acl) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (i *Acl) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i *Acl) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//	AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

// AclMapInput is an input type that accepts AclMap and AclMapOutput values.
// You can construct a concrete instance of `AclMapInput` via:
//
//	AclMap{ "key": AclArgs{...} }
type AclMapInput interface {
	pulumi.Input

	ToAclMapOutput() AclMapOutput
	ToAclMapOutputWithContext(context.Context) AclMapOutput
}

type AclMap map[string]AclInput

func (AclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (i AclMap) ToAclMapOutput() AclMapOutput {
	return i.ToAclMapOutputWithContext(context.Background())
}

func (i AclMap) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMapOutput)
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

// Specifies the supplementary information about the network ACL. This parameter can
// contain a maximum of 255 characters and cannot contain angle brackets (< or >).
func (o AclOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the ingress firewall policy for the network ACL.
func (o AclOutput) InboundPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.InboundPolicyId }).(pulumi.StringOutput)
}

// A list of the IDs of ingress rules associated with the network ACL.
func (o AclOutput) InboundRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.InboundRules }).(pulumi.StringArrayOutput)
}

// Specifies the network ACL name. This parameter can contain a maximum of 64 characters,
// which may consist of letters, digits, underscores (_), and hyphens (-).
func (o AclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the egress firewall policy for the network ACL.
func (o AclOutput) OutboundPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.OutboundPolicyId }).(pulumi.StringOutput)
}

// A list of the IDs of egress rules associated with the network ACL.
func (o AclOutput) OutboundRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.OutboundRules }).(pulumi.StringArrayOutput)
}

// A list of the port IDs of the subnet gateway.
func (o AclOutput) Ports() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.Ports }).(pulumi.StringArrayOutput)
}

// The region in which to create the network acl resource. If omitted, the
// provider-level region will be used. Changing this creates a new network acl resource.
func (o AclOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of the network ACL.
func (o AclOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// A list of the IDs of networks associated with the network ACL.
func (o AclOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].([]*Acl)[vs[1].(int)]
	}).(AclOutput)
}

type AclMapOutput struct{ *pulumi.OutputState }

func (AclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (o AclMapOutput) ToAclMapOutput() AclMapOutput {
	return o
}

func (o AclMapOutput) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return o
}

func (o AclMapOutput) MapIndex(k pulumi.StringInput) AclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].(map[string]*Acl)[vs[1].(string)]
	}).(AclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclInput)(nil)).Elem(), &Acl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclArrayInput)(nil)).Elem(), AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMapInput)(nil)).Elem(), AclMap{})
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dws

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Cluster struct {
	pulumi.CustomResourceState

	// The availability zone in which to create the cluster instance.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The creation time of the cluster.
	Created pulumi.StringOutput `pulumi:"created"`
	// The description of the cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Dedicated storage pool ID.
	DssPoolId pulumi.StringOutput `pulumi:"dssPoolId"`
	// The ID of the ELB load balancer.
	ElbId pulumi.StringPtrOutput `pulumi:"elbId"`
	// The ELB information bound to the cluster.
	Elbs ClusterElbArrayOutput `pulumi:"elbs"`
	// Private network connection information about the cluster.
	Endpoints ClusterEndpointArrayOutput `pulumi:"endpoints"`
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup pulumi.BoolPtrOutput `pulumi:"forceBackup"`
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot pulumi.IntPtrOutput `pulumi:"keepLastManualSnapshot"`
	// The KMS key ID.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// Whether to enable logical cluster.
	LogicalClusterEnable pulumi.BoolPtrOutput `pulumi:"logicalClusterEnable"`
	// Whether to enable LTS.
	LtsEnable pulumi.BoolPtrOutput `pulumi:"ltsEnable"`
	// Cluster maintenance window.
	MaintainWindows ClusterMaintainWindowArrayOutput `pulumi:"maintainWindows"`
	// The cluster name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The subnet ID.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// The flavor of the cluster.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// schema: Required
	NumberOfCn pulumi.IntPtrOutput `pulumi:"numberOfCn"`
	// Number of nodes in a cluster.
	NumberOfNode pulumi.IntOutput `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// List of private network IP addresses.
	PrivateIps pulumi.StringArrayOutput `pulumi:"privateIps"`
	// Public network connection information about the cluster.
	PublicEndpoints ClusterPublicEndpointArrayOutput `pulumi:"publicEndpoints"`
	PublicIp        ClusterPublicIpOutput            `pulumi:"publicIp"`
	RecentEvent     pulumi.IntOutput                 `pulumi:"recentEvent"`
	Region          pulumi.StringOutput              `pulumi:"region"`
	// The security group ID.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// The cluster status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Sub-status of clusters in the AVAILABLE state.
	SubStatus pulumi.StringOutput `pulumi:"subStatus"`
	// The key/value pairs to associate with the cluster.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Cluster management task.
	TaskStatus pulumi.StringOutput `pulumi:"taskStatus"`
	// The updated time of the cluster.
	Updated pulumi.StringOutput `pulumi:"updated"`
	// Administrator username for logging in to a data warehouse cluster.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd pulumi.StringOutput `pulumi:"userPwd"`
	// schema: Required
	Version pulumi.StringOutput `pulumi:"version"`
	Volume  ClusterVolumeOutput `pulumi:"volume"`
	// The VPC ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.NumberOfNode == nil {
		return nil, errors.New("invalid value for required argument 'NumberOfNode'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.UserPwd == nil {
		return nil, errors.New("invalid value for required argument 'UserPwd'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.UserPwd != nil {
		args.UserPwd = pulumi.ToSecret(args.UserPwd).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"userPwd",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("cloudru:Dws/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("cloudru:Dws/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// The availability zone in which to create the cluster instance.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The creation time of the cluster.
	Created *string `pulumi:"created"`
	// The description of the cluster.
	Description *string `pulumi:"description"`
	// Dedicated storage pool ID.
	DssPoolId *string `pulumi:"dssPoolId"`
	// The ID of the ELB load balancer.
	ElbId *string `pulumi:"elbId"`
	// The ELB information bound to the cluster.
	Elbs []ClusterElb `pulumi:"elbs"`
	// Private network connection information about the cluster.
	Endpoints []ClusterEndpoint `pulumi:"endpoints"`
	// The enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup *bool `pulumi:"forceBackup"`
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot *int `pulumi:"keepLastManualSnapshot"`
	// The KMS key ID.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Whether to enable logical cluster.
	LogicalClusterEnable *bool `pulumi:"logicalClusterEnable"`
	// Whether to enable LTS.
	LtsEnable *bool `pulumi:"ltsEnable"`
	// Cluster maintenance window.
	MaintainWindows []ClusterMaintainWindow `pulumi:"maintainWindows"`
	// The cluster name.
	Name *string `pulumi:"name"`
	// The subnet ID.
	NetworkId *string `pulumi:"networkId"`
	// The flavor of the cluster.
	NodeType *string `pulumi:"nodeType"`
	// schema: Required
	NumberOfCn *int `pulumi:"numberOfCn"`
	// Number of nodes in a cluster.
	NumberOfNode *int `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port *int `pulumi:"port"`
	// List of private network IP addresses.
	PrivateIps []string `pulumi:"privateIps"`
	// Public network connection information about the cluster.
	PublicEndpoints []ClusterPublicEndpoint `pulumi:"publicEndpoints"`
	PublicIp        *ClusterPublicIp        `pulumi:"publicIp"`
	RecentEvent     *int                    `pulumi:"recentEvent"`
	Region          *string                 `pulumi:"region"`
	// The security group ID.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The cluster status.
	Status *string `pulumi:"status"`
	// Sub-status of clusters in the AVAILABLE state.
	SubStatus *string `pulumi:"subStatus"`
	// The key/value pairs to associate with the cluster.
	Tags map[string]string `pulumi:"tags"`
	// Cluster management task.
	TaskStatus *string `pulumi:"taskStatus"`
	// The updated time of the cluster.
	Updated *string `pulumi:"updated"`
	// Administrator username for logging in to a data warehouse cluster.
	UserName *string `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd *string `pulumi:"userPwd"`
	// schema: Required
	Version *string        `pulumi:"version"`
	Volume  *ClusterVolume `pulumi:"volume"`
	// The VPC ID.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterState struct {
	// The availability zone in which to create the cluster instance.
	AvailabilityZone pulumi.StringPtrInput
	// The creation time of the cluster.
	Created pulumi.StringPtrInput
	// The description of the cluster.
	Description pulumi.StringPtrInput
	// Dedicated storage pool ID.
	DssPoolId pulumi.StringPtrInput
	// The ID of the ELB load balancer.
	ElbId pulumi.StringPtrInput
	// The ELB information bound to the cluster.
	Elbs ClusterElbArrayInput
	// Private network connection information about the cluster.
	Endpoints ClusterEndpointArrayInput
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup pulumi.BoolPtrInput
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot pulumi.IntPtrInput
	// The KMS key ID.
	KmsKeyId pulumi.StringPtrInput
	// Whether to enable logical cluster.
	LogicalClusterEnable pulumi.BoolPtrInput
	// Whether to enable LTS.
	LtsEnable pulumi.BoolPtrInput
	// Cluster maintenance window.
	MaintainWindows ClusterMaintainWindowArrayInput
	// The cluster name.
	Name pulumi.StringPtrInput
	// The subnet ID.
	NetworkId pulumi.StringPtrInput
	// The flavor of the cluster.
	NodeType pulumi.StringPtrInput
	// schema: Required
	NumberOfCn pulumi.IntPtrInput
	// Number of nodes in a cluster.
	NumberOfNode pulumi.IntPtrInput
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port pulumi.IntPtrInput
	// List of private network IP addresses.
	PrivateIps pulumi.StringArrayInput
	// Public network connection information about the cluster.
	PublicEndpoints ClusterPublicEndpointArrayInput
	PublicIp        ClusterPublicIpPtrInput
	RecentEvent     pulumi.IntPtrInput
	Region          pulumi.StringPtrInput
	// The security group ID.
	SecurityGroupId pulumi.StringPtrInput
	// The cluster status.
	Status pulumi.StringPtrInput
	// Sub-status of clusters in the AVAILABLE state.
	SubStatus pulumi.StringPtrInput
	// The key/value pairs to associate with the cluster.
	Tags pulumi.StringMapInput
	// Cluster management task.
	TaskStatus pulumi.StringPtrInput
	// The updated time of the cluster.
	Updated pulumi.StringPtrInput
	// Administrator username for logging in to a data warehouse cluster.
	UserName pulumi.StringPtrInput
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd pulumi.StringPtrInput
	// schema: Required
	Version pulumi.StringPtrInput
	Volume  ClusterVolumePtrInput
	// The VPC ID.
	VpcId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// The availability zone in which to create the cluster instance.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The description of the cluster.
	Description *string `pulumi:"description"`
	// Dedicated storage pool ID.
	DssPoolId *string `pulumi:"dssPoolId"`
	// The ID of the ELB load balancer.
	ElbId *string `pulumi:"elbId"`
	// The enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup *bool `pulumi:"forceBackup"`
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot *int `pulumi:"keepLastManualSnapshot"`
	// The KMS key ID.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Whether to enable logical cluster.
	LogicalClusterEnable *bool `pulumi:"logicalClusterEnable"`
	// Whether to enable LTS.
	LtsEnable *bool `pulumi:"ltsEnable"`
	// The cluster name.
	Name *string `pulumi:"name"`
	// The subnet ID.
	NetworkId string `pulumi:"networkId"`
	// The flavor of the cluster.
	NodeType string `pulumi:"nodeType"`
	// schema: Required
	NumberOfCn *int `pulumi:"numberOfCn"`
	// Number of nodes in a cluster.
	NumberOfNode int `pulumi:"numberOfNode"`
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port     *int             `pulumi:"port"`
	PublicIp *ClusterPublicIp `pulumi:"publicIp"`
	Region   *string          `pulumi:"region"`
	// The security group ID.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The key/value pairs to associate with the cluster.
	Tags map[string]string `pulumi:"tags"`
	// Administrator username for logging in to a data warehouse cluster.
	UserName string `pulumi:"userName"`
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd string `pulumi:"userPwd"`
	// schema: Required
	Version *string        `pulumi:"version"`
	Volume  *ClusterVolume `pulumi:"volume"`
	// The VPC ID.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// The availability zone in which to create the cluster instance.
	AvailabilityZone pulumi.StringInput
	// The description of the cluster.
	Description pulumi.StringPtrInput
	// Dedicated storage pool ID.
	DssPoolId pulumi.StringPtrInput
	// The ID of the ELB load balancer.
	ElbId pulumi.StringPtrInput
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// Whether to automatically execute snapshot when shrinking the number of nodes.
	ForceBackup pulumi.BoolPtrInput
	// The number of latest manual snapshots that need to be retained when deleting the cluster.
	KeepLastManualSnapshot pulumi.IntPtrInput
	// The KMS key ID.
	KmsKeyId pulumi.StringPtrInput
	// Whether to enable logical cluster.
	LogicalClusterEnable pulumi.BoolPtrInput
	// Whether to enable LTS.
	LtsEnable pulumi.BoolPtrInput
	// The cluster name.
	Name pulumi.StringPtrInput
	// The subnet ID.
	NetworkId pulumi.StringInput
	// The flavor of the cluster.
	NodeType pulumi.StringInput
	// schema: Required
	NumberOfCn pulumi.IntPtrInput
	// Number of nodes in a cluster.
	NumberOfNode pulumi.IntInput
	// Service port of a cluster (8000 to 10000). The default value is 8000.
	Port     pulumi.IntPtrInput
	PublicIp ClusterPublicIpPtrInput
	Region   pulumi.StringPtrInput
	// The security group ID.
	SecurityGroupId pulumi.StringInput
	// The key/value pairs to associate with the cluster.
	Tags pulumi.StringMapInput
	// Administrator username for logging in to a data warehouse cluster.
	UserName pulumi.StringInput
	// Administrator password for logging in to a data warehouse cluster.
	UserPwd pulumi.StringInput
	// schema: Required
	Version pulumi.StringPtrInput
	Volume  ClusterVolumePtrInput
	// The VPC ID.
	VpcId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// The availability zone in which to create the cluster instance.
func (o ClusterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The creation time of the cluster.
func (o ClusterOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// The description of the cluster.
func (o ClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Dedicated storage pool ID.
func (o ClusterOutput) DssPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DssPoolId }).(pulumi.StringOutput)
}

// The ID of the ELB load balancer.
func (o ClusterOutput) ElbId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ElbId }).(pulumi.StringPtrOutput)
}

// The ELB information bound to the cluster.
func (o ClusterOutput) Elbs() ClusterElbArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterElbArrayOutput { return v.Elbs }).(ClusterElbArrayOutput)
}

// Private network connection information about the cluster.
func (o ClusterOutput) Endpoints() ClusterEndpointArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterEndpointArrayOutput { return v.Endpoints }).(ClusterEndpointArrayOutput)
}

// The enterprise project ID.
func (o ClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Whether to automatically execute snapshot when shrinking the number of nodes.
func (o ClusterOutput) ForceBackup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.ForceBackup }).(pulumi.BoolPtrOutput)
}

// The number of latest manual snapshots that need to be retained when deleting the cluster.
func (o ClusterOutput) KeepLastManualSnapshot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.KeepLastManualSnapshot }).(pulumi.IntPtrOutput)
}

// The KMS key ID.
func (o ClusterOutput) KmsKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.KmsKeyId }).(pulumi.StringOutput)
}

// Whether to enable logical cluster.
func (o ClusterOutput) LogicalClusterEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.LogicalClusterEnable }).(pulumi.BoolPtrOutput)
}

// Whether to enable LTS.
func (o ClusterOutput) LtsEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.LtsEnable }).(pulumi.BoolPtrOutput)
}

// Cluster maintenance window.
func (o ClusterOutput) MaintainWindows() ClusterMaintainWindowArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterMaintainWindowArrayOutput { return v.MaintainWindows }).(ClusterMaintainWindowArrayOutput)
}

// The cluster name.
func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The subnet ID.
func (o ClusterOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// The flavor of the cluster.
func (o ClusterOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// schema: Required
func (o ClusterOutput) NumberOfCn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.NumberOfCn }).(pulumi.IntPtrOutput)
}

// Number of nodes in a cluster.
func (o ClusterOutput) NumberOfNode() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.NumberOfNode }).(pulumi.IntOutput)
}

// Service port of a cluster (8000 to 10000). The default value is 8000.
func (o ClusterOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// List of private network IP addresses.
func (o ClusterOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

// Public network connection information about the cluster.
func (o ClusterOutput) PublicEndpoints() ClusterPublicEndpointArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterPublicEndpointArrayOutput { return v.PublicEndpoints }).(ClusterPublicEndpointArrayOutput)
}

func (o ClusterOutput) PublicIp() ClusterPublicIpOutput {
	return o.ApplyT(func(v *Cluster) ClusterPublicIpOutput { return v.PublicIp }).(ClusterPublicIpOutput)
}

func (o ClusterOutput) RecentEvent() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.RecentEvent }).(pulumi.IntOutput)
}

func (o ClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The security group ID.
func (o ClusterOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The cluster status.
func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Sub-status of clusters in the AVAILABLE state.
func (o ClusterOutput) SubStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubStatus }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the cluster.
func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Cluster management task.
func (o ClusterOutput) TaskStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.TaskStatus }).(pulumi.StringOutput)
}

// The updated time of the cluster.
func (o ClusterOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

// Administrator username for logging in to a data warehouse cluster.
func (o ClusterOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// Administrator password for logging in to a data warehouse cluster.
func (o ClusterOutput) UserPwd() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UserPwd }).(pulumi.StringOutput)
}

// schema: Required
func (o ClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o ClusterOutput) Volume() ClusterVolumeOutput {
	return o.ApplyT(func(v *Cluster) ClusterVolumeOutput { return v.Volume }).(ClusterVolumeOutput)
}

// The VPC ID.
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}

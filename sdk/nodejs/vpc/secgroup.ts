// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Security Groups can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Vpc/secgroup:Secgroup secgroup_1 38809219-5e8a-4852-9139-6f461c90e8bc
 * ```
 */
export class Secgroup extends pulumi.CustomResource {
    /**
     * Get an existing Secgroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecgroupState, opts?: pulumi.CustomResourceOptions): Secgroup {
        return new Secgroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Vpc/secgroup:Secgroup';

    /**
     * Returns true if the given object is an instance of Secgroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secgroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secgroup.__pulumiType;
    }

    /**
     * The creation time, in UTC format.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Whether or not to delete the default
     * egress security rules. This is `false` by default. See the below note
     * for more information.
     */
    declare public readonly deleteDefaultRules: pulumi.Output<boolean | undefined>;
    /**
     * Description of the security group.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the enterprise project id of the security group.
     * Changing this creates a new security group.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * A unique name for the security group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The region in which to obtain the V2 networking client.
     * A networking client is needed to create a port. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * security group.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The array of security group rules associating with the security group.
     * The rule object is documented below.
     */
    declare public /*out*/ readonly rules: pulumi.Output<outputs.Vpc.SecgroupRule[]>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The last update time, in UTC format.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Secgroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SecgroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecgroupArgs | SecgroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecgroupState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deleteDefaultRules"] = state?.deleteDefaultRules;
            resourceInputs["description"] = state?.description;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["rules"] = state?.rules;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as SecgroupArgs | undefined;
            resourceInputs["deleteDefaultRules"] = args?.deleteDefaultRules;
            resourceInputs["description"] = args?.description;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["rules"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Secgroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Secgroup resources.
 */
export interface SecgroupState {
    /**
     * The creation time, in UTC format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether or not to delete the default
     * egress security rules. This is `false` by default. See the below note
     * for more information.
     */
    deleteDefaultRules?: pulumi.Input<boolean>;
    /**
     * Description of the security group.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project id of the security group.
     * Changing this creates a new security group.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * A unique name for the security group.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 networking client.
     * A networking client is needed to create a port. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * security group.
     */
    region?: pulumi.Input<string>;
    /**
     * The array of security group rules associating with the security group.
     * The rule object is documented below.
     */
    rules?: pulumi.Input<pulumi.Input<inputs.Vpc.SecgroupRule>[]>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The last update time, in UTC format.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Secgroup resource.
 */
export interface SecgroupArgs {
    /**
     * Whether or not to delete the default
     * egress security rules. This is `false` by default. See the below note
     * for more information.
     */
    deleteDefaultRules?: pulumi.Input<boolean>;
    /**
     * Description of the security group.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project id of the security group.
     * Changing this creates a new security group.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * A unique name for the security group.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to obtain the V2 networking client.
     * A networking client is needed to create a port. If omitted, the
     * `region` argument of the provider is used. Changing this creates a new
     * security group.
     */
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

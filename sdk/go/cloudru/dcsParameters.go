// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DcsParameters struct {
	pulumi.CustomResourceState

	ConfigurationParameters DcsParametersConfigurationParameterArrayOutput `pulumi:"configurationParameters"`
	InstanceId              pulumi.StringOutput                            `pulumi:"instanceId"`
	Parameters              pulumi.StringMapOutput                         `pulumi:"parameters"`
	ProjectId               pulumi.StringOutput                            `pulumi:"projectId"`
}

// NewDcsParameters registers a new resource with the given unique name, arguments, and options.
func NewDcsParameters(ctx *pulumi.Context,
	name string, args *DcsParametersArgs, opts ...pulumi.ResourceOption) (*DcsParameters, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Parameters == nil {
		return nil, errors.New("invalid value for required argument 'Parameters'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DcsParameters
	err := ctx.RegisterResource("cloudru:index/dcsParameters:DcsParameters", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDcsParameters gets an existing DcsParameters resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDcsParameters(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DcsParametersState, opts ...pulumi.ResourceOption) (*DcsParameters, error) {
	var resource DcsParameters
	err := ctx.ReadResource("cloudru:index/dcsParameters:DcsParameters", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DcsParameters resources.
type dcsParametersState struct {
	ConfigurationParameters []DcsParametersConfigurationParameter `pulumi:"configurationParameters"`
	InstanceId              *string                               `pulumi:"instanceId"`
	Parameters              map[string]string                     `pulumi:"parameters"`
	ProjectId               *string                               `pulumi:"projectId"`
}

type DcsParametersState struct {
	ConfigurationParameters DcsParametersConfigurationParameterArrayInput
	InstanceId              pulumi.StringPtrInput
	Parameters              pulumi.StringMapInput
	ProjectId               pulumi.StringPtrInput
}

func (DcsParametersState) ElementType() reflect.Type {
	return reflect.TypeOf((*dcsParametersState)(nil)).Elem()
}

type dcsParametersArgs struct {
	InstanceId string            `pulumi:"instanceId"`
	Parameters map[string]string `pulumi:"parameters"`
	ProjectId  string            `pulumi:"projectId"`
}

// The set of arguments for constructing a DcsParameters resource.
type DcsParametersArgs struct {
	InstanceId pulumi.StringInput
	Parameters pulumi.StringMapInput
	ProjectId  pulumi.StringInput
}

func (DcsParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dcsParametersArgs)(nil)).Elem()
}

type DcsParametersInput interface {
	pulumi.Input

	ToDcsParametersOutput() DcsParametersOutput
	ToDcsParametersOutputWithContext(ctx context.Context) DcsParametersOutput
}

func (*DcsParameters) ElementType() reflect.Type {
	return reflect.TypeOf((**DcsParameters)(nil)).Elem()
}

func (i *DcsParameters) ToDcsParametersOutput() DcsParametersOutput {
	return i.ToDcsParametersOutputWithContext(context.Background())
}

func (i *DcsParameters) ToDcsParametersOutputWithContext(ctx context.Context) DcsParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsParametersOutput)
}

// DcsParametersArrayInput is an input type that accepts DcsParametersArray and DcsParametersArrayOutput values.
// You can construct a concrete instance of `DcsParametersArrayInput` via:
//
//	DcsParametersArray{ DcsParametersArgs{...} }
type DcsParametersArrayInput interface {
	pulumi.Input

	ToDcsParametersArrayOutput() DcsParametersArrayOutput
	ToDcsParametersArrayOutputWithContext(context.Context) DcsParametersArrayOutput
}

type DcsParametersArray []DcsParametersInput

func (DcsParametersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DcsParameters)(nil)).Elem()
}

func (i DcsParametersArray) ToDcsParametersArrayOutput() DcsParametersArrayOutput {
	return i.ToDcsParametersArrayOutputWithContext(context.Background())
}

func (i DcsParametersArray) ToDcsParametersArrayOutputWithContext(ctx context.Context) DcsParametersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsParametersArrayOutput)
}

// DcsParametersMapInput is an input type that accepts DcsParametersMap and DcsParametersMapOutput values.
// You can construct a concrete instance of `DcsParametersMapInput` via:
//
//	DcsParametersMap{ "key": DcsParametersArgs{...} }
type DcsParametersMapInput interface {
	pulumi.Input

	ToDcsParametersMapOutput() DcsParametersMapOutput
	ToDcsParametersMapOutputWithContext(context.Context) DcsParametersMapOutput
}

type DcsParametersMap map[string]DcsParametersInput

func (DcsParametersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DcsParameters)(nil)).Elem()
}

func (i DcsParametersMap) ToDcsParametersMapOutput() DcsParametersMapOutput {
	return i.ToDcsParametersMapOutputWithContext(context.Background())
}

func (i DcsParametersMap) ToDcsParametersMapOutputWithContext(ctx context.Context) DcsParametersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DcsParametersMapOutput)
}

type DcsParametersOutput struct{ *pulumi.OutputState }

func (DcsParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DcsParameters)(nil)).Elem()
}

func (o DcsParametersOutput) ToDcsParametersOutput() DcsParametersOutput {
	return o
}

func (o DcsParametersOutput) ToDcsParametersOutputWithContext(ctx context.Context) DcsParametersOutput {
	return o
}

func (o DcsParametersOutput) ConfigurationParameters() DcsParametersConfigurationParameterArrayOutput {
	return o.ApplyT(func(v *DcsParameters) DcsParametersConfigurationParameterArrayOutput {
		return v.ConfigurationParameters
	}).(DcsParametersConfigurationParameterArrayOutput)
}

func (o DcsParametersOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsParameters) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DcsParametersOutput) Parameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DcsParameters) pulumi.StringMapOutput { return v.Parameters }).(pulumi.StringMapOutput)
}

func (o DcsParametersOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DcsParameters) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type DcsParametersArrayOutput struct{ *pulumi.OutputState }

func (DcsParametersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DcsParameters)(nil)).Elem()
}

func (o DcsParametersArrayOutput) ToDcsParametersArrayOutput() DcsParametersArrayOutput {
	return o
}

func (o DcsParametersArrayOutput) ToDcsParametersArrayOutputWithContext(ctx context.Context) DcsParametersArrayOutput {
	return o
}

func (o DcsParametersArrayOutput) Index(i pulumi.IntInput) DcsParametersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DcsParameters {
		return vs[0].([]*DcsParameters)[vs[1].(int)]
	}).(DcsParametersOutput)
}

type DcsParametersMapOutput struct{ *pulumi.OutputState }

func (DcsParametersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DcsParameters)(nil)).Elem()
}

func (o DcsParametersMapOutput) ToDcsParametersMapOutput() DcsParametersMapOutput {
	return o
}

func (o DcsParametersMapOutput) ToDcsParametersMapOutputWithContext(ctx context.Context) DcsParametersMapOutput {
	return o
}

func (o DcsParametersMapOutput) MapIndex(k pulumi.StringInput) DcsParametersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DcsParameters {
		return vs[0].(map[string]*DcsParameters)[vs[1].(string)]
	}).(DcsParametersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DcsParametersInput)(nil)).Elem(), &DcsParameters{})
	pulumi.RegisterInputType(reflect.TypeOf((*DcsParametersArrayInput)(nil)).Elem(), DcsParametersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DcsParametersMapInput)(nil)).Elem(), DcsParametersMap{})
	pulumi.RegisterOutputType(DcsParametersOutput{})
	pulumi.RegisterOutputType(DcsParametersArrayOutput{})
	pulumi.RegisterOutputType(DcsParametersMapOutput{})
}

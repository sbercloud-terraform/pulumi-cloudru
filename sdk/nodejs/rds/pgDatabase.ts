// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class PgDatabase extends pulumi.CustomResource {
    /**
     * Get an existing PgDatabase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PgDatabaseState, opts?: pulumi.CustomResourceOptions): PgDatabase {
        return new PgDatabase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Rds/pgDatabase:PgDatabase';

    /**
     * Returns true if the given object is an instance of PgDatabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PgDatabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PgDatabase.__pulumiType;
    }

    /**
     * Specifies the database character set.
     */
    declare public readonly characterSet: pulumi.Output<string>;
    /**
     * Specifies the database description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Specifies the ID of the RDS PostgreSQL instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
     */
    declare public readonly isRevokePublicPrivilege: pulumi.Output<boolean>;
    /**
     * Specifies the database collocation.
     */
    declare public readonly lcCollate: pulumi.Output<string>;
    /**
     * Specifies the database classification.
     */
    declare public readonly lcCtype: pulumi.Output<string>;
    /**
     * Specifies the database name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the database user.
     */
    declare public readonly owner: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * Indicates the database size, in bytes.
     */
    declare public /*out*/ readonly size: pulumi.Output<number>;
    /**
     * Specifies the name of the database template.
     */
    declare public readonly template: pulumi.Output<string>;

    /**
     * Create a PgDatabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PgDatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PgDatabaseArgs | PgDatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PgDatabaseState | undefined;
            resourceInputs["characterSet"] = state?.characterSet;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["isRevokePublicPrivilege"] = state?.isRevokePublicPrivilege;
            resourceInputs["lcCollate"] = state?.lcCollate;
            resourceInputs["lcCtype"] = state?.lcCtype;
            resourceInputs["name"] = state?.name;
            resourceInputs["owner"] = state?.owner;
            resourceInputs["region"] = state?.region;
            resourceInputs["size"] = state?.size;
            resourceInputs["template"] = state?.template;
        } else {
            const args = argsOrState as PgDatabaseArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["characterSet"] = args?.characterSet;
            resourceInputs["description"] = args?.description;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["isRevokePublicPrivilege"] = args?.isRevokePublicPrivilege;
            resourceInputs["lcCollate"] = args?.lcCollate;
            resourceInputs["lcCtype"] = args?.lcCtype;
            resourceInputs["name"] = args?.name;
            resourceInputs["owner"] = args?.owner;
            resourceInputs["region"] = args?.region;
            resourceInputs["template"] = args?.template;
            resourceInputs["size"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PgDatabase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PgDatabase resources.
 */
export interface PgDatabaseState {
    /**
     * Specifies the database character set.
     */
    characterSet?: pulumi.Input<string>;
    /**
     * Specifies the database description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of the RDS PostgreSQL instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
     */
    isRevokePublicPrivilege?: pulumi.Input<boolean>;
    /**
     * Specifies the database collocation.
     */
    lcCollate?: pulumi.Input<string>;
    /**
     * Specifies the database classification.
     */
    lcCtype?: pulumi.Input<string>;
    /**
     * Specifies the database name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the database user.
     */
    owner?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Indicates the database size, in bytes.
     */
    size?: pulumi.Input<number>;
    /**
     * Specifies the name of the database template.
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PgDatabase resource.
 */
export interface PgDatabaseArgs {
    /**
     * Specifies the database character set.
     */
    characterSet?: pulumi.Input<string>;
    /**
     * Specifies the database description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of the RDS PostgreSQL instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
     */
    isRevokePublicPrivilege?: pulumi.Input<boolean>;
    /**
     * Specifies the database collocation.
     */
    lcCollate?: pulumi.Input<string>;
    /**
     * Specifies the database classification.
     */
    lcCtype?: pulumi.Input<string>;
    /**
     * Specifies the database name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the database user.
     */
    owner?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * Specifies the name of the database template.
     */
    template?: pulumi.Input<string>;
}

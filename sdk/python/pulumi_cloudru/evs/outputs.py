# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'VolumeAttachment',
    'VolumeIopsAttribute',
    'VolumeLink',
    'VolumeThroughputAttribute',
    'GetVolumesVolumeResult',
    'GetVolumesVolumeAttachmentResult',
    'GetVolumesVolumeIopsAttributeResult',
    'GetVolumesVolumeLinkResult',
    'GetVolumesVolumeThroughputAttributeResult',
]

@pulumi.output_type
class VolumeAttachment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachedAt":
            suggest = "attached_at"
        elif key == "attachedVolumeId":
            suggest = "attached_volume_id"
        elif key == "hostName":
            suggest = "host_name"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeAttachment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeAttachment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeAttachment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attached_at: Optional[_builtins.str] = None,
                 attached_volume_id: Optional[_builtins.str] = None,
                 device: Optional[_builtins.str] = None,
                 host_name: Optional[_builtins.str] = None,
                 id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 volume_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str id: Specifies a resource ID in UUID format.
        """
        if attached_at is not None:
            pulumi.set(__self__, "attached_at", attached_at)
        if attached_volume_id is not None:
            pulumi.set(__self__, "attached_volume_id", attached_volume_id)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "attached_at")

    @_builtins.property
    @pulumi.getter(name="attachedVolumeId")
    def attached_volume_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "attached_volume_id")

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "device")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies a resource ID in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VolumeIopsAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalVal":
            suggest = "total_val"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeIopsAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeIopsAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeIopsAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frozened: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 total_val: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Specifies a resource ID in UUID format.
        """
        if frozened is not None:
            pulumi.set(__self__, "frozened", frozened)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if total_val is not None:
            pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies a resource ID in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "total_val")


@pulumi.output_type
class VolumeLink(dict):
    def __init__(__self__, *,
                 href: Optional[_builtins.str] = None,
                 rel: Optional[_builtins.str] = None):
        if href is not None:
            pulumi.set(__self__, "href", href)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "rel")


@pulumi.output_type
class VolumeThroughputAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "totalVal":
            suggest = "total_val"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeThroughputAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeThroughputAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeThroughputAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 frozened: Optional[_builtins.bool] = None,
                 id: Optional[_builtins.str] = None,
                 total_val: Optional[_builtins.int] = None):
        """
        :param _builtins.str id: Specifies a resource ID in UUID format.
        """
        if frozened is not None:
            pulumi.set(__self__, "frozened", frozened)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if total_val is not None:
            pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        Specifies a resource ID in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "total_val")


@pulumi.output_type
class GetVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 attachments: Sequence['outputs.GetVolumesVolumeAttachmentResult'],
                 availability_zone: _builtins.str,
                 bootable: _builtins.bool,
                 create_at: _builtins.str,
                 dedicated_storage_id: _builtins.str,
                 dedicated_storage_name: _builtins.str,
                 description: _builtins.str,
                 enterprise_project_id: _builtins.str,
                 id: _builtins.str,
                 iops: _builtins.int,
                 iops_attributes: Sequence['outputs.GetVolumesVolumeIopsAttributeResult'],
                 links: Sequence['outputs.GetVolumesVolumeLinkResult'],
                 metadata: Mapping[str, _builtins.str],
                 name: _builtins.str,
                 serial_number: _builtins.str,
                 service_type: _builtins.str,
                 shareable: _builtins.bool,
                 size: _builtins.int,
                 snapshot_id: _builtins.str,
                 status: _builtins.str,
                 tags: Mapping[str, _builtins.str],
                 throughput: _builtins.int,
                 throughput_attributes: Sequence['outputs.GetVolumesVolumeThroughputAttributeResult'],
                 update_at: _builtins.str,
                 volume_image_metadata: Mapping[str, _builtins.str],
                 volume_type: _builtins.str,
                 wwn: _builtins.str):
        """
        :param Sequence['GetVolumesVolumeAttachmentArgs'] attachments: The disk attachment information. Structure is documented below.
        :param _builtins.str availability_zone: Specifies the availability zone for the disks.
        :param _builtins.bool bootable: Whether the disk is bootable.
        :param _builtins.str create_at: The time when the disk was created.
        :param _builtins.str description: The disk description.
        :param _builtins.str enterprise_project_id: Specifies the enterprise project ID for filtering.
        :param _builtins.str id: The ID of the attached resource in UUID format.
        :param _builtins.str name: The disk name.
        :param _builtins.str service_type: The service type, such as EVS, DSS or DESS.
        :param _builtins.bool shareable: Specifies whether the disk is shareable.
        :param _builtins.int size: The disk size, in GB.
        :param _builtins.str status: Specifies the disk status. The valid values are as following:
               + **FREEZED**
               + **BIND_ERROR**
               + **BINDING**
               + **PENDING_DELETE**
               + **PENDING_CREATE**
               + **NOTIFYING**
               + **NOTIFY_DELETE**
               + **PENDING_UPDATE**
               + **DOWN**
               + **ACTIVE**
               + **ELB**
               + **ERROR**
               + **VPN**
        :param Mapping[str, _builtins.str] tags: Specifies the included key/value pairs which associated with the desired disk.
        :param _builtins.str update_at: The time when the disk was updated.
               w
        :param _builtins.str wwn: The unique identifier used when attaching the disk.
        """
        pulumi.set(__self__, "attachments", attachments)
        pulumi.set(__self__, "availability_zone", availability_zone)
        pulumi.set(__self__, "bootable", bootable)
        pulumi.set(__self__, "create_at", create_at)
        pulumi.set(__self__, "dedicated_storage_id", dedicated_storage_id)
        pulumi.set(__self__, "dedicated_storage_name", dedicated_storage_name)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enterprise_project_id", enterprise_project_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "iops_attributes", iops_attributes)
        pulumi.set(__self__, "links", links)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "serial_number", serial_number)
        pulumi.set(__self__, "service_type", service_type)
        pulumi.set(__self__, "shareable", shareable)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "throughput", throughput)
        pulumi.set(__self__, "throughput_attributes", throughput_attributes)
        pulumi.set(__self__, "update_at", update_at)
        pulumi.set(__self__, "volume_image_metadata", volume_image_metadata)
        pulumi.set(__self__, "volume_type", volume_type)
        pulumi.set(__self__, "wwn", wwn)

    @_builtins.property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetVolumesVolumeAttachmentResult']:
        """
        The disk attachment information. Structure is documented below.
        """
        return pulumi.get(self, "attachments")

    @_builtins.property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> _builtins.str:
        """
        Specifies the availability zone for the disks.
        """
        return pulumi.get(self, "availability_zone")

    @_builtins.property
    @pulumi.getter
    def bootable(self) -> _builtins.bool:
        """
        Whether the disk is bootable.
        """
        return pulumi.get(self, "bootable")

    @_builtins.property
    @pulumi.getter(name="createAt")
    def create_at(self) -> _builtins.str:
        """
        The time when the disk was created.
        """
        return pulumi.get(self, "create_at")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageId")
    def dedicated_storage_id(self) -> _builtins.str:
        return pulumi.get(self, "dedicated_storage_id")

    @_builtins.property
    @pulumi.getter(name="dedicatedStorageName")
    def dedicated_storage_name(self) -> _builtins.str:
        return pulumi.get(self, "dedicated_storage_name")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The disk description.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="enterpriseProjectId")
    def enterprise_project_id(self) -> _builtins.str:
        """
        Specifies the enterprise project ID for filtering.
        """
        return pulumi.get(self, "enterprise_project_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached resource in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> _builtins.int:
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="iopsAttributes")
    def iops_attributes(self) -> Sequence['outputs.GetVolumesVolumeIopsAttributeResult']:
        return pulumi.get(self, "iops_attributes")

    @_builtins.property
    @pulumi.getter
    def links(self) -> Sequence['outputs.GetVolumesVolumeLinkResult']:
        return pulumi.get(self, "links")

    @_builtins.property
    @pulumi.getter
    def metadata(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "metadata")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The disk name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> _builtins.str:
        return pulumi.get(self, "serial_number")

    @_builtins.property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> _builtins.str:
        """
        The service type, such as EVS, DSS or DESS.
        """
        return pulumi.get(self, "service_type")

    @_builtins.property
    @pulumi.getter
    def shareable(self) -> _builtins.bool:
        """
        Specifies whether the disk is shareable.
        """
        return pulumi.get(self, "shareable")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The disk size, in GB.
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Specifies the disk status. The valid values are as following:
        + **FREEZED**
        + **BIND_ERROR**
        + **BINDING**
        + **PENDING_DELETE**
        + **PENDING_CREATE**
        + **NOTIFYING**
        + **NOTIFY_DELETE**
        + **PENDING_UPDATE**
        + **DOWN**
        + **ACTIVE**
        + **ELB**
        + **ERROR**
        + **VPN**
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Specifies the included key/value pairs which associated with the desired disk.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def throughput(self) -> _builtins.int:
        return pulumi.get(self, "throughput")

    @_builtins.property
    @pulumi.getter(name="throughputAttributes")
    def throughput_attributes(self) -> Sequence['outputs.GetVolumesVolumeThroughputAttributeResult']:
        return pulumi.get(self, "throughput_attributes")

    @_builtins.property
    @pulumi.getter(name="updateAt")
    def update_at(self) -> _builtins.str:
        """
        The time when the disk was updated.
        w
        """
        return pulumi.get(self, "update_at")

    @_builtins.property
    @pulumi.getter(name="volumeImageMetadata")
    def volume_image_metadata(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "volume_image_metadata")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        return pulumi.get(self, "volume_type")

    @_builtins.property
    @pulumi.getter
    def wwn(self) -> _builtins.str:
        """
        The unique identifier used when attaching the disk.
        """
        return pulumi.get(self, "wwn")


@pulumi.output_type
class GetVolumesVolumeAttachmentResult(dict):
    def __init__(__self__, *,
                 attached_at: _builtins.str,
                 attached_mode: _builtins.str,
                 attached_volume_id: _builtins.str,
                 device_name: _builtins.str,
                 host_name: _builtins.str,
                 id: _builtins.str,
                 server_id: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.str attached_at: The time when the disk was attached.
        :param _builtins.str attached_mode: The ID of the attachment information.
        :param _builtins.str device_name: The device name to which the disk is attached.
        :param _builtins.str id: The ID of the attached resource in UUID format.
        :param _builtins.str server_id: Specifies the server ID to which the disks are attached.
        """
        pulumi.set(__self__, "attached_at", attached_at)
        pulumi.set(__self__, "attached_mode", attached_mode)
        pulumi.set(__self__, "attached_volume_id", attached_volume_id)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "host_name", host_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "server_id", server_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> _builtins.str:
        """
        The time when the disk was attached.
        """
        return pulumi.get(self, "attached_at")

    @_builtins.property
    @pulumi.getter(name="attachedMode")
    def attached_mode(self) -> _builtins.str:
        """
        The ID of the attachment information.
        """
        return pulumi.get(self, "attached_mode")

    @_builtins.property
    @pulumi.getter(name="attachedVolumeId")
    def attached_volume_id(self) -> _builtins.str:
        return pulumi.get(self, "attached_volume_id")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The device name to which the disk is attached.
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> _builtins.str:
        return pulumi.get(self, "host_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached resource in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="serverId")
    def server_id(self) -> _builtins.str:
        """
        Specifies the server ID to which the disks are attached.
        """
        return pulumi.get(self, "server_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumesVolumeIopsAttributeResult(dict):
    def __init__(__self__, *,
                 frozened: _builtins.bool,
                 id: _builtins.str,
                 total_val: _builtins.int):
        """
        :param _builtins.str id: The ID of the attached resource in UUID format.
        """
        pulumi.set(__self__, "frozened", frozened)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> _builtins.bool:
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached resource in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> _builtins.int:
        return pulumi.get(self, "total_val")


@pulumi.output_type
class GetVolumesVolumeLinkResult(dict):
    def __init__(__self__, *,
                 href: _builtins.str,
                 rel: _builtins.str):
        pulumi.set(__self__, "href", href)
        pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> _builtins.str:
        return pulumi.get(self, "href")

    @_builtins.property
    @pulumi.getter
    def rel(self) -> _builtins.str:
        return pulumi.get(self, "rel")


@pulumi.output_type
class GetVolumesVolumeThroughputAttributeResult(dict):
    def __init__(__self__, *,
                 frozened: _builtins.bool,
                 id: _builtins.str,
                 total_val: _builtins.int):
        """
        :param _builtins.str id: The ID of the attached resource in UUID format.
        """
        pulumi.set(__self__, "frozened", frozened)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> _builtins.bool:
        return pulumi.get(self, "frozened")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the attached resource in UUID format.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> _builtins.int:
        return pulumi.get(self, "total_val")



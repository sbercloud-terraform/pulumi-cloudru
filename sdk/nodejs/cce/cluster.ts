// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cce/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    declare public readonly alias: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly authenticatingProxyCa: pulumi.Output<string | undefined>;
    declare public readonly authenticatingProxyCert: pulumi.Output<string | undefined>;
    declare public readonly authenticatingProxyPrivateKey: pulumi.Output<string | undefined>;
    declare public readonly authenticationMode: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    declare public readonly billingMode: pulumi.Output<number>;
    declare public /*out*/ readonly category: pulumi.Output<string>;
    declare public /*out*/ readonly certificateClusters: pulumi.Output<outputs.Cce.ClusterCertificateCluster[]>;
    declare public /*out*/ readonly certificateUsers: pulumi.Output<outputs.Cce.ClusterCertificateUser[]>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public readonly clusterType: pulumi.Output<string | undefined>;
    declare public readonly clusterVersion: pulumi.Output<string>;
    declare public readonly componentConfigurations: pulumi.Output<outputs.Cce.ClusterComponentConfiguration[] | undefined>;
    declare public readonly containerNetworkCidr: pulumi.Output<string>;
    declare public readonly containerNetworkType: pulumi.Output<string>;
    declare public readonly customSans: pulumi.Output<string[]>;
    declare public readonly deleteAll: pulumi.Output<string | undefined>;
    declare public readonly deleteEfs: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    declare public readonly deleteEni: pulumi.Output<string | undefined>;
    declare public readonly deleteEvs: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    declare public readonly deleteNet: pulumi.Output<string | undefined>;
    declare public readonly deleteObs: pulumi.Output<string | undefined>;
    declare public readonly deleteSfs: pulumi.Output<string | undefined>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly eip: pulumi.Output<string | undefined>;
    declare public readonly enableDistributeManagement: pulumi.Output<boolean>;
    declare public readonly encryptionConfig: pulumi.Output<outputs.Cce.ClusterEncryptionConfig>;
    /**
     * schema: Computed
     */
    declare public readonly eniSubnetCidr: pulumi.Output<string>;
    /**
     * the IPv4 subnet ID of the subnet where the ENI resides
     */
    declare public readonly eniSubnetId: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    declare public readonly extendParam: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly extendParams: pulumi.Output<outputs.Cce.ClusterExtendParam[] | undefined>;
    declare public readonly flavorId: pulumi.Output<string>;
    declare public readonly hibernate: pulumi.Output<boolean | undefined>;
    /**
     * schema: Internal
     */
    declare public readonly highwaySubnetId: pulumi.Output<string>;
    declare public readonly ipv6Enable: pulumi.Output<boolean>;
    declare public /*out*/ readonly kubeConfigRaw: pulumi.Output<string>;
    declare public readonly kubeProxyMode: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly ltsReclaimPolicy: pulumi.Output<string | undefined>;
    declare public readonly masters: pulumi.Output<outputs.Cce.ClusterMaster[]>;
    declare public readonly multiAz: pulumi.Output<boolean | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly securityGroupId: pulumi.Output<string>;
    declare public readonly serviceNetworkCidr: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly supportIstio: pulumi.Output<boolean>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly timezone: pulumi.Output<string>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["authenticatingProxyCa"] = state?.authenticatingProxyCa;
            resourceInputs["authenticatingProxyCert"] = state?.authenticatingProxyCert;
            resourceInputs["authenticatingProxyPrivateKey"] = state?.authenticatingProxyPrivateKey;
            resourceInputs["authenticationMode"] = state?.authenticationMode;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["billingMode"] = state?.billingMode;
            resourceInputs["category"] = state?.category;
            resourceInputs["certificateClusters"] = state?.certificateClusters;
            resourceInputs["certificateUsers"] = state?.certificateUsers;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["clusterType"] = state?.clusterType;
            resourceInputs["clusterVersion"] = state?.clusterVersion;
            resourceInputs["componentConfigurations"] = state?.componentConfigurations;
            resourceInputs["containerNetworkCidr"] = state?.containerNetworkCidr;
            resourceInputs["containerNetworkType"] = state?.containerNetworkType;
            resourceInputs["customSans"] = state?.customSans;
            resourceInputs["deleteAll"] = state?.deleteAll;
            resourceInputs["deleteEfs"] = state?.deleteEfs;
            resourceInputs["deleteEni"] = state?.deleteEni;
            resourceInputs["deleteEvs"] = state?.deleteEvs;
            resourceInputs["deleteNet"] = state?.deleteNet;
            resourceInputs["deleteObs"] = state?.deleteObs;
            resourceInputs["deleteSfs"] = state?.deleteSfs;
            resourceInputs["description"] = state?.description;
            resourceInputs["eip"] = state?.eip;
            resourceInputs["enableDistributeManagement"] = state?.enableDistributeManagement;
            resourceInputs["encryptionConfig"] = state?.encryptionConfig;
            resourceInputs["eniSubnetCidr"] = state?.eniSubnetCidr;
            resourceInputs["eniSubnetId"] = state?.eniSubnetId;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["extendParam"] = state?.extendParam;
            resourceInputs["extendParams"] = state?.extendParams;
            resourceInputs["flavorId"] = state?.flavorId;
            resourceInputs["hibernate"] = state?.hibernate;
            resourceInputs["highwaySubnetId"] = state?.highwaySubnetId;
            resourceInputs["ipv6Enable"] = state?.ipv6Enable;
            resourceInputs["kubeConfigRaw"] = state?.kubeConfigRaw;
            resourceInputs["kubeProxyMode"] = state?.kubeProxyMode;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["ltsReclaimPolicy"] = state?.ltsReclaimPolicy;
            resourceInputs["masters"] = state?.masters;
            resourceInputs["multiAz"] = state?.multiAz;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["serviceNetworkCidr"] = state?.serviceNetworkCidr;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["supportIstio"] = state?.supportIstio;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timezone"] = state?.timezone;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.containerNetworkType === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerNetworkType'");
            }
            if (args?.flavorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["alias"] = args?.alias;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["authenticatingProxyCa"] = args?.authenticatingProxyCa;
            resourceInputs["authenticatingProxyCert"] = args?.authenticatingProxyCert;
            resourceInputs["authenticatingProxyPrivateKey"] = args?.authenticatingProxyPrivateKey;
            resourceInputs["authenticationMode"] = args?.authenticationMode;
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["billingMode"] = args?.billingMode;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["clusterType"] = args?.clusterType;
            resourceInputs["clusterVersion"] = args?.clusterVersion;
            resourceInputs["componentConfigurations"] = args?.componentConfigurations;
            resourceInputs["containerNetworkCidr"] = args?.containerNetworkCidr;
            resourceInputs["containerNetworkType"] = args?.containerNetworkType;
            resourceInputs["customSans"] = args?.customSans;
            resourceInputs["deleteAll"] = args?.deleteAll;
            resourceInputs["deleteEfs"] = args?.deleteEfs;
            resourceInputs["deleteEni"] = args?.deleteEni;
            resourceInputs["deleteEvs"] = args?.deleteEvs;
            resourceInputs["deleteNet"] = args?.deleteNet;
            resourceInputs["deleteObs"] = args?.deleteObs;
            resourceInputs["deleteSfs"] = args?.deleteSfs;
            resourceInputs["description"] = args?.description;
            resourceInputs["eip"] = args?.eip;
            resourceInputs["enableDistributeManagement"] = args?.enableDistributeManagement;
            resourceInputs["encryptionConfig"] = args?.encryptionConfig;
            resourceInputs["eniSubnetCidr"] = args?.eniSubnetCidr;
            resourceInputs["eniSubnetId"] = args?.eniSubnetId;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["extendParam"] = args?.extendParam;
            resourceInputs["extendParams"] = args?.extendParams;
            resourceInputs["flavorId"] = args?.flavorId;
            resourceInputs["hibernate"] = args?.hibernate;
            resourceInputs["highwaySubnetId"] = args?.highwaySubnetId;
            resourceInputs["ipv6Enable"] = args?.ipv6Enable;
            resourceInputs["kubeProxyMode"] = args?.kubeProxyMode;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["ltsReclaimPolicy"] = args?.ltsReclaimPolicy;
            resourceInputs["masters"] = args?.masters;
            resourceInputs["multiAz"] = args?.multiAz;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["serviceNetworkCidr"] = args?.serviceNetworkCidr;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["supportIstio"] = args?.supportIstio;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["certificateClusters"] = undefined /*out*/;
            resourceInputs["certificateUsers"] = undefined /*out*/;
            resourceInputs["kubeConfigRaw"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    alias?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authenticatingProxyCa?: pulumi.Input<string>;
    authenticatingProxyCert?: pulumi.Input<string>;
    authenticatingProxyPrivateKey?: pulumi.Input<string>;
    authenticationMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    category?: pulumi.Input<string>;
    certificateClusters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterCertificateCluster>[]>;
    certificateUsers?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterCertificateUser>[]>;
    chargingMode?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    componentConfigurations?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterComponentConfiguration>[]>;
    containerNetworkCidr?: pulumi.Input<string>;
    containerNetworkType?: pulumi.Input<string>;
    customSans?: pulumi.Input<pulumi.Input<string>[]>;
    deleteAll?: pulumi.Input<string>;
    deleteEfs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteEni?: pulumi.Input<string>;
    deleteEvs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteNet?: pulumi.Input<string>;
    deleteObs?: pulumi.Input<string>;
    deleteSfs?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    enableDistributeManagement?: pulumi.Input<boolean>;
    encryptionConfig?: pulumi.Input<inputs.Cce.ClusterEncryptionConfig>;
    /**
     * schema: Computed
     */
    eniSubnetCidr?: pulumi.Input<string>;
    /**
     * the IPv4 subnet ID of the subnet where the ENI resides
     */
    eniSubnetId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    extendParams?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterExtendParam>[]>;
    flavorId?: pulumi.Input<string>;
    hibernate?: pulumi.Input<boolean>;
    /**
     * schema: Internal
     */
    highwaySubnetId?: pulumi.Input<string>;
    ipv6Enable?: pulumi.Input<boolean>;
    kubeConfigRaw?: pulumi.Input<string>;
    kubeProxyMode?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ltsReclaimPolicy?: pulumi.Input<string>;
    masters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterMaster>[]>;
    multiAz?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    serviceNetworkCidr?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    supportIstio?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timezone?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    alias?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    authenticatingProxyCa?: pulumi.Input<string>;
    authenticatingProxyCert?: pulumi.Input<string>;
    authenticatingProxyPrivateKey?: pulumi.Input<string>;
    authenticationMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    clusterType?: pulumi.Input<string>;
    clusterVersion?: pulumi.Input<string>;
    componentConfigurations?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterComponentConfiguration>[]>;
    containerNetworkCidr?: pulumi.Input<string>;
    containerNetworkType: pulumi.Input<string>;
    customSans?: pulumi.Input<pulumi.Input<string>[]>;
    deleteAll?: pulumi.Input<string>;
    deleteEfs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteEni?: pulumi.Input<string>;
    deleteEvs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteNet?: pulumi.Input<string>;
    deleteObs?: pulumi.Input<string>;
    deleteSfs?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    eip?: pulumi.Input<string>;
    enableDistributeManagement?: pulumi.Input<boolean>;
    encryptionConfig?: pulumi.Input<inputs.Cce.ClusterEncryptionConfig>;
    /**
     * schema: Computed
     */
    eniSubnetCidr?: pulumi.Input<string>;
    /**
     * the IPv4 subnet ID of the subnet where the ENI resides
     */
    eniSubnetId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    extendParams?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterExtendParam>[]>;
    flavorId: pulumi.Input<string>;
    hibernate?: pulumi.Input<boolean>;
    /**
     * schema: Internal
     */
    highwaySubnetId?: pulumi.Input<string>;
    ipv6Enable?: pulumi.Input<boolean>;
    kubeProxyMode?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ltsReclaimPolicy?: pulumi.Input<string>;
    masters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterMaster>[]>;
    multiAz?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    serviceNetworkCidr?: pulumi.Input<string>;
    subnetId: pulumi.Input<string>;
    supportIstio?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timezone?: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}

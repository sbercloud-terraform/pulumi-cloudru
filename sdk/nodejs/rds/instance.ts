// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Rds/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly availabilityZones: pulumi.Output<string[]>;
    declare public readonly backupStrategy: pulumi.Output<outputs.Rds.InstanceBackupStrategy>;
    declare public readonly binlogRetentionHours: pulumi.Output<number | undefined>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public readonly collation: pulumi.Output<string>;
    declare public /*out*/ readonly created: pulumi.Output<string>;
    declare public readonly db: pulumi.Output<outputs.Rds.InstanceDb>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly dssPoolId: pulumi.Output<string | undefined>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly fixedIp: pulumi.Output<string>;
    declare public readonly flavor: pulumi.Output<string>;
    declare public readonly haReplicationMode: pulumi.Output<string>;
    declare public readonly lowerCaseTableNames: pulumi.Output<string | undefined>;
    declare public readonly maintainBegin: pulumi.Output<string>;
    declare public readonly maintainEnd: pulumi.Output<string>;
    declare public readonly msdtcHosts: pulumi.Output<outputs.Rds.InstanceMsdtcHost[]>;
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly nodes: pulumi.Output<outputs.Rds.InstanceNode[]>;
    declare public readonly paramGroupId: pulumi.Output<string | undefined>;
    declare public readonly parameters: pulumi.Output<outputs.Rds.InstanceParameter[]>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly powerAction: pulumi.Output<string>;
    declare public readonly privateDnsNamePrefix: pulumi.Output<string>;
    declare public /*out*/ readonly privateDnsNames: pulumi.Output<string[]>;
    declare public /*out*/ readonly privateIps: pulumi.Output<string[]>;
    declare public /*out*/ readonly publicIps: pulumi.Output<string[]>;
    declare public readonly readWritePermissions: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly restore: pulumi.Output<outputs.Rds.InstanceRestore | undefined>;
    declare public readonly rotateDay: pulumi.Output<number | undefined>;
    declare public readonly secondsLevelMonitoringEnabled: pulumi.Output<boolean>;
    declare public readonly secondsLevelMonitoringInterval: pulumi.Output<number>;
    declare public readonly secretId: pulumi.Output<string | undefined>;
    declare public readonly secretName: pulumi.Output<string | undefined>;
    declare public readonly secretVersion: pulumi.Output<string | undefined>;
    declare public readonly securityGroupId: pulumi.Output<string>;
    declare public readonly slowLogShowOriginalStatus: pulumi.Output<string | undefined>;
    declare public readonly sslEnable: pulumi.Output<boolean>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly switchStrategy: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly tdeEnabled: pulumi.Output<boolean>;
    declare public readonly timeZone: pulumi.Output<string>;
    declare public readonly volume: pulumi.Output<outputs.Rds.InstanceVolume>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZones"] = state?.availabilityZones;
            resourceInputs["backupStrategy"] = state?.backupStrategy;
            resourceInputs["binlogRetentionHours"] = state?.binlogRetentionHours;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["collation"] = state?.collation;
            resourceInputs["created"] = state?.created;
            resourceInputs["db"] = state?.db;
            resourceInputs["description"] = state?.description;
            resourceInputs["dssPoolId"] = state?.dssPoolId;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["fixedIp"] = state?.fixedIp;
            resourceInputs["flavor"] = state?.flavor;
            resourceInputs["haReplicationMode"] = state?.haReplicationMode;
            resourceInputs["lowerCaseTableNames"] = state?.lowerCaseTableNames;
            resourceInputs["maintainBegin"] = state?.maintainBegin;
            resourceInputs["maintainEnd"] = state?.maintainEnd;
            resourceInputs["msdtcHosts"] = state?.msdtcHosts;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["paramGroupId"] = state?.paramGroupId;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["powerAction"] = state?.powerAction;
            resourceInputs["privateDnsNamePrefix"] = state?.privateDnsNamePrefix;
            resourceInputs["privateDnsNames"] = state?.privateDnsNames;
            resourceInputs["privateIps"] = state?.privateIps;
            resourceInputs["publicIps"] = state?.publicIps;
            resourceInputs["readWritePermissions"] = state?.readWritePermissions;
            resourceInputs["region"] = state?.region;
            resourceInputs["restore"] = state?.restore;
            resourceInputs["rotateDay"] = state?.rotateDay;
            resourceInputs["secondsLevelMonitoringEnabled"] = state?.secondsLevelMonitoringEnabled;
            resourceInputs["secondsLevelMonitoringInterval"] = state?.secondsLevelMonitoringInterval;
            resourceInputs["secretId"] = state?.secretId;
            resourceInputs["secretName"] = state?.secretName;
            resourceInputs["secretVersion"] = state?.secretVersion;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["slowLogShowOriginalStatus"] = state?.slowLogShowOriginalStatus;
            resourceInputs["sslEnable"] = state?.sslEnable;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["switchStrategy"] = state?.switchStrategy;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tdeEnabled"] = state?.tdeEnabled;
            resourceInputs["timeZone"] = state?.timeZone;
            resourceInputs["volume"] = state?.volume;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if (args?.availabilityZones === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZones'");
            }
            if (args?.db === undefined && !opts.urn) {
                throw new Error("Missing required property 'db'");
            }
            if (args?.flavor === undefined && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if (args?.securityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.volume === undefined && !opts.urn) {
                throw new Error("Missing required property 'volume'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZones"] = args?.availabilityZones;
            resourceInputs["backupStrategy"] = args?.backupStrategy;
            resourceInputs["binlogRetentionHours"] = args?.binlogRetentionHours;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["collation"] = args?.collation;
            resourceInputs["db"] = args?.db;
            resourceInputs["description"] = args?.description;
            resourceInputs["dssPoolId"] = args?.dssPoolId;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["fixedIp"] = args?.fixedIp;
            resourceInputs["flavor"] = args?.flavor;
            resourceInputs["haReplicationMode"] = args?.haReplicationMode;
            resourceInputs["lowerCaseTableNames"] = args?.lowerCaseTableNames;
            resourceInputs["maintainBegin"] = args?.maintainBegin;
            resourceInputs["maintainEnd"] = args?.maintainEnd;
            resourceInputs["msdtcHosts"] = args?.msdtcHosts;
            resourceInputs["name"] = args?.name;
            resourceInputs["paramGroupId"] = args?.paramGroupId;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["powerAction"] = args?.powerAction;
            resourceInputs["privateDnsNamePrefix"] = args?.privateDnsNamePrefix;
            resourceInputs["readWritePermissions"] = args?.readWritePermissions;
            resourceInputs["region"] = args?.region;
            resourceInputs["restore"] = args?.restore;
            resourceInputs["rotateDay"] = args?.rotateDay;
            resourceInputs["secondsLevelMonitoringEnabled"] = args?.secondsLevelMonitoringEnabled;
            resourceInputs["secondsLevelMonitoringInterval"] = args?.secondsLevelMonitoringInterval;
            resourceInputs["secretId"] = args?.secretId;
            resourceInputs["secretName"] = args?.secretName;
            resourceInputs["secretVersion"] = args?.secretVersion;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["slowLogShowOriginalStatus"] = args?.slowLogShowOriginalStatus;
            resourceInputs["sslEnable"] = args?.sslEnable;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["switchStrategy"] = args?.switchStrategy;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tdeEnabled"] = args?.tdeEnabled;
            resourceInputs["timeZone"] = args?.timeZone;
            resourceInputs["volume"] = args?.volume;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["privateDnsNames"] = undefined /*out*/;
            resourceInputs["privateIps"] = undefined /*out*/;
            resourceInputs["publicIps"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    backupStrategy?: pulumi.Input<inputs.Rds.InstanceBackupStrategy>;
    binlogRetentionHours?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    collation?: pulumi.Input<string>;
    created?: pulumi.Input<string>;
    db?: pulumi.Input<inputs.Rds.InstanceDb>;
    description?: pulumi.Input<string>;
    dssPoolId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    fixedIp?: pulumi.Input<string>;
    flavor?: pulumi.Input<string>;
    haReplicationMode?: pulumi.Input<string>;
    lowerCaseTableNames?: pulumi.Input<string>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    msdtcHosts?: pulumi.Input<pulumi.Input<inputs.Rds.InstanceMsdtcHost>[]>;
    name?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.Rds.InstanceNode>[]>;
    paramGroupId?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.Rds.InstanceParameter>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    powerAction?: pulumi.Input<string>;
    privateDnsNamePrefix?: pulumi.Input<string>;
    privateDnsNames?: pulumi.Input<pulumi.Input<string>[]>;
    privateIps?: pulumi.Input<pulumi.Input<string>[]>;
    publicIps?: pulumi.Input<pulumi.Input<string>[]>;
    readWritePermissions?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.Rds.InstanceRestore>;
    rotateDay?: pulumi.Input<number>;
    secondsLevelMonitoringEnabled?: pulumi.Input<boolean>;
    secondsLevelMonitoringInterval?: pulumi.Input<number>;
    secretId?: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
    secretVersion?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    slowLogShowOriginalStatus?: pulumi.Input<string>;
    sslEnable?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    switchStrategy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tdeEnabled?: pulumi.Input<boolean>;
    timeZone?: pulumi.Input<string>;
    volume?: pulumi.Input<inputs.Rds.InstanceVolume>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    backupStrategy?: pulumi.Input<inputs.Rds.InstanceBackupStrategy>;
    binlogRetentionHours?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    collation?: pulumi.Input<string>;
    db: pulumi.Input<inputs.Rds.InstanceDb>;
    description?: pulumi.Input<string>;
    dssPoolId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    fixedIp?: pulumi.Input<string>;
    flavor: pulumi.Input<string>;
    haReplicationMode?: pulumi.Input<string>;
    lowerCaseTableNames?: pulumi.Input<string>;
    maintainBegin?: pulumi.Input<string>;
    maintainEnd?: pulumi.Input<string>;
    msdtcHosts?: pulumi.Input<pulumi.Input<inputs.Rds.InstanceMsdtcHost>[]>;
    name?: pulumi.Input<string>;
    paramGroupId?: pulumi.Input<string>;
    parameters?: pulumi.Input<pulumi.Input<inputs.Rds.InstanceParameter>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    powerAction?: pulumi.Input<string>;
    privateDnsNamePrefix?: pulumi.Input<string>;
    readWritePermissions?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    restore?: pulumi.Input<inputs.Rds.InstanceRestore>;
    rotateDay?: pulumi.Input<number>;
    secondsLevelMonitoringEnabled?: pulumi.Input<boolean>;
    secondsLevelMonitoringInterval?: pulumi.Input<number>;
    secretId?: pulumi.Input<string>;
    secretName?: pulumi.Input<string>;
    secretVersion?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    slowLogShowOriginalStatus?: pulumi.Input<string>;
    sslEnable?: pulumi.Input<boolean>;
    subnetId: pulumi.Input<string>;
    switchStrategy?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tdeEnabled?: pulumi.Input<boolean>;
    timeZone?: pulumi.Input<string>;
    volume: pulumi.Input<inputs.Rds.InstanceVolume>;
    vpcId: pulumi.Input<string>;
}

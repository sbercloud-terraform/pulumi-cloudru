// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type KpsKeypairDisassociate struct {
	pulumi.CustomResourceState

	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// Specifies the region in which to query the resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ECS information.
	Server KpsKeypairDisassociateServerOutput `pulumi:"server"`
}

// NewKpsKeypairDisassociate registers a new resource with the given unique name, arguments, and options.
func NewKpsKeypairDisassociate(ctx *pulumi.Context,
	name string, args *KpsKeypairDisassociateArgs, opts ...pulumi.ResourceOption) (*KpsKeypairDisassociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KpsKeypairDisassociate
	err := ctx.RegisterResource("sbercloud:index/kpsKeypairDisassociate:KpsKeypairDisassociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKpsKeypairDisassociate gets an existing KpsKeypairDisassociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKpsKeypairDisassociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KpsKeypairDisassociateState, opts ...pulumi.ResourceOption) (*KpsKeypairDisassociate, error) {
	var resource KpsKeypairDisassociate
	err := ctx.ReadResource("sbercloud:index/kpsKeypairDisassociate:KpsKeypairDisassociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KpsKeypairDisassociate resources.
type kpsKeypairDisassociateState struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the region in which to query the resource.
	Region *string `pulumi:"region"`
	// Specifies the ECS information.
	Server *KpsKeypairDisassociateServer `pulumi:"server"`
}

type KpsKeypairDisassociateState struct {
	EnableForceNew pulumi.StringPtrInput
	// Specifies the region in which to query the resource.
	Region pulumi.StringPtrInput
	// Specifies the ECS information.
	Server KpsKeypairDisassociateServerPtrInput
}

func (KpsKeypairDisassociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*kpsKeypairDisassociateState)(nil)).Elem()
}

type kpsKeypairDisassociateArgs struct {
	EnableForceNew *string `pulumi:"enableForceNew"`
	// Specifies the region in which to query the resource.
	Region *string `pulumi:"region"`
	// Specifies the ECS information.
	Server KpsKeypairDisassociateServer `pulumi:"server"`
}

// The set of arguments for constructing a KpsKeypairDisassociate resource.
type KpsKeypairDisassociateArgs struct {
	EnableForceNew pulumi.StringPtrInput
	// Specifies the region in which to query the resource.
	Region pulumi.StringPtrInput
	// Specifies the ECS information.
	Server KpsKeypairDisassociateServerInput
}

func (KpsKeypairDisassociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kpsKeypairDisassociateArgs)(nil)).Elem()
}

type KpsKeypairDisassociateInput interface {
	pulumi.Input

	ToKpsKeypairDisassociateOutput() KpsKeypairDisassociateOutput
	ToKpsKeypairDisassociateOutputWithContext(ctx context.Context) KpsKeypairDisassociateOutput
}

func (*KpsKeypairDisassociate) ElementType() reflect.Type {
	return reflect.TypeOf((**KpsKeypairDisassociate)(nil)).Elem()
}

func (i *KpsKeypairDisassociate) ToKpsKeypairDisassociateOutput() KpsKeypairDisassociateOutput {
	return i.ToKpsKeypairDisassociateOutputWithContext(context.Background())
}

func (i *KpsKeypairDisassociate) ToKpsKeypairDisassociateOutputWithContext(ctx context.Context) KpsKeypairDisassociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairDisassociateOutput)
}

// KpsKeypairDisassociateArrayInput is an input type that accepts KpsKeypairDisassociateArray and KpsKeypairDisassociateArrayOutput values.
// You can construct a concrete instance of `KpsKeypairDisassociateArrayInput` via:
//
//	KpsKeypairDisassociateArray{ KpsKeypairDisassociateArgs{...} }
type KpsKeypairDisassociateArrayInput interface {
	pulumi.Input

	ToKpsKeypairDisassociateArrayOutput() KpsKeypairDisassociateArrayOutput
	ToKpsKeypairDisassociateArrayOutputWithContext(context.Context) KpsKeypairDisassociateArrayOutput
}

type KpsKeypairDisassociateArray []KpsKeypairDisassociateInput

func (KpsKeypairDisassociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KpsKeypairDisassociate)(nil)).Elem()
}

func (i KpsKeypairDisassociateArray) ToKpsKeypairDisassociateArrayOutput() KpsKeypairDisassociateArrayOutput {
	return i.ToKpsKeypairDisassociateArrayOutputWithContext(context.Background())
}

func (i KpsKeypairDisassociateArray) ToKpsKeypairDisassociateArrayOutputWithContext(ctx context.Context) KpsKeypairDisassociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairDisassociateArrayOutput)
}

// KpsKeypairDisassociateMapInput is an input type that accepts KpsKeypairDisassociateMap and KpsKeypairDisassociateMapOutput values.
// You can construct a concrete instance of `KpsKeypairDisassociateMapInput` via:
//
//	KpsKeypairDisassociateMap{ "key": KpsKeypairDisassociateArgs{...} }
type KpsKeypairDisassociateMapInput interface {
	pulumi.Input

	ToKpsKeypairDisassociateMapOutput() KpsKeypairDisassociateMapOutput
	ToKpsKeypairDisassociateMapOutputWithContext(context.Context) KpsKeypairDisassociateMapOutput
}

type KpsKeypairDisassociateMap map[string]KpsKeypairDisassociateInput

func (KpsKeypairDisassociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KpsKeypairDisassociate)(nil)).Elem()
}

func (i KpsKeypairDisassociateMap) ToKpsKeypairDisassociateMapOutput() KpsKeypairDisassociateMapOutput {
	return i.ToKpsKeypairDisassociateMapOutputWithContext(context.Background())
}

func (i KpsKeypairDisassociateMap) ToKpsKeypairDisassociateMapOutputWithContext(ctx context.Context) KpsKeypairDisassociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KpsKeypairDisassociateMapOutput)
}

type KpsKeypairDisassociateOutput struct{ *pulumi.OutputState }

func (KpsKeypairDisassociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KpsKeypairDisassociate)(nil)).Elem()
}

func (o KpsKeypairDisassociateOutput) ToKpsKeypairDisassociateOutput() KpsKeypairDisassociateOutput {
	return o
}

func (o KpsKeypairDisassociateOutput) ToKpsKeypairDisassociateOutputWithContext(ctx context.Context) KpsKeypairDisassociateOutput {
	return o
}

func (o KpsKeypairDisassociateOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KpsKeypairDisassociate) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to query the resource.
func (o KpsKeypairDisassociateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KpsKeypairDisassociate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ECS information.
func (o KpsKeypairDisassociateOutput) Server() KpsKeypairDisassociateServerOutput {
	return o.ApplyT(func(v *KpsKeypairDisassociate) KpsKeypairDisassociateServerOutput { return v.Server }).(KpsKeypairDisassociateServerOutput)
}

type KpsKeypairDisassociateArrayOutput struct{ *pulumi.OutputState }

func (KpsKeypairDisassociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KpsKeypairDisassociate)(nil)).Elem()
}

func (o KpsKeypairDisassociateArrayOutput) ToKpsKeypairDisassociateArrayOutput() KpsKeypairDisassociateArrayOutput {
	return o
}

func (o KpsKeypairDisassociateArrayOutput) ToKpsKeypairDisassociateArrayOutputWithContext(ctx context.Context) KpsKeypairDisassociateArrayOutput {
	return o
}

func (o KpsKeypairDisassociateArrayOutput) Index(i pulumi.IntInput) KpsKeypairDisassociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KpsKeypairDisassociate {
		return vs[0].([]*KpsKeypairDisassociate)[vs[1].(int)]
	}).(KpsKeypairDisassociateOutput)
}

type KpsKeypairDisassociateMapOutput struct{ *pulumi.OutputState }

func (KpsKeypairDisassociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KpsKeypairDisassociate)(nil)).Elem()
}

func (o KpsKeypairDisassociateMapOutput) ToKpsKeypairDisassociateMapOutput() KpsKeypairDisassociateMapOutput {
	return o
}

func (o KpsKeypairDisassociateMapOutput) ToKpsKeypairDisassociateMapOutputWithContext(ctx context.Context) KpsKeypairDisassociateMapOutput {
	return o
}

func (o KpsKeypairDisassociateMapOutput) MapIndex(k pulumi.StringInput) KpsKeypairDisassociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KpsKeypairDisassociate {
		return vs[0].(map[string]*KpsKeypairDisassociate)[vs[1].(string)]
	}).(KpsKeypairDisassociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairDisassociateInput)(nil)).Elem(), &KpsKeypairDisassociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairDisassociateArrayInput)(nil)).Elem(), KpsKeypairDisassociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KpsKeypairDisassociateMapInput)(nil)).Elem(), KpsKeypairDisassociateMap{})
	pulumi.RegisterOutputType(KpsKeypairDisassociateOutput{})
	pulumi.RegisterOutputType(KpsKeypairDisassociateArrayOutput{})
	pulumi.RegisterOutputType(KpsKeypairDisassociateMapOutput{})
}

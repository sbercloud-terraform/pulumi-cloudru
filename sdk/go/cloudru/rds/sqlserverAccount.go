// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages RDS SQLServer account resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/rds"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := rds.NewSqlserverAccount(ctx, "test", &rds.SqlserverAccountArgs{
//				InstanceId: pulumi.Any(instanceId),
//				Name:       pulumi.String("test_account_name"),
//				Password:   pulumi.String("Test@12345678"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The RDS sqlserver account can be imported using the `instance_id` and `name` separated by a slash, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Rds/sqlserverAccount:SqlserverAccount test <instance_id>/<name>
// ```
//
// # Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
//
// API response, security or some other reason. The missing attributes include: `password`. It is generally recommended
//
// running `pulumi preview` after importing a RDS SQLServer account. You can then decide if changes should be applied to
//
// the RDS SQLServer account, or the resource definition should be updated to align with the RDS SQLServer account. Also
//
// you can ignore changes as below.
//
// hcl
//
// resource "sbercloud_rds_sqlserver_account" "test" {
//
//	  ...
//
//	lifecycle {
//
//	  ignore_changes = [
//
//	    password,
//
//	  ]
//
//	}
//
// }
type SqlserverAccount struct {
	pulumi.CustomResourceState

	// Specifies the ID of the RDS SQLServer instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the username of the DB account. The username consists of 1 to 128
	// characters and must be different from system usernames. System users include **rdsadmin**, **rdsuser**, **rdsbackup**,
	// and **rdsmirror**.
	//
	// Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the password of the DB account. It consists of 8 to 128 characters and
	// contains at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters.
	Password pulumi.StringOutput `pulumi:"password"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates the DB user status. Its value can be any of the following:
	// + **unavailable**: The database user is unavailable.
	// + **available**: The database user is available.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewSqlserverAccount registers a new resource with the given unique name, arguments, and options.
func NewSqlserverAccount(ctx *pulumi.Context,
	name string, args *SqlserverAccountArgs, opts ...pulumi.ResourceOption) (*SqlserverAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SqlserverAccount
	err := ctx.RegisterResource("sbercloud:Rds/sqlserverAccount:SqlserverAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSqlserverAccount gets an existing SqlserverAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSqlserverAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SqlserverAccountState, opts ...pulumi.ResourceOption) (*SqlserverAccount, error) {
	var resource SqlserverAccount
	err := ctx.ReadResource("sbercloud:Rds/sqlserverAccount:SqlserverAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SqlserverAccount resources.
type sqlserverAccountState struct {
	// Specifies the ID of the RDS SQLServer instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the username of the DB account. The username consists of 1 to 128
	// characters and must be different from system usernames. System users include **rdsadmin**, **rdsuser**, **rdsbackup**,
	// and **rdsmirror**.
	//
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account. It consists of 8 to 128 characters and
	// contains at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters.
	Password *string `pulumi:"password"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Indicates the DB user status. Its value can be any of the following:
	// + **unavailable**: The database user is unavailable.
	// + **available**: The database user is available.
	State *string `pulumi:"state"`
}

type SqlserverAccountState struct {
	// Specifies the ID of the RDS SQLServer instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the username of the DB account. The username consists of 1 to 128
	// characters and must be different from system usernames. System users include **rdsadmin**, **rdsuser**, **rdsbackup**,
	// and **rdsmirror**.
	//
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account. It consists of 8 to 128 characters and
	// contains at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters.
	Password pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Indicates the DB user status. Its value can be any of the following:
	// + **unavailable**: The database user is unavailable.
	// + **available**: The database user is available.
	State pulumi.StringPtrInput
}

func (SqlserverAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverAccountState)(nil)).Elem()
}

type sqlserverAccountArgs struct {
	// Specifies the ID of the RDS SQLServer instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the username of the DB account. The username consists of 1 to 128
	// characters and must be different from system usernames. System users include **rdsadmin**, **rdsuser**, **rdsbackup**,
	// and **rdsmirror**.
	//
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account. It consists of 8 to 128 characters and
	// contains at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters.
	Password string `pulumi:"password"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SqlserverAccount resource.
type SqlserverAccountArgs struct {
	// Specifies the ID of the RDS SQLServer instance.
	//
	// Changing this parameter will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the username of the DB account. The username consists of 1 to 128
	// characters and must be different from system usernames. System users include **rdsadmin**, **rdsuser**, **rdsbackup**,
	// and **rdsmirror**.
	//
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account. It consists of 8 to 128 characters and
	// contains at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
	// characters.
	Password pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (SqlserverAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sqlserverAccountArgs)(nil)).Elem()
}

type SqlserverAccountInput interface {
	pulumi.Input

	ToSqlserverAccountOutput() SqlserverAccountOutput
	ToSqlserverAccountOutputWithContext(ctx context.Context) SqlserverAccountOutput
}

func (*SqlserverAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverAccount)(nil)).Elem()
}

func (i *SqlserverAccount) ToSqlserverAccountOutput() SqlserverAccountOutput {
	return i.ToSqlserverAccountOutputWithContext(context.Background())
}

func (i *SqlserverAccount) ToSqlserverAccountOutputWithContext(ctx context.Context) SqlserverAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverAccountOutput)
}

// SqlserverAccountArrayInput is an input type that accepts SqlserverAccountArray and SqlserverAccountArrayOutput values.
// You can construct a concrete instance of `SqlserverAccountArrayInput` via:
//
//	SqlserverAccountArray{ SqlserverAccountArgs{...} }
type SqlserverAccountArrayInput interface {
	pulumi.Input

	ToSqlserverAccountArrayOutput() SqlserverAccountArrayOutput
	ToSqlserverAccountArrayOutputWithContext(context.Context) SqlserverAccountArrayOutput
}

type SqlserverAccountArray []SqlserverAccountInput

func (SqlserverAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverAccount)(nil)).Elem()
}

func (i SqlserverAccountArray) ToSqlserverAccountArrayOutput() SqlserverAccountArrayOutput {
	return i.ToSqlserverAccountArrayOutputWithContext(context.Background())
}

func (i SqlserverAccountArray) ToSqlserverAccountArrayOutputWithContext(ctx context.Context) SqlserverAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverAccountArrayOutput)
}

// SqlserverAccountMapInput is an input type that accepts SqlserverAccountMap and SqlserverAccountMapOutput values.
// You can construct a concrete instance of `SqlserverAccountMapInput` via:
//
//	SqlserverAccountMap{ "key": SqlserverAccountArgs{...} }
type SqlserverAccountMapInput interface {
	pulumi.Input

	ToSqlserverAccountMapOutput() SqlserverAccountMapOutput
	ToSqlserverAccountMapOutputWithContext(context.Context) SqlserverAccountMapOutput
}

type SqlserverAccountMap map[string]SqlserverAccountInput

func (SqlserverAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverAccount)(nil)).Elem()
}

func (i SqlserverAccountMap) ToSqlserverAccountMapOutput() SqlserverAccountMapOutput {
	return i.ToSqlserverAccountMapOutputWithContext(context.Background())
}

func (i SqlserverAccountMap) ToSqlserverAccountMapOutputWithContext(ctx context.Context) SqlserverAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SqlserverAccountMapOutput)
}

type SqlserverAccountOutput struct{ *pulumi.OutputState }

func (SqlserverAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SqlserverAccount)(nil)).Elem()
}

func (o SqlserverAccountOutput) ToSqlserverAccountOutput() SqlserverAccountOutput {
	return o
}

func (o SqlserverAccountOutput) ToSqlserverAccountOutputWithContext(ctx context.Context) SqlserverAccountOutput {
	return o
}

// Specifies the ID of the RDS SQLServer instance.
//
// Changing this parameter will create a new resource.
func (o SqlserverAccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverAccount) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the username of the DB account. The username consists of 1 to 128
// characters and must be different from system usernames. System users include **rdsadmin**, **rdsuser**, **rdsbackup**,
// and **rdsmirror**.
//
// Changing this parameter will create a new resource.
func (o SqlserverAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the password of the DB account. It consists of 8 to 128 characters and
// contains at least three types of the following characters: uppercase letters, lowercase letters, digits, and special
// characters.
func (o SqlserverAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverAccount) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o SqlserverAccountOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverAccount) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the DB user status. Its value can be any of the following:
// + **unavailable**: The database user is unavailable.
// + **available**: The database user is available.
func (o SqlserverAccountOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SqlserverAccount) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type SqlserverAccountArrayOutput struct{ *pulumi.OutputState }

func (SqlserverAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SqlserverAccount)(nil)).Elem()
}

func (o SqlserverAccountArrayOutput) ToSqlserverAccountArrayOutput() SqlserverAccountArrayOutput {
	return o
}

func (o SqlserverAccountArrayOutput) ToSqlserverAccountArrayOutputWithContext(ctx context.Context) SqlserverAccountArrayOutput {
	return o
}

func (o SqlserverAccountArrayOutput) Index(i pulumi.IntInput) SqlserverAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SqlserverAccount {
		return vs[0].([]*SqlserverAccount)[vs[1].(int)]
	}).(SqlserverAccountOutput)
}

type SqlserverAccountMapOutput struct{ *pulumi.OutputState }

func (SqlserverAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SqlserverAccount)(nil)).Elem()
}

func (o SqlserverAccountMapOutput) ToSqlserverAccountMapOutput() SqlserverAccountMapOutput {
	return o
}

func (o SqlserverAccountMapOutput) ToSqlserverAccountMapOutputWithContext(ctx context.Context) SqlserverAccountMapOutput {
	return o
}

func (o SqlserverAccountMapOutput) MapIndex(k pulumi.StringInput) SqlserverAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SqlserverAccount {
		return vs[0].(map[string]*SqlserverAccount)[vs[1].(string)]
	}).(SqlserverAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverAccountInput)(nil)).Elem(), &SqlserverAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverAccountArrayInput)(nil)).Elem(), SqlserverAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SqlserverAccountMapInput)(nil)).Elem(), SqlserverAccountMap{})
	pulumi.RegisterOutputType(SqlserverAccountOutput{})
	pulumi.RegisterOutputType(SqlserverAccountArrayOutput{})
	pulumi.RegisterOutputType(SqlserverAccountMapOutput{})
}

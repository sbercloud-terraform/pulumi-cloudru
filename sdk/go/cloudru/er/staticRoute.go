// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package er

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a static route under the ER route table within SberCloud.
//
// Before using enterprise router, define custom endpoint as shown below:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ### Create a static route and cross the VPC
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/er"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			routeTableId := cfg.RequireObject("routeTableId")
//			destinationVpcCidr := cfg.RequireObject("destinationVpcCidr")
//			sourceVpcAttachmentId := cfg.RequireObject("sourceVpcAttachmentId")
//			_, err := er.NewStaticRoute(ctx, "test", &er.StaticRouteArgs{
//				RouteTableId: pulumi.Any(routeTableId),
//				Destination:  pulumi.Any(destinationVpcCidr),
//				AttachmentId: pulumi.Any(sourceVpcAttachmentId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a black hole route
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/er"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			routeTableId := cfg.RequireObject("routeTableId")
//			destinationVpcCidr := cfg.RequireObject("destinationVpcCidr")
//			_, err := er.NewStaticRoute(ctx, "test", &er.StaticRouteArgs{
//				RouteTableId: pulumi.Any(routeTableId),
//				Destination:  pulumi.Any(destinationVpcCidr),
//				IsBlackhole:  pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Static routes can be imported using the related `route_table_id` and their `id`, separated by a slash (/), e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Er/staticRoute:StaticRoute test <route_table_id>/<id>
// ```
type StaticRoute struct {
	pulumi.CustomResourceState

	// Specifies the ID of the corresponding attachment.
	AttachmentId pulumi.StringPtrOutput `pulumi:"attachmentId"`
	// The creation time of the static route.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Specifies the destination of the static route.\
	// Changing this parameter will create a new resource.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Specifies whether route is the black hole route, defaults to `false`.
	// + If the value is empty or `false`, the parameter `attachmentId` is required.
	// + If the value is `true`, the parameter `attachmentId` must be empty.
	IsBlackhole pulumi.BoolPtrOutput `pulumi:"isBlackhole"`
	// Specifies the region where the static route and related route table are
	// located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the ID of the route table to which the static route
	// belongs.
	// Changing this parameter will create a new resource.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The current status of the static route.
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of the static route.
	Type pulumi.StringOutput `pulumi:"type"`
	// The latest update time of the static route.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewStaticRoute registers a new resource with the given unique name, arguments, and options.
func NewStaticRoute(ctx *pulumi.Context,
	name string, args *StaticRouteArgs, opts ...pulumi.ResourceOption) (*StaticRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticRoute
	err := ctx.RegisterResource("sbercloud:Er/staticRoute:StaticRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticRoute gets an existing StaticRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticRouteState, opts ...pulumi.ResourceOption) (*StaticRoute, error) {
	var resource StaticRoute
	err := ctx.ReadResource("sbercloud:Er/staticRoute:StaticRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticRoute resources.
type staticRouteState struct {
	// Specifies the ID of the corresponding attachment.
	AttachmentId *string `pulumi:"attachmentId"`
	// The creation time of the static route.
	CreatedAt *string `pulumi:"createdAt"`
	// Specifies the destination of the static route.\
	// Changing this parameter will create a new resource.
	Destination *string `pulumi:"destination"`
	// Specifies whether route is the black hole route, defaults to `false`.
	// + If the value is empty or `false`, the parameter `attachmentId` is required.
	// + If the value is `true`, the parameter `attachmentId` must be empty.
	IsBlackhole *bool `pulumi:"isBlackhole"`
	// Specifies the region where the static route and related route table are
	// located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the route table to which the static route
	// belongs.
	// Changing this parameter will create a new resource.
	RouteTableId *string `pulumi:"routeTableId"`
	// The current status of the static route.
	Status *string `pulumi:"status"`
	// The type of the static route.
	Type *string `pulumi:"type"`
	// The latest update time of the static route.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type StaticRouteState struct {
	// Specifies the ID of the corresponding attachment.
	AttachmentId pulumi.StringPtrInput
	// The creation time of the static route.
	CreatedAt pulumi.StringPtrInput
	// Specifies the destination of the static route.\
	// Changing this parameter will create a new resource.
	Destination pulumi.StringPtrInput
	// Specifies whether route is the black hole route, defaults to `false`.
	// + If the value is empty or `false`, the parameter `attachmentId` is required.
	// + If the value is `true`, the parameter `attachmentId` must be empty.
	IsBlackhole pulumi.BoolPtrInput
	// Specifies the region where the static route and related route table are
	// located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the route table to which the static route
	// belongs.
	// Changing this parameter will create a new resource.
	RouteTableId pulumi.StringPtrInput
	// The current status of the static route.
	Status pulumi.StringPtrInput
	// The type of the static route.
	Type pulumi.StringPtrInput
	// The latest update time of the static route.
	UpdatedAt pulumi.StringPtrInput
}

func (StaticRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteState)(nil)).Elem()
}

type staticRouteArgs struct {
	// Specifies the ID of the corresponding attachment.
	AttachmentId *string `pulumi:"attachmentId"`
	// Specifies the destination of the static route.\
	// Changing this parameter will create a new resource.
	Destination string `pulumi:"destination"`
	// Specifies whether route is the black hole route, defaults to `false`.
	// + If the value is empty or `false`, the parameter `attachmentId` is required.
	// + If the value is `true`, the parameter `attachmentId` must be empty.
	IsBlackhole *bool `pulumi:"isBlackhole"`
	// Specifies the region where the static route and related route table are
	// located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the route table to which the static route
	// belongs.
	// Changing this parameter will create a new resource.
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a StaticRoute resource.
type StaticRouteArgs struct {
	// Specifies the ID of the corresponding attachment.
	AttachmentId pulumi.StringPtrInput
	// Specifies the destination of the static route.\
	// Changing this parameter will create a new resource.
	Destination pulumi.StringInput
	// Specifies whether route is the black hole route, defaults to `false`.
	// + If the value is empty or `false`, the parameter `attachmentId` is required.
	// + If the value is `true`, the parameter `attachmentId` must be empty.
	IsBlackhole pulumi.BoolPtrInput
	// Specifies the region where the static route and related route table are
	// located.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the route table to which the static route
	// belongs.
	// Changing this parameter will create a new resource.
	RouteTableId pulumi.StringInput
}

func (StaticRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteArgs)(nil)).Elem()
}

type StaticRouteInput interface {
	pulumi.Input

	ToStaticRouteOutput() StaticRouteOutput
	ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput
}

func (*StaticRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRoute)(nil)).Elem()
}

func (i *StaticRoute) ToStaticRouteOutput() StaticRouteOutput {
	return i.ToStaticRouteOutputWithContext(context.Background())
}

func (i *StaticRoute) ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteOutput)
}

// StaticRouteArrayInput is an input type that accepts StaticRouteArray and StaticRouteArrayOutput values.
// You can construct a concrete instance of `StaticRouteArrayInput` via:
//
//	StaticRouteArray{ StaticRouteArgs{...} }
type StaticRouteArrayInput interface {
	pulumi.Input

	ToStaticRouteArrayOutput() StaticRouteArrayOutput
	ToStaticRouteArrayOutputWithContext(context.Context) StaticRouteArrayOutput
}

type StaticRouteArray []StaticRouteInput

func (StaticRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRoute)(nil)).Elem()
}

func (i StaticRouteArray) ToStaticRouteArrayOutput() StaticRouteArrayOutput {
	return i.ToStaticRouteArrayOutputWithContext(context.Background())
}

func (i StaticRouteArray) ToStaticRouteArrayOutputWithContext(ctx context.Context) StaticRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteArrayOutput)
}

// StaticRouteMapInput is an input type that accepts StaticRouteMap and StaticRouteMapOutput values.
// You can construct a concrete instance of `StaticRouteMapInput` via:
//
//	StaticRouteMap{ "key": StaticRouteArgs{...} }
type StaticRouteMapInput interface {
	pulumi.Input

	ToStaticRouteMapOutput() StaticRouteMapOutput
	ToStaticRouteMapOutputWithContext(context.Context) StaticRouteMapOutput
}

type StaticRouteMap map[string]StaticRouteInput

func (StaticRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRoute)(nil)).Elem()
}

func (i StaticRouteMap) ToStaticRouteMapOutput() StaticRouteMapOutput {
	return i.ToStaticRouteMapOutputWithContext(context.Background())
}

func (i StaticRouteMap) ToStaticRouteMapOutputWithContext(ctx context.Context) StaticRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteMapOutput)
}

type StaticRouteOutput struct{ *pulumi.OutputState }

func (StaticRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRoute)(nil)).Elem()
}

func (o StaticRouteOutput) ToStaticRouteOutput() StaticRouteOutput {
	return o
}

func (o StaticRouteOutput) ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput {
	return o
}

// Specifies the ID of the corresponding attachment.
func (o StaticRouteOutput) AttachmentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringPtrOutput { return v.AttachmentId }).(pulumi.StringPtrOutput)
}

// The creation time of the static route.
func (o StaticRouteOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Specifies the destination of the static route.\
// Changing this parameter will create a new resource.
func (o StaticRouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Specifies whether route is the black hole route, defaults to `false`.
// + If the value is empty or `false`, the parameter `attachmentId` is required.
// + If the value is `true`, the parameter `attachmentId` must be empty.
func (o StaticRouteOutput) IsBlackhole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.BoolPtrOutput { return v.IsBlackhole }).(pulumi.BoolPtrOutput)
}

// Specifies the region where the static route and related route table are
// located.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o StaticRouteOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the ID of the route table to which the static route
// belongs.
// Changing this parameter will create a new resource.
func (o StaticRouteOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// The current status of the static route.
func (o StaticRouteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of the static route.
func (o StaticRouteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The latest update time of the static route.
func (o StaticRouteOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type StaticRouteArrayOutput struct{ *pulumi.OutputState }

func (StaticRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRoute)(nil)).Elem()
}

func (o StaticRouteArrayOutput) ToStaticRouteArrayOutput() StaticRouteArrayOutput {
	return o
}

func (o StaticRouteArrayOutput) ToStaticRouteArrayOutputWithContext(ctx context.Context) StaticRouteArrayOutput {
	return o
}

func (o StaticRouteArrayOutput) Index(i pulumi.IntInput) StaticRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StaticRoute {
		return vs[0].([]*StaticRoute)[vs[1].(int)]
	}).(StaticRouteOutput)
}

type StaticRouteMapOutput struct{ *pulumi.OutputState }

func (StaticRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRoute)(nil)).Elem()
}

func (o StaticRouteMapOutput) ToStaticRouteMapOutput() StaticRouteMapOutput {
	return o
}

func (o StaticRouteMapOutput) ToStaticRouteMapOutputWithContext(ctx context.Context) StaticRouteMapOutput {
	return o
}

func (o StaticRouteMapOutput) MapIndex(k pulumi.StringInput) StaticRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StaticRoute {
		return vs[0].(map[string]*StaticRoute)[vs[1].(string)]
	}).(StaticRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteInput)(nil)).Elem(), &StaticRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteArrayInput)(nil)).Elem(), StaticRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteMapInput)(nil)).Elem(), StaticRouteMap{})
	pulumi.RegisterOutputType(StaticRouteOutput{})
	pulumi.RegisterOutputType(StaticRouteArrayOutput{})
	pulumi.RegisterOutputType(StaticRouteMapOutput{})
}

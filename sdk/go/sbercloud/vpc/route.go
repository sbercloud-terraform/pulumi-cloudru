// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a VPC route resource within SberCloud.
//
// ## Example Usage
//
// ### Add route to the default route table
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			nexthop := cfg.RequireObject("nexthop")
//			_, err := vpc.NewRoute(ctx, "vpc_route", &vpc.RouteArgs{
//				VpcId:       pulumi.Any(vpcId),
//				Destination: pulumi.String("192.168.0.0/16"),
//				Type:        pulumi.String("peering"),
//				Nexthop:     pulumi.Any(nexthop),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Add route to a custom route table
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			nexthop := cfg.RequireObject("nexthop")
//			rtb, err := vpc.GetRouteTable(ctx, &vpc.GetRouteTableArgs{
//				VpcId: vpcId,
//				Name:  pulumi.StringRef("demo"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewRoute(ctx, "vpc_route", &vpc.RouteArgs{
//				VpcId:        pulumi.Any(vpcId),
//				RouteTableId: pulumi.String(rtb.Id),
//				Destination:  pulumi.String("172.16.8.0/24"),
//				Type:         pulumi.String("ecs"),
//				Nexthop:      pulumi.Any(nexthop),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPC routes can be imported using the route table ID and their `destination` separated by a slash, e.g.
//
// ```sh
// $ pulumi import sbercloud:Vpc/route:Route test <route_table_id>/<destination>
// ```
type Route struct {
	pulumi.CustomResourceState

	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap with any
	// subnet in the VPC. Changing this creates a new resource.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// Specifies the next hop.
	// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
	// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
	// + If the route type is **vip**, the value is a virtual IP address.
	// + If the route type is **nat**, the value is a VPN gateway ID.
	// + If the route type is **peering**, the value is a VPC peering connection ID.
	// + If the route type is **vpn**, the value is a VPN gateway ID.
	// + If the route type is **dc**, the value is a Direct Connect gateway ID.
	// + If the route type is **cc**, the value is a Cloud Connection ID.
	Nexthop pulumi.StringOutput `pulumi:"nexthop"`
	// The region in which to create the VPC route. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the route table ID for which a route is to be added.
	// If the value is not set, the route will be added to the *default* route table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The name of route table.
	RouteTableName pulumi.StringOutput `pulumi:"routeTableName"`
	// Specifies the route type. Currently, the value can be:
	// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the VPC for which a route is to be added. Changing this creates a
	// new resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewRoute registers a new resource with the given unique name, arguments, and options.
func NewRoute(ctx *pulumi.Context,
	name string, args *RouteArgs, opts ...pulumi.ResourceOption) (*Route, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Nexthop == nil {
		return nil, errors.New("invalid value for required argument 'Nexthop'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Route
	err := ctx.RegisterResource("sbercloud:Vpc/route:Route", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoute gets an existing Route resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteState, opts ...pulumi.ResourceOption) (*Route, error) {
	var resource Route
	err := ctx.ReadResource("sbercloud:Vpc/route:Route", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Route resources.
type routeState struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap with any
	// subnet in the VPC. Changing this creates a new resource.
	Destination *string `pulumi:"destination"`
	// Specifies the next hop.
	// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
	// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
	// + If the route type is **vip**, the value is a virtual IP address.
	// + If the route type is **nat**, the value is a VPN gateway ID.
	// + If the route type is **peering**, the value is a VPC peering connection ID.
	// + If the route type is **vpn**, the value is a VPN gateway ID.
	// + If the route type is **dc**, the value is a Direct Connect gateway ID.
	// + If the route type is **cc**, the value is a Cloud Connection ID.
	Nexthop *string `pulumi:"nexthop"`
	// The region in which to create the VPC route. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the route table ID for which a route is to be added.
	// If the value is not set, the route will be added to the *default* route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// The name of route table.
	RouteTableName *string `pulumi:"routeTableName"`
	// Specifies the route type. Currently, the value can be:
	// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
	Type *string `pulumi:"type"`
	// Specifies the VPC for which a route is to be added. Changing this creates a
	// new resource.
	VpcId *string `pulumi:"vpcId"`
}

type RouteState struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput
	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap with any
	// subnet in the VPC. Changing this creates a new resource.
	Destination pulumi.StringPtrInput
	// Specifies the next hop.
	// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
	// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
	// + If the route type is **vip**, the value is a virtual IP address.
	// + If the route type is **nat**, the value is a VPN gateway ID.
	// + If the route type is **peering**, the value is a VPC peering connection ID.
	// + If the route type is **vpn**, the value is a VPN gateway ID.
	// + If the route type is **dc**, the value is a Direct Connect gateway ID.
	// + If the route type is **cc**, the value is a Cloud Connection ID.
	Nexthop pulumi.StringPtrInput
	// The region in which to create the VPC route. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the route table ID for which a route is to be added.
	// If the value is not set, the route will be added to the *default* route table.
	RouteTableId pulumi.StringPtrInput
	// The name of route table.
	RouteTableName pulumi.StringPtrInput
	// Specifies the route type. Currently, the value can be:
	// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
	Type pulumi.StringPtrInput
	// Specifies the VPC for which a route is to be added. Changing this creates a
	// new resource.
	VpcId pulumi.StringPtrInput
}

func (RouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeState)(nil)).Elem()
}

type routeArgs struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description *string `pulumi:"description"`
	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap with any
	// subnet in the VPC. Changing this creates a new resource.
	Destination string `pulumi:"destination"`
	// Specifies the next hop.
	// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
	// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
	// + If the route type is **vip**, the value is a virtual IP address.
	// + If the route type is **nat**, the value is a VPN gateway ID.
	// + If the route type is **peering**, the value is a VPC peering connection ID.
	// + If the route type is **vpn**, the value is a VPN gateway ID.
	// + If the route type is **dc**, the value is a Direct Connect gateway ID.
	// + If the route type is **cc**, the value is a Cloud Connection ID.
	Nexthop string `pulumi:"nexthop"`
	// The region in which to create the VPC route. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Specifies the route table ID for which a route is to be added.
	// If the value is not set, the route will be added to the *default* route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// Specifies the route type. Currently, the value can be:
	// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
	Type string `pulumi:"type"`
	// Specifies the VPC for which a route is to be added. Changing this creates a
	// new resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Route resource.
type RouteArgs struct {
	// Specifies the supplementary information about the route.
	// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
	Description pulumi.StringPtrInput
	// Specifies the destination address in the CIDR notation format,
	// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap with any
	// subnet in the VPC. Changing this creates a new resource.
	Destination pulumi.StringInput
	// Specifies the next hop.
	// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
	// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
	// + If the route type is **vip**, the value is a virtual IP address.
	// + If the route type is **nat**, the value is a VPN gateway ID.
	// + If the route type is **peering**, the value is a VPC peering connection ID.
	// + If the route type is **vpn**, the value is a VPN gateway ID.
	// + If the route type is **dc**, the value is a Direct Connect gateway ID.
	// + If the route type is **cc**, the value is a Cloud Connection ID.
	Nexthop pulumi.StringInput
	// The region in which to create the VPC route. If omitted, the provider-level
	// region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Specifies the route table ID for which a route is to be added.
	// If the value is not set, the route will be added to the *default* route table.
	RouteTableId pulumi.StringPtrInput
	// Specifies the route type. Currently, the value can be:
	// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
	Type pulumi.StringInput
	// Specifies the VPC for which a route is to be added. Changing this creates a
	// new resource.
	VpcId pulumi.StringInput
}

func (RouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeArgs)(nil)).Elem()
}

type RouteInput interface {
	pulumi.Input

	ToRouteOutput() RouteOutput
	ToRouteOutputWithContext(ctx context.Context) RouteOutput
}

func (*Route) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (i *Route) ToRouteOutput() RouteOutput {
	return i.ToRouteOutputWithContext(context.Background())
}

func (i *Route) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteOutput)
}

// RouteArrayInput is an input type that accepts RouteArray and RouteArrayOutput values.
// You can construct a concrete instance of `RouteArrayInput` via:
//
//	RouteArray{ RouteArgs{...} }
type RouteArrayInput interface {
	pulumi.Input

	ToRouteArrayOutput() RouteArrayOutput
	ToRouteArrayOutputWithContext(context.Context) RouteArrayOutput
}

type RouteArray []RouteInput

func (RouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (i RouteArray) ToRouteArrayOutput() RouteArrayOutput {
	return i.ToRouteArrayOutputWithContext(context.Background())
}

func (i RouteArray) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteArrayOutput)
}

// RouteMapInput is an input type that accepts RouteMap and RouteMapOutput values.
// You can construct a concrete instance of `RouteMapInput` via:
//
//	RouteMap{ "key": RouteArgs{...} }
type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(context.Context) RouteMapOutput
}

type RouteMap map[string]RouteInput

func (RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (i RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

type RouteOutput struct{ *pulumi.OutputState }

func (RouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Route)(nil)).Elem()
}

func (o RouteOutput) ToRouteOutput() RouteOutput {
	return o
}

func (o RouteOutput) ToRouteOutputWithContext(ctx context.Context) RouteOutput {
	return o
}

// Specifies the supplementary information about the route.
// The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
func (o RouteOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Route) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the destination address in the CIDR notation format,
// for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap with any
// subnet in the VPC. Changing this creates a new resource.
func (o RouteOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// Specifies the next hop.
// + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
// + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
// + If the route type is **vip**, the value is a virtual IP address.
// + If the route type is **nat**, the value is a VPN gateway ID.
// + If the route type is **peering**, the value is a VPC peering connection ID.
// + If the route type is **vpn**, the value is a VPN gateway ID.
// + If the route type is **dc**, the value is a Direct Connect gateway ID.
// + If the route type is **cc**, the value is a Cloud Connection ID.
func (o RouteOutput) Nexthop() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Nexthop }).(pulumi.StringOutput)
}

// The region in which to create the VPC route. If omitted, the provider-level
// region will be used. Changing this creates a new resource.
func (o RouteOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the route table ID for which a route is to be added.
// If the value is not set, the route will be added to the *default* route table.
func (o RouteOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// The name of route table.
func (o RouteOutput) RouteTableName() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.RouteTableName }).(pulumi.StringOutput)
}

// Specifies the route type. Currently, the value can be:
// **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
func (o RouteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies the VPC for which a route is to be added. Changing this creates a
// new resource.
func (o RouteOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Route) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type RouteArrayOutput struct{ *pulumi.OutputState }

func (RouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Route)(nil)).Elem()
}

func (o RouteArrayOutput) ToRouteArrayOutput() RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) ToRouteArrayOutputWithContext(ctx context.Context) RouteArrayOutput {
	return o
}

func (o RouteArrayOutput) Index(i pulumi.IntInput) RouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Route {
		return vs[0].([]*Route)[vs[1].(int)]
	}).(RouteOutput)
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Route)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) MapIndex(k pulumi.StringInput) RouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Route {
		return vs[0].(map[string]*Route)[vs[1].(string)]
	}).(RouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteInput)(nil)).Elem(), &Route{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteArrayInput)(nil)).Elem(), RouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), RouteMap{})
	pulumi.RegisterOutputType(RouteOutput{})
	pulumi.RegisterOutputType(RouteArrayOutput{})
	pulumi.RegisterOutputType(RouteMapOutput{})
}

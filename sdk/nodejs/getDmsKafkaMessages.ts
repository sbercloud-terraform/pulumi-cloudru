// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to get the list of Kafka messages.
 *
 * ## Example Usage
 *
 * ### Query messages by creation time
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const topic = config.requireObject<any>("topic");
 * const startTime = config.requireObject<any>("startTime");
 * const endTime = config.requireObject<any>("endTime");
 * const test = sbercloud.getDmsKafkaMessages({
 *     instanceId: instanceId,
 *     topic: topic,
 *     startTime: startTime,
 *     endTime: endTime,
 * });
 * ```
 *
 * ### Query messages by content's keyword, a maximum of 10 messages can be returned
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const topic = config.requireObject<any>("topic");
 * const startTime = config.requireObject<any>("startTime");
 * const endTime = config.requireObject<any>("endTime");
 * const keyword = config.requireObject<any>("keyword");
 * const test = sbercloud.getDmsKafkaMessages({
 *     instanceId: instanceId,
 *     topic: topic,
 *     startTime: startTime,
 *     endTime: endTime,
 *     keyword: keyword,
 * });
 * ```
 *
 * ### Query messages content by offset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const topic = config.requireObject<any>("topic");
 * const partition = config.requireObject<any>("partition");
 * const messageOffset = config.requireObject<any>("messageOffset");
 * const test = sbercloud.getDmsKafkaMessages({
 *     instanceId: instanceId,
 *     topic: topic,
 *     partition: partition,
 *     messageOffset: messageOffset,
 * });
 * ```
 */
export function getDmsKafkaMessages(args: GetDmsKafkaMessagesArgs, opts?: pulumi.InvokeOptions): Promise<GetDmsKafkaMessagesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:index/getDmsKafkaMessages:getDmsKafkaMessages", {
        "download": args.download,
        "endTime": args.endTime,
        "instanceId": args.instanceId,
        "keyword": args.keyword,
        "messageOffset": args.messageOffset,
        "partition": args.partition,
        "region": args.region,
        "startTime": args.startTime,
        "topic": args.topic,
    }, opts);
}

/**
 * A collection of arguments for invoking getDmsKafkaMessages.
 */
export interface GetDmsKafkaMessagesArgs {
    /**
     * Whether download is required.
     * If it is **false**, the big message will be truncated. Defaults to **false**.
     */
    download?: boolean;
    /**
     * Specifies the end time, a Unix timestamp in millisecond.
     * This parameter is mandatory when you query the message creation time.
     */
    endTime?: string;
    /**
     * Specifies the instance ID.
     */
    instanceId: string;
    /**
     * Specifies the keyword.
     * If it's specified, a maximum of **10** messages can be returned.
     */
    keyword?: string;
    /**
     * Specifies the message offset.
     * This parameter is mandatory when you query the message content by offset.
     */
    messageOffset?: string;
    /**
     * Specifies the partition.
     * This parameter is mandatory when you query the message content by offset.
     */
    partition?: string;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the start time, a Unix timestamp in millisecond.
     * This parameter is mandatory when you query the message creation time.
     */
    startTime?: string;
    /**
     * Specifies the topic name.
     */
    topic: string;
}

/**
 * A collection of values returned by getDmsKafkaMessages.
 */
export interface GetDmsKafkaMessagesResult {
    readonly download?: boolean;
    readonly endTime?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly keyword?: string;
    /**
     * Indicates the message offset.
     */
    readonly messageOffset?: string;
    /**
     * Indicates the message list.
     */
    readonly messages: outputs.GetDmsKafkaMessagesMessage[];
    /**
     * Indicates the partition where the message is located.
     */
    readonly partition?: string;
    readonly region: string;
    readonly startTime?: string;
    readonly topic: string;
}
/**
 * Use this data source to get the list of Kafka messages.
 *
 * ## Example Usage
 *
 * ### Query messages by creation time
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const topic = config.requireObject<any>("topic");
 * const startTime = config.requireObject<any>("startTime");
 * const endTime = config.requireObject<any>("endTime");
 * const test = sbercloud.getDmsKafkaMessages({
 *     instanceId: instanceId,
 *     topic: topic,
 *     startTime: startTime,
 *     endTime: endTime,
 * });
 * ```
 *
 * ### Query messages by content's keyword, a maximum of 10 messages can be returned
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const topic = config.requireObject<any>("topic");
 * const startTime = config.requireObject<any>("startTime");
 * const endTime = config.requireObject<any>("endTime");
 * const keyword = config.requireObject<any>("keyword");
 * const test = sbercloud.getDmsKafkaMessages({
 *     instanceId: instanceId,
 *     topic: topic,
 *     startTime: startTime,
 *     endTime: endTime,
 *     keyword: keyword,
 * });
 * ```
 *
 * ### Query messages content by offset
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const topic = config.requireObject<any>("topic");
 * const partition = config.requireObject<any>("partition");
 * const messageOffset = config.requireObject<any>("messageOffset");
 * const test = sbercloud.getDmsKafkaMessages({
 *     instanceId: instanceId,
 *     topic: topic,
 *     partition: partition,
 *     messageOffset: messageOffset,
 * });
 * ```
 */
export function getDmsKafkaMessagesOutput(args: GetDmsKafkaMessagesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDmsKafkaMessagesResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:index/getDmsKafkaMessages:getDmsKafkaMessages", {
        "download": args.download,
        "endTime": args.endTime,
        "instanceId": args.instanceId,
        "keyword": args.keyword,
        "messageOffset": args.messageOffset,
        "partition": args.partition,
        "region": args.region,
        "startTime": args.startTime,
        "topic": args.topic,
    }, opts);
}

/**
 * A collection of arguments for invoking getDmsKafkaMessages.
 */
export interface GetDmsKafkaMessagesOutputArgs {
    /**
     * Whether download is required.
     * If it is **false**, the big message will be truncated. Defaults to **false**.
     */
    download?: pulumi.Input<boolean>;
    /**
     * Specifies the end time, a Unix timestamp in millisecond.
     * This parameter is mandatory when you query the message creation time.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Specifies the instance ID.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the keyword.
     * If it's specified, a maximum of **10** messages can be returned.
     */
    keyword?: pulumi.Input<string>;
    /**
     * Specifies the message offset.
     * This parameter is mandatory when you query the message content by offset.
     */
    messageOffset?: pulumi.Input<string>;
    /**
     * Specifies the partition.
     * This parameter is mandatory when you query the message content by offset.
     */
    partition?: pulumi.Input<string>;
    /**
     * Specifies the region in which to query the resource.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the start time, a Unix timestamp in millisecond.
     * This parameter is mandatory when you query the message creation time.
     */
    startTime?: pulumi.Input<string>;
    /**
     * Specifies the topic name.
     */
    topic: pulumi.Input<string>;
}

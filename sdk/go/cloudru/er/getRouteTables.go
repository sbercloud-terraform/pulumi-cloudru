// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package er

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to query the route tables under the ER instance within SberCloud.
//
// Before using enterprise router, define custom endpoint as shown below:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// ## Example Usage
//
// ### Querying specified route tables under ER instance using name
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/er"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			routeTableName := cfg.RequireObject("routeTableName")
//			_, err := er.GetRouteTables(ctx, &er.GetRouteTablesArgs{
//				InstanceId: instanceId,
//				Name:       pulumi.StringRef(routeTableName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Querying specified route tables under ER instance using tags
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/er"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := er.GetRouteTables(ctx, &er.GetRouteTablesArgs{
//				InstanceId: instanceId,
//				Tags: map[string]interface{}{
//					"foo": "bar",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRouteTables(ctx *pulumi.Context, args *GetRouteTablesArgs, opts ...pulumi.InvokeOption) (*GetRouteTablesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetRouteTablesResult
	err := ctx.Invoke("sbercloud:Er/getRouteTables:getRouteTables", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteTables.
type GetRouteTablesArgs struct {
	// Specifies the ID of the ER instance to which the route tables belongs.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the name used to filter the route tables.\
	// The name can contain `1` to `64` characters, only English letters, Chinese characters, digits, underscore (_),
	// hyphens (-) and dots (.) allowed.
	Name *string `pulumi:"name"`
	// Specifies the region where the ER instance and route table are located.\
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the route table ID used to query specified route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// Specifies the key/value pairs used to filter the route tables.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getRouteTables.
type GetRouteTablesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// The name of the route table.
	Name         *string `pulumi:"name"`
	Region       string  `pulumi:"region"`
	RouteTableId *string `pulumi:"routeTableId"`
	// All route tables that match the filter parameters.\
	// The object structure is documented below.
	RouteTables []GetRouteTablesRouteTable `pulumi:"routeTables"`
	Tags        map[string]string          `pulumi:"tags"`
}

func GetRouteTablesOutput(ctx *pulumi.Context, args GetRouteTablesOutputArgs, opts ...pulumi.InvokeOption) GetRouteTablesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetRouteTablesResultOutput, error) {
			args := v.(GetRouteTablesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Er/getRouteTables:getRouteTables", args, GetRouteTablesResultOutput{}, options).(GetRouteTablesResultOutput), nil
		}).(GetRouteTablesResultOutput)
}

// A collection of arguments for invoking getRouteTables.
type GetRouteTablesOutputArgs struct {
	// Specifies the ID of the ER instance to which the route tables belongs.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the name used to filter the route tables.\
	// The name can contain `1` to `64` characters, only English letters, Chinese characters, digits, underscore (_),
	// hyphens (-) and dots (.) allowed.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region where the ER instance and route table are located.\
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the route table ID used to query specified route table.
	RouteTableId pulumi.StringPtrInput `pulumi:"routeTableId"`
	// Specifies the key/value pairs used to filter the route tables.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetRouteTablesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTablesArgs)(nil)).Elem()
}

// A collection of values returned by getRouteTables.
type GetRouteTablesResultOutput struct{ *pulumi.OutputState }

func (GetRouteTablesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTablesResult)(nil)).Elem()
}

func (o GetRouteTablesResultOutput) ToGetRouteTablesResultOutput() GetRouteTablesResultOutput {
	return o
}

func (o GetRouteTablesResultOutput) ToGetRouteTablesResultOutputWithContext(ctx context.Context) GetRouteTablesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRouteTablesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRouteTablesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the route table.
func (o GetRouteTablesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouteTablesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetRouteTablesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetRouteTablesResultOutput) RouteTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouteTablesResult) *string { return v.RouteTableId }).(pulumi.StringPtrOutput)
}

// All route tables that match the filter parameters.\
// The object structure is documented below.
func (o GetRouteTablesResultOutput) RouteTables() GetRouteTablesRouteTableArrayOutput {
	return o.ApplyT(func(v GetRouteTablesResult) []GetRouteTablesRouteTable { return v.RouteTables }).(GetRouteTablesRouteTableArrayOutput)
}

func (o GetRouteTablesResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetRouteTablesResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRouteTablesResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a network VIP resource within SberCloud VPC.
//
// ## Import
//
// Network VIPs can be imported using their `id`, e.g.:
//
// ```sh
// $ pulumi import sbercloud:Vpc/vip:Vip test ce595799-da26-4015-8db5-7733c6db292e
// ```
type Vip struct {
	pulumi.CustomResourceState

	// The device owner of the VIP.
	DeviceOwner pulumi.StringOutput `pulumi:"deviceOwner"`
	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Specifies the IP version, either `4` (default) or `6`.
	// Changing this will create a new VIP resource.
	IpVersion pulumi.IntOutput `pulumi:"ipVersion"`
	// The MAC address of the VIP.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// Specifies a unique name for the VIP.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the network ID of the VPC subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The VIP status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Deprecated: use ipVersion instead
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewVip registers a new resource with the given unique name, arguments, and options.
func NewVip(ctx *pulumi.Context,
	name string, args *VipArgs, opts ...pulumi.ResourceOption) (*Vip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vip
	err := ctx.RegisterResource("sbercloud:Vpc/vip:Vip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVip gets an existing Vip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VipState, opts ...pulumi.ResourceOption) (*Vip, error) {
	var resource Vip
	err := ctx.ReadResource("sbercloud:Vpc/vip:Vip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vip resources.
type vipState struct {
	// The device owner of the VIP.
	DeviceOwner *string `pulumi:"deviceOwner"`
	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the IP version, either `4` (default) or `6`.
	// Changing this will create a new VIP resource.
	IpVersion *int `pulumi:"ipVersion"`
	// The MAC address of the VIP.
	MacAddress *string `pulumi:"macAddress"`
	// Specifies a unique name for the VIP.
	Name *string `pulumi:"name"`
	// Specifies the network ID of the VPC subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	NetworkId *string `pulumi:"networkId"`
	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	Region *string `pulumi:"region"`
	// The VIP status.
	Status *string `pulumi:"status"`
	// Deprecated: use ipVersion instead
	SubnetId *string `pulumi:"subnetId"`
}

type VipState struct {
	// The device owner of the VIP.
	DeviceOwner pulumi.StringPtrInput
	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	IpAddress pulumi.StringPtrInput
	// Specifies the IP version, either `4` (default) or `6`.
	// Changing this will create a new VIP resource.
	IpVersion pulumi.IntPtrInput
	// The MAC address of the VIP.
	MacAddress pulumi.StringPtrInput
	// Specifies a unique name for the VIP.
	Name pulumi.StringPtrInput
	// Specifies the network ID of the VPC subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	NetworkId pulumi.StringPtrInput
	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	Region pulumi.StringPtrInput
	// The VIP status.
	Status pulumi.StringPtrInput
	// Deprecated: use ipVersion instead
	SubnetId pulumi.StringPtrInput
}

func (VipState) ElementType() reflect.Type {
	return reflect.TypeOf((*vipState)(nil)).Elem()
}

type vipArgs struct {
	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the IP version, either `4` (default) or `6`.
	// Changing this will create a new VIP resource.
	IpVersion *int `pulumi:"ipVersion"`
	// Specifies a unique name for the VIP.
	Name *string `pulumi:"name"`
	// Specifies the network ID of the VPC subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	NetworkId string `pulumi:"networkId"`
	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	Region *string `pulumi:"region"`
	// Deprecated: use ipVersion instead
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a Vip resource.
type VipArgs struct {
	// Specifies the IP address desired in the subnet for this VIP.
	// Changing this will create a new VIP resource.
	IpAddress pulumi.StringPtrInput
	// Specifies the IP version, either `4` (default) or `6`.
	// Changing this will create a new VIP resource.
	IpVersion pulumi.IntPtrInput
	// Specifies a unique name for the VIP.
	Name pulumi.StringPtrInput
	// Specifies the network ID of the VPC subnet to which the VIP belongs.
	// Changing this will create a new VIP resource.
	NetworkId pulumi.StringInput
	// Specifies the region in which to create the VIP.
	// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
	Region pulumi.StringPtrInput
	// Deprecated: use ipVersion instead
	SubnetId pulumi.StringPtrInput
}

func (VipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vipArgs)(nil)).Elem()
}

type VipInput interface {
	pulumi.Input

	ToVipOutput() VipOutput
	ToVipOutputWithContext(ctx context.Context) VipOutput
}

func (*Vip) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (i *Vip) ToVipOutput() VipOutput {
	return i.ToVipOutputWithContext(context.Background())
}

func (i *Vip) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipOutput)
}

// VipArrayInput is an input type that accepts VipArray and VipArrayOutput values.
// You can construct a concrete instance of `VipArrayInput` via:
//
//	VipArray{ VipArgs{...} }
type VipArrayInput interface {
	pulumi.Input

	ToVipArrayOutput() VipArrayOutput
	ToVipArrayOutputWithContext(context.Context) VipArrayOutput
}

type VipArray []VipInput

func (VipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (i VipArray) ToVipArrayOutput() VipArrayOutput {
	return i.ToVipArrayOutputWithContext(context.Background())
}

func (i VipArray) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipArrayOutput)
}

// VipMapInput is an input type that accepts VipMap and VipMapOutput values.
// You can construct a concrete instance of `VipMapInput` via:
//
//	VipMap{ "key": VipArgs{...} }
type VipMapInput interface {
	pulumi.Input

	ToVipMapOutput() VipMapOutput
	ToVipMapOutputWithContext(context.Context) VipMapOutput
}

type VipMap map[string]VipInput

func (VipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (i VipMap) ToVipMapOutput() VipMapOutput {
	return i.ToVipMapOutputWithContext(context.Background())
}

func (i VipMap) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VipMapOutput)
}

type VipOutput struct{ *pulumi.OutputState }

func (VipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vip)(nil)).Elem()
}

func (o VipOutput) ToVipOutput() VipOutput {
	return o
}

func (o VipOutput) ToVipOutputWithContext(ctx context.Context) VipOutput {
	return o
}

// The device owner of the VIP.
func (o VipOutput) DeviceOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.DeviceOwner }).(pulumi.StringOutput)
}

// Specifies the IP address desired in the subnet for this VIP.
// Changing this will create a new VIP resource.
func (o VipOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Specifies the IP version, either `4` (default) or `6`.
// Changing this will create a new VIP resource.
func (o VipOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Vip) pulumi.IntOutput { return v.IpVersion }).(pulumi.IntOutput)
}

// The MAC address of the VIP.
func (o VipOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// Specifies a unique name for the VIP.
func (o VipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the network ID of the VPC subnet to which the VIP belongs.
// Changing this will create a new VIP resource.
func (o VipOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the VIP.
// If omitted, the provider-level region will be used. Changing this will create a new VIP resource.
func (o VipOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The VIP status.
func (o VipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Deprecated: use ipVersion instead
func (o VipOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vip) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type VipArrayOutput struct{ *pulumi.OutputState }

func (VipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vip)(nil)).Elem()
}

func (o VipArrayOutput) ToVipArrayOutput() VipArrayOutput {
	return o
}

func (o VipArrayOutput) ToVipArrayOutputWithContext(ctx context.Context) VipArrayOutput {
	return o
}

func (o VipArrayOutput) Index(i pulumi.IntInput) VipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].([]*Vip)[vs[1].(int)]
	}).(VipOutput)
}

type VipMapOutput struct{ *pulumi.OutputState }

func (VipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vip)(nil)).Elem()
}

func (o VipMapOutput) ToVipMapOutput() VipMapOutput {
	return o
}

func (o VipMapOutput) ToVipMapOutputWithContext(ctx context.Context) VipMapOutput {
	return o
}

func (o VipMapOutput) MapIndex(k pulumi.StringInput) VipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vip {
		return vs[0].(map[string]*Vip)[vs[1].(string)]
	}).(VipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VipInput)(nil)).Elem(), &Vip{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipArrayInput)(nil)).Elem(), VipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VipMapInput)(nil)).Elem(), VipMap{})
	pulumi.RegisterOutputType(VipOutput{})
	pulumi.RegisterOutputType(VipArrayOutput{})
	pulumi.RegisterOutputType(VipMapOutput{})
}

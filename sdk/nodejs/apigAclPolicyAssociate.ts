// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ApigAclPolicyAssociate extends pulumi.CustomResource {
    /**
     * Get an existing ApigAclPolicyAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigAclPolicyAssociateState, opts?: pulumi.CustomResourceOptions): ApigAclPolicyAssociate {
        return new ApigAclPolicyAssociate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/apigAclPolicyAssociate:ApigAclPolicyAssociate';

    /**
     * Returns true if the given object is an instance of ApigAclPolicyAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigAclPolicyAssociate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigAclPolicyAssociate.__pulumiType;
    }

    /**
     * The ID of the dedicated instance to which the APIs and the ACL policy belong.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The ACL Policy ID for APIs binding.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The publish IDs corresponding to the APIs bound by the ACL policy.
     */
    public readonly publishIds!: pulumi.Output<string[]>;
    /**
     * The region where the ACL policy and the APIs are located.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a ApigAclPolicyAssociate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigAclPolicyAssociateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigAclPolicyAssociateArgs | ApigAclPolicyAssociateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigAclPolicyAssociateState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["publishIds"] = state ? state.publishIds : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as ApigAclPolicyAssociateArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.publishIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishIds'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["publishIds"] = args ? args.publishIds : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigAclPolicyAssociate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApigAclPolicyAssociate resources.
 */
export interface ApigAclPolicyAssociateState {
    /**
     * The ID of the dedicated instance to which the APIs and the ACL policy belong.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The ACL Policy ID for APIs binding.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The publish IDs corresponding to the APIs bound by the ACL policy.
     */
    publishIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region where the ACL policy and the APIs are located.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApigAclPolicyAssociate resource.
 */
export interface ApigAclPolicyAssociateArgs {
    /**
     * The ID of the dedicated instance to which the APIs and the ACL policy belong.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The ACL Policy ID for APIs binding.
     */
    policyId: pulumi.Input<string>;
    /**
     * The publish IDs corresponding to the APIs bound by the ACL policy.
     */
    publishIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The region where the ACL policy and the APIs are located.
     */
    region?: pulumi.Input<string>;
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetPgRolesResult',
    'AwaitableGetPgRolesResult',
    'get_pg_roles',
    'get_pg_roles_output',
]

@pulumi.output_type
class GetPgRolesResult:
    """
    A collection of values returned by getPgRoles.
    """
    def __init__(__self__, account=None, id=None, instance_id=None, region=None, roles=None):
        if account and not isinstance(account, str):
            raise TypeError("Expected argument 'account' to be a str")
        pulumi.set(__self__, "account", account)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)

    @_builtins.property
    @pulumi.getter
    def account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def roles(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "roles")


class AwaitableGetPgRolesResult(GetPgRolesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPgRolesResult(
            account=self.account,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            roles=self.roles)


def get_pg_roles(account: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPgRolesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['account'] = account
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:Rds/getPgRoles:getPgRoles', __args__, opts=opts, typ=GetPgRolesResult).value

    return AwaitableGetPgRolesResult(
        account=pulumi.get(__ret__, 'account'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        roles=pulumi.get(__ret__, 'roles'))
def get_pg_roles_output(account: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPgRolesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['account'] = account
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:Rds/getPgRoles:getPgRoles', __args__, opts=opts, typ=GetPgRolesResult)
    return __ret__.apply(lambda __response__: GetPgRolesResult(
        account=pulumi.get(__response__, 'account'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        roles=pulumi.get(__response__, 'roles')))

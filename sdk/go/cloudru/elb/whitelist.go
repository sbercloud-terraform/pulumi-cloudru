// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages an ELB whitelist resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/elb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			listener1, err := elb.NewListener(ctx, "listener_1", &elb.ListenerArgs{
//				Name:           pulumi.String("listener_1"),
//				Protocol:       pulumi.String("HTTP"),
//				ProtocolPort:   pulumi.Int(8080),
//				LoadbalancerId: pulumi.Any(loadbalancerId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = elb.NewWhitelist(ctx, "whitelist_1", &elb.WhitelistArgs{
//				EnableWhitelist: pulumi.Bool(true),
//				Whitelist:       pulumi.String("192.168.11.1,192.168.0.1/24,192.168.201.18/8"),
//				ListenerId:      listener1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ELB whitelist can be imported using the whitelist ID, e.g.
//
// ```sh
// $ pulumi import sbercloud:Elb/whitelist:Whitelist whitelist_1 5c20fdad-7288-11eb-b817-0255ac10158b
// ```
type Whitelist struct {
	pulumi.CustomResourceState

	// Specify whether to enable access control.
	EnableWhitelist pulumi.BoolPtrOutput `pulumi:"enableWhitelist"`
	// The Listener ID that the whitelist will be associated with. Changing this
	// creates a new whitelist.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// The region in which to create the ELB whitelist resource. If omitted, the
	// provider-level region will be used. Changing this creates a new whitelist.
	Region pulumi.StringOutput `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
	// IP addresses.
	Whitelist pulumi.StringPtrOutput `pulumi:"whitelist"`
}

// NewWhitelist registers a new resource with the given unique name, arguments, and options.
func NewWhitelist(ctx *pulumi.Context,
	name string, args *WhitelistArgs, opts ...pulumi.ResourceOption) (*Whitelist, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Whitelist
	err := ctx.RegisterResource("sbercloud:Elb/whitelist:Whitelist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWhitelist gets an existing Whitelist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWhitelist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WhitelistState, opts ...pulumi.ResourceOption) (*Whitelist, error) {
	var resource Whitelist
	err := ctx.ReadResource("sbercloud:Elb/whitelist:Whitelist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Whitelist resources.
type whitelistState struct {
	// Specify whether to enable access control.
	EnableWhitelist *bool `pulumi:"enableWhitelist"`
	// The Listener ID that the whitelist will be associated with. Changing this
	// creates a new whitelist.
	ListenerId *string `pulumi:"listenerId"`
	// The region in which to create the ELB whitelist resource. If omitted, the
	// provider-level region will be used. Changing this creates a new whitelist.
	Region *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	// Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
	// IP addresses.
	Whitelist *string `pulumi:"whitelist"`
}

type WhitelistState struct {
	// Specify whether to enable access control.
	EnableWhitelist pulumi.BoolPtrInput
	// The Listener ID that the whitelist will be associated with. Changing this
	// creates a new whitelist.
	ListenerId pulumi.StringPtrInput
	// The region in which to create the ELB whitelist resource. If omitted, the
	// provider-level region will be used. Changing this creates a new whitelist.
	Region pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	// Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
	// IP addresses.
	Whitelist pulumi.StringPtrInput
}

func (WhitelistState) ElementType() reflect.Type {
	return reflect.TypeOf((*whitelistState)(nil)).Elem()
}

type whitelistArgs struct {
	// Specify whether to enable access control.
	EnableWhitelist *bool `pulumi:"enableWhitelist"`
	// The Listener ID that the whitelist will be associated with. Changing this
	// creates a new whitelist.
	ListenerId string `pulumi:"listenerId"`
	// The region in which to create the ELB whitelist resource. If omitted, the
	// provider-level region will be used. Changing this creates a new whitelist.
	Region *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	// Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
	// IP addresses.
	Whitelist *string `pulumi:"whitelist"`
}

// The set of arguments for constructing a Whitelist resource.
type WhitelistArgs struct {
	// Specify whether to enable access control.
	EnableWhitelist pulumi.BoolPtrInput
	// The Listener ID that the whitelist will be associated with. Changing this
	// creates a new whitelist.
	ListenerId pulumi.StringInput
	// The region in which to create the ELB whitelist resource. If omitted, the
	// provider-level region will be used. Changing this creates a new whitelist.
	Region pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	// Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
	// IP addresses.
	Whitelist pulumi.StringPtrInput
}

func (WhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*whitelistArgs)(nil)).Elem()
}

type WhitelistInput interface {
	pulumi.Input

	ToWhitelistOutput() WhitelistOutput
	ToWhitelistOutputWithContext(ctx context.Context) WhitelistOutput
}

func (*Whitelist) ElementType() reflect.Type {
	return reflect.TypeOf((**Whitelist)(nil)).Elem()
}

func (i *Whitelist) ToWhitelistOutput() WhitelistOutput {
	return i.ToWhitelistOutputWithContext(context.Background())
}

func (i *Whitelist) ToWhitelistOutputWithContext(ctx context.Context) WhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WhitelistOutput)
}

// WhitelistArrayInput is an input type that accepts WhitelistArray and WhitelistArrayOutput values.
// You can construct a concrete instance of `WhitelistArrayInput` via:
//
//	WhitelistArray{ WhitelistArgs{...} }
type WhitelistArrayInput interface {
	pulumi.Input

	ToWhitelistArrayOutput() WhitelistArrayOutput
	ToWhitelistArrayOutputWithContext(context.Context) WhitelistArrayOutput
}

type WhitelistArray []WhitelistInput

func (WhitelistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Whitelist)(nil)).Elem()
}

func (i WhitelistArray) ToWhitelistArrayOutput() WhitelistArrayOutput {
	return i.ToWhitelistArrayOutputWithContext(context.Background())
}

func (i WhitelistArray) ToWhitelistArrayOutputWithContext(ctx context.Context) WhitelistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WhitelistArrayOutput)
}

// WhitelistMapInput is an input type that accepts WhitelistMap and WhitelistMapOutput values.
// You can construct a concrete instance of `WhitelistMapInput` via:
//
//	WhitelistMap{ "key": WhitelistArgs{...} }
type WhitelistMapInput interface {
	pulumi.Input

	ToWhitelistMapOutput() WhitelistMapOutput
	ToWhitelistMapOutputWithContext(context.Context) WhitelistMapOutput
}

type WhitelistMap map[string]WhitelistInput

func (WhitelistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Whitelist)(nil)).Elem()
}

func (i WhitelistMap) ToWhitelistMapOutput() WhitelistMapOutput {
	return i.ToWhitelistMapOutputWithContext(context.Background())
}

func (i WhitelistMap) ToWhitelistMapOutputWithContext(ctx context.Context) WhitelistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WhitelistMapOutput)
}

type WhitelistOutput struct{ *pulumi.OutputState }

func (WhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Whitelist)(nil)).Elem()
}

func (o WhitelistOutput) ToWhitelistOutput() WhitelistOutput {
	return o
}

func (o WhitelistOutput) ToWhitelistOutputWithContext(ctx context.Context) WhitelistOutput {
	return o
}

// Specify whether to enable access control.
func (o WhitelistOutput) EnableWhitelist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Whitelist) pulumi.BoolPtrOutput { return v.EnableWhitelist }).(pulumi.BoolPtrOutput)
}

// The Listener ID that the whitelist will be associated with. Changing this
// creates a new whitelist.
func (o WhitelistOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Whitelist) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// The region in which to create the ELB whitelist resource. If omitted, the
// provider-level region will be used. Changing this creates a new whitelist.
func (o WhitelistOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Whitelist) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o WhitelistOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Whitelist) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// Specifies the IP addresses in the whitelist. Use commas(,) to separate the multiple
// IP addresses.
func (o WhitelistOutput) Whitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Whitelist) pulumi.StringPtrOutput { return v.Whitelist }).(pulumi.StringPtrOutput)
}

type WhitelistArrayOutput struct{ *pulumi.OutputState }

func (WhitelistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Whitelist)(nil)).Elem()
}

func (o WhitelistArrayOutput) ToWhitelistArrayOutput() WhitelistArrayOutput {
	return o
}

func (o WhitelistArrayOutput) ToWhitelistArrayOutputWithContext(ctx context.Context) WhitelistArrayOutput {
	return o
}

func (o WhitelistArrayOutput) Index(i pulumi.IntInput) WhitelistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Whitelist {
		return vs[0].([]*Whitelist)[vs[1].(int)]
	}).(WhitelistOutput)
}

type WhitelistMapOutput struct{ *pulumi.OutputState }

func (WhitelistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Whitelist)(nil)).Elem()
}

func (o WhitelistMapOutput) ToWhitelistMapOutput() WhitelistMapOutput {
	return o
}

func (o WhitelistMapOutput) ToWhitelistMapOutputWithContext(ctx context.Context) WhitelistMapOutput {
	return o
}

func (o WhitelistMapOutput) MapIndex(k pulumi.StringInput) WhitelistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Whitelist {
		return vs[0].(map[string]*Whitelist)[vs[1].(string)]
	}).(WhitelistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WhitelistInput)(nil)).Elem(), &Whitelist{})
	pulumi.RegisterInputType(reflect.TypeOf((*WhitelistArrayInput)(nil)).Elem(), WhitelistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WhitelistMapInput)(nil)).Elem(), WhitelistMap{})
	pulumi.RegisterOutputType(WhitelistOutput{})
	pulumi.RegisterOutputType(WhitelistArrayOutput{})
	pulumi.RegisterOutputType(WhitelistMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Provides a Shared File System (SFS) Turbo resource.
//
// ## Example Usage
//
// ### Create a STANDARD Shared File System (SFS) Turbo
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/sfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			secgroupId := cfg.RequireObject("secgroupId")
//			testAz := cfg.RequireObject("testAz")
//			_, err := sfs.NewTurbo(ctx, "test", &sfs.TurboArgs{
//				Name:             pulumi.String("sfs-turbo-1"),
//				Size:             pulumi.Int(500),
//				ShareProto:       pulumi.String("NFS"),
//				VpcId:            pulumi.Any(vpcId),
//				SubnetId:         pulumi.Any(subnetId),
//				SecurityGroupId:  pulumi.Any(secgroupId),
//				AvailabilityZone: pulumi.Any(testAz),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an HPC Shared File System (SFS) Turbo
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/sfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			secgroupId := cfg.RequireObject("secgroupId")
//			testAz := cfg.RequireObject("testAz")
//			_, err := sfs.NewTurbo(ctx, "test", &sfs.TurboArgs{
//				Name:             pulumi.String("sfs-turbo-1"),
//				Size:             pulumi.Int(3686),
//				ShareProto:       pulumi.String("NFS"),
//				ShareType:        pulumi.String("HPC"),
//				HpcBandwidth:     pulumi.String("40M"),
//				VpcId:            pulumi.Any(vpcId),
//				SubnetId:         pulumi.Any(subnetId),
//				SecurityGroupId:  pulumi.Any(secgroupId),
//				AvailabilityZone: pulumi.Any(testAz),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an HPC CACHE Shared File System (SFS) Turbo
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/sfs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			vpcId := cfg.RequireObject("vpcId")
//			subnetId := cfg.RequireObject("subnetId")
//			secgroupId := cfg.RequireObject("secgroupId")
//			testAz := cfg.RequireObject("testAz")
//			_, err := sfs.NewTurbo(ctx, "test", &sfs.TurboArgs{
//				Name:              pulumi.String("sfs-turbo-1"),
//				Size:              pulumi.Int(4096),
//				ShareProto:        pulumi.String("NFS"),
//				ShareType:         pulumi.String("HPC_CACHE"),
//				HpcCacheBandwidth: pulumi.String("2G"),
//				VpcId:             pulumi.Any(vpcId),
//				SubnetId:          pulumi.Any(subnetId),
//				SecurityGroupId:   pulumi.Any(secgroupId),
//				AvailabilityZone:  pulumi.Any(testAz),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SFS Turbo can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Sfs/turbo:Turbo sbercloud_sfs_turbo 1e3d5306-24c9-4316-9185-70e9787d71ab
// ```
//
// # Note that the imported state may not be identical to your resource definition, due to payment attributes missing from
//
// the API response.
//
// The missing attributes include: `charging_mode`, `period_unit`, `period`, `auto_renew`.
//
// It is generally recommended running `pulumi preview` after importing an instance.
//
// You can ignore changes as below.
//
// hcl
//
// resource "sbercloud_sfs_turbo" "test" {
//
//	...
//
//	lifecycle {
//
//	  ignore_changes = [
//
//	    charging_mode, period_unit, period, auto_renew,
//
//	  ]
//
//	}
//
// }
type Turbo struct {
	pulumi.CustomResourceState

	// Specifies whether auto renew is enabled.\
	// The valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The available capacity of the SFS Turbo file system in the unit of GB.
	AvailableCapacity pulumi.StringOutput `pulumi:"availableCapacity"`
	// Specifies the backup ID.
	//
	// > This parameter is mandatory when a file system is created from a backup.
	BackupId pulumi.StringOutput `pulumi:"backupId"`
	// Specifies the charging mode of the SFS Turbo.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new cluster resource.
	ChargingMode pulumi.StringOutput `pulumi:"chargingMode"`
	// Specifies the ID of a KMS key to encrypt the file system. Changing this
	// will create a new resource.
	CryptKeyId pulumi.StringPtrOutput `pulumi:"cryptKeyId"`
	// Specifies the VM flavor used for creating a dedicated file system.
	DedicatedFlavor pulumi.StringPtrOutput `pulumi:"dedicatedFlavor"`
	// Specifies the ID of the dedicated distributed storage used
	// when creating a dedicated file system.
	DedicatedStorageId pulumi.StringPtrOutput `pulumi:"dedicatedStorageId"`
	// Specifies whether the file system is enhanced or not. Changing this will
	// create a new resource.
	//
	// This parameter is valid only when `shareType` is set to **STANDARD** or **PERFORMANCE**.
	Enhanced pulumi.BoolOutput `pulumi:"enhanced"`
	// The enterprise project id of the file system. Changing this
	// will create a new resource.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The mount point of the SFS Turbo file system.
	ExportLocation pulumi.StringOutput `pulumi:"exportLocation"`
	// Specifies the HPC bandwidth. Changing this will create a new resource.
	// This parameter is valid and required when `shareType` is set to **HPC**.
	// Valid values are: **20M**, **40M**, **125M**, **250M**, **500M** and **1000M**.
	HpcBandwidth pulumi.StringOutput `pulumi:"hpcBandwidth"`
	// Specifies the HPC cache bandwidth(GB/s).
	// This parameter is valid and required when `shareType` is set to **HPC_CACHE**.
	// Valid values are: **2G**, **4G**, **8G**, **16G**, **24G**, **32G** and **48G**.
	HpcCacheBandwidth pulumi.StringOutput `pulumi:"hpcCacheBandwidth"`
	// Specifies the name of an SFS Turbo file system. The value contains `4` to `64`
	// characters and must start with a letter.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the charging period of the SFS Turbo.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `11`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Specifies the charging period unit of the SFS Turbo.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The region in which to create the SFS Turbo resource. If omitted, the
	// provider-level region will be used. Changing this creates a new SFS Turbo resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the security group ID.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	ShareProto pulumi.StringPtrOutput `pulumi:"shareProto"`
	// Specifies the file system type. Changing this will create a new resource.
	// Valid values are **STANDARD**, **PERFORMANCE**, **HPC** and **HPC_CACHE**.
	// Defaults to **STANDARD**.
	//
	// > The share type **HPC_CACHE** only support in postpaid charging mode.
	ShareType pulumi.StringPtrOutput `pulumi:"shareType"`
	// Specifies the capacity of a sharing file system, in GB.
	// + If `shareType` is set to **STANDARD** or **PERFORMANCE**, the value ranges from `500` to `32,768`, and ranges from
	// `10,240` to `327,680` for an enhanced file system.
	//
	// + If `shareType` is set to **HPC**, the value ranges from `3,686` to `1,048,576` when `hpcBandwidth` is set to
	// **20M**, and ranges from `1,228` to `1,048,576` when `hpcBandwidth` is set to **40M**, **125M**, **250M**, **500M**
	// or **1000M**. The capacity must be a multiple of 1.2TiB, which needs to be rounded down after converting to GiB.
	// Such as 3.6TiB->3686GiB, 4.8TiB->4915GiB, 8.4TiB->8601GiB.
	//
	// + If `shareType` is set to **HPC_CACHE**, the value ranges from `4,096` to `1,048,576`, and the step size is `1,024`.
	// The minimum capacity(GB) should be equal to `2,048` multiplying the HPC cache bandwidth size(GB/s).
	// Such as the minimum capacity is `4,096` when `hpcCacheBandwidth` is set to **2G**, the minimum capacity is `8,192`
	// when `hpcCacheBandwidth` is set to **4G**, the minimum capacity is `16,384` when `hpcCacheBandwidth` is set to
	// **8G**.
	//
	// > The file system capacity can only be expanded, not reduced.
	Size pulumi.IntOutput `pulumi:"size"`
	// The status of the SFS Turbo file system.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the network ID of the subnet. Changing this will create a new
	// resource.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the SFS Turbo.
	//
	// > **NOTE:**
	// SFS Turbo will create two private IP addresses and one virtual IP address under the subnet you specified. To ensure
	// normal use, SFS Turbo will enable the inbound rules for ports *111*, *445*, *2049*, *2051*, *2052*, and *20048* in the
	// security group you specified.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The version ID of the SFS Turbo file system.
	Version pulumi.StringOutput `pulumi:"version"`
	// Specifies the VPC ID. Changing this will create a new resource.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewTurbo registers a new resource with the given unique name, arguments, and options.
func NewTurbo(ctx *pulumi.Context,
	name string, args *TurboArgs, opts ...pulumi.ResourceOption) (*Turbo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Turbo
	err := ctx.RegisterResource("sbercloud:Sfs/turbo:Turbo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTurbo gets an existing Turbo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTurbo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TurboState, opts ...pulumi.ResourceOption) (*Turbo, error) {
	var resource Turbo
	err := ctx.ReadResource("sbercloud:Sfs/turbo:Turbo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Turbo resources.
type turboState struct {
	// Specifies whether auto renew is enabled.\
	// The valid values are **true** and **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The available capacity of the SFS Turbo file system in the unit of GB.
	AvailableCapacity *string `pulumi:"availableCapacity"`
	// Specifies the backup ID.
	//
	// > This parameter is mandatory when a file system is created from a backup.
	BackupId *string `pulumi:"backupId"`
	// Specifies the charging mode of the SFS Turbo.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new cluster resource.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the ID of a KMS key to encrypt the file system. Changing this
	// will create a new resource.
	CryptKeyId *string `pulumi:"cryptKeyId"`
	// Specifies the VM flavor used for creating a dedicated file system.
	DedicatedFlavor *string `pulumi:"dedicatedFlavor"`
	// Specifies the ID of the dedicated distributed storage used
	// when creating a dedicated file system.
	DedicatedStorageId *string `pulumi:"dedicatedStorageId"`
	// Specifies whether the file system is enhanced or not. Changing this will
	// create a new resource.
	//
	// This parameter is valid only when `shareType` is set to **STANDARD** or **PERFORMANCE**.
	Enhanced *bool `pulumi:"enhanced"`
	// The enterprise project id of the file system. Changing this
	// will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The mount point of the SFS Turbo file system.
	ExportLocation *string `pulumi:"exportLocation"`
	// Specifies the HPC bandwidth. Changing this will create a new resource.
	// This parameter is valid and required when `shareType` is set to **HPC**.
	// Valid values are: **20M**, **40M**, **125M**, **250M**, **500M** and **1000M**.
	HpcBandwidth *string `pulumi:"hpcBandwidth"`
	// Specifies the HPC cache bandwidth(GB/s).
	// This parameter is valid and required when `shareType` is set to **HPC_CACHE**.
	// Valid values are: **2G**, **4G**, **8G**, **16G**, **24G**, **32G** and **48G**.
	HpcCacheBandwidth *string `pulumi:"hpcCacheBandwidth"`
	// Specifies the name of an SFS Turbo file system. The value contains `4` to `64`
	// characters and must start with a letter.
	Name *string `pulumi:"name"`
	// Specifies the charging period of the SFS Turbo.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `11`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the SFS Turbo.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The region in which to create the SFS Turbo resource. If omitted, the
	// provider-level region will be used. Changing this creates a new SFS Turbo resource.
	Region *string `pulumi:"region"`
	// Specifies the security group ID.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	ShareProto *string `pulumi:"shareProto"`
	// Specifies the file system type. Changing this will create a new resource.
	// Valid values are **STANDARD**, **PERFORMANCE**, **HPC** and **HPC_CACHE**.
	// Defaults to **STANDARD**.
	//
	// > The share type **HPC_CACHE** only support in postpaid charging mode.
	ShareType *string `pulumi:"shareType"`
	// Specifies the capacity of a sharing file system, in GB.
	// + If `shareType` is set to **STANDARD** or **PERFORMANCE**, the value ranges from `500` to `32,768`, and ranges from
	// `10,240` to `327,680` for an enhanced file system.
	//
	// + If `shareType` is set to **HPC**, the value ranges from `3,686` to `1,048,576` when `hpcBandwidth` is set to
	// **20M**, and ranges from `1,228` to `1,048,576` when `hpcBandwidth` is set to **40M**, **125M**, **250M**, **500M**
	// or **1000M**. The capacity must be a multiple of 1.2TiB, which needs to be rounded down after converting to GiB.
	// Such as 3.6TiB->3686GiB, 4.8TiB->4915GiB, 8.4TiB->8601GiB.
	//
	// + If `shareType` is set to **HPC_CACHE**, the value ranges from `4,096` to `1,048,576`, and the step size is `1,024`.
	// The minimum capacity(GB) should be equal to `2,048` multiplying the HPC cache bandwidth size(GB/s).
	// Such as the minimum capacity is `4,096` when `hpcCacheBandwidth` is set to **2G**, the minimum capacity is `8,192`
	// when `hpcCacheBandwidth` is set to **4G**, the minimum capacity is `16,384` when `hpcCacheBandwidth` is set to
	// **8G**.
	//
	// > The file system capacity can only be expanded, not reduced.
	Size *int `pulumi:"size"`
	// The status of the SFS Turbo file system.
	Status *string `pulumi:"status"`
	// Specifies the network ID of the subnet. Changing this will create a new
	// resource.
	SubnetId *string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the SFS Turbo.
	//
	// > **NOTE:**
	// SFS Turbo will create two private IP addresses and one virtual IP address under the subnet you specified. To ensure
	// normal use, SFS Turbo will enable the inbound rules for ports *111*, *445*, *2049*, *2051*, *2052*, and *20048* in the
	// security group you specified.
	Tags map[string]string `pulumi:"tags"`
	// The version ID of the SFS Turbo file system.
	Version *string `pulumi:"version"`
	// Specifies the VPC ID. Changing this will create a new resource.
	VpcId *string `pulumi:"vpcId"`
}

type TurboState struct {
	// Specifies whether auto renew is enabled.\
	// The valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	AvailabilityZone pulumi.StringPtrInput
	// The available capacity of the SFS Turbo file system in the unit of GB.
	AvailableCapacity pulumi.StringPtrInput
	// Specifies the backup ID.
	//
	// > This parameter is mandatory when a file system is created from a backup.
	BackupId pulumi.StringPtrInput
	// Specifies the charging mode of the SFS Turbo.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new cluster resource.
	ChargingMode pulumi.StringPtrInput
	// Specifies the ID of a KMS key to encrypt the file system. Changing this
	// will create a new resource.
	CryptKeyId pulumi.StringPtrInput
	// Specifies the VM flavor used for creating a dedicated file system.
	DedicatedFlavor pulumi.StringPtrInput
	// Specifies the ID of the dedicated distributed storage used
	// when creating a dedicated file system.
	DedicatedStorageId pulumi.StringPtrInput
	// Specifies whether the file system is enhanced or not. Changing this will
	// create a new resource.
	//
	// This parameter is valid only when `shareType` is set to **STANDARD** or **PERFORMANCE**.
	Enhanced pulumi.BoolPtrInput
	// The enterprise project id of the file system. Changing this
	// will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// The mount point of the SFS Turbo file system.
	ExportLocation pulumi.StringPtrInput
	// Specifies the HPC bandwidth. Changing this will create a new resource.
	// This parameter is valid and required when `shareType` is set to **HPC**.
	// Valid values are: **20M**, **40M**, **125M**, **250M**, **500M** and **1000M**.
	HpcBandwidth pulumi.StringPtrInput
	// Specifies the HPC cache bandwidth(GB/s).
	// This parameter is valid and required when `shareType` is set to **HPC_CACHE**.
	// Valid values are: **2G**, **4G**, **8G**, **16G**, **24G**, **32G** and **48G**.
	HpcCacheBandwidth pulumi.StringPtrInput
	// Specifies the name of an SFS Turbo file system. The value contains `4` to `64`
	// characters and must start with a letter.
	Name pulumi.StringPtrInput
	// Specifies the charging period of the SFS Turbo.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `11`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the SFS Turbo.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	PeriodUnit pulumi.StringPtrInput
	// The region in which to create the SFS Turbo resource. If omitted, the
	// provider-level region will be used. Changing this creates a new SFS Turbo resource.
	Region pulumi.StringPtrInput
	// Specifies the security group ID.
	SecurityGroupId pulumi.StringPtrInput
	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	ShareProto pulumi.StringPtrInput
	// Specifies the file system type. Changing this will create a new resource.
	// Valid values are **STANDARD**, **PERFORMANCE**, **HPC** and **HPC_CACHE**.
	// Defaults to **STANDARD**.
	//
	// > The share type **HPC_CACHE** only support in postpaid charging mode.
	ShareType pulumi.StringPtrInput
	// Specifies the capacity of a sharing file system, in GB.
	// + If `shareType` is set to **STANDARD** or **PERFORMANCE**, the value ranges from `500` to `32,768`, and ranges from
	// `10,240` to `327,680` for an enhanced file system.
	//
	// + If `shareType` is set to **HPC**, the value ranges from `3,686` to `1,048,576` when `hpcBandwidth` is set to
	// **20M**, and ranges from `1,228` to `1,048,576` when `hpcBandwidth` is set to **40M**, **125M**, **250M**, **500M**
	// or **1000M**. The capacity must be a multiple of 1.2TiB, which needs to be rounded down after converting to GiB.
	// Such as 3.6TiB->3686GiB, 4.8TiB->4915GiB, 8.4TiB->8601GiB.
	//
	// + If `shareType` is set to **HPC_CACHE**, the value ranges from `4,096` to `1,048,576`, and the step size is `1,024`.
	// The minimum capacity(GB) should be equal to `2,048` multiplying the HPC cache bandwidth size(GB/s).
	// Such as the minimum capacity is `4,096` when `hpcCacheBandwidth` is set to **2G**, the minimum capacity is `8,192`
	// when `hpcCacheBandwidth` is set to **4G**, the minimum capacity is `16,384` when `hpcCacheBandwidth` is set to
	// **8G**.
	//
	// > The file system capacity can only be expanded, not reduced.
	Size pulumi.IntPtrInput
	// The status of the SFS Turbo file system.
	Status pulumi.StringPtrInput
	// Specifies the network ID of the subnet. Changing this will create a new
	// resource.
	SubnetId pulumi.StringPtrInput
	// Specifies the key/value pairs to associate with the SFS Turbo.
	//
	// > **NOTE:**
	// SFS Turbo will create two private IP addresses and one virtual IP address under the subnet you specified. To ensure
	// normal use, SFS Turbo will enable the inbound rules for ports *111*, *445*, *2049*, *2051*, *2052*, and *20048* in the
	// security group you specified.
	Tags pulumi.StringMapInput
	// The version ID of the SFS Turbo file system.
	Version pulumi.StringPtrInput
	// Specifies the VPC ID. Changing this will create a new resource.
	VpcId pulumi.StringPtrInput
}

func (TurboState) ElementType() reflect.Type {
	return reflect.TypeOf((*turboState)(nil)).Elem()
}

type turboArgs struct {
	// Specifies whether auto renew is enabled.\
	// The valid values are **true** and **false**.
	AutoRenew *string `pulumi:"autoRenew"`
	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specifies the backup ID.
	//
	// > This parameter is mandatory when a file system is created from a backup.
	BackupId *string `pulumi:"backupId"`
	// Specifies the charging mode of the SFS Turbo.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new cluster resource.
	ChargingMode *string `pulumi:"chargingMode"`
	// Specifies the ID of a KMS key to encrypt the file system. Changing this
	// will create a new resource.
	CryptKeyId *string `pulumi:"cryptKeyId"`
	// Specifies the VM flavor used for creating a dedicated file system.
	DedicatedFlavor *string `pulumi:"dedicatedFlavor"`
	// Specifies the ID of the dedicated distributed storage used
	// when creating a dedicated file system.
	DedicatedStorageId *string `pulumi:"dedicatedStorageId"`
	// Specifies whether the file system is enhanced or not. Changing this will
	// create a new resource.
	//
	// This parameter is valid only when `shareType` is set to **STANDARD** or **PERFORMANCE**.
	Enhanced *bool `pulumi:"enhanced"`
	// The enterprise project id of the file system. Changing this
	// will create a new resource.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the HPC bandwidth. Changing this will create a new resource.
	// This parameter is valid and required when `shareType` is set to **HPC**.
	// Valid values are: **20M**, **40M**, **125M**, **250M**, **500M** and **1000M**.
	HpcBandwidth *string `pulumi:"hpcBandwidth"`
	// Specifies the HPC cache bandwidth(GB/s).
	// This parameter is valid and required when `shareType` is set to **HPC_CACHE**.
	// Valid values are: **2G**, **4G**, **8G**, **16G**, **24G**, **32G** and **48G**.
	HpcCacheBandwidth *string `pulumi:"hpcCacheBandwidth"`
	// Specifies the name of an SFS Turbo file system. The value contains `4` to `64`
	// characters and must start with a letter.
	Name *string `pulumi:"name"`
	// Specifies the charging period of the SFS Turbo.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `11`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	Period *int `pulumi:"period"`
	// Specifies the charging period unit of the SFS Turbo.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The region in which to create the SFS Turbo resource. If omitted, the
	// provider-level region will be used. Changing this creates a new SFS Turbo resource.
	Region *string `pulumi:"region"`
	// Specifies the security group ID.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	ShareProto *string `pulumi:"shareProto"`
	// Specifies the file system type. Changing this will create a new resource.
	// Valid values are **STANDARD**, **PERFORMANCE**, **HPC** and **HPC_CACHE**.
	// Defaults to **STANDARD**.
	//
	// > The share type **HPC_CACHE** only support in postpaid charging mode.
	ShareType *string `pulumi:"shareType"`
	// Specifies the capacity of a sharing file system, in GB.
	// + If `shareType` is set to **STANDARD** or **PERFORMANCE**, the value ranges from `500` to `32,768`, and ranges from
	// `10,240` to `327,680` for an enhanced file system.
	//
	// + If `shareType` is set to **HPC**, the value ranges from `3,686` to `1,048,576` when `hpcBandwidth` is set to
	// **20M**, and ranges from `1,228` to `1,048,576` when `hpcBandwidth` is set to **40M**, **125M**, **250M**, **500M**
	// or **1000M**. The capacity must be a multiple of 1.2TiB, which needs to be rounded down after converting to GiB.
	// Such as 3.6TiB->3686GiB, 4.8TiB->4915GiB, 8.4TiB->8601GiB.
	//
	// + If `shareType` is set to **HPC_CACHE**, the value ranges from `4,096` to `1,048,576`, and the step size is `1,024`.
	// The minimum capacity(GB) should be equal to `2,048` multiplying the HPC cache bandwidth size(GB/s).
	// Such as the minimum capacity is `4,096` when `hpcCacheBandwidth` is set to **2G**, the minimum capacity is `8,192`
	// when `hpcCacheBandwidth` is set to **4G**, the minimum capacity is `16,384` when `hpcCacheBandwidth` is set to
	// **8G**.
	//
	// > The file system capacity can only be expanded, not reduced.
	Size int `pulumi:"size"`
	// Specifies the network ID of the subnet. Changing this will create a new
	// resource.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the key/value pairs to associate with the SFS Turbo.
	//
	// > **NOTE:**
	// SFS Turbo will create two private IP addresses and one virtual IP address under the subnet you specified. To ensure
	// normal use, SFS Turbo will enable the inbound rules for ports *111*, *445*, *2049*, *2051*, *2052*, and *20048* in the
	// security group you specified.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the VPC ID. Changing this will create a new resource.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Turbo resource.
type TurboArgs struct {
	// Specifies whether auto renew is enabled.\
	// The valid values are **true** and **false**.
	AutoRenew pulumi.StringPtrInput
	// Specifies the availability zone where the file system is located.
	// Changing this will create a new resource.
	AvailabilityZone pulumi.StringInput
	// Specifies the backup ID.
	//
	// > This parameter is mandatory when a file system is created from a backup.
	BackupId pulumi.StringPtrInput
	// Specifies the charging mode of the SFS Turbo.
	// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
	// Changing this parameter will create a new cluster resource.
	ChargingMode pulumi.StringPtrInput
	// Specifies the ID of a KMS key to encrypt the file system. Changing this
	// will create a new resource.
	CryptKeyId pulumi.StringPtrInput
	// Specifies the VM flavor used for creating a dedicated file system.
	DedicatedFlavor pulumi.StringPtrInput
	// Specifies the ID of the dedicated distributed storage used
	// when creating a dedicated file system.
	DedicatedStorageId pulumi.StringPtrInput
	// Specifies whether the file system is enhanced or not. Changing this will
	// create a new resource.
	//
	// This parameter is valid only when `shareType` is set to **STANDARD** or **PERFORMANCE**.
	Enhanced pulumi.BoolPtrInput
	// The enterprise project id of the file system. Changing this
	// will create a new resource.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the HPC bandwidth. Changing this will create a new resource.
	// This parameter is valid and required when `shareType` is set to **HPC**.
	// Valid values are: **20M**, **40M**, **125M**, **250M**, **500M** and **1000M**.
	HpcBandwidth pulumi.StringPtrInput
	// Specifies the HPC cache bandwidth(GB/s).
	// This parameter is valid and required when `shareType` is set to **HPC_CACHE**.
	// Valid values are: **2G**, **4G**, **8G**, **16G**, **24G**, **32G** and **48G**.
	HpcCacheBandwidth pulumi.StringPtrInput
	// Specifies the name of an SFS Turbo file system. The value contains `4` to `64`
	// characters and must start with a letter.
	Name pulumi.StringPtrInput
	// Specifies the charging period of the SFS Turbo.
	// If `periodUnit` is set to **month**, the value ranges from `1` to `11`.
	// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
	// This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	Period pulumi.IntPtrInput
	// Specifies the charging period unit of the SFS Turbo.
	// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
	// Changing this parameter will create a new cluster resource.
	PeriodUnit pulumi.StringPtrInput
	// The region in which to create the SFS Turbo resource. If omitted, the
	// provider-level region will be used. Changing this creates a new SFS Turbo resource.
	Region pulumi.StringPtrInput
	// Specifies the security group ID.
	SecurityGroupId pulumi.StringInput
	// Specifies the protocol for sharing file systems. The valid value is NFS.
	// Changing this will create a new resource.
	ShareProto pulumi.StringPtrInput
	// Specifies the file system type. Changing this will create a new resource.
	// Valid values are **STANDARD**, **PERFORMANCE**, **HPC** and **HPC_CACHE**.
	// Defaults to **STANDARD**.
	//
	// > The share type **HPC_CACHE** only support in postpaid charging mode.
	ShareType pulumi.StringPtrInput
	// Specifies the capacity of a sharing file system, in GB.
	// + If `shareType` is set to **STANDARD** or **PERFORMANCE**, the value ranges from `500` to `32,768`, and ranges from
	// `10,240` to `327,680` for an enhanced file system.
	//
	// + If `shareType` is set to **HPC**, the value ranges from `3,686` to `1,048,576` when `hpcBandwidth` is set to
	// **20M**, and ranges from `1,228` to `1,048,576` when `hpcBandwidth` is set to **40M**, **125M**, **250M**, **500M**
	// or **1000M**. The capacity must be a multiple of 1.2TiB, which needs to be rounded down after converting to GiB.
	// Such as 3.6TiB->3686GiB, 4.8TiB->4915GiB, 8.4TiB->8601GiB.
	//
	// + If `shareType` is set to **HPC_CACHE**, the value ranges from `4,096` to `1,048,576`, and the step size is `1,024`.
	// The minimum capacity(GB) should be equal to `2,048` multiplying the HPC cache bandwidth size(GB/s).
	// Such as the minimum capacity is `4,096` when `hpcCacheBandwidth` is set to **2G**, the minimum capacity is `8,192`
	// when `hpcCacheBandwidth` is set to **4G**, the minimum capacity is `16,384` when `hpcCacheBandwidth` is set to
	// **8G**.
	//
	// > The file system capacity can only be expanded, not reduced.
	Size pulumi.IntInput
	// Specifies the network ID of the subnet. Changing this will create a new
	// resource.
	SubnetId pulumi.StringInput
	// Specifies the key/value pairs to associate with the SFS Turbo.
	//
	// > **NOTE:**
	// SFS Turbo will create two private IP addresses and one virtual IP address under the subnet you specified. To ensure
	// normal use, SFS Turbo will enable the inbound rules for ports *111*, *445*, *2049*, *2051*, *2052*, and *20048* in the
	// security group you specified.
	Tags pulumi.StringMapInput
	// Specifies the VPC ID. Changing this will create a new resource.
	VpcId pulumi.StringInput
}

func (TurboArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*turboArgs)(nil)).Elem()
}

type TurboInput interface {
	pulumi.Input

	ToTurboOutput() TurboOutput
	ToTurboOutputWithContext(ctx context.Context) TurboOutput
}

func (*Turbo) ElementType() reflect.Type {
	return reflect.TypeOf((**Turbo)(nil)).Elem()
}

func (i *Turbo) ToTurboOutput() TurboOutput {
	return i.ToTurboOutputWithContext(context.Background())
}

func (i *Turbo) ToTurboOutputWithContext(ctx context.Context) TurboOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurboOutput)
}

// TurboArrayInput is an input type that accepts TurboArray and TurboArrayOutput values.
// You can construct a concrete instance of `TurboArrayInput` via:
//
//	TurboArray{ TurboArgs{...} }
type TurboArrayInput interface {
	pulumi.Input

	ToTurboArrayOutput() TurboArrayOutput
	ToTurboArrayOutputWithContext(context.Context) TurboArrayOutput
}

type TurboArray []TurboInput

func (TurboArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Turbo)(nil)).Elem()
}

func (i TurboArray) ToTurboArrayOutput() TurboArrayOutput {
	return i.ToTurboArrayOutputWithContext(context.Background())
}

func (i TurboArray) ToTurboArrayOutputWithContext(ctx context.Context) TurboArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurboArrayOutput)
}

// TurboMapInput is an input type that accepts TurboMap and TurboMapOutput values.
// You can construct a concrete instance of `TurboMapInput` via:
//
//	TurboMap{ "key": TurboArgs{...} }
type TurboMapInput interface {
	pulumi.Input

	ToTurboMapOutput() TurboMapOutput
	ToTurboMapOutputWithContext(context.Context) TurboMapOutput
}

type TurboMap map[string]TurboInput

func (TurboMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Turbo)(nil)).Elem()
}

func (i TurboMap) ToTurboMapOutput() TurboMapOutput {
	return i.ToTurboMapOutputWithContext(context.Background())
}

func (i TurboMap) ToTurboMapOutputWithContext(ctx context.Context) TurboMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurboMapOutput)
}

type TurboOutput struct{ *pulumi.OutputState }

func (TurboOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Turbo)(nil)).Elem()
}

func (o TurboOutput) ToTurboOutput() TurboOutput {
	return o
}

func (o TurboOutput) ToTurboOutputWithContext(ctx context.Context) TurboOutput {
	return o
}

// Specifies whether auto renew is enabled.\
// The valid values are **true** and **false**.
func (o TurboOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// Specifies the availability zone where the file system is located.
// Changing this will create a new resource.
func (o TurboOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The available capacity of the SFS Turbo file system in the unit of GB.
func (o TurboOutput) AvailableCapacity() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.AvailableCapacity }).(pulumi.StringOutput)
}

// Specifies the backup ID.
//
// > This parameter is mandatory when a file system is created from a backup.
func (o TurboOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

// Specifies the charging mode of the SFS Turbo.
// Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
// Changing this parameter will create a new cluster resource.
func (o TurboOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Specifies the ID of a KMS key to encrypt the file system. Changing this
// will create a new resource.
func (o TurboOutput) CryptKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.CryptKeyId }).(pulumi.StringPtrOutput)
}

// Specifies the VM flavor used for creating a dedicated file system.
func (o TurboOutput) DedicatedFlavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.DedicatedFlavor }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the dedicated distributed storage used
// when creating a dedicated file system.
func (o TurboOutput) DedicatedStorageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.DedicatedStorageId }).(pulumi.StringPtrOutput)
}

// Specifies whether the file system is enhanced or not. Changing this will
// create a new resource.
//
// This parameter is valid only when `shareType` is set to **STANDARD** or **PERFORMANCE**.
func (o TurboOutput) Enhanced() pulumi.BoolOutput {
	return o.ApplyT(func(v *Turbo) pulumi.BoolOutput { return v.Enhanced }).(pulumi.BoolOutput)
}

// The enterprise project id of the file system. Changing this
// will create a new resource.
func (o TurboOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The mount point of the SFS Turbo file system.
func (o TurboOutput) ExportLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.ExportLocation }).(pulumi.StringOutput)
}

// Specifies the HPC bandwidth. Changing this will create a new resource.
// This parameter is valid and required when `shareType` is set to **HPC**.
// Valid values are: **20M**, **40M**, **125M**, **250M**, **500M** and **1000M**.
func (o TurboOutput) HpcBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.HpcBandwidth }).(pulumi.StringOutput)
}

// Specifies the HPC cache bandwidth(GB/s).
// This parameter is valid and required when `shareType` is set to **HPC_CACHE**.
// Valid values are: **2G**, **4G**, **8G**, **16G**, **24G**, **32G** and **48G**.
func (o TurboOutput) HpcCacheBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.HpcCacheBandwidth }).(pulumi.StringOutput)
}

// Specifies the name of an SFS Turbo file system. The value contains `4` to `64`
// characters and must start with a letter.
func (o TurboOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the charging period of the SFS Turbo.
// If `periodUnit` is set to **month**, the value ranges from `1` to `11`.
// If `periodUnit` is set to **year**, the value ranges from `1` to `3`.
// This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this parameter will create a new cluster resource.
func (o TurboOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Specifies the charging period unit of the SFS Turbo.
// Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
// Changing this parameter will create a new cluster resource.
func (o TurboOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The region in which to create the SFS Turbo resource. If omitted, the
// provider-level region will be used. Changing this creates a new SFS Turbo resource.
func (o TurboOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the security group ID.
func (o TurboOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Specifies the protocol for sharing file systems. The valid value is NFS.
// Changing this will create a new resource.
func (o TurboOutput) ShareProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.ShareProto }).(pulumi.StringPtrOutput)
}

// Specifies the file system type. Changing this will create a new resource.
// Valid values are **STANDARD**, **PERFORMANCE**, **HPC** and **HPC_CACHE**.
// Defaults to **STANDARD**.
//
// > The share type **HPC_CACHE** only support in postpaid charging mode.
func (o TurboOutput) ShareType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.ShareType }).(pulumi.StringPtrOutput)
}

// Specifies the capacity of a sharing file system, in GB.
// + If `shareType` is set to **STANDARD** or **PERFORMANCE**, the value ranges from `500` to `32,768`, and ranges from
// `10,240` to `327,680` for an enhanced file system.
//
// + If `shareType` is set to **HPC**, the value ranges from `3,686` to `1,048,576` when `hpcBandwidth` is set to
// **20M**, and ranges from `1,228` to `1,048,576` when `hpcBandwidth` is set to **40M**, **125M**, **250M**, **500M**
// or **1000M**. The capacity must be a multiple of 1.2TiB, which needs to be rounded down after converting to GiB.
// Such as 3.6TiB->3686GiB, 4.8TiB->4915GiB, 8.4TiB->8601GiB.
//
// + If `shareType` is set to **HPC_CACHE**, the value ranges from `4,096` to `1,048,576`, and the step size is `1,024`.
// The minimum capacity(GB) should be equal to `2,048` multiplying the HPC cache bandwidth size(GB/s).
// Such as the minimum capacity is `4,096` when `hpcCacheBandwidth` is set to **2G**, the minimum capacity is `8,192`
// when `hpcCacheBandwidth` is set to **4G**, the minimum capacity is `16,384` when `hpcCacheBandwidth` is set to
// **8G**.
//
// > The file system capacity can only be expanded, not reduced.
func (o TurboOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Turbo) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The status of the SFS Turbo file system.
func (o TurboOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the network ID of the subnet. Changing this will create a new
// resource.
func (o TurboOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the key/value pairs to associate with the SFS Turbo.
//
// > **NOTE:**
// SFS Turbo will create two private IP addresses and one virtual IP address under the subnet you specified. To ensure
// normal use, SFS Turbo will enable the inbound rules for ports *111*, *445*, *2049*, *2051*, *2052*, and *20048* in the
// security group you specified.
func (o TurboOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The version ID of the SFS Turbo file system.
func (o TurboOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// Specifies the VPC ID. Changing this will create a new resource.
func (o TurboOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type TurboArrayOutput struct{ *pulumi.OutputState }

func (TurboArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Turbo)(nil)).Elem()
}

func (o TurboArrayOutput) ToTurboArrayOutput() TurboArrayOutput {
	return o
}

func (o TurboArrayOutput) ToTurboArrayOutputWithContext(ctx context.Context) TurboArrayOutput {
	return o
}

func (o TurboArrayOutput) Index(i pulumi.IntInput) TurboOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Turbo {
		return vs[0].([]*Turbo)[vs[1].(int)]
	}).(TurboOutput)
}

type TurboMapOutput struct{ *pulumi.OutputState }

func (TurboMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Turbo)(nil)).Elem()
}

func (o TurboMapOutput) ToTurboMapOutput() TurboMapOutput {
	return o
}

func (o TurboMapOutput) ToTurboMapOutputWithContext(ctx context.Context) TurboMapOutput {
	return o
}

func (o TurboMapOutput) MapIndex(k pulumi.StringInput) TurboOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Turbo {
		return vs[0].(map[string]*Turbo)[vs[1].(string)]
	}).(TurboOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TurboInput)(nil)).Elem(), &Turbo{})
	pulumi.RegisterInputType(reflect.TypeOf((*TurboArrayInput)(nil)).Elem(), TurboArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TurboMapInput)(nil)).Elem(), TurboMap{})
	pulumi.RegisterOutputType(TurboOutput{})
	pulumi.RegisterOutputType(TurboArrayOutput{})
	pulumi.RegisterOutputType(TurboMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cts

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type NotificationFilter struct {
	Condition string   `pulumi:"condition"`
	Rules     []string `pulumi:"rules"`
}

// NotificationFilterInput is an input type that accepts NotificationFilterArgs and NotificationFilterOutput values.
// You can construct a concrete instance of `NotificationFilterInput` via:
//
//	NotificationFilterArgs{...}
type NotificationFilterInput interface {
	pulumi.Input

	ToNotificationFilterOutput() NotificationFilterOutput
	ToNotificationFilterOutputWithContext(context.Context) NotificationFilterOutput
}

type NotificationFilterArgs struct {
	Condition pulumi.StringInput      `pulumi:"condition"`
	Rules     pulumi.StringArrayInput `pulumi:"rules"`
}

func (NotificationFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationFilter)(nil)).Elem()
}

func (i NotificationFilterArgs) ToNotificationFilterOutput() NotificationFilterOutput {
	return i.ToNotificationFilterOutputWithContext(context.Background())
}

func (i NotificationFilterArgs) ToNotificationFilterOutputWithContext(ctx context.Context) NotificationFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationFilterOutput)
}

func (i NotificationFilterArgs) ToNotificationFilterPtrOutput() NotificationFilterPtrOutput {
	return i.ToNotificationFilterPtrOutputWithContext(context.Background())
}

func (i NotificationFilterArgs) ToNotificationFilterPtrOutputWithContext(ctx context.Context) NotificationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationFilterOutput).ToNotificationFilterPtrOutputWithContext(ctx)
}

// NotificationFilterPtrInput is an input type that accepts NotificationFilterArgs, NotificationFilterPtr and NotificationFilterPtrOutput values.
// You can construct a concrete instance of `NotificationFilterPtrInput` via:
//
//	        NotificationFilterArgs{...}
//
//	or:
//
//	        nil
type NotificationFilterPtrInput interface {
	pulumi.Input

	ToNotificationFilterPtrOutput() NotificationFilterPtrOutput
	ToNotificationFilterPtrOutputWithContext(context.Context) NotificationFilterPtrOutput
}

type notificationFilterPtrType NotificationFilterArgs

func NotificationFilterPtr(v *NotificationFilterArgs) NotificationFilterPtrInput {
	return (*notificationFilterPtrType)(v)
}

func (*notificationFilterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationFilter)(nil)).Elem()
}

func (i *notificationFilterPtrType) ToNotificationFilterPtrOutput() NotificationFilterPtrOutput {
	return i.ToNotificationFilterPtrOutputWithContext(context.Background())
}

func (i *notificationFilterPtrType) ToNotificationFilterPtrOutputWithContext(ctx context.Context) NotificationFilterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationFilterPtrOutput)
}

type NotificationFilterOutput struct{ *pulumi.OutputState }

func (NotificationFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationFilter)(nil)).Elem()
}

func (o NotificationFilterOutput) ToNotificationFilterOutput() NotificationFilterOutput {
	return o
}

func (o NotificationFilterOutput) ToNotificationFilterOutputWithContext(ctx context.Context) NotificationFilterOutput {
	return o
}

func (o NotificationFilterOutput) ToNotificationFilterPtrOutput() NotificationFilterPtrOutput {
	return o.ToNotificationFilterPtrOutputWithContext(context.Background())
}

func (o NotificationFilterOutput) ToNotificationFilterPtrOutputWithContext(ctx context.Context) NotificationFilterPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NotificationFilter) *NotificationFilter {
		return &v
	}).(NotificationFilterPtrOutput)
}

func (o NotificationFilterOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationFilter) string { return v.Condition }).(pulumi.StringOutput)
}

func (o NotificationFilterOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationFilter) []string { return v.Rules }).(pulumi.StringArrayOutput)
}

type NotificationFilterPtrOutput struct{ *pulumi.OutputState }

func (NotificationFilterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationFilter)(nil)).Elem()
}

func (o NotificationFilterPtrOutput) ToNotificationFilterPtrOutput() NotificationFilterPtrOutput {
	return o
}

func (o NotificationFilterPtrOutput) ToNotificationFilterPtrOutputWithContext(ctx context.Context) NotificationFilterPtrOutput {
	return o
}

func (o NotificationFilterPtrOutput) Elem() NotificationFilterOutput {
	return o.ApplyT(func(v *NotificationFilter) NotificationFilter {
		if v != nil {
			return *v
		}
		var ret NotificationFilter
		return ret
	}).(NotificationFilterOutput)
}

func (o NotificationFilterPtrOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationFilter) *string {
		if v == nil {
			return nil
		}
		return &v.Condition
	}).(pulumi.StringPtrOutput)
}

func (o NotificationFilterPtrOutput) Rules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NotificationFilter) []string {
		if v == nil {
			return nil
		}
		return v.Rules
	}).(pulumi.StringArrayOutput)
}

type NotificationOperation struct {
	Resource   string   `pulumi:"resource"`
	Service    string   `pulumi:"service"`
	TraceNames []string `pulumi:"traceNames"`
}

// NotificationOperationInput is an input type that accepts NotificationOperationArgs and NotificationOperationOutput values.
// You can construct a concrete instance of `NotificationOperationInput` via:
//
//	NotificationOperationArgs{...}
type NotificationOperationInput interface {
	pulumi.Input

	ToNotificationOperationOutput() NotificationOperationOutput
	ToNotificationOperationOutputWithContext(context.Context) NotificationOperationOutput
}

type NotificationOperationArgs struct {
	Resource   pulumi.StringInput      `pulumi:"resource"`
	Service    pulumi.StringInput      `pulumi:"service"`
	TraceNames pulumi.StringArrayInput `pulumi:"traceNames"`
}

func (NotificationOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperation)(nil)).Elem()
}

func (i NotificationOperationArgs) ToNotificationOperationOutput() NotificationOperationOutput {
	return i.ToNotificationOperationOutputWithContext(context.Background())
}

func (i NotificationOperationArgs) ToNotificationOperationOutputWithContext(ctx context.Context) NotificationOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOperationOutput)
}

// NotificationOperationArrayInput is an input type that accepts NotificationOperationArray and NotificationOperationArrayOutput values.
// You can construct a concrete instance of `NotificationOperationArrayInput` via:
//
//	NotificationOperationArray{ NotificationOperationArgs{...} }
type NotificationOperationArrayInput interface {
	pulumi.Input

	ToNotificationOperationArrayOutput() NotificationOperationArrayOutput
	ToNotificationOperationArrayOutputWithContext(context.Context) NotificationOperationArrayOutput
}

type NotificationOperationArray []NotificationOperationInput

func (NotificationOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationOperation)(nil)).Elem()
}

func (i NotificationOperationArray) ToNotificationOperationArrayOutput() NotificationOperationArrayOutput {
	return i.ToNotificationOperationArrayOutputWithContext(context.Background())
}

func (i NotificationOperationArray) ToNotificationOperationArrayOutputWithContext(ctx context.Context) NotificationOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOperationArrayOutput)
}

type NotificationOperationOutput struct{ *pulumi.OutputState }

func (NotificationOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperation)(nil)).Elem()
}

func (o NotificationOperationOutput) ToNotificationOperationOutput() NotificationOperationOutput {
	return o
}

func (o NotificationOperationOutput) ToNotificationOperationOutputWithContext(ctx context.Context) NotificationOperationOutput {
	return o
}

func (o NotificationOperationOutput) Resource() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationOperation) string { return v.Resource }).(pulumi.StringOutput)
}

func (o NotificationOperationOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationOperation) string { return v.Service }).(pulumi.StringOutput)
}

func (o NotificationOperationOutput) TraceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationOperation) []string { return v.TraceNames }).(pulumi.StringArrayOutput)
}

type NotificationOperationArrayOutput struct{ *pulumi.OutputState }

func (NotificationOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationOperation)(nil)).Elem()
}

func (o NotificationOperationArrayOutput) ToNotificationOperationArrayOutput() NotificationOperationArrayOutput {
	return o
}

func (o NotificationOperationArrayOutput) ToNotificationOperationArrayOutputWithContext(ctx context.Context) NotificationOperationArrayOutput {
	return o
}

func (o NotificationOperationArrayOutput) Index(i pulumi.IntInput) NotificationOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationOperation {
		return vs[0].([]NotificationOperation)[vs[1].(int)]
	}).(NotificationOperationOutput)
}

type NotificationOperationUser struct {
	Group string   `pulumi:"group"`
	Users []string `pulumi:"users"`
}

// NotificationOperationUserInput is an input type that accepts NotificationOperationUserArgs and NotificationOperationUserOutput values.
// You can construct a concrete instance of `NotificationOperationUserInput` via:
//
//	NotificationOperationUserArgs{...}
type NotificationOperationUserInput interface {
	pulumi.Input

	ToNotificationOperationUserOutput() NotificationOperationUserOutput
	ToNotificationOperationUserOutputWithContext(context.Context) NotificationOperationUserOutput
}

type NotificationOperationUserArgs struct {
	Group pulumi.StringInput      `pulumi:"group"`
	Users pulumi.StringArrayInput `pulumi:"users"`
}

func (NotificationOperationUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperationUser)(nil)).Elem()
}

func (i NotificationOperationUserArgs) ToNotificationOperationUserOutput() NotificationOperationUserOutput {
	return i.ToNotificationOperationUserOutputWithContext(context.Background())
}

func (i NotificationOperationUserArgs) ToNotificationOperationUserOutputWithContext(ctx context.Context) NotificationOperationUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOperationUserOutput)
}

// NotificationOperationUserArrayInput is an input type that accepts NotificationOperationUserArray and NotificationOperationUserArrayOutput values.
// You can construct a concrete instance of `NotificationOperationUserArrayInput` via:
//
//	NotificationOperationUserArray{ NotificationOperationUserArgs{...} }
type NotificationOperationUserArrayInput interface {
	pulumi.Input

	ToNotificationOperationUserArrayOutput() NotificationOperationUserArrayOutput
	ToNotificationOperationUserArrayOutputWithContext(context.Context) NotificationOperationUserArrayOutput
}

type NotificationOperationUserArray []NotificationOperationUserInput

func (NotificationOperationUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationOperationUser)(nil)).Elem()
}

func (i NotificationOperationUserArray) ToNotificationOperationUserArrayOutput() NotificationOperationUserArrayOutput {
	return i.ToNotificationOperationUserArrayOutputWithContext(context.Background())
}

func (i NotificationOperationUserArray) ToNotificationOperationUserArrayOutputWithContext(ctx context.Context) NotificationOperationUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOperationUserArrayOutput)
}

type NotificationOperationUserOutput struct{ *pulumi.OutputState }

func (NotificationOperationUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationOperationUser)(nil)).Elem()
}

func (o NotificationOperationUserOutput) ToNotificationOperationUserOutput() NotificationOperationUserOutput {
	return o
}

func (o NotificationOperationUserOutput) ToNotificationOperationUserOutputWithContext(ctx context.Context) NotificationOperationUserOutput {
	return o
}

func (o NotificationOperationUserOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationOperationUser) string { return v.Group }).(pulumi.StringOutput)
}

func (o NotificationOperationUserOutput) Users() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationOperationUser) []string { return v.Users }).(pulumi.StringArrayOutput)
}

type NotificationOperationUserArrayOutput struct{ *pulumi.OutputState }

func (NotificationOperationUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationOperationUser)(nil)).Elem()
}

func (o NotificationOperationUserArrayOutput) ToNotificationOperationUserArrayOutput() NotificationOperationUserArrayOutput {
	return o
}

func (o NotificationOperationUserArrayOutput) ToNotificationOperationUserArrayOutputWithContext(ctx context.Context) NotificationOperationUserArrayOutput {
	return o
}

func (o NotificationOperationUserArrayOutput) Index(i pulumi.IntInput) NotificationOperationUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationOperationUser {
		return vs[0].([]NotificationOperationUser)[vs[1].(int)]
	}).(NotificationOperationUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationFilterInput)(nil)).Elem(), NotificationFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationFilterPtrInput)(nil)).Elem(), NotificationFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationOperationInput)(nil)).Elem(), NotificationOperationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationOperationArrayInput)(nil)).Elem(), NotificationOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationOperationUserInput)(nil)).Elem(), NotificationOperationUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationOperationUserArrayInput)(nil)).Elem(), NotificationOperationUserArray{})
	pulumi.RegisterOutputType(NotificationFilterOutput{})
	pulumi.RegisterOutputType(NotificationFilterPtrOutput{})
	pulumi.RegisterOutputType(NotificationOperationOutput{})
	pulumi.RegisterOutputType(NotificationOperationArrayOutput{})
	pulumi.RegisterOutputType(NotificationOperationUserOutput{})
	pulumi.RegisterOutputType(NotificationOperationUserArrayOutput{})
}

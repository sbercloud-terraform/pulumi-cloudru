// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class CceNodesRemove extends pulumi.CustomResource {
    /**
     * Get an existing CceNodesRemove resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CceNodesRemoveState, opts?: pulumi.CustomResourceOptions): CceNodesRemove {
        return new CceNodesRemove(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/cceNodesRemove:CceNodesRemove';

    /**
     * Returns true if the given object is an instance of CceNodesRemove.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CceNodesRemove {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CceNodesRemove.__pulumiType;
    }

    declare public readonly clusterId: pulumi.Output<string>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    declare public readonly nodes: pulumi.Output<outputs.CceNodesRemoveNode[]>;
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a CceNodesRemove resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CceNodesRemoveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CceNodesRemoveArgs | CceNodesRemoveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CceNodesRemoveState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["nodes"] = state?.nodes;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as CceNodesRemoveArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.nodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["nodes"] = args?.nodes;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CceNodesRemove.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CceNodesRemove resources.
 */
export interface CceNodesRemoveState {
    clusterId?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    nodes?: pulumi.Input<pulumi.Input<inputs.CceNodesRemoveNode>[]>;
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CceNodesRemove resource.
 */
export interface CceNodesRemoveArgs {
    clusterId: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    nodes: pulumi.Input<pulumi.Input<inputs.CceNodesRemoveNode>[]>;
    region?: pulumi.Input<string>;
}

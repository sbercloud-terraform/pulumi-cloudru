# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'FunctionCustomImageArgs',
    'FunctionCustomImageArgsDict',
    'FunctionFuncMountArgs',
    'FunctionFuncMountArgsDict',
    'FunctionNetworkControllerArgs',
    'FunctionNetworkControllerArgsDict',
    'FunctionNetworkControllerTriggerAccessVpcArgs',
    'FunctionNetworkControllerTriggerAccessVpcArgsDict',
    'FunctionReservedInstanceArgs',
    'FunctionReservedInstanceArgsDict',
    'FunctionReservedInstanceTacticsConfigArgs',
    'FunctionReservedInstanceTacticsConfigArgsDict',
    'FunctionReservedInstanceTacticsConfigCronConfigArgs',
    'FunctionReservedInstanceTacticsConfigCronConfigArgsDict',
    'FunctionReservedInstanceTacticsConfigMetricConfigArgs',
    'FunctionReservedInstanceTacticsConfigMetricConfigArgsDict',
    'FunctionVersionArgs',
    'FunctionVersionArgsDict',
    'FunctionVersionAliasesArgs',
    'FunctionVersionAliasesArgsDict',
]

MYPY = False

if not MYPY:
    class FunctionCustomImageArgsDict(TypedDict):
        url: pulumi.Input[_builtins.str]
        """
        The URL of SWR image.
        """
        args: NotRequired[pulumi.Input[_builtins.str]]
        """
        The command line arguments used to start the SWR image.
        """
        command: NotRequired[pulumi.Input[_builtins.str]]
        """
        The startup commands of the SWR image.
        """
        user_group_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The user group ID that used to run SWR image.
        """
        user_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        The user ID that used to run SWR image.
        """
        working_dir: NotRequired[pulumi.Input[_builtins.str]]
        """
        The working directory of the SWR image.
        """
elif False:
    FunctionCustomImageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionCustomImageArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[_builtins.str],
                 args: Optional[pulumi.Input[_builtins.str]] = None,
                 command: Optional[pulumi.Input[_builtins.str]] = None,
                 user_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_id: Optional[pulumi.Input[_builtins.str]] = None,
                 working_dir: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] url: The URL of SWR image.
        :param pulumi.Input[_builtins.str] args: The command line arguments used to start the SWR image.
        :param pulumi.Input[_builtins.str] command: The startup commands of the SWR image.
        :param pulumi.Input[_builtins.str] user_group_id: The user group ID that used to run SWR image.
        :param pulumi.Input[_builtins.str] user_id: The user ID that used to run SWR image.
        :param pulumi.Input[_builtins.str] working_dir: The working directory of the SWR image.
        """
        pulumi.set(__self__, "url", url)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if user_group_id is not None:
            pulumi.set(__self__, "user_group_id", user_group_id)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @_builtins.property
    @pulumi.getter
    def url(self) -> pulumi.Input[_builtins.str]:
        """
        The URL of SWR image.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "url", value)

    @_builtins.property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The command line arguments used to start the SWR image.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "args", value)

    @_builtins.property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The startup commands of the SWR image.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "command", value)

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user group ID that used to run SWR image.
        """
        return pulumi.get(self, "user_group_id")

    @user_group_id.setter
    def user_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_group_id", value)

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The user ID that used to run SWR image.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_id", value)

    @_builtins.property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The working directory of the SWR image.
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "working_dir", value)


if not MYPY:
    class FunctionFuncMountArgsDict(TypedDict):
        local_mount_path: pulumi.Input[_builtins.str]
        """
        Specifies the function access path.
        """
        mount_resource: pulumi.Input[_builtins.str]
        """
        Specifies the ID of the mounted resource (corresponding cloud service).
        """
        mount_share_path: pulumi.Input[_builtins.str]
        """
        Specifies the remote mount path. Example: 192.168.0.12:/data.
        """
        mount_type: pulumi.Input[_builtins.str]
        """
        Specifies the mount type. Options: sfs, sfsTurbo, and ecs.
        """
        status: NotRequired[pulumi.Input[_builtins.str]]
        """
        The mount status.
        """
elif False:
    FunctionFuncMountArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionFuncMountArgs:
    def __init__(__self__, *,
                 local_mount_path: pulumi.Input[_builtins.str],
                 mount_resource: pulumi.Input[_builtins.str],
                 mount_share_path: pulumi.Input[_builtins.str],
                 mount_type: pulumi.Input[_builtins.str],
                 status: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] local_mount_path: Specifies the function access path.
        :param pulumi.Input[_builtins.str] mount_resource: Specifies the ID of the mounted resource (corresponding cloud service).
        :param pulumi.Input[_builtins.str] mount_share_path: Specifies the remote mount path. Example: 192.168.0.12:/data.
        :param pulumi.Input[_builtins.str] mount_type: Specifies the mount type. Options: sfs, sfsTurbo, and ecs.
        :param pulumi.Input[_builtins.str] status: The mount status.
        """
        pulumi.set(__self__, "local_mount_path", local_mount_path)
        pulumi.set(__self__, "mount_resource", mount_resource)
        pulumi.set(__self__, "mount_share_path", mount_share_path)
        pulumi.set(__self__, "mount_type", mount_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="localMountPath")
    def local_mount_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the function access path.
        """
        return pulumi.get(self, "local_mount_path")

    @local_mount_path.setter
    def local_mount_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "local_mount_path", value)

    @_builtins.property
    @pulumi.getter(name="mountResource")
    def mount_resource(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the ID of the mounted resource (corresponding cloud service).
        """
        return pulumi.get(self, "mount_resource")

    @mount_resource.setter
    def mount_resource(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mount_resource", value)

    @_builtins.property
    @pulumi.getter(name="mountSharePath")
    def mount_share_path(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the remote mount path. Example: 192.168.0.12:/data.
        """
        return pulumi.get(self, "mount_share_path")

    @mount_share_path.setter
    def mount_share_path(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mount_share_path", value)

    @_builtins.property
    @pulumi.getter(name="mountType")
    def mount_type(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the mount type. Options: sfs, sfsTurbo, and ecs.
        """
        return pulumi.get(self, "mount_type")

    @mount_type.setter
    def mount_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "mount_type", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The mount status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class FunctionNetworkControllerArgsDict(TypedDict):
        disable_public_network: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to disable the public network access.
        """
        trigger_access_vpcs: NotRequired[pulumi.Input[Sequence[pulumi.Input['FunctionNetworkControllerTriggerAccessVpcArgsDict']]]]
        """
        The configuration of the VPCs that can trigger the function.
        """
elif False:
    FunctionNetworkControllerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionNetworkControllerArgs:
    def __init__(__self__, *,
                 disable_public_network: Optional[pulumi.Input[_builtins.bool]] = None,
                 trigger_access_vpcs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionNetworkControllerTriggerAccessVpcArgs']]]] = None):
        """
        :param pulumi.Input[_builtins.bool] disable_public_network: Whether to disable the public network access.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionNetworkControllerTriggerAccessVpcArgs']]] trigger_access_vpcs: The configuration of the VPCs that can trigger the function.
        """
        if disable_public_network is not None:
            pulumi.set(__self__, "disable_public_network", disable_public_network)
        if trigger_access_vpcs is not None:
            pulumi.set(__self__, "trigger_access_vpcs", trigger_access_vpcs)

    @_builtins.property
    @pulumi.getter(name="disablePublicNetwork")
    def disable_public_network(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to disable the public network access.
        """
        return pulumi.get(self, "disable_public_network")

    @disable_public_network.setter
    def disable_public_network(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disable_public_network", value)

    @_builtins.property
    @pulumi.getter(name="triggerAccessVpcs")
    def trigger_access_vpcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionNetworkControllerTriggerAccessVpcArgs']]]]:
        """
        The configuration of the VPCs that can trigger the function.
        """
        return pulumi.get(self, "trigger_access_vpcs")

    @trigger_access_vpcs.setter
    def trigger_access_vpcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionNetworkControllerTriggerAccessVpcArgs']]]]):
        pulumi.set(self, "trigger_access_vpcs", value)


if not MYPY:
    class FunctionNetworkControllerTriggerAccessVpcArgsDict(TypedDict):
        vpc_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the ID of VPC.
        """
        vpc_name: NotRequired[pulumi.Input[_builtins.str]]
        """
        The ID of the VPC that can trigger the function.
        """
elif False:
    FunctionNetworkControllerTriggerAccessVpcArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionNetworkControllerTriggerAccessVpcArgs:
    def __init__(__self__, *,
                 vpc_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vpc_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] vpc_id: Specifies the ID of VPC.
        :param pulumi.Input[_builtins.str] vpc_name: The ID of the VPC that can trigger the function.
        """
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_name is not None:
            pulumi.set(__self__, "vpc_name", vpc_name)

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the ID of VPC.
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @_builtins.property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the VPC that can trigger the function.
        """
        return pulumi.get(self, "vpc_name")

    @vpc_name.setter
    def vpc_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vpc_name", value)


if not MYPY:
    class FunctionReservedInstanceArgsDict(TypedDict):
        count: pulumi.Input[_builtins.int]
        """
        The number of reserved instance.
        """
        qualifier_name: pulumi.Input[_builtins.str]
        """
        The version name or alias name.
        """
        qualifier_type: pulumi.Input[_builtins.str]
        """
        The qualifier type of reserved instance.
        """
        idle_mode: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether to enable the idle mode.
        """
        tactics_config: NotRequired[pulumi.Input['FunctionReservedInstanceTacticsConfigArgsDict']]
        """
        The auto scaling policies for reserved instance.
        """
elif False:
    FunctionReservedInstanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionReservedInstanceArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[_builtins.int],
                 qualifier_name: pulumi.Input[_builtins.str],
                 qualifier_type: pulumi.Input[_builtins.str],
                 idle_mode: Optional[pulumi.Input[_builtins.bool]] = None,
                 tactics_config: Optional[pulumi.Input['FunctionReservedInstanceTacticsConfigArgs']] = None):
        """
        :param pulumi.Input[_builtins.int] count: The number of reserved instance.
        :param pulumi.Input[_builtins.str] qualifier_name: The version name or alias name.
        :param pulumi.Input[_builtins.str] qualifier_type: The qualifier type of reserved instance.
        :param pulumi.Input[_builtins.bool] idle_mode: Whether to enable the idle mode.
        :param pulumi.Input['FunctionReservedInstanceTacticsConfigArgs'] tactics_config: The auto scaling policies for reserved instance.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "qualifier_name", qualifier_name)
        pulumi.set(__self__, "qualifier_type", qualifier_type)
        if idle_mode is not None:
            pulumi.set(__self__, "idle_mode", idle_mode)
        if tactics_config is not None:
            pulumi.set(__self__, "tactics_config", tactics_config)

    @_builtins.property
    @pulumi.getter
    def count(self) -> pulumi.Input[_builtins.int]:
        """
        The number of reserved instance.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "count", value)

    @_builtins.property
    @pulumi.getter(name="qualifierName")
    def qualifier_name(self) -> pulumi.Input[_builtins.str]:
        """
        The version name or alias name.
        """
        return pulumi.get(self, "qualifier_name")

    @qualifier_name.setter
    def qualifier_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "qualifier_name", value)

    @_builtins.property
    @pulumi.getter(name="qualifierType")
    def qualifier_type(self) -> pulumi.Input[_builtins.str]:
        """
        The qualifier type of reserved instance.
        """
        return pulumi.get(self, "qualifier_type")

    @qualifier_type.setter
    def qualifier_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "qualifier_type", value)

    @_builtins.property
    @pulumi.getter(name="idleMode")
    def idle_mode(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether to enable the idle mode.
        """
        return pulumi.get(self, "idle_mode")

    @idle_mode.setter
    def idle_mode(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "idle_mode", value)

    @_builtins.property
    @pulumi.getter(name="tacticsConfig")
    def tactics_config(self) -> Optional[pulumi.Input['FunctionReservedInstanceTacticsConfigArgs']]:
        """
        The auto scaling policies for reserved instance.
        """
        return pulumi.get(self, "tactics_config")

    @tactics_config.setter
    def tactics_config(self, value: Optional[pulumi.Input['FunctionReservedInstanceTacticsConfigArgs']]):
        pulumi.set(self, "tactics_config", value)


if not MYPY:
    class FunctionReservedInstanceTacticsConfigArgsDict(TypedDict):
        cron_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigCronConfigArgsDict']]]]
        """
        The list of scheduled policy configurations.
        """
        metric_configs: NotRequired[pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigMetricConfigArgsDict']]]]
        """
        The list of metric policy configurations.
        """
elif False:
    FunctionReservedInstanceTacticsConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionReservedInstanceTacticsConfigArgs:
    def __init__(__self__, *,
                 cron_configs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigCronConfigArgs']]]] = None,
                 metric_configs: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigMetricConfigArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigCronConfigArgs']]] cron_configs: The list of scheduled policy configurations.
        :param pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigMetricConfigArgs']]] metric_configs: The list of metric policy configurations.
        """
        if cron_configs is not None:
            pulumi.set(__self__, "cron_configs", cron_configs)
        if metric_configs is not None:
            pulumi.set(__self__, "metric_configs", metric_configs)

    @_builtins.property
    @pulumi.getter(name="cronConfigs")
    def cron_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigCronConfigArgs']]]]:
        """
        The list of scheduled policy configurations.
        """
        return pulumi.get(self, "cron_configs")

    @cron_configs.setter
    def cron_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigCronConfigArgs']]]]):
        pulumi.set(self, "cron_configs", value)

    @_builtins.property
    @pulumi.getter(name="metricConfigs")
    def metric_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigMetricConfigArgs']]]]:
        """
        The list of metric policy configurations.
        """
        return pulumi.get(self, "metric_configs")

    @metric_configs.setter
    def metric_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionReservedInstanceTacticsConfigMetricConfigArgs']]]]):
        pulumi.set(self, "metric_configs", value)


if not MYPY:
    class FunctionReservedInstanceTacticsConfigCronConfigArgsDict(TypedDict):
        count: pulumi.Input[_builtins.int]
        """
        The number of reserved instance to which the policy belongs.
        """
        cron: pulumi.Input[_builtins.str]
        """
        The cron expression.
        """
        expired_time: pulumi.Input[_builtins.int]
        """
        The expiration timestamp of the policy.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the function.
        """
        start_time: pulumi.Input[_builtins.int]
        """
        The effective timestamp of policy.
        """
elif False:
    FunctionReservedInstanceTacticsConfigCronConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionReservedInstanceTacticsConfigCronConfigArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[_builtins.int],
                 cron: pulumi.Input[_builtins.str],
                 expired_time: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 start_time: pulumi.Input[_builtins.int]):
        """
        :param pulumi.Input[_builtins.int] count: The number of reserved instance to which the policy belongs.
        :param pulumi.Input[_builtins.str] cron: The cron expression.
        :param pulumi.Input[_builtins.int] expired_time: The expiration timestamp of the policy.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the function.
        :param pulumi.Input[_builtins.int] start_time: The effective timestamp of policy.
        """
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "cron", cron)
        pulumi.set(__self__, "expired_time", expired_time)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_time", start_time)

    @_builtins.property
    @pulumi.getter
    def count(self) -> pulumi.Input[_builtins.int]:
        """
        The number of reserved instance to which the policy belongs.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "count", value)

    @_builtins.property
    @pulumi.getter
    def cron(self) -> pulumi.Input[_builtins.str]:
        """
        The cron expression.
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cron", value)

    @_builtins.property
    @pulumi.getter(name="expiredTime")
    def expired_time(self) -> pulumi.Input[_builtins.int]:
        """
        The expiration timestamp of the policy.
        """
        return pulumi.get(self, "expired_time")

    @expired_time.setter
    def expired_time(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "expired_time", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the function.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[_builtins.int]:
        """
        The effective timestamp of policy.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class FunctionReservedInstanceTacticsConfigMetricConfigArgsDict(TypedDict):
        min: pulumi.Input[_builtins.int]
        """
        The minimun of traffic.
        """
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the function.
        """
        threshold: pulumi.Input[_builtins.int]
        """
        The metric policy threshold.
        """
        type: pulumi.Input[_builtins.str]
        """
        The type of metric policy.
        """
elif False:
    FunctionReservedInstanceTacticsConfigMetricConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionReservedInstanceTacticsConfigMetricConfigArgs:
    def __init__(__self__, *,
                 min: pulumi.Input[_builtins.int],
                 name: pulumi.Input[_builtins.str],
                 threshold: pulumi.Input[_builtins.int],
                 type: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.int] min: The minimun of traffic.
        :param pulumi.Input[_builtins.str] name: Specifies the name of the function.
        :param pulumi.Input[_builtins.int] threshold: The metric policy threshold.
        :param pulumi.Input[_builtins.str] type: The type of metric policy.
        """
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "threshold", threshold)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def min(self) -> pulumi.Input[_builtins.int]:
        """
        The minimun of traffic.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "min", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the function.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[_builtins.int]:
        """
        The metric policy threshold.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "threshold", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of metric policy.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)


if not MYPY:
    class FunctionVersionArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the function.
        """
        aliases: NotRequired[pulumi.Input['FunctionVersionAliasesArgsDict']]
        """
        The aliases management for specified version.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the function.
        """
elif False:
    FunctionVersionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionVersionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 aliases: Optional[pulumi.Input['FunctionVersionAliasesArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the function.
        :param pulumi.Input['FunctionVersionAliasesArgs'] aliases: The aliases management for specified version.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the function.
        """
        pulumi.set(__self__, "name", name)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the function.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input['FunctionVersionAliasesArgs']]:
        """
        The aliases management for specified version.
        """
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input['FunctionVersionAliasesArgs']]):
        pulumi.set(self, "aliases", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class FunctionVersionAliasesArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        """
        Specifies the name of the function.
        """
        additional_version_strategy: NotRequired[pulumi.Input[_builtins.str]]
        """
        The description of the version alias.
        """
        additional_version_weights: NotRequired[pulumi.Input[_builtins.str]]
        """
        The percentage grayscale configuration of the version alias.
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies the description of the function.
        """
elif False:
    FunctionVersionAliasesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FunctionVersionAliasesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 additional_version_strategy: Optional[pulumi.Input[_builtins.str]] = None,
                 additional_version_weights: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] name: Specifies the name of the function.
        :param pulumi.Input[_builtins.str] additional_version_strategy: The description of the version alias.
        :param pulumi.Input[_builtins.str] additional_version_weights: The percentage grayscale configuration of the version alias.
        :param pulumi.Input[_builtins.str] description: Specifies the description of the function.
        """
        pulumi.set(__self__, "name", name)
        if additional_version_strategy is not None:
            pulumi.set(__self__, "additional_version_strategy", additional_version_strategy)
        if additional_version_weights is not None:
            pulumi.set(__self__, "additional_version_weights", additional_version_weights)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the name of the function.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="additionalVersionStrategy")
    def additional_version_strategy(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The description of the version alias.
        """
        return pulumi.get(self, "additional_version_strategy")

    @additional_version_strategy.setter
    def additional_version_strategy(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "additional_version_strategy", value)

    @_builtins.property
    @pulumi.getter(name="additionalVersionWeights")
    def additional_version_weights(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The percentage grayscale configuration of the version alias.
        """
        return pulumi.get(self, "additional_version_weights")

    @additional_version_weights.setter
    def additional_version_weights(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "additional_version_weights", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies the description of the function.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)



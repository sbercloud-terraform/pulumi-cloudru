// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdm

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Cluster struct {
	pulumi.CustomResourceState

	AvailabilityZone    pulumi.StringOutput        `pulumi:"availabilityZone"`
	Created             pulumi.StringOutput        `pulumi:"created"`
	Emails              pulumi.StringArrayOutput   `pulumi:"emails"`
	EnterpriseProjectId pulumi.StringOutput        `pulumi:"enterpriseProjectId"`
	FlavorId            pulumi.StringOutput        `pulumi:"flavorId"`
	FlavorName          pulumi.StringOutput        `pulumi:"flavorName"`
	Instances           ClusterInstanceArrayOutput `pulumi:"instances"`
	IsAutoOff           pulumi.BoolOutput          `pulumi:"isAutoOff"`
	Name                pulumi.StringOutput        `pulumi:"name"`
	PhoneNums           pulumi.StringArrayOutput   `pulumi:"phoneNums"`
	PublicEndpoint      pulumi.StringOutput        `pulumi:"publicEndpoint"`
	PublicIp            pulumi.StringOutput        `pulumi:"publicIp"`
	Region              pulumi.StringOutput        `pulumi:"region"`
	ScheduleBootTime    pulumi.StringOutput        `pulumi:"scheduleBootTime"`
	ScheduleOffTime     pulumi.StringOutput        `pulumi:"scheduleOffTime"`
	SecurityGroupId     pulumi.StringOutput        `pulumi:"securityGroupId"`
	Status              pulumi.StringOutput        `pulumi:"status"`
	SubnetId            pulumi.StringOutput        `pulumi:"subnetId"`
	Version             pulumi.StringOutput        `pulumi:"version"`
	VpcId               pulumi.StringOutput        `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.FlavorId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorId'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("cloudru:Cdm/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("cloudru:Cdm/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	AvailabilityZone    *string           `pulumi:"availabilityZone"`
	Created             *string           `pulumi:"created"`
	Emails              []string          `pulumi:"emails"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	FlavorId            *string           `pulumi:"flavorId"`
	FlavorName          *string           `pulumi:"flavorName"`
	Instances           []ClusterInstance `pulumi:"instances"`
	IsAutoOff           *bool             `pulumi:"isAutoOff"`
	Name                *string           `pulumi:"name"`
	PhoneNums           []string          `pulumi:"phoneNums"`
	PublicEndpoint      *string           `pulumi:"publicEndpoint"`
	PublicIp            *string           `pulumi:"publicIp"`
	Region              *string           `pulumi:"region"`
	ScheduleBootTime    *string           `pulumi:"scheduleBootTime"`
	ScheduleOffTime     *string           `pulumi:"scheduleOffTime"`
	SecurityGroupId     *string           `pulumi:"securityGroupId"`
	Status              *string           `pulumi:"status"`
	SubnetId            *string           `pulumi:"subnetId"`
	Version             *string           `pulumi:"version"`
	VpcId               *string           `pulumi:"vpcId"`
}

type ClusterState struct {
	AvailabilityZone    pulumi.StringPtrInput
	Created             pulumi.StringPtrInput
	Emails              pulumi.StringArrayInput
	EnterpriseProjectId pulumi.StringPtrInput
	FlavorId            pulumi.StringPtrInput
	FlavorName          pulumi.StringPtrInput
	Instances           ClusterInstanceArrayInput
	IsAutoOff           pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	PhoneNums           pulumi.StringArrayInput
	PublicEndpoint      pulumi.StringPtrInput
	PublicIp            pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	ScheduleBootTime    pulumi.StringPtrInput
	ScheduleOffTime     pulumi.StringPtrInput
	SecurityGroupId     pulumi.StringPtrInput
	Status              pulumi.StringPtrInput
	SubnetId            pulumi.StringPtrInput
	Version             pulumi.StringPtrInput
	VpcId               pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	AvailabilityZone    string   `pulumi:"availabilityZone"`
	Emails              []string `pulumi:"emails"`
	EnterpriseProjectId *string  `pulumi:"enterpriseProjectId"`
	FlavorId            string   `pulumi:"flavorId"`
	IsAutoOff           *bool    `pulumi:"isAutoOff"`
	Name                *string  `pulumi:"name"`
	PhoneNums           []string `pulumi:"phoneNums"`
	Region              *string  `pulumi:"region"`
	ScheduleBootTime    *string  `pulumi:"scheduleBootTime"`
	ScheduleOffTime     *string  `pulumi:"scheduleOffTime"`
	SecurityGroupId     string   `pulumi:"securityGroupId"`
	SubnetId            string   `pulumi:"subnetId"`
	Version             *string  `pulumi:"version"`
	VpcId               string   `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	AvailabilityZone    pulumi.StringInput
	Emails              pulumi.StringArrayInput
	EnterpriseProjectId pulumi.StringPtrInput
	FlavorId            pulumi.StringInput
	IsAutoOff           pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	PhoneNums           pulumi.StringArrayInput
	Region              pulumi.StringPtrInput
	ScheduleBootTime    pulumi.StringPtrInput
	ScheduleOffTime     pulumi.StringPtrInput
	SecurityGroupId     pulumi.StringInput
	SubnetId            pulumi.StringInput
	Version             pulumi.StringPtrInput
	VpcId               pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o ClusterOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

func (o ClusterOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.Emails }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o ClusterOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

func (o ClusterOutput) FlavorName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.FlavorName }).(pulumi.StringOutput)
}

func (o ClusterOutput) Instances() ClusterInstanceArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterInstanceArrayOutput { return v.Instances }).(ClusterInstanceArrayOutput)
}

func (o ClusterOutput) IsAutoOff() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.IsAutoOff }).(pulumi.BoolOutput)
}

func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ClusterOutput) PhoneNums() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.PhoneNums }).(pulumi.StringArrayOutput)
}

func (o ClusterOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.PublicEndpoint }).(pulumi.StringOutput)
}

func (o ClusterOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o ClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ClusterOutput) ScheduleBootTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ScheduleBootTime }).(pulumi.StringOutput)
}

func (o ClusterOutput) ScheduleOffTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ScheduleOffTime }).(pulumi.StringOutput)
}

func (o ClusterOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o ClusterOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}

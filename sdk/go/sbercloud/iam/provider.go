// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages the identity providers within SberCloud IAM service.
//
// > **NOTE:** You can create up to 10 identity providers.
//
// ## Example Usage
//
// ### Create a SAML protocol provider
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewProvider(ctx, "provider_1", &iam.ProviderArgs{
//				Name:     pulumi.String("example_com_provider_saml"),
//				Protocol: pulumi.String("saml"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a OpenID Connect protocol provider
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"keys": []map[string]interface{}{
//					map[string]interface{}{
//						"alg": "RS256",
//						"e":   "AQAB",
//						"kid": "...",
//						"kty": "RSA",
//						"n":   "...",
//						"use": "sig",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = iam.NewProvider(ctx, "provider_2", &iam.ProviderArgs{
//				Name:     pulumi.String("example_com_provider_oidc"),
//				Protocol: pulumi.String("oidc"),
//				AccessConfig: &iam.ProviderAccessConfigArgs{
//					AccessType:            pulumi.String("program_console"),
//					ProviderUrl:           pulumi.String("https://accounts.example.com"),
//					ClientId:              pulumi.String("your_client_id"),
//					AuthorizationEndpoint: pulumi.String("https://accounts.example.com/o/oauth2/v2/auth"),
//					Scopes: pulumi.StringArray{
//						pulumi.String("openid"),
//					},
//					SigningKey: pulumi.String(json0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// <!--markdownlint-disable MD033-->
//
// ## Import
//
// Identity provider can be imported using the `name`, e.g.
//
// ```sh
// $ pulumi import sbercloud:Iam/provider:Provider provider_1 example_com_provider_saml
// ```
type Provider struct {
	pulumi.CustomResourceState

	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to *oidc*.
	AccessConfig ProviderAccessConfigPtrOutput `pulumi:"accessConfig"`
	// The identity conversion rules of the identity provider.
	// The object structure is documented below
	ConversionRules ProviderConversionRuleArrayOutput `pulumi:"conversionRules"`
	// Specifies the description of the identity provider.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The login link of the identity provider.
	LoginLink pulumi.StringOutput `pulumi:"loginLink"`
	// Specifies the metadata of the IDP(Identity Provider) server.
	// To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
	// This field is used to import a metadata file to IAM to implement federated identity authentication.
	// This field is required only if the protocol is set to *saml*.
	// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
	//
	// > **NOTE:**
	// The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
	// It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
	// for example:
	// <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// Specifies the name of the identity provider to be registered.
	// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
	// The name is unique, it is recommended to include domain name information.
	// Changing this creates a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the protocol of the identity provider.
	// Valid values are *saml* and *oidc*.
	// Changing this creates a new resource.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The single sign-on type of the identity provider.
	SsoType pulumi.StringOutput `pulumi:"ssoType"`
	// Enabled status for the identity provider. Defaults to true.
	Status pulumi.BoolPtrOutput `pulumi:"status"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("sbercloud:Iam/provider:Provider", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProvider gets an existing Provider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProvider(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProviderState, opts ...pulumi.ResourceOption) (*Provider, error) {
	var resource Provider
	err := ctx.ReadResource("sbercloud:Iam/provider:Provider", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Provider resources.
type providerState struct {
	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to *oidc*.
	AccessConfig *ProviderAccessConfig `pulumi:"accessConfig"`
	// The identity conversion rules of the identity provider.
	// The object structure is documented below
	ConversionRules []ProviderConversionRule `pulumi:"conversionRules"`
	// Specifies the description of the identity provider.
	Description *string `pulumi:"description"`
	// The login link of the identity provider.
	LoginLink *string `pulumi:"loginLink"`
	// Specifies the metadata of the IDP(Identity Provider) server.
	// To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
	// This field is used to import a metadata file to IAM to implement federated identity authentication.
	// This field is required only if the protocol is set to *saml*.
	// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
	//
	// > **NOTE:**
	// The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
	// It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
	// for example:
	// <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
	Metadata *string `pulumi:"metadata"`
	// Specifies the name of the identity provider to be registered.
	// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
	// The name is unique, it is recommended to include domain name information.
	// Changing this creates a new resource.
	Name *string `pulumi:"name"`
	// Specifies the protocol of the identity provider.
	// Valid values are *saml* and *oidc*.
	// Changing this creates a new resource.
	Protocol *string `pulumi:"protocol"`
	// The single sign-on type of the identity provider.
	SsoType *string `pulumi:"ssoType"`
	// Enabled status for the identity provider. Defaults to true.
	Status *bool `pulumi:"status"`
}

type ProviderState struct {
	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to *oidc*.
	AccessConfig ProviderAccessConfigPtrInput
	// The identity conversion rules of the identity provider.
	// The object structure is documented below
	ConversionRules ProviderConversionRuleArrayInput
	// Specifies the description of the identity provider.
	Description pulumi.StringPtrInput
	// The login link of the identity provider.
	LoginLink pulumi.StringPtrInput
	// Specifies the metadata of the IDP(Identity Provider) server.
	// To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
	// This field is used to import a metadata file to IAM to implement federated identity authentication.
	// This field is required only if the protocol is set to *saml*.
	// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
	//
	// > **NOTE:**
	// The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
	// It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
	// for example:
	// <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
	Metadata pulumi.StringPtrInput
	// Specifies the name of the identity provider to be registered.
	// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
	// The name is unique, it is recommended to include domain name information.
	// Changing this creates a new resource.
	Name pulumi.StringPtrInput
	// Specifies the protocol of the identity provider.
	// Valid values are *saml* and *oidc*.
	// Changing this creates a new resource.
	Protocol pulumi.StringPtrInput
	// The single sign-on type of the identity provider.
	SsoType pulumi.StringPtrInput
	// Enabled status for the identity provider. Defaults to true.
	Status pulumi.BoolPtrInput
}

func (ProviderState) ElementType() reflect.Type {
	return reflect.TypeOf((*providerState)(nil)).Elem()
}

type providerArgs struct {
	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to *oidc*.
	AccessConfig *ProviderAccessConfig `pulumi:"accessConfig"`
	// Specifies the description of the identity provider.
	Description *string `pulumi:"description"`
	// Specifies the metadata of the IDP(Identity Provider) server.
	// To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
	// This field is used to import a metadata file to IAM to implement federated identity authentication.
	// This field is required only if the protocol is set to *saml*.
	// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
	//
	// > **NOTE:**
	// The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
	// It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
	// for example:
	// <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
	Metadata *string `pulumi:"metadata"`
	// Specifies the name of the identity provider to be registered.
	// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
	// The name is unique, it is recommended to include domain name information.
	// Changing this creates a new resource.
	Name *string `pulumi:"name"`
	// Specifies the protocol of the identity provider.
	// Valid values are *saml* and *oidc*.
	// Changing this creates a new resource.
	Protocol string `pulumi:"protocol"`
	// The single sign-on type of the identity provider.
	SsoType *string `pulumi:"ssoType"`
	// Enabled status for the identity provider. Defaults to true.
	Status *bool `pulumi:"status"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// Specifies the description of the identity provider.
	// This field is required only if the protocol is set to *oidc*.
	AccessConfig ProviderAccessConfigPtrInput
	// Specifies the description of the identity provider.
	Description pulumi.StringPtrInput
	// Specifies the metadata of the IDP(Identity Provider) server.
	// To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
	// This field is used to import a metadata file to IAM to implement federated identity authentication.
	// This field is required only if the protocol is set to *saml*.
	// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
	//
	// > **NOTE:**
	// The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
	// It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
	// for example:
	// <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
	Metadata pulumi.StringPtrInput
	// Specifies the name of the identity provider to be registered.
	// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
	// The name is unique, it is recommended to include domain name information.
	// Changing this creates a new resource.
	Name pulumi.StringPtrInput
	// Specifies the protocol of the identity provider.
	// Valid values are *saml* and *oidc*.
	// Changing this creates a new resource.
	Protocol pulumi.StringInput
	// The single sign-on type of the identity provider.
	SsoType pulumi.StringPtrInput
	// Enabled status for the identity provider. Defaults to true.
	Status pulumi.BoolPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

// ProviderArrayInput is an input type that accepts ProviderArray and ProviderArrayOutput values.
// You can construct a concrete instance of `ProviderArrayInput` via:
//
//	ProviderArray{ ProviderArgs{...} }
type ProviderArrayInput interface {
	pulumi.Input

	ToProviderArrayOutput() ProviderArrayOutput
	ToProviderArrayOutputWithContext(context.Context) ProviderArrayOutput
}

type ProviderArray []ProviderInput

func (ProviderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Provider)(nil)).Elem()
}

func (i ProviderArray) ToProviderArrayOutput() ProviderArrayOutput {
	return i.ToProviderArrayOutputWithContext(context.Background())
}

func (i ProviderArray) ToProviderArrayOutputWithContext(ctx context.Context) ProviderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderArrayOutput)
}

// ProviderMapInput is an input type that accepts ProviderMap and ProviderMapOutput values.
// You can construct a concrete instance of `ProviderMapInput` via:
//
//	ProviderMap{ "key": ProviderArgs{...} }
type ProviderMapInput interface {
	pulumi.Input

	ToProviderMapOutput() ProviderMapOutput
	ToProviderMapOutputWithContext(context.Context) ProviderMapOutput
}

type ProviderMap map[string]ProviderInput

func (ProviderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Provider)(nil)).Elem()
}

func (i ProviderMap) ToProviderMapOutput() ProviderMapOutput {
	return i.ToProviderMapOutputWithContext(context.Background())
}

func (i ProviderMap) ToProviderMapOutputWithContext(ctx context.Context) ProviderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderMapOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// Specifies the description of the identity provider.
// This field is required only if the protocol is set to *oidc*.
func (o ProviderOutput) AccessConfig() ProviderAccessConfigPtrOutput {
	return o.ApplyT(func(v *Provider) ProviderAccessConfigPtrOutput { return v.AccessConfig }).(ProviderAccessConfigPtrOutput)
}

// The identity conversion rules of the identity provider.
// The object structure is documented below
func (o ProviderOutput) ConversionRules() ProviderConversionRuleArrayOutput {
	return o.ApplyT(func(v *Provider) ProviderConversionRuleArrayOutput { return v.ConversionRules }).(ProviderConversionRuleArrayOutput)
}

// Specifies the description of the identity provider.
func (o ProviderOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The login link of the identity provider.
func (o ProviderOutput) LoginLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.LoginLink }).(pulumi.StringOutput)
}

// Specifies the metadata of the IDP(Identity Provider) server.
// To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
// This field is used to import a metadata file to IAM to implement federated identity authentication.
// This field is required only if the protocol is set to *saml*.
// The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
//
// > **NOTE:**
// The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
// It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
// for example:
// <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
func (o ProviderOutput) Metadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Metadata }).(pulumi.StringPtrOutput)
}

// Specifies the name of the identity provider to be registered.
// The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
// The name is unique, it is recommended to include domain name information.
// Changing this creates a new resource.
func (o ProviderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the protocol of the identity provider.
// Valid values are *saml* and *oidc*.
// Changing this creates a new resource.
func (o ProviderOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The single sign-on type of the identity provider.
func (o ProviderOutput) SsoType() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.SsoType }).(pulumi.StringOutput)
}

// Enabled status for the identity provider. Defaults to true.
func (o ProviderOutput) Status() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.BoolPtrOutput { return v.Status }).(pulumi.BoolPtrOutput)
}

type ProviderArrayOutput struct{ *pulumi.OutputState }

func (ProviderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Provider)(nil)).Elem()
}

func (o ProviderArrayOutput) ToProviderArrayOutput() ProviderArrayOutput {
	return o
}

func (o ProviderArrayOutput) ToProviderArrayOutputWithContext(ctx context.Context) ProviderArrayOutput {
	return o
}

func (o ProviderArrayOutput) Index(i pulumi.IntInput) ProviderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Provider {
		return vs[0].([]*Provider)[vs[1].(int)]
	}).(ProviderOutput)
}

type ProviderMapOutput struct{ *pulumi.OutputState }

func (ProviderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Provider)(nil)).Elem()
}

func (o ProviderMapOutput) ToProviderMapOutput() ProviderMapOutput {
	return o
}

func (o ProviderMapOutput) ToProviderMapOutputWithContext(ctx context.Context) ProviderMapOutput {
	return o
}

func (o ProviderMapOutput) MapIndex(k pulumi.StringInput) ProviderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Provider {
		return vs[0].(map[string]*Provider)[vs[1].(string)]
	}).(ProviderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderArrayInput)(nil)).Elem(), ProviderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderMapInput)(nil)).Elem(), ProviderMap{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderArrayOutput{})
	pulumi.RegisterOutputType(ProviderMapOutput{})
}

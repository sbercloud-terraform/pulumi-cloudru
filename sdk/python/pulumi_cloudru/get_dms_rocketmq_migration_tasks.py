# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDmsRocketmqMigrationTasksResult',
    'AwaitableGetDmsRocketmqMigrationTasksResult',
    'get_dms_rocketmq_migration_tasks',
    'get_dms_rocketmq_migration_tasks_output',
]

@pulumi.output_type
class GetDmsRocketmqMigrationTasksResult:
    """
    A collection of values returned by getDmsRocketmqMigrationTasks.
    """
    def __init__(__self__, id=None, instance_id=None, name=None, region=None, task_id=None, tasks=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)
        if tasks and not isinstance(tasks, list):
            raise TypeError("Expected argument 'tasks' to be a list")
        pulumi.set(__self__, "tasks", tasks)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        Indicates the name of a metadata migration task.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "task_id")

    @_builtins.property
    @pulumi.getter
    def tasks(self) -> Sequence['outputs.GetDmsRocketmqMigrationTasksTaskResult']:
        """
        Indicates the list of metadata migration tasks.
        """
        return pulumi.get(self, "tasks")

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[_builtins.str]:
        """
        Indicates the metadata migration task type.
        """
        return pulumi.get(self, "type")


class AwaitableGetDmsRocketmqMigrationTasksResult(GetDmsRocketmqMigrationTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDmsRocketmqMigrationTasksResult(
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            region=self.region,
            task_id=self.task_id,
            tasks=self.tasks,
            type=self.type)


def get_dms_rocketmq_migration_tasks(instance_id: Optional[_builtins.str] = None,
                                     name: Optional[_builtins.str] = None,
                                     region: Optional[_builtins.str] = None,
                                     task_id: Optional[_builtins.str] = None,
                                     type: Optional[_builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDmsRocketmqMigrationTasksResult:
    """
    Use this data source to get the list of RocketMQ instance's migration tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = sbercloud.get_dms_rocketmq_migration_tasks(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the RocketMQ instance ID.
    :param _builtins.str name: Specifies the RocketMQ migration task name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str task_id: Specifies the RocketMQ migration task ID.
    :param _builtins.str type: Specifies the RocketMQ migration task type.
           Valid values are **rocketmq** and **rabbitToRocket**.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['taskId'] = task_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDmsRocketmqMigrationTasks:getDmsRocketmqMigrationTasks', __args__, opts=opts, typ=GetDmsRocketmqMigrationTasksResult).value

    return AwaitableGetDmsRocketmqMigrationTasksResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        task_id=pulumi.get(__ret__, 'task_id'),
        tasks=pulumi.get(__ret__, 'tasks'),
        type=pulumi.get(__ret__, 'type'))
def get_dms_rocketmq_migration_tasks_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            task_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDmsRocketmqMigrationTasksResult]:
    """
    Use this data source to get the list of RocketMQ instance's migration tasks.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    test = sbercloud.get_dms_rocketmq_migration_tasks(instance_id=instance_id)
    ```


    :param _builtins.str instance_id: Specifies the RocketMQ instance ID.
    :param _builtins.str name: Specifies the RocketMQ migration task name.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str task_id: Specifies the RocketMQ migration task ID.
    :param _builtins.str type: Specifies the RocketMQ migration task type.
           Valid values are **rocketmq** and **rabbitToRocket**.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['taskId'] = task_id
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDmsRocketmqMigrationTasks:getDmsRocketmqMigrationTasks', __args__, opts=opts, typ=GetDmsRocketmqMigrationTasksResult)
    return __ret__.apply(lambda __response__: GetDmsRocketmqMigrationTasksResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        task_id=pulumi.get(__response__, 'task_id'),
        tasks=pulumi.get(__response__, 'tasks'),
        type=pulumi.get(__response__, 'type')))

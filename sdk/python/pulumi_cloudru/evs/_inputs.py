# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'VolumeAttachmentArgs',
    'VolumeAttachmentArgsDict',
    'VolumeIopsAttributeArgs',
    'VolumeIopsAttributeArgsDict',
    'VolumeLinkArgs',
    'VolumeLinkArgsDict',
    'VolumeThroughputAttributeArgs',
    'VolumeThroughputAttributeArgsDict',
]

MYPY = False

if not MYPY:
    class VolumeAttachmentArgsDict(TypedDict):
        attached_at: NotRequired[pulumi.Input[_builtins.str]]
        attached_volume_id: NotRequired[pulumi.Input[_builtins.str]]
        device: NotRequired[pulumi.Input[_builtins.str]]
        host_name: NotRequired[pulumi.Input[_builtins.str]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies a resource ID in UUID format.
        """
        instance_id: NotRequired[pulumi.Input[_builtins.str]]
        volume_id: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    VolumeAttachmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeAttachmentArgs:
    def __init__(__self__, *,
                 attached_at: Optional[pulumi.Input[_builtins.str]] = None,
                 attached_volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 device: Optional[pulumi.Input[_builtins.str]] = None,
                 host_name: Optional[pulumi.Input[_builtins.str]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies a resource ID in UUID format.
        """
        if attached_at is not None:
            pulumi.set(__self__, "attached_at", attached_at)
        if attached_volume_id is not None:
            pulumi.set(__self__, "attached_volume_id", attached_volume_id)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if host_name is not None:
            pulumi.set(__self__, "host_name", host_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="attachedAt")
    def attached_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "attached_at")

    @attached_at.setter
    def attached_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attached_at", value)

    @_builtins.property
    @pulumi.getter(name="attachedVolumeId")
    def attached_volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "attached_volume_id")

    @attached_volume_id.setter
    def attached_volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "attached_volume_id", value)

    @_builtins.property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device", value)

    @_builtins.property
    @pulumi.getter(name="hostName")
    def host_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "host_name")

    @host_name.setter
    def host_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "host_name", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a resource ID in UUID format.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


if not MYPY:
    class VolumeIopsAttributeArgsDict(TypedDict):
        frozened: NotRequired[pulumi.Input[_builtins.bool]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies a resource ID in UUID format.
        """
        total_val: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    VolumeIopsAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeIopsAttributeArgs:
    def __init__(__self__, *,
                 frozened: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 total_val: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies a resource ID in UUID format.
        """
        if frozened is not None:
            pulumi.set(__self__, "frozened", frozened)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if total_val is not None:
            pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "frozened")

    @frozened.setter
    def frozened(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "frozened", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a resource ID in UUID format.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "total_val")

    @total_val.setter
    def total_val(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "total_val", value)


if not MYPY:
    class VolumeLinkArgsDict(TypedDict):
        href: NotRequired[pulumi.Input[_builtins.str]]
        rel: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    VolumeLinkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeLinkArgs:
    def __init__(__self__, *,
                 href: Optional[pulumi.Input[_builtins.str]] = None,
                 rel: Optional[pulumi.Input[_builtins.str]] = None):
        if href is not None:
            pulumi.set(__self__, "href", href)
        if rel is not None:
            pulumi.set(__self__, "rel", rel)

    @_builtins.property
    @pulumi.getter
    def href(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "href")

    @href.setter
    def href(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "href", value)

    @_builtins.property
    @pulumi.getter
    def rel(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "rel")

    @rel.setter
    def rel(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "rel", value)


if not MYPY:
    class VolumeThroughputAttributeArgsDict(TypedDict):
        frozened: NotRequired[pulumi.Input[_builtins.bool]]
        id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Specifies a resource ID in UUID format.
        """
        total_val: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    VolumeThroughputAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeThroughputAttributeArgs:
    def __init__(__self__, *,
                 frozened: Optional[pulumi.Input[_builtins.bool]] = None,
                 id: Optional[pulumi.Input[_builtins.str]] = None,
                 total_val: Optional[pulumi.Input[_builtins.int]] = None):
        """
        :param pulumi.Input[_builtins.str] id: Specifies a resource ID in UUID format.
        """
        if frozened is not None:
            pulumi.set(__self__, "frozened", frozened)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if total_val is not None:
            pulumi.set(__self__, "total_val", total_val)

    @_builtins.property
    @pulumi.getter
    def frozened(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "frozened")

    @frozened.setter
    def frozened(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "frozened", value)

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Specifies a resource ID in UUID format.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "id", value)

    @_builtins.property
    @pulumi.getter(name="totalVal")
    def total_val(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "total_val")

    @total_val.setter
    def total_val(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "total_val", value)



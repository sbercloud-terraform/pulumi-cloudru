// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type FileSystem struct {
	pulumi.CustomResourceState

	AccessLevel         pulumi.StringOutput             `pulumi:"accessLevel"`
	AccessRuleStatus    pulumi.StringOutput             `pulumi:"accessRuleStatus"`
	AccessRules         FileSystemAccessRuleArrayOutput `pulumi:"accessRules"`
	AccessTo            pulumi.StringPtrOutput          `pulumi:"accessTo"`
	AccessType          pulumi.StringOutput             `pulumi:"accessType"`
	AvailabilityZone    pulumi.StringOutput             `pulumi:"availabilityZone"`
	Description         pulumi.StringOutput             `pulumi:"description"`
	EnterpriseProjectId pulumi.StringOutput             `pulumi:"enterpriseProjectId"`
	ExportLocation      pulumi.StringOutput             `pulumi:"exportLocation"`
	IsPublic            pulumi.BoolPtrOutput            `pulumi:"isPublic"`
	Metadata            pulumi.StringMapOutput          `pulumi:"metadata"`
	Name                pulumi.StringOutput             `pulumi:"name"`
	Region              pulumi.StringOutput             `pulumi:"region"`
	ShareAccessId       pulumi.StringOutput             `pulumi:"shareAccessId"`
	ShareProto          pulumi.StringPtrOutput          `pulumi:"shareProto"`
	Size                pulumi.IntOutput                `pulumi:"size"`
	Status              pulumi.StringOutput             `pulumi:"status"`
	Tags                pulumi.StringMapOutput          `pulumi:"tags"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileSystem
	err := ctx.RegisterResource("cloudru:Sfs/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("cloudru:Sfs/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	AccessLevel         *string                `pulumi:"accessLevel"`
	AccessRuleStatus    *string                `pulumi:"accessRuleStatus"`
	AccessRules         []FileSystemAccessRule `pulumi:"accessRules"`
	AccessTo            *string                `pulumi:"accessTo"`
	AccessType          *string                `pulumi:"accessType"`
	AvailabilityZone    *string                `pulumi:"availabilityZone"`
	Description         *string                `pulumi:"description"`
	EnterpriseProjectId *string                `pulumi:"enterpriseProjectId"`
	ExportLocation      *string                `pulumi:"exportLocation"`
	IsPublic            *bool                  `pulumi:"isPublic"`
	Metadata            map[string]string      `pulumi:"metadata"`
	Name                *string                `pulumi:"name"`
	Region              *string                `pulumi:"region"`
	ShareAccessId       *string                `pulumi:"shareAccessId"`
	ShareProto          *string                `pulumi:"shareProto"`
	Size                *int                   `pulumi:"size"`
	Status              *string                `pulumi:"status"`
	Tags                map[string]string      `pulumi:"tags"`
}

type FileSystemState struct {
	AccessLevel         pulumi.StringPtrInput
	AccessRuleStatus    pulumi.StringPtrInput
	AccessRules         FileSystemAccessRuleArrayInput
	AccessTo            pulumi.StringPtrInput
	AccessType          pulumi.StringPtrInput
	AvailabilityZone    pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ExportLocation      pulumi.StringPtrInput
	IsPublic            pulumi.BoolPtrInput
	Metadata            pulumi.StringMapInput
	Name                pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	ShareAccessId       pulumi.StringPtrInput
	ShareProto          pulumi.StringPtrInput
	Size                pulumi.IntPtrInput
	Status              pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	AccessLevel         *string           `pulumi:"accessLevel"`
	AccessTo            *string           `pulumi:"accessTo"`
	AccessType          *string           `pulumi:"accessType"`
	AvailabilityZone    *string           `pulumi:"availabilityZone"`
	Description         *string           `pulumi:"description"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	IsPublic            *bool             `pulumi:"isPublic"`
	Metadata            map[string]string `pulumi:"metadata"`
	Name                *string           `pulumi:"name"`
	Region              *string           `pulumi:"region"`
	ShareProto          *string           `pulumi:"shareProto"`
	Size                int               `pulumi:"size"`
	Tags                map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	AccessLevel         pulumi.StringPtrInput
	AccessTo            pulumi.StringPtrInput
	AccessType          pulumi.StringPtrInput
	AvailabilityZone    pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	IsPublic            pulumi.BoolPtrInput
	Metadata            pulumi.StringMapInput
	Name                pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	ShareProto          pulumi.StringPtrInput
	Size                pulumi.IntInput
	Tags                pulumi.StringMapInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

func (o FileSystemOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AccessLevel }).(pulumi.StringOutput)
}

func (o FileSystemOutput) AccessRuleStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AccessRuleStatus }).(pulumi.StringOutput)
}

func (o FileSystemOutput) AccessRules() FileSystemAccessRuleArrayOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemAccessRuleArrayOutput { return v.AccessRules }).(FileSystemAccessRuleArrayOutput)
}

func (o FileSystemOutput) AccessTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.AccessTo }).(pulumi.StringPtrOutput)
}

func (o FileSystemOutput) AccessType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AccessType }).(pulumi.StringOutput)
}

func (o FileSystemOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o FileSystemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o FileSystemOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o FileSystemOutput) ExportLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ExportLocation }).(pulumi.StringOutput)
}

func (o FileSystemOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.BoolPtrOutput { return v.IsPublic }).(pulumi.BoolPtrOutput)
}

func (o FileSystemOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o FileSystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FileSystemOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o FileSystemOutput) ShareAccessId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ShareAccessId }).(pulumi.StringOutput)
}

func (o FileSystemOutput) ShareProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.ShareProto }).(pulumi.StringPtrOutput)
}

func (o FileSystemOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o FileSystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o FileSystemOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Using this function to top function within SberCloud.
//
// ## Example Usage
//
// ### Topping function
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			functionUrn := cfg.RequireObject("functionUrn")
//			_, err := sbercloud.NewFgsFunctionTopping(ctx, "test", &sbercloud.FgsFunctionToppingArgs{
//				FunctionUrn: pulumi.Any(functionUrn),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FgsFunctionTopping struct {
	pulumi.CustomResourceState

	// Specifies the URN of the function to be topped.\
	// Changing this parameter will create a new resource.
	FunctionUrn pulumi.StringOutput `pulumi:"functionUrn"`
	// Specifies the region where the function is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewFgsFunctionTopping registers a new resource with the given unique name, arguments, and options.
func NewFgsFunctionTopping(ctx *pulumi.Context,
	name string, args *FgsFunctionToppingArgs, opts ...pulumi.ResourceOption) (*FgsFunctionTopping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionUrn == nil {
		return nil, errors.New("invalid value for required argument 'FunctionUrn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FgsFunctionTopping
	err := ctx.RegisterResource("sbercloud:index/fgsFunctionTopping:FgsFunctionTopping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFgsFunctionTopping gets an existing FgsFunctionTopping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFgsFunctionTopping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FgsFunctionToppingState, opts ...pulumi.ResourceOption) (*FgsFunctionTopping, error) {
	var resource FgsFunctionTopping
	err := ctx.ReadResource("sbercloud:index/fgsFunctionTopping:FgsFunctionTopping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FgsFunctionTopping resources.
type fgsFunctionToppingState struct {
	// Specifies the URN of the function to be topped.\
	// Changing this parameter will create a new resource.
	FunctionUrn *string `pulumi:"functionUrn"`
	// Specifies the region where the function is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

type FgsFunctionToppingState struct {
	// Specifies the URN of the function to be topped.\
	// Changing this parameter will create a new resource.
	FunctionUrn pulumi.StringPtrInput
	// Specifies the region where the function is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (FgsFunctionToppingState) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionToppingState)(nil)).Elem()
}

type fgsFunctionToppingArgs struct {
	// Specifies the URN of the function to be topped.\
	// Changing this parameter will create a new resource.
	FunctionUrn string `pulumi:"functionUrn"`
	// Specifies the region where the function is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a FgsFunctionTopping resource.
type FgsFunctionToppingArgs struct {
	// Specifies the URN of the function to be topped.\
	// Changing this parameter will create a new resource.
	FunctionUrn pulumi.StringInput
	// Specifies the region where the function is located.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
}

func (FgsFunctionToppingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionToppingArgs)(nil)).Elem()
}

type FgsFunctionToppingInput interface {
	pulumi.Input

	ToFgsFunctionToppingOutput() FgsFunctionToppingOutput
	ToFgsFunctionToppingOutputWithContext(ctx context.Context) FgsFunctionToppingOutput
}

func (*FgsFunctionTopping) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunctionTopping)(nil)).Elem()
}

func (i *FgsFunctionTopping) ToFgsFunctionToppingOutput() FgsFunctionToppingOutput {
	return i.ToFgsFunctionToppingOutputWithContext(context.Background())
}

func (i *FgsFunctionTopping) ToFgsFunctionToppingOutputWithContext(ctx context.Context) FgsFunctionToppingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionToppingOutput)
}

// FgsFunctionToppingArrayInput is an input type that accepts FgsFunctionToppingArray and FgsFunctionToppingArrayOutput values.
// You can construct a concrete instance of `FgsFunctionToppingArrayInput` via:
//
//	FgsFunctionToppingArray{ FgsFunctionToppingArgs{...} }
type FgsFunctionToppingArrayInput interface {
	pulumi.Input

	ToFgsFunctionToppingArrayOutput() FgsFunctionToppingArrayOutput
	ToFgsFunctionToppingArrayOutputWithContext(context.Context) FgsFunctionToppingArrayOutput
}

type FgsFunctionToppingArray []FgsFunctionToppingInput

func (FgsFunctionToppingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunctionTopping)(nil)).Elem()
}

func (i FgsFunctionToppingArray) ToFgsFunctionToppingArrayOutput() FgsFunctionToppingArrayOutput {
	return i.ToFgsFunctionToppingArrayOutputWithContext(context.Background())
}

func (i FgsFunctionToppingArray) ToFgsFunctionToppingArrayOutputWithContext(ctx context.Context) FgsFunctionToppingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionToppingArrayOutput)
}

// FgsFunctionToppingMapInput is an input type that accepts FgsFunctionToppingMap and FgsFunctionToppingMapOutput values.
// You can construct a concrete instance of `FgsFunctionToppingMapInput` via:
//
//	FgsFunctionToppingMap{ "key": FgsFunctionToppingArgs{...} }
type FgsFunctionToppingMapInput interface {
	pulumi.Input

	ToFgsFunctionToppingMapOutput() FgsFunctionToppingMapOutput
	ToFgsFunctionToppingMapOutputWithContext(context.Context) FgsFunctionToppingMapOutput
}

type FgsFunctionToppingMap map[string]FgsFunctionToppingInput

func (FgsFunctionToppingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunctionTopping)(nil)).Elem()
}

func (i FgsFunctionToppingMap) ToFgsFunctionToppingMapOutput() FgsFunctionToppingMapOutput {
	return i.ToFgsFunctionToppingMapOutputWithContext(context.Background())
}

func (i FgsFunctionToppingMap) ToFgsFunctionToppingMapOutputWithContext(ctx context.Context) FgsFunctionToppingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionToppingMapOutput)
}

type FgsFunctionToppingOutput struct{ *pulumi.OutputState }

func (FgsFunctionToppingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunctionTopping)(nil)).Elem()
}

func (o FgsFunctionToppingOutput) ToFgsFunctionToppingOutput() FgsFunctionToppingOutput {
	return o
}

func (o FgsFunctionToppingOutput) ToFgsFunctionToppingOutputWithContext(ctx context.Context) FgsFunctionToppingOutput {
	return o
}

// Specifies the URN of the function to be topped.\
// Changing this parameter will create a new resource.
func (o FgsFunctionToppingOutput) FunctionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTopping) pulumi.StringOutput { return v.FunctionUrn }).(pulumi.StringOutput)
}

// Specifies the region where the function is located.\
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o FgsFunctionToppingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTopping) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type FgsFunctionToppingArrayOutput struct{ *pulumi.OutputState }

func (FgsFunctionToppingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunctionTopping)(nil)).Elem()
}

func (o FgsFunctionToppingArrayOutput) ToFgsFunctionToppingArrayOutput() FgsFunctionToppingArrayOutput {
	return o
}

func (o FgsFunctionToppingArrayOutput) ToFgsFunctionToppingArrayOutputWithContext(ctx context.Context) FgsFunctionToppingArrayOutput {
	return o
}

func (o FgsFunctionToppingArrayOutput) Index(i pulumi.IntInput) FgsFunctionToppingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FgsFunctionTopping {
		return vs[0].([]*FgsFunctionTopping)[vs[1].(int)]
	}).(FgsFunctionToppingOutput)
}

type FgsFunctionToppingMapOutput struct{ *pulumi.OutputState }

func (FgsFunctionToppingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunctionTopping)(nil)).Elem()
}

func (o FgsFunctionToppingMapOutput) ToFgsFunctionToppingMapOutput() FgsFunctionToppingMapOutput {
	return o
}

func (o FgsFunctionToppingMapOutput) ToFgsFunctionToppingMapOutputWithContext(ctx context.Context) FgsFunctionToppingMapOutput {
	return o
}

func (o FgsFunctionToppingMapOutput) MapIndex(k pulumi.StringInput) FgsFunctionToppingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FgsFunctionTopping {
		return vs[0].(map[string]*FgsFunctionTopping)[vs[1].(string)]
	}).(FgsFunctionToppingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionToppingInput)(nil)).Elem(), &FgsFunctionTopping{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionToppingArrayInput)(nil)).Elem(), FgsFunctionToppingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionToppingMapInput)(nil)).Elem(), FgsFunctionToppingMap{})
	pulumi.RegisterOutputType(FgsFunctionToppingOutput{})
	pulumi.RegisterOutputType(FgsFunctionToppingArrayOutput{})
	pulumi.RegisterOutputType(FgsFunctionToppingMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a **Custom Policy** resource within SberCloud IAM service.
 *
 * ->**Note** You _must_ have admin privileges in your SberCloud cloud to use this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const role1 = new sbercloud.iam.Role("role1", {
 *     name: "test",
 *     description: "created by terraform",
 *     type: "AX",
 *     policy: `{
 *   "Version": "1.1",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "obs:bucket:GetBucketAcl"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": [
 *         "obs:*:*:bucket:*"
 *       ],
 *       "Condition": {
 *         "StringStartWith": {
 *           "g:ProjectName": [
 *             "ru-moscow-1"
 *           ]
 *         }
 *       }
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Roles can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Iam/role:Role role1 89c60255-9bd6-460c-822a-e2b959ede9d2
 * ```
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Iam/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * Description of the custom policy.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Name of the custom policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Document of the custom policy in JSON format.
     */
    declare public readonly policy: pulumi.Output<string>;
    /**
     * The number of references.
     */
    declare public /*out*/ readonly references: pulumi.Output<number>;
    /**
     * Display mode. Valid options are _AX_: Account level and _XA_: Project level.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["references"] = state?.references;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.policy === undefined && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["type"] = args?.type;
            resourceInputs["references"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * Description of the custom policy.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the custom policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Document of the custom policy in JSON format.
     */
    policy?: pulumi.Input<string>;
    /**
     * The number of references.
     */
    references?: pulumi.Input<number>;
    /**
     * Display mode. Valid options are _AX_: Account level and _XA_: Project level.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * Description of the custom policy.
     */
    description: pulumi.Input<string>;
    /**
     * Name of the custom policy.
     */
    name?: pulumi.Input<string>;
    /**
     * Document of the custom policy in JSON format.
     */
    policy: pulumi.Input<string>;
    /**
     * Display mode. Valid options are _AX_: Account level and _XA_: Project level.
     */
    type: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Stream extends pulumi.CustomResource {
    /**
     * Get an existing Stream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamState, opts?: pulumi.CustomResourceOptions): Stream {
        return new Stream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Lts/stream:Stream';

    /**
     * Returns true if the given object is an instance of Stream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stream.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly filterCount: pulumi.Output<number>;
    declare public readonly groupId: pulumi.Output<string>;
    /**
     * Whether to favorite the log stream.
     */
    declare public readonly isFavorite: pulumi.Output<boolean | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly streamName: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly ttlInDays: pulumi.Output<number>;

    /**
     * Create a Stream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamArgs | StreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["filterCount"] = state?.filterCount;
            resourceInputs["groupId"] = state?.groupId;
            resourceInputs["isFavorite"] = state?.isFavorite;
            resourceInputs["region"] = state?.region;
            resourceInputs["streamName"] = state?.streamName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["ttlInDays"] = state?.ttlInDays;
        } else {
            const args = argsOrState as StreamArgs | undefined;
            if (args?.groupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'groupId'");
            }
            if (args?.streamName === undefined && !opts.urn) {
                throw new Error("Missing required property 'streamName'");
            }
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["groupId"] = args?.groupId;
            resourceInputs["isFavorite"] = args?.isFavorite;
            resourceInputs["region"] = args?.region;
            resourceInputs["streamName"] = args?.streamName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["ttlInDays"] = args?.ttlInDays;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["filterCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Stream resources.
 */
export interface StreamState {
    createdAt?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    filterCount?: pulumi.Input<number>;
    groupId?: pulumi.Input<string>;
    /**
     * Whether to favorite the log stream.
     */
    isFavorite?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    streamName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ttlInDays?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Stream resource.
 */
export interface StreamArgs {
    enterpriseProjectId?: pulumi.Input<string>;
    groupId: pulumi.Input<string>;
    /**
     * Whether to favorite the log stream.
     */
    isFavorite?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    streamName: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ttlInDays?: pulumi.Input<number>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a CCE cluster resource.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const myvpc = new sbercloud.vpc.Vpc("myvpc", {
 *     name: "vpc",
 *     cidr: "192.168.0.0/16",
 * });
 * const mysubnet = new sbercloud.vpc.Subnet("mysubnet", {
 *     name: "subnet",
 *     cidr: "192.168.0.0/16",
 *     gatewayIp: "192.168.0.1",
 *     primaryDns: "100.125.13.59",
 *     secondaryDns: "100.125.65.14",
 *     vpcId: myvpc.id,
 * });
 * const cluster = new sbercloud.cce.Cluster("cluster", {
 *     name: "cluster",
 *     flavorId: "cce.s1.small",
 *     vpcId: myvpc.id,
 *     subnetId: mysubnet.id,
 *     containerNetworkType: "overlay_l2",
 * });
 * ```
 *
 * ### Cluster With EIP
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const myvpc = new sbercloud.vpc.Vpc("myvpc", {
 *     name: "vpc",
 *     cidr: "192.168.0.0/16",
 * });
 * const mysubnet = new sbercloud.vpc.Subnet("mysubnet", {
 *     name: "subnet",
 *     cidr: "192.168.0.0/16",
 *     gatewayIp: "192.168.0.1",
 *     primaryDns: "100.125.13.59",
 *     secondaryDns: "100.125.65.14",
 *     vpcId: myvpc.id,
 * });
 * const myeip = new sbercloud.vpc.Eip("myeip", {
 *     publicip: {
 *         type: "5_bgp",
 *     },
 *     bandwidth: {
 *         name: "test",
 *         size: 8,
 *         shareType: "PER",
 *         chargeMode: "traffic",
 *     },
 * });
 * const cluster = new sbercloud.cce.Cluster("cluster", {
 *     name: "cluster",
 *     clusterType: "VirtualMachine",
 *     flavorId: "cce.s1.small",
 *     vpcId: myvpc.id,
 *     subnetId: mysubnet.id,
 *     containerNetworkType: "overlay_l2",
 *     authenticationMode: "rbac",
 *     eip: myeip.address,
 * });
 * ```
 *
 * ### CCE HA Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const cluster = new sbercloud.cce.Cluster("cluster", {
 *     name: "cluster",
 *     flavorId: "cce.s2.small",
 *     vpcId: vpcId,
 *     subnetId: subnetId,
 *     containerNetworkType: "overlay_l2",
 *     masters: [
 *         {
 *             availabilityZone: "cn-north-4a",
 *         },
 *         {
 *             availabilityZone: "cn-north-4b",
 *         },
 *         {
 *             availabilityZone: "cn-north-4c",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Cluster can be imported using the cluster ID, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Cce/cluster:Cluster  sbercloud_cce_cluster.cluster_1 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason. The missing attributes include:
 *
 * `delete_efs`, `delete_eni`, `delete_evs`, `delete_net`, `delete_obs`, `delete_sfs` and `delete_all`. It is generally
 *
 * recommended running `pulumi preview` after importing an CCE cluster. You can then decide if changes should be applied to
 *
 * the cluster, or the resource definition should be updated to align with the cluster. Also you can ignore changes as
 *
 * below.
 *
 * resource "sbercloud_cce_cluster" "cluster_1" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       delete_efs, delete_obs,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cce/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * Specifies the display name of a cluster. The value of `alias` cannot be the same as the `name`
     * and display names of other clusters.
     */
    declare public readonly alias: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    declare public readonly annotations: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the CA root certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly authenticatingProxyCa: pulumi.Output<string | undefined>;
    /**
     * Specifies the Client certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly authenticatingProxyCert: pulumi.Output<string | undefined>;
    /**
     * Specifies the private key of the client certificate
     * provided in the **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly authenticatingProxyPrivateKey: pulumi.Output<string | undefined>;
    /**
     * Specifies the authentication mode of the cluster, possible values
     * are **rbac** and **authenticating_proxy**. Defaults to **rbac**.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly authenticationMode: pulumi.Output<string | undefined>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and **false**.
     */
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * @deprecated use chargingMode instead
     */
    declare public readonly billingMode: pulumi.Output<number>;
    /**
     * The category of the cluster. The value can be **CCE** and **Turbo**.
     */
    declare public /*out*/ readonly category: pulumi.Output<string>;
    /**
     * The certificate clusters. Structure is documented below.
     */
    declare public /*out*/ readonly certificateClusters: pulumi.Output<outputs.Cce.ClusterCertificateCluster[]>;
    /**
     * The certificate users. Structure is documented below.
     */
    declare public /*out*/ readonly certificateUsers: pulumi.Output<outputs.Cce.ClusterCertificateUser[]>;
    /**
     * Specifies the charging mode of the CCE cluster.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly chargingMode: pulumi.Output<string>;
    /**
     * Specifies the cluster Type, possible values are **VirtualMachine** and
     * **ARM64**. Defaults to **VirtualMachine**. Changing this parameter will create a new cluster resource.
     */
    declare public readonly clusterType: pulumi.Output<string | undefined>;
    /**
     * Specifies the cluster version, defaults to the latest supported
     * version. Changing this parameter will create a new cluster resource.
     */
    declare public readonly clusterVersion: pulumi.Output<string>;
    /**
     * Specifies the kubernetes component configurations.
     * The object structure is documented below.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly componentConfigurations: pulumi.Output<outputs.Cce.ClusterComponentConfiguration[] | undefined>;
    /**
     * Specifies the container network segments.
     * In clusters of v1.21 and later, when the `containerNetworkType` is **vpc-router**, you can add multiple container
     * segments, separated with comma (,). In other situations, only the first segment takes effect.
     */
    declare public readonly containerNetworkCidr: pulumi.Output<string>;
    /**
     * Specifies the container network type.
     * Changing this parameter will create a new cluster resource. Possible values:
     * + **overlay_l2**: An overlayL2 network built for containers by using Open vSwitch(OVS).
     * + **vpc-router**: An vpc-router network built for containers by using ipvlan and custom VPC routes.
     * + **eni**: A Yangtse network built for CCE Turbo cluster. The container network deeply integrates the native ENI
     * capability of VPC, uses the VPC CIDR block to allocate container addresses, and supports direct connections between
     * ELB and containers to provide high performance.
     */
    declare public readonly containerNetworkType: pulumi.Output<string>;
    /**
     * Specifies the custom san to add to certificate (array of string).
     */
    declare public readonly customSans: pulumi.Output<string[]>;
    /**
     * Specified whether to delete all associated storage resources when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    declare public readonly deleteAll: pulumi.Output<string | undefined>;
    /**
     * Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    declare public readonly deleteEfs: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    declare public readonly deleteEni: pulumi.Output<string | undefined>;
    /**
     * Specified whether to delete associated EVS disks when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    declare public readonly deleteEvs: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    declare public readonly deleteNet: pulumi.Output<string | undefined>;
    /**
     * Specified whether to delete associated OBS buckets when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    declare public readonly deleteObs: pulumi.Output<string | undefined>;
    /**
     * Specified whether to delete associated SFS file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    declare public readonly deleteSfs: pulumi.Output<string | undefined>;
    /**
     * Specifies the cluster description.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Specifies the EIP address of the cluster.
     */
    declare public readonly eip: pulumi.Output<string | undefined>;
    declare public readonly enableDistributeManagement: pulumi.Output<boolean>;
    declare public readonly encryptionConfig: pulumi.Output<outputs.Cce.ClusterEncryptionConfig>;
    /**
     * The ENI network segment. This value is valid when only one eniSubnetId is specified.
     */
    declare public readonly eniSubnetCidr: pulumi.Output<string>;
    /**
     * Specifies the **IPv4 subnet ID** of the subnet where the ENI resides.
     * Specified when creating a CCE Turbo cluster. You can add multiple IPv4 subnet ID, separated with comma (,).
     * Only adding subnets is allowed, removing subnets is not allowed.
     */
    declare public readonly eniSubnetId: pulumi.Output<string>;
    /**
     * The enterprise project ID of the CCE cluster.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    declare public readonly extendParam: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the extended parameter.
     * The object structure is documented below.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly extendParams: pulumi.Output<outputs.Cce.ClusterExtendParam[] | undefined>;
    /**
     * Specifies the cluster specifications.
     * Possible values:
     * + **cce.s1.small**: small-scale single cluster (up to 50 nodes).
     * + **cce.s1.medium**: medium-scale single cluster (up to 200 nodes).
     * + **cce.s2.small**: small-scale HA cluster (up to 50 nodes).
     * + **cce.s2.medium**: medium-scale HA cluster (up to 200 nodes).
     * + **cce.s2.large**: large-scale HA cluster (up to 1000 nodes).
     * + **cce.s2.xlarge**: large-scale HA cluster (up to 2000 nodes).
     *
     * > Changing the number of control nodes or reducing cluster flavor is not supported.
     */
    declare public readonly flavorId: pulumi.Output<string>;
    /**
     * Specifies whether to hibernate the CCE cluster. Defaults to **false**. After a cluster is
     * hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
     * deleted.
     *
     * <a name="cceClusterMasters"></a>
     * The `masters` block supports:
     */
    declare public readonly hibernate: pulumi.Output<boolean | undefined>;
    /**
     * schema: Internal
     */
    declare public readonly highwaySubnetId: pulumi.Output<string>;
    /**
     * Specifies whether to enable IPv6 in the cluster.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly ipv6Enable: pulumi.Output<boolean>;
    /**
     * Raw Kubernetes config to be used by kubectl and other compatible tools.
     */
    declare public /*out*/ readonly kubeConfigRaw: pulumi.Output<string>;
    /**
     * Specifies the service forwarding mode.
     * Changing this parameter will create a new cluster resource. Two modes are available:
     *
     * + **iptables**: Traditional kube-proxy uses iptables rules to implement service load balancing. In this mode, too many
     * iptables rules will be generated when many services are deployed. In addition, non-incremental updates will cause a
     * latency and even obvious performance issues in the case of heavy service traffic.
     * + **ipvs**: Optimized kube-proxy mode with higher throughput and faster speed. This mode supports incremental updates
     * and can keep connections uninterrupted during service updates. It is suitable for large-sized clusters.
     */
    declare public readonly kubeProxyMode: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly ltsReclaimPolicy: pulumi.Output<string | undefined>;
    /**
     * Specifies the advanced configuration of master nodes.
     * The object structure is documented below.
     * This parameter and `multiAz` are alternative. Changing this parameter will create a new cluster resource.
     */
    declare public readonly masters: pulumi.Output<outputs.Cce.ClusterMaster[]>;
    /**
     * Specifies whether to enable multiple AZs for the cluster, only when using HA
     * flavors. Changing this parameter will create a new cluster resource. This parameter and `masters` are alternative.
     */
    declare public readonly multiAz: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the component name.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the charging period of the CCE cluster.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly period: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the CCE cluster.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the CCE cluster resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Specifies the default worker node security group ID of the cluster.
     * If left empty, the system will automatically create a default worker node security group for you.
     * The default worker node security group needs to allow access from certain ports to ensure normal communications.
     * If updated, the modified security group will only be applied to nodes newly created or accepted.
     * For existing nodes, you need to manually modify the security group rules for them.
     */
    declare public readonly securityGroupId: pulumi.Output<string>;
    /**
     * Specifies the service network segment.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly serviceNetworkCidr: pulumi.Output<string>;
    /**
     * Cluster status information.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Specifies the ID of the subnet used to create the node which should be
     * configured with a *DNS address*. Changing this parameter will create a new cluster resource.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    /**
     * Specifies whether to support Istio in the cluster.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly supportIstio: pulumi.Output<boolean>;
    /**
     * Specifies the tags of the CCE cluster, key/value pair format.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly timezone: pulumi.Output<string>;
    /**
     * Specifies the ID of the VPC used to create the node.
     * Changing this parameter will create a new cluster resource.
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["annotations"] = state?.annotations;
            resourceInputs["authenticatingProxyCa"] = state?.authenticatingProxyCa;
            resourceInputs["authenticatingProxyCert"] = state?.authenticatingProxyCert;
            resourceInputs["authenticatingProxyPrivateKey"] = state?.authenticatingProxyPrivateKey;
            resourceInputs["authenticationMode"] = state?.authenticationMode;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["billingMode"] = state?.billingMode;
            resourceInputs["category"] = state?.category;
            resourceInputs["certificateClusters"] = state?.certificateClusters;
            resourceInputs["certificateUsers"] = state?.certificateUsers;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["clusterType"] = state?.clusterType;
            resourceInputs["clusterVersion"] = state?.clusterVersion;
            resourceInputs["componentConfigurations"] = state?.componentConfigurations;
            resourceInputs["containerNetworkCidr"] = state?.containerNetworkCidr;
            resourceInputs["containerNetworkType"] = state?.containerNetworkType;
            resourceInputs["customSans"] = state?.customSans;
            resourceInputs["deleteAll"] = state?.deleteAll;
            resourceInputs["deleteEfs"] = state?.deleteEfs;
            resourceInputs["deleteEni"] = state?.deleteEni;
            resourceInputs["deleteEvs"] = state?.deleteEvs;
            resourceInputs["deleteNet"] = state?.deleteNet;
            resourceInputs["deleteObs"] = state?.deleteObs;
            resourceInputs["deleteSfs"] = state?.deleteSfs;
            resourceInputs["description"] = state?.description;
            resourceInputs["eip"] = state?.eip;
            resourceInputs["enableDistributeManagement"] = state?.enableDistributeManagement;
            resourceInputs["encryptionConfig"] = state?.encryptionConfig;
            resourceInputs["eniSubnetCidr"] = state?.eniSubnetCidr;
            resourceInputs["eniSubnetId"] = state?.eniSubnetId;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["extendParam"] = state?.extendParam;
            resourceInputs["extendParams"] = state?.extendParams;
            resourceInputs["flavorId"] = state?.flavorId;
            resourceInputs["hibernate"] = state?.hibernate;
            resourceInputs["highwaySubnetId"] = state?.highwaySubnetId;
            resourceInputs["ipv6Enable"] = state?.ipv6Enable;
            resourceInputs["kubeConfigRaw"] = state?.kubeConfigRaw;
            resourceInputs["kubeProxyMode"] = state?.kubeProxyMode;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["ltsReclaimPolicy"] = state?.ltsReclaimPolicy;
            resourceInputs["masters"] = state?.masters;
            resourceInputs["multiAz"] = state?.multiAz;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["serviceNetworkCidr"] = state?.serviceNetworkCidr;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["supportIstio"] = state?.supportIstio;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["timezone"] = state?.timezone;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.containerNetworkType === undefined && !opts.urn) {
                throw new Error("Missing required property 'containerNetworkType'");
            }
            if (args?.flavorId === undefined && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["alias"] = args?.alias;
            resourceInputs["annotations"] = args?.annotations;
            resourceInputs["authenticatingProxyCa"] = args?.authenticatingProxyCa;
            resourceInputs["authenticatingProxyCert"] = args?.authenticatingProxyCert;
            resourceInputs["authenticatingProxyPrivateKey"] = args?.authenticatingProxyPrivateKey;
            resourceInputs["authenticationMode"] = args?.authenticationMode;
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["billingMode"] = args?.billingMode;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["clusterType"] = args?.clusterType;
            resourceInputs["clusterVersion"] = args?.clusterVersion;
            resourceInputs["componentConfigurations"] = args?.componentConfigurations;
            resourceInputs["containerNetworkCidr"] = args?.containerNetworkCidr;
            resourceInputs["containerNetworkType"] = args?.containerNetworkType;
            resourceInputs["customSans"] = args?.customSans;
            resourceInputs["deleteAll"] = args?.deleteAll;
            resourceInputs["deleteEfs"] = args?.deleteEfs;
            resourceInputs["deleteEni"] = args?.deleteEni;
            resourceInputs["deleteEvs"] = args?.deleteEvs;
            resourceInputs["deleteNet"] = args?.deleteNet;
            resourceInputs["deleteObs"] = args?.deleteObs;
            resourceInputs["deleteSfs"] = args?.deleteSfs;
            resourceInputs["description"] = args?.description;
            resourceInputs["eip"] = args?.eip;
            resourceInputs["enableDistributeManagement"] = args?.enableDistributeManagement;
            resourceInputs["encryptionConfig"] = args?.encryptionConfig;
            resourceInputs["eniSubnetCidr"] = args?.eniSubnetCidr;
            resourceInputs["eniSubnetId"] = args?.eniSubnetId;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["extendParam"] = args?.extendParam;
            resourceInputs["extendParams"] = args?.extendParams;
            resourceInputs["flavorId"] = args?.flavorId;
            resourceInputs["hibernate"] = args?.hibernate;
            resourceInputs["highwaySubnetId"] = args?.highwaySubnetId;
            resourceInputs["ipv6Enable"] = args?.ipv6Enable;
            resourceInputs["kubeProxyMode"] = args?.kubeProxyMode;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["ltsReclaimPolicy"] = args?.ltsReclaimPolicy;
            resourceInputs["masters"] = args?.masters;
            resourceInputs["multiAz"] = args?.multiAz;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["serviceNetworkCidr"] = args?.serviceNetworkCidr;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["supportIstio"] = args?.supportIstio;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timezone"] = args?.timezone;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["category"] = undefined /*out*/;
            resourceInputs["certificateClusters"] = undefined /*out*/;
            resourceInputs["certificateUsers"] = undefined /*out*/;
            resourceInputs["kubeConfigRaw"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * Specifies the display name of a cluster. The value of `alias` cannot be the same as the `name`
     * and display names of other clusters.
     */
    alias?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the CA root certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyCa?: pulumi.Input<string>;
    /**
     * Specifies the Client certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyCert?: pulumi.Input<string>;
    /**
     * Specifies the private key of the client certificate
     * provided in the **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyPrivateKey?: pulumi.Input<string>;
    /**
     * Specifies the authentication mode of the cluster, possible values
     * are **rbac** and **authenticating_proxy**. Defaults to **rbac**.
     * Changing this parameter will create a new cluster resource.
     */
    authenticationMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and **false**.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    /**
     * The category of the cluster. The value can be **CCE** and **Turbo**.
     */
    category?: pulumi.Input<string>;
    /**
     * The certificate clusters. Structure is documented below.
     */
    certificateClusters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterCertificateCluster>[]>;
    /**
     * The certificate users. Structure is documented below.
     */
    certificateUsers?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterCertificateUser>[]>;
    /**
     * Specifies the charging mode of the CCE cluster.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the cluster Type, possible values are **VirtualMachine** and
     * **ARM64**. Defaults to **VirtualMachine**. Changing this parameter will create a new cluster resource.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Specifies the cluster version, defaults to the latest supported
     * version. Changing this parameter will create a new cluster resource.
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * Specifies the kubernetes component configurations.
     * The object structure is documented below.
     * Changing this parameter will create a new cluster resource.
     */
    componentConfigurations?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterComponentConfiguration>[]>;
    /**
     * Specifies the container network segments.
     * In clusters of v1.21 and later, when the `containerNetworkType` is **vpc-router**, you can add multiple container
     * segments, separated with comma (,). In other situations, only the first segment takes effect.
     */
    containerNetworkCidr?: pulumi.Input<string>;
    /**
     * Specifies the container network type.
     * Changing this parameter will create a new cluster resource. Possible values:
     * + **overlay_l2**: An overlayL2 network built for containers by using Open vSwitch(OVS).
     * + **vpc-router**: An vpc-router network built for containers by using ipvlan and custom VPC routes.
     * + **eni**: A Yangtse network built for CCE Turbo cluster. The container network deeply integrates the native ENI
     * capability of VPC, uses the VPC CIDR block to allocate container addresses, and supports direct connections between
     * ELB and containers to provide high performance.
     */
    containerNetworkType?: pulumi.Input<string>;
    /**
     * Specifies the custom san to add to certificate (array of string).
     */
    customSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specified whether to delete all associated storage resources when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteAll?: pulumi.Input<string>;
    /**
     * Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteEfs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteEni?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated EVS disks when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteEvs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteNet?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated OBS buckets when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteObs?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated SFS file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteSfs?: pulumi.Input<string>;
    /**
     * Specifies the cluster description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the EIP address of the cluster.
     */
    eip?: pulumi.Input<string>;
    enableDistributeManagement?: pulumi.Input<boolean>;
    encryptionConfig?: pulumi.Input<inputs.Cce.ClusterEncryptionConfig>;
    /**
     * The ENI network segment. This value is valid when only one eniSubnetId is specified.
     */
    eniSubnetCidr?: pulumi.Input<string>;
    /**
     * Specifies the **IPv4 subnet ID** of the subnet where the ENI resides.
     * Specified when creating a CCE Turbo cluster. You can add multiple IPv4 subnet ID, separated with comma (,).
     * Only adding subnets is allowed, removing subnets is not allowed.
     */
    eniSubnetId?: pulumi.Input<string>;
    /**
     * The enterprise project ID of the CCE cluster.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the extended parameter.
     * The object structure is documented below.
     * Changing this parameter will create a new cluster resource.
     */
    extendParams?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterExtendParam>[]>;
    /**
     * Specifies the cluster specifications.
     * Possible values:
     * + **cce.s1.small**: small-scale single cluster (up to 50 nodes).
     * + **cce.s1.medium**: medium-scale single cluster (up to 200 nodes).
     * + **cce.s2.small**: small-scale HA cluster (up to 50 nodes).
     * + **cce.s2.medium**: medium-scale HA cluster (up to 200 nodes).
     * + **cce.s2.large**: large-scale HA cluster (up to 1000 nodes).
     * + **cce.s2.xlarge**: large-scale HA cluster (up to 2000 nodes).
     *
     * > Changing the number of control nodes or reducing cluster flavor is not supported.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Specifies whether to hibernate the CCE cluster. Defaults to **false**. After a cluster is
     * hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
     * deleted.
     *
     * <a name="cceClusterMasters"></a>
     * The `masters` block supports:
     */
    hibernate?: pulumi.Input<boolean>;
    /**
     * schema: Internal
     */
    highwaySubnetId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable IPv6 in the cluster.
     * Changing this parameter will create a new cluster resource.
     */
    ipv6Enable?: pulumi.Input<boolean>;
    /**
     * Raw Kubernetes config to be used by kubectl and other compatible tools.
     */
    kubeConfigRaw?: pulumi.Input<string>;
    /**
     * Specifies the service forwarding mode.
     * Changing this parameter will create a new cluster resource. Two modes are available:
     *
     * + **iptables**: Traditional kube-proxy uses iptables rules to implement service load balancing. In this mode, too many
     * iptables rules will be generated when many services are deployed. In addition, non-incremental updates will cause a
     * latency and even obvious performance issues in the case of heavy service traffic.
     * + **ipvs**: Optimized kube-proxy mode with higher throughput and faster speed. This mode supports incremental updates
     * and can keep connections uninterrupted during service updates. It is suitable for large-sized clusters.
     */
    kubeProxyMode?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ltsReclaimPolicy?: pulumi.Input<string>;
    /**
     * Specifies the advanced configuration of master nodes.
     * The object structure is documented below.
     * This parameter and `multiAz` are alternative. Changing this parameter will create a new cluster resource.
     */
    masters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterMaster>[]>;
    /**
     * Specifies whether to enable multiple AZs for the cluster, only when using HA
     * flavors. Changing this parameter will create a new cluster resource. This parameter and `masters` are alternative.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * Specifies the component name.
     * Changing this parameter will create a new cluster resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the CCE cluster.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the CCE cluster.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CCE cluster resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the default worker node security group ID of the cluster.
     * If left empty, the system will automatically create a default worker node security group for you.
     * The default worker node security group needs to allow access from certain ports to ensure normal communications.
     * If updated, the modified security group will only be applied to nodes newly created or accepted.
     * For existing nodes, you need to manually modify the security group rules for them.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Specifies the service network segment.
     * Changing this parameter will create a new cluster resource.
     */
    serviceNetworkCidr?: pulumi.Input<string>;
    /**
     * Cluster status information.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the ID of the subnet used to create the node which should be
     * configured with a *DNS address*. Changing this parameter will create a new cluster resource.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies whether to support Istio in the cluster.
     * Changing this parameter will create a new cluster resource.
     */
    supportIstio?: pulumi.Input<boolean>;
    /**
     * Specifies the tags of the CCE cluster, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timezone?: pulumi.Input<string>;
    /**
     * Specifies the ID of the VPC used to create the node.
     * Changing this parameter will create a new cluster resource.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * Specifies the display name of a cluster. The value of `alias` cannot be the same as the `name`
     * and display names of other clusters.
     */
    alias?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the CA root certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyCa?: pulumi.Input<string>;
    /**
     * Specifies the Client certificate provided in the
     * **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyCert?: pulumi.Input<string>;
    /**
     * Specifies the private key of the client certificate
     * provided in the **authenticating_proxy** mode. The input value can be a Base64 encoded string or not.
     * Changing this parameter will create a new cluster resource.
     */
    authenticatingProxyPrivateKey?: pulumi.Input<string>;
    /**
     * Specifies the authentication mode of the cluster, possible values
     * are **rbac** and **authenticating_proxy**. Defaults to **rbac**.
     * Changing this parameter will create a new cluster resource.
     */
    authenticationMode?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled. Valid values are **true** and **false**.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * @deprecated use chargingMode instead
     */
    billingMode?: pulumi.Input<number>;
    /**
     * Specifies the charging mode of the CCE cluster.
     * Valid values are **prePaid** and **postPaid**, defaults to **postPaid**.
     * Changing this parameter will create a new cluster resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the cluster Type, possible values are **VirtualMachine** and
     * **ARM64**. Defaults to **VirtualMachine**. Changing this parameter will create a new cluster resource.
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Specifies the cluster version, defaults to the latest supported
     * version. Changing this parameter will create a new cluster resource.
     */
    clusterVersion?: pulumi.Input<string>;
    /**
     * Specifies the kubernetes component configurations.
     * The object structure is documented below.
     * Changing this parameter will create a new cluster resource.
     */
    componentConfigurations?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterComponentConfiguration>[]>;
    /**
     * Specifies the container network segments.
     * In clusters of v1.21 and later, when the `containerNetworkType` is **vpc-router**, you can add multiple container
     * segments, separated with comma (,). In other situations, only the first segment takes effect.
     */
    containerNetworkCidr?: pulumi.Input<string>;
    /**
     * Specifies the container network type.
     * Changing this parameter will create a new cluster resource. Possible values:
     * + **overlay_l2**: An overlayL2 network built for containers by using Open vSwitch(OVS).
     * + **vpc-router**: An vpc-router network built for containers by using ipvlan and custom VPC routes.
     * + **eni**: A Yangtse network built for CCE Turbo cluster. The container network deeply integrates the native ENI
     * capability of VPC, uses the VPC CIDR block to allocate container addresses, and supports direct connections between
     * ELB and containers to provide high performance.
     */
    containerNetworkType: pulumi.Input<string>;
    /**
     * Specifies the custom san to add to certificate (array of string).
     */
    customSans?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specified whether to delete all associated storage resources when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteAll?: pulumi.Input<string>;
    /**
     * Specified whether to unbind associated SFS Turbo file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteEfs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteEni?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated EVS disks when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteEvs?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    deleteNet?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated OBS buckets when deleting the CCE cluster.
     * valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteObs?: pulumi.Input<string>;
    /**
     * Specified whether to delete associated SFS file systems when deleting the CCE
     * cluster. valid values are **true**, **try** and **false**. Default is **false**.
     */
    deleteSfs?: pulumi.Input<string>;
    /**
     * Specifies the cluster description.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the EIP address of the cluster.
     */
    eip?: pulumi.Input<string>;
    enableDistributeManagement?: pulumi.Input<boolean>;
    encryptionConfig?: pulumi.Input<inputs.Cce.ClusterEncryptionConfig>;
    /**
     * The ENI network segment. This value is valid when only one eniSubnetId is specified.
     */
    eniSubnetCidr?: pulumi.Input<string>;
    /**
     * Specifies the **IPv4 subnet ID** of the subnet where the ENI resides.
     * Specified when creating a CCE Turbo cluster. You can add multiple IPv4 subnet ID, separated with comma (,).
     * Only adding subnets is allowed, removing subnets is not allowed.
     */
    eniSubnetId?: pulumi.Input<string>;
    /**
     * The enterprise project ID of the CCE cluster.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the extended parameter.
     * The object structure is documented below.
     * Changing this parameter will create a new cluster resource.
     */
    extendParams?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterExtendParam>[]>;
    /**
     * Specifies the cluster specifications.
     * Possible values:
     * + **cce.s1.small**: small-scale single cluster (up to 50 nodes).
     * + **cce.s1.medium**: medium-scale single cluster (up to 200 nodes).
     * + **cce.s2.small**: small-scale HA cluster (up to 50 nodes).
     * + **cce.s2.medium**: medium-scale HA cluster (up to 200 nodes).
     * + **cce.s2.large**: large-scale HA cluster (up to 1000 nodes).
     * + **cce.s2.xlarge**: large-scale HA cluster (up to 2000 nodes).
     *
     * > Changing the number of control nodes or reducing cluster flavor is not supported.
     */
    flavorId: pulumi.Input<string>;
    /**
     * Specifies whether to hibernate the CCE cluster. Defaults to **false**. After a cluster is
     * hibernated, resources such as workloads cannot be created or managed in the cluster, and the cluster cannot be
     * deleted.
     *
     * <a name="cceClusterMasters"></a>
     * The `masters` block supports:
     */
    hibernate?: pulumi.Input<boolean>;
    /**
     * schema: Internal
     */
    highwaySubnetId?: pulumi.Input<string>;
    /**
     * Specifies whether to enable IPv6 in the cluster.
     * Changing this parameter will create a new cluster resource.
     */
    ipv6Enable?: pulumi.Input<boolean>;
    /**
     * Specifies the service forwarding mode.
     * Changing this parameter will create a new cluster resource. Two modes are available:
     *
     * + **iptables**: Traditional kube-proxy uses iptables rules to implement service load balancing. In this mode, too many
     * iptables rules will be generated when many services are deployed. In addition, non-incremental updates will cause a
     * latency and even obvious performance issues in the case of heavy service traffic.
     * + **ipvs**: Optimized kube-proxy mode with higher throughput and faster speed. This mode supports incremental updates
     * and can keep connections uninterrupted during service updates. It is suitable for large-sized clusters.
     */
    kubeProxyMode?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    ltsReclaimPolicy?: pulumi.Input<string>;
    /**
     * Specifies the advanced configuration of master nodes.
     * The object structure is documented below.
     * This parameter and `multiAz` are alternative. Changing this parameter will create a new cluster resource.
     */
    masters?: pulumi.Input<pulumi.Input<inputs.Cce.ClusterMaster>[]>;
    /**
     * Specifies whether to enable multiple AZs for the cluster, only when using HA
     * flavors. Changing this parameter will create a new cluster resource. This parameter and `masters` are alternative.
     */
    multiAz?: pulumi.Input<boolean>;
    /**
     * Specifies the component name.
     * Changing this parameter will create a new cluster resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the CCE cluster.
     * If `periodUnit` is set to **month**, the value ranges from 1 to 9.
     * If `periodUnit` is set to **year**, the value ranges from 1 to 3.
     * This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the CCE cluster.
     * Valid values are **month** and **year**. This parameter is mandatory if `chargingMode` is set to **prePaid**.
     * Changing this parameter will create a new cluster resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the CCE cluster resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new cluster resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the default worker node security group ID of the cluster.
     * If left empty, the system will automatically create a default worker node security group for you.
     * The default worker node security group needs to allow access from certain ports to ensure normal communications.
     * If updated, the modified security group will only be applied to nodes newly created or accepted.
     * For existing nodes, you need to manually modify the security group rules for them.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Specifies the service network segment.
     * Changing this parameter will create a new cluster resource.
     */
    serviceNetworkCidr?: pulumi.Input<string>;
    /**
     * Specifies the ID of the subnet used to create the node which should be
     * configured with a *DNS address*. Changing this parameter will create a new cluster resource.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Specifies whether to support Istio in the cluster.
     * Changing this parameter will create a new cluster resource.
     */
    supportIstio?: pulumi.Input<boolean>;
    /**
     * Specifies the tags of the CCE cluster, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timezone?: pulumi.Input<string>;
    /**
     * Specifies the ID of the VPC used to create the node.
     * Changing this parameter will create a new cluster resource.
     */
    vpcId: pulumi.Input<string>;
}

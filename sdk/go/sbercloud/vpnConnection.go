// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a VPN connection resource within SberCloud.
//
// ## Example Usage
//
// ### Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			peerSubnet := cfg.RequireObject("peerSubnet")
//			gatewayId := cfg.RequireObject("gatewayId")
//			gatewayIp := cfg.RequireObject("gatewayIp")
//			customerGatewayId := cfg.RequireObject("customerGatewayId")
//			_, err := sbercloud.NewVpnConnection(ctx, "test", &sbercloud.VpnConnectionArgs{
//				Name:              pulumi.Any(name),
//				GatewayId:         pulumi.Any(gatewayId),
//				GatewayIp:         pulumi.Any(gatewayIp),
//				CustomerGatewayId: pulumi.Any(customerGatewayId),
//				PeerSubnets: pulumi.StringArray{
//					peerSubnet,
//				},
//				VpnType: pulumi.String("static"),
//				Psk:     pulumi.String("Test@123"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### VPN connection with policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			name := cfg.RequireObject("name")
//			peerSubnet := cfg.RequireObject("peerSubnet")
//			gatewayId := cfg.RequireObject("gatewayId")
//			gatewayIp := cfg.RequireObject("gatewayIp")
//			customerGatewayId := cfg.RequireObject("customerGatewayId")
//			_, err := sbercloud.NewVpnConnection(ctx, "test", &sbercloud.VpnConnectionArgs{
//				Name:              pulumi.Any(name),
//				GatewayId:         pulumi.Any(gatewayId),
//				GatewayIp:         pulumi.Any(gatewayIp),
//				CustomerGatewayId: pulumi.Any(customerGatewayId),
//				PeerSubnets: pulumi.StringArray{
//					peerSubnet,
//				},
//				VpnType: pulumi.String("static"),
//				Psk:     pulumi.String("Test@123"),
//				Ikepolicy: &sbercloud.VpnConnectionIkepolicyArgs{
//					AuthenticationAlgorithm: pulumi.String("sha2-256"),
//					AuthenticationMethod:    pulumi.String("pre-share"),
//					EncryptionAlgorithm:     pulumi.String("aes-128"),
//					IkeVersion:              pulumi.String("v2"),
//					LifetimeSeconds:         pulumi.Int(86400),
//					Pfs:                     pulumi.String("group14"),
//				},
//				Ipsecpolicy: &sbercloud.VpnConnectionIpsecpolicyArgs{
//					AuthenticationAlgorithm: pulumi.String("sha2-256"),
//					EncapsulationMode:       pulumi.String("tunnel"),
//					EncryptionAlgorithm:     pulumi.String("aes-128"),
//					LifetimeSeconds:         pulumi.Int(3600),
//					Pfs:                     pulumi.String("group14"),
//					TransformProtocol:       pulumi.String("esp"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The connection can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:index/vpnConnection:VpnConnection test <id>
// ```
type VpnConnection struct {
	pulumi.CustomResourceState

	// The create time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The customer gateway ID.
	CustomerGatewayId pulumi.StringOutput `pulumi:"customerGatewayId"`
	// Whether to enable NQA check. Defaults to **false**.
	EnableNqa pulumi.BoolOutput `pulumi:"enableNqa"`
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// The VPN gateway ID.
	//
	// Changing this parameter will create a new resource.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// The VPN gateway IP ID.
	//
	// Changing this parameter will create a new resource.
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// Specifies the mode of the VPN connection.
	// The valid values are **master** and **slave**, defaults to **master**.
	// This parameter is optional when you create a connection for a VPN gateway in **active-active** mode.
	// When you create a connection for a VPN gateway in **active-standby** mode, **master** indicates
	// the active connection, and **slave** indicates the standby connection.
	// In **active-active** mode, this field must be set to **master** for the connection established
	// using the active EIP or active private IP address of the VPN gateway, and must be set to **slave**
	// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
	//
	// Changing this parameter will create a new resource.
	//
	// <a name="Connection_CreateRequestIkePolicy"></a>
	// The `ikepolicy` block supports:
	HaRole pulumi.StringOutput `pulumi:"haRole"`
	// The IKE policy configurations.
	// The ikepolicy structure is documented below.
	Ikepolicy VpnConnectionIkepolicyOutput `pulumi:"ikepolicy"`
	// The IPsec policy configurations.
	// The ipsecpolicy structure is documented below.
	Ipsecpolicy VpnConnectionIpsecpolicyOutput `pulumi:"ipsecpolicy"`
	// The name of the VPN connection.
	Name pulumi.StringOutput `pulumi:"name"`
	// The CIDR list of customer subnets. This parameter must be empty
	// when the `attachmentType` of the VPN gateway is set to **er** and `vpnType` is set to **policy** or **bgp**.
	// This parameter is mandatory in other scenarios.
	PeerSubnets pulumi.StringArrayOutput `pulumi:"peerSubnets"`
	// The policy rules. Only works when vpnType is set to **policy**
	// The policyRules structure is documented below.
	PolicyRules VpnConnectionPolicyRuleArrayOutput `pulumi:"policyRules"`
	// The pre-shared key.
	Psk pulumi.StringOutput `pulumi:"psk"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The status of the VPN connection.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the tags of the VPN connection.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The local tunnel address.
	TunnelLocalAddress pulumi.StringOutput `pulumi:"tunnelLocalAddress"`
	// The peer tunnel address.
	TunnelPeerAddress pulumi.StringOutput `pulumi:"tunnelPeerAddress"`
	// The update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The connection type. The value can be **policy**, **static** or **bgp**.
	//
	// Changing this parameter will create a new resource.
	VpnType pulumi.StringOutput `pulumi:"vpnType"`
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'CustomerGatewayId'")
	}
	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.GatewayIp == nil {
		return nil, errors.New("invalid value for required argument 'GatewayIp'")
	}
	if args.Psk == nil {
		return nil, errors.New("invalid value for required argument 'Psk'")
	}
	if args.VpnType == nil {
		return nil, errors.New("invalid value for required argument 'VpnType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnConnection
	err := ctx.RegisterResource("sbercloud:index/vpnConnection:VpnConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionState, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	var resource VpnConnection
	err := ctx.ReadResource("sbercloud:index/vpnConnection:VpnConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnection resources.
type vpnConnectionState struct {
	// The create time.
	CreatedAt *string `pulumi:"createdAt"`
	// The customer gateway ID.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// Whether to enable NQA check. Defaults to **false**.
	EnableNqa *bool `pulumi:"enableNqa"`
	// The enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The VPN gateway ID.
	//
	// Changing this parameter will create a new resource.
	GatewayId *string `pulumi:"gatewayId"`
	// The VPN gateway IP ID.
	//
	// Changing this parameter will create a new resource.
	GatewayIp *string `pulumi:"gatewayIp"`
	// Specifies the mode of the VPN connection.
	// The valid values are **master** and **slave**, defaults to **master**.
	// This parameter is optional when you create a connection for a VPN gateway in **active-active** mode.
	// When you create a connection for a VPN gateway in **active-standby** mode, **master** indicates
	// the active connection, and **slave** indicates the standby connection.
	// In **active-active** mode, this field must be set to **master** for the connection established
	// using the active EIP or active private IP address of the VPN gateway, and must be set to **slave**
	// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
	//
	// Changing this parameter will create a new resource.
	//
	// <a name="Connection_CreateRequestIkePolicy"></a>
	// The `ikepolicy` block supports:
	HaRole *string `pulumi:"haRole"`
	// The IKE policy configurations.
	// The ikepolicy structure is documented below.
	Ikepolicy *VpnConnectionIkepolicy `pulumi:"ikepolicy"`
	// The IPsec policy configurations.
	// The ipsecpolicy structure is documented below.
	Ipsecpolicy *VpnConnectionIpsecpolicy `pulumi:"ipsecpolicy"`
	// The name of the VPN connection.
	Name *string `pulumi:"name"`
	// The CIDR list of customer subnets. This parameter must be empty
	// when the `attachmentType` of the VPN gateway is set to **er** and `vpnType` is set to **policy** or **bgp**.
	// This parameter is mandatory in other scenarios.
	PeerSubnets []string `pulumi:"peerSubnets"`
	// The policy rules. Only works when vpnType is set to **policy**
	// The policyRules structure is documented below.
	PolicyRules []VpnConnectionPolicyRule `pulumi:"policyRules"`
	// The pre-shared key.
	Psk *string `pulumi:"psk"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The status of the VPN connection.
	Status *string `pulumi:"status"`
	// Specifies the tags of the VPN connection.
	Tags map[string]string `pulumi:"tags"`
	// The local tunnel address.
	TunnelLocalAddress *string `pulumi:"tunnelLocalAddress"`
	// The peer tunnel address.
	TunnelPeerAddress *string `pulumi:"tunnelPeerAddress"`
	// The update time.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The connection type. The value can be **policy**, **static** or **bgp**.
	//
	// Changing this parameter will create a new resource.
	VpnType *string `pulumi:"vpnType"`
}

type VpnConnectionState struct {
	// The create time.
	CreatedAt pulumi.StringPtrInput
	// The customer gateway ID.
	CustomerGatewayId pulumi.StringPtrInput
	// Whether to enable NQA check. Defaults to **false**.
	EnableNqa pulumi.BoolPtrInput
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// The VPN gateway ID.
	//
	// Changing this parameter will create a new resource.
	GatewayId pulumi.StringPtrInput
	// The VPN gateway IP ID.
	//
	// Changing this parameter will create a new resource.
	GatewayIp pulumi.StringPtrInput
	// Specifies the mode of the VPN connection.
	// The valid values are **master** and **slave**, defaults to **master**.
	// This parameter is optional when you create a connection for a VPN gateway in **active-active** mode.
	// When you create a connection for a VPN gateway in **active-standby** mode, **master** indicates
	// the active connection, and **slave** indicates the standby connection.
	// In **active-active** mode, this field must be set to **master** for the connection established
	// using the active EIP or active private IP address of the VPN gateway, and must be set to **slave**
	// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
	//
	// Changing this parameter will create a new resource.
	//
	// <a name="Connection_CreateRequestIkePolicy"></a>
	// The `ikepolicy` block supports:
	HaRole pulumi.StringPtrInput
	// The IKE policy configurations.
	// The ikepolicy structure is documented below.
	Ikepolicy VpnConnectionIkepolicyPtrInput
	// The IPsec policy configurations.
	// The ipsecpolicy structure is documented below.
	Ipsecpolicy VpnConnectionIpsecpolicyPtrInput
	// The name of the VPN connection.
	Name pulumi.StringPtrInput
	// The CIDR list of customer subnets. This parameter must be empty
	// when the `attachmentType` of the VPN gateway is set to **er** and `vpnType` is set to **policy** or **bgp**.
	// This parameter is mandatory in other scenarios.
	PeerSubnets pulumi.StringArrayInput
	// The policy rules. Only works when vpnType is set to **policy**
	// The policyRules structure is documented below.
	PolicyRules VpnConnectionPolicyRuleArrayInput
	// The pre-shared key.
	Psk pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The status of the VPN connection.
	Status pulumi.StringPtrInput
	// Specifies the tags of the VPN connection.
	Tags pulumi.StringMapInput
	// The local tunnel address.
	TunnelLocalAddress pulumi.StringPtrInput
	// The peer tunnel address.
	TunnelPeerAddress pulumi.StringPtrInput
	// The update time.
	UpdatedAt pulumi.StringPtrInput
	// The connection type. The value can be **policy**, **static** or **bgp**.
	//
	// Changing this parameter will create a new resource.
	VpnType pulumi.StringPtrInput
}

func (VpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionState)(nil)).Elem()
}

type vpnConnectionArgs struct {
	// The customer gateway ID.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// Whether to enable NQA check. Defaults to **false**.
	EnableNqa *bool `pulumi:"enableNqa"`
	// The enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// The VPN gateway ID.
	//
	// Changing this parameter will create a new resource.
	GatewayId string `pulumi:"gatewayId"`
	// The VPN gateway IP ID.
	//
	// Changing this parameter will create a new resource.
	GatewayIp string `pulumi:"gatewayIp"`
	// Specifies the mode of the VPN connection.
	// The valid values are **master** and **slave**, defaults to **master**.
	// This parameter is optional when you create a connection for a VPN gateway in **active-active** mode.
	// When you create a connection for a VPN gateway in **active-standby** mode, **master** indicates
	// the active connection, and **slave** indicates the standby connection.
	// In **active-active** mode, this field must be set to **master** for the connection established
	// using the active EIP or active private IP address of the VPN gateway, and must be set to **slave**
	// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
	//
	// Changing this parameter will create a new resource.
	//
	// <a name="Connection_CreateRequestIkePolicy"></a>
	// The `ikepolicy` block supports:
	HaRole *string `pulumi:"haRole"`
	// The IKE policy configurations.
	// The ikepolicy structure is documented below.
	Ikepolicy *VpnConnectionIkepolicy `pulumi:"ikepolicy"`
	// The IPsec policy configurations.
	// The ipsecpolicy structure is documented below.
	Ipsecpolicy *VpnConnectionIpsecpolicy `pulumi:"ipsecpolicy"`
	// The name of the VPN connection.
	Name *string `pulumi:"name"`
	// The CIDR list of customer subnets. This parameter must be empty
	// when the `attachmentType` of the VPN gateway is set to **er** and `vpnType` is set to **policy** or **bgp**.
	// This parameter is mandatory in other scenarios.
	PeerSubnets []string `pulumi:"peerSubnets"`
	// The policy rules. Only works when vpnType is set to **policy**
	// The policyRules structure is documented below.
	PolicyRules []VpnConnectionPolicyRule `pulumi:"policyRules"`
	// The pre-shared key.
	Psk string `pulumi:"psk"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the tags of the VPN connection.
	Tags map[string]string `pulumi:"tags"`
	// The local tunnel address.
	TunnelLocalAddress *string `pulumi:"tunnelLocalAddress"`
	// The peer tunnel address.
	TunnelPeerAddress *string `pulumi:"tunnelPeerAddress"`
	// The connection type. The value can be **policy**, **static** or **bgp**.
	//
	// Changing this parameter will create a new resource.
	VpnType string `pulumi:"vpnType"`
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	// The customer gateway ID.
	CustomerGatewayId pulumi.StringInput
	// Whether to enable NQA check. Defaults to **false**.
	EnableNqa pulumi.BoolPtrInput
	// The enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// The VPN gateway ID.
	//
	// Changing this parameter will create a new resource.
	GatewayId pulumi.StringInput
	// The VPN gateway IP ID.
	//
	// Changing this parameter will create a new resource.
	GatewayIp pulumi.StringInput
	// Specifies the mode of the VPN connection.
	// The valid values are **master** and **slave**, defaults to **master**.
	// This parameter is optional when you create a connection for a VPN gateway in **active-active** mode.
	// When you create a connection for a VPN gateway in **active-standby** mode, **master** indicates
	// the active connection, and **slave** indicates the standby connection.
	// In **active-active** mode, this field must be set to **master** for the connection established
	// using the active EIP or active private IP address of the VPN gateway, and must be set to **slave**
	// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
	//
	// Changing this parameter will create a new resource.
	//
	// <a name="Connection_CreateRequestIkePolicy"></a>
	// The `ikepolicy` block supports:
	HaRole pulumi.StringPtrInput
	// The IKE policy configurations.
	// The ikepolicy structure is documented below.
	Ikepolicy VpnConnectionIkepolicyPtrInput
	// The IPsec policy configurations.
	// The ipsecpolicy structure is documented below.
	Ipsecpolicy VpnConnectionIpsecpolicyPtrInput
	// The name of the VPN connection.
	Name pulumi.StringPtrInput
	// The CIDR list of customer subnets. This parameter must be empty
	// when the `attachmentType` of the VPN gateway is set to **er** and `vpnType` is set to **policy** or **bgp**.
	// This parameter is mandatory in other scenarios.
	PeerSubnets pulumi.StringArrayInput
	// The policy rules. Only works when vpnType is set to **policy**
	// The policyRules structure is documented below.
	PolicyRules VpnConnectionPolicyRuleArrayInput
	// The pre-shared key.
	Psk pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the tags of the VPN connection.
	Tags pulumi.StringMapInput
	// The local tunnel address.
	TunnelLocalAddress pulumi.StringPtrInput
	// The peer tunnel address.
	TunnelPeerAddress pulumi.StringPtrInput
	// The connection type. The value can be **policy**, **static** or **bgp**.
	//
	// Changing this parameter will create a new resource.
	VpnType pulumi.StringInput
}

func (VpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionArgs)(nil)).Elem()
}

type VpnConnectionInput interface {
	pulumi.Input

	ToVpnConnectionOutput() VpnConnectionOutput
	ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput
}

func (*VpnConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (i *VpnConnection) ToVpnConnectionOutput() VpnConnectionOutput {
	return i.ToVpnConnectionOutputWithContext(context.Background())
}

func (i *VpnConnection) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionOutput)
}

// VpnConnectionArrayInput is an input type that accepts VpnConnectionArray and VpnConnectionArrayOutput values.
// You can construct a concrete instance of `VpnConnectionArrayInput` via:
//
//	VpnConnectionArray{ VpnConnectionArgs{...} }
type VpnConnectionArrayInput interface {
	pulumi.Input

	ToVpnConnectionArrayOutput() VpnConnectionArrayOutput
	ToVpnConnectionArrayOutputWithContext(context.Context) VpnConnectionArrayOutput
}

type VpnConnectionArray []VpnConnectionInput

func (VpnConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return i.ToVpnConnectionArrayOutputWithContext(context.Background())
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionArrayOutput)
}

// VpnConnectionMapInput is an input type that accepts VpnConnectionMap and VpnConnectionMapOutput values.
// You can construct a concrete instance of `VpnConnectionMapInput` via:
//
//	VpnConnectionMap{ "key": VpnConnectionArgs{...} }
type VpnConnectionMapInput interface {
	pulumi.Input

	ToVpnConnectionMapOutput() VpnConnectionMapOutput
	ToVpnConnectionMapOutputWithContext(context.Context) VpnConnectionMapOutput
}

type VpnConnectionMap map[string]VpnConnectionInput

func (VpnConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionMap) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return i.ToVpnConnectionMapOutputWithContext(context.Background())
}

func (i VpnConnectionMap) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionMapOutput)
}

type VpnConnectionOutput struct{ *pulumi.OutputState }

func (VpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (o VpnConnectionOutput) ToVpnConnectionOutput() VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return o
}

// The create time.
func (o VpnConnectionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The customer gateway ID.
func (o VpnConnectionOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

// Whether to enable NQA check. Defaults to **false**.
func (o VpnConnectionOutput) EnableNqa() pulumi.BoolOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolOutput { return v.EnableNqa }).(pulumi.BoolOutput)
}

// The enterprise project ID.
func (o VpnConnectionOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// The VPN gateway ID.
//
// Changing this parameter will create a new resource.
func (o VpnConnectionOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// The VPN gateway IP ID.
//
// Changing this parameter will create a new resource.
func (o VpnConnectionOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// Specifies the mode of the VPN connection.
// The valid values are **master** and **slave**, defaults to **master**.
// This parameter is optional when you create a connection for a VPN gateway in **active-active** mode.
// When you create a connection for a VPN gateway in **active-standby** mode, **master** indicates
// the active connection, and **slave** indicates the standby connection.
// In **active-active** mode, this field must be set to **master** for the connection established
// using the active EIP or active private IP address of the VPN gateway, and must be set to **slave**
// for the connection established using active EIP 2 or active private IP address 2 of the VPN gateway.
//
// Changing this parameter will create a new resource.
//
// <a name="Connection_CreateRequestIkePolicy"></a>
// The `ikepolicy` block supports:
func (o VpnConnectionOutput) HaRole() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.HaRole }).(pulumi.StringOutput)
}

// The IKE policy configurations.
// The ikepolicy structure is documented below.
func (o VpnConnectionOutput) Ikepolicy() VpnConnectionIkepolicyOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionIkepolicyOutput { return v.Ikepolicy }).(VpnConnectionIkepolicyOutput)
}

// The IPsec policy configurations.
// The ipsecpolicy structure is documented below.
func (o VpnConnectionOutput) Ipsecpolicy() VpnConnectionIpsecpolicyOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionIpsecpolicyOutput { return v.Ipsecpolicy }).(VpnConnectionIpsecpolicyOutput)
}

// The name of the VPN connection.
func (o VpnConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The CIDR list of customer subnets. This parameter must be empty
// when the `attachmentType` of the VPN gateway is set to **er** and `vpnType` is set to **policy** or **bgp**.
// This parameter is mandatory in other scenarios.
func (o VpnConnectionOutput) PeerSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringArrayOutput { return v.PeerSubnets }).(pulumi.StringArrayOutput)
}

// The policy rules. Only works when vpnType is set to **policy**
// The policyRules structure is documented below.
func (o VpnConnectionOutput) PolicyRules() VpnConnectionPolicyRuleArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionPolicyRuleArrayOutput { return v.PolicyRules }).(VpnConnectionPolicyRuleArrayOutput)
}

// The pre-shared key.
func (o VpnConnectionOutput) Psk() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Psk }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o VpnConnectionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The status of the VPN connection.
func (o VpnConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the tags of the VPN connection.
func (o VpnConnectionOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The local tunnel address.
func (o VpnConnectionOutput) TunnelLocalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.TunnelLocalAddress }).(pulumi.StringOutput)
}

// The peer tunnel address.
func (o VpnConnectionOutput) TunnelPeerAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.TunnelPeerAddress }).(pulumi.StringOutput)
}

// The update time.
func (o VpnConnectionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The connection type. The value can be **policy**, **static** or **bgp**.
//
// Changing this parameter will create a new resource.
func (o VpnConnectionOutput) VpnType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.VpnType }).(pulumi.StringOutput)
}

type VpnConnectionArrayOutput struct{ *pulumi.OutputState }

func (VpnConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) Index(i pulumi.IntInput) VpnConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].([]*VpnConnection)[vs[1].(int)]
	}).(VpnConnectionOutput)
}

type VpnConnectionMapOutput struct{ *pulumi.OutputState }

func (VpnConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) MapIndex(k pulumi.StringInput) VpnConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].(map[string]*VpnConnection)[vs[1].(string)]
	}).(VpnConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionInput)(nil)).Elem(), &VpnConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionArrayInput)(nil)).Elem(), VpnConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionMapInput)(nil)).Elem(), VpnConnectionMap{})
	pulumi.RegisterOutputType(VpnConnectionOutput{})
	pulumi.RegisterOutputType(VpnConnectionArrayOutput{})
	pulumi.RegisterOutputType(VpnConnectionMapOutput{})
}

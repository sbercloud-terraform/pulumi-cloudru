// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get a list of CCE nodes.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cce"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			clusterId := cfg.RequireObject("clusterId")
//			nodeName := cfg.RequireObject("nodeName")
//			_, err := cce.GetNodes(ctx, &cce.GetNodesArgs{
//				ClusterId: clusterId,
//				Name:      pulumi.StringRef(nodeName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNodes(ctx *pulumi.Context, args *GetNodesArgs, opts ...pulumi.InvokeOption) (*GetNodesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNodesResult
	err := ctx.Invoke("sbercloud:Cce/getNodes:getNodes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNodes.
type GetNodesArgs struct {
	// Specifies the ID of CCE cluster.
	ClusterId     string  `pulumi:"clusterId"`
	IgnoreDetails *string `pulumi:"ignoreDetails"`
	// Specifies the of the node.
	Name *string `pulumi:"name"`
	// Specifies the ID of the node.
	NodeId *string `pulumi:"nodeId"`
	// Specifies the region in which to obtain the CCE nodes. If omitted, the provider-level
	// region will be used.
	Region *string `pulumi:"region"`
	// Specifies the status of the node.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getNodes.
type GetNodesResult struct {
	ClusterId string `pulumi:"clusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates a list of IDs of all CCE nodes found.
	Ids           []string `pulumi:"ids"`
	IgnoreDetails *string  `pulumi:"ignoreDetails"`
	// The name of the node.
	Name   *string `pulumi:"name"`
	NodeId *string `pulumi:"nodeId"`
	// Indicates a list of CCE nodes found. Structure is documented below.
	Nodes  []GetNodesNode `pulumi:"nodes"`
	Region string         `pulumi:"region"`
	// The state of the node.
	Status *string `pulumi:"status"`
}

func GetNodesOutput(ctx *pulumi.Context, args GetNodesOutputArgs, opts ...pulumi.InvokeOption) GetNodesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetNodesResultOutput, error) {
			args := v.(GetNodesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Cce/getNodes:getNodes", args, GetNodesResultOutput{}, options).(GetNodesResultOutput), nil
		}).(GetNodesResultOutput)
}

// A collection of arguments for invoking getNodes.
type GetNodesOutputArgs struct {
	// Specifies the ID of CCE cluster.
	ClusterId     pulumi.StringInput    `pulumi:"clusterId"`
	IgnoreDetails pulumi.StringPtrInput `pulumi:"ignoreDetails"`
	// Specifies the of the node.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the ID of the node.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// Specifies the region in which to obtain the CCE nodes. If omitted, the provider-level
	// region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the status of the node.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetNodesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesArgs)(nil)).Elem()
}

// A collection of values returned by getNodes.
type GetNodesResultOutput struct{ *pulumi.OutputState }

func (GetNodesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNodesResult)(nil)).Elem()
}

func (o GetNodesResultOutput) ToGetNodesResultOutput() GetNodesResultOutput {
	return o
}

func (o GetNodesResultOutput) ToGetNodesResultOutputWithContext(ctx context.Context) GetNodesResultOutput {
	return o
}

func (o GetNodesResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNodesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates a list of IDs of all CCE nodes found.
func (o GetNodesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNodesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetNodesResultOutput) IgnoreDetails() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesResult) *string { return v.IgnoreDetails }).(pulumi.StringPtrOutput)
}

// The name of the node.
func (o GetNodesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetNodesResultOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesResult) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// Indicates a list of CCE nodes found. Structure is documented below.
func (o GetNodesResultOutput) Nodes() GetNodesNodeArrayOutput {
	return o.ApplyT(func(v GetNodesResult) []GetNodesNode { return v.Nodes }).(GetNodesNodeArrayOutput)
}

func (o GetNodesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetNodesResult) string { return v.Region }).(pulumi.StringOutput)
}

// The state of the node.
func (o GetNodesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNodesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNodesResultOutput{})
}

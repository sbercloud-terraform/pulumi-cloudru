// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package er

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Association struct {
	pulumi.CustomResourceState

	// The ID of the attachment corresponding to the association.
	AttachmentId pulumi.StringOutput `pulumi:"attachmentId"`
	// The type of the attachment corresponding to the association.
	AttachmentType pulumi.StringOutput `pulumi:"attachmentType"`
	// The creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The region where the ER instance and route table are located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the route table to which the association belongs.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The current status of the association.
	Status pulumi.StringOutput `pulumi:"status"`
	// The latest update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewAssociation registers a new resource with the given unique name, arguments, and options.
func NewAssociation(ctx *pulumi.Context,
	name string, args *AssociationArgs, opts ...pulumi.ResourceOption) (*Association, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'AttachmentId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Association
	err := ctx.RegisterResource("cloudru:Er/association:Association", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssociation gets an existing Association resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssociationState, opts ...pulumi.ResourceOption) (*Association, error) {
	var resource Association
	err := ctx.ReadResource("cloudru:Er/association:Association", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Association resources.
type associationState struct {
	// The ID of the attachment corresponding to the association.
	AttachmentId *string `pulumi:"attachmentId"`
	// The type of the attachment corresponding to the association.
	AttachmentType *string `pulumi:"attachmentType"`
	// The creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The region where the ER instance and route table are located.
	Region *string `pulumi:"region"`
	// The ID of the route table to which the association belongs.
	RouteTableId *string `pulumi:"routeTableId"`
	// The current status of the association.
	Status *string `pulumi:"status"`
	// The latest update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type AssociationState struct {
	// The ID of the attachment corresponding to the association.
	AttachmentId pulumi.StringPtrInput
	// The type of the attachment corresponding to the association.
	AttachmentType pulumi.StringPtrInput
	// The creation time.
	CreatedAt pulumi.StringPtrInput
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId pulumi.StringPtrInput
	// The region where the ER instance and route table are located.
	Region pulumi.StringPtrInput
	// The ID of the route table to which the association belongs.
	RouteTableId pulumi.StringPtrInput
	// The current status of the association.
	Status pulumi.StringPtrInput
	// The latest update time.
	UpdatedAt pulumi.StringPtrInput
}

func (AssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*associationState)(nil)).Elem()
}

type associationArgs struct {
	// The ID of the attachment corresponding to the association.
	AttachmentId string `pulumi:"attachmentId"`
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId string `pulumi:"instanceId"`
	// The region where the ER instance and route table are located.
	Region *string `pulumi:"region"`
	// The ID of the route table to which the association belongs.
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a Association resource.
type AssociationArgs struct {
	// The ID of the attachment corresponding to the association.
	AttachmentId pulumi.StringInput
	// The ID of the ER instance to which the route table and the attachment belongs.
	InstanceId pulumi.StringInput
	// The region where the ER instance and route table are located.
	Region pulumi.StringPtrInput
	// The ID of the route table to which the association belongs.
	RouteTableId pulumi.StringInput
}

func (AssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*associationArgs)(nil)).Elem()
}

type AssociationInput interface {
	pulumi.Input

	ToAssociationOutput() AssociationOutput
	ToAssociationOutputWithContext(ctx context.Context) AssociationOutput
}

func (*Association) ElementType() reflect.Type {
	return reflect.TypeOf((**Association)(nil)).Elem()
}

func (i *Association) ToAssociationOutput() AssociationOutput {
	return i.ToAssociationOutputWithContext(context.Background())
}

func (i *Association) ToAssociationOutputWithContext(ctx context.Context) AssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationOutput)
}

// AssociationArrayInput is an input type that accepts AssociationArray and AssociationArrayOutput values.
// You can construct a concrete instance of `AssociationArrayInput` via:
//
//	AssociationArray{ AssociationArgs{...} }
type AssociationArrayInput interface {
	pulumi.Input

	ToAssociationArrayOutput() AssociationArrayOutput
	ToAssociationArrayOutputWithContext(context.Context) AssociationArrayOutput
}

type AssociationArray []AssociationInput

func (AssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Association)(nil)).Elem()
}

func (i AssociationArray) ToAssociationArrayOutput() AssociationArrayOutput {
	return i.ToAssociationArrayOutputWithContext(context.Background())
}

func (i AssociationArray) ToAssociationArrayOutputWithContext(ctx context.Context) AssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationArrayOutput)
}

// AssociationMapInput is an input type that accepts AssociationMap and AssociationMapOutput values.
// You can construct a concrete instance of `AssociationMapInput` via:
//
//	AssociationMap{ "key": AssociationArgs{...} }
type AssociationMapInput interface {
	pulumi.Input

	ToAssociationMapOutput() AssociationMapOutput
	ToAssociationMapOutputWithContext(context.Context) AssociationMapOutput
}

type AssociationMap map[string]AssociationInput

func (AssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Association)(nil)).Elem()
}

func (i AssociationMap) ToAssociationMapOutput() AssociationMapOutput {
	return i.ToAssociationMapOutputWithContext(context.Background())
}

func (i AssociationMap) ToAssociationMapOutputWithContext(ctx context.Context) AssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssociationMapOutput)
}

type AssociationOutput struct{ *pulumi.OutputState }

func (AssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Association)(nil)).Elem()
}

func (o AssociationOutput) ToAssociationOutput() AssociationOutput {
	return o
}

func (o AssociationOutput) ToAssociationOutputWithContext(ctx context.Context) AssociationOutput {
	return o
}

// The ID of the attachment corresponding to the association.
func (o AssociationOutput) AttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.AttachmentId }).(pulumi.StringOutput)
}

// The type of the attachment corresponding to the association.
func (o AssociationOutput) AttachmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.AttachmentType }).(pulumi.StringOutput)
}

// The creation time.
func (o AssociationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the ER instance to which the route table and the attachment belongs.
func (o AssociationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The region where the ER instance and route table are located.
func (o AssociationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the route table to which the association belongs.
func (o AssociationOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// The current status of the association.
func (o AssociationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The latest update time.
func (o AssociationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Association) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type AssociationArrayOutput struct{ *pulumi.OutputState }

func (AssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Association)(nil)).Elem()
}

func (o AssociationArrayOutput) ToAssociationArrayOutput() AssociationArrayOutput {
	return o
}

func (o AssociationArrayOutput) ToAssociationArrayOutputWithContext(ctx context.Context) AssociationArrayOutput {
	return o
}

func (o AssociationArrayOutput) Index(i pulumi.IntInput) AssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Association {
		return vs[0].([]*Association)[vs[1].(int)]
	}).(AssociationOutput)
}

type AssociationMapOutput struct{ *pulumi.OutputState }

func (AssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Association)(nil)).Elem()
}

func (o AssociationMapOutput) ToAssociationMapOutput() AssociationMapOutput {
	return o
}

func (o AssociationMapOutput) ToAssociationMapOutputWithContext(ctx context.Context) AssociationMapOutput {
	return o
}

func (o AssociationMapOutput) MapIndex(k pulumi.StringInput) AssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Association {
		return vs[0].(map[string]*Association)[vs[1].(string)]
	}).(AssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssociationInput)(nil)).Elem(), &Association{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssociationArrayInput)(nil)).Elem(), AssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssociationMapInput)(nil)).Elem(), AssociationMap{})
	pulumi.RegisterOutputType(AssociationOutput{})
	pulumi.RegisterOutputType(AssociationArrayOutput{})
	pulumi.RegisterOutputType(AssociationMapOutput{})
}

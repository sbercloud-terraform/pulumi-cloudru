// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class MysqlBinlog extends pulumi.CustomResource {
    /**
     * Get an existing MysqlBinlog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MysqlBinlogState, opts?: pulumi.CustomResourceOptions): MysqlBinlog {
        return new MysqlBinlog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Rds/mysqlBinlog:MysqlBinlog';

    /**
     * Returns true if the given object is an instance of MysqlBinlog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MysqlBinlog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MysqlBinlog.__pulumiType;
    }

    declare public readonly binlogRetentionHours: pulumi.Output<number>;
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a MysqlBinlog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MysqlBinlogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MysqlBinlogArgs | MysqlBinlogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MysqlBinlogState | undefined;
            resourceInputs["binlogRetentionHours"] = state?.binlogRetentionHours;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as MysqlBinlogArgs | undefined;
            if (args?.binlogRetentionHours === undefined && !opts.urn) {
                throw new Error("Missing required property 'binlogRetentionHours'");
            }
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["binlogRetentionHours"] = args?.binlogRetentionHours;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MysqlBinlog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MysqlBinlog resources.
 */
export interface MysqlBinlogState {
    binlogRetentionHours?: pulumi.Input<number>;
    instanceId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MysqlBinlog resource.
 */
export interface MysqlBinlogArgs {
    binlogRetentionHours: pulumi.Input<number>;
    instanceId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class FlowLog extends pulumi.CustomResource {
    /**
     * Get an existing FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowLogState, opts?: pulumi.CustomResourceOptions): FlowLog {
        return new FlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Er/flowLog:FlowLog';

    /**
     * Returns true if the given object is an instance of FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowLog.__pulumiType;
    }

    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly enabled: pulumi.Output<boolean | undefined>;
    declare public readonly instanceId: pulumi.Output<string>;
    declare public readonly logGroupId: pulumi.Output<string>;
    declare public readonly logStoreType: pulumi.Output<string>;
    declare public readonly logStreamId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly resourceId: pulumi.Output<string>;
    declare public readonly resourceType: pulumi.Output<string>;
    declare public /*out*/ readonly state: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowLogArgs | FlowLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowLogState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["logGroupId"] = state?.logGroupId;
            resourceInputs["logStoreType"] = state?.logStoreType;
            resourceInputs["logStreamId"] = state?.logStreamId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["resourceType"] = state?.resourceType;
            resourceInputs["state"] = state?.state;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as FlowLogArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.logGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'logGroupId'");
            }
            if (args?.logStoreType === undefined && !opts.urn) {
                throw new Error("Missing required property 'logStoreType'");
            }
            if (args?.logStreamId === undefined && !opts.urn) {
                throw new Error("Missing required property 'logStreamId'");
            }
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if (args?.resourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["logGroupId"] = args?.logGroupId;
            resourceInputs["logStoreType"] = args?.logStoreType;
            resourceInputs["logStreamId"] = args?.logStreamId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["resourceType"] = args?.resourceType;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlowLog resources.
 */
export interface FlowLogState {
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    instanceId?: pulumi.Input<string>;
    logGroupId?: pulumi.Input<string>;
    logStoreType?: pulumi.Input<string>;
    logStreamId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceId?: pulumi.Input<string>;
    resourceType?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowLog resource.
 */
export interface FlowLogArgs {
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    instanceId: pulumi.Input<string>;
    logGroupId: pulumi.Input<string>;
    logStoreType: pulumi.Input<string>;
    logStreamId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    resourceId: pulumi.Input<string>;
    resourceType: pulumi.Input<string>;
}

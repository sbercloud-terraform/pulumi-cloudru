// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mrs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Job struct {
	pulumi.CustomResourceState

	ClusterId         pulumi.StringOutput    `pulumi:"clusterId"`
	FinishTime        pulumi.StringOutput    `pulumi:"finishTime"`
	Name              pulumi.StringOutput    `pulumi:"name"`
	Parameters        pulumi.StringPtrOutput `pulumi:"parameters"`
	ProgramParameters pulumi.StringMapOutput `pulumi:"programParameters"`
	ProgramPath       pulumi.StringPtrOutput `pulumi:"programPath"`
	Region            pulumi.StringOutput    `pulumi:"region"`
	ServiceParameters pulumi.StringMapOutput `pulumi:"serviceParameters"`
	Sql               pulumi.StringPtrOutput `pulumi:"sql"`
	StartTime         pulumi.StringOutput    `pulumi:"startTime"`
	Status            pulumi.StringOutput    `pulumi:"status"`
	SubmitTime        pulumi.StringOutput    `pulumi:"submitTime"`
	Type              pulumi.StringOutput    `pulumi:"type"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Job
	err := ctx.RegisterResource("cloudru:Mrs/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("cloudru:Mrs/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	ClusterId         *string           `pulumi:"clusterId"`
	FinishTime        *string           `pulumi:"finishTime"`
	Name              *string           `pulumi:"name"`
	Parameters        *string           `pulumi:"parameters"`
	ProgramParameters map[string]string `pulumi:"programParameters"`
	ProgramPath       *string           `pulumi:"programPath"`
	Region            *string           `pulumi:"region"`
	ServiceParameters map[string]string `pulumi:"serviceParameters"`
	Sql               *string           `pulumi:"sql"`
	StartTime         *string           `pulumi:"startTime"`
	Status            *string           `pulumi:"status"`
	SubmitTime        *string           `pulumi:"submitTime"`
	Type              *string           `pulumi:"type"`
}

type JobState struct {
	ClusterId         pulumi.StringPtrInput
	FinishTime        pulumi.StringPtrInput
	Name              pulumi.StringPtrInput
	Parameters        pulumi.StringPtrInput
	ProgramParameters pulumi.StringMapInput
	ProgramPath       pulumi.StringPtrInput
	Region            pulumi.StringPtrInput
	ServiceParameters pulumi.StringMapInput
	Sql               pulumi.StringPtrInput
	StartTime         pulumi.StringPtrInput
	Status            pulumi.StringPtrInput
	SubmitTime        pulumi.StringPtrInput
	Type              pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	ClusterId         string            `pulumi:"clusterId"`
	Name              *string           `pulumi:"name"`
	Parameters        *string           `pulumi:"parameters"`
	ProgramParameters map[string]string `pulumi:"programParameters"`
	ProgramPath       *string           `pulumi:"programPath"`
	Region            *string           `pulumi:"region"`
	ServiceParameters map[string]string `pulumi:"serviceParameters"`
	Sql               *string           `pulumi:"sql"`
	Type              string            `pulumi:"type"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	ClusterId         pulumi.StringInput
	Name              pulumi.StringPtrInput
	Parameters        pulumi.StringPtrInput
	ProgramParameters pulumi.StringMapInput
	ProgramPath       pulumi.StringPtrInput
	Region            pulumi.StringPtrInput
	ServiceParameters pulumi.StringMapInput
	Sql               pulumi.StringPtrInput
	Type              pulumi.StringInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//	JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

func (o JobOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o JobOutput) FinishTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.FinishTime }).(pulumi.StringOutput)
}

func (o JobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o JobOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Parameters }).(pulumi.StringPtrOutput)
}

func (o JobOutput) ProgramParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.ProgramParameters }).(pulumi.StringMapOutput)
}

func (o JobOutput) ProgramPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.ProgramPath }).(pulumi.StringPtrOutput)
}

func (o JobOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o JobOutput) ServiceParameters() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Job) pulumi.StringMapOutput { return v.ServiceParameters }).(pulumi.StringMapOutput)
}

func (o JobOutput) Sql() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Sql }).(pulumi.StringPtrOutput)
}

func (o JobOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

func (o JobOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o JobOutput) SubmitTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.SubmitTime }).(pulumi.StringOutput)
}

func (o JobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}

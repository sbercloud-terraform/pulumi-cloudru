// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the ID of an available SberCloud dcs az.
//
// !> **WARNING:** It has been deprecated. This data source is used for the `availableZones` of the
// `Dcs.Instance` resource. Now `availableZones` has been deprecated and this data source is no longer used.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sbercloud.GetDcsAz(ctx, &cloudru.GetDcsAzArgs{
//				Port: pulumi.StringRef("443"),
//				Code: pulumi.StringRef("ru-moscow-1a"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDcsAz(ctx *pulumi.Context, args *GetDcsAzArgs, opts ...pulumi.InvokeOption) (*GetDcsAzResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDcsAzResult
	err := ctx.Invoke("sbercloud:index/getDcsAz:getDcsAz", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDcsAz.
type GetDcsAzArgs struct {
	// Specifies the code of an AZ, e.g. "ru-moscow-1a".
	Code *string `pulumi:"code"`
	// Indicates the name of an AZ.
	Name *string `pulumi:"name"`
	// Indicates the port number of an AZ.
	Port *string `pulumi:"port"`
	// The region in which to obtain the dcs az. If omitted, the provider-level region will be
	// used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getDcsAz.
type GetDcsAzResult struct {
	Code string `pulumi:"code"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates the name of an AZ.
	Name string `pulumi:"name"`
	// Indicates the port number of an AZ.
	Port   string `pulumi:"port"`
	Region string `pulumi:"region"`
}

func GetDcsAzOutput(ctx *pulumi.Context, args GetDcsAzOutputArgs, opts ...pulumi.InvokeOption) GetDcsAzResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDcsAzResultOutput, error) {
			args := v.(GetDcsAzArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getDcsAz:getDcsAz", args, GetDcsAzResultOutput{}, options).(GetDcsAzResultOutput), nil
		}).(GetDcsAzResultOutput)
}

// A collection of arguments for invoking getDcsAz.
type GetDcsAzOutputArgs struct {
	// Specifies the code of an AZ, e.g. "ru-moscow-1a".
	Code pulumi.StringPtrInput `pulumi:"code"`
	// Indicates the name of an AZ.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates the port number of an AZ.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// The region in which to obtain the dcs az. If omitted, the provider-level region will be
	// used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetDcsAzOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDcsAzArgs)(nil)).Elem()
}

// A collection of values returned by getDcsAz.
type GetDcsAzResultOutput struct{ *pulumi.OutputState }

func (GetDcsAzResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDcsAzResult)(nil)).Elem()
}

func (o GetDcsAzResultOutput) ToGetDcsAzResultOutput() GetDcsAzResultOutput {
	return o
}

func (o GetDcsAzResultOutput) ToGetDcsAzResultOutputWithContext(ctx context.Context) GetDcsAzResultOutput {
	return o
}

func (o GetDcsAzResultOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetDcsAzResult) string { return v.Code }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDcsAzResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDcsAzResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates the name of an AZ.
func (o GetDcsAzResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDcsAzResult) string { return v.Name }).(pulumi.StringOutput)
}

// Indicates the port number of an AZ.
func (o GetDcsAzResultOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetDcsAzResult) string { return v.Port }).(pulumi.StringOutput)
}

func (o GetDcsAzResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDcsAzResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDcsAzResultOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDmsRocketmqTopicConsumerGroupsResult',
    'AwaitableGetDmsRocketmqTopicConsumerGroupsResult',
    'get_dms_rocketmq_topic_consumer_groups',
    'get_dms_rocketmq_topic_consumer_groups_output',
]

@pulumi.output_type
class GetDmsRocketmqTopicConsumerGroupsResult:
    """
    A collection of values returned by getDmsRocketmqTopicConsumerGroups.
    """
    def __init__(__self__, groups=None, id=None, instance_id=None, region=None, topic_name=None):
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if topic_name and not isinstance(topic_name, str):
            raise TypeError("Expected argument 'topic_name' to be a str")
        pulumi.set(__self__, "topic_name", topic_name)

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence[_builtins.str]:
        """
        Indicates the consumer group list.
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> _builtins.str:
        return pulumi.get(self, "topic_name")


class AwaitableGetDmsRocketmqTopicConsumerGroupsResult(GetDmsRocketmqTopicConsumerGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDmsRocketmqTopicConsumerGroupsResult(
            groups=self.groups,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            topic_name=self.topic_name)


def get_dms_rocketmq_topic_consumer_groups(instance_id: Optional[_builtins.str] = None,
                                           region: Optional[_builtins.str] = None,
                                           topic_name: Optional[_builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDmsRocketmqTopicConsumerGroupsResult:
    """
    Use this data source to get the list of RocketMQ topic consumer groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    topic_name = config.require_object("topicName")
    test = sbercloud.get_dms_rocketmq_topic_consumer_groups(instance_id=instance_id,
        topic_name=topic_name)
    ```


    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str topic_name: Specifies the topic name.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['topicName'] = topic_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDmsRocketmqTopicConsumerGroups:getDmsRocketmqTopicConsumerGroups', __args__, opts=opts, typ=GetDmsRocketmqTopicConsumerGroupsResult).value

    return AwaitableGetDmsRocketmqTopicConsumerGroupsResult(
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        topic_name=pulumi.get(__ret__, 'topic_name'))
def get_dms_rocketmq_topic_consumer_groups_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                                  region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                                  topic_name: Optional[pulumi.Input[_builtins.str]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDmsRocketmqTopicConsumerGroupsResult]:
    """
    Use this data source to get the list of RocketMQ topic consumer groups.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    config = pulumi.Config()
    instance_id = config.require_object("instanceId")
    topic_name = config.require_object("topicName")
    test = sbercloud.get_dms_rocketmq_topic_consumer_groups(instance_id=instance_id,
        topic_name=topic_name)
    ```


    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    :param _builtins.str topic_name: Specifies the topic name.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['topicName'] = topic_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDmsRocketmqTopicConsumerGroups:getDmsRocketmqTopicConsumerGroups', __args__, opts=opts, typ=GetDmsRocketmqTopicConsumerGroupsResult)
    return __ret__.apply(lambda __response__: GetDmsRocketmqTopicConsumerGroupsResult(
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        topic_name=pulumi.get(__response__, 'topic_name')))

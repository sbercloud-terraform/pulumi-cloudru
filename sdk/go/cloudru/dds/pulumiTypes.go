// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dds

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type InstanceBackupStrategy struct {
	KeepDays  int     `pulumi:"keepDays"`
	Period    *string `pulumi:"period"`
	StartTime string  `pulumi:"startTime"`
}

// InstanceBackupStrategyInput is an input type that accepts InstanceBackupStrategyArgs and InstanceBackupStrategyOutput values.
// You can construct a concrete instance of `InstanceBackupStrategyInput` via:
//
//	InstanceBackupStrategyArgs{...}
type InstanceBackupStrategyInput interface {
	pulumi.Input

	ToInstanceBackupStrategyOutput() InstanceBackupStrategyOutput
	ToInstanceBackupStrategyOutputWithContext(context.Context) InstanceBackupStrategyOutput
}

type InstanceBackupStrategyArgs struct {
	KeepDays  pulumi.IntInput       `pulumi:"keepDays"`
	Period    pulumi.StringPtrInput `pulumi:"period"`
	StartTime pulumi.StringInput    `pulumi:"startTime"`
}

func (InstanceBackupStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackupStrategy)(nil)).Elem()
}

func (i InstanceBackupStrategyArgs) ToInstanceBackupStrategyOutput() InstanceBackupStrategyOutput {
	return i.ToInstanceBackupStrategyOutputWithContext(context.Background())
}

func (i InstanceBackupStrategyArgs) ToInstanceBackupStrategyOutputWithContext(ctx context.Context) InstanceBackupStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupStrategyOutput)
}

func (i InstanceBackupStrategyArgs) ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput {
	return i.ToInstanceBackupStrategyPtrOutputWithContext(context.Background())
}

func (i InstanceBackupStrategyArgs) ToInstanceBackupStrategyPtrOutputWithContext(ctx context.Context) InstanceBackupStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupStrategyOutput).ToInstanceBackupStrategyPtrOutputWithContext(ctx)
}

// InstanceBackupStrategyPtrInput is an input type that accepts InstanceBackupStrategyArgs, InstanceBackupStrategyPtr and InstanceBackupStrategyPtrOutput values.
// You can construct a concrete instance of `InstanceBackupStrategyPtrInput` via:
//
//	        InstanceBackupStrategyArgs{...}
//
//	or:
//
//	        nil
type InstanceBackupStrategyPtrInput interface {
	pulumi.Input

	ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput
	ToInstanceBackupStrategyPtrOutputWithContext(context.Context) InstanceBackupStrategyPtrOutput
}

type instanceBackupStrategyPtrType InstanceBackupStrategyArgs

func InstanceBackupStrategyPtr(v *InstanceBackupStrategyArgs) InstanceBackupStrategyPtrInput {
	return (*instanceBackupStrategyPtrType)(v)
}

func (*instanceBackupStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackupStrategy)(nil)).Elem()
}

func (i *instanceBackupStrategyPtrType) ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput {
	return i.ToInstanceBackupStrategyPtrOutputWithContext(context.Background())
}

func (i *instanceBackupStrategyPtrType) ToInstanceBackupStrategyPtrOutputWithContext(ctx context.Context) InstanceBackupStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceBackupStrategyPtrOutput)
}

type InstanceBackupStrategyOutput struct{ *pulumi.OutputState }

func (InstanceBackupStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceBackupStrategy)(nil)).Elem()
}

func (o InstanceBackupStrategyOutput) ToInstanceBackupStrategyOutput() InstanceBackupStrategyOutput {
	return o
}

func (o InstanceBackupStrategyOutput) ToInstanceBackupStrategyOutputWithContext(ctx context.Context) InstanceBackupStrategyOutput {
	return o
}

func (o InstanceBackupStrategyOutput) ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput {
	return o.ToInstanceBackupStrategyPtrOutputWithContext(context.Background())
}

func (o InstanceBackupStrategyOutput) ToInstanceBackupStrategyPtrOutputWithContext(ctx context.Context) InstanceBackupStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceBackupStrategy) *InstanceBackupStrategy {
		return &v
	}).(InstanceBackupStrategyPtrOutput)
}

func (o InstanceBackupStrategyOutput) KeepDays() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceBackupStrategy) int { return v.KeepDays }).(pulumi.IntOutput)
}

func (o InstanceBackupStrategyOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceBackupStrategy) *string { return v.Period }).(pulumi.StringPtrOutput)
}

func (o InstanceBackupStrategyOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceBackupStrategy) string { return v.StartTime }).(pulumi.StringOutput)
}

type InstanceBackupStrategyPtrOutput struct{ *pulumi.OutputState }

func (InstanceBackupStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceBackupStrategy)(nil)).Elem()
}

func (o InstanceBackupStrategyPtrOutput) ToInstanceBackupStrategyPtrOutput() InstanceBackupStrategyPtrOutput {
	return o
}

func (o InstanceBackupStrategyPtrOutput) ToInstanceBackupStrategyPtrOutputWithContext(ctx context.Context) InstanceBackupStrategyPtrOutput {
	return o
}

func (o InstanceBackupStrategyPtrOutput) Elem() InstanceBackupStrategyOutput {
	return o.ApplyT(func(v *InstanceBackupStrategy) InstanceBackupStrategy {
		if v != nil {
			return *v
		}
		var ret InstanceBackupStrategy
		return ret
	}).(InstanceBackupStrategyOutput)
}

func (o InstanceBackupStrategyPtrOutput) KeepDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceBackupStrategy) *int {
		if v == nil {
			return nil
		}
		return &v.KeepDays
	}).(pulumi.IntPtrOutput)
}

func (o InstanceBackupStrategyPtrOutput) Period() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBackupStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.StringPtrOutput)
}

func (o InstanceBackupStrategyPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceBackupStrategy) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type InstanceConfiguration struct {
	Id   string `pulumi:"id"`
	Type string `pulumi:"type"`
}

// InstanceConfigurationInput is an input type that accepts InstanceConfigurationArgs and InstanceConfigurationOutput values.
// You can construct a concrete instance of `InstanceConfigurationInput` via:
//
//	InstanceConfigurationArgs{...}
type InstanceConfigurationInput interface {
	pulumi.Input

	ToInstanceConfigurationOutput() InstanceConfigurationOutput
	ToInstanceConfigurationOutputWithContext(context.Context) InstanceConfigurationOutput
}

type InstanceConfigurationArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (InstanceConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfiguration)(nil)).Elem()
}

func (i InstanceConfigurationArgs) ToInstanceConfigurationOutput() InstanceConfigurationOutput {
	return i.ToInstanceConfigurationOutputWithContext(context.Background())
}

func (i InstanceConfigurationArgs) ToInstanceConfigurationOutputWithContext(ctx context.Context) InstanceConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigurationOutput)
}

// InstanceConfigurationArrayInput is an input type that accepts InstanceConfigurationArray and InstanceConfigurationArrayOutput values.
// You can construct a concrete instance of `InstanceConfigurationArrayInput` via:
//
//	InstanceConfigurationArray{ InstanceConfigurationArgs{...} }
type InstanceConfigurationArrayInput interface {
	pulumi.Input

	ToInstanceConfigurationArrayOutput() InstanceConfigurationArrayOutput
	ToInstanceConfigurationArrayOutputWithContext(context.Context) InstanceConfigurationArrayOutput
}

type InstanceConfigurationArray []InstanceConfigurationInput

func (InstanceConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfiguration)(nil)).Elem()
}

func (i InstanceConfigurationArray) ToInstanceConfigurationArrayOutput() InstanceConfigurationArrayOutput {
	return i.ToInstanceConfigurationArrayOutputWithContext(context.Background())
}

func (i InstanceConfigurationArray) ToInstanceConfigurationArrayOutputWithContext(ctx context.Context) InstanceConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigurationArrayOutput)
}

type InstanceConfigurationOutput struct{ *pulumi.OutputState }

func (InstanceConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfiguration)(nil)).Elem()
}

func (o InstanceConfigurationOutput) ToInstanceConfigurationOutput() InstanceConfigurationOutput {
	return o
}

func (o InstanceConfigurationOutput) ToInstanceConfigurationOutputWithContext(ctx context.Context) InstanceConfigurationOutput {
	return o
}

func (o InstanceConfigurationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfiguration) string { return v.Id }).(pulumi.StringOutput)
}

func (o InstanceConfigurationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceConfiguration) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceConfigurationArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfiguration)(nil)).Elem()
}

func (o InstanceConfigurationArrayOutput) ToInstanceConfigurationArrayOutput() InstanceConfigurationArrayOutput {
	return o
}

func (o InstanceConfigurationArrayOutput) ToInstanceConfigurationArrayOutputWithContext(ctx context.Context) InstanceConfigurationArrayOutput {
	return o
}

func (o InstanceConfigurationArrayOutput) Index(i pulumi.IntInput) InstanceConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceConfiguration {
		return vs[0].([]InstanceConfiguration)[vs[1].(int)]
	}).(InstanceConfigurationOutput)
}

type InstanceDatastore struct {
	StorageEngine *string `pulumi:"storageEngine"`
	Type          string  `pulumi:"type"`
	Version       string  `pulumi:"version"`
}

// InstanceDatastoreInput is an input type that accepts InstanceDatastoreArgs and InstanceDatastoreOutput values.
// You can construct a concrete instance of `InstanceDatastoreInput` via:
//
//	InstanceDatastoreArgs{...}
type InstanceDatastoreInput interface {
	pulumi.Input

	ToInstanceDatastoreOutput() InstanceDatastoreOutput
	ToInstanceDatastoreOutputWithContext(context.Context) InstanceDatastoreOutput
}

type InstanceDatastoreArgs struct {
	StorageEngine pulumi.StringPtrInput `pulumi:"storageEngine"`
	Type          pulumi.StringInput    `pulumi:"type"`
	Version       pulumi.StringInput    `pulumi:"version"`
}

func (InstanceDatastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatastore)(nil)).Elem()
}

func (i InstanceDatastoreArgs) ToInstanceDatastoreOutput() InstanceDatastoreOutput {
	return i.ToInstanceDatastoreOutputWithContext(context.Background())
}

func (i InstanceDatastoreArgs) ToInstanceDatastoreOutputWithContext(ctx context.Context) InstanceDatastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastoreOutput)
}

func (i InstanceDatastoreArgs) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return i.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (i InstanceDatastoreArgs) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastoreOutput).ToInstanceDatastorePtrOutputWithContext(ctx)
}

// InstanceDatastorePtrInput is an input type that accepts InstanceDatastoreArgs, InstanceDatastorePtr and InstanceDatastorePtrOutput values.
// You can construct a concrete instance of `InstanceDatastorePtrInput` via:
//
//	        InstanceDatastoreArgs{...}
//
//	or:
//
//	        nil
type InstanceDatastorePtrInput interface {
	pulumi.Input

	ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput
	ToInstanceDatastorePtrOutputWithContext(context.Context) InstanceDatastorePtrOutput
}

type instanceDatastorePtrType InstanceDatastoreArgs

func InstanceDatastorePtr(v *InstanceDatastoreArgs) InstanceDatastorePtrInput {
	return (*instanceDatastorePtrType)(v)
}

func (*instanceDatastorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDatastore)(nil)).Elem()
}

func (i *instanceDatastorePtrType) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return i.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (i *instanceDatastorePtrType) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDatastorePtrOutput)
}

type InstanceDatastoreOutput struct{ *pulumi.OutputState }

func (InstanceDatastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDatastore)(nil)).Elem()
}

func (o InstanceDatastoreOutput) ToInstanceDatastoreOutput() InstanceDatastoreOutput {
	return o
}

func (o InstanceDatastoreOutput) ToInstanceDatastoreOutputWithContext(ctx context.Context) InstanceDatastoreOutput {
	return o
}

func (o InstanceDatastoreOutput) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return o.ToInstanceDatastorePtrOutputWithContext(context.Background())
}

func (o InstanceDatastoreOutput) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceDatastore) *InstanceDatastore {
		return &v
	}).(InstanceDatastorePtrOutput)
}

func (o InstanceDatastoreOutput) StorageEngine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceDatastore) *string { return v.StorageEngine }).(pulumi.StringPtrOutput)
}

func (o InstanceDatastoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDatastore) string { return v.Type }).(pulumi.StringOutput)
}

func (o InstanceDatastoreOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDatastore) string { return v.Version }).(pulumi.StringOutput)
}

type InstanceDatastorePtrOutput struct{ *pulumi.OutputState }

func (InstanceDatastorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceDatastore)(nil)).Elem()
}

func (o InstanceDatastorePtrOutput) ToInstanceDatastorePtrOutput() InstanceDatastorePtrOutput {
	return o
}

func (o InstanceDatastorePtrOutput) ToInstanceDatastorePtrOutputWithContext(ctx context.Context) InstanceDatastorePtrOutput {
	return o
}

func (o InstanceDatastorePtrOutput) Elem() InstanceDatastoreOutput {
	return o.ApplyT(func(v *InstanceDatastore) InstanceDatastore {
		if v != nil {
			return *v
		}
		var ret InstanceDatastore
		return ret
	}).(InstanceDatastoreOutput)
}

func (o InstanceDatastorePtrOutput) StorageEngine() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceDatastore) *string {
		if v == nil {
			return nil
		}
		return v.StorageEngine
	}).(pulumi.StringPtrOutput)
}

func (o InstanceDatastorePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceDatastore) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

func (o InstanceDatastorePtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceDatastore) *string {
		if v == nil {
			return nil
		}
		return &v.Version
	}).(pulumi.StringPtrOutput)
}

type InstanceFlavor struct {
	Num      int     `pulumi:"num"`
	Size     *int    `pulumi:"size"`
	SpecCode string  `pulumi:"specCode"`
	Storage  *string `pulumi:"storage"`
	Type     string  `pulumi:"type"`
}

// InstanceFlavorInput is an input type that accepts InstanceFlavorArgs and InstanceFlavorOutput values.
// You can construct a concrete instance of `InstanceFlavorInput` via:
//
//	InstanceFlavorArgs{...}
type InstanceFlavorInput interface {
	pulumi.Input

	ToInstanceFlavorOutput() InstanceFlavorOutput
	ToInstanceFlavorOutputWithContext(context.Context) InstanceFlavorOutput
}

type InstanceFlavorArgs struct {
	Num      pulumi.IntInput       `pulumi:"num"`
	Size     pulumi.IntPtrInput    `pulumi:"size"`
	SpecCode pulumi.StringInput    `pulumi:"specCode"`
	Storage  pulumi.StringPtrInput `pulumi:"storage"`
	Type     pulumi.StringInput    `pulumi:"type"`
}

func (InstanceFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFlavor)(nil)).Elem()
}

func (i InstanceFlavorArgs) ToInstanceFlavorOutput() InstanceFlavorOutput {
	return i.ToInstanceFlavorOutputWithContext(context.Background())
}

func (i InstanceFlavorArgs) ToInstanceFlavorOutputWithContext(ctx context.Context) InstanceFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFlavorOutput)
}

// InstanceFlavorArrayInput is an input type that accepts InstanceFlavorArray and InstanceFlavorArrayOutput values.
// You can construct a concrete instance of `InstanceFlavorArrayInput` via:
//
//	InstanceFlavorArray{ InstanceFlavorArgs{...} }
type InstanceFlavorArrayInput interface {
	pulumi.Input

	ToInstanceFlavorArrayOutput() InstanceFlavorArrayOutput
	ToInstanceFlavorArrayOutputWithContext(context.Context) InstanceFlavorArrayOutput
}

type InstanceFlavorArray []InstanceFlavorInput

func (InstanceFlavorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFlavor)(nil)).Elem()
}

func (i InstanceFlavorArray) ToInstanceFlavorArrayOutput() InstanceFlavorArrayOutput {
	return i.ToInstanceFlavorArrayOutputWithContext(context.Background())
}

func (i InstanceFlavorArray) ToInstanceFlavorArrayOutputWithContext(ctx context.Context) InstanceFlavorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFlavorArrayOutput)
}

type InstanceFlavorOutput struct{ *pulumi.OutputState }

func (InstanceFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFlavor)(nil)).Elem()
}

func (o InstanceFlavorOutput) ToInstanceFlavorOutput() InstanceFlavorOutput {
	return o
}

func (o InstanceFlavorOutput) ToInstanceFlavorOutputWithContext(ctx context.Context) InstanceFlavorOutput {
	return o
}

func (o InstanceFlavorOutput) Num() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceFlavor) int { return v.Num }).(pulumi.IntOutput)
}

func (o InstanceFlavorOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceFlavor) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o InstanceFlavorOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFlavor) string { return v.SpecCode }).(pulumi.StringOutput)
}

func (o InstanceFlavorOutput) Storage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFlavor) *string { return v.Storage }).(pulumi.StringPtrOutput)
}

func (o InstanceFlavorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceFlavor) string { return v.Type }).(pulumi.StringOutput)
}

type InstanceFlavorArrayOutput struct{ *pulumi.OutputState }

func (InstanceFlavorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFlavor)(nil)).Elem()
}

func (o InstanceFlavorArrayOutput) ToInstanceFlavorArrayOutput() InstanceFlavorArrayOutput {
	return o
}

func (o InstanceFlavorArrayOutput) ToInstanceFlavorArrayOutputWithContext(ctx context.Context) InstanceFlavorArrayOutput {
	return o
}

func (o InstanceFlavorArrayOutput) Index(i pulumi.IntInput) InstanceFlavorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFlavor {
		return vs[0].([]InstanceFlavor)[vs[1].(int)]
	}).(InstanceFlavorOutput)
}

type InstanceGroup struct {
	Id     *string             `pulumi:"id"`
	Name   *string             `pulumi:"name"`
	Nodes  []InstanceGroupNode `pulumi:"nodes"`
	Size   *string             `pulumi:"size"`
	Status *string             `pulumi:"status"`
	Type   *string             `pulumi:"type"`
	Used   *string             `pulumi:"used"`
}

// InstanceGroupInput is an input type that accepts InstanceGroupArgs and InstanceGroupOutput values.
// You can construct a concrete instance of `InstanceGroupInput` via:
//
//	InstanceGroupArgs{...}
type InstanceGroupInput interface {
	pulumi.Input

	ToInstanceGroupOutput() InstanceGroupOutput
	ToInstanceGroupOutputWithContext(context.Context) InstanceGroupOutput
}

type InstanceGroupArgs struct {
	Id     pulumi.StringPtrInput       `pulumi:"id"`
	Name   pulumi.StringPtrInput       `pulumi:"name"`
	Nodes  InstanceGroupNodeArrayInput `pulumi:"nodes"`
	Size   pulumi.StringPtrInput       `pulumi:"size"`
	Status pulumi.StringPtrInput       `pulumi:"status"`
	Type   pulumi.StringPtrInput       `pulumi:"type"`
	Used   pulumi.StringPtrInput       `pulumi:"used"`
}

func (InstanceGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroup)(nil)).Elem()
}

func (i InstanceGroupArgs) ToInstanceGroupOutput() InstanceGroupOutput {
	return i.ToInstanceGroupOutputWithContext(context.Background())
}

func (i InstanceGroupArgs) ToInstanceGroupOutputWithContext(ctx context.Context) InstanceGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupOutput)
}

// InstanceGroupArrayInput is an input type that accepts InstanceGroupArray and InstanceGroupArrayOutput values.
// You can construct a concrete instance of `InstanceGroupArrayInput` via:
//
//	InstanceGroupArray{ InstanceGroupArgs{...} }
type InstanceGroupArrayInput interface {
	pulumi.Input

	ToInstanceGroupArrayOutput() InstanceGroupArrayOutput
	ToInstanceGroupArrayOutputWithContext(context.Context) InstanceGroupArrayOutput
}

type InstanceGroupArray []InstanceGroupInput

func (InstanceGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroup)(nil)).Elem()
}

func (i InstanceGroupArray) ToInstanceGroupArrayOutput() InstanceGroupArrayOutput {
	return i.ToInstanceGroupArrayOutputWithContext(context.Background())
}

func (i InstanceGroupArray) ToInstanceGroupArrayOutputWithContext(ctx context.Context) InstanceGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupArrayOutput)
}

type InstanceGroupOutput struct{ *pulumi.OutputState }

func (InstanceGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroup)(nil)).Elem()
}

func (o InstanceGroupOutput) ToInstanceGroupOutput() InstanceGroupOutput {
	return o
}

func (o InstanceGroupOutput) ToInstanceGroupOutputWithContext(ctx context.Context) InstanceGroupOutput {
	return o
}

func (o InstanceGroupOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroup) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o InstanceGroupOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroup) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o InstanceGroupOutput) Nodes() InstanceGroupNodeArrayOutput {
	return o.ApplyT(func(v InstanceGroup) []InstanceGroupNode { return v.Nodes }).(InstanceGroupNodeArrayOutput)
}

func (o InstanceGroupOutput) Size() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroup) *string { return v.Size }).(pulumi.StringPtrOutput)
}

func (o InstanceGroupOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroup) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o InstanceGroupOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroup) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o InstanceGroupOutput) Used() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroup) *string { return v.Used }).(pulumi.StringPtrOutput)
}

type InstanceGroupArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroup)(nil)).Elem()
}

func (o InstanceGroupArrayOutput) ToInstanceGroupArrayOutput() InstanceGroupArrayOutput {
	return o
}

func (o InstanceGroupArrayOutput) ToInstanceGroupArrayOutputWithContext(ctx context.Context) InstanceGroupArrayOutput {
	return o
}

func (o InstanceGroupArrayOutput) Index(i pulumi.IntInput) InstanceGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroup {
		return vs[0].([]InstanceGroup)[vs[1].(int)]
	}).(InstanceGroupOutput)
}

type InstanceGroupNode struct {
	// Indicates the node ID.
	Id *string `pulumi:"id"`
	// Indicates the node name.
	Name *string `pulumi:"name"`
	// Indicates the private IP address of a node.
	PrivateIp *string `pulumi:"privateIp"`
	// Indicates the EIP that has been bound on a node.
	PublicIp *string `pulumi:"publicIp"`
	// Indicates the node role.
	Role *string `pulumi:"role"`
	// Indicates the node status.
	Status *string `pulumi:"status"`
	// Indicates the node type.
	Type *string `pulumi:"type"`
}

// InstanceGroupNodeInput is an input type that accepts InstanceGroupNodeArgs and InstanceGroupNodeOutput values.
// You can construct a concrete instance of `InstanceGroupNodeInput` via:
//
//	InstanceGroupNodeArgs{...}
type InstanceGroupNodeInput interface {
	pulumi.Input

	ToInstanceGroupNodeOutput() InstanceGroupNodeOutput
	ToInstanceGroupNodeOutputWithContext(context.Context) InstanceGroupNodeOutput
}

type InstanceGroupNodeArgs struct {
	// Indicates the node ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Indicates the node name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates the private IP address of a node.
	PrivateIp pulumi.StringPtrInput `pulumi:"privateIp"`
	// Indicates the EIP that has been bound on a node.
	PublicIp pulumi.StringPtrInput `pulumi:"publicIp"`
	// Indicates the node role.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Indicates the node status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates the node type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceGroupNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupNode)(nil)).Elem()
}

func (i InstanceGroupNodeArgs) ToInstanceGroupNodeOutput() InstanceGroupNodeOutput {
	return i.ToInstanceGroupNodeOutputWithContext(context.Background())
}

func (i InstanceGroupNodeArgs) ToInstanceGroupNodeOutputWithContext(ctx context.Context) InstanceGroupNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNodeOutput)
}

// InstanceGroupNodeArrayInput is an input type that accepts InstanceGroupNodeArray and InstanceGroupNodeArrayOutput values.
// You can construct a concrete instance of `InstanceGroupNodeArrayInput` via:
//
//	InstanceGroupNodeArray{ InstanceGroupNodeArgs{...} }
type InstanceGroupNodeArrayInput interface {
	pulumi.Input

	ToInstanceGroupNodeArrayOutput() InstanceGroupNodeArrayOutput
	ToInstanceGroupNodeArrayOutputWithContext(context.Context) InstanceGroupNodeArrayOutput
}

type InstanceGroupNodeArray []InstanceGroupNodeInput

func (InstanceGroupNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupNode)(nil)).Elem()
}

func (i InstanceGroupNodeArray) ToInstanceGroupNodeArrayOutput() InstanceGroupNodeArrayOutput {
	return i.ToInstanceGroupNodeArrayOutputWithContext(context.Background())
}

func (i InstanceGroupNodeArray) ToInstanceGroupNodeArrayOutputWithContext(ctx context.Context) InstanceGroupNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGroupNodeArrayOutput)
}

type InstanceGroupNodeOutput struct{ *pulumi.OutputState }

func (InstanceGroupNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGroupNode)(nil)).Elem()
}

func (o InstanceGroupNodeOutput) ToInstanceGroupNodeOutput() InstanceGroupNodeOutput {
	return o
}

func (o InstanceGroupNodeOutput) ToInstanceGroupNodeOutputWithContext(ctx context.Context) InstanceGroupNodeOutput {
	return o
}

// Indicates the node ID.
func (o InstanceGroupNodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupNode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Indicates the node name.
func (o InstanceGroupNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Indicates the private IP address of a node.
func (o InstanceGroupNodeOutput) PrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupNode) *string { return v.PrivateIp }).(pulumi.StringPtrOutput)
}

// Indicates the EIP that has been bound on a node.
func (o InstanceGroupNodeOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupNode) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

// Indicates the node role.
func (o InstanceGroupNodeOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupNode) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Indicates the node status.
func (o InstanceGroupNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates the node type.
func (o InstanceGroupNodeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGroupNode) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceGroupNodeArrayOutput struct{ *pulumi.OutputState }

func (InstanceGroupNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGroupNode)(nil)).Elem()
}

func (o InstanceGroupNodeArrayOutput) ToInstanceGroupNodeArrayOutput() InstanceGroupNodeArrayOutput {
	return o
}

func (o InstanceGroupNodeArrayOutput) ToInstanceGroupNodeArrayOutputWithContext(ctx context.Context) InstanceGroupNodeArrayOutput {
	return o
}

func (o InstanceGroupNodeArrayOutput) Index(i pulumi.IntInput) InstanceGroupNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGroupNode {
		return vs[0].([]InstanceGroupNode)[vs[1].(int)]
	}).(InstanceGroupNodeOutput)
}

type InstanceNode struct {
	// Indicates the node ID.
	Id *string `pulumi:"id"`
	// Indicates the node name.
	Name *string `pulumi:"name"`
	// Indicates the private IP address of a node.
	PrivateIp *string `pulumi:"privateIp"`
	// Indicates the EIP that has been bound on a node.
	PublicIp *string `pulumi:"publicIp"`
	// Indicates the node role.
	Role *string `pulumi:"role"`
	// Indicates the node status.
	Status *string `pulumi:"status"`
	// Indicates the node type.
	Type *string `pulumi:"type"`
}

// InstanceNodeInput is an input type that accepts InstanceNodeArgs and InstanceNodeOutput values.
// You can construct a concrete instance of `InstanceNodeInput` via:
//
//	InstanceNodeArgs{...}
type InstanceNodeInput interface {
	pulumi.Input

	ToInstanceNodeOutput() InstanceNodeOutput
	ToInstanceNodeOutputWithContext(context.Context) InstanceNodeOutput
}

type InstanceNodeArgs struct {
	// Indicates the node ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Indicates the node name.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Indicates the private IP address of a node.
	PrivateIp pulumi.StringPtrInput `pulumi:"privateIp"`
	// Indicates the EIP that has been bound on a node.
	PublicIp pulumi.StringPtrInput `pulumi:"publicIp"`
	// Indicates the node role.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Indicates the node status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Indicates the node type.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArgs) ToInstanceNodeOutput() InstanceNodeOutput {
	return i.ToInstanceNodeOutputWithContext(context.Background())
}

func (i InstanceNodeArgs) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeOutput)
}

// InstanceNodeArrayInput is an input type that accepts InstanceNodeArray and InstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstanceNodeArrayInput` via:
//
//	InstanceNodeArray{ InstanceNodeArgs{...} }
type InstanceNodeArrayInput interface {
	pulumi.Input

	ToInstanceNodeArrayOutput() InstanceNodeArrayOutput
	ToInstanceNodeArrayOutputWithContext(context.Context) InstanceNodeArrayOutput
}

type InstanceNodeArray []InstanceNodeInput

func (InstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return i.ToInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeArrayOutput)
}

type InstanceNodeOutput struct{ *pulumi.OutputState }

func (InstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (o InstanceNodeOutput) ToInstanceNodeOutput() InstanceNodeOutput {
	return o
}

func (o InstanceNodeOutput) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return o
}

// Indicates the node ID.
func (o InstanceNodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Indicates the node name.
func (o InstanceNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Indicates the private IP address of a node.
func (o InstanceNodeOutput) PrivateIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.PrivateIp }).(pulumi.StringPtrOutput)
}

// Indicates the EIP that has been bound on a node.
func (o InstanceNodeOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

// Indicates the node role.
func (o InstanceNodeOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Indicates the node status.
func (o InstanceNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates the node type.
func (o InstanceNodeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) Index(i pulumi.IntInput) InstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNode {
		return vs[0].([]InstanceNode)[vs[1].(int)]
	}).(InstanceNodeOutput)
}

type GetFlavorsFlavor struct {
	Memory   string `pulumi:"memory"`
	SpecCode string `pulumi:"specCode"`
	Type     string `pulumi:"type"`
	Vcpus    string `pulumi:"vcpus"`
}

// GetFlavorsFlavorInput is an input type that accepts GetFlavorsFlavorArgs and GetFlavorsFlavorOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorInput` via:
//
//	GetFlavorsFlavorArgs{...}
type GetFlavorsFlavorInput interface {
	pulumi.Input

	ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput
	ToGetFlavorsFlavorOutputWithContext(context.Context) GetFlavorsFlavorOutput
}

type GetFlavorsFlavorArgs struct {
	Memory   pulumi.StringInput `pulumi:"memory"`
	SpecCode pulumi.StringInput `pulumi:"specCode"`
	Type     pulumi.StringInput `pulumi:"type"`
	Vcpus    pulumi.StringInput `pulumi:"vcpus"`
}

func (GetFlavorsFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return i.ToGetFlavorsFlavorOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorOutput)
}

// GetFlavorsFlavorArrayInput is an input type that accepts GetFlavorsFlavorArray and GetFlavorsFlavorArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorArrayInput` via:
//
//	GetFlavorsFlavorArray{ GetFlavorsFlavorArgs{...} }
type GetFlavorsFlavorArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput
	ToGetFlavorsFlavorArrayOutputWithContext(context.Context) GetFlavorsFlavorArrayOutput
}

type GetFlavorsFlavorArray []GetFlavorsFlavorInput

func (GetFlavorsFlavorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return i.ToGetFlavorsFlavorArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorArrayOutput)
}

type GetFlavorsFlavorOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) Memory() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Memory }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.SpecCode }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetFlavorsFlavorOutput) Vcpus() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Vcpus }).(pulumi.StringOutput)
}

type GetFlavorsFlavorArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavor {
		return vs[0].([]GetFlavorsFlavor)[vs[1].(int)]
	}).(GetFlavorsFlavorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBackupStrategyInput)(nil)).Elem(), InstanceBackupStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceBackupStrategyPtrInput)(nil)).Elem(), InstanceBackupStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigurationInput)(nil)).Elem(), InstanceConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigurationArrayInput)(nil)).Elem(), InstanceConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDatastoreInput)(nil)).Elem(), InstanceDatastoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDatastorePtrInput)(nil)).Elem(), InstanceDatastoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFlavorInput)(nil)).Elem(), InstanceFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFlavorArrayInput)(nil)).Elem(), InstanceFlavorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupInput)(nil)).Elem(), InstanceGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupArrayInput)(nil)).Elem(), InstanceGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupNodeInput)(nil)).Elem(), InstanceGroupNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGroupNodeArrayInput)(nil)).Elem(), InstanceGroupNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeInput)(nil)).Elem(), InstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeArrayInput)(nil)).Elem(), InstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorInput)(nil)).Elem(), GetFlavorsFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorArrayInput)(nil)).Elem(), GetFlavorsFlavorArray{})
	pulumi.RegisterOutputType(InstanceBackupStrategyOutput{})
	pulumi.RegisterOutputType(InstanceBackupStrategyPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigurationOutput{})
	pulumi.RegisterOutputType(InstanceConfigurationArrayOutput{})
	pulumi.RegisterOutputType(InstanceDatastoreOutput{})
	pulumi.RegisterOutputType(InstanceDatastorePtrOutput{})
	pulumi.RegisterOutputType(InstanceFlavorOutput{})
	pulumi.RegisterOutputType(InstanceFlavorArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupOutput{})
	pulumi.RegisterOutputType(InstanceGroupArrayOutput{})
	pulumi.RegisterOutputType(InstanceGroupNodeOutput{})
	pulumi.RegisterOutputType(InstanceGroupNodeArrayOutput{})
	pulumi.RegisterOutputType(InstanceNodeOutput{})
	pulumi.RegisterOutputType(InstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorArrayOutput{})
}

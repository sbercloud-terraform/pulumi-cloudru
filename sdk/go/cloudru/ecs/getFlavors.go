// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the ID of the available Compute Flavors.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			flavors, err := ecs.GetFlavors(ctx, &ecs.GetFlavorsArgs{
//				AvailabilityZone: pulumi.StringRef("ru-moscow-1a"),
//				PerformanceType:  pulumi.StringRef("normal"),
//				CpuCoreCount:     pulumi.IntRef(2),
//				MemorySize:       pulumi.IntRef(4),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create ECS instance with the first matched flavor
//			_, err = ecs.NewInstance(ctx, "instance", &ecs.InstanceArgs{
//				FlavorId: pulumi.String(flavors.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Additional Examples
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			flavors, err := ecs.GetFlavors(ctx, &ecs.GetFlavorsArgs{
//				AvailabilityZone: pulumi.StringRef("ru-moscow-1a"),
//				PerformanceType:  pulumi.StringRef("normal"),
//				CpuCoreCount:     pulumi.IntRef(2),
//				MemorySize:       pulumi.IntRef(4),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// Create ECS instance with the first matched flavor
//			_, err = ecs.NewInstance(ctx, "instance", &ecs.InstanceArgs{
//				FlavorId: pulumi.String(flavors.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## subcategory: "Elastic Cloud Server (ECS)"
//
// ***
//
// # sbercloud\_compute\_flavors
//
// Use this data source to get the ID of the available Compute Flavors.
func GetFlavors(ctx *pulumi.Context, args *GetFlavorsArgs, opts ...pulumi.InvokeOption) (*GetFlavorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFlavorsResult
	err := ctx.Invoke("sbercloud:Ecs/getFlavors:getFlavors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlavors.
type GetFlavorsArgs struct {
	// Specifies the AZ name.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Specifies the number of vCPUs in the ECS flavor.
	CpuCoreCount *int `pulumi:"cpuCoreCount"`
	// Specifies the generation of an ECS type.
	Generation *string `pulumi:"generation"`
	// Specifies the memory size(GB) in the ECS flavor.
	MemorySize *int `pulumi:"memorySize"`
	// Specifies the ECS flavor type.
	PerformanceType *string `pulumi:"performanceType"`
	// The region in which to obtain the flavors. If omitted, the provider-level region will be used.
	Region      *string `pulumi:"region"`
	StorageType *string `pulumi:"storageType"`
}

// A collection of values returned by getFlavors.
type GetFlavorsResult struct {
	AvailabilityZone *string            `pulumi:"availabilityZone"`
	CpuCoreCount     *int               `pulumi:"cpuCoreCount"`
	Flavors          []GetFlavorsFlavor `pulumi:"flavors"`
	Generation       *string            `pulumi:"generation"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of flavor IDs.
	Ids             []string `pulumi:"ids"`
	MemorySize      *int     `pulumi:"memorySize"`
	PerformanceType *string  `pulumi:"performanceType"`
	Region          string   `pulumi:"region"`
	StorageType     *string  `pulumi:"storageType"`
}

func GetFlavorsOutput(ctx *pulumi.Context, args GetFlavorsOutputArgs, opts ...pulumi.InvokeOption) GetFlavorsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetFlavorsResultOutput, error) {
			args := v.(GetFlavorsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Ecs/getFlavors:getFlavors", args, GetFlavorsResultOutput{}, options).(GetFlavorsResultOutput), nil
		}).(GetFlavorsResultOutput)
}

// A collection of arguments for invoking getFlavors.
type GetFlavorsOutputArgs struct {
	// Specifies the AZ name.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// Specifies the number of vCPUs in the ECS flavor.
	CpuCoreCount pulumi.IntPtrInput `pulumi:"cpuCoreCount"`
	// Specifies the generation of an ECS type.
	Generation pulumi.StringPtrInput `pulumi:"generation"`
	// Specifies the memory size(GB) in the ECS flavor.
	MemorySize pulumi.IntPtrInput `pulumi:"memorySize"`
	// Specifies the ECS flavor type.
	PerformanceType pulumi.StringPtrInput `pulumi:"performanceType"`
	// The region in which to obtain the flavors. If omitted, the provider-level region will be used.
	Region      pulumi.StringPtrInput `pulumi:"region"`
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
}

func (GetFlavorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsArgs)(nil)).Elem()
}

// A collection of values returned by getFlavors.
type GetFlavorsResultOutput struct{ *pulumi.OutputState }

func (GetFlavorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsResult)(nil)).Elem()
}

func (o GetFlavorsResultOutput) ToGetFlavorsResultOutput() GetFlavorsResultOutput {
	return o
}

func (o GetFlavorsResultOutput) ToGetFlavorsResultOutputWithContext(ctx context.Context) GetFlavorsResultOutput {
	return o
}

func (o GetFlavorsResultOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

func (o GetFlavorsResultOutput) CpuCoreCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *int { return v.CpuCoreCount }).(pulumi.IntPtrOutput)
}

func (o GetFlavorsResultOutput) Flavors() GetFlavorsFlavorArrayOutput {
	return o.ApplyT(func(v GetFlavorsResult) []GetFlavorsFlavor { return v.Flavors }).(GetFlavorsFlavorArrayOutput)
}

func (o GetFlavorsResultOutput) Generation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.Generation }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFlavorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of flavor IDs.
func (o GetFlavorsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFlavorsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetFlavorsResultOutput) MemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *int { return v.MemorySize }).(pulumi.IntPtrOutput)
}

func (o GetFlavorsResultOutput) PerformanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.PerformanceType }).(pulumi.StringPtrOutput)
}

func (o GetFlavorsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetFlavorsResultOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlavorsResult) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFlavorsResultOutput{})
}

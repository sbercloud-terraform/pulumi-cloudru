// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DdsParameterTemplateApply struct {
	pulumi.CustomResourceState

	// Specifies the parameter template ID.
	ConfigurationId pulumi.StringOutput `pulumi:"configurationId"`
	// Specifies the entity IDs.
	EntityIds pulumi.StringArrayOutput `pulumi:"entityIds"`
	Region    pulumi.StringOutput      `pulumi:"region"`
}

// NewDdsParameterTemplateApply registers a new resource with the given unique name, arguments, and options.
func NewDdsParameterTemplateApply(ctx *pulumi.Context,
	name string, args *DdsParameterTemplateApplyArgs, opts ...pulumi.ResourceOption) (*DdsParameterTemplateApply, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigurationId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationId'")
	}
	if args.EntityIds == nil {
		return nil, errors.New("invalid value for required argument 'EntityIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DdsParameterTemplateApply
	err := ctx.RegisterResource("cloudru:index/ddsParameterTemplateApply:DdsParameterTemplateApply", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDdsParameterTemplateApply gets an existing DdsParameterTemplateApply resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDdsParameterTemplateApply(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DdsParameterTemplateApplyState, opts ...pulumi.ResourceOption) (*DdsParameterTemplateApply, error) {
	var resource DdsParameterTemplateApply
	err := ctx.ReadResource("cloudru:index/ddsParameterTemplateApply:DdsParameterTemplateApply", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DdsParameterTemplateApply resources.
type ddsParameterTemplateApplyState struct {
	// Specifies the parameter template ID.
	ConfigurationId *string `pulumi:"configurationId"`
	// Specifies the entity IDs.
	EntityIds []string `pulumi:"entityIds"`
	Region    *string  `pulumi:"region"`
}

type DdsParameterTemplateApplyState struct {
	// Specifies the parameter template ID.
	ConfigurationId pulumi.StringPtrInput
	// Specifies the entity IDs.
	EntityIds pulumi.StringArrayInput
	Region    pulumi.StringPtrInput
}

func (DdsParameterTemplateApplyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ddsParameterTemplateApplyState)(nil)).Elem()
}

type ddsParameterTemplateApplyArgs struct {
	// Specifies the parameter template ID.
	ConfigurationId string `pulumi:"configurationId"`
	// Specifies the entity IDs.
	EntityIds []string `pulumi:"entityIds"`
	Region    *string  `pulumi:"region"`
}

// The set of arguments for constructing a DdsParameterTemplateApply resource.
type DdsParameterTemplateApplyArgs struct {
	// Specifies the parameter template ID.
	ConfigurationId pulumi.StringInput
	// Specifies the entity IDs.
	EntityIds pulumi.StringArrayInput
	Region    pulumi.StringPtrInput
}

func (DdsParameterTemplateApplyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ddsParameterTemplateApplyArgs)(nil)).Elem()
}

type DdsParameterTemplateApplyInput interface {
	pulumi.Input

	ToDdsParameterTemplateApplyOutput() DdsParameterTemplateApplyOutput
	ToDdsParameterTemplateApplyOutputWithContext(ctx context.Context) DdsParameterTemplateApplyOutput
}

func (*DdsParameterTemplateApply) ElementType() reflect.Type {
	return reflect.TypeOf((**DdsParameterTemplateApply)(nil)).Elem()
}

func (i *DdsParameterTemplateApply) ToDdsParameterTemplateApplyOutput() DdsParameterTemplateApplyOutput {
	return i.ToDdsParameterTemplateApplyOutputWithContext(context.Background())
}

func (i *DdsParameterTemplateApply) ToDdsParameterTemplateApplyOutputWithContext(ctx context.Context) DdsParameterTemplateApplyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdsParameterTemplateApplyOutput)
}

// DdsParameterTemplateApplyArrayInput is an input type that accepts DdsParameterTemplateApplyArray and DdsParameterTemplateApplyArrayOutput values.
// You can construct a concrete instance of `DdsParameterTemplateApplyArrayInput` via:
//
//	DdsParameterTemplateApplyArray{ DdsParameterTemplateApplyArgs{...} }
type DdsParameterTemplateApplyArrayInput interface {
	pulumi.Input

	ToDdsParameterTemplateApplyArrayOutput() DdsParameterTemplateApplyArrayOutput
	ToDdsParameterTemplateApplyArrayOutputWithContext(context.Context) DdsParameterTemplateApplyArrayOutput
}

type DdsParameterTemplateApplyArray []DdsParameterTemplateApplyInput

func (DdsParameterTemplateApplyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DdsParameterTemplateApply)(nil)).Elem()
}

func (i DdsParameterTemplateApplyArray) ToDdsParameterTemplateApplyArrayOutput() DdsParameterTemplateApplyArrayOutput {
	return i.ToDdsParameterTemplateApplyArrayOutputWithContext(context.Background())
}

func (i DdsParameterTemplateApplyArray) ToDdsParameterTemplateApplyArrayOutputWithContext(ctx context.Context) DdsParameterTemplateApplyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdsParameterTemplateApplyArrayOutput)
}

// DdsParameterTemplateApplyMapInput is an input type that accepts DdsParameterTemplateApplyMap and DdsParameterTemplateApplyMapOutput values.
// You can construct a concrete instance of `DdsParameterTemplateApplyMapInput` via:
//
//	DdsParameterTemplateApplyMap{ "key": DdsParameterTemplateApplyArgs{...} }
type DdsParameterTemplateApplyMapInput interface {
	pulumi.Input

	ToDdsParameterTemplateApplyMapOutput() DdsParameterTemplateApplyMapOutput
	ToDdsParameterTemplateApplyMapOutputWithContext(context.Context) DdsParameterTemplateApplyMapOutput
}

type DdsParameterTemplateApplyMap map[string]DdsParameterTemplateApplyInput

func (DdsParameterTemplateApplyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DdsParameterTemplateApply)(nil)).Elem()
}

func (i DdsParameterTemplateApplyMap) ToDdsParameterTemplateApplyMapOutput() DdsParameterTemplateApplyMapOutput {
	return i.ToDdsParameterTemplateApplyMapOutputWithContext(context.Background())
}

func (i DdsParameterTemplateApplyMap) ToDdsParameterTemplateApplyMapOutputWithContext(ctx context.Context) DdsParameterTemplateApplyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdsParameterTemplateApplyMapOutput)
}

type DdsParameterTemplateApplyOutput struct{ *pulumi.OutputState }

func (DdsParameterTemplateApplyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DdsParameterTemplateApply)(nil)).Elem()
}

func (o DdsParameterTemplateApplyOutput) ToDdsParameterTemplateApplyOutput() DdsParameterTemplateApplyOutput {
	return o
}

func (o DdsParameterTemplateApplyOutput) ToDdsParameterTemplateApplyOutputWithContext(ctx context.Context) DdsParameterTemplateApplyOutput {
	return o
}

// Specifies the parameter template ID.
func (o DdsParameterTemplateApplyOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *DdsParameterTemplateApply) pulumi.StringOutput { return v.ConfigurationId }).(pulumi.StringOutput)
}

// Specifies the entity IDs.
func (o DdsParameterTemplateApplyOutput) EntityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DdsParameterTemplateApply) pulumi.StringArrayOutput { return v.EntityIds }).(pulumi.StringArrayOutput)
}

func (o DdsParameterTemplateApplyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DdsParameterTemplateApply) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type DdsParameterTemplateApplyArrayOutput struct{ *pulumi.OutputState }

func (DdsParameterTemplateApplyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DdsParameterTemplateApply)(nil)).Elem()
}

func (o DdsParameterTemplateApplyArrayOutput) ToDdsParameterTemplateApplyArrayOutput() DdsParameterTemplateApplyArrayOutput {
	return o
}

func (o DdsParameterTemplateApplyArrayOutput) ToDdsParameterTemplateApplyArrayOutputWithContext(ctx context.Context) DdsParameterTemplateApplyArrayOutput {
	return o
}

func (o DdsParameterTemplateApplyArrayOutput) Index(i pulumi.IntInput) DdsParameterTemplateApplyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DdsParameterTemplateApply {
		return vs[0].([]*DdsParameterTemplateApply)[vs[1].(int)]
	}).(DdsParameterTemplateApplyOutput)
}

type DdsParameterTemplateApplyMapOutput struct{ *pulumi.OutputState }

func (DdsParameterTemplateApplyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DdsParameterTemplateApply)(nil)).Elem()
}

func (o DdsParameterTemplateApplyMapOutput) ToDdsParameterTemplateApplyMapOutput() DdsParameterTemplateApplyMapOutput {
	return o
}

func (o DdsParameterTemplateApplyMapOutput) ToDdsParameterTemplateApplyMapOutputWithContext(ctx context.Context) DdsParameterTemplateApplyMapOutput {
	return o
}

func (o DdsParameterTemplateApplyMapOutput) MapIndex(k pulumi.StringInput) DdsParameterTemplateApplyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DdsParameterTemplateApply {
		return vs[0].(map[string]*DdsParameterTemplateApply)[vs[1].(string)]
	}).(DdsParameterTemplateApplyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DdsParameterTemplateApplyInput)(nil)).Elem(), &DdsParameterTemplateApply{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdsParameterTemplateApplyArrayInput)(nil)).Elem(), DdsParameterTemplateApplyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdsParameterTemplateApplyMapInput)(nil)).Elem(), DdsParameterTemplateApplyMap{})
	pulumi.RegisterOutputType(DdsParameterTemplateApplyOutput{})
	pulumi.RegisterOutputType(DdsParameterTemplateApplyArrayOutput{})
	pulumi.RegisterOutputType(DdsParameterTemplateApplyMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApigApplicationQuotaAssociateApplication {
    /**
     * The binding time, in RFC3339 format.
     */
    bindTime?: pulumi.Input<string>;
    /**
     * The application ID bound to the application quota.
     */
    id: pulumi.Input<string>;
}

export interface ApigChannelHealthCheck {
    /**
     * Whether to enable two-way authentication.
     */
    enableClientSsl?: pulumi.Input<boolean>;
    /**
     * The response codes for determining a successful HTTP response.
     */
    httpCodes?: pulumi.Input<string>;
    /**
     * The interval between consecutive check, in second.
     */
    interval: pulumi.Input<number>;
    /**
     * The request method for health check.
     */
    method?: pulumi.Input<string>;
    /**
     * The destination path for health check.
     */
    path?: pulumi.Input<string>;
    /**
     * The destination host port for health check.
     */
    port?: pulumi.Input<number>;
    /**
     * The rotocol for performing health check on backend servers.
     */
    protocol: pulumi.Input<string>;
    /**
     * The status of health check.
     */
    status?: pulumi.Input<number>;
    /**
     * The unhealthy threshold, which refers to the number of consecutive failed check required for a backend server to be considered unhealthy.
     */
    thresholdAbnormal: pulumi.Input<number>;
    /**
     * The the healthy threshold, which refers to the number of consecutive successful checks required for a backend server to be considered healthy.
     */
    thresholdNormal: pulumi.Input<number>;
    /**
     * The timeout for determining whether a health check fails, in second.
     */
    timeout: pulumi.Input<number>;
}

export interface ApigChannelMember {
    /**
     * The group name of the backend server.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The IP address of the backend server.
     */
    host?: pulumi.Input<string>;
    /**
     * The ID of the backend server.
     */
    id?: pulumi.Input<string>;
    /**
     * Whether this member is the backup member.
     */
    isBackup?: pulumi.Input<boolean>;
    /**
     * The name of the backend server.
     */
    name?: pulumi.Input<string>;
    /**
     * The port of the backend server.
     */
    port?: pulumi.Input<number>;
    /**
     * The status of the backend server.
     */
    status?: pulumi.Input<number>;
    /**
     * The weight of current backend server.
     */
    weight?: pulumi.Input<number>;
}

export interface ApigChannelMemberGroup {
    /**
     * The description of the member group.
     */
    description?: pulumi.Input<string>;
    /**
     * The microservice tags of the backend server group.
     */
    microserviceLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The microservice port of the backend server group.
     */
    microservicePort?: pulumi.Input<number>;
    /**
     * The microservice version of the backend server group.
     */
    microserviceVersion?: pulumi.Input<string>;
    /**
     * The name of the member group.
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the reference load balance channel.
     */
    referenceVpcChannelId?: pulumi.Input<string>;
    /**
     * The weight of the current member group.
     */
    weight?: pulumi.Input<number>;
}

export interface ApigChannelMicroservice {
    /**
     * The CCE microservice details.
     */
    cceConfig?: pulumi.Input<inputs.ApigChannelMicroserviceCceConfig>;
    /**
     * schema:Internal; The CSE microservice details.
     */
    cseConfig?: pulumi.Input<inputs.ApigChannelMicroserviceCseConfig>;
}

export interface ApigChannelMicroserviceCceConfig {
    /**
     * The ID of the CCE cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The service label key.
     */
    labelKey?: pulumi.Input<string>;
    /**
     * The service label value.
     */
    labelValue?: pulumi.Input<string>;
    /**
     * The name of the CCE namespace.
     */
    namespace: pulumi.Input<string>;
    /**
     * The workload name.
     */
    workloadName?: pulumi.Input<string>;
    /**
     * The workload type.
     */
    workloadType: pulumi.Input<string>;
}

export interface ApigChannelMicroserviceCseConfig {
    /**
     * schema:Internal; The microservice engine ID.
     */
    engineId: pulumi.Input<string>;
    /**
     * schema:Internal; The microservice ID.
     */
    serviceId: pulumi.Input<string>;
}

export interface CbrBackupShareMember {
    /**
     * The creation time of the backup shared member.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The ID of the project with which the backup is shared.
     */
    destProjectId: pulumi.Input<string>;
    /**
     * The ID of the backup shared member record.
     */
    id?: pulumi.Input<string>;
    /**
     * The ID of the image registered with the shared backup copy.
     */
    imageId?: pulumi.Input<string>;
    /**
     * The backup shared status.
     */
    status?: pulumi.Input<string>;
    /**
     * The latest update time of the backup shared member.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The ID of the vault where the shared backup is stored.
     */
    vaultId?: pulumi.Input<string>;
}

export interface CbrCheckpointBackup {
    /**
     * The backup ID.
     */
    id?: pulumi.Input<string>;
    /**
     * The backup time.
     */
    protectedAt?: pulumi.Input<string>;
    /**
     * The ID of backup resource.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The backup resource size.
     */
    resourceSize?: pulumi.Input<number>;
    /**
     * The backup status.
     */
    status?: pulumi.Input<string>;
    /**
     * The type of the backup resource.
     */
    type: pulumi.Input<string>;
    /**
     * The latest update time of the backup.
     */
    updatedAt?: pulumi.Input<string>;
}

export interface DcsParametersConfigurationParameter {
    /**
     * Indicates the parameter name.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether a restart is required.
     */
    needRestart?: pulumi.Input<boolean>;
    /**
     * Indicates the parameter type.
     */
    type?: pulumi.Input<string>;
    /**
     * Indicates a user permission
     */
    userPermission?: pulumi.Input<string>;
    /**
     * Indicates the parameter value.
     */
    value?: pulumi.Input<string>;
}

export interface DcsRestoreRestoreRecord {
    /**
     * ID of the backup record.
     */
    backupId?: pulumi.Input<string>;
    /**
     * Name of the backup record.
     */
    backupName?: pulumi.Input<string>;
    /**
     * Description of DCS instance backup.
     */
    backupRemark?: pulumi.Input<string>;
    /**
     * Time at which the restoration task is created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Error code returned if DCS instance restoration fails.
     */
    errorCode?: pulumi.Input<string>;
    /**
     * Restoration progress.
     */
    progress?: pulumi.Input<string>;
    /**
     * ID of the restoration record.
     */
    restoreId?: pulumi.Input<string>;
    /**
     * Name of the restoration record.
     */
    restoreName?: pulumi.Input<string>;
    /**
     * Description of DCS instance restoration.
     */
    restoreRemark?: pulumi.Input<string>;
    sourceInstanceId?: pulumi.Input<string>;
    sourceInstanceName?: pulumi.Input<string>;
    /**
     * Restoration status:
     */
    status?: pulumi.Input<string>;
    /**
     * Time at which DCS instance restoration completed.
     */
    updatedAt?: pulumi.Input<string>;
}

export interface DdsParameterTemplateCompareDifference {
    /**
     * Indicates the parameter name.
     */
    parameterName?: pulumi.Input<string>;
    /**
     * Indicates the parameter value in the source parameter template.
     */
    sourceValue?: pulumi.Input<string>;
    /**
     * Indicates the parameter value in the destination parameter template.
     */
    targetValue?: pulumi.Input<string>;
}

export interface DdsParameterTemplateCopyParameter {
    /**
     * Specifies the description of replicated parameter template.
     * The value is left blank by default. The description must consist of a maximum of **256** characters and cannot contain
     * the carriage return character or the following special characters: >!<"&'=
     * Changing this creates a new resource.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the name of replicated parameter template.
     * The parameter template name can contain **1** to **64** characters. It can contain only letters, digits, hyphens (-),
     * underscores (_), and periods (.).
     * Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the parameter is read-only.
     * + If the value is **true**, the parameter is read-only.
     * + If the value is **false**, the parameter is not read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * Indicates whether the instance needs to be restarted.
     * + If the value is **true**, restart is required.
     * + If the value is **false**, restart is not required.
     */
    restartRequired?: pulumi.Input<boolean>;
    /**
     * Indicates the parameter type. The value can be integer, string, boolean, float, or list.
     */
    type?: pulumi.Input<string>;
    /**
     * Indicates the parameter value.
     */
    value?: pulumi.Input<string>;
    /**
     * Indicates the value range.
     */
    valueRange?: pulumi.Input<string>;
}

export interface DdsParameterTemplateParameter {
    /**
     * Specifies the parameter template description.
     * The description must consist of a maximum of 256 characters and cannot contain the carriage
     * return character or the following special characters: >!<"&'=.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the parameter template name.
     * The value must be 1 to 64 characters, which can contain only letters, digits, hyphens (-),
     * underscores (_), and periods (.).
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates whether the parameter is read-only.
     * + If the value is **true**, the parameter is read-only.
     * + If the value is **false**, the parameter is not read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * Indicates whether the instance needs to be restarted.
     * + If the value is **true**, restart is required.
     * + If the value is **false**, restart is not required.
     */
    restartRequired?: pulumi.Input<boolean>;
    /**
     * Indicates the parameter type. The value can be integer, string, boolean, float, or list.
     */
    type?: pulumi.Input<string>;
    /**
     * Indicates the parameter value.
     */
    value?: pulumi.Input<string>;
    /**
     * Indicates the value range.
     */
    valueRange?: pulumi.Input<string>;
}

export interface DmsKafkaMessageProducePropertyList {
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface DmsRocketmqConsumptionVerifyResendResult {
    /**
     * Indicates the error code.
     */
    errorCode?: pulumi.Input<string>;
    /**
     * Indicates the error message.
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * Indicates the message ID.
     */
    messageId?: pulumi.Input<string>;
}

export interface DmsRocketmqDeadLetterResendResendResult {
    /**
     * Indicates the error code.
     */
    errorCode?: pulumi.Input<string>;
    /**
     * Indicates the error message.
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * Indicates the message ID.
     */
    messageId?: pulumi.Input<string>;
}

export interface DmsRocketmqInstanceConfig {
    /**
     * Specifies the config name.
     */
    name: pulumi.Input<string>;
    /**
     * Specifies the config value.
     *
     * > When `name` is **fileReservedTime**, `value` ranges from `1` to `720` and unit is **hour**. Defaults to `48`.
     */
    value: pulumi.Input<string>;
}

export interface DmsRocketmqInstanceCrossVpcAccess {
    /**
     * The advertised IP Address or domain name.
     */
    advertisedIp?: pulumi.Input<string>;
    /**
     * @deprecated typo in lisenter_ip, please use "listenerIp" instead.
     */
    lisenterIp?: pulumi.Input<string>;
    /**
     * The listener IP address.
     */
    listenerIp?: pulumi.Input<string>;
    /**
     * The port number.
     */
    port?: pulumi.Input<number>;
    /**
     * The port ID associated with the address.
     */
    portId?: pulumi.Input<string>;
}

export interface DmsRocketmqMigrationTaskBinding {
    /**
     * Specifies the message target. Changing this creates a new resource.
     */
    destination?: pulumi.Input<string>;
    /**
     * Specifies the message target type.
     * Changing this creates a new resource.
     */
    destinationType?: pulumi.Input<string>;
    /**
     * Specifies the routing key. Changing this creates a new resource.
     */
    routingKey?: pulumi.Input<string>;
    /**
     * Specifies the message source. Changing this creates a new resource.
     */
    source?: pulumi.Input<string>;
    /**
     * Specifies the virtual host name. Changing this creates a new resource.
     */
    vhost?: pulumi.Input<string>;
}

export interface DmsRocketmqMigrationTaskExchange {
    /**
     * Specifies whether to enable data persistence.
     * Changing this creates a new resource.
     */
    durable?: pulumi.Input<boolean>;
    /**
     * Specifies the switch name. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the exchange type. Changing this creates a new resource.
     *
     * <a name="RocketMQ_migration_task_bindings"></a>
     * The `bindings` block supports:
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the virtual host name. Changing this creates a new resource.
     */
    vhost?: pulumi.Input<string>;
}

export interface DmsRocketmqMigrationTaskQueue {
    /**
     * Specifies whether to enable data persistence.
     * Changing this creates a new resource.
     */
    durable?: pulumi.Input<boolean>;
    /**
     * Specifies the switch name. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the virtual host name. Changing this creates a new resource.
     */
    vhost?: pulumi.Input<string>;
}

export interface DmsRocketmqMigrationTaskSubscriptionGroup {
    /**
     * Specifies whether to enable broadcast.
     * Changing this creates a new resource.
     */
    consumeBroadcastEnable?: pulumi.Input<boolean>;
    /**
     * Specifies whether to enable consumption.
     * Changing this creates a new resource.
     */
    consumeEnable?: pulumi.Input<boolean>;
    /**
     * Specifies whether to enable consumption from the earliest
     * offset. Changing this creates a new resource.
     */
    consumeFromMinEnable?: pulumi.Input<boolean>;
    /**
     * Specifies the name of a consumer group.
     * Changing this creates a new resource.
     */
    groupName: pulumi.Input<string>;
    /**
     * Specifies whether to notify changes of consumer IDs.
     * Changing this creates a new resource.
     */
    notifyConsumeridsChangedEnable?: pulumi.Input<boolean>;
    /**
     * Specifies the maximum number of consumption retries.
     * Changing this creates a new resource.
     */
    retryMaxTimes?: pulumi.Input<number>;
    /**
     * Specifies the number of retry queues.
     * Changing this creates a new resource.
     */
    retryQueueNum?: pulumi.Input<number>;
    /**
     * Specifies the ID of the broker selected for slow
     * consumption. Changing this creates a new resource.
     *
     * <a name="RocketMQ_migration_task_vhosts"></a>
     * The `vhosts` block supports:
     */
    whichBrokerWhenConsumeSlow?: pulumi.Input<number>;
}

export interface DmsRocketmqMigrationTaskTopicConfig {
    /**
     * Specifies whether a message is an ordered message.
     * Changing this creates a new resource.
     */
    order?: pulumi.Input<boolean>;
    /**
     * Specifies the number of permission. Changing this creates a new resource.
     */
    perm?: pulumi.Input<number>;
    /**
     * Specifies the number of read queues.
     * Changing this creates a new resource.
     */
    readQueueNum?: pulumi.Input<number>;
    /**
     * Specifies the filter type of a topic.
     * Value options: **SINGLE_TAG**, **MULTI_TAG**. Changing this creates a new resource.
     */
    topicFilterType?: pulumi.Input<string>;
    /**
     * Specifies the topic name. Changing this creates a new resource.
     */
    topicName: pulumi.Input<string>;
    /**
     * Specifies the system flag of a topic.
     * Changing this creates a new resource.
     */
    topicSysFlag?: pulumi.Input<number>;
    /**
     * Specifies the number of write queues.
     * Changing this creates a new resource.
     *
     * <a name="RocketMQ_migration_task_subscription_groups"></a>
     * The `subscriptionGroups` block supports:
     */
    writeQueueNum?: pulumi.Input<number>;
}

export interface DmsRocketmqMigrationTaskVhost {
    /**
     * Specifies the switch name. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
}

export interface DmsRocketmqTopicBroker {
    /**
     * Specifies the name of the broker.
     *
     * <a name="DmsRocketMQTopic_QueueRef"></a>
     * The `queues` block supports:
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates the read queues number of the broker. It's useless when create a topic.
     */
    readQueueNum?: pulumi.Input<number>;
    /**
     * Indicates the read queues number of the broker. It's useless when create a topic.
     */
    writeQueueNum?: pulumi.Input<number>;
}

export interface DmsRocketmqTopicQueue {
    /**
     * Specifies the associated broker.
     */
    broker?: pulumi.Input<string>;
    /**
     * Specifies the number of the queues.
     */
    queueNum?: pulumi.Input<number>;
}

export interface DmsRocketmqUserGroupPerm {
    /**
     * Indicates the name of a topic or consumer group.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates the permissions of the topic or consumer group.
     * Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
     */
    perm?: pulumi.Input<string>;
}

export interface DmsRocketmqUserTopicPerm {
    /**
     * Indicates the name of a topic or consumer group.
     */
    name?: pulumi.Input<string>;
    /**
     * Indicates the permissions of the topic or consumer group.
     * Value options: **PUB|SUB**, **PUB**, **SUB**, **DENY**.
     */
    perm?: pulumi.Input<string>;
}

export interface ElbIpgroupIpList {
    /**
     * Human-readable description for the ip.
     */
    description?: pulumi.Input<string>;
    /**
     * IP address or CIDR block.
     */
    ip: pulumi.Input<string>;
}

export interface ElbL7policyFixedResponseConfig {
    contentType?: pulumi.Input<string>;
    insertHeadersConfig?: pulumi.Input<inputs.ElbL7policyFixedResponseConfigInsertHeadersConfig>;
    messageBody?: pulumi.Input<string>;
    removeHeadersConfig?: pulumi.Input<inputs.ElbL7policyFixedResponseConfigRemoveHeadersConfig>;
    statusCode: pulumi.Input<string>;
    trafficLimitConfig?: pulumi.Input<inputs.ElbL7policyFixedResponseConfigTrafficLimitConfig>;
}

export interface ElbL7policyFixedResponseConfigInsertHeadersConfig {
    configs: pulumi.Input<pulumi.Input<inputs.ElbL7policyFixedResponseConfigInsertHeadersConfigConfig>[]>;
}

export interface ElbL7policyFixedResponseConfigInsertHeadersConfigConfig {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
    valueType: pulumi.Input<string>;
}

export interface ElbL7policyFixedResponseConfigRemoveHeadersConfig {
    configs: pulumi.Input<pulumi.Input<inputs.ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig>[]>;
}

export interface ElbL7policyFixedResponseConfigRemoveHeadersConfigConfig {
    key: pulumi.Input<string>;
}

export interface ElbL7policyFixedResponseConfigTrafficLimitConfig {
    burst?: pulumi.Input<number>;
    perSourceIpQps?: pulumi.Input<number>;
    qps?: pulumi.Input<number>;
}

export interface ElbL7policyRedirectPoolsConfig {
    poolId: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}

export interface ElbL7policyRedirectPoolsExtendConfig {
    insertHeadersConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig>;
    removeHeadersConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig>;
    rewriteUrlConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig>;
    rewriteUrlEnabled?: pulumi.Input<boolean>;
    trafficLimitConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig>;
}

export interface ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfig {
    configs: pulumi.Input<pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig>[]>;
}

export interface ElbL7policyRedirectPoolsExtendConfigInsertHeadersConfigConfig {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
    valueType: pulumi.Input<string>;
}

export interface ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfig {
    configs: pulumi.Input<pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig>[]>;
}

export interface ElbL7policyRedirectPoolsExtendConfigRemoveHeadersConfigConfig {
    key: pulumi.Input<string>;
}

export interface ElbL7policyRedirectPoolsExtendConfigRewriteUrlConfig {
    host?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
}

export interface ElbL7policyRedirectPoolsExtendConfigTrafficLimitConfig {
    burst?: pulumi.Input<number>;
    perSourceIpQps?: pulumi.Input<number>;
    qps?: pulumi.Input<number>;
}

export interface ElbL7policyRedirectPoolsStickySessionConfig {
    enable?: pulumi.Input<boolean>;
    timeout?: pulumi.Input<number>;
}

export interface ElbL7policyRedirectUrlConfig {
    host?: pulumi.Input<string>;
    insertHeadersConfig?: pulumi.Input<inputs.ElbL7policyRedirectUrlConfigInsertHeadersConfig>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    protocol?: pulumi.Input<string>;
    query?: pulumi.Input<string>;
    removeHeadersConfig?: pulumi.Input<inputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfig>;
    statusCode: pulumi.Input<string>;
}

export interface ElbL7policyRedirectUrlConfigInsertHeadersConfig {
    configs: pulumi.Input<pulumi.Input<inputs.ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig>[]>;
}

export interface ElbL7policyRedirectUrlConfigInsertHeadersConfigConfig {
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
    valueType: pulumi.Input<string>;
}

export interface ElbL7policyRedirectUrlConfigRemoveHeadersConfig {
    configs: pulumi.Input<pulumi.Input<inputs.ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig>[]>;
}

export interface ElbL7policyRedirectUrlConfigRemoveHeadersConfigConfig {
    key: pulumi.Input<string>;
}

export interface ElbL7ruleCondition {
    key?: pulumi.Input<string>;
    /**
     * The value to use for the comparison.
     */
    value: pulumi.Input<string>;
}

export interface ElbListenerPortRange {
    endPort: pulumi.Input<number>;
    startPort: pulumi.Input<number>;
}

export interface ElbMemberReason {
    expectedResponse?: pulumi.Input<string>;
    healthcheckResponse?: pulumi.Input<string>;
    reasonCode?: pulumi.Input<string>;
}

export interface ElbMemberStatus {
    listenerId?: pulumi.Input<string>;
    operatingStatus?: pulumi.Input<string>;
    reasons?: pulumi.Input<pulumi.Input<inputs.ElbMemberStatusReason>[]>;
}

export interface ElbMemberStatusReason {
    expectedResponse?: pulumi.Input<string>;
    healthcheckResponse?: pulumi.Input<string>;
    reasonCode?: pulumi.Input<string>;
}

export interface ElbPoolPersistence {
    /**
     * The name of the cookie if persistence mode is set appropriately. Required
     * if `type = APP_COOKIE`.
     */
    cookieName?: pulumi.Input<string>;
    /**
     * Specifies the sticky session timeout duration in minutes. This parameter is
     * invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
     * + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
     * + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The type of persistence mode. The current specification supports SOURCE_IP,
     * HTTP_COOKIE, and APP_COOKIE.
     */
    type: pulumi.Input<string>;
}

export interface ElbSecurityPolicyListener {
    /**
     * The listener id.
     */
    id?: pulumi.Input<string>;
}

export interface FgsApplicationRepository {
    /**
     * The HTTP address of the repository.
     */
    httpsUrl?: pulumi.Input<string>;
    /**
     * The project ID of the repository.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The repository status.
     */
    status?: pulumi.Input<string>;
    /**
     * The repository link.
     */
    webUrl?: pulumi.Input<string>;
}

export interface FgsApplicationStackResource {
    /**
     * The cloud service name.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The hyperlink.
     */
    href?: pulumi.Input<string>;
    /**
     * The logical resource name.
     */
    logicalResourceName?: pulumi.Input<string>;
    /**
     * The logical resource type.
     */
    logicalResourceType?: pulumi.Input<string>;
    /**
     * The physical resource ID.
     */
    physicalResourceId?: pulumi.Input<string>;
    /**
     * The physical resource name.
     */
    physicalResourceName?: pulumi.Input<string>;
    /**
     * The status of resource.
     */
    resourceStatus?: pulumi.Input<string>;
    /**
     * The status information.
     */
    statusMessage?: pulumi.Input<string>;
}

export interface FgsAsyncInvokeConfigurationOnFailure {
    /**
     * Specifies the object type.  
     * The valid values are as follows:
     * + **OBS**
     * + **SMN**
     * + **DIS**
     * + **FunctionGraph**
     */
    destination: pulumi.Input<string>;
    /**
     * Specifies the parameters (map object in JSON format) corresponding to the target service.
     * + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
     * expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
     * + The **SMN** objects include: `topicUrn`.
     * + The **DIS** objects include: `streamName`.
     * + The **FunctionGraph** objects include: `funcUrn` (function URN).
     *
     * > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
     * corresponding service.
     */
    param: pulumi.Input<string>;
}

export interface FgsAsyncInvokeConfigurationOnSuccess {
    /**
     * Specifies the object type.  
     * The valid values are as follows:
     * + **OBS**
     * + **SMN**
     * + **DIS**
     * + **FunctionGraph**
     */
    destination: pulumi.Input<string>;
    /**
     * Specifies the parameters (map object in JSON format) corresponding to the target service.
     * + The **OBS** objects include: `bucket` (bucket name), `prefix` (object directory prefix) and `expires` (object
     * expiration time, the valid value ranges from `0` to `365`. If the value is `0`, the object will not expire.).
     * + The **SMN** objects include: `topicUrn`.
     * + The **DIS** objects include: `streamName`.
     * + The **FunctionGraph** objects include: `funcUrn` (function URN).
     *
     * > If you enable the destination function, you must be ensured that the agent contains the operation authority of the
     * corresponding service.
     */
    param: pulumi.Input<string>;
}

export interface GesGraphEncryption {
    /**
     * Whether to enable data encryption The value can be true or false. The default value is false.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * ID of the customer master key created by DEW in the project corresponding to the graph creation.
     */
    masterKeyId?: pulumi.Input<string>;
}

export interface GesGraphLtsOperationTrace {
    /**
     * LTS log group name.
     */
    auditLogGroupName?: pulumi.Input<string>;
    /**
     * Whether to enable graph audit. The default value is false.
     */
    enableAudit?: pulumi.Input<boolean>;
}

export interface GesGraphPublicIp {
    /**
     * Indicates the ID of an EIP.  Changing this parameter will create a new resource.
     */
    eipId?: pulumi.Input<string>;
    /**
     * The bind type of public IP.
     */
    publicBindType?: pulumi.Input<string>;
}

export interface GesGraphVertexIdType {
    /**
     * The length of ID.
     */
    idLength?: pulumi.Input<number>;
    /**
     * Vertex ID type.
     */
    idType?: pulumi.Input<string>;
}

export interface ObsBucketAclAccountPermission {
    /**
     * Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
     */
    accessToAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the access to bucket. Valid values are **READ** and **WRITE**.
     */
    accessToBuckets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the account id to authorize. The account id cannot be the bucket owner,
     * and must be unique.
     */
    accountId: pulumi.Input<string>;
}

export interface ObsBucketAclLogDeliveryUserPermission {
    /**
     * Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
     */
    accessToAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the access to bucket. Valid values are **READ** and **WRITE**.
     */
    accessToBuckets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObsBucketAclOwnerPermission {
    /**
     * Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
     */
    accessToAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the access to bucket. Valid values are **READ** and **WRITE**.
     */
    accessToBuckets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ObsBucketAclPublicPermission {
    /**
     * Specifies the access to acl. Valid values are **READ_ACP** and **WRITE_ACP**.
     */
    accessToAcls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the access to bucket. Valid values are **READ** and **WRITE**.
     */
    accessToBuckets?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ProviderAssumeRole {
    agencyName: pulumi.Input<string>;
    domainName: pulumi.Input<string>;
}

export interface SfsTurboDuTaskDirUsage {
    fileCounts?: pulumi.Input<pulumi.Input<inputs.SfsTurboDuTaskDirUsageFileCount>[]>;
    message?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    usedCapacity?: pulumi.Input<number>;
}

export interface SfsTurboDuTaskDirUsageFileCount {
    block?: pulumi.Input<number>;
    char?: pulumi.Input<number>;
    dir?: pulumi.Input<number>;
    pipe?: pulumi.Input<number>;
    regular?: pulumi.Input<number>;
    socket?: pulumi.Input<number>;
    symlink?: pulumi.Input<number>;
}

export interface SfsTurboObsTargetObs {
    attributes?: pulumi.Input<inputs.SfsTurboObsTargetObsAttributes>;
    bucket: pulumi.Input<string>;
    endpoint: pulumi.Input<string>;
    policy?: pulumi.Input<inputs.SfsTurboObsTargetObsPolicy>;
}

export interface SfsTurboObsTargetObsAttributes {
    dirMode?: pulumi.Input<string>;
    fileMode?: pulumi.Input<string>;
    gid?: pulumi.Input<number>;
    uid?: pulumi.Input<number>;
}

export interface SfsTurboObsTargetObsPolicy {
    autoExportPolicy?: pulumi.Input<inputs.SfsTurboObsTargetObsPolicyAutoExportPolicy>;
}

export interface SfsTurboObsTargetObsPolicyAutoExportPolicy {
    events?: pulumi.Input<pulumi.Input<string>[]>;
    prefix?: pulumi.Input<string>;
    suffix?: pulumi.Input<string>;
}

export interface SmnSubscriptionExtension {
    clientId?: pulumi.Input<string>;
    clientSecret?: pulumi.Input<string>;
    header?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    keyword?: pulumi.Input<string>;
    signSecret?: pulumi.Input<string>;
}

export interface SmnSubscriptionFilterPolicy {
    /**
     * The filter policy name. The policy name must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The string array for exact match.
     */
    stringEquals?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface SwrOrganizationPermissionsSelfPermission {
    /**
     * The permission of current user.
     */
    permission?: pulumi.Input<string>;
    /**
     * The ID of current user.
     */
    userId?: pulumi.Input<string>;
    /**
     * The name of current user.
     */
    userName?: pulumi.Input<string>;
}

export interface SwrOrganizationPermissionsUser {
    /**
     * Specifies the permission of the existing SberCloud user.
     * The values can be **Manage**, **Write** and **Read**.
     */
    permission: pulumi.Input<string>;
    /**
     * Specifies the ID of the existing SberCloud user.
     */
    userId: pulumi.Input<string>;
    /**
     * Specifies the name of the existing SberCloud user.
     */
    userName?: pulumi.Input<string>;
}

export interface VpnConnectionIkepolicy {
    /**
     * The authentication algorithm. The value can be **sha1**, **md5**,
     * **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
     * please use them with caution.
     */
    authenticationAlgorithm?: pulumi.Input<string>;
    /**
     * The authentication method during IKE negotiation.
     * The value can be **pre-share** and **digital-envelope-v2**. Defaults to **pre-share**.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Specifies the DH group used for key exchange in phase 1.
     * The value can be **group1**, **group2**, **group5**, **group14**, **group15**, **group16**, **group19**, **group20**,
     * or **group21**. Exercise caution when using **group1**, **group2**, **group5**,
     * or **group14** as they have low security. Defaults to **group15**.
     */
    dhGroup?: pulumi.Input<string>;
    /**
     * Specifies the dead peer detection (DPD) object.
     * The dpd structure is documented below.
     *
     * <a name="Connection_DPD"></a>
     * The `dpd` block supports:
     */
    dpd?: pulumi.Input<inputs.VpnConnectionIkepolicyDpd>;
    /**
     * The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
     * **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
     * **3des** is less secure, please use it with caution.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The IKE negotiation version. The value can be **v1** and **v2**. Defaults to **v2**.
     */
    ikeVersion?: pulumi.Input<string>;
    /**
     * The lifecycle time of Ipsec tunnel in seconds.
     * The value ranges from **60** to **604800**. Defaults to **3600**.
     */
    lifetimeSeconds?: pulumi.Input<number>;
    /**
     * The local ID.
     */
    localId?: pulumi.Input<string>;
    /**
     * The local ID type. The value can be **ip** or **fqdn**. Defaults to **ip**.
     */
    localIdType?: pulumi.Input<string>;
    /**
     * The peer ID.
     */
    peerId?: pulumi.Input<string>;
    /**
     * The peer ID type. The value can be **ip**, **fqdn** or **any**. Defaults to **ip**.
     */
    peerIdType?: pulumi.Input<string>;
    /**
     * The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
     * **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
     */
    pfs?: pulumi.Input<string>;
    /**
     * The negotiation mode, only works when the ikeVersion is v1.
     * The value can be **main** or **aggressive**. Defaults to **main**.
     */
    phase1NegotiationMode?: pulumi.Input<string>;
}

export interface VpnConnectionIkepolicyDpd {
    /**
     * Specifies the DPD idle timeout period.
     * The value ranges from **10** to **3600**, in seconds. Defaults to **30**.
     */
    interval?: pulumi.Input<number>;
    /**
     * Specifies the format of DPD packets. The value can be:
     * + **seq-hash-notify**: indicates that the payload of DPD packets is in the sequence of hash-notify;
     * + **seq-notify-hash**: indicates that the payload of DPD packets is in the sequence of notify-hash;
     *
     * Defaults to **seq-hash-notify**.
     *
     * <a name="Connection_CreateRequestIpsecPolicy"></a>
     * The `ipsecpolicy` block supports:
     */
    msg?: pulumi.Input<string>;
    /**
     * Specifies the interval for retransmitting DPD packets.
     * The value ranges from **2** to **60**, in seconds. Defaults to **15**.
     */
    timeout?: pulumi.Input<number>;
}

export interface VpnConnectionIpsecpolicy {
    /**
     * The authentication algorithm. The value can be **sha1**, **md5**,
     * **sha2-256**, **sha2-384**, **sha2-512**. Defaults to **sha2-256**. **sha1** and **md5** are less secure,
     * please use them with caution.
     */
    authenticationAlgorithm?: pulumi.Input<string>;
    /**
     * The encapsulation mode, only **tunnel** supported for now.
     * Defaults to **tunnel**.
     *
     * <a name="Connection_PolicyRule"></a>
     * The `policyRules` block supports:
     */
    encapsulationMode?: pulumi.Input<string>;
    /**
     * The encryption algorithm. The value can be **3des**, **aes-128**, **aes-192**,
     * **aes-256**, **aes-128-gcm-16**, **aes-256-gcm-16**, **aes-128-gcm-128**, **aes-256-gcm-128**. Defaults to **aes-128**.
     * **3des** is less secure, please use it with caution.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The lifecycle time of Ipsec tunnel in seconds.
     * The value ranges from **60** to **604800**. Defaults to **3600**.
     */
    lifetimeSeconds?: pulumi.Input<number>;
    /**
     * The DH key group used by PFS. The value can be **group1**, **group2**, **group5**, **group14**
     * **group16**, **group19**, **group20**, **group21**. Defaults to **group14**.
     */
    pfs?: pulumi.Input<string>;
    /**
     * The transform protocol. Only **esp** supported for now.
     * Defaults to **esp**.
     */
    transformProtocol?: pulumi.Input<string>;
}

export interface VpnConnectionPolicyRule {
    /**
     * The list of destination CIDRs.
     */
    destinations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The rule index.
     */
    ruleIndex?: pulumi.Input<number>;
    /**
     * The source CIDR.
     */
    source?: pulumi.Input<string>;
}

export interface VpnGatewayCertificate {
    /**
     * The certificate chain of the gateway certificate.
     */
    certificateChain: pulumi.Input<string>;
    /**
     * The expire time of the certificate.
     */
    certificateChainExpireTime?: pulumi.Input<string>;
    /**
     * The serial number of the certificate chain.
     */
    certificateChainSerialNumber?: pulumi.Input<string>;
    /**
     * The subject of the certificate chain.
     */
    certificateChainSubject?: pulumi.Input<string>;
    /**
     * The expire time of the certificate.
     */
    certificateExpireTime?: pulumi.Input<string>;
    /**
     * The certificate ID.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * The serial number of the certificate.
     */
    certificateSerialNumber?: pulumi.Input<string>;
    /**
     * The subject of the certificate.
     */
    certificateSubject?: pulumi.Input<string>;
    /**
     * The content of the gateway certificate.
     */
    content: pulumi.Input<string>;
    /**
     * The create time of the gateway certificate.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The enc certificate of the gateway certificate.
     */
    encCertificate: pulumi.Input<string>;
    /**
     * The expire time of the enc certificate.
     */
    encCertificateExpireTime?: pulumi.Input<string>;
    /**
     * The serial number of the enc certificate.
     */
    encCertificateSerialNumber?: pulumi.Input<string>;
    /**
     * The subject of the enc certificate.
     */
    encCertificateSubject?: pulumi.Input<string>;
    /**
     * The enc private key of the gateway certificate.
     */
    encPrivateKey: pulumi.Input<string>;
    /**
     * The issuer of the certificate.
     */
    issuer?: pulumi.Input<string>;
    /**
     * The name of the gateway certificate.
     */
    name: pulumi.Input<string>;
    /**
     * The private of the gateway certificate.
     */
    privateKey: pulumi.Input<string>;
    /**
     * The signature algorithm of the certificate.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The status of the certificate.
     */
    status?: pulumi.Input<string>;
    /**
     * The update time of the gateway certificate.
     */
    updatedAt?: pulumi.Input<string>;
}

export interface VpnGatewayEip1 {
    /**
     * The bandwidth ID.
     */
    bandwidthId?: pulumi.Input<string>;
    /**
     * The bandwidth name.
     *
     * Changing this parameter will create a new resource.
     */
    bandwidthName?: pulumi.Input<string>;
    /**
     * Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
     * cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
     * When the `flavor` is **Professional2**, the value cannot be greater than **1000**.
     *
     * Changing this parameter will create a new resource.
     */
    bandwidthSize?: pulumi.Input<number>;
    /**
     * The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
     *
     * Changing this parameter will create a new resource.
     *
     * > You can use `id` to specify an existing EIP or use `type`, `bandwidthName`, `bandwidthSize` and `chargeMode` to
     * create a new EIP.
     */
    chargeMode?: pulumi.Input<string>;
    /**
     * The public IP ID.
     *
     * Changing this parameter will create a new resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The public IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The public IP version.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The EIP type. The value can be **5_bgp** and **5_sbgp**.
     *
     * Changing this parameter will create a new resource.
     */
    type?: pulumi.Input<string>;
}

export interface VpnGatewayEip2 {
    /**
     * The bandwidth ID.
     */
    bandwidthId?: pulumi.Input<string>;
    /**
     * The bandwidth name.
     *
     * Changing this parameter will create a new resource.
     */
    bandwidthName?: pulumi.Input<string>;
    /**
     * Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
     * cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
     * When the `flavor` is **Professional2**, the value cannot be greater than **1000**.
     *
     * Changing this parameter will create a new resource.
     */
    bandwidthSize?: pulumi.Input<number>;
    /**
     * The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
     *
     * Changing this parameter will create a new resource.
     *
     * > You can use `id` to specify an existing EIP or use `type`, `bandwidthName`, `bandwidthSize` and `chargeMode` to
     * create a new EIP.
     */
    chargeMode?: pulumi.Input<string>;
    /**
     * The public IP ID.
     *
     * Changing this parameter will create a new resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The public IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The public IP version.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The EIP type. The value can be **5_bgp** and **5_sbgp**.
     *
     * Changing this parameter will create a new resource.
     */
    type?: pulumi.Input<string>;
}

export interface VpnGatewayMasterEip {
    /**
     * The bandwidth ID.
     */
    bandwidthId?: pulumi.Input<string>;
    /**
     * The bandwidth name.
     *
     * Changing this parameter will create a new resource.
     */
    bandwidthName?: pulumi.Input<string>;
    /**
     * Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
     * cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
     * When the `flavor` is **Professional2**, the value cannot be greater than **1000**.
     *
     * Changing this parameter will create a new resource.
     */
    bandwidthSize?: pulumi.Input<number>;
    /**
     * The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
     *
     * Changing this parameter will create a new resource.
     *
     * > You can use `id` to specify an existing EIP or use `type`, `bandwidthName`, `bandwidthSize` and `chargeMode` to
     * create a new EIP.
     */
    chargeMode?: pulumi.Input<string>;
    /**
     * The public IP ID.
     *
     * Changing this parameter will create a new resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The public IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The public IP version.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The EIP type. The value can be **5_bgp** and **5_sbgp**.
     *
     * Changing this parameter will create a new resource.
     */
    type?: pulumi.Input<string>;
}

export interface VpnGatewaySlaveEip {
    /**
     * The bandwidth ID.
     */
    bandwidthId?: pulumi.Input<string>;
    /**
     * The bandwidth name.
     *
     * Changing this parameter will create a new resource.
     */
    bandwidthName?: pulumi.Input<string>;
    /**
     * Bandwidth size in Mbit/s. When the `flavor` is **Basic**, the value
     * cannot be greater than **100**. When the `flavor` is **Professional1**, the value cannot be greater than **300**.
     * When the `flavor` is **Professional2**, the value cannot be greater than **1000**.
     *
     * Changing this parameter will create a new resource.
     */
    bandwidthSize?: pulumi.Input<number>;
    /**
     * The charge mode of the bandwidth. The value can be **bandwidth** and **traffic**.
     *
     * Changing this parameter will create a new resource.
     *
     * > You can use `id` to specify an existing EIP or use `type`, `bandwidthName`, `bandwidthSize` and `chargeMode` to
     * create a new EIP.
     */
    chargeMode?: pulumi.Input<string>;
    /**
     * The public IP ID.
     *
     * Changing this parameter will create a new resource.
     */
    id?: pulumi.Input<string>;
    /**
     * The public IP address.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The public IP version.
     */
    ipVersion?: pulumi.Input<number>;
    /**
     * The EIP type. The value can be **5_bgp** and **5_sbgp**.
     *
     * Changing this parameter will create a new resource.
     */
    type?: pulumi.Input<string>;
}
export namespace Aom {
    export interface ServiceDiscoveryRuleDiscoveryRule {
        /**
         * Specifies the matched value. This is a list of strings.
         */
        checkContents: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the match condition. The values can be **contain** and **equals**.
         */
        checkMode: pulumi.Input<string>;
        /**
         * Specifies the match type. The values can be **cmdLine**, **env** and **scope**.
         */
        checkType: pulumi.Input<string>;
    }

    export interface ServiceDiscoveryRuleLogPathRule {
        /**
         * Specifies the command. This is a list of strings.
         */
        args: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the value type, which can be **cmdLineHash**.
         */
        nameType: pulumi.Input<string>;
        /**
         * Specifies the log path. This is a list of strings.
         *
         * <a name="nameRulesObject"></a>
         * The `nameRules` block supports:
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ServiceDiscoveryRuleNameRules {
        /**
         * Specifies the application name rule. If the value of `nameType` is
         * **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end in
         * the command are extracted. If the value of `nameType` is **env**, `args` is in the format of ["aa"], indicating that
         * the environment variable named aa is extracted. If the value of `nameType` is **str**, `args` is in the format of
         * ["fix"], indicating that the application name is suffixed with fix. If the value of `nameType` is **cmdLineHash**,
         * `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the application name is
         * ser when the startup command is 0001. The object structure is documented below.
         *
         * <a name="basicNameRuleObject"></a>
         * The `serviceNameRule` block and `applicationNameRule` block support:
         */
        applicationNameRules: pulumi.Input<pulumi.Input<inputs.Aom.ServiceDiscoveryRuleNameRulesApplicationNameRule>[]>;
        /**
         * Specifies the service name rule. If there are multiple objects in the array,
         * the character strings extracted from these objects constitute the service name. If the value of `nameType` is
         * **cmdLine**, `args` is in the format of ["start", "end"], indicating that the characters between start and end
         * in the command are extracted. If the value of `nameType` is **env**, `args` is in the format of ["aa"],
         * indicating that the environment variable named aa is extracted. If the value of `nameType` is **str**, `args` is in the
         * format of ["fix"], indicating that the service name is suffixed with fix. If the value of `nameType` is
         * **cmdLineHash**, `args` is in the format of ["0001"] and `value` is in the format of ["ser"], indicating that the
         * service name is ser when the startup command is 0001. The object structure is
         * documented below.
         */
        serviceNameRules: pulumi.Input<pulumi.Input<inputs.Aom.ServiceDiscoveryRuleNameRulesServiceNameRule>[]>;
    }

    export interface ServiceDiscoveryRuleNameRulesApplicationNameRule {
        /**
         * Specifies the input value.
         */
        args: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
         * and **str**.
         */
        nameType: pulumi.Input<string>;
        /**
         * Specifies the application name, which is mandatory only when the value of
         * `nameType` is **cmdLineHash**.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ServiceDiscoveryRuleNameRulesServiceNameRule {
        /**
         * Specifies the input value.
         */
        args: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the value type. The value can be **cmdLineHash**, **cmdLine**, **env**
         * and **str**.
         */
        nameType: pulumi.Input<string>;
        /**
         * Specifies the application name, which is mandatory only when the value of
         * `nameType` is **cmdLineHash**.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace As {
    export interface BandwidthPolicyIntervalAlarmAction {
        /**
         * Specifies the operation restrictions.
         * - If operation is not SET, this parameter takes effect and the unit is Mbit/s.
         * - If operation is set to ADD, this parameter indicates the maximum bandwidth allowed.
         * - If operation is set to REDUCE, this parameter indicates the minimum bandwidth allowed.
         *
         * <a name="ASBandWidthPolicy_ScheduledPolicy"></a>
         * The `scheduledPolicy` block supports:
         */
        limits?: pulumi.Input<number>;
        /**
         * Specifies the lower limit of the value range.
         */
        lowerBound?: pulumi.Input<string>;
        /**
         * Specifies the operation to be performed. The default operation is ADD.
         * The options are as follows:
         * - **ADD**: indicates adding the bandwidth size.
         * - **REDUCE**: indicates reducing the bandwidth size.
         * - **SET**: indicates setting the bandwidth size to a specified value.
         */
        operation?: pulumi.Input<string>;
        /**
         * Specifies the bandwidth (Mbit/s).
         * The value is an integer from 1 to 2000. The default value is 1.
         */
        size?: pulumi.Input<number>;
        /**
         * Specifies the upper limit of the value range.
         */
        upperBound?: pulumi.Input<string>;
    }

    export interface BandwidthPolicyMetaData {
        /**
         * The bandwidth sharing type in the bandwidth policy.
         */
        metadataBandwidthShareType?: pulumi.Input<string>;
        /**
         * The EIP IP address for the bandwidth in the bandwidth policy.
         */
        metadataEipAddress?: pulumi.Input<string>;
        /**
         * The EIP ID for the bandwidth in the bandwidth policy.
         */
        metadataEipId?: pulumi.Input<string>;
    }

    export interface BandwidthPolicyScalingPolicyAction {
        /**
         * Specifies the operation restrictions.
         * - If operation is not SET, this parameter takes effect and the unit is Mbit/s.
         * - If operation is set to ADD, this parameter indicates the maximum bandwidth allowed.
         * - If operation is set to REDUCE, this parameter indicates the minimum bandwidth allowed.
         *
         * <a name="ASBandWidthPolicy_ScheduledPolicy"></a>
         * The `scheduledPolicy` block supports:
         */
        limits?: pulumi.Input<number>;
        /**
         * Specifies the operation to be performed. The default operation is ADD.
         * The options are as follows:
         * - **ADD**: indicates adding the bandwidth size.
         * - **REDUCE**: indicates reducing the bandwidth size.
         * - **SET**: indicates setting the bandwidth size to a specified value.
         */
        operation?: pulumi.Input<string>;
        /**
         * Specifies the bandwidth (Mbit/s).
         * The value is an integer from 1 to 2000. The default value is 1.
         */
        size?: pulumi.Input<number>;
    }

    export interface BandwidthPolicyScheduledPolicy {
        /**
         * Specifies the end time of the scaling action triggered periodically.
         * The time format complies with UTC. This parameter is mandatory when scalingPolicyType is set to RECURRENCE.
         * When the scaling action is triggered periodically, the end time cannot be earlier than the current and start time.
         * The time format is YYYY-MM-DDThh:mmZ.
         */
        endTime?: pulumi.Input<string>;
        /**
         * Specifies the time when the scaling action is triggered.
         * The time format complies with UTC.
         * - If scalingPolicyType is set to SCHEDULED, the time format is YYYY-MM-DDThh:mmZ.
         * - If scalingPolicyType is set to RECURRENCE, the time format is hh:mm.
         */
        launchTime: pulumi.Input<string>;
        /**
         * Specifies the periodic triggering type.
         * This parameter is mandatory when scalingPolicyType is set to RECURRENCE. The options are as follows:
         * - **Daily**: indicates that the scaling action is triggered once a day.
         * - **Weekly**: indicates that the scaling action is triggered once a week.
         * - **Monthly**: indicates that the scaling action is triggered once a month.
         */
        recurrenceType?: pulumi.Input<string>;
        /**
         * Specifies the day when a periodic scaling action is triggered.
         * This parameter is mandatory when scalingPolicyType is set to RECURRENCE.
         * - If recurrenceType is set to Daily, the value is null, indicating that the scaling action is triggered once a day.
         * - If recurrenceType is set to Weekly, the value ranges from 1 (Sunday) to 7 (Saturday).
         * The digits refer to dates in each week and separated by a comma, such as 1,3,5.
         * - If recurrenceType is set to Monthly, the value ranges from 1 to 31.
         * The digits refer to the dates in each month and separated by a comma, such as 1,10,13,28.
         */
        recurrenceValue?: pulumi.Input<string>;
        /**
         * Specifies the start time of the scaling action triggered periodically.
         * The time format complies with UTC. The default value is the local time.
         * The time format is YYYY-MM-DDThh:mmZ.
         */
        startTime?: pulumi.Input<string>;
    }

    export interface ConfigurationInstanceConfig {
        adminPass?: pulumi.Input<string>;
        /**
         * Specifies a billing mode for an ECS.
         * The value can be `postPaid` and `spot`. The default value is `postPaid`.
         * Changing this will create a new resource.
         */
        chargingMode?: pulumi.Input<string>;
        dedicatedHostId?: pulumi.Input<string>;
        /**
         * Specifies the disk group information. System disks are mandatory and
         * data disks are optional. The object structure is documented below.
         * Changing this will create a new resource.
         */
        disks?: pulumi.Input<pulumi.Input<inputs.As.ConfigurationInstanceConfigDisk>[]>;
        /**
         * Specifies the ECS group ID. Changing this will create a new resource.
         */
        ecsGroupId?: pulumi.Input<string>;
        /**
         * Specifies the ECS flavor name. A maximum of 10 flavors can be selected.
         * Use a comma (,) to separate multiple flavor names. Changing this will create a new resource.
         */
        flavor?: pulumi.Input<string>;
        /**
         * Specifies the priority policy used when there are multiple flavors
         * and instances to be created using an AS configuration. The value can be `PICK_FIRST` and `COST_FIRST`.
         *
         * + **PICK_FIRST** (default): When an ECS is added for capacity expansion, the target flavor is determined in the order
         * in the flavor list.
         * + **COST_FIRST**: When an ECS is added for capacity expansion, the target flavor is determined for minimal expenses.
         *
         * Changing this will create a new resource.
         */
        flavorPriorityPolicy?: pulumi.Input<string>;
        /**
         * Specifies the ECS image ID. Changing this will create a new resource.
         */
        image?: pulumi.Input<string>;
        /**
         * Specifies the ECS instance ID when using its specification
         * as the template to create AS configurations. In this case, `flavor`, `image`, and `disk` arguments do not take effect.
         * If this argument is not specified, `flavor`, `image`, and `disk` arguments are mandatory.
         * Changing this will create a new resource.
         */
        instanceId?: pulumi.Input<string>;
        keyFingerprint?: pulumi.Input<string>;
        /**
         * Specifies the name of the SSH key pair used to log in to the instance.
         * Changing this will create a new resource.
         */
        keyName?: pulumi.Input<string>;
        /**
         * Specifies the key/value pairs to make available from within the instance.
         * Changing this will create a new resource.
         */
        metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Specifies the customize personality of an instance by defining one or
         * more files and their contents. The object structure is documented below.
         * Changing this will create a new resource.
         *
         * <a name="instanceConfigDiskObject"></a>
         * The `disk` block supports:
         */
        personalities?: pulumi.Input<pulumi.Input<inputs.As.ConfigurationInstanceConfigPersonality>[]>;
        /**
         * Specifies the EIP of the ECS instance.
         * The object structure is documented below.
         * Changing this will create a new resource.
         */
        publicIp?: pulumi.Input<inputs.As.ConfigurationInstanceConfigPublicIp>;
        /**
         * Specifies an array of one or more security group IDs.
         * Changing this will create a new resource.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        tenancy?: pulumi.Input<string>;
        /**
         * Specifies the user data to provide when launching the instance.
         * The file content must be encoded with Base64. Changing this will create a new resource.
         */
        userData?: pulumi.Input<string>;
    }

    export interface ConfigurationInstanceConfigDisk {
        dataDiskImageId?: pulumi.Input<string>;
        dedicatedStorageId?: pulumi.Input<string>;
        /**
         * Specifies whether the disk is a system disk or a data disk.
         * Option **DATA** indicates a data disk, option **SYS** indicates a system disk.
         * Changing this will create a new resource.
         */
        diskType: pulumi.Input<string>;
        iops?: pulumi.Input<number>;
        /**
         * Specifies the encryption KMS ID of the **DATA** disk.
         * Changing this will create a new resource.
         *
         * <a name="instanceConfigPublicIpObject"></a>
         * The `publicIp` block supports:
         */
        kmsId?: pulumi.Input<string>;
        size: pulumi.Input<number>;
        snapshotId?: pulumi.Input<string>;
        throughput?: pulumi.Input<number>;
        /**
         * Specifies the disk type. Changing this will create a new resource.
         * Available options are:
         * + `SAS`: high I/O disk type.
         * + `SSD`: ultra-high I/O disk type.
         * + `GPSSD`: general purpose SSD disk type.
         */
        volumeType: pulumi.Input<string>;
    }

    export interface ConfigurationInstanceConfigPersonality {
        /**
         * Specifies the content of the injected file, which must be encoded with base64.
         * Changing this creates a new resource.
         */
        content: pulumi.Input<string>;
        /**
         * Specifies the path of the injected file. Changing this creates a new resource.
         */
        path: pulumi.Input<string>;
    }

    export interface ConfigurationInstanceConfigPublicIp {
        /**
         * Specifies the EIP configuration that will be automatically assigned to the instance.
         * The object structure is documented below. Changing this will create a new resource.
         */
        eip: pulumi.Input<inputs.As.ConfigurationInstanceConfigPublicIpEip>;
    }

    export interface ConfigurationInstanceConfigPublicIpEip {
        /**
         * Specifies the bandwidth information. The object structure is documented below.
         * Changing this will create a new resource.
         */
        bandwidth: pulumi.Input<inputs.As.ConfigurationInstanceConfigPublicIpEipBandwidth>;
        /**
         * Specifies the EIP type. Possible values are **5_bgp** (dynamic BGP)
         * and **5_sbgp** (static BGP). Changing this will create a new resource.
         */
        ipType: pulumi.Input<string>;
    }

    export interface ConfigurationInstanceConfigPublicIpEipBandwidth {
        /**
         * Specifies whether the bandwidth is billed by traffic or by bandwidth
         * size. The value can be **traffic** or **bandwidth**. Changing this creates a new resource.
         */
        chargingMode?: pulumi.Input<string>;
        /**
         * The resource ID in UUID format.
         */
        id?: pulumi.Input<string>;
        /**
         * Specifies the bandwidth sharing type. The system only supports
         * **PER** (indicates exclusive bandwidth). Changing this will create a new resource.
         */
        shareType: pulumi.Input<string>;
        /**
         * Specifies the bandwidth (Mbit/s). The value range for bandwidth billed by bandwidth
         * is 1 to 2000 and that for bandwidth billed by traffic is 1 to 300.
         * Changing this creates a new resource.
         *
         * <a name="instanceConfigPersonalityObject"></a>
         * The `personality` block supports:
         */
        size?: pulumi.Input<number>;
    }

    export interface GroupLbaasListener {
        listenerId?: pulumi.Input<string>;
        /**
         * Specifies the backend ECS group ID.
         */
        poolId: pulumi.Input<string>;
        /**
         * Specifies the backend protocol, which is the port on which a backend ECS listens for
         * traffic. The number of the port ranges from 1 to 65535.
         */
        protocolPort: pulumi.Input<number>;
        protocolVersion?: pulumi.Input<string>;
        /**
         * Specifies the weight, which determines the portion of requests a backend ECS processes
         * compared to other backend ECSs added to the same listener. The value of this parameter ranges from 0 to 100. The
         * default value is 1.
         */
        weight?: pulumi.Input<number>;
    }

    export interface GroupNetwork {
        /**
         * Specifies the ID of the security group.
         *
         * <a name="groupLbaasListenerObject"></a>
         * The `lbaasListeners` block supports:
         */
        id: pulumi.Input<string>;
        /**
         * Specifies the ID of the shared bandwidth of an IPv6 address.
         */
        ipv6BandwidthId?: pulumi.Input<string>;
        /**
         * Specifies whether to support IPv6 addresses. The default value is `false`.
         */
        ipv6Enable?: pulumi.Input<boolean>;
        /**
         * Specifies whether processesing only traffic that is destined specifically
         * for it. Defaults to true.
         *
         * <a name="groupSecurityGroupObject"></a>
         * The `securityGroups` block supports:
         */
        sourceDestCheck?: pulumi.Input<boolean>;
    }

    export interface GroupSecurityGroup {
        /**
         * Specifies the ID of the security group.
         *
         * <a name="groupLbaasListenerObject"></a>
         * The `lbaasListeners` block supports:
         */
        id: pulumi.Input<string>;
    }

    export interface PolicyScalingPolicyAction {
        /**
         * Specifies the number of instances to be operated. The default number is 1.
         */
        instanceNumber?: pulumi.Input<number>;
        instancePercentage?: pulumi.Input<number>;
        /**
         * Specifies the operation to be performed. The options include `ADD` (default), `REMOVE`,
         * and `SET`.
         */
        operation?: pulumi.Input<string>;
    }

    export interface PolicyScheduledPolicy {
        /**
         * Specifies the end time of the scaling action triggered periodically. The time format complies
         * with UTC. This argument is mandatory when `scalingPolicyType`
         * is set to `RECURRENCE`. The time format is YYYY-MM-DDThh:mmZ.
         *
         * <a name="scalingPolicyActionObject"></a>
         * The `scalingPolicyAction` block supports:
         */
        endTime?: pulumi.Input<string>;
        /**
         * Specifies the time when the scaling action is triggered.
         * + If `scalingPolicyType` is set to `SCHEDULED`, the time format is **YYYY-MM-DDThh:mmZ**.
         * + If `scalingPolicyType` is set to `RECURRENCE`, the time format is **hh:mm**.
         *
         * > the `launchTime` of the `SCHEDULED` policy cannot be earlier than the current time.
         */
        launchTime: pulumi.Input<string>;
        /**
         * Specifies the periodic triggering type. This argument is mandatory when
         * `scalingPolicyType` is set to `RECURRENCE`. The options include `Daily`, `Weekly`, and `Monthly`.
         */
        recurrenceType?: pulumi.Input<string>;
        /**
         * Specifies the frequency at which scaling actions are triggered.
         */
        recurrenceValue?: pulumi.Input<string>;
        /**
         * Specifies the start time of the scaling action triggered periodically. The time format
         * complies with UTC. The current time is used by default. The time format is YYYY-MM-DDThh:mmZ.
         */
        startTime?: pulumi.Input<string>;
    }
}

export namespace Cbr {
    export interface PolicyBackupCycle {
        /**
         * Specifies the weekly backup day of backup schedule. It supports seven days a week (MO, TU,
         * WE, TH, FR, SA, SU) and this parameter is separated by a comma (,) without spaces, between date and date during the
         * configuration.
         */
        days?: pulumi.Input<string>;
        /**
         * Specifies the backup time. Automated backups will be triggered at the backup
         * time. The current time is in the UTC format (HH:MM). The minutes in the list must be set to **00** and the hours
         * cannot be repeated. In the replication policy, you are advised to set one time point for one day.
         *
         * <a name="cbrPolicyLongTermRetention"></a>
         * The `longTermRetention` block supports:
         */
        executionTimes: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the interval (in days) of backup schedule. The value range is `1` to `30`. This
         * parameter and `days` are alternative.
         */
        interval?: pulumi.Input<number>;
    }

    export interface PolicyLongTermRetention {
        /**
         * Specifies the latest backup of each day is saved in the long term.
         */
        daily?: pulumi.Input<number>;
        /**
         * How often (after how many incremental backups) a full backup is performed.
         */
        fullBackupInterval?: pulumi.Input<number>;
        /**
         * Specifies the latest backup of each month is saved in the long term.
         */
        monthly?: pulumi.Input<number>;
        /**
         * Specifies the latest backup of each week is saved in the long term.
         */
        weekly?: pulumi.Input<number>;
        /**
         * Specifies the latest backup of each year is saved in the long term.
         *
         * > A maximum of 10 backups are retained for failed periodic backup tasks. They are retained for one month and can be
         * manually deleted on the web console.
         */
        yearly?: pulumi.Input<number>;
    }

    export interface VaultPolicy {
        /**
         * The ID of destination vault to which the replication policy will associated.
         */
        destinationVaultId?: pulumi.Input<string>;
        /**
         * A resource ID in UUID format.
         */
        id: pulumi.Input<string>;
    }

    export interface VaultResource {
        /**
         * Specifies the array of disk IDs which will be excluded in the backup.
         * Only **server** vault support this parameter.
         */
        excludes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the array of disk or SFS file system IDs which will be included in the backup.
         * Only **disk** and **turbo** vault support this parameter.
         */
        includes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the ID of the ECS instance to be backed up.
         */
        serverId?: pulumi.Input<string>;
    }
}

export namespace Cce {
    export interface AddonValues {
        /**
         * Specifies the key/value pairs vary depending on the add-on.
         * Only supports non-nested structure and only supports string type elements.
         * This is an alternative to `basicJson`, but it is not recommended.
         * Changing this parameter will create a new resource.
         */
        basic?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Specifies the json string vary depending on the add-on.
         * Changing this parameter will create a new resource.
         */
        basicJson?: pulumi.Input<string>;
        /**
         * Specifies the key/value pairs vary depending on the add-on.
         * Only supports non-nested structure and only supports string type elements.
         * This is an alternative to `customJson`, but it is not recommended.
         * Changing this parameter will create a new resource.
         */
        custom?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Specifies the json string vary depending on the add-on.
         * Changing this parameter will create a new resource.
         */
        customJson?: pulumi.Input<string>;
        /**
         * Specifies the key/value pairs vary depending on the add-on.
         * Only supports non-nested structure and only supports string type elements.
         * This is an alternative to `flavorJson`, but it is not recommended.
         * Changing this parameter will create a new resource.
         *
         * Arguments which can be passed to the `basicJson`, `customJson` and `flavorJson` add-on parameters depends on
         * the add-on type and version. For more detailed description of add-ons
         * see add-ons description
         */
        flavor?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Specifies the json string vary depending on the add-on.
         * Changing this parameter will create a new resource.
         */
        flavorJson?: pulumi.Input<string>;
    }

    export interface ClusterCertificateCluster {
        /**
         * The certificate data.
         */
        certificateAuthorityData?: pulumi.Input<string>;
        /**
         * Specifies the component name.
         * Changing this parameter will create a new cluster resource.
         */
        name?: pulumi.Input<string>;
        /**
         * The server IP address.
         */
        server?: pulumi.Input<string>;
    }

    export interface ClusterCertificateUser {
        /**
         * The client certificate data.
         */
        clientCertificateData?: pulumi.Input<string>;
        /**
         * The client key data.
         */
        clientKeyData?: pulumi.Input<string>;
        /**
         * Specifies the component name.
         * Changing this parameter will create a new cluster resource.
         */
        name?: pulumi.Input<string>;
    }

    export interface ClusterComponentConfiguration {
        /**
         * Specifies JSON string of the component configurations.
         * Changing this parameter will create a new cluster resource.
         */
        configurations?: pulumi.Input<string>;
        /**
         * Specifies the component name.
         * Changing this parameter will create a new cluster resource.
         */
        name: pulumi.Input<string>;
    }

    export interface ClusterEncryptionConfig {
        kmsKeyId?: pulumi.Input<string>;
        mode?: pulumi.Input<string>;
    }

    export interface ClusterExtendParam {
        /**
         * Specifies the AZ of master nodes in the cluster. The value can be:
         * + **multi_az**: The cluster will span across AZs. This field is configurable only for high-availability clusters.
         * + **AZ of the dedicated cloud computing pool**: The cluster will be deployed in the AZ of Dedicated Cloud (DeC).
         * This parameter is mandatory for dedicated CCE clusters.
         *
         * Changing this parameter will create a new cluster resource.
         */
        clusterAz?: pulumi.Input<string>;
        /**
         * Specifies the cluster CPU management policy.
         * The value can be:
         * + **none**: CPU cores will not be exclusively allocated to workload pods.
         * Select this value if you want a large pool of shareable CPU cores.
         * + **static**: CPU cores can be exclusively allocated to workload pods.
         * Select this value if your workload is sensitive to latency in CPU cache and scheduling.In a CCE Turbo cluster,
         * this setting is valid only for nodes where common containers, not Kata containers, run.
         *
         * Defaults to none.
         * Changing this parameter will create a new cluster resource.
         *
         * <a name="cceClusterComponentConfigurations"></a>
         * The `componentConfigurations` block supports:
         */
        cpuManagerPolicy?: pulumi.Input<string>;
        /**
         * Specifies the specifications of the master node
         * in the dedicated hybrid cluster.
         * Changing this parameter will create a new cluster resource.
         */
        decMasterFlavor?: pulumi.Input<string>;
        /**
         * Specifies the default UmaskMode configuration of Docker in a
         * cluster. The value can be **secure** or **normal**, defaults to normal.
         * Changing this parameter will create a new cluster resource.
         */
        dockerUmaskMode?: pulumi.Input<string>;
        /**
         * Specifies whether the system and data disks of a master node
         * use dedicated distributed storage. If left unspecified, EVS disks are used by default.
         * This parameter is mandatory for dedicated CCE clusters.
         * It is in the following format:
         *
         * ```bash
         * <rootVol.dssPoolID>.<rootVol.volType>;<dataVol.dssPoolID>.<dataVol.volType>
         * ```
         *
         * Changing this parameter will create a new cluster resource.
         */
        dssMasterVolumes?: pulumi.Input<string>;
        /**
         * Specifies the number of mask bits of the fixed IP address pool
         * of the container network model. This field can only be used when `containerNetworkType` is set to **vpc-router**.
         * Changing this parameter will create a new cluster resource.
         */
        fixPoolMask?: pulumi.Input<string>;
    }

    export interface ClusterMaster {
        /**
         * Specifies the availability zone of the master node.
         * Changing this parameter will create a new cluster resource.
         *
         * <a name="cceClusterExtendParams"></a>
         * The `extendParams` block supports:
         */
        availabilityZone?: pulumi.Input<string>;
    }

    export interface NodeAttachDataVolume {
        dssPoolId?: pulumi.Input<string>;
        /**
         * @deprecated use extendParams instead
         */
        extendParam?: pulumi.Input<string>;
        extendParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * schema: Internal
         */
        hwPassthrough?: pulumi.Input<boolean>;
        iops?: pulumi.Input<number>;
        kmsKeyId?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        throughput?: pulumi.Input<number>;
        volumetype?: pulumi.Input<string>;
    }

    export interface NodeAttachExtensionNic {
        /**
         * The ID of the subnet to which the NIC belongs.
         */
        subnetId?: pulumi.Input<string>;
    }

    export interface NodeAttachHostnameConfig {
        type: pulumi.Input<string>;
    }

    export interface NodeAttachRootVolume {
        dssPoolId?: pulumi.Input<string>;
        /**
         * @deprecated use extendParams instead
         */
        extendParam?: pulumi.Input<string>;
        extendParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * schema: Internal
         */
        hwPassthrough?: pulumi.Input<boolean>;
        iops?: pulumi.Input<number>;
        kmsKeyId?: pulumi.Input<string>;
        size?: pulumi.Input<number>;
        throughput?: pulumi.Input<number>;
        volumetype?: pulumi.Input<string>;
    }

    export interface NodeAttachStorage {
        groups: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachStorageGroup>[]>;
        selectors: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachStorageSelector>[]>;
    }

    export interface NodeAttachStorageGroup {
        cceManaged?: pulumi.Input<boolean>;
        /**
         * Specifies the Node Name.
         */
        name: pulumi.Input<string>;
        selectorNames: pulumi.Input<pulumi.Input<string>[]>;
        virtualSpaces: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachStorageGroupVirtualSpace>[]>;
    }

    export interface NodeAttachStorageGroupVirtualSpace {
        lvmLvType?: pulumi.Input<string>;
        lvmPath?: pulumi.Input<string>;
        /**
         * Specifies the Node Name.
         */
        name: pulumi.Input<string>;
        runtimeLvType?: pulumi.Input<string>;
        size: pulumi.Input<string>;
    }

    export interface NodeAttachStorageSelector {
        matchLabelCount?: pulumi.Input<string>;
        matchLabelMetadataCmkid?: pulumi.Input<string>;
        matchLabelMetadataEncrypted?: pulumi.Input<string>;
        matchLabelSize?: pulumi.Input<string>;
        matchLabelVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the Node Name.
         */
        name: pulumi.Input<string>;
        type?: pulumi.Input<string>;
    }

    export interface NodeAttachTaint {
        /**
         * Available options are NoSchedule, PreferNoSchedule, and NoExecute.
         * Changing this parameter will create a new resource.
         */
        effect: pulumi.Input<string>;
        /**
         * A key must contain 1 to 63 characters starting with a letter or digit.
         * Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
         * as the prefix of a key. Changing this parameter will create a new resource.
         */
        key: pulumi.Input<string>;
        /**
         * A value must start with a letter or digit and can contain a maximum of 63
         * characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
         * create a new resource.
         */
        value: pulumi.Input<string>;
    }

    export interface NodeDataVolume {
        dssPoolId?: pulumi.Input<string>;
        /**
         * Specifies the extended parameter.
         * Changing this parameter will create a new resource.
         * The available keys are as follows:
         * + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
         * + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
         * + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
         * + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
         *
         * The following is an example default configuration:
         *
         * @deprecated use extendParams instead
         */
        extendParam?: pulumi.Input<string>;
        /**
         * Specifies the disk expansion parameters.
         * Changing this parameter will create a new resource.
         */
        extendParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * schema: Internal
         */
        hwPassthrough?: pulumi.Input<boolean>;
        iops?: pulumi.Input<number>;
        /**
         * Specifies the ID of a KMS key. This is used to encrypt the volume.
         * Changing this parameter will create a new resource.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * Specifies the disk size in GB.
         * Changing this parameter will create a new resource.
         */
        size: pulumi.Input<number>;
        throughput?: pulumi.Input<number>;
        /**
         * Specifies the disk type.
         * Changing this parameter will create a new resource.
         */
        volumetype: pulumi.Input<string>;
    }

    export interface NodeExtendParams {
        agencyName?: pulumi.Input<string>;
        dockerBaseSize?: pulumi.Input<number>;
        kubeReservedMem?: pulumi.Input<number>;
        marketType?: pulumi.Input<string>;
        /**
         * Specifies the maximum number of instances a node is allowed to create.
         * Changing this parameter will create a new resource.
         */
        maxPods?: pulumi.Input<number>;
        nicThreshold?: pulumi.Input<string>;
        nodeImageId?: pulumi.Input<string>;
        nodeMultiQueue?: pulumi.Input<string>;
        /**
         * Specifies the script to be executed after installation.
         * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
         */
        postinstall?: pulumi.Input<string>;
        /**
         * Specifies the script to be executed before installation.
         * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
         */
        preinstall?: pulumi.Input<string>;
        securityReinforcementType?: pulumi.Input<string>;
        spotPrice?: pulumi.Input<string>;
        systemReservedMem?: pulumi.Input<number>;
    }

    export interface NodeExtensionNic {
        /**
         * Specifies the ID of the subnet to which the NIC belongs.
         * Changing this parameter will create a new resource.
         */
        subnetId: pulumi.Input<string>;
    }

    export interface NodeHostnameConfig {
        /**
         * Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
         * The default value is **evs**. Changing this parameter will create a new resource.
         */
        type: pulumi.Input<string>;
    }

    export interface NodePoolDataVolume {
        /**
         * Specifies the DSS pool ID. This field is used only for dedicated storage.
         * Changing this parameter will create a new resource.
         */
        dssPoolId?: pulumi.Input<string>;
        /**
         * @deprecated use extendParams instead
         */
        extendParam?: pulumi.Input<string>;
        /**
         * Specifies the disk expansion parameters.
         * Changing this parameter will create a new resource.
         */
        extendParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * schema: Internal
         */
        hwPassthrough?: pulumi.Input<boolean>;
        /**
         * Specifies the iops of the disk,
         * required when `volumetype` is **GPSSD2** or **ESSD2**.
         */
        iops?: pulumi.Input<number>;
        /**
         * Specifies the KMS key ID. This is used to encrypt the volume.
         * Changing this parameter will create a new resource.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * Specifies the disk size in GB. Changing this parameter will create a new resource.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the throughput of the disk in MiB/s,
         * required when `volumetype` is **GPSSD2**.
         *
         * > You need to create an agency (EVSAccessKMS) when disk encryption is used in the current project for the first time ever.
         */
        throughput?: pulumi.Input<number>;
        /**
         * Specifies the disk type. Changing this parameter will create a new resource.
         */
        volumetype: pulumi.Input<string>;
    }

    export interface NodePoolExtendParams {
        /**
         * Specifies the agency name.
         * Changing this parameter will create a new resource.
         */
        agencyName?: pulumi.Input<string>;
        /**
         * Specifies the available disk space of a single container on a node,
         * in GB. Changing this parameter will create a new resource.
         */
        dockerBaseSize?: pulumi.Input<number>;
        /**
         * Specifies the reserved node memory, which is reserved for
         * Kubernetes-related components. Changing this parameter will create a new resource.
         */
        kubeReservedMem?: pulumi.Input<number>;
        marketType?: pulumi.Input<string>;
        /**
         * Specifies the maximum number of instances a node is allowed to create.
         * Changing this parameter will create a new resource.
         */
        maxPods?: pulumi.Input<number>;
        /**
         * Specifies the ENI pre-binding thresholds.
         * Example setting: **"0.3:0.6"**. Changing this parameter will create a new resource.
         */
        nicThreshold?: pulumi.Input<string>;
        /**
         * Specifies the image ID to create the node.
         * Changing this parameter will create a new resource.
         */
        nodeImageId?: pulumi.Input<string>;
        /**
         * Specifies the number of ENI queues.
         * Example setting: **"[{\"queue\":4}]"**. Changing this parameter will create a new resource.
         */
        nodeMultiQueue?: pulumi.Input<string>;
        /**
         * Specifies the script to be executed after installation.
         * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
         */
        postinstall?: pulumi.Input<string>;
        /**
         * Specifies the script to be executed before installation.
         * The input value can be a Base64 encoded string or not. Changing this parameter will create a new resource.
         */
        preinstall?: pulumi.Input<string>;
        securityReinforcementType?: pulumi.Input<string>;
        spotPrice?: pulumi.Input<string>;
        /**
         * Specifies the reserved node memory, which is reserved
         * value for system components. Changing this parameter will create a new resource.
         */
        systemReservedMem?: pulumi.Input<number>;
    }

    export interface NodePoolExtensionScaleGroup {
        /**
         * Specifies the basic information about the extended scaling group.
         * The object structure is documented below.
         */
        metadata?: pulumi.Input<inputs.Cce.NodePoolExtensionScaleGroupMetadata>;
        /**
         * Specifies the configurations of the extended scaling group,
         * which carry different configurations from those of the default scaling group.
         * The object structure is documented below.
         *
         * <a name="metadata"></a>
         * The `metadata` block supports:
         */
        spec?: pulumi.Input<inputs.Cce.NodePoolExtensionScaleGroupSpec>;
    }

    export interface NodePoolExtensionScaleGroupMetadata {
        /**
         * Specifies the node pool name.
         */
        name?: pulumi.Input<string>;
    }

    export interface NodePoolExtensionScaleGroupSpec {
        /**
         * Specifies the auto scaling configurations of the extended scaling group.
         * The object structure is documented below.
         *
         * <a name="capacityReservationSpecification"></a>
         * The `capacityReservationSpecification` block supports:
         */
        autoscaling?: pulumi.Input<inputs.Cce.NodePoolExtensionScaleGroupSpecAutoscaling>;
        /**
         * Specifies the availability zone of a node.
         * If this parameter is not specified or left blank, the default scaling group configurations take effect.
         */
        az?: pulumi.Input<string>;
        /**
         * Specifies the capacity reservation
         * configurations of the extended scaling group.
         * The object structure is documented below.
         */
        capacityReservationSpecification?: pulumi.Input<inputs.Cce.NodePoolExtensionScaleGroupSpecCapacityReservationSpecification>;
        /**
         * Specifies the node flavor.
         */
        flavor?: pulumi.Input<string>;
    }

    export interface NodePoolExtensionScaleGroupSpecAutoscaling {
        /**
         * Specifies whether to enable auto scaling for the scaling group, defaults to **false**.
         */
        enable?: pulumi.Input<boolean>;
        /**
         * Specifies the priority of the scaling group, defaults to **0**.
         * A higher value indicates a greater priority.
         */
        extensionPriority?: pulumi.Input<number>;
        /**
         * Specifies the maximum number of nodes allowed if auto scaling is enabled.
         */
        maxNodeCount?: pulumi.Input<number>;
        /**
         * Specifies the minimum number of nodes allowed if auto scaling is enabled.
         */
        minNodeCount?: pulumi.Input<number>;
    }

    export interface NodePoolExtensionScaleGroupSpecCapacityReservationSpecification {
        /**
         * The resource ID in UUID format.
         */
        id?: pulumi.Input<string>;
        /**
         * Specifies the capacity of a private storage pool. If the value is none,
         * the capacity reservation is not specified. If the value is targeted, the capacity reservation is specified.
         * In this case, the `id` cannot be left blank.
         *
         * <a name="autoscaling"></a>
         * The `autoscaling` block supports:
         */
        preference?: pulumi.Input<string>;
    }

    export interface NodePoolHostnameConfig {
        /**
         * Specifies the node pool type. Possible values are: **vm** and **ElasticBMS**.
         */
        type: pulumi.Input<string>;
    }

    export interface NodePoolRootVolume {
        /**
         * Specifies the DSS pool ID. This field is used only for dedicated storage.
         * Changing this parameter will create a new resource.
         */
        dssPoolId?: pulumi.Input<string>;
        /**
         * @deprecated use extendParams instead
         */
        extendParam?: pulumi.Input<string>;
        /**
         * Specifies the disk expansion parameters.
         * Changing this parameter will create a new resource.
         */
        extendParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * schema: Internal
         */
        hwPassthrough?: pulumi.Input<boolean>;
        /**
         * Specifies the iops of the disk,
         * required when `volumetype` is **GPSSD2** or **ESSD2**.
         */
        iops?: pulumi.Input<number>;
        /**
         * Specifies the KMS key ID. This is used to encrypt the volume.
         * Changing this parameter will create a new resource.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * Specifies the disk size in GB. Changing this parameter will create a new resource.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the throughput of the disk in MiB/s,
         * required when `volumetype` is **GPSSD2**.
         */
        throughput?: pulumi.Input<number>;
        /**
         * Specifies the disk type. Changing this parameter will create a new resource.
         */
        volumetype: pulumi.Input<string>;
    }

    export interface NodePoolStorage {
        /**
         * Specifies the storage group consists of multiple storage devices.
         * This is used to divide storage space. Structure is documented below.
         * Changing this parameter will create a new resource.
         */
        groups: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolStorageGroup>[]>;
        /**
         * Specifies the disk selection.
         * Matched disks are managed according to match labels and storage type. Structure is documented below.
         * Changing this parameter will create a new resource.
         */
        selectors: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolStorageSelector>[]>;
    }

    export interface NodePoolStorageGroup {
        /**
         * Specifies the whether the storage space is for **kubernetes** and
         * **runtime** components. Only one group can be set to true. The default value is **false**.
         * Changing this parameter will create a new resource.
         */
        cceManaged?: pulumi.Input<boolean>;
        /**
         * Specifies the name of an extended scaling group.
         * The value cannot be default and can contain a maximum of 55 characters.
         * Only digits, lowercase letters, and hyphens (-) are allowed.
         *
         * <a name="spec"></a>
         * The `spec` block supports:
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the list of names of selectors to match.
         * This parameter corresponds to name in `selectors`. A group can match multiple selectors,
         * but a selector can match only one group. Changing this parameter will create a new resource.
         */
        selectorNames: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the detailed management of space configuration in a group.
         * Changing this parameter will create a new resource.
         */
        virtualSpaces: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolStorageGroupVirtualSpace>[]>;
    }

    export interface NodePoolStorageGroupVirtualSpace {
        /**
         * Specifies the LVM write mode, values can be **linear** and **striped**.
         * This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
         * a new resource.
         */
        lvmLvType?: pulumi.Input<string>;
        /**
         * Specifies the absolute path to which the disk is attached.
         * This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
         */
        lvmPath?: pulumi.Input<string>;
        /**
         * Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
         * and **user** are supported. Changing this parameter will create a new resource.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the LVM write mode, values can be **linear** and **striped**.
         * This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
         *
         * <a name="hostnameConfig"></a>
         * The `hostnameConfig` block supports:
         */
        runtimeLvType?: pulumi.Input<string>;
        /**
         * Specifies the size of a virtual space. Only an integer percentage is supported.
         * Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
         * Changing this parameter will create a new resource.
         */
        size: pulumi.Input<string>;
    }

    export interface NodePoolStorageSelector {
        /**
         * Specifies the number of disks to be selected. If omitted,
         * all disks of this type are selected. Changing this parameter will create a new resource.
         */
        matchLabelCount?: pulumi.Input<string>;
        /**
         * Specifies the customer master key ID of an encrypted
         * disk. Changing this parameter will create a new resource.
         */
        matchLabelMetadataCmkid?: pulumi.Input<string>;
        /**
         * Specifies the disk encryption identifier.
         * Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
         * If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
         */
        matchLabelMetadataEncrypted?: pulumi.Input<string>;
        /**
         * Specifies the matched disk size. If omitted,
         * the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
         */
        matchLabelSize?: pulumi.Input<string>;
        /**
         * Specifies the EVS disk type. Currently,
         * **SSD**, **GPSSD**, and **SAS** are supported. If omitted, the disk type is not limited.
         * Changing this parameter will create a new resource.
         */
        matchLabelVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the selector name, used as the index of `selectorNames` in storage group.
         * The name of each selector must be unique. Changing this parameter will create a new resource.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
         * The default value is **evs**. Changing this parameter will create a new resource.
         */
        type?: pulumi.Input<string>;
    }

    export interface NodePoolTaint {
        /**
         * Available options are NoSchedule, PreferNoSchedule, and NoExecute.
         *
         * <a name="extendParams"></a>
         * The `extendParams` block supports:
         */
        effect: pulumi.Input<string>;
        /**
         * A key must contain 1 to 63 characters starting with a letter or digit. Only letters,
         * digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used as the
         * prefix of a key.
         */
        key: pulumi.Input<string>;
        /**
         * A value must start with a letter or digit and can contain a maximum of 63 characters,
         * including letters, digits, hyphens (-), underscores (_), and periods (.).
         */
        value: pulumi.Input<string>;
    }

    export interface NodeRootVolume {
        dssPoolId?: pulumi.Input<string>;
        /**
         * Specifies the extended parameter.
         * Changing this parameter will create a new resource.
         * The available keys are as follows:
         * + **agency_name**: The agency name to provide temporary credentials for CCE node to access other cloud services.
         * + **alpha.cce/NodeImageID**: The custom image ID used to create the BMS nodes.
         * + **dockerBaseSize**: The available disk space of a single docker container on the node in device mapper mode.
         * + **DockerLVMConfigOverride**: Specifies the data disk configurations of Docker.
         *
         * The following is an example default configuration:
         *
         * @deprecated use extendParams instead
         */
        extendParam?: pulumi.Input<string>;
        /**
         * Specifies the disk expansion parameters.
         * Changing this parameter will create a new resource.
         */
        extendParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * schema: Internal
         */
        hwPassthrough?: pulumi.Input<boolean>;
        iops?: pulumi.Input<number>;
        /**
         * Specifies the ID of a KMS key. This is used to encrypt the volume.
         * Changing this parameter will create a new resource.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * Specifies the disk size in GB.
         * Changing this parameter will create a new resource.
         */
        size: pulumi.Input<number>;
        throughput?: pulumi.Input<number>;
        /**
         * Specifies the disk type.
         * Changing this parameter will create a new resource.
         */
        volumetype: pulumi.Input<string>;
    }

    export interface NodeStorage {
        /**
         * Specifies the storage group consists of multiple storage devices.
         * This is used to divide storage space. Structure is documented below.
         * Changing this parameter will create a new resource.
         */
        groups: pulumi.Input<pulumi.Input<inputs.Cce.NodeStorageGroup>[]>;
        /**
         * Specifies the disk selection.
         * Matched disks are managed according to match labels and storage type. Structure is documented below.
         * Changing this parameter will create a new resource.
         */
        selectors: pulumi.Input<pulumi.Input<inputs.Cce.NodeStorageSelector>[]>;
    }

    export interface NodeStorageGroup {
        /**
         * Specifies the whether the storage space is for **kubernetes** and
         * **runtime** components. Only one group can be set to true. The default value is **false**.
         * Changing this parameter will create a new resource.
         */
        cceManaged?: pulumi.Input<boolean>;
        /**
         * Specifies the name of a virtual storage group. Each group name must be unique.
         * Changing this parameter will create a new resource.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the list of names of seletors to match.
         * This parameter corresponds to name in `selectors`. A group can match multiple selectors,
         * but a selector can match only one group. Changing this parameter will create a new resource.
         */
        selectorNames: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the detailed management of space configuration in a group.
         * Changing this parameter will create a new resource.
         */
        virtualSpaces: pulumi.Input<pulumi.Input<inputs.Cce.NodeStorageGroupVirtualSpace>[]>;
    }

    export interface NodeStorageGroupVirtualSpace {
        /**
         * Specifies the LVM write mode, values can be **linear** and **striped**.
         * This parameter takes effect only in **kubernetes** and **user** configuration. Changing this parameter will create
         * a new resource.
         */
        lvmLvType?: pulumi.Input<string>;
        /**
         * Specifies the absolute path to which the disk is attached.
         * This parameter takes effect only in **user** configuration. Changing this parameter will create a new resource.
         */
        lvmPath?: pulumi.Input<string>;
        /**
         * Specifies the virtual space name. Currently, only **kubernetes**, **runtime**,
         * and **user** are supported. Changing this parameter will create a new resource.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the LVM write mode, values can be **linear** and **striped**.
         * This parameter takes effect only in **runtime** configuration. Changing this parameter will create a new resource.
         */
        runtimeLvType?: pulumi.Input<string>;
        /**
         * Specifies the size of a virtual space. Only an integer percentage is supported.
         * Example: 90%. Note that the total percentage of all virtual spaces in a group cannot exceed 100%.
         * Changing this parameter will create a new resource.
         */
        size: pulumi.Input<string>;
    }

    export interface NodeStorageSelector {
        /**
         * Specifies the number of disks to be selected. If omitted,
         * all disks of this type are selected. Changing this parameter will create a new resource.
         */
        matchLabelCount?: pulumi.Input<string>;
        /**
         * Specifies the cstomer master key ID of an encrypted
         * disk. Changing this parameter will create a new resource.
         */
        matchLabelMetadataCmkid?: pulumi.Input<string>;
        /**
         * Specifies the disk encryption identifier.
         * Values can be: **0** indicates that the disk is not encrypted and **1** indicates that the disk is encrypted.
         * If omitted, whether the disk is encrypted is not limited. Changing this parameter will create a new resource.
         */
        matchLabelMetadataEncrypted?: pulumi.Input<string>;
        /**
         * Specifies the matched disk size. If omitted,
         * the disk size is not limited. Example: 100. Changing this parameter will create a new resource.
         */
        matchLabelSize?: pulumi.Input<string>;
        /**
         * Specifies the EVS disk type. Currently,
         * **SSD** and **SAS** are supported. If omitted, the disk type is not limited.
         * Changing this parameter will create a new resource.
         */
        matchLabelVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the selector name, used as the index of `selectorNames` in storage group.
         * The name of each selector must be unique. Changing this parameter will create a new resource.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the storage type. Currently, only **evs (EVS volumes)** is supported.
         * The default value is **evs**. Changing this parameter will create a new resource.
         */
        type?: pulumi.Input<string>;
    }

    export interface NodeTaint {
        /**
         * Available options are NoSchedule, PreferNoSchedule, and NoExecute.
         * Changing this parameter will create a new resource.
         */
        effect: pulumi.Input<string>;
        /**
         * A key must contain 1 to 63 characters starting with a letter or digit.
         * Only letters, digits, hyphens (-), underscores (_), and periods (.) are allowed. A DNS subdomain name can be used
         * as the prefix of a key. Changing this parameter will create a new resource.
         */
        key: pulumi.Input<string>;
        /**
         * A value must start with a letter or digit and can contain a maximum of 63
         * characters, including letters, digits, hyphens (-), underscores (_), and periods (.). Changing this parameter will
         * create a new resource.
         */
        value?: pulumi.Input<string>;
    }
}

export namespace Cdm {
    export interface ClusterInstance {
        /**
         * Instance ID.
         */
        id?: pulumi.Input<string>;
        /**
         * Management IP address.
         */
        manageIp?: pulumi.Input<string>;
        /**
         * Specifies cluster name. Changing this parameter will create a new resource.
         */
        name?: pulumi.Input<string>;
        /**
         * Private IP.
         */
        privateIp?: pulumi.Input<string>;
        /**
         * Public IP.
         */
        publicIp?: pulumi.Input<string>;
        /**
         * Instance role.
         */
        role?: pulumi.Input<string>;
        /**
         * Traffic IP.
         */
        trafficIp?: pulumi.Input<string>;
        /**
         * Instance type.
         */
        type?: pulumi.Input<string>;
    }
}

export namespace Ces {
    export interface AlarmruleAlarmAction {
        /**
         * specifies the list of objects to be notified if the alarm status changes, the
         * maximum length is 5. If `type` is set to *notification*, the value of notificationList cannot be empty. If `type` is
         * set to *autoscaling*, the value of notificationList must be **[]**
         * and the value of namespace must be *SYS.AS*.
         *
         * Note: to enable the *autoscaling* alarm rules take effect, you must bind scaling policies.
         */
        notificationLists: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the type of action triggered by an alarm. the
         * value can be *notification* or *autoscaling*.
         * + notification: indicates that a notification will be sent to the user.
         * + autoscaling: indicates that a scaling action will be triggered.
         */
        type: pulumi.Input<string>;
    }

    export interface AlarmruleCondition {
        /**
         * Specifies the comparison condition of alarm thresholds. The value can be >,
         * =, <, >=, or <=.
         */
        comparisonOperator: pulumi.Input<string>;
        /**
         * Specifies the number of consecutive occurrence times. The value ranges from 1 to 5.
         */
        count: pulumi.Input<number>;
        /**
         * Specifies the data rollup methods. The value can be max, min, average, sum, and vaiance.
         */
        filter: pulumi.Input<string>;
        /**
         * Specifies the alarm checking period in seconds. The value can be 0, 1, 300, 1200, 3600, 14400,
         * and 86400.
         *
         * Note: If period is set to 1, the raw metric data is used to determine whether to generate an alarm. When the value of
         * `alarmType` is **EVENT.SYS** or **EVENT.CUSTOM**, period can be set to 0.
         */
        period: pulumi.Input<number>;
        /**
         * Specifies the interval for triggering an alarm if the alarm persists.
         * Possible values are as follows:
         * + **0**: Cloud Eye triggers the alarm only once;
         * + **300**: Cloud Eye triggers the alarm every 5 minutes;
         * + **600**: Cloud Eye triggers the alarm every 10 minutes;
         * + **900**: Cloud Eye triggers the alarm every 15 minutes;
         * + **1800**: Cloud Eye triggers the alarm every 30 minutes;
         * + **3600**: Cloud Eye triggers the alarm every hour;
         * + **10800**: Cloud Eye triggers the alarm every 3 hours;
         * + **21600**: Cloud Eye triggers the alarm every 6 hours;
         * + **43200**: Cloud Eye triggers the alarm every 12 hour;
         * + **86400**: Cloud Eye triggers the alarm every day.
         *
         * The default value is **0**.
         */
        suppressDuration?: pulumi.Input<number>;
        /**
         * Specifies the data unit.
         */
        unit?: pulumi.Input<string>;
        /**
         * Specifies the alarm threshold. The value ranges from 0 to Number of
         * 1.7976931348623157e+108.
         */
        value: pulumi.Input<number>;
    }

    export interface AlarmruleInsufficientdataAction {
        notificationLists: pulumi.Input<pulumi.Input<string>[]>;
        type: pulumi.Input<string>;
    }

    export interface AlarmruleMetric {
        /**
         * Specifies the list of metric dimensions. The structure is described below.
         */
        dimensions?: pulumi.Input<pulumi.Input<inputs.Ces.AlarmruleMetricDimension>[]>;
        /**
         * Specifies the metric name of the condition. The value can be a string of
         * 1 to 64 characters that must start with a letter and contain only letters, digits, and underscores (_).
         */
        metricName: pulumi.Input<string>;
        /**
         * Specifies the namespace in **service.item** format. **service** and **item**
         * each must be a string that starts with a letter and contains only letters, digits, and underscores (_).
         * Changing this creates a new resource.
         */
        namespace: pulumi.Input<string>;
    }

    export interface AlarmruleMetricDimension {
        /**
         * Specifies the dimension name. The value can be a string of 1 to 32 characters
         * that must start with a letter and contain only letters, digits, underscores (_), and hyphens (-).
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the dimension value. The value can be a string of 1 to 64 characters
         * that must start with a letter or a number and contain only letters, digits, underscores (_), and hyphens (-).
         */
        value: pulumi.Input<string>;
    }

    export interface AlarmruleOkAction {
        /**
         * specifies the list of objects to be notified if the alarm status changes, the
         * maximum length is 5.
         */
        notificationLists: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the type of action triggered by an alarm. the value is notification.
         * notification: indicates that a notification will be sent to the user.
         */
        type: pulumi.Input<string>;
    }
}

export namespace Cfw {
    export interface AclRuleCustomService {
        /**
         * The destination port.
         */
        destPort: pulumi.Input<string>;
        /**
         * The protocol type.
         */
        protocol: pulumi.Input<number>;
        /**
         * The source port.
         *
         * <a name="CustomServiceGroups"></a>
         * The `customServiceGroups` block supports:
         */
        sourcePort: pulumi.Input<string>;
    }

    export interface AclRuleCustomServiceGroups {
        /**
         * The IDs of the predefined service groups.
         */
        groupIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The protocols used in the predefined service groups.
         *
         * <a name="SourceRegionList"></a>
         * The `sourceRegionList` block supports:
         */
        protocols: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface AclRuleDestinationRegionList {
        /**
         * The Chinese description of the region.
         */
        descriptionCn?: pulumi.Input<string>;
        /**
         * The English description of the region.
         */
        descriptionEn?: pulumi.Input<string>;
        /**
         * The region ID.
         */
        regionId: pulumi.Input<string>;
        /**
         * The region type.
         */
        regionType: pulumi.Input<number>;
    }

    export interface AclRulePredefinedServiceGroups {
        /**
         * The IDs of the predefined service groups.
         */
        groupIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The protocols used in the predefined service groups.
         *
         * <a name="SourceRegionList"></a>
         * The `sourceRegionList` block supports:
         */
        protocols: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface AclRuleSequence {
        /**
         * Whether to pin on bottom.
         * The options are as follows:
         * + **0**: no;
         * + **1**: yes;
         */
        bottom?: pulumi.Input<number>;
        /**
         * The ID of the rule that the added rule will follow.
         */
        destRuleId?: pulumi.Input<string>;
        /**
         * Whether to pin on top.
         * The options are as follows:
         * + **0**: no;
         * + **1**: yes;
         *
         * <a name="CustomServices"></a>
         * The `customServices` block supports:
         */
        top?: pulumi.Input<number>;
    }

    export interface AclRuleSourceRegionList {
        /**
         * The Chinese description of the region.
         */
        descriptionCn?: pulumi.Input<string>;
        /**
         * The English description of the region.
         */
        descriptionEn?: pulumi.Input<string>;
        /**
         * The region ID.
         */
        regionId: pulumi.Input<string>;
        /**
         * The region type.
         */
        regionType: pulumi.Input<number>;
    }

    export interface AntiVirusScanProtocolConfig {
        /**
         * The anti virus action. The valid value can be **0** (observe) or **1** (block).
         */
        action: pulumi.Input<number>;
        /**
         * The protocol type.
         * The valid values are as follows:
         * + **0**: HTTP;
         * + **1**: SMTP;
         * + **2**: POP3;
         * + **3**: IMAP4;
         * + **4**: FTP;
         * + **5**: SMB;
         * + **6**: Malicious Access Control;
         */
        protocolType: pulumi.Input<number>;
    }

    export interface CaptureTaskDestination {
        /**
         * Specifies the address.
         */
        address: pulumi.Input<string>;
        /**
         * Specifies the address type.
         * The valid values are:
         * + **0**: indicates IPv4;
         * + **1**: indicates IPv6.
         *
         * <a name="Service"></a>
         * The `service` block supports:
         */
        addressType: pulumi.Input<number>;
    }

    export interface CaptureTaskService {
        /**
         * Specifies the destination port.
         */
        destPort?: pulumi.Input<string>;
        /**
         * Specifies the protocol type.
         * The valid values are:
         * + **6**: indicates TCP;
         * + **17**: indicates UDP;
         * + **1**: indicates ICMP;
         * + **58**: indicates ICMPv6;
         * + **-1**: indicates any protocol.
         */
        protocol: pulumi.Input<number>;
        /**
         * Specifies the source port.
         */
        sourcePort?: pulumi.Input<string>;
    }

    export interface CaptureTaskSource {
        /**
         * Specifies the address.
         */
        address: pulumi.Input<string>;
        /**
         * Specifies the address type.
         * The valid values are:
         * + **0**: indicates IPv4;
         * + **1**: indicates IPv6.
         *
         * <a name="Service"></a>
         * The `service` block supports:
         */
        addressType: pulumi.Input<number>;
    }

    export interface DomainNameGroupDomainName {
        /**
         * Specifies the description.
         */
        description?: pulumi.Input<string>;
        /**
         * The DNS IP list.
         */
        dnsIps?: pulumi.Input<string>;
        /**
         * The domain address ID.
         */
        domainAddressId?: pulumi.Input<string>;
        /**
         * Specifies the domain name.
         */
        domainName: pulumi.Input<string>;
    }

    export interface EipProtectionProtectedEip {
        /**
         * The ID of the protected EIP.
         */
        id: pulumi.Input<string>;
        /**
         * The IPv4 address of the protected EIP.
         */
        publicIpv4?: pulumi.Input<string>;
        /**
         * The IPv6 address of the protected EIP.
         *
         * > At least one of `publicIpv4` and `publicIpv6` must be set.
         */
        publicIpv6?: pulumi.Input<string>;
    }

    export interface FirewallFlavor {
        /**
         * The bandwidth of the firewall.
         */
        bandwidth?: pulumi.Input<number>;
        /**
         * The default bandwidth of the firewall.
         */
        defaultBandwidth?: pulumi.Input<number>;
        /**
         * The default EIP number of the firewall.
         */
        defaultEipCount?: pulumi.Input<number>;
        /**
         * The default log storage of the firewall.
         */
        defaultLogStorage?: pulumi.Input<number>;
        /**
         * The default VPC number of the firewall.
         */
        defaultVpcCount?: pulumi.Input<number>;
        /**
         * The EIP number of the firewall.
         */
        eipCount?: pulumi.Input<number>;
        /**
         * Specifies the extend bandwidth of the firewall.
         * Only works when the chargingMode is **prePaid**.
         * Changing this parameter will create a new resource.
         */
        extendBandwidth?: pulumi.Input<number>;
        /**
         * Specifies the extend EIP number of the firewall.
         * Only works when the chargingMode is **prePaid**.
         * Changing this parameter will create a new resource.
         */
        extendEipCount?: pulumi.Input<number>;
        /**
         * Specifies the extend VPC number of the firewall.
         * Only works when the chargingMode is **prePaid**.
         * Changing this parameter will create a new resource.
         */
        extendVpcCount?: pulumi.Input<number>;
        /**
         * The log storage of the firewall.
         */
        logStorage?: pulumi.Input<number>;
        /**
         * The total rule count of the firewall.
         */
        totalRuleCount?: pulumi.Input<number>;
        /**
         * The used rule count of the firewall.
         */
        usedRuleCount?: pulumi.Input<number>;
        /**
         * Specifies the version of the firewall.
         * When the chargingMode is **prePaid**: the value can be **Standard** and **Prefessional**.
         * When the chargingMode is **postPaid**: the value can be **Prefessional**.
         * Changing this parameter will create a new resource.
         */
        version: pulumi.Input<string>;
        /**
         * The VPC bandwidth of the firewall.
         */
        vpcBandwidth?: pulumi.Input<number>;
        /**
         * The VPC number of the firewall.
         */
        vpcCount?: pulumi.Input<number>;
    }

    export interface FirewallProtectObject {
        /**
         * The protected object ID.
         */
        objectId?: pulumi.Input<string>;
        /**
         * The protected object name.
         */
        objectName?: pulumi.Input<string>;
        /**
         * The object type.
         * The options are as follows: 0: north-south; 1: east-west.
         */
        type?: pulumi.Input<number>;
    }

}

export namespace Css {
    export interface ClusterBackupStrategy {
        /**
         * Specifies the IAM agency used to access OBS.
         *
         * > **NOTE:**  If the `bucket`, `backupPath`, and `agency` parameters are empty at the same time, the system will
         * automatically create an OBS bucket and IAM agent, otherwise the configured parameter values will be used.
         */
        agency?: pulumi.Input<string>;
        /**
         * Specifies the storage path of the snapshot in the OBS bucket.
         */
        backupPath?: pulumi.Input<string>;
        /**
         * Specifies the OBS bucket used for index data backup. If there is snapshot data in an OBS
         * bucket, only the OBS bucket is used and cannot be changed.
         */
        bucket?: pulumi.Input<string>;
        /**
         * Specifies the number of days to retain the generated snapshots. Snapshots are reserved
         * for seven days by default.
         */
        keepDays?: pulumi.Input<number>;
        /**
         * Specifies the prefix of the snapshot that is automatically created. Defaults to **snapshot**.
         */
        prefix?: pulumi.Input<string>;
        /**
         * Specifies the time when a snapshot is automatically created everyday. Snapshots can
         * only be created on the hour. The time format is the time followed by the time zone, specifically, **HH:mm z**. In the
         * format, **HH:mm** refers to the hour time and z refers to the time zone. For example, "00:00 GMT+08:00"
         * and "01:00 GMT+08:00".
         */
        startTime: pulumi.Input<string>;
    }

    export interface ClusterClientNodeConfig {
        /**
         * Specifies the flavor name.
         */
        flavor: pulumi.Input<string>;
        /**
         * Specifies the number of cluster instances.
         * + When it is `masterNodeConfig`, The value range is `3` to `10`.
         * + When it is `clientNodeConfig`, The value range is `1` to `32`.
         */
        instanceNumber: pulumi.Input<number>;
        /**
         * Specifies the node IDs that needs to be scaled down.
         *
         * <a name="Css_master_or_client_volume"></a>
         * The `volume` block supports:
         */
        shrinkNodeIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the information about the volume.
         * The volume structure is documented below.
         */
        volume: pulumi.Input<inputs.Css.ClusterClientNodeConfigVolume>;
    }

    export interface ClusterClientNodeConfigVolume {
        /**
         * Specifies the volume size in **GB**, which must be a multiple of `10`.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the volume type. Value options are as follows:
         * + **COMMON**: Common I/O. The SATA disk is used.
         * + **HIGH**: High I/O. The SAS disk is used.
         * + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
         *
         * <a name="Css_public_access"></a>
         * The `publicAccess` block supports:
         */
        volumeType: pulumi.Input<string>;
    }

    export interface ClusterColdNodeConfig {
        /**
         * Specifies the flavor name.
         */
        flavor: pulumi.Input<string>;
        /**
         * Specifies the number of cluster instances.
         * + When it is `masterNodeConfig`, The value range is `3` to `10`.
         * + When it is `clientNodeConfig`, The value range is `1` to `32`.
         */
        instanceNumber: pulumi.Input<number>;
        /**
         * Specifies the node IDs that needs to be scaled down.
         *
         * <a name="Css_master_or_client_volume"></a>
         * The `volume` block supports:
         */
        shrinkNodeIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the information about the volume.
         * The volume structure is documented below.
         */
        volume?: pulumi.Input<inputs.Css.ClusterColdNodeConfigVolume>;
    }

    export interface ClusterColdNodeConfigVolume {
        /**
         * Specifies the volume size in **GB**, which must be a multiple of `10`.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the volume type. Value options are as follows:
         * + **COMMON**: Common I/O. The SATA disk is used.
         * + **HIGH**: High I/O. The SAS disk is used.
         * + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
         *
         * <a name="Css_public_access"></a>
         * The `publicAccess` block supports:
         */
        volumeType: pulumi.Input<string>;
    }

    export interface ClusterEssNodeConfig {
        /**
         * Specifies the flavor name.
         */
        flavor: pulumi.Input<string>;
        /**
         * Specifies the number of cluster instances.
         * + When it is `masterNodeConfig`, The value range is `3` to `10`.
         * + When it is `clientNodeConfig`, The value range is `1` to `32`.
         */
        instanceNumber: pulumi.Input<number>;
        /**
         * Specifies the node IDs that needs to be scaled down.
         *
         * <a name="Css_master_or_client_volume"></a>
         * The `volume` block supports:
         */
        shrinkNodeIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the information about the volume.
         * The volume structure is documented below.
         */
        volume?: pulumi.Input<inputs.Css.ClusterEssNodeConfigVolume>;
    }

    export interface ClusterEssNodeConfigVolume {
        /**
         * Specifies the volume size in **GB**, which must be a multiple of `10`.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the volume type. Value options are as follows:
         * + **COMMON**: Common I/O. The SATA disk is used.
         * + **HIGH**: High I/O. The SAS disk is used.
         * + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
         *
         * <a name="Css_public_access"></a>
         * The `publicAccess` block supports:
         */
        volumeType: pulumi.Input<string>;
    }

    export interface ClusterKibanaPublicAccess {
        /**
         * Specifies the public network bandwidth.
         */
        bandwidth: pulumi.Input<number>;
        publicIp?: pulumi.Input<string>;
        /**
         * Specifies the whitelist of access control. The whitelisted account id must be unique.
         */
        whitelist?: pulumi.Input<string>;
        /**
         * Specifies whether to enable the public network access control.
         */
        whitelistEnabled: pulumi.Input<boolean>;
    }

    export interface ClusterMasterNodeConfig {
        /**
         * Specifies the flavor name.
         */
        flavor: pulumi.Input<string>;
        /**
         * Specifies the number of cluster instances.
         * + When it is `masterNodeConfig`, The value range is `3` to `10`.
         * + When it is `clientNodeConfig`, The value range is `1` to `32`.
         */
        instanceNumber: pulumi.Input<number>;
        /**
         * Specifies the node IDs that needs to be scaled down.
         *
         * <a name="Css_master_or_client_volume"></a>
         * The `volume` block supports:
         */
        shrinkNodeIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the information about the volume.
         * The volume structure is documented below.
         */
        volume: pulumi.Input<inputs.Css.ClusterMasterNodeConfigVolume>;
    }

    export interface ClusterMasterNodeConfigVolume {
        /**
         * Specifies the volume size in **GB**, which must be a multiple of `10`.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the volume type. Value options are as follows:
         * + **COMMON**: Common I/O. The SATA disk is used.
         * + **HIGH**: High I/O. The SAS disk is used.
         * + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
         *
         * <a name="Css_public_access"></a>
         * The `publicAccess` block supports:
         */
        volumeType: pulumi.Input<string>;
    }

    export interface ClusterNode {
        /**
         * Specifies the availability zone name.
         * Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
         * than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
         * distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
         * between node quantity in any two AZs is **1** at most.
         */
        availabilityZone?: pulumi.Input<string>;
        /**
         * Instance ID.
         */
        id?: pulumi.Input<string>;
        /**
         * Instance IP address.
         */
        ip?: pulumi.Input<string>;
        /**
         * Specifies the cluster name. It contains `4` to `32` characters.
         * Only letters, digits, hyphens (-), and underscores (_) are allowed. The value must start with a letter.
         * Changing this parameter will create a new resource.
         */
        name?: pulumi.Input<string>;
        /**
         * The resource ID of this instance.
         */
        resourceId?: pulumi.Input<string>;
        /**
         * Instance specification code.
         */
        specCode?: pulumi.Input<string>;
        /**
         * Instance status.
         */
        status?: pulumi.Input<string>;
        /**
         * Node type. The options are as follows:
         * + **ess-master:** Indicates a master node.
         * + **ess-client:** Indicates a client node.
         * + **ess-cold:** Indicates a cold data node.
         * + **ess indicates:** Indicates a data node.
         */
        type?: pulumi.Input<string>;
    }

    export interface ClusterNodeConfig {
        /**
         * Specifies the availability zone name.
         * Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
         * than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
         * distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
         * between node quantity in any two AZs is **1** at most.
         */
        availabilityZone: pulumi.Input<string>;
        /**
         * Specifies the flavor name.
         */
        flavor: pulumi.Input<string>;
        networkInfo: pulumi.Input<inputs.Css.ClusterNodeConfigNetworkInfo>;
        /**
         * Specifies the information about the volume.
         * The volume structure is documented below.
         */
        volume: pulumi.Input<inputs.Css.ClusterNodeConfigVolume>;
    }

    export interface ClusterNodeConfigNetworkInfo {
        /**
         * Specifies the security group ID.
         */
        securityGroupId: pulumi.Input<string>;
        /**
         * Specifies the Subnet ID.
         * Changing this parameter will create a new resource.
         */
        subnetId: pulumi.Input<string>;
        /**
         * Specifies the VPC ID.
         * Changing this parameter will create a new resource.
         */
        vpcId: pulumi.Input<string>;
    }

    export interface ClusterNodeConfigVolume {
        /**
         * Specifies the volume size in **GB**, which must be a multiple of `10`.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the volume type. Value options are as follows:
         * + **COMMON**: Common I/O. The SATA disk is used.
         * + **HIGH**: High I/O. The SAS disk is used.
         * + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
         *
         * <a name="Css_public_access"></a>
         * The `publicAccess` block supports:
         */
        volumeType: pulumi.Input<string>;
    }

    export interface ClusterPublicAccess {
        /**
         * Specifies the public network bandwidth.
         */
        bandwidth: pulumi.Input<number>;
        publicIp?: pulumi.Input<string>;
        /**
         * Specifies the whitelist of access control. The whitelisted account id must be unique.
         */
        whitelist?: pulumi.Input<string>;
        /**
         * Specifies whether to enable the public network access control.
         */
        whitelistEnabled: pulumi.Input<boolean>;
    }

    export interface ClusterVpcepEndpoint {
        /**
         * Specifies whether to enable the private domain name.
         */
        endpointWithDnsName: pulumi.Input<boolean>;
        /**
         * Specifies the whitelist of access control. The whitelisted account id must be unique.
         */
        whitelists?: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace Cts {
    export interface NotificationFilter {
        condition: pulumi.Input<string>;
        rules: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NotificationOperation {
        /**
         * Specifies the resource type.
         */
        resource: pulumi.Input<string>;
        /**
         * Specifies the cloud service.
         */
        service: pulumi.Input<string>;
        /**
         * Specifies an array of trace names.
         *
         * <a name="notificationOperationUsersObject"></a>
         * The `operationUsers` block supports:
         */
        traceNames: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NotificationOperationUser {
        /**
         * Specifies the IAM user group name.
         */
        group: pulumi.Input<string>;
        /**
         * Specifies an array of IAM users in the group.
         */
        users: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Dcs {
    export interface InstanceBackupPolicy {
        /**
         * Day in a week on which backup starts, the value ranges from `1` to `7`.
         * Where: 1 indicates Monday; 7 indicates Sunday.
         */
        backupAts: pulumi.Input<pulumi.Input<number>[]>;
        /**
         * Backup type. Default value is `auto`. The valid values are as follows:
         */
        backupType?: pulumi.Input<string>;
        /**
         * Time at which backup starts.
         * Format: `hh24:00-hh24:00`, "00:00-01:00" indicates that backup starts at 00:00:00.
         *
         * <a name="DcsInstance_Parameters"></a>
         * The `parameters` block supports:
         */
        beginAt: pulumi.Input<string>;
        /**
         * Interval at which backup is performed. Default value is `weekly`.
         * Currently, only weekly backup is supported.
         */
        periodType?: pulumi.Input<string>;
        /**
         * Retention time. Unit: day, the value ranges from `1` to `7`.
         * This parameter is required if the backupType is **auto**.
         */
        saveDays?: pulumi.Input<number>;
    }

    export interface InstanceBandwidthInfo {
        /**
         * Indicates the bandwidth size, the unit is **GB**.
         */
        bandwidth?: pulumi.Input<number>;
        /**
         * Indicates the begin time of temporary increase.
         */
        beginTime?: pulumi.Input<string>;
        /**
         * Indicates the current time.
         */
        currentTime?: pulumi.Input<string>;
        /**
         * Indicates the end time of temporary increase.
         */
        endTime?: pulumi.Input<string>;
        /**
         * Indicates the number of increases.
         */
        expandCount?: pulumi.Input<number>;
        /**
         * Indicates the interval between temporary increases, the unit is **ms**.
         */
        expandEffectTime?: pulumi.Input<number>;
        /**
         * Indicates the time interval to the next increase, the unit is **ms**.
         */
        expandIntervalTime?: pulumi.Input<number>;
        /**
         * Indicates the maximum number of increases.
         */
        maxExpandCount?: pulumi.Input<number>;
        /**
         * Indicates the next increase time.
         */
        nextExpandTime?: pulumi.Input<string>;
        /**
         * Indicates whether the increase task is running.
         */
        taskRunning?: pulumi.Input<boolean>;
    }

    export interface InstanceParameter {
        /**
         * A resource ID in UUID format.
         */
        id: pulumi.Input<string>;
        /**
         * Specifies the name of an instance.
         * The name must be 4 to 64 characters and start with a letter.
         * Only english, letters (case-insensitive), digits, underscores (_) ,and hyphens (-) are allowed.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the value of the configuration item.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceWhitelist {
        /**
         * Specifies the name of IP address group.
         */
        groupName: pulumi.Input<string>;
        /**
         * Specifies the list of IP address or CIDR which can be whitelisted for an instance.
         * The maximum is 20.
         */
        ipAddresses: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Dds {
    export interface InstanceBackupStrategy {
        /**
         * Specifies the number of days to retain the generated backup files. The value range is
         * from 0 to 732.
         * + If this parameter is set to 0, the automated backup policy is not set.
         * + If this parameter is not transferred, the automated backup policy is enabled by default. Backup files are stored
         * for seven days by default.
         */
        keepDays: pulumi.Input<number>;
        /**
         * Specifies the charging period of the instance.
         * If `periodUnit` is set to *month*, the value ranges from 1 to 9.
         * If `periodUnit` is set to *year*, the value ranges from 1 to 3.
         * This parameter is mandatory if `chargingMode` is set to *prePaid*.
         * Changing this creates a new instance.
         */
        period?: pulumi.Input<string>;
        /**
         * Specifies the backup time window. Automated backups will be triggered during the
         * backup time window. The value cannot be empty. It must be a valid value in the
         * "hh:mm-HH:MM" format. The current time is in the UTC format.
         * + The HH value must be 1 greater than the hh value.
         * + The values from mm and MM must be the same and must be set to any of the following 00, 15, 30, or 45.
         */
        startTime: pulumi.Input<string>;
    }

    export interface InstanceConfiguration {
        /**
         * Specifies the ID of the template.
         * Changing this creates a new instance.
         */
        id: pulumi.Input<string>;
        /**
         * Specifies the node type. Valid value:
         * + For a Community Edition cluster instance, the value can be **mongos**, **shard** or **config**.
         * + For a Community Edition replica set instance, the value is **replica**.
         * + For a Community Edition single node instance, the value is **single**.
         * Changing this creates a new instance.
         */
        type: pulumi.Input<string>;
    }

    export interface InstanceDatastore {
        /**
         * Specifies the storage engine of the DB instance.
         * If `version` is set to `3.2`, `3.4`, or `4.0`, the value is **wiredTiger**.
         * If `periodUnit` is set to `4.2`, or `4.4`, the value is **rocksDB**.
         */
        storageEngine?: pulumi.Input<string>;
        /**
         * Specifies the DB engine. **DDS-Community** is supported.
         */
        type: pulumi.Input<string>;
        /**
         * Specifies the DB instance version. For the Community Edition, the valid
         * values are `3.2`, `3.4`, `4.0`, `4.2`, or `4.4`.
         */
        version: pulumi.Input<string>;
    }

    export interface InstanceFlavor {
        /**
         * Specifies the node quantity. Valid value:
         * + In a Community Edition cluster instance,the number of mongos ranges from 2 to 16.
         * + In a Community Edition cluster instance,the number of shards ranges from 2 to 16.
         * + In an Enhanced Edition cluster instance, the number of shards ranges from 2 to 12.
         * + config: the value is 1.
         * + replica: the value is 1.
         * + single: The value is 1. This parameter can be updated when the value of `type` is mongos or shard.
         */
        num: pulumi.Input<number>;
        /**
         * Specifies the disk size. The value must be a multiple of 10. The unit is GB. This parameter
         * is mandatory for nodes except mongos and invalid for mongos. This parameter can be updated when the value of `type` is
         * shard, replica or single.
         */
        size?: pulumi.Input<number>;
        /**
         * Specifies the resource specification code. In a cluster instance, multiple
         * specifications need to be specified. All specifications must be of the same series, that is, general-purpose (s6),
         * enhanced (c3), or enhanced II (c6). For example:
         * + dds.mongodb.s6.large.4.mongos and dds.mongodb.s6.large.4.config have the same specifications.
         * + dds.mongodb.s6.large.4.mongos and dds.mongodb.c3.large.4.config are not of the same specifications. This parameter
         * can be updated when the value of `type` is mongos, shard, replica or single.
         */
        specCode: pulumi.Input<string>;
        /**
         * Specifies the disk type.
         * Valid value: **ULTRAHIGH** which indicates the type SSD.
         */
        storage?: pulumi.Input<string>;
        /**
         * Specifies the node type. Valid value:
         * + For a Community Edition cluster instance, the value can be **mongos**, **shard**, or **config**.
         * + For an Enhanced Edition cluster instance, the value is **shard**.
         * + For a Community Edition replica set instance, the value is **replica**.
         * + For a Community Edition single node instance, the value is **single**.
         */
        type: pulumi.Input<string>;
    }

    export interface InstanceGroup {
        /**
         * Indicates the node ID.
         */
        id?: pulumi.Input<string>;
        /**
         * Specifies the DB instance name. The DB instance name of the same type is unique in the
         * same tenant.
         */
        name?: pulumi.Input<string>;
        /**
         * Indicates the instance nodes information. Structure is documented below.
         */
        nodes?: pulumi.Input<pulumi.Input<inputs.Dds.InstanceGroupNode>[]>;
        /**
         * Specifies the disk size. The value must be a multiple of 10. The unit is GB. This parameter
         * is mandatory for nodes except mongos and invalid for mongos. This parameter can be updated when the value of `type` is
         * shard, replica or single.
         */
        size?: pulumi.Input<string>;
        /**
         * Indicates the node status.
         */
        status?: pulumi.Input<string>;
        /**
         * Indicates the node type.
         */
        type?: pulumi.Input<string>;
        used?: pulumi.Input<string>;
    }

    export interface InstanceGroupNode {
        /**
         * Indicates the node ID.
         */
        id?: pulumi.Input<string>;
        /**
         * Specifies the DB instance name. The DB instance name of the same type is unique in the
         * same tenant.
         */
        name?: pulumi.Input<string>;
        /**
         * Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
         * instances, and single node instances.
         */
        privateIp?: pulumi.Input<string>;
        /**
         * Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
         * cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
         */
        publicIp?: pulumi.Input<string>;
        /**
         * Indicates the node role.
         */
        role?: pulumi.Input<string>;
        /**
         * Indicates the node status.
         */
        status?: pulumi.Input<string>;
        /**
         * Indicates the node type.
         */
        type?: pulumi.Input<string>;
    }

    export interface InstanceNode {
        /**
         * Indicates the node ID.
         */
        id?: pulumi.Input<string>;
        /**
         * Specifies the DB instance name. The DB instance name of the same type is unique in the
         * same tenant.
         */
        name?: pulumi.Input<string>;
        /**
         * Indicates the private IP address of a node. This parameter is valid only for mongos nodes, replica set
         * instances, and single node instances.
         */
        privateIp?: pulumi.Input<string>;
        /**
         * Indicates the EIP that has been bound on a node. This parameter is valid only for mongos nodes of
         * cluster instances, primary nodes and secondary nodes of replica set instances, and single node instances.
         */
        publicIp?: pulumi.Input<string>;
        /**
         * Indicates the node role.
         */
        role?: pulumi.Input<string>;
        /**
         * Indicates the node status.
         */
        status?: pulumi.Input<string>;
        /**
         * Indicates the node type.
         */
        type?: pulumi.Input<string>;
    }
}

export namespace DedicatedApig {
    export interface ApiBackendParam {
        /**
         * The description of the parameter.
         */
        description?: pulumi.Input<string>;
        /**
         * Where the parameter is located.
         */
        location: pulumi.Input<string>;
        /**
         * The parameter name.
         */
        name: pulumi.Input<string>;
        systemParamType?: pulumi.Input<string>;
        /**
         * The parameter type.
         */
        type: pulumi.Input<string>;
        /**
         * The value of the parameter
         */
        value: pulumi.Input<string>;
    }

    export interface ApiFuncGraph {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The alias URN of the FunctionGraph function.
         */
        functionAliasUrn?: pulumi.Input<string>;
        /**
         * The URN of the FunctionGraph function.
         */
        functionUrn: pulumi.Input<string>;
        /**
         * The invocation type.
         */
        invocationType?: pulumi.Input<string>;
        /**
         * The network architecture (framework) type of the FunctionGraph function.
         */
        networkType?: pulumi.Input<string>;
        /**
         * The request protocol of the FunctionGraph function.
         */
        requestProtocol?: pulumi.Input<string>;
        /**
         * The timeout for API requests to backend service.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The version of the FunctionGraph function.
         */
        version?: pulumi.Input<string>;
    }

    export interface ApiFuncGraphPolicy {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The configaiton list of the backend parameters.
         */
        backendParams?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ApiFuncGraphPolicyBackendParam>[]>;
        /**
         * The policy conditions.
         */
        conditions: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ApiFuncGraphPolicyCondition>[]>;
        /**
         * The effective mode of the backend policy.
         */
        effectiveMode?: pulumi.Input<string>;
        /**
         * The alias URN of the FunctionGraph function.
         */
        functionAliasUrn?: pulumi.Input<string>;
        /**
         * The URN of the FunctionGraph function.
         */
        functionUrn: pulumi.Input<string>;
        /**
         * The invocation mode of the FunctionGraph function.
         */
        invocationMode?: pulumi.Input<string>;
        /**
         * The invocation mode of the FunctionGraph function.
         */
        invocationType?: pulumi.Input<string>;
        /**
         * The name of the backend policy.
         */
        name: pulumi.Input<string>;
        /**
         * The network (framework) type of the FunctionGraph function.
         */
        networkType?: pulumi.Input<string>;
        /**
         * The request protocol of the FunctionGraph function.
         */
        requestProtocol?: pulumi.Input<string>;
        /**
         * The timeout for API requests to backend service.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The version of the FunctionGraph function.
         */
        version?: pulumi.Input<string>;
    }

    export interface ApiFuncGraphPolicyBackendParam {
        /**
         * The description of the parameter.
         */
        description?: pulumi.Input<string>;
        /**
         * Where the parameter is located.
         */
        location: pulumi.Input<string>;
        /**
         * The parameter name.
         */
        name: pulumi.Input<string>;
        systemParamType?: pulumi.Input<string>;
        /**
         * The parameter type.
         */
        type: pulumi.Input<string>;
        /**
         * The value of the parameter
         */
        value: pulumi.Input<string>;
    }

    export interface ApiFuncGraphPolicyCondition {
        /**
         * The cookie parameter name.
         */
        cookieName?: pulumi.Input<string>;
        /**
         * The frontend authentication parameter name.
         */
        frontendAuthorizerName?: pulumi.Input<string>;
        /**
         * The location of a parameter generated after orchestration.
         */
        mappedParamLocation?: pulumi.Input<string>;
        /**
         * The name of a parameter generated after orchestration.
         */
        mappedParamName?: pulumi.Input<string>;
        /**
         * The request parameter name.
         */
        paramName?: pulumi.Input<string>;
        /**
         * The type of the backend policy.
         */
        source?: pulumi.Input<string>;
        /**
         * The gateway built-in parameter name.
         */
        sysName?: pulumi.Input<string>;
        /**
         * The condition type.
         */
        type?: pulumi.Input<string>;
        /**
         * The value of the backend policy.
         */
        value: pulumi.Input<string>;
    }

    export interface ApiMock {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The response content of the mock.
         */
        response?: pulumi.Input<string>;
        /**
         * The custom status code of the mock response.
         */
        statusCode?: pulumi.Input<number>;
    }

    export interface ApiMockPolicy {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The configuration list of backend parameters.
         */
        backendParams?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ApiMockPolicyBackendParam>[]>;
        /**
         * The policy conditions.
         */
        conditions: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ApiMockPolicyCondition>[]>;
        /**
         * The effective mode of the backend policy.
         */
        effectiveMode?: pulumi.Input<string>;
        /**
         * The backend policy name.
         */
        name: pulumi.Input<string>;
        /**
         * The response content of the mock.
         */
        response?: pulumi.Input<string>;
        /**
         * The custom status code of the mock response.
         */
        statusCode?: pulumi.Input<number>;
    }

    export interface ApiMockPolicyBackendParam {
        /**
         * The description of the parameter.
         */
        description?: pulumi.Input<string>;
        /**
         * Where the parameter is located.
         */
        location: pulumi.Input<string>;
        /**
         * The parameter name.
         */
        name: pulumi.Input<string>;
        systemParamType?: pulumi.Input<string>;
        /**
         * The parameter type.
         */
        type: pulumi.Input<string>;
        /**
         * The value of the parameter
         */
        value: pulumi.Input<string>;
    }

    export interface ApiMockPolicyCondition {
        /**
         * The cookie parameter name.
         */
        cookieName?: pulumi.Input<string>;
        /**
         * The frontend authentication parameter name.
         */
        frontendAuthorizerName?: pulumi.Input<string>;
        /**
         * The location of a parameter generated after orchestration.
         */
        mappedParamLocation?: pulumi.Input<string>;
        /**
         * The name of a parameter generated after orchestration.
         */
        mappedParamName?: pulumi.Input<string>;
        /**
         * The request parameter name.
         */
        paramName?: pulumi.Input<string>;
        /**
         * The type of the backend policy.
         */
        source?: pulumi.Input<string>;
        /**
         * The gateway built-in parameter name.
         */
        sysName?: pulumi.Input<string>;
        /**
         * The condition type.
         */
        type?: pulumi.Input<string>;
        /**
         * The value of the backend policy.
         */
        value: pulumi.Input<string>;
    }

    export interface ApiPublishmentHistory {
        /**
         * The version description of the API publishment.
         */
        description?: pulumi.Input<string>;
        /**
         * The version ID of the API publishment.
         */
        versionId?: pulumi.Input<string>;
    }

    export interface ApiRequestParam {
        /**
         * The default value of the parameter.
         */
        default?: pulumi.Input<string>;
        /**
         * The parameter description.
         */
        description?: pulumi.Input<string>;
        /**
         * The enumerated value.
         */
        enumeration?: pulumi.Input<string>;
        /**
         * The parameter example.
         */
        example?: pulumi.Input<string>;
        /**
         * Where this parameter is located.
         */
        location?: pulumi.Input<string>;
        /**
         * The maximum value or length (string parameter) for parameter.
         */
        maximum?: pulumi.Input<number>;
        /**
         * The minimum value or length (string parameter) for parameter.
         */
        minimum?: pulumi.Input<number>;
        /**
         * The name of the request parameter.
         */
        name: pulumi.Input<string>;
        /**
         * The list of orchestration rules that parameter used.
         */
        orchestrations?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Whether to transparently transfer the parameter.
         */
        passthrough?: pulumi.Input<boolean>;
        /**
         * Whether this parameter is required.
         */
        required?: pulumi.Input<boolean>;
        /**
         * The parameter type.
         */
        type?: pulumi.Input<string>;
        /**
         * Whether to enable the parameter validation.
         */
        validEnable?: pulumi.Input<number>;
    }

    export interface ApiWeb {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The backend service address, which consists of a domain name or IP address, and a port number.
         */
        backendAddress?: pulumi.Input<string>;
        /**
         * The proxy host header.
         */
        hostHeader?: pulumi.Input<string>;
        /**
         * The backend request path.
         */
        path: pulumi.Input<string>;
        /**
         * The backend request method of the API.
         */
        requestMethod?: pulumi.Input<string>;
        /**
         * The web protocol type of the API request.
         */
        requestProtocol?: pulumi.Input<string>;
        /**
         * The number of retry attempts to request the backend service.
         */
        retryCount?: pulumi.Input<number>;
        /**
         * Whether to enable two-way authentication.
         */
        sslEnable?: pulumi.Input<boolean>;
        /**
         * The timeout for API requests to backend service.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The VPC channel ID.
         */
        vpcChannelId?: pulumi.Input<string>;
    }

    export interface ApiWebPolicy {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The backend service address
         */
        backendAddress?: pulumi.Input<string>;
        /**
         * The configuration list of the backend parameters.
         */
        backendParams?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ApiWebPolicyBackendParam>[]>;
        /**
         * The policy conditions.
         */
        conditions: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ApiWebPolicyCondition>[]>;
        /**
         * The effective mode of the backend policy.
         */
        effectiveMode?: pulumi.Input<string>;
        /**
         * The proxy host header.
         */
        hostHeader?: pulumi.Input<string>;
        /**
         * The name of the web policy.
         */
        name: pulumi.Input<string>;
        /**
         * The backend request address.
         */
        path: pulumi.Input<string>;
        /**
         * The backend request method of the API.
         */
        requestMethod: pulumi.Input<string>;
        /**
         * The backend request protocol.
         */
        requestProtocol?: pulumi.Input<string>;
        /**
         * The number of retry attempts to request the backend service.
         */
        retryCount?: pulumi.Input<number>;
        /**
         * The timeout for API requests to backend service.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The VPC channel ID.
         */
        vpcChannelId?: pulumi.Input<string>;
    }

    export interface ApiWebPolicyBackendParam {
        /**
         * The description of the parameter.
         */
        description?: pulumi.Input<string>;
        /**
         * Where the parameter is located.
         */
        location: pulumi.Input<string>;
        /**
         * The parameter name.
         */
        name: pulumi.Input<string>;
        systemParamType?: pulumi.Input<string>;
        /**
         * The parameter type.
         */
        type: pulumi.Input<string>;
        /**
         * The value of the parameter
         */
        value: pulumi.Input<string>;
    }

    export interface ApiWebPolicyCondition {
        /**
         * The cookie parameter name.
         */
        cookieName?: pulumi.Input<string>;
        /**
         * The frontend authentication parameter name.
         */
        frontendAuthorizerName?: pulumi.Input<string>;
        /**
         * The location of a parameter generated after orchestration.
         */
        mappedParamLocation?: pulumi.Input<string>;
        /**
         * The name of a parameter generated after orchestration.
         */
        mappedParamName?: pulumi.Input<string>;
        /**
         * The request parameter name.
         */
        paramName?: pulumi.Input<string>;
        /**
         * The type of the backend policy.
         */
        source?: pulumi.Input<string>;
        /**
         * The gateway built-in parameter name.
         */
        sysName?: pulumi.Input<string>;
        /**
         * The condition type.
         */
        type?: pulumi.Input<string>;
        /**
         * The value of the backend policy.
         */
        value: pulumi.Input<string>;
    }

    export interface CustomAuthorizerIdentity {
        /**
         * The parameter location.
         */
        location: pulumi.Input<string>;
        /**
         * The name of the parameter to be verified.
         */
        name: pulumi.Input<string>;
        /**
         * The parameter verification expression.
         */
        validation?: pulumi.Input<string>;
    }

    export interface GroupEnvironment {
        /**
         * The ID of the environment to which the variables belongs.
         */
        environmentId: pulumi.Input<string>;
        /**
         * The array of one or more environment variables.
         */
        variables: pulumi.Input<pulumi.Input<inputs.DedicatedApig.GroupEnvironmentVariable>[]>;
    }

    export interface GroupEnvironmentVariable {
        /**
         * The ID of the variable that the group has.
         */
        id?: pulumi.Input<string>;
        /**
         * The variable name.
         */
        name: pulumi.Input<string>;
        /**
         * The variable value.
         */
        value: pulumi.Input<string>;
        /**
         * schema: Deprecated; The ID of the variable that the group has.
         *
         * @deprecated Use 'id' instead
         */
        variableId?: pulumi.Input<string>;
    }

    export interface GroupUrlDomain {
        /**
         * Whether to enable redirection from HTTP to HTTPS.
         */
        isHttpRedirectToHttps?: pulumi.Input<boolean>;
        /**
         * The minimum SSL protocol version.
         */
        minSslVersion?: pulumi.Input<string>;
        /**
         * The associated domain name.
         */
        name: pulumi.Input<string>;
    }

    export interface InstanceCustomIngressPort {
        /**
         * The ID of the custom ingress port.
         */
        id?: pulumi.Input<string>;
        /**
         * Specified port of the custom ingress port.
         */
        port: pulumi.Input<number>;
        /**
         * Specified protocol of the custom ingress port.
         */
        protocol: pulumi.Input<string>;
        /**
         * The current status of the custom ingress port.
         */
        status?: pulumi.Input<string>;
    }

    export interface ResponseRule {
        /**
         * The body template of the API custom response rule.
         */
        body: pulumi.Input<string>;
        /**
         * The error type of the API custom response rule.
         */
        errorType: pulumi.Input<string>;
        /**
         * The configuration of the custom response headers.
         */
        headers?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ResponseRuleHeader>[]>;
        /**
         * The HTTP status code of the API custom response rule.
         */
        statusCode?: pulumi.Input<number>;
    }

    export interface ResponseRuleHeader {
        /**
         * The key name of the response header.
         */
        key: pulumi.Input<string>;
        /**
         * The value for the specified response header key.
         */
        value: pulumi.Input<string>;
    }

    export interface ThrottlingPolicyAppThrottle {
        /**
         * The ID of the special user/application throttling policy.
         */
        id?: pulumi.Input<string>;
        /**
         * The maximum number of times an API can be accessed within a specified period.
         */
        maxApiRequests: pulumi.Input<number>;
        /**
         * The object ID which the special throttling policy belongs.
         */
        throttlingObjectId: pulumi.Input<string>;
        /**
         * The object name which the special user/application throttling policy belongs.
         */
        throttlingObjectName?: pulumi.Input<string>;
    }

    export interface ThrottlingPolicyUserThrottle {
        /**
         * The ID of the special user/application throttling policy.
         */
        id?: pulumi.Input<string>;
        /**
         * The maximum number of times an API can be accessed within a specified period.
         */
        maxApiRequests: pulumi.Input<number>;
        /**
         * The object ID which the special throttling policy belongs.
         */
        throttlingObjectId: pulumi.Input<string>;
        /**
         * The object name which the special user/application throttling policy belongs.
         */
        throttlingObjectName?: pulumi.Input<string>;
    }
}

export namespace Dew {
}

export namespace Dis {
    export interface StreamPartition {
        /**
         * Possible value range of the hash key used by each partition.
         */
        hashRange?: pulumi.Input<string>;
        /**
         * The ID of the partition.
         */
        id?: pulumi.Input<string>;
        /**
         * Sequence number range of each partition.
         */
        sequenceNumberRange?: pulumi.Input<string>;
        /**
         * The status of the partition.
         */
        status?: pulumi.Input<string>;
    }
}

export namespace Dli {
    export interface QueueScalingPolicy {
        impactStartTime: pulumi.Input<string>;
        impactStopTime: pulumi.Input<string>;
        maxCu: pulumi.Input<number>;
        minCu: pulumi.Input<number>;
        priority: pulumi.Input<number>;
    }

    export interface QueueSparkDriver {
        maxConcurrent?: pulumi.Input<number>;
        maxInstance?: pulumi.Input<number>;
        maxPrefetchInstance?: pulumi.Input<string>;
    }

    export interface SparkJobDependentPackage {
        /**
         * Specifies the user group name.
         * Changing this parameter will submit a new spark job.
         */
        groupName: pulumi.Input<string>;
        /**
         * Specifies the user group resource for details.
         * Changing this parameter will submit a new spark job.
         * The object structure is documented below.
         *
         * <a name="dependentPackagesPackages"></a>
         * The `packages` block supports:
         */
        packages: pulumi.Input<pulumi.Input<inputs.Dli.SparkJobDependentPackagePackage>[]>;
    }

    export interface SparkJobDependentPackagePackage {
        /**
         * Specifies the resource name of the package.
         * Changing this parameter will submit a new spark job.
         */
        packageName: pulumi.Input<string>;
        /**
         * Specifies the resource type of the package.
         * Changing this parameter will submit a new spark job.
         */
        type: pulumi.Input<string>;
    }
}

export namespace Dms {
    export interface KafkaInstanceCrossVpcAccess {
        /**
         * The advertised IP Address or domain name.
         */
        advertisedIp?: pulumi.Input<string>;
        /**
         * @deprecated typo in lisenter_ip, please use "listenerIp" instead.
         */
        lisenterIp?: pulumi.Input<string>;
        /**
         * The listener IP address.
         */
        listenerIp?: pulumi.Input<string>;
        /**
         * The port number.
         */
        port?: pulumi.Input<number>;
        /**
         * The port ID associated with the address.
         */
        portId?: pulumi.Input<string>;
    }

    export interface KafkaInstanceParameter {
        /**
         * Specifies the name of the DMS Kafka instance. An instance name starts with a letter,
         * consists of 4 to 64 characters, and supports only letters, digits, hyphens (-) and underscores (_).
         */
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface KafkaInstancePortProtocol {
        privatePlainAddress?: pulumi.Input<string>;
        privatePlainDomainName?: pulumi.Input<string>;
        privatePlainEnable?: pulumi.Input<boolean>;
        privateSaslPlaintextAddress?: pulumi.Input<string>;
        privateSaslPlaintextDomainName?: pulumi.Input<string>;
        privateSaslPlaintextEnable?: pulumi.Input<boolean>;
        privateSaslSslAddress?: pulumi.Input<string>;
        privateSaslSslDomainName?: pulumi.Input<string>;
        privateSaslSslEnable?: pulumi.Input<boolean>;
        publicPlainAddress?: pulumi.Input<string>;
        publicPlainDomainName?: pulumi.Input<string>;
        publicPlainEnable?: pulumi.Input<boolean>;
        publicSaslPlaintextAddress?: pulumi.Input<string>;
        publicSaslPlaintextDomainName?: pulumi.Input<string>;
        publicSaslPlaintextEnable?: pulumi.Input<boolean>;
        publicSaslSslAddress?: pulumi.Input<string>;
        publicSaslSslDomainName?: pulumi.Input<string>;
        publicSaslSslEnable?: pulumi.Input<boolean>;
    }

    export interface KafkaPermissionsPolicy {
        /**
         * Specifies the permissions type. The value can be:
         * + **all**: publish and subscribe permissions.
         * + **pub**: publish permissions.
         * + **sub**: subscribe permissions.
         */
        accessPolicy: pulumi.Input<string>;
        /**
         * Specifies the username.
         */
        userName: pulumi.Input<string>;
    }

    export interface KafkaTopicConfig {
        /**
         * Specifies the name of the topic. The name starts with a letter, consists of 4 to
         * 64 characters, and supports only letters, digits, hyphens (-) and underscores (_). Changing this creates a new
         * resource.
         */
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }
}

export namespace Dns {
    export interface ZoneRouter {
        /**
         * ID of the associated VPC.
         */
        routerId: pulumi.Input<string>;
        /**
         * The region of the VPC.
         */
        routerRegion?: pulumi.Input<string>;
    }
}

export namespace Drs {
    export interface JobDestinationDb {
        /**
         * Specifies the migration engine type.
         * Changing this parameter will create a new resource. The options are as follows:
         * + **mysql**:  MySQL migration, MySQL synchronization use.
         * + **mongodb**: Mongodb migration use.
         * + **cloudDataGuard-mysql**: Disaster recovery use.
         * + **gaussdbv5**: GaussDB (for openGauss) synchronization use.
         * + **mysql-to-kafka**: Synchronization from MySQL to Kafka use.
         * + **taurus-to-kafka**: Synchronization from GaussDB(for MySQL) to Kafka use.
         * + **gaussdbv5ha-to-kafka**: Synchronization from GaussDB primary/standby to Kafka use.
         * + **postgresql**: Synchronization from PostgreSQL to PostgreSQL use.
         */
        engineType: pulumi.Input<string>;
        /**
         * Specifies the instance id of database when it is a RDS database.
         * Changing this parameter will create a new resource.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * Specifies the IP of database. Changing this parameter will create a new resource.
         */
        ip: pulumi.Input<string>;
        /**
         * Specifies the job name. The name consists of 4 to 50 characters, starting with
         * a letter. Only letters, digits, underscores (\_) and hyphens (-) are allowed.
         */
        name?: pulumi.Input<string>;
        /**
         * Specifies the password of database.
         * Changing this parameter will create a new resource.
         */
        password: pulumi.Input<string>;
        /**
         * Specifies the port of database. Changing this parameter will create a new resource.
         */
        port: pulumi.Input<number>;
        /**
         * The region in which to create the resource. If omitted, the
         * provider-level region will be used. Changing this parameter will create a new resource.
         */
        region?: pulumi.Input<string>;
        /**
         * Specifies the checksum of SSL certificate content.
         * It is mandatory when `sslEnabled` is `true`. Changing this parameter will create a new resource.
         */
        sslCertCheckSum?: pulumi.Input<string>;
        /**
         * Specifies the SSL certificate content, encrypted with base64.
         * It is mandatory when `sslEnabled` is `true`. Changing this parameter will create a new resource.
         */
        sslCertKey?: pulumi.Input<string>;
        /**
         * Specifies SSL certificate name.
         * It is mandatory when `sslEnabled` is `true`. Changing this parameter will create a new resource.
         */
        sslCertName?: pulumi.Input<string>;
        /**
         * Specifies SSL certificate password. It is mandatory when
         * `sslEnabled` is `true` and the certificate file suffix is `.p12`. Changing this parameter will create a new resource.
         */
        sslCertPassword?: pulumi.Input<string>;
        /**
         * Specifies whether to enable SSL connection.
         * Changing this parameter will create a new resource.
         */
        sslEnabled?: pulumi.Input<boolean>;
        /**
         * Specifies subnet ID of database when it is a RDS database.
         * It is mandatory when `direction` is `down`. Changing this parameter will create a new resource.
         */
        subnetId?: pulumi.Input<string>;
        /**
         * Specifies the user name of database.
         * Changing this parameter will create a new resource.
         */
        user: pulumi.Input<string>;
    }

    export interface JobLimitSpeed {
        /**
         * Specifies the time to end speed limit, this time is UTC time. The input must
         * end at 59 minutes, the format is `hh:mm`, for example: 15:59. Changing this parameter will create a new resource.
         */
        endTime: pulumi.Input<string>;
        /**
         * Specifies the transmission speed, the value range is 1 to 9999, unit: `MB/s`.
         * Changing this parameter will create a new resource.
         */
        speed: pulumi.Input<string>;
        /**
         * Specifies the time to start speed limit, this time is UTC time. The start
         * time is the whole hour, if there is a minute, it will be ignored, the format is `hh:mm`, and the hour number
         * is two digits, for example: 01:00. Changing this parameter will create a new resource.
         */
        startTime: pulumi.Input<string>;
    }

    export interface JobSourceDb {
        /**
         * Specifies the migration engine type.
         * Changing this parameter will create a new resource. The options are as follows:
         * + **mysql**:  MySQL migration, MySQL synchronization use.
         * + **mongodb**: Mongodb migration use.
         * + **cloudDataGuard-mysql**: Disaster recovery use.
         * + **gaussdbv5**: GaussDB (for openGauss) synchronization use.
         * + **mysql-to-kafka**: Synchronization from MySQL to Kafka use.
         * + **taurus-to-kafka**: Synchronization from GaussDB(for MySQL) to Kafka use.
         * + **gaussdbv5ha-to-kafka**: Synchronization from GaussDB primary/standby to Kafka use.
         * + **postgresql**: Synchronization from PostgreSQL to PostgreSQL use.
         */
        engineType: pulumi.Input<string>;
        /**
         * Specifies the instance id of database when it is a RDS database.
         * Changing this parameter will create a new resource.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * Specifies the IP of database. Changing this parameter will create a new resource.
         */
        ip: pulumi.Input<string>;
        /**
         * Specifies the job name. The name consists of 4 to 50 characters, starting with
         * a letter. Only letters, digits, underscores (\_) and hyphens (-) are allowed.
         */
        name?: pulumi.Input<string>;
        /**
         * Specifies the password of database.
         * Changing this parameter will create a new resource.
         */
        password: pulumi.Input<string>;
        /**
         * Specifies the port of database. Changing this parameter will create a new resource.
         */
        port: pulumi.Input<number>;
        /**
         * The region in which to create the resource. If omitted, the
         * provider-level region will be used. Changing this parameter will create a new resource.
         */
        region?: pulumi.Input<string>;
        /**
         * Specifies the checksum of SSL certificate content.
         * It is mandatory when `sslEnabled` is `true`. Changing this parameter will create a new resource.
         */
        sslCertCheckSum?: pulumi.Input<string>;
        /**
         * Specifies the SSL certificate content, encrypted with base64.
         * It is mandatory when `sslEnabled` is `true`. Changing this parameter will create a new resource.
         */
        sslCertKey?: pulumi.Input<string>;
        /**
         * Specifies SSL certificate name.
         * It is mandatory when `sslEnabled` is `true`. Changing this parameter will create a new resource.
         */
        sslCertName?: pulumi.Input<string>;
        /**
         * Specifies SSL certificate password. It is mandatory when
         * `sslEnabled` is `true` and the certificate file suffix is `.p12`. Changing this parameter will create a new resource.
         */
        sslCertPassword?: pulumi.Input<string>;
        /**
         * Specifies whether to enable SSL connection.
         * Changing this parameter will create a new resource.
         */
        sslEnabled?: pulumi.Input<boolean>;
        /**
         * Specifies subnet ID of database when it is a RDS database.
         * It is mandatory when `direction` is `down`. Changing this parameter will create a new resource.
         */
        subnetId?: pulumi.Input<string>;
        /**
         * Specifies the user name of database.
         * Changing this parameter will create a new resource.
         */
        user: pulumi.Input<string>;
    }
}

export namespace Dws {
    export interface ClusterElb {
        /**
         * The cluster ID
         */
        id?: pulumi.Input<string>;
        /**
         * Cluster name, which must be unique and contains 4 to 64 characters, which
         * consist of letters, digits, hyphens(-), or underscores(_) only and must start with a letter.
         * Changing this creates a new cluster resource.
         */
        name?: pulumi.Input<string>;
        /**
         * The private endpoint of the ELB load balancer.
         */
        privateEndpoint?: pulumi.Input<string>;
        /**
         * List of private network IP address.
         */
        privateIp?: pulumi.Input<string>;
        /**
         * The IPv6 address of the ELB load balancer.
         */
        privateIpV6?: pulumi.Input<string>;
        /**
         * A nested object resource Structure is documented below.
         * Changing this creates a new cluster resource.
         */
        publicIp?: pulumi.Input<string>;
        /**
         * VPC ID, which is used for configuring cluster network.
         * Changing this creates a new cluster resource.
         */
        vpcId?: pulumi.Input<string>;
    }

    export interface ClusterEndpoint {
        /**
         * (Optional, String) Private network connection information.
         */
        connectInfo?: pulumi.Input<string>;
        /**
         * (Optional, String)
         * JDBC URL. The following is the default format:
         * jdbc:postgresql://< public_connect_info>/<YOUR_DATABASE_NAME>
         */
        jdbcUrl?: pulumi.Input<string>;
    }

    export interface ClusterMaintainWindow {
        /**
         * Maintenance time in each week in the unit of day.
         */
        day?: pulumi.Input<string>;
        /**
         * Maintenance end time in HH:mm format. The time zone is GMT+0.
         */
        endTime?: pulumi.Input<string>;
        /**
         * Maintenance start time in HH:mm format. The time zone is GMT+0.
         */
        startTime?: pulumi.Input<string>;
    }

    export interface ClusterPublicEndpoint {
        /**
         * (Optional, String)
         * JDBC URL. The following is the default format:
         * jdbc:postgresql://< public_connect_info>/<YOUR_DATABASE_NAME>
         */
        jdbcUrl?: pulumi.Input<string>;
        /**
         * (Optional, String)
         * Public network connection information.
         */
        publicConnectInfo?: pulumi.Input<string>;
    }

    export interface ClusterPublicIp {
        /**
         * EIP ID.
         * Changing this creates a new cluster resource.
         */
        eipId?: pulumi.Input<string>;
        /**
         * Binding type of an EIP. The value can be either of the following:
         * **auto_assign**, **not_use**, **bind_existing**. The default value is **not_use**.
         * Changing this creates a new cluster resource.
         */
        publicBindType?: pulumi.Input<string>;
    }

    export interface ClusterVolume {
        /**
         * The capacity size, in GB.
         */
        capacity?: pulumi.Input<string>;
        /**
         * The volume type.
         */
        type?: pulumi.Input<string>;
    }

}

export namespace Ecs {
    export interface InstanceBandwidth {
        /**
         * Specifies the bandwidth billing mode. The value can be *traffic* or *bandwidth*.
         * Changing this creates a new instance.
         */
        chargeMode?: pulumi.Input<string>;
        extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Specifies the **shared** bandwidth id. This parameter is mandatory when
         * `shareType` is set to **WHOLE**. Changing this creates a new instance.
         */
        id?: pulumi.Input<string>;
        /**
         * Specifies the bandwidth sharing type. Changing this creates a new instance.
         * Possible values are as follows:
         * + **PER**: Dedicated bandwidth
         * + **WHOLE**: Shared bandwidth
         */
        shareType: pulumi.Input<string>;
        /**
         * Specifies the bandwidth size. The value ranges from 1 to 300 Mbit/s.
         * This parameter is mandatory when `shareType` is set to **PER**. Changing this creates a new instance.
         */
        size?: pulumi.Input<number>;
    }

    export interface InstanceDataDisk {
        dssPoolId?: pulumi.Input<string>;
        iops?: pulumi.Input<number>;
        /**
         * Specifies the ID of a KMS key. This is used to encrypt the disk.
         * Changing this creates a new instance.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * Specifies the data disk size, in GB. The value ranges form 10 to 32768.
         * Changing this creates a new instance.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the snapshot id. Changing this creates a new instance.
         */
        snapshotId?: pulumi.Input<string>;
        throughput?: pulumi.Input<number>;
        /**
         * Specifies the ECS data disk type, which must be one of available disk types,
         * contains of *SSD*, *GPSSD* and *SAS*. Changing this creates a new instance.
         */
        type: pulumi.Input<string>;
    }

    export interface InstanceNetwork {
        /**
         * Specifies if this network should be used for provisioning access.
         * Accepts true or false. Defaults to false.
         */
        accessNetwork?: pulumi.Input<boolean>;
        /**
         * Specifies a fixed IPv4 address to be used on this network.
         * Changing this creates a new instance.
         */
        fixedIpV4?: pulumi.Input<string>;
        /**
         * The Fixed IPv6 address of the instance on that network.
         */
        fixedIpV6?: pulumi.Input<string>;
        /**
         * Specifies whether the IPv6 function is enabled for the nic.
         * Defaults to false. Changing this creates a new instance.
         */
        ipv6Enable?: pulumi.Input<boolean>;
        /**
         * The MAC address of the NIC on that network.
         */
        mac?: pulumi.Input<string>;
        /**
         * The port ID corresponding to the IP address on that network.
         */
        port?: pulumi.Input<string>;
        /**
         * Specifies whether the ECS processes only traffic that is destined specifically
         * for it. This function is enabled by default but should be disabled if the ECS functions as a SNAT server or has a
         * virtual IP address bound to it.
         */
        sourceDestCheck?: pulumi.Input<boolean>;
        /**
         * Specifies the network UUID to attach to the instance.
         * Changing this creates a new instance.
         */
        uuid?: pulumi.Input<string>;
    }

    export interface InstanceSchedulerHint {
        /**
         * Specifies the ID of DeH.
         * This parameter takes effect only when the value of tenancy is dedicated. Changing this creates a new instance.
         */
        dehId?: pulumi.Input<string>;
        /**
         * schema: Internal
         */
        faultDomain?: pulumi.Input<string>;
        /**
         * Specifies a UUID of a Server Group.
         * The instance will be placed into that group. Changing this creates a new instance.
         */
        group?: pulumi.Input<string>;
        /**
         * Specifies the tenancy specifies whether the ECS is to be created on a
         * Dedicated Host
         * (DeH) or in a shared pool. Changing this creates a new instance.
         */
        tenancy?: pulumi.Input<string>;
    }

    export interface InstanceVolumeAttached {
        /**
         * The volume boot index on that attachment.
         */
        bootIndex?: pulumi.Input<number>;
        /**
         * Specifies the ID of a KMS key. This is used to encrypt the disk.
         * Changing this creates a new instance.
         */
        kmsKeyId?: pulumi.Input<string>;
        /**
         * The volume pci address on that attachment.
         */
        pciAddress?: pulumi.Input<string>;
        /**
         * The volume size on that attachment.
         */
        size?: pulumi.Input<number>;
        /**
         * The volume type on that attachment.
         */
        type?: pulumi.Input<string>;
        /**
         * The volume ID on that attachment.
         */
        volumeId?: pulumi.Input<string>;
    }
}

export namespace Eip {
}

export namespace Elb {
    export interface ListenerInsertHeaders {
        xForwardedElbIp?: pulumi.Input<string>;
        xForwardedHost?: pulumi.Input<string>;
    }

    export interface PoolPersistence {
        /**
         * The name of the cookie if persistence mode is set appropriately. Required
         * if `type = APP_COOKIE`.
         */
        cookieName?: pulumi.Input<string>;
        /**
         * Specifies the sticky session timeout duration in minutes. This parameter is
         * invalid when type is set to APP_COOKIE. The value range varies depending on the protocol of the backend server group:
         * + When the protocol of the backend server group is TCP or UDP, the value ranges from 1 to 60.
         * + When the protocol of the backend server group is HTTP or HTTPS, the value ranges from 1 to 1440.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The type of persistence mode. The current specification supports SOURCE_IP,
         * HTTP_COOKIE, and APP_COOKIE.
         */
        type: pulumi.Input<string>;
    }
}

export namespace Er {
}

export namespace Evs {
    export interface VolumeAttachment {
        attachedAt?: pulumi.Input<string>;
        attachedVolumeId?: pulumi.Input<string>;
        device?: pulumi.Input<string>;
        hostName?: pulumi.Input<string>;
        /**
         * Specifies a resource ID in UUID format.
         */
        id?: pulumi.Input<string>;
        instanceId?: pulumi.Input<string>;
        volumeId?: pulumi.Input<string>;
    }

    export interface VolumeIopsAttribute {
        frozened?: pulumi.Input<boolean>;
        /**
         * Specifies a resource ID in UUID format.
         */
        id?: pulumi.Input<string>;
        totalVal?: pulumi.Input<number>;
    }

    export interface VolumeLink {
        href?: pulumi.Input<string>;
        rel?: pulumi.Input<string>;
    }

    export interface VolumeThroughputAttribute {
        frozened?: pulumi.Input<boolean>;
        /**
         * Specifies a resource ID in UUID format.
         */
        id?: pulumi.Input<string>;
        totalVal?: pulumi.Input<number>;
    }
}

export namespace FunctionGraph {
    export interface FunctionCustomImage {
        /**
         * The command line arguments used to start the SWR image.
         */
        args?: pulumi.Input<string>;
        /**
         * The startup commands of the SWR image.
         */
        command?: pulumi.Input<string>;
        /**
         * The URL of SWR image.
         */
        url: pulumi.Input<string>;
        /**
         * The user group ID that used to run SWR image.
         */
        userGroupId?: pulumi.Input<string>;
        /**
         * The user ID that used to run SWR image.
         */
        userId?: pulumi.Input<string>;
        /**
         * The working directory of the SWR image.
         */
        workingDir?: pulumi.Input<string>;
    }

    export interface FunctionFuncMount {
        /**
         * Specifies the function access path.
         */
        localMountPath: pulumi.Input<string>;
        /**
         * Specifies the ID of the mounted resource (corresponding cloud service).
         */
        mountResource: pulumi.Input<string>;
        /**
         * Specifies the remote mount path. Example: 192.168.0.12:/data.
         */
        mountSharePath: pulumi.Input<string>;
        /**
         * Specifies the mount type. Options: sfs, sfsTurbo, and ecs.
         */
        mountType: pulumi.Input<string>;
        /**
         * The mount status.
         */
        status?: pulumi.Input<string>;
    }

    export interface FunctionNetworkController {
        /**
         * Whether to disable the public network access.
         */
        disablePublicNetwork?: pulumi.Input<boolean>;
        /**
         * The configuration of the VPCs that can trigger the function.
         */
        triggerAccessVpcs?: pulumi.Input<pulumi.Input<inputs.FunctionGraph.FunctionNetworkControllerTriggerAccessVpc>[]>;
    }

    export interface FunctionNetworkControllerTriggerAccessVpc {
        /**
         * Specifies the ID of VPC.
         */
        vpcId?: pulumi.Input<string>;
        /**
         * The ID of the VPC that can trigger the function.
         */
        vpcName?: pulumi.Input<string>;
    }

    export interface FunctionReservedInstance {
        /**
         * The number of reserved instance.
         */
        count: pulumi.Input<number>;
        /**
         * Whether to enable the idle mode.
         */
        idleMode?: pulumi.Input<boolean>;
        /**
         * The version name or alias name.
         */
        qualifierName: pulumi.Input<string>;
        /**
         * The qualifier type of reserved instance.
         */
        qualifierType: pulumi.Input<string>;
        /**
         * The auto scaling policies for reserved instance.
         */
        tacticsConfig?: pulumi.Input<inputs.FunctionGraph.FunctionReservedInstanceTacticsConfig>;
    }

    export interface FunctionReservedInstanceTacticsConfig {
        /**
         * The list of scheduled policy configurations.
         */
        cronConfigs?: pulumi.Input<pulumi.Input<inputs.FunctionGraph.FunctionReservedInstanceTacticsConfigCronConfig>[]>;
        /**
         * The list of metric policy configurations.
         */
        metricConfigs?: pulumi.Input<pulumi.Input<inputs.FunctionGraph.FunctionReservedInstanceTacticsConfigMetricConfig>[]>;
    }

    export interface FunctionReservedInstanceTacticsConfigCronConfig {
        /**
         * The number of reserved instance to which the policy belongs.
         */
        count: pulumi.Input<number>;
        /**
         * The cron expression.
         */
        cron: pulumi.Input<string>;
        /**
         * The expiration timestamp of the policy.
         */
        expiredTime: pulumi.Input<number>;
        /**
         * Specifies the name of the function.
         */
        name: pulumi.Input<string>;
        /**
         * The effective timestamp of policy.
         */
        startTime: pulumi.Input<number>;
    }

    export interface FunctionReservedInstanceTacticsConfigMetricConfig {
        /**
         * The minimun of traffic.
         */
        min: pulumi.Input<number>;
        /**
         * Specifies the name of the function.
         */
        name: pulumi.Input<string>;
        /**
         * The metric policy threshold.
         */
        threshold: pulumi.Input<number>;
        /**
         * The type of metric policy.
         */
        type: pulumi.Input<string>;
    }

    export interface FunctionVersion {
        /**
         * The aliases management for specified version.
         */
        aliases?: pulumi.Input<inputs.FunctionGraph.FunctionVersionAliases>;
        /**
         * Specifies the description of the function.
         */
        description?: pulumi.Input<string>;
        /**
         * Specifies the name of the function.
         */
        name: pulumi.Input<string>;
    }

    export interface FunctionVersionAliases {
        /**
         * The description of the version alias.
         */
        additionalVersionStrategy?: pulumi.Input<string>;
        /**
         * The percentage grayscale configuration of the version alias.
         */
        additionalVersionWeights?: pulumi.Input<string>;
        /**
         * Specifies the description of the function.
         */
        description?: pulumi.Input<string>;
        /**
         * Specifies the name of the function.
         */
        name: pulumi.Input<string>;
    }

}

export namespace Iam {
    export interface AclIpCidr {
        /**
         * Specifies the IPv4 CIDR block, for example, __192.168.0.0/24__.
         */
        cidr: pulumi.Input<string>;
        /**
         * Specifies a description about an IPv4 CIDR block. This parameter can contain a
         * maximum of 255 characters and the following charactors are not allowed:__@#%^&*<>\\__.
         */
        description?: pulumi.Input<string>;
    }

    export interface AclIpRange {
        /**
         * Specifies a description about an IP address range. This parameter can contain a
         * maximum of 255 characters and the following charactors are not allowed:__@#%^&*<>\\__.
         *
         * ->**NOTE:** Up to 200 `ipCidrs` and `ipRanges` can be created in total for each access method.
         */
        description?: pulumi.Input<string>;
        /**
         * Specifies the Ip address range, for example, __0.0.0.0-255.255.255.0__.
         */
        range: pulumi.Input<string>;
    }

    export interface AgencyProjectRole {
        /**
         * Specifies the name of project.
         */
        project: pulumi.Input<string>;
        /**
         * Specifies an array of role names.
         *
         * > **NOTE**
         * - At least one of `projectRole` and `domainRoles` must be specified when creating an agency.
         * - We can get all **System-Defined Roles** form
         * [SberCloud](https://support.hc.sbercloud.ru/permissions/index.html).
         */
        roles: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ProviderAccessConfig {
        /**
         * Specifies the access type of the identity provider.
         * Available options are:
         */
        accessType: pulumi.Input<string>;
        /**
         * Specifies the authorization endpoint of the OpenID Connect identity
         * provider. This field is required only if the access type is set to `programConsole`.
         */
        authorizationEndpoint?: pulumi.Input<string>;
        /**
         * Specifies the ID of a client registered with the OpenID Connect identity provider.
         */
        clientId: pulumi.Input<string>;
        /**
         * Specifies the URL of the identity provider.
         * This field corresponds to the iss field in the ID token.
         */
        providerUrl: pulumi.Input<string>;
        /**
         * Response mode.
         * Valid values is *form_post* and *fragment*, default value is *form_post*.
         * This field is required only if the access type is set to `programConsole`.
         */
        responseMode?: pulumi.Input<string>;
        /**
         * Response type. Valid values is *id_token*, default value is *id_token*.
         * This field is required only if the access type is set to `programConsole`.
         */
        responseType?: pulumi.Input<string>;
        /**
         * Specifies the scopes of authorization requests. It is an array of one or more scopes.
         * Valid values are *openid*, *email*, *profile* and other values defined by you.
         * This field is required only if the access type is set to `programConsole`.
         *
         * > **NOTE:** 1. *openid* must be specified for this field.
         * <br/>2. A maximum of 10 values can be specified, and they must be separated with spaces.
         * <br/>Example: openid email host.
         */
        scopes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Public key used to sign the ID token of the OpenID Connect identity provider.
         * This field is required only if the protocol is set to *oidc*.
         */
        signingKey: pulumi.Input<string>;
    }

    export interface ProviderConversionConversionRule {
        /**
         * Specifies the federated user information on the cloud platform.
         */
        locals: pulumi.Input<pulumi.Input<inputs.Iam.ProviderConversionConversionRuleLocal>[]>;
        /**
         * Specifies Federated user information in the IDP system.
         *
         * > **NOTE:** If the protocol of identity provider is SAML, this field is an expression consisting of assertion
         * attributes and operators.
         * If the protocol of identity provider is OIDC, the value of this field is determined by the ID token.
         */
        remotes: pulumi.Input<pulumi.Input<inputs.Iam.ProviderConversionConversionRuleRemote>[]>;
    }

    export interface ProviderConversionConversionRuleLocal {
        /**
         * Specifies the user group to which the federated user belongs on the cloud platform.
         */
        group?: pulumi.Input<string>;
        /**
         * Specifies the name of a federated user on the cloud platform.
         */
        username?: pulumi.Input<string>;
    }

    export interface ProviderConversionConversionRuleRemote {
        /**
         * Specifies the attribute in the IDP assertion.
         */
        attribute: pulumi.Input<string>;
        /**
         * Specifies the condition of conversion rule.
         * Available options are:
         */
        condition?: pulumi.Input<string>;
        /**
         * Specifies the rule is matched only if the specified strings appear in the attribute type.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ProviderConversionRule {
        /**
         * The federated user information on the cloud platform.
         */
        locals?: pulumi.Input<pulumi.Input<inputs.Iam.ProviderConversionRuleLocal>[]>;
        /**
         * The description of the identity provider.
         */
        remotes?: pulumi.Input<pulumi.Input<inputs.Iam.ProviderConversionRuleRemote>[]>;
    }

    export interface ProviderConversionRuleLocal {
        /**
         * The user group to which the federated user belongs on the cloud platform.
         */
        group?: pulumi.Input<string>;
        /**
         * The name of a federated user on the cloud platform.
         */
        username?: pulumi.Input<string>;
    }

    export interface ProviderConversionRuleRemote {
        /**
         * The attribute in the IDP assertion.
         */
        attribute?: pulumi.Input<string>;
        /**
         * The condition of conversion rule.
         */
        condition?: pulumi.Input<string>;
        /**
         * The rule is matched only if the specified strings appear in the attribute type.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace Ims {
}

export namespace Mrs {
    export interface ClusterAnalysisCoreNodes {
        /**
         * Specifies the roles deployed in a node group.This argument is mandatory
         * when the cluster type is CUSTOM. Each character string represents a role expression.
         *
         * **Role expression definition:**
         *
         * + If the role is deployed on all nodes in the node group, set this parameter to role_name, for example: `DataNode`.
         * + If the role is deployed on a specified subscript node in the node group: role_name:index1,index2..., indexN,
         * for example: `DataNode:1,2`. The subscript starts from 1.
         * + Some roles support multi-instance deployment (that is, multiple instances of the same role are deployed on a node):
         * role_name[instanceCount], for example: `EsNode[9]`.
         *
         * > `DBService` is a basic component of a cluster. Components such as Hive, Hue, Oozie, Loader, and Redis, and Loader
         * store their metadata in DBService, and provide the metadata backup and restoration functions by using DBService.
         */
        assignedRoles?: pulumi.Input<pulumi.Input<string>[]>;
        autoRenew?: pulumi.Input<string>;
        chargingMode?: pulumi.Input<string>;
        /**
         * Specifies the data disk number of the nodes. The number configuration
         * of each node are as follows:
         * + master_nodes: 1.
         * + analysis_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + analysis_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         *
         * Changing this will create a new MapReduce cluster resource.
         */
        dataVolumeCount: pulumi.Input<number>;
        /**
         * Specifies the data disk size of the nodes,in GB. The value range is 10
         * to 32768. Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce
         * cluster resource.
         */
        dataVolumeSize?: pulumi.Input<number>;
        /**
         * Specifies the data disk flavor of the nodes.
         * Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce cluster resource.
         * The following disk types are supported:
         * + `SATA`: common I/O disk
         * + `SAS`: high I/O disk
         * + `SSD`: ultra-high I/O disk
         */
        dataVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the instance specifications for each nodes in node group.
         * Changing this will create a new MapReduce cluster resource.
         */
        flavor: pulumi.Input<string>;
        /**
         * The host list of this nodes group in the cluster.
         */
        hostIps?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the number of nodes for the node group.
         *
         * > **NOTE:** Only the core group and task group updations are allowed. The number of nodes after scaling cannot be
         * less than the number of nodes originally created.
         */
        nodeNumber: pulumi.Input<number>;
        period?: pulumi.Input<number>;
        periodUnit?: pulumi.Input<string>;
        /**
         * Specifies the system disk size of the nodes. Changing this will create
         * a new MapReduce cluster resource.
         */
        rootVolumeSize: pulumi.Input<number>;
        /**
         * Specifies the system disk flavor of the nodes. Changing this will
         * create a new MapReduce cluster resource.
         */
        rootVolumeType: pulumi.Input<string>;
    }

    export interface ClusterAnalysisTaskNodes {
        /**
         * Specifies the roles deployed in a node group.This argument is mandatory
         * when the cluster type is CUSTOM. Each character string represents a role expression.
         *
         * **Role expression definition:**
         *
         * + If the role is deployed on all nodes in the node group, set this parameter to role_name, for example: `DataNode`.
         * + If the role is deployed on a specified subscript node in the node group: role_name:index1,index2..., indexN,
         * for example: `DataNode:1,2`. The subscript starts from 1.
         * + Some roles support multi-instance deployment (that is, multiple instances of the same role are deployed on a node):
         * role_name[instanceCount], for example: `EsNode[9]`.
         *
         * > `DBService` is a basic component of a cluster. Components such as Hive, Hue, Oozie, Loader, and Redis, and Loader
         * store their metadata in DBService, and provide the metadata backup and restoration functions by using DBService.
         */
        assignedRoles?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the data disk number of the nodes. The number configuration
         * of each node are as follows:
         * + master_nodes: 1.
         * + analysis_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + analysis_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         *
         * Changing this will create a new MapReduce cluster resource.
         */
        dataVolumeCount: pulumi.Input<number>;
        /**
         * Specifies the data disk size of the nodes,in GB. The value range is 10
         * to 32768. Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce
         * cluster resource.
         */
        dataVolumeSize?: pulumi.Input<number>;
        /**
         * Specifies the data disk flavor of the nodes.
         * Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce cluster resource.
         * The following disk types are supported:
         * + `SATA`: common I/O disk
         * + `SAS`: high I/O disk
         * + `SSD`: ultra-high I/O disk
         */
        dataVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the instance specifications for each nodes in node group.
         * Changing this will create a new MapReduce cluster resource.
         */
        flavor: pulumi.Input<string>;
        /**
         * The host list of this nodes group in the cluster.
         */
        hostIps?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the number of nodes for the node group.
         *
         * > **NOTE:** Only the core group and task group updations are allowed. The number of nodes after scaling cannot be
         * less than the number of nodes originally created.
         */
        nodeNumber: pulumi.Input<number>;
        /**
         * Specifies the system disk size of the nodes. Changing this will create
         * a new MapReduce cluster resource.
         */
        rootVolumeSize: pulumi.Input<number>;
        /**
         * Specifies the system disk flavor of the nodes. Changing this will
         * create a new MapReduce cluster resource.
         */
        rootVolumeType: pulumi.Input<string>;
    }

    export interface ClusterBootstrapScript {
        /**
         * Whether the bootstrap action script runs only on active master nodes.
         */
        activeMaster?: pulumi.Input<boolean>;
        /**
         * Whether the bootstrap action script is executed before component start.
         */
        beforeComponentStart?: pulumi.Input<boolean>;
        /**
         * Whether the bootstrap action script involves root user operations.
         */
        executeNeedSudoRoot?: pulumi.Input<boolean>;
        /**
         * The action after the bootstrap action script fails to be executed.
         */
        failAction: pulumi.Input<string>;
        /**
         * Specifies the name of the MapReduce cluster. The name can contain 2 to 64
         * characters, which may consist of letters, digits, underscores (_) and hyphens (-). Changing this will create a new
         * MapReduce cluster resource.
         */
        name: pulumi.Input<string>;
        /**
         * Name of the node group where the bootstrap action script is executed.
         */
        nodes: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Bootstrap action script parameters.
         */
        parameters?: pulumi.Input<string>;
        /**
         * The execution time of one bootstrap action script, in RFC-3339 format.
         */
        startTime?: pulumi.Input<string>;
        /**
         * The status of one bootstrap action script.
         */
        state?: pulumi.Input<string>;
        /**
         * Path of a bootstrap action script. Set this parameter to an OBS bucket path or a local VM path.
         */
        uri: pulumi.Input<string>;
    }

    export interface ClusterComponentConfig {
        configs: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterComponentConfigConfig>[]>;
        /**
         * Specifies the name of the MapReduce cluster. The name can contain 2 to 64
         * characters, which may consist of letters, digits, underscores (_) and hyphens (-). Changing this will create a new
         * MapReduce cluster resource.
         */
        name: pulumi.Input<string>;
    }

    export interface ClusterComponentConfigConfig {
        configFileName: pulumi.Input<string>;
        key: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ClusterCustomNode {
        /**
         * Specifies the roles deployed in a node group.This argument is mandatory
         * when the cluster type is CUSTOM. Each character string represents a role expression.
         *
         * **Role expression definition:**
         *
         * + If the role is deployed on all nodes in the node group, set this parameter to role_name, for example: `DataNode`.
         * + If the role is deployed on a specified subscript node in the node group: role_name:index1,index2..., indexN,
         * for example: `DataNode:1,2`. The subscript starts from 1.
         * + Some roles support multi-instance deployment (that is, multiple instances of the same role are deployed on a node):
         * role_name[instanceCount], for example: `EsNode[9]`.
         *
         * > `DBService` is a basic component of a cluster. Components such as Hive, Hue, Oozie, Loader, and Redis, and Loader
         * store their metadata in DBService, and provide the metadata backup and restoration functions by using DBService.
         */
        assignedRoles?: pulumi.Input<pulumi.Input<string>[]>;
        autoRenew?: pulumi.Input<string>;
        chargingMode?: pulumi.Input<string>;
        /**
         * Specifies the data disk number of the nodes. The number configuration
         * of each node are as follows:
         * + master_nodes: 1.
         * + analysis_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + analysis_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         *
         * Changing this will create a new MapReduce cluster resource.
         */
        dataVolumeCount: pulumi.Input<number>;
        /**
         * Specifies the data disk size of the nodes,in GB. The value range is 10
         * to 32768. Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce
         * cluster resource.
         */
        dataVolumeSize?: pulumi.Input<number>;
        /**
         * Specifies the data disk flavor of the nodes.
         * Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce cluster resource.
         * The following disk types are supported:
         * + `SATA`: common I/O disk
         * + `SAS`: high I/O disk
         * + `SSD`: ultra-high I/O disk
         */
        dataVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the instance specifications for each nodes in node group.
         * Changing this will create a new MapReduce cluster resource.
         */
        flavor: pulumi.Input<string>;
        /**
         * Specifies the name of nodes for the node group.
         *
         * > **NOTE:** Only the customNodes has this argument
         */
        groupName: pulumi.Input<string>;
        /**
         * The host list of this nodes group in the cluster.
         */
        hostIps?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the number of nodes for the node group.
         *
         * > **NOTE:** Only the core group and task group updations are allowed. The number of nodes after scaling cannot be
         * less than the number of nodes originally created.
         */
        nodeNumber: pulumi.Input<number>;
        period?: pulumi.Input<number>;
        periodUnit?: pulumi.Input<string>;
        /**
         * Specifies the system disk size of the nodes. Changing this will create
         * a new MapReduce cluster resource.
         */
        rootVolumeSize: pulumi.Input<number>;
        /**
         * Specifies the system disk flavor of the nodes. Changing this will
         * create a new MapReduce cluster resource.
         */
        rootVolumeType: pulumi.Input<string>;
    }

    export interface ClusterExternalDatasource {
        componentName: pulumi.Input<string>;
        dataConnectionId?: pulumi.Input<string>;
        roleType: pulumi.Input<string>;
        sourceType: pulumi.Input<string>;
    }

    export interface ClusterMasterNodes {
        /**
         * Specifies the roles deployed in a node group.This argument is mandatory
         * when the cluster type is CUSTOM. Each character string represents a role expression.
         *
         * **Role expression definition:**
         *
         * + If the role is deployed on all nodes in the node group, set this parameter to role_name, for example: `DataNode`.
         * + If the role is deployed on a specified subscript node in the node group: role_name:index1,index2..., indexN,
         * for example: `DataNode:1,2`. The subscript starts from 1.
         * + Some roles support multi-instance deployment (that is, multiple instances of the same role are deployed on a node):
         * role_name[instanceCount], for example: `EsNode[9]`.
         *
         * > `DBService` is a basic component of a cluster. Components such as Hive, Hue, Oozie, Loader, and Redis, and Loader
         * store their metadata in DBService, and provide the metadata backup and restoration functions by using DBService.
         */
        assignedRoles?: pulumi.Input<pulumi.Input<string>[]>;
        autoRenew?: pulumi.Input<string>;
        chargingMode?: pulumi.Input<string>;
        /**
         * Specifies the data disk number of the nodes. The number configuration
         * of each node are as follows:
         * + master_nodes: 1.
         * + analysis_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + analysis_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         *
         * Changing this will create a new MapReduce cluster resource.
         */
        dataVolumeCount: pulumi.Input<number>;
        /**
         * Specifies the data disk size of the nodes,in GB. The value range is 10
         * to 32768. Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce
         * cluster resource.
         */
        dataVolumeSize?: pulumi.Input<number>;
        /**
         * Specifies the data disk flavor of the nodes.
         * Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce cluster resource.
         * The following disk types are supported:
         * + `SATA`: common I/O disk
         * + `SAS`: high I/O disk
         * + `SSD`: ultra-high I/O disk
         */
        dataVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the instance specifications for each nodes in node group.
         * Changing this will create a new MapReduce cluster resource.
         */
        flavor: pulumi.Input<string>;
        /**
         * The host list of this nodes group in the cluster.
         */
        hostIps?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the number of nodes for the node group.
         *
         * > **NOTE:** Only the core group and task group updations are allowed. The number of nodes after scaling cannot be
         * less than the number of nodes originally created.
         */
        nodeNumber: pulumi.Input<number>;
        period?: pulumi.Input<number>;
        periodUnit?: pulumi.Input<string>;
        /**
         * Specifies the system disk size of the nodes. Changing this will create
         * a new MapReduce cluster resource.
         */
        rootVolumeSize: pulumi.Input<number>;
        /**
         * Specifies the system disk flavor of the nodes. Changing this will
         * create a new MapReduce cluster resource.
         */
        rootVolumeType: pulumi.Input<string>;
    }

    export interface ClusterSmnNotify {
        /**
         * The subscription rule name.
         */
        subscriptionName: pulumi.Input<string>;
        /**
         * The Uniform Resource Name (URN) of the topic.
         */
        topicUrn: pulumi.Input<string>;
    }

    export interface ClusterStreamingCoreNodes {
        /**
         * Specifies the roles deployed in a node group.This argument is mandatory
         * when the cluster type is CUSTOM. Each character string represents a role expression.
         *
         * **Role expression definition:**
         *
         * + If the role is deployed on all nodes in the node group, set this parameter to role_name, for example: `DataNode`.
         * + If the role is deployed on a specified subscript node in the node group: role_name:index1,index2..., indexN,
         * for example: `DataNode:1,2`. The subscript starts from 1.
         * + Some roles support multi-instance deployment (that is, multiple instances of the same role are deployed on a node):
         * role_name[instanceCount], for example: `EsNode[9]`.
         *
         * > `DBService` is a basic component of a cluster. Components such as Hive, Hue, Oozie, Loader, and Redis, and Loader
         * store their metadata in DBService, and provide the metadata backup and restoration functions by using DBService.
         */
        assignedRoles?: pulumi.Input<pulumi.Input<string>[]>;
        autoRenew?: pulumi.Input<string>;
        chargingMode?: pulumi.Input<string>;
        /**
         * Specifies the data disk number of the nodes. The number configuration
         * of each node are as follows:
         * + master_nodes: 1.
         * + analysis_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + analysis_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         *
         * Changing this will create a new MapReduce cluster resource.
         */
        dataVolumeCount: pulumi.Input<number>;
        /**
         * Specifies the data disk size of the nodes,in GB. The value range is 10
         * to 32768. Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce
         * cluster resource.
         */
        dataVolumeSize?: pulumi.Input<number>;
        /**
         * Specifies the data disk flavor of the nodes.
         * Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce cluster resource.
         * The following disk types are supported:
         * + `SATA`: common I/O disk
         * + `SAS`: high I/O disk
         * + `SSD`: ultra-high I/O disk
         */
        dataVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the instance specifications for each nodes in node group.
         * Changing this will create a new MapReduce cluster resource.
         */
        flavor: pulumi.Input<string>;
        /**
         * The host list of this nodes group in the cluster.
         */
        hostIps?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the number of nodes for the node group.
         *
         * > **NOTE:** Only the core group and task group updations are allowed. The number of nodes after scaling cannot be
         * less than the number of nodes originally created.
         */
        nodeNumber: pulumi.Input<number>;
        period?: pulumi.Input<number>;
        periodUnit?: pulumi.Input<string>;
        /**
         * Specifies the system disk size of the nodes. Changing this will create
         * a new MapReduce cluster resource.
         */
        rootVolumeSize: pulumi.Input<number>;
        /**
         * Specifies the system disk flavor of the nodes. Changing this will
         * create a new MapReduce cluster resource.
         */
        rootVolumeType: pulumi.Input<string>;
    }

    export interface ClusterStreamingTaskNodes {
        /**
         * Specifies the roles deployed in a node group.This argument is mandatory
         * when the cluster type is CUSTOM. Each character string represents a role expression.
         *
         * **Role expression definition:**
         *
         * + If the role is deployed on all nodes in the node group, set this parameter to role_name, for example: `DataNode`.
         * + If the role is deployed on a specified subscript node in the node group: role_name:index1,index2..., indexN,
         * for example: `DataNode:1,2`. The subscript starts from 1.
         * + Some roles support multi-instance deployment (that is, multiple instances of the same role are deployed on a node):
         * role_name[instanceCount], for example: `EsNode[9]`.
         *
         * > `DBService` is a basic component of a cluster. Components such as Hive, Hue, Oozie, Loader, and Redis, and Loader
         * store their metadata in DBService, and provide the metadata backup and restoration functions by using DBService.
         */
        assignedRoles?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the data disk number of the nodes. The number configuration
         * of each node are as follows:
         * + master_nodes: 1.
         * + analysis_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_core_nodes: minimum is one and the maximum is subject to the configuration of the corresponding flavor.
         * + analysis_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         * + streaming_task_nodes: minimum is zero and the maximum is subject to the configuration of the corresponding flavor.
         *
         * Changing this will create a new MapReduce cluster resource.
         */
        dataVolumeCount: pulumi.Input<number>;
        /**
         * Specifies the data disk size of the nodes,in GB. The value range is 10
         * to 32768. Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce
         * cluster resource.
         */
        dataVolumeSize?: pulumi.Input<number>;
        /**
         * Specifies the data disk flavor of the nodes.
         * Required if `dataVolumeCount` is greater than zero. Changing this will create a new MapReduce cluster resource.
         * The following disk types are supported:
         * + `SATA`: common I/O disk
         * + `SAS`: high I/O disk
         * + `SSD`: ultra-high I/O disk
         */
        dataVolumeType?: pulumi.Input<string>;
        /**
         * Specifies the instance specifications for each nodes in node group.
         * Changing this will create a new MapReduce cluster resource.
         */
        flavor: pulumi.Input<string>;
        /**
         * The host list of this nodes group in the cluster.
         */
        hostIps?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the number of nodes for the node group.
         *
         * > **NOTE:** Only the core group and task group updations are allowed. The number of nodes after scaling cannot be
         * less than the number of nodes originally created.
         */
        nodeNumber: pulumi.Input<number>;
        /**
         * Specifies the system disk size of the nodes. Changing this will create
         * a new MapReduce cluster resource.
         */
        rootVolumeSize: pulumi.Input<number>;
        /**
         * Specifies the system disk flavor of the nodes. Changing this will
         * create a new MapReduce cluster resource.
         */
        rootVolumeType: pulumi.Input<string>;
    }
}

export namespace Nat {
    export interface GatewaySessionConf {
        /**
         * The ICMP session expiration time.
         */
        icmpSessionExpireTime?: pulumi.Input<number>;
        /**
         * The TCP session expiration time.
         */
        tcpSessionExpireTime?: pulumi.Input<number>;
        /**
         * The duration of TIME_WAIT state when TCP connection is closed.
         */
        tcpTimeWaitTime?: pulumi.Input<number>;
        /**
         * The UDP session expiration time.
         */
        udpSessionExpireTime?: pulumi.Input<number>;
    }
}

export namespace Obs {
    export interface BucketCorsRule {
        /**
         * Specifies the allowed header of cross-origin requests.
         * Only CORS requests matching the allowed header are valid.
         */
        allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the acceptable operation type of buckets and objects.
         * The methods include `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
         */
        allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Requests from this origin can access the bucket. Multiple matching rules are allowed.
         * One rule occupies one line, and allows one wildcard character (*) at most.
         */
        allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the exposed header in CORS responses, providing additional information for clients.
         */
        exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Specifies the duration that your browser can cache CORS responses, expressed in seconds.
         * The default value is 100.
         */
        maxAgeSeconds?: pulumi.Input<number>;
    }

    export interface BucketLifecycleRule {
        abortIncompleteMultipartUploads?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLifecycleRuleAbortIncompleteMultipartUpload>[]>;
        /**
         * Specifies lifecycle rule status.
         */
        enabled: pulumi.Input<boolean>;
        /**
         * Specifies a period when objects that have been last updated are automatically deleted. (documented below).
         */
        expirations?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLifecycleRuleExpiration>[]>;
        /**
         * Unique identifier for lifecycle rules. The Rule Name contains a maximum of 255 characters.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies a period when noncurrent object versions are automatically deleted. (documented below).
         */
        noncurrentVersionExpirations?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLifecycleRuleNoncurrentVersionExpiration>[]>;
        /**
         * Specifies a period when noncurrent object versions are automatically transitioned to `WARM` or `COLD` storage class (documented below).
         *
         * At least one of `expiration`, `transition`, `noncurrentVersionExpiration`, `noncurrentVersionTransition` must be specified.
         */
        noncurrentVersionTransitions?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLifecycleRuleNoncurrentVersionTransition>[]>;
        /**
         * Object key prefix identifying one or more objects to which the rule applies.
         * If omitted, all objects in the bucket will be managed by the lifecycle rule.
         * The prefix cannot start or end with a slash (/), cannot have consecutive slashes (/), and cannot contain the following special characters: \:*?"<>|.
         */
        prefix?: pulumi.Input<string>;
        /**
         * Specifies a period when objects that have been last updated are automatically transitioned to `WARM` or `COLD` storage class (documented below).
         */
        transitions?: pulumi.Input<pulumi.Input<inputs.Obs.BucketLifecycleRuleTransition>[]>;
    }

    export interface BucketLifecycleRuleAbortIncompleteMultipartUpload {
        days: pulumi.Input<number>;
    }

    export interface BucketLifecycleRuleExpiration {
        /**
         * Specifies the number of days when objects that have been last updated are automatically deleted.
         * The expiration time must be greater than the transition times.
         */
        days: pulumi.Input<number>;
    }

    export interface BucketLifecycleRuleNoncurrentVersionExpiration {
        /**
         * Specifies the number of days when noncurrent object versions are automatically deleted.
         */
        days: pulumi.Input<number>;
    }

    export interface BucketLifecycleRuleNoncurrentVersionTransition {
        /**
         * Specifies the number of days when noncurrent object versions are automatically transitioned to the specified storage class.
         */
        days: pulumi.Input<number>;
        /**
         * The class of storage used to store the object. Only `WARM` and `COLD` are supported.
         */
        storageClass: pulumi.Input<string>;
    }

    export interface BucketLifecycleRuleTransition {
        /**
         * Specifies the number of days when objects that have been last updated are automatically transitioned to the specified storage class.
         */
        days: pulumi.Input<number>;
        /**
         * The class of storage used to store the object. Only `WARM` and `COLD` are supported.
         */
        storageClass: pulumi.Input<string>;
    }

    export interface BucketLogging {
        /**
         * schema: Required
         */
        agency?: pulumi.Input<string>;
        /**
         * The name of the bucket that will receive the log objects.
         * The acl policy of the target bucket should be `log-delivery-write`.
         */
        targetBucket: pulumi.Input<string>;
        /**
         * To specify a key prefix for log objects.
         */
        targetPrefix?: pulumi.Input<string>;
    }

    export interface BucketStorageInfo {
        /**
         * The number of objects stored in the bucket.
         */
        objectNumber?: pulumi.Input<number>;
        /**
         * The stored size of the bucket.
         */
        size?: pulumi.Input<number>;
    }

    export interface BucketWebsite {
        /**
         * Specifies the error page returned when an error occurs during static website access.
         * Only HTML, JPG, PNG, BMP, and WEBP files under the root directory are supported.
         */
        errorDocument?: pulumi.Input<string>;
        /**
         * Unless using `redirectAllRequestsTo`. Specifies the default homepage of the static website, only HTML web pages are supported.
         * OBS only allows files such as `index.html` in the root directory of a bucket to function as the default homepage.
         * That is to say, do not set the default homepage with a multi-level directory structure (for example, /page/index.html).
         */
        indexDocument?: pulumi.Input<string>;
        /**
         * A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
         */
        redirectAllRequestsTo?: pulumi.Input<string>;
        /**
         * A JSON or XML format containing routing rules describing redirect behavior and when redirects are applied.
         * Each rule contains a `Condition` and a `Redirect` as shown in the following table:
         *
         * Parameter | Key
         * --- | ---
         * Condition | KeyPrefixEquals, HttpErrorCodeReturnedEquals
         * Redirect | Protocol, HostName, ReplaceKeyPrefixWith, ReplaceKeyWith, HttpRedirectCode
         */
        routingRules?: pulumi.Input<string>;
    }

}

export namespace Rds {
    export interface BackupDatabase {
        /**
         * Database to be backed up for Microsoft SQL Server.
         */
        name: pulumi.Input<string>;
    }

    export interface InstanceBackupStrategy {
        /**
         * Specifies the retention days for specific backup files. The value range is from 0 to 732.
         *
         * > **NOTE:** Primary/standby DB instances of Microsoft SQL Server do not support disabling the automated backup
         * policy.
         */
        keepDays?: pulumi.Input<number>;
        /**
         * Specifies the backup cycle. Automatic backups will be performed on the specified days of
         * the week, except when disabling the automatic backup policy. The value range is a comma-separated number, where each
         * number represents a day of the week. For example, a value of 1,2,3,4 would set the backup cycle to Monday, Tuesday,
         * Wednesday, and Thursday. The default value is 1,2,3,4,5,6,7.
         */
        period?: pulumi.Input<string>;
        /**
         * Specifies the backup time window. Automated backups will be triggered during the
         * backup time window. It must be a valid value in the **hh:mm-HH:MM**
         * format. The current time is in the UTC format. The HH value must be 1 greater than the hh value. The values of mm and
         * MM must be the same and must be set to any of the following: 00, 15, 30, or 45. Example value: 08:15-09:15 23:00-00:
         * 00.
         */
        startTime: pulumi.Input<string>;
    }

    export interface InstanceDb {
        /**
         * Specifies the database password. The value should contain 8 to 32 characters,
         * including uppercase and lowercase letters, digits, and the following special characters: ~!@#%^*-_=+? You are advised
         * to enter a strong password to improve security, preventing security risks such as brute force cracking.
         */
        password?: pulumi.Input<string>;
        /**
         * Specifies the database port.
         * + The MySQL database port ranges from 1024 to 65535 (excluding 12017 and 33071, which are occupied by the RDS system
         * and cannot be used). The default value is 3306.
         * + The PostgreSQL database port ranges from 2100 to 9500. The default value is 5432.
         * + The Microsoft SQL Server database port can be 1433 or ranges from 2100 to 9500, excluding 5355 and 5985. The
         * default value is 1433.
         * + The MariaDB database port ranges from 1024 to 65535 (excluding 12017 and 33071, which are occupied by the RDS system
         * and cannot be used). The default value is 3306.
         */
        port?: pulumi.Input<number>;
        /**
         * Specifies the DB engine. Available value are **MySQL**, **PostgreSQL**
         * and **SQLServer**. Changing this parameter will create a new resource.
         */
        type: pulumi.Input<string>;
        userName?: pulumi.Input<string>;
        /**
         * Specifies the database version. Changing this parameter will create a new
         * resource.
         */
        version: pulumi.Input<string>;
    }

    export interface InstanceMsdtcHost {
        /**
         * Specifies the host name.
         */
        hostName: pulumi.Input<string>;
        /**
         * Indicates the host ID.
         */
        id?: pulumi.Input<string>;
        /**
         * Specifies the host IP address.
         */
        ip: pulumi.Input<string>;
    }

    export interface InstanceNode {
        /**
         * Specifies the list of AZ name. Changing this parameter will create a
         * new resource.
         */
        availabilityZone?: pulumi.Input<string>;
        /**
         * Indicates the host ID.
         */
        id?: pulumi.Input<string>;
        /**
         * Specifies the DB instance name. The DB instance name of the same type must be unique for
         * the same tenant. The value must be 4 to 64 characters in length and start with a letter. It is case-sensitive and can
         * contain only letters, digits, hyphens (-), and underscores (_).
         */
        name?: pulumi.Input<string>;
        /**
         * Indicates the node type. The value can be master or slave, indicating the primary node or standby node
         * respectively.
         */
        role?: pulumi.Input<string>;
        /**
         * Indicates the node status.
         */
        status?: pulumi.Input<string>;
    }

    export interface InstanceParameter {
        /**
         * Specifies the parameter name. Some of them needs the instance to be restarted
         * to take effect.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the parameter value.
         *
         * <a name="RdsInstance_MsdtcHosts"></a>
         * The `msdtcHosts` block supports:
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceRestore {
        /**
         * Specifies the ID of the backup used to restore data. Changing this
         * parameter will create a new resource.
         */
        backupId: pulumi.Input<string>;
        /**
         * Specifies the database to be restored. This parameter applies only to
         * Microsoft SQL Server databases. Changing this parameter will create a new resource.
         */
        databaseName?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Specifies the source DB instance ID. Changing this parameter will create
         * a new resource.
         */
        instanceId: pulumi.Input<string>;
    }

    export interface InstanceVolume {
        /**
         * Specifies the key ID for disk encryption.
         * Changing this parameter will create a new resource.
         */
        diskEncryptionId?: pulumi.Input<string>;
        /**
         * Specifies the upper limit of automatic expansion of storage, in GB.
         */
        limitSize?: pulumi.Input<number>;
        /**
         * Specifies the volume size. Its value range is from 40 GB to 4000 GB. The value must be a
         * multiple of 10 and greater than the original size.
         */
        size: pulumi.Input<number>;
        /**
         * Specifies the threshold to trigger automatic expansion.  
         * If the available storage drops to this threshold or `10` GB, the automatic expansion is triggered.
         * The valid values are as follows:
         * + **10**
         * + **15**
         * + **20**
         */
        triggerThreshold?: pulumi.Input<number>;
        /**
         * Specifies the volume type. Its value can be any of the following and is
         * case-sensitive:
         * + **CLOUDSSD**: cloud SSD storage. This storage type is supported only with general-purpose and dedicated DB
         * instances (MySQL and PostreSQL).
         * + **ESSD**: extreme SSD storage. Supported by: MySQL primary/standby, PostgeSQL (both single and primary/standby).
         * + **ULTRAHIGH** the only storage type for SQLServer, not supported by other DB engines.
         *
         * Changing this parameter will create a new resource.
         */
        type: pulumi.Input<string>;
    }

    export interface MysqlDatabasePrivilegeUser {
        /**
         * Specifies the username of the database account.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the read-only permission. The value can be:
         * + **true**: indicates the read-only permission.
         * + **false**: indicates the read and write permission.
         *
         * The default value is **false**.
         */
        readonly?: pulumi.Input<boolean>;
    }

    export interface MysqlDatabaseTableRestoreDatabase {
        /**
         * Specifies the name of the table after restoration.
         *
         * Changing this creates a new resource.
         */
        newName: pulumi.Input<string>;
        /**
         * Specifies the name of the table before restoration.
         *
         * Changing this creates a new resource.
         */
        oldName: pulumi.Input<string>;
    }

    export interface MysqlDatabaseTableRestoreRestoreTable {
        /**
         * Specifies the database name.
         *
         * Changing this creates a new resource.
         */
        database: pulumi.Input<string>;
        /**
         * Specifies the tables.
         * The tables structure is documented below.
         *
         * Changing this creates a new resource.
         *
         * <a name="tablesStruct"></a>
         * The `tables` block supports:
         */
        tables: pulumi.Input<pulumi.Input<inputs.Rds.MysqlDatabaseTableRestoreRestoreTableTable>[]>;
    }

    export interface MysqlDatabaseTableRestoreRestoreTableTable {
        /**
         * Specifies the name of the table after restoration.
         *
         * Changing this creates a new resource.
         */
        newName: pulumi.Input<string>;
        /**
         * Specifies the name of the table before restoration.
         *
         * Changing this creates a new resource.
         */
        oldName: pulumi.Input<string>;
    }

    export interface ParametergroupConfigurationParameter {
        /**
         * The parameter group description. It contains a maximum of 256 characters and cannot contain the following special characters:>!<"&'= the value is left blank by default.
         */
        description?: pulumi.Input<string>;
        /**
         * The parameter group name. It contains a maximum of 64 characters.
         */
        name?: pulumi.Input<string>;
        /**
         * Indicates whether the parameter is read-only.
         */
        readonly?: pulumi.Input<boolean>;
        /**
         * Indicates whether a restart is required.
         */
        restartRequired?: pulumi.Input<boolean>;
        /**
         * Indicates the parameter type.
         */
        type?: pulumi.Input<string>;
        /**
         * Indicates the parameter value.
         */
        value?: pulumi.Input<string>;
        /**
         * Indicates the parameter value range.
         */
        valueRange?: pulumi.Input<string>;
    }

    export interface ParametergroupDatastore {
        /**
         * The DB engine. Currently, MySQL, PostgreSQL, and Microsoft SQL Server are supported. The value is case-insensitive and can be mysql, postgresql, or sqlserver.
         */
        type: pulumi.Input<string>;
        /**
         * Specifies the database version.
         *
         * * MySQL databases support MySQL 5.6, 5.7 and 8.0. Example value: 5.7.
         * * PostgreSQL databases support PostgreSQL 9.5, 9.6, 10, 11 and 12. Example value: 9.5.
         * * Microsoft SQL Server databases support 2012_SE, 2014_SE, 2016_SE, 2012_EE, 2014_EE, 2016_EE and 2017_EE. Example value: 2014_SE.
         */
        version: pulumi.Input<string>;
    }

    export interface PgAccountAttribute {
        /**
         * Indicates whether a user bypasses each row-level security policy.
         */
        rolBypassRls?: pulumi.Input<boolean>;
        /**
         * Indicates whether a user can log in to the database.
         */
        rolCanLogin?: pulumi.Input<boolean>;
        /**
         * Indicates the maximum number of concurrent connections to a DB instance.
         */
        rolConnLimit?: pulumi.Input<number>;
        /**
         * Indicates whether a user can create a database.
         */
        rolCreateDb?: pulumi.Input<boolean>;
        /**
         * Indicates whether a user can create other sub-users.
         */
        rolCreateRole?: pulumi.Input<boolean>;
        /**
         * Indicates whether a user automatically inherits the permissions of the role to which the user belongs.
         */
        rolInherit?: pulumi.Input<boolean>;
        /**
         * Indicates whether the user is a replication role.
         */
        rolReplication?: pulumi.Input<boolean>;
        /**
         * Indicates whether a user has the super-user permission.
         */
        rolSuper?: pulumi.Input<boolean>;
    }

    export interface PgHbaHostBasedAuthentication {
        /**
         * Specifies the client IP address.
         */
        address: pulumi.Input<string>;
        /**
         * Specifies the database name.
         */
        database: pulumi.Input<string>;
        /**
         * Specifies the subnet mask.
         */
        mask?: pulumi.Input<string>;
        /**
         * Specifies the authentication mode.
         */
        method: pulumi.Input<string>;
        /**
         * Specifies the connection type.
         */
        type: pulumi.Input<string>;
        /**
         * Specifies the Name of a user.
         */
        user: pulumi.Input<string>;
    }

    export interface ReadReplicaInstanceDb {
        /**
         * Indicates the database port information.
         */
        port?: pulumi.Input<number>;
        /**
         * Indicates the DB engine. Value: MySQL, PostgreSQL, SQLServer.
         */
        type?: pulumi.Input<string>;
        /**
         * Indicates the default user name of database.
         */
        userName?: pulumi.Input<string>;
        /**
         * Indicates the database version.
         */
        version?: pulumi.Input<string>;
    }

    export interface ReadReplicaInstanceParameter {
        /**
         * Specifies the DB instance name. The DB instance name of the same type
         * must be unique for the same tenant. The value must be 4 to 64 characters in length and start with a letter.
         * It is case-sensitive and can contain only letters, digits, hyphens (-), and underscores (_).
         * Changing this parameter will create a new resource.
         */
        name: pulumi.Input<string>;
        value: pulumi.Input<string>;
    }

    export interface ReadReplicaInstanceVolume {
        /**
         * Specifies the key ID for disk encryption.
         * Changing this parameter will create a new resource.
         */
        diskEncryptionId?: pulumi.Input<string>;
        limitSize?: pulumi.Input<number>;
        size?: pulumi.Input<number>;
        triggerThreshold?: pulumi.Input<number>;
        /**
         * Specifies the volume type. Its value can be any of the following and is case-sensitive:
         * - *ESSD* - ultrahigh I/O.
         * - *CLOUDSSD* - high I/O.
         *
         * Changing this parameter will create a new resource.
         */
        type: pulumi.Input<string>;
    }

    export interface SqlserverDatabasePrivilegeUser {
        /**
         * Specifies the username of the database account.
         */
        name: pulumi.Input<string>;
        /**
         * Specifies the read-only permission. Value options:
         * + **true**: indicates the read-only permission.
         * + **false**: indicates the read and write permission.
         *
         * Defaults to **false**.
         */
        readonly?: pulumi.Input<boolean>;
    }
}

export namespace Sfs {
    export interface FileSystemAccessRule {
        /**
         * Specifies the access level of the shared file system. Possible values are *ro* (read-only)
         * and *rw* (read-write). The default value is *rw* (read/write). Changing this will create a new access rule.
         */
        accessLevel?: pulumi.Input<string>;
        /**
         * The UUID of the share access rule.
         */
        accessRuleId?: pulumi.Input<string>;
        /**
         * Specifies the value that defines the access rule. The value contains 1 to 255 characters.
         * Changing this will create a new access rule. The value varies according to the scenario:
         * - Set the VPC ID in VPC authorization scenarios.
         * - Set this parameter in IP address authorization scenario.
         *
         * - For an NFS shared file system, the value in the format of *VPC_ID#IP_address#priority#user_permission*.
         * For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#100#all_squash,root_squash.
         *
         * - For a CIFS shared file system, the value in the format of *VPC_ID#IP_address#priority*.
         * For example, 0157b53f-4974-4e80-91c9-098532bcaf00#2.2.2.2/16#0.
         *
         * > **NOTE:** If you want to create more access rules, please using sbercloud_sfs_access_rule.
         */
        accessTo?: pulumi.Input<string>;
        /**
         * Specifies the type of the share access rule. The default value is *cert*.
         * Changing this will create a new access rule.
         */
        accessType?: pulumi.Input<string>;
        /**
         * The status of the share access rule.
         */
        status?: pulumi.Input<string>;
    }

}

export namespace SharedApig {
    export interface ApiBackendParam {
        /**
         * Specifies the description of the API. The description cannot exceed 255 characters.
         */
        description?: pulumi.Input<string>;
        /**
         * Where the parameter is located.
         */
        location: pulumi.Input<string>;
        /**
         * Specifies the name of the API. An API name consists of 3–64 characters, starting with a
         * letter. Only letters, digits, and underscores (_) are allowed.
         */
        name: pulumi.Input<string>;
        systemParamType?: pulumi.Input<string>;
        /**
         * The parameter type.
         */
        type: pulumi.Input<string>;
        /**
         * The value of the parameter
         */
        value: pulumi.Input<string>;
    }

    export interface ApiFuncGraph {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The alias URN of the FunctionGraph function.
         */
        functionAliasUrn?: pulumi.Input<string>;
        /**
         * The URN of the FunctionGraph function.
         */
        functionUrn: pulumi.Input<string>;
        /**
         * The invocation type.
         */
        invocationType?: pulumi.Input<string>;
        /**
         * The network architecture (framework) type of the FunctionGraph function.
         */
        networkType?: pulumi.Input<string>;
        /**
         * Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
         * which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
         */
        requestProtocol?: pulumi.Input<string>;
        /**
         * The timeout for API requests to backend service.
         */
        timeout?: pulumi.Input<number>;
        /**
         * Specifies the version of the API. A maximum of 16 characters are allowed.
         */
        version?: pulumi.Input<string>;
    }

    export interface ApiFuncGraphPolicy {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The configaiton list of the backend parameters.
         */
        backendParams?: pulumi.Input<pulumi.Input<inputs.SharedApig.ApiFuncGraphPolicyBackendParam>[]>;
        /**
         * The policy conditions.
         */
        conditions: pulumi.Input<pulumi.Input<inputs.SharedApig.ApiFuncGraphPolicyCondition>[]>;
        /**
         * The effective mode of the backend policy.
         */
        effectiveMode?: pulumi.Input<string>;
        /**
         * The alias URN of the FunctionGraph function.
         */
        functionAliasUrn?: pulumi.Input<string>;
        /**
         * The URN of the FunctionGraph function.
         */
        functionUrn: pulumi.Input<string>;
        /**
         * The invocation mode of the FunctionGraph function.
         */
        invocationMode?: pulumi.Input<string>;
        /**
         * The invocation mode of the FunctionGraph function.
         */
        invocationType?: pulumi.Input<string>;
        /**
         * Specifies the name of the API. An API name consists of 3–64 characters, starting with a
         * letter. Only letters, digits, and underscores (_) are allowed.
         */
        name: pulumi.Input<string>;
        /**
         * The network (framework) type of the FunctionGraph function.
         */
        networkType?: pulumi.Input<string>;
        /**
         * Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
         * which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
         */
        requestProtocol?: pulumi.Input<string>;
        /**
         * The timeout for API requests to backend service.
         */
        timeout?: pulumi.Input<number>;
        /**
         * Specifies the version of the API. A maximum of 16 characters are allowed.
         */
        version?: pulumi.Input<string>;
    }

    export interface ApiFuncGraphPolicyBackendParam {
        /**
         * Specifies the description of the API. The description cannot exceed 255 characters.
         */
        description?: pulumi.Input<string>;
        /**
         * Where the parameter is located.
         */
        location: pulumi.Input<string>;
        /**
         * Specifies the name of the API. An API name consists of 3–64 characters, starting with a
         * letter. Only letters, digits, and underscores (_) are allowed.
         */
        name: pulumi.Input<string>;
        systemParamType?: pulumi.Input<string>;
        /**
         * The parameter type.
         */
        type: pulumi.Input<string>;
        /**
         * The value of the parameter
         */
        value: pulumi.Input<string>;
    }

    export interface ApiFuncGraphPolicyCondition {
        /**
         * The cookie parameter name.
         */
        cookieName?: pulumi.Input<string>;
        /**
         * The frontend authentication parameter name.
         */
        frontendAuthorizerName?: pulumi.Input<string>;
        /**
         * The location of a parameter generated after orchestration.
         */
        mappedParamLocation?: pulumi.Input<string>;
        /**
         * The name of a parameter generated after orchestration.
         */
        mappedParamName?: pulumi.Input<string>;
        /**
         * The request parameter name.
         */
        paramName?: pulumi.Input<string>;
        /**
         * The type of the backend policy.
         */
        source?: pulumi.Input<string>;
        /**
         * The gateway built-in parameter name.
         */
        sysName?: pulumi.Input<string>;
        /**
         * The condition type.
         */
        type?: pulumi.Input<string>;
        /**
         * The value of the backend policy.
         */
        value: pulumi.Input<string>;
    }

    export interface ApiMock {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The response content of the mock.
         */
        response?: pulumi.Input<string>;
        /**
         * The custom status code of the mock response.
         */
        statusCode?: pulumi.Input<number>;
    }

    export interface ApiMockPolicy {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The configuration list of backend parameters.
         */
        backendParams?: pulumi.Input<pulumi.Input<inputs.SharedApig.ApiMockPolicyBackendParam>[]>;
        /**
         * The policy conditions.
         */
        conditions: pulumi.Input<pulumi.Input<inputs.SharedApig.ApiMockPolicyCondition>[]>;
        /**
         * The effective mode of the backend policy.
         */
        effectiveMode?: pulumi.Input<string>;
        /**
         * Specifies the name of the API. An API name consists of 3–64 characters, starting with a
         * letter. Only letters, digits, and underscores (_) are allowed.
         */
        name: pulumi.Input<string>;
        /**
         * The response content of the mock.
         */
        response?: pulumi.Input<string>;
        /**
         * The custom status code of the mock response.
         */
        statusCode?: pulumi.Input<number>;
    }

    export interface ApiMockPolicyBackendParam {
        /**
         * Specifies the description of the API. The description cannot exceed 255 characters.
         */
        description?: pulumi.Input<string>;
        /**
         * Where the parameter is located.
         */
        location: pulumi.Input<string>;
        /**
         * Specifies the name of the API. An API name consists of 3–64 characters, starting with a
         * letter. Only letters, digits, and underscores (_) are allowed.
         */
        name: pulumi.Input<string>;
        systemParamType?: pulumi.Input<string>;
        /**
         * The parameter type.
         */
        type: pulumi.Input<string>;
        /**
         * The value of the parameter
         */
        value: pulumi.Input<string>;
    }

    export interface ApiMockPolicyCondition {
        /**
         * The cookie parameter name.
         */
        cookieName?: pulumi.Input<string>;
        /**
         * The frontend authentication parameter name.
         */
        frontendAuthorizerName?: pulumi.Input<string>;
        /**
         * The location of a parameter generated after orchestration.
         */
        mappedParamLocation?: pulumi.Input<string>;
        /**
         * The name of a parameter generated after orchestration.
         */
        mappedParamName?: pulumi.Input<string>;
        /**
         * The request parameter name.
         */
        paramName?: pulumi.Input<string>;
        /**
         * The type of the backend policy.
         */
        source?: pulumi.Input<string>;
        /**
         * The gateway built-in parameter name.
         */
        sysName?: pulumi.Input<string>;
        /**
         * The condition type.
         */
        type?: pulumi.Input<string>;
        /**
         * The value of the backend policy.
         */
        value: pulumi.Input<string>;
    }

    export interface ApiRequestParam {
        /**
         * The default value of the parameter.
         */
        default?: pulumi.Input<string>;
        /**
         * Specifies the description of the API. The description cannot exceed 255 characters.
         */
        description?: pulumi.Input<string>;
        /**
         * The enumerated value.
         */
        enumeration?: pulumi.Input<string>;
        /**
         * The parameter example.
         */
        example?: pulumi.Input<string>;
        /**
         * Where this parameter is located.
         */
        location?: pulumi.Input<string>;
        /**
         * The maximum value or length (string parameter) for parameter.
         */
        maximum?: pulumi.Input<number>;
        /**
         * The minimum value or length (string parameter) for parameter.
         */
        minimum?: pulumi.Input<number>;
        /**
         * Specifies the name of the API. An API name consists of 3–64 characters, starting with a
         * letter. Only letters, digits, and underscores (_) are allowed.
         */
        name: pulumi.Input<string>;
        /**
         * The list of orchestration rules that parameter used.
         */
        orchestrations?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Whether to transparently transfer the parameter.
         */
        passthrough?: pulumi.Input<boolean>;
        /**
         * Whether this parameter is required.
         */
        required?: pulumi.Input<boolean>;
        /**
         * The parameter type.
         */
        type?: pulumi.Input<string>;
        /**
         * Whether to enable the parameter validation.
         */
        validEnable?: pulumi.Input<number>;
    }

    export interface ApiWeb {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The backend service address, which consists of a domain name or IP address, and a port number.
         */
        backendAddress?: pulumi.Input<string>;
        /**
         * The proxy host header.
         */
        hostHeader?: pulumi.Input<string>;
        /**
         * The backend request path.
         */
        path: pulumi.Input<string>;
        /**
         * Specifies the request method, including 'GET','POST','PUT' and etc..
         */
        requestMethod?: pulumi.Input<string>;
        /**
         * Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
         * which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
         */
        requestProtocol?: pulumi.Input<string>;
        /**
         * The number of retry attempts to request the backend service.
         */
        retryCount?: pulumi.Input<number>;
        /**
         * Whether to enable two-way authentication.
         */
        sslEnable?: pulumi.Input<boolean>;
        /**
         * The timeout for API requests to backend service.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The VPC channel ID.
         */
        vpcChannelId?: pulumi.Input<string>;
    }

    export interface ApiWebPolicy {
        /**
         * The ID of the backend custom authorization.
         */
        authorizerId?: pulumi.Input<string>;
        /**
         * The backend service address
         */
        backendAddress?: pulumi.Input<string>;
        /**
         * The configuration list of the backend parameters.
         */
        backendParams?: pulumi.Input<pulumi.Input<inputs.SharedApig.ApiWebPolicyBackendParam>[]>;
        /**
         * The policy conditions.
         */
        conditions: pulumi.Input<pulumi.Input<inputs.SharedApig.ApiWebPolicyCondition>[]>;
        /**
         * The effective mode of the backend policy.
         */
        effectiveMode?: pulumi.Input<string>;
        /**
         * The proxy host header.
         */
        hostHeader?: pulumi.Input<string>;
        /**
         * Specifies the name of the API. An API name consists of 3–64 characters, starting with a
         * letter. Only letters, digits, and underscores (_) are allowed.
         */
        name: pulumi.Input<string>;
        /**
         * The backend request address.
         */
        path: pulumi.Input<string>;
        /**
         * Specifies the request method, including 'GET','POST','PUT' and etc..
         */
        requestMethod: pulumi.Input<string>;
        /**
         * Specifies the request protocol. The value can be 'HTTP', 'HTTPS', and 'BOTH'
         * which means the API can be accessed through both 'HTTP' and 'HTTPS'. Defaults to 'HTTPS'.
         */
        requestProtocol?: pulumi.Input<string>;
        /**
         * The number of retry attempts to request the backend service.
         */
        retryCount?: pulumi.Input<number>;
        /**
         * The timeout for API requests to backend service.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The VPC channel ID.
         */
        vpcChannelId?: pulumi.Input<string>;
    }

    export interface ApiWebPolicyBackendParam {
        /**
         * Specifies the description of the API. The description cannot exceed 255 characters.
         */
        description?: pulumi.Input<string>;
        /**
         * Where the parameter is located.
         */
        location: pulumi.Input<string>;
        /**
         * Specifies the name of the API. An API name consists of 3–64 characters, starting with a
         * letter. Only letters, digits, and underscores (_) are allowed.
         */
        name: pulumi.Input<string>;
        systemParamType?: pulumi.Input<string>;
        /**
         * The parameter type.
         */
        type: pulumi.Input<string>;
        /**
         * The value of the parameter
         */
        value: pulumi.Input<string>;
    }

    export interface ApiWebPolicyCondition {
        /**
         * The cookie parameter name.
         */
        cookieName?: pulumi.Input<string>;
        /**
         * The frontend authentication parameter name.
         */
        frontendAuthorizerName?: pulumi.Input<string>;
        /**
         * The location of a parameter generated after orchestration.
         */
        mappedParamLocation?: pulumi.Input<string>;
        /**
         * The name of a parameter generated after orchestration.
         */
        mappedParamName?: pulumi.Input<string>;
        /**
         * The request parameter name.
         */
        paramName?: pulumi.Input<string>;
        /**
         * The type of the backend policy.
         */
        source?: pulumi.Input<string>;
        /**
         * The gateway built-in parameter name.
         */
        sysName?: pulumi.Input<string>;
        /**
         * The condition type.
         */
        type?: pulumi.Input<string>;
        /**
         * The value of the backend policy.
         */
        value: pulumi.Input<string>;
    }

    export interface GroupEnvironment {
        /**
         * The ID of the environment to which the variables belongs.
         */
        environmentId: pulumi.Input<string>;
        /**
         * The array of one or more environment variables. Each `variable` block supports the following:
         */
        variables: pulumi.Input<pulumi.Input<inputs.SharedApig.GroupEnvironmentVariable>[]>;
    }

    export interface GroupEnvironmentVariable {
        /**
         * The ID of the variable that the group has.
         */
        id?: pulumi.Input<string>;
        /**
         * The variable name.
         */
        name: pulumi.Input<string>;
        /**
         * The variable value.
         */
        value: pulumi.Input<string>;
        /**
         * The ID of the variable that the group has.  
         * _Deprecated: Use `id` instead._
         *
         * @deprecated Use 'id' instead
         */
        variableId?: pulumi.Input<string>;
    }

    export interface GroupUrlDomain {
        /**
         * Whether to enable redirection from HTTP to HTTPS.
         */
        isHttpRedirectToHttps?: pulumi.Input<boolean>;
        /**
         * The minimum SSL protocol version.
         */
        minSslVersion?: pulumi.Input<string>;
        /**
         * The group name.
         */
        name: pulumi.Input<string>;
    }
}

export namespace Vpc {
    export interface AddressGroupIpExtraSet {
        ip: pulumi.Input<string>;
        remarks?: pulumi.Input<string>;
    }

    export interface BandwidthPublicip {
        /**
         * The ID of the EIP or IPv6 port that uses the bandwidth.
         */
        id?: pulumi.Input<string>;
        /**
         * The IPv4 or IPv6 address.
         */
        ipAddress?: pulumi.Input<string>;
        /**
         * The IP version, either 4 or 6.
         */
        ipVersion?: pulumi.Input<number>;
        /**
         * The EIP type.
         */
        type?: pulumi.Input<string>;
    }

    export interface EipBandwidth {
        /**
         * Specifies whether the bandwidth is billed by traffic or by bandwidth
         * size. The value can be *traffic* or *bandwidth*. Changing this creates a new eip.
         */
        chargeMode?: pulumi.Input<string>;
        /**
         * The shared bandwidth id. This parameter is mandatory when
         * `shareType` is set to *WHOLE*. Changing this creates a new eip.
         */
        id?: pulumi.Input<string>;
        /**
         * The bandwidth name, which is a string of 1 to 64 characters that contain letters, digits,
         * underscores (_), and hyphens (-). This parameter is mandatory when `shareType` is set to *PER*.
         */
        name?: pulumi.Input<string>;
        /**
         * Whether the bandwidth is dedicated or shared. Changing this creates a new
         * eip. Possible values are as follows:
         * + *PER*: Dedicated bandwidth
         * + *WHOLE*: Shared bandwidth
         */
        shareType: pulumi.Input<string>;
        /**
         * The bandwidth size. The value ranges from 1 to 300 Mbit/s. This parameter is mandatory
         * when `shareType` is set to *PER*.
         */
        size?: pulumi.Input<number>;
    }

    export interface EipPublicip {
        /**
         * The value must be a valid IP address in the available IP address segment.
         * Changing this creates a new eip.
         */
        ipAddress?: pulumi.Input<string>;
        /**
         * The IP version.
         */
        ipVersion?: pulumi.Input<number>;
        /**
         * The port id which this eip will associate with. If the value is "" or this not
         * specified, the eip will be in unbind state.
         */
        portId?: pulumi.Input<string>;
        /**
         * The type of the eip. Changing this creates a new eip.
         */
        type?: pulumi.Input<string>;
    }

    export interface RouteTableRoute {
        /**
         * Specifies the supplementary information about the route.
         * The value is a string of no more than 255 characters and cannot contain angle brackets (< or >).
         */
        description?: pulumi.Input<string>;
        /**
         * Specifies the destination address in the CIDR notation format,
         * for example, 192.168.200.0/24. The destination of each route must be unique and cannot overlap
         * with any subnet in the VPC.
         */
        destination: pulumi.Input<string>;
        /**
         * Specifies the next hop.
         * + If the route type is **ecs**, the value is an ECS instance ID in the VPC.
         * + If the route type is **eni**, the value is the extension NIC of an ECS in the VPC.
         * + If the route type is **vip**, the value is a virtual IP address.
         * + If the route type is **nat**, the value is a VPN gateway ID.
         * + If the route type is **peering**, the value is a VPC peering connection ID.
         * + If the route type is **vpn**, the value is a VPN gateway ID.
         * + If the route type is **dc**, the value is a Direct Connect gateway ID.
         * + If the route type is **cc**, the value is a Cloud Connection ID.
         */
        nexthop: pulumi.Input<string>;
        /**
         * Specifies the route type. Currently, the value can be:
         * **ecs**, **eni**, **vip**, **nat**, **peering**, **vpn**, **dc** and **cc**.
         */
        type: pulumi.Input<string>;
    }

    export interface SecgroupRule {
        /**
         * The effective policy.
         */
        action?: pulumi.Input<string>;
        /**
         * Description of the security group.
         */
        description?: pulumi.Input<string>;
        /**
         * The direction of the rule. The value can be *egress* or *ingress*.
         */
        direction?: pulumi.Input<string>;
        /**
         * The IP protocol version. The value can be *IPv4* or *IPv6*.
         */
        ethertype?: pulumi.Input<string>;
        /**
         * The security group rule ID.
         */
        id?: pulumi.Input<string>;
        /**
         * schema: Deprecated
         */
        portRangeMax?: pulumi.Input<number>;
        /**
         * schema: Deprecated
         */
        portRangeMin?: pulumi.Input<number>;
        /**
         * The port value range.
         */
        ports?: pulumi.Input<string>;
        /**
         * The priority number.
         */
        priority?: pulumi.Input<number>;
        /**
         * The protocol type.
         */
        protocol?: pulumi.Input<string>;
        /**
         * The ID of the remote address group.
         */
        remoteAddressGroupId?: pulumi.Input<string>;
        /**
         * The ID of the peer security group.
         */
        remoteGroupId?: pulumi.Input<string>;
        /**
         * The remote IP address. The value can be in the CIDR format or IP addresses.
         */
        remoteIpPrefix?: pulumi.Input<string>;
    }

    export interface VpcRoute {
        destination?: pulumi.Input<string>;
        nexthop?: pulumi.Input<string>;
    }
}

export namespace Vpcep {
    export interface ServiceConnection {
        /**
         * Specifies the description of the VPC endpoint service.
         */
        description?: pulumi.Input<string>;
        /**
         * The user's domain ID.
         */
        domainId?: pulumi.Input<string>;
        /**
         * The unique ID of the VPC endpoint.
         */
        endpointId?: pulumi.Input<string>;
        /**
         * The packet ID of the VPC endpoint.
         */
        packetId?: pulumi.Input<number>;
        /**
         * The connection status of the VPC endpoint.
         */
        status?: pulumi.Input<string>;
    }

    export interface ServicePortMapping {
        /**
         * Specifies the protocol used in port mappings. Only **TCP** is supported.
         */
        protocol?: pulumi.Input<string>;
        /**
         * Specifies the port for accessing the VPC endpoint service. This port is provided by
         * the backend service to provide services. The value ranges from 1 to 65535.
         */
        servicePort?: pulumi.Input<number>;
        /**
         * Specifies the port for accessing the VPC endpoint. This port is provided by the VPC
         * endpoint, allowing you to access the VPC endpoint service. The value ranges from 1 to 65535.
         */
        terminalPort?: pulumi.Input<number>;
    }
}

export namespace config {
}

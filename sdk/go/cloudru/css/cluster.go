// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Cluster struct {
	pulumi.CustomResourceState

	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// schema: Required
	AvailabilityZone    pulumi.StringOutput              `pulumi:"availabilityZone"`
	BackupAvailable     pulumi.BoolOutput                `pulumi:"backupAvailable"`
	BackupStrategy      ClusterBackupStrategyPtrOutput   `pulumi:"backupStrategy"`
	BandwidthResourceId pulumi.StringOutput              `pulumi:"bandwidthResourceId"`
	ChargingMode        pulumi.StringOutput              `pulumi:"chargingMode"`
	ClientNodeConfig    ClusterClientNodeConfigPtrOutput `pulumi:"clientNodeConfig"`
	ColdNodeConfig      ClusterColdNodeConfigPtrOutput   `pulumi:"coldNodeConfig"`
	// schema: Deprecated; use createdAt instead
	Created             pulumi.StringOutput    `pulumi:"created"`
	CreatedAt           pulumi.StringOutput    `pulumi:"createdAt"`
	DiskEncrypted       pulumi.BoolOutput      `pulumi:"diskEncrypted"`
	EnableForceNew      pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	Endpoint            pulumi.StringOutput    `pulumi:"endpoint"`
	EngineType          pulumi.StringPtrOutput `pulumi:"engineType"`
	EngineVersion       pulumi.StringOutput    `pulumi:"engineVersion"`
	EnterpriseProjectId pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	// schema: Required
	EssNodeConfig ClusterEssNodeConfigOutput `pulumi:"essNodeConfig"`
	// Deprecated: please use ess_node_config.instance_number instead
	ExpectNodeNum      pulumi.IntOutput                   `pulumi:"expectNodeNum"`
	HttpsEnabled       pulumi.BoolOutput                  `pulumi:"httpsEnabled"`
	IsPeriod           pulumi.BoolOutput                  `pulumi:"isPeriod"`
	KibanaPublicAccess ClusterKibanaPublicAccessPtrOutput `pulumi:"kibanaPublicAccess"`
	MasterNodeConfig   ClusterMasterNodeConfigPtrOutput   `pulumi:"masterNodeConfig"`
	Name               pulumi.StringOutput                `pulumi:"name"`
	// Deprecated: please use essNodeConfig instead
	NodeConfig   ClusterNodeConfigOutput      `pulumi:"nodeConfig"`
	Nodes        ClusterNodeArrayOutput       `pulumi:"nodes"`
	Password     pulumi.StringPtrOutput       `pulumi:"password"`
	Period       pulumi.IntPtrOutput          `pulumi:"period"`
	PeriodUnit   pulumi.StringPtrOutput       `pulumi:"periodUnit"`
	PublicAccess ClusterPublicAccessPtrOutput `pulumi:"publicAccess"`
	Region       pulumi.StringOutput          `pulumi:"region"`
	// schema: Required
	SecurityGroupId pulumi.StringOutput  `pulumi:"securityGroupId"`
	SecurityMode    pulumi.BoolPtrOutput `pulumi:"securityMode"`
	Status          pulumi.StringOutput  `pulumi:"status"`
	// schema: Required
	SubnetId  pulumi.StringOutput    `pulumi:"subnetId"`
	Tags      pulumi.StringMapOutput `pulumi:"tags"`
	UpdatedAt pulumi.StringOutput    `pulumi:"updatedAt"`
	// schema: Required
	VpcId           pulumi.StringOutput           `pulumi:"vpcId"`
	VpcepEndpoint   ClusterVpcepEndpointPtrOutput `pulumi:"vpcepEndpoint"`
	VpcepEndpointId pulumi.StringOutput           `pulumi:"vpcepEndpointId"`
	VpcepIp         pulumi.StringOutput           `pulumi:"vpcepIp"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'EngineVersion'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("cloudru:Css/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("cloudru:Css/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	AutoRenew *string `pulumi:"autoRenew"`
	// schema: Required
	AvailabilityZone    *string                  `pulumi:"availabilityZone"`
	BackupAvailable     *bool                    `pulumi:"backupAvailable"`
	BackupStrategy      *ClusterBackupStrategy   `pulumi:"backupStrategy"`
	BandwidthResourceId *string                  `pulumi:"bandwidthResourceId"`
	ChargingMode        *string                  `pulumi:"chargingMode"`
	ClientNodeConfig    *ClusterClientNodeConfig `pulumi:"clientNodeConfig"`
	ColdNodeConfig      *ClusterColdNodeConfig   `pulumi:"coldNodeConfig"`
	// schema: Deprecated; use createdAt instead
	Created             *string `pulumi:"created"`
	CreatedAt           *string `pulumi:"createdAt"`
	DiskEncrypted       *bool   `pulumi:"diskEncrypted"`
	EnableForceNew      *string `pulumi:"enableForceNew"`
	Endpoint            *string `pulumi:"endpoint"`
	EngineType          *string `pulumi:"engineType"`
	EngineVersion       *string `pulumi:"engineVersion"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// schema: Required
	EssNodeConfig *ClusterEssNodeConfig `pulumi:"essNodeConfig"`
	// Deprecated: please use ess_node_config.instance_number instead
	ExpectNodeNum      *int                       `pulumi:"expectNodeNum"`
	HttpsEnabled       *bool                      `pulumi:"httpsEnabled"`
	IsPeriod           *bool                      `pulumi:"isPeriod"`
	KibanaPublicAccess *ClusterKibanaPublicAccess `pulumi:"kibanaPublicAccess"`
	MasterNodeConfig   *ClusterMasterNodeConfig   `pulumi:"masterNodeConfig"`
	Name               *string                    `pulumi:"name"`
	// Deprecated: please use essNodeConfig instead
	NodeConfig   *ClusterNodeConfig   `pulumi:"nodeConfig"`
	Nodes        []ClusterNode        `pulumi:"nodes"`
	Password     *string              `pulumi:"password"`
	Period       *int                 `pulumi:"period"`
	PeriodUnit   *string              `pulumi:"periodUnit"`
	PublicAccess *ClusterPublicAccess `pulumi:"publicAccess"`
	Region       *string              `pulumi:"region"`
	// schema: Required
	SecurityGroupId *string `pulumi:"securityGroupId"`
	SecurityMode    *bool   `pulumi:"securityMode"`
	Status          *string `pulumi:"status"`
	// schema: Required
	SubnetId  *string           `pulumi:"subnetId"`
	Tags      map[string]string `pulumi:"tags"`
	UpdatedAt *string           `pulumi:"updatedAt"`
	// schema: Required
	VpcId           *string               `pulumi:"vpcId"`
	VpcepEndpoint   *ClusterVpcepEndpoint `pulumi:"vpcepEndpoint"`
	VpcepEndpointId *string               `pulumi:"vpcepEndpointId"`
	VpcepIp         *string               `pulumi:"vpcepIp"`
}

type ClusterState struct {
	AutoRenew pulumi.StringPtrInput
	// schema: Required
	AvailabilityZone    pulumi.StringPtrInput
	BackupAvailable     pulumi.BoolPtrInput
	BackupStrategy      ClusterBackupStrategyPtrInput
	BandwidthResourceId pulumi.StringPtrInput
	ChargingMode        pulumi.StringPtrInput
	ClientNodeConfig    ClusterClientNodeConfigPtrInput
	ColdNodeConfig      ClusterColdNodeConfigPtrInput
	// schema: Deprecated; use createdAt instead
	Created             pulumi.StringPtrInput
	CreatedAt           pulumi.StringPtrInput
	DiskEncrypted       pulumi.BoolPtrInput
	EnableForceNew      pulumi.StringPtrInput
	Endpoint            pulumi.StringPtrInput
	EngineType          pulumi.StringPtrInput
	EngineVersion       pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Required
	EssNodeConfig ClusterEssNodeConfigPtrInput
	// Deprecated: please use ess_node_config.instance_number instead
	ExpectNodeNum      pulumi.IntPtrInput
	HttpsEnabled       pulumi.BoolPtrInput
	IsPeriod           pulumi.BoolPtrInput
	KibanaPublicAccess ClusterKibanaPublicAccessPtrInput
	MasterNodeConfig   ClusterMasterNodeConfigPtrInput
	Name               pulumi.StringPtrInput
	// Deprecated: please use essNodeConfig instead
	NodeConfig   ClusterNodeConfigPtrInput
	Nodes        ClusterNodeArrayInput
	Password     pulumi.StringPtrInput
	Period       pulumi.IntPtrInput
	PeriodUnit   pulumi.StringPtrInput
	PublicAccess ClusterPublicAccessPtrInput
	Region       pulumi.StringPtrInput
	// schema: Required
	SecurityGroupId pulumi.StringPtrInput
	SecurityMode    pulumi.BoolPtrInput
	Status          pulumi.StringPtrInput
	// schema: Required
	SubnetId  pulumi.StringPtrInput
	Tags      pulumi.StringMapInput
	UpdatedAt pulumi.StringPtrInput
	// schema: Required
	VpcId           pulumi.StringPtrInput
	VpcepEndpoint   ClusterVpcepEndpointPtrInput
	VpcepEndpointId pulumi.StringPtrInput
	VpcepIp         pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	AutoRenew *string `pulumi:"autoRenew"`
	// schema: Required
	AvailabilityZone    *string                  `pulumi:"availabilityZone"`
	BackupStrategy      *ClusterBackupStrategy   `pulumi:"backupStrategy"`
	ChargingMode        *string                  `pulumi:"chargingMode"`
	ClientNodeConfig    *ClusterClientNodeConfig `pulumi:"clientNodeConfig"`
	ColdNodeConfig      *ClusterColdNodeConfig   `pulumi:"coldNodeConfig"`
	EnableForceNew      *string                  `pulumi:"enableForceNew"`
	EngineType          *string                  `pulumi:"engineType"`
	EngineVersion       string                   `pulumi:"engineVersion"`
	EnterpriseProjectId *string                  `pulumi:"enterpriseProjectId"`
	// schema: Required
	EssNodeConfig *ClusterEssNodeConfig `pulumi:"essNodeConfig"`
	// Deprecated: please use ess_node_config.instance_number instead
	ExpectNodeNum      *int                       `pulumi:"expectNodeNum"`
	HttpsEnabled       *bool                      `pulumi:"httpsEnabled"`
	KibanaPublicAccess *ClusterKibanaPublicAccess `pulumi:"kibanaPublicAccess"`
	MasterNodeConfig   *ClusterMasterNodeConfig   `pulumi:"masterNodeConfig"`
	Name               *string                    `pulumi:"name"`
	// Deprecated: please use essNodeConfig instead
	NodeConfig   *ClusterNodeConfig   `pulumi:"nodeConfig"`
	Password     *string              `pulumi:"password"`
	Period       *int                 `pulumi:"period"`
	PeriodUnit   *string              `pulumi:"periodUnit"`
	PublicAccess *ClusterPublicAccess `pulumi:"publicAccess"`
	Region       *string              `pulumi:"region"`
	// schema: Required
	SecurityGroupId *string `pulumi:"securityGroupId"`
	SecurityMode    *bool   `pulumi:"securityMode"`
	// schema: Required
	SubnetId *string           `pulumi:"subnetId"`
	Tags     map[string]string `pulumi:"tags"`
	// schema: Required
	VpcId         *string               `pulumi:"vpcId"`
	VpcepEndpoint *ClusterVpcepEndpoint `pulumi:"vpcepEndpoint"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	AutoRenew pulumi.StringPtrInput
	// schema: Required
	AvailabilityZone    pulumi.StringPtrInput
	BackupStrategy      ClusterBackupStrategyPtrInput
	ChargingMode        pulumi.StringPtrInput
	ClientNodeConfig    ClusterClientNodeConfigPtrInput
	ColdNodeConfig      ClusterColdNodeConfigPtrInput
	EnableForceNew      pulumi.StringPtrInput
	EngineType          pulumi.StringPtrInput
	EngineVersion       pulumi.StringInput
	EnterpriseProjectId pulumi.StringPtrInput
	// schema: Required
	EssNodeConfig ClusterEssNodeConfigPtrInput
	// Deprecated: please use ess_node_config.instance_number instead
	ExpectNodeNum      pulumi.IntPtrInput
	HttpsEnabled       pulumi.BoolPtrInput
	KibanaPublicAccess ClusterKibanaPublicAccessPtrInput
	MasterNodeConfig   ClusterMasterNodeConfigPtrInput
	Name               pulumi.StringPtrInput
	// Deprecated: please use essNodeConfig instead
	NodeConfig   ClusterNodeConfigPtrInput
	Password     pulumi.StringPtrInput
	Period       pulumi.IntPtrInput
	PeriodUnit   pulumi.StringPtrInput
	PublicAccess ClusterPublicAccessPtrInput
	Region       pulumi.StringPtrInput
	// schema: Required
	SecurityGroupId pulumi.StringPtrInput
	SecurityMode    pulumi.BoolPtrInput
	// schema: Required
	SubnetId pulumi.StringPtrInput
	Tags     pulumi.StringMapInput
	// schema: Required
	VpcId         pulumi.StringPtrInput
	VpcepEndpoint ClusterVpcepEndpointPtrInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

func (o ClusterOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// schema: Required
func (o ClusterOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o ClusterOutput) BackupAvailable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.BackupAvailable }).(pulumi.BoolOutput)
}

func (o ClusterOutput) BackupStrategy() ClusterBackupStrategyPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterBackupStrategyPtrOutput { return v.BackupStrategy }).(ClusterBackupStrategyPtrOutput)
}

func (o ClusterOutput) BandwidthResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.BandwidthResourceId }).(pulumi.StringOutput)
}

func (o ClusterOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o ClusterOutput) ClientNodeConfig() ClusterClientNodeConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterClientNodeConfigPtrOutput { return v.ClientNodeConfig }).(ClusterClientNodeConfigPtrOutput)
}

func (o ClusterOutput) ColdNodeConfig() ClusterColdNodeConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterColdNodeConfigPtrOutput { return v.ColdNodeConfig }).(ClusterColdNodeConfigPtrOutput)
}

// schema: Deprecated; use createdAt instead
func (o ClusterOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

func (o ClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ClusterOutput) DiskEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.DiskEncrypted }).(pulumi.BoolOutput)
}

func (o ClusterOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o ClusterOutput) EngineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.EngineType }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

func (o ClusterOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// schema: Required
func (o ClusterOutput) EssNodeConfig() ClusterEssNodeConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterEssNodeConfigOutput { return v.EssNodeConfig }).(ClusterEssNodeConfigOutput)
}

// Deprecated: please use ess_node_config.instance_number instead
func (o ClusterOutput) ExpectNodeNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ExpectNodeNum }).(pulumi.IntOutput)
}

func (o ClusterOutput) HttpsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.HttpsEnabled }).(pulumi.BoolOutput)
}

func (o ClusterOutput) IsPeriod() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.IsPeriod }).(pulumi.BoolOutput)
}

func (o ClusterOutput) KibanaPublicAccess() ClusterKibanaPublicAccessPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterKibanaPublicAccessPtrOutput { return v.KibanaPublicAccess }).(ClusterKibanaPublicAccessPtrOutput)
}

func (o ClusterOutput) MasterNodeConfig() ClusterMasterNodeConfigPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterMasterNodeConfigPtrOutput { return v.MasterNodeConfig }).(ClusterMasterNodeConfigPtrOutput)
}

func (o ClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Deprecated: please use essNodeConfig instead
func (o ClusterOutput) NodeConfig() ClusterNodeConfigOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeConfigOutput { return v.NodeConfig }).(ClusterNodeConfigOutput)
}

func (o ClusterOutput) Nodes() ClusterNodeArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterNodeArrayOutput { return v.Nodes }).(ClusterNodeArrayOutput)
}

func (o ClusterOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o ClusterOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

func (o ClusterOutput) PublicAccess() ClusterPublicAccessPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterPublicAccessPtrOutput { return v.PublicAccess }).(ClusterPublicAccessPtrOutput)
}

func (o ClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// schema: Required
func (o ClusterOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

func (o ClusterOutput) SecurityMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.SecurityMode }).(pulumi.BoolPtrOutput)
}

func (o ClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// schema: Required
func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o ClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ClusterOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// schema: Required
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

func (o ClusterOutput) VpcepEndpoint() ClusterVpcepEndpointPtrOutput {
	return o.ApplyT(func(v *Cluster) ClusterVpcepEndpointPtrOutput { return v.VpcepEndpoint }).(ClusterVpcepEndpointPtrOutput)
}

func (o ClusterOutput) VpcepEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcepEndpointId }).(pulumi.StringOutput)
}

func (o ClusterOutput) VpcepIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcepIp }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}

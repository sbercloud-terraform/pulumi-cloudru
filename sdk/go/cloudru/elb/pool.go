// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Pool struct {
	pulumi.CustomResourceState

	// Deprecated: this field is deprecated
	AdminStateUp     pulumi.BoolPtrOutput       `pulumi:"adminStateUp"`
	Description      pulumi.StringPtrOutput     `pulumi:"description"`
	LbMethod         pulumi.StringOutput        `pulumi:"lbMethod"`
	ListenerId       pulumi.StringOutput        `pulumi:"listenerId"`
	LoadbalancerId   pulumi.StringOutput        `pulumi:"loadbalancerId"`
	MonitorId        pulumi.StringOutput        `pulumi:"monitorId"`
	Name             pulumi.StringOutput        `pulumi:"name"`
	Persistences     PoolPersistenceArrayOutput `pulumi:"persistences"`
	ProtectionReason pulumi.StringPtrOutput     `pulumi:"protectionReason"`
	ProtectionStatus pulumi.StringOutput        `pulumi:"protectionStatus"`
	Protocol         pulumi.StringOutput        `pulumi:"protocol"`
	Region           pulumi.StringOutput        `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewPool registers a new resource with the given unique name, arguments, and options.
func NewPool(ctx *pulumi.Context,
	name string, args *PoolArgs, opts ...pulumi.ResourceOption) (*Pool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LbMethod == nil {
		return nil, errors.New("invalid value for required argument 'LbMethod'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pool
	err := ctx.RegisterResource("sbercloud:Elb/pool:Pool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPool gets an existing Pool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PoolState, opts ...pulumi.ResourceOption) (*Pool, error) {
	var resource Pool
	err := ctx.ReadResource("sbercloud:Elb/pool:Pool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pool resources.
type poolState struct {
	// Deprecated: this field is deprecated
	AdminStateUp     *bool             `pulumi:"adminStateUp"`
	Description      *string           `pulumi:"description"`
	LbMethod         *string           `pulumi:"lbMethod"`
	ListenerId       *string           `pulumi:"listenerId"`
	LoadbalancerId   *string           `pulumi:"loadbalancerId"`
	MonitorId        *string           `pulumi:"monitorId"`
	Name             *string           `pulumi:"name"`
	Persistences     []PoolPersistence `pulumi:"persistences"`
	ProtectionReason *string           `pulumi:"protectionReason"`
	ProtectionStatus *string           `pulumi:"protectionStatus"`
	Protocol         *string           `pulumi:"protocol"`
	Region           *string           `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
}

type PoolState struct {
	// Deprecated: this field is deprecated
	AdminStateUp     pulumi.BoolPtrInput
	Description      pulumi.StringPtrInput
	LbMethod         pulumi.StringPtrInput
	ListenerId       pulumi.StringPtrInput
	LoadbalancerId   pulumi.StringPtrInput
	MonitorId        pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Persistences     PoolPersistenceArrayInput
	ProtectionReason pulumi.StringPtrInput
	ProtectionStatus pulumi.StringPtrInput
	Protocol         pulumi.StringPtrInput
	Region           pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
}

func (PoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*poolState)(nil)).Elem()
}

type poolArgs struct {
	// Deprecated: this field is deprecated
	AdminStateUp     *bool             `pulumi:"adminStateUp"`
	Description      *string           `pulumi:"description"`
	LbMethod         string            `pulumi:"lbMethod"`
	ListenerId       *string           `pulumi:"listenerId"`
	LoadbalancerId   *string           `pulumi:"loadbalancerId"`
	Name             *string           `pulumi:"name"`
	Persistences     []PoolPersistence `pulumi:"persistences"`
	ProtectionReason *string           `pulumi:"protectionReason"`
	ProtectionStatus *string           `pulumi:"protectionStatus"`
	Protocol         string            `pulumi:"protocol"`
	Region           *string           `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a Pool resource.
type PoolArgs struct {
	// Deprecated: this field is deprecated
	AdminStateUp     pulumi.BoolPtrInput
	Description      pulumi.StringPtrInput
	LbMethod         pulumi.StringInput
	ListenerId       pulumi.StringPtrInput
	LoadbalancerId   pulumi.StringPtrInput
	Name             pulumi.StringPtrInput
	Persistences     PoolPersistenceArrayInput
	ProtectionReason pulumi.StringPtrInput
	ProtectionStatus pulumi.StringPtrInput
	Protocol         pulumi.StringInput
	Region           pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
}

func (PoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*poolArgs)(nil)).Elem()
}

type PoolInput interface {
	pulumi.Input

	ToPoolOutput() PoolOutput
	ToPoolOutputWithContext(ctx context.Context) PoolOutput
}

func (*Pool) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (i *Pool) ToPoolOutput() PoolOutput {
	return i.ToPoolOutputWithContext(context.Background())
}

func (i *Pool) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolOutput)
}

// PoolArrayInput is an input type that accepts PoolArray and PoolArrayOutput values.
// You can construct a concrete instance of `PoolArrayInput` via:
//
//	PoolArray{ PoolArgs{...} }
type PoolArrayInput interface {
	pulumi.Input

	ToPoolArrayOutput() PoolArrayOutput
	ToPoolArrayOutputWithContext(context.Context) PoolArrayOutput
}

type PoolArray []PoolInput

func (PoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (i PoolArray) ToPoolArrayOutput() PoolArrayOutput {
	return i.ToPoolArrayOutputWithContext(context.Background())
}

func (i PoolArray) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolArrayOutput)
}

// PoolMapInput is an input type that accepts PoolMap and PoolMapOutput values.
// You can construct a concrete instance of `PoolMapInput` via:
//
//	PoolMap{ "key": PoolArgs{...} }
type PoolMapInput interface {
	pulumi.Input

	ToPoolMapOutput() PoolMapOutput
	ToPoolMapOutputWithContext(context.Context) PoolMapOutput
}

type PoolMap map[string]PoolInput

func (PoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (i PoolMap) ToPoolMapOutput() PoolMapOutput {
	return i.ToPoolMapOutputWithContext(context.Background())
}

func (i PoolMap) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoolMapOutput)
}

type PoolOutput struct{ *pulumi.OutputState }

func (PoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pool)(nil)).Elem()
}

func (o PoolOutput) ToPoolOutput() PoolOutput {
	return o
}

func (o PoolOutput) ToPoolOutputWithContext(ctx context.Context) PoolOutput {
	return o
}

// Deprecated: this field is deprecated
func (o PoolOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o PoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o PoolOutput) LbMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.LbMethod }).(pulumi.StringOutput)
}

func (o PoolOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

func (o PoolOutput) LoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.LoadbalancerId }).(pulumi.StringOutput)
}

func (o PoolOutput) MonitorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.MonitorId }).(pulumi.StringOutput)
}

func (o PoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o PoolOutput) Persistences() PoolPersistenceArrayOutput {
	return o.ApplyT(func(v *Pool) PoolPersistenceArrayOutput { return v.Persistences }).(PoolPersistenceArrayOutput)
}

func (o PoolOutput) ProtectionReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringPtrOutput { return v.ProtectionReason }).(pulumi.StringPtrOutput)
}

func (o PoolOutput) ProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.ProtectionStatus }).(pulumi.StringOutput)
}

func (o PoolOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o PoolOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o PoolOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Pool) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type PoolArrayOutput struct{ *pulumi.OutputState }

func (PoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pool)(nil)).Elem()
}

func (o PoolArrayOutput) ToPoolArrayOutput() PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) ToPoolArrayOutputWithContext(ctx context.Context) PoolArrayOutput {
	return o
}

func (o PoolArrayOutput) Index(i pulumi.IntInput) PoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].([]*Pool)[vs[1].(int)]
	}).(PoolOutput)
}

type PoolMapOutput struct{ *pulumi.OutputState }

func (PoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pool)(nil)).Elem()
}

func (o PoolMapOutput) ToPoolMapOutput() PoolMapOutput {
	return o
}

func (o PoolMapOutput) ToPoolMapOutputWithContext(ctx context.Context) PoolMapOutput {
	return o
}

func (o PoolMapOutput) MapIndex(k pulumi.StringInput) PoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pool {
		return vs[0].(map[string]*Pool)[vs[1].(string)]
	}).(PoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoolInput)(nil)).Elem(), &Pool{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolArrayInput)(nil)).Elem(), PoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoolMapInput)(nil)).Elem(), PoolMap{})
	pulumi.RegisterOutputType(PoolOutput{})
	pulumi.RegisterOutputType(PoolArrayOutput{})
	pulumi.RegisterOutputType(PoolMapOutput{})
}

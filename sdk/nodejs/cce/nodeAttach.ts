// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Add a node from an existing ecs server to a CCE cluster.
 *
 * ## Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = new sbercloud.cce.NodeAttach("test", {
 *     clusterId: clusterId,
 *     serverId: serverId,
 *     keyPair: keypairName,
 *     os: "CentOS 7.6",
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 */
export class NodeAttach extends pulumi.CustomResource {
    /**
     * Get an existing NodeAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeAttachState, opts?: pulumi.CustomResourceOptions): NodeAttach {
        return new NodeAttach(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cce/nodeAttach:NodeAttach';

    /**
     * Returns true if the given object is an instance of NodeAttach.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeAttach {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeAttach.__pulumiType;
    }

    /**
     * The name of the available partition (AZ).
     */
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    public /*out*/ readonly chargingMode!: pulumi.Output<string>;
    /**
     * Specifies the ID of the cluster. Changing this parameter will create a new
     * resource.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The data disks related configuration.
     */
    public /*out*/ readonly dataVolumes!: pulumi.Output<outputs.Cce.NodeAttachDataVolume[]>;
    /**
     * Specifies the available disk space of a single docker container on the
     * node in device mapper mode. Changing this parameter will create a new resource.
     */
    public readonly dockerBaseSize!: pulumi.Output<number | undefined>;
    /**
     * The Ecs group ID.
     */
    public /*out*/ readonly ecsGroupId!: pulumi.Output<string>;
    public /*out*/ readonly enterpriseProjectId!: pulumi.Output<string>;
    public /*out*/ readonly extensionNics!: pulumi.Output<outputs.Cce.NodeAttachExtensionNic[]>;
    /**
     * The flavor ID of the CCE node.
     */
    public /*out*/ readonly flavorId!: pulumi.Output<string>;
    public readonly hostnameConfig!: pulumi.Output<outputs.Cce.NodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    public readonly imageId!: pulumi.Output<string | undefined>;
    public readonly initializedConditions!: pulumi.Output<string[]>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will reset the node.
     */
    public readonly keyPair!: pulumi.Output<string | undefined>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     * Changing this parameter will create a new resource.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the docker data disk configurations. The following is an
     * example:
     */
    public readonly lvmConfig!: pulumi.Output<string | undefined>;
    /**
     * Specifies the the maximum number of instances a node is allowed to create.
     * Changing this parameter will create a new resource.
     */
    public readonly maxPods!: pulumi.Output<number | undefined>;
    /**
     * Specifies the Node Name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    public readonly nicMultiQueue!: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    public readonly nicThreshold!: pulumi.Output<string | undefined>;
    /**
     * Specifies the operating System of the node. Changing this parameter will reset the node.
     * + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
     */
    public readonly os!: pulumi.Output<string>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will reset the node.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Specifies the script required after installation. The input value can be
     * a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    public readonly postinstall!: pulumi.Output<string | undefined>;
    /**
     * Specifies the script required before installation. The input value can be
     * a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    public readonly preinstall!: pulumi.Output<string | undefined>;
    /**
     * Private IP of the CCE node.
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * Public IP of the CCE node.
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * The region in which to create the CCE node attach resource. If omitted, the
     * provider-level region will be used. Changing this creates a new CCE node attach resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The system disk related configuration.
     */
    public /*out*/ readonly rootVolumes!: pulumi.Output<outputs.Cce.NodeAttachRootVolume[]>;
    /**
     * The runtime of the CCE node.
     */
    public readonly runtime!: pulumi.Output<string>;
    /**
     * Specifies the ecs server ID. Changing this parameter will create a new
     * resource.
     */
    public readonly serverId!: pulumi.Output<string>;
    /**
     * Node status information.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly storage!: pulumi.Output<outputs.Cce.NodeAttachStorage | undefined>;
    /**
     * The ID of the subnet to which the NIC belongs.
     */
    public /*out*/ readonly subnetId!: pulumi.Output<string>;
    public readonly systemDiskKmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * Changing this parameter will create a new resource. Each taint contains the following parameters:
     */
    public readonly taints!: pulumi.Output<outputs.Cce.NodeAttachTaint[] | undefined>;

    /**
     * Create a NodeAttach resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeAttachArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeAttachArgs | NodeAttachState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeAttachState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["dockerBaseSize"] = state ? state.dockerBaseSize : undefined;
            resourceInputs["ecsGroupId"] = state ? state.ecsGroupId : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["extensionNics"] = state ? state.extensionNics : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["hostnameConfig"] = state ? state.hostnameConfig : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["initializedConditions"] = state ? state.initializedConditions : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["lvmConfig"] = state ? state.lvmConfig : undefined;
            resourceInputs["maxPods"] = state ? state.maxPods : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nicMultiQueue"] = state ? state.nicMultiQueue : undefined;
            resourceInputs["nicThreshold"] = state ? state.nicThreshold : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["postinstall"] = state ? state.postinstall : undefined;
            resourceInputs["preinstall"] = state ? state.preinstall : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootVolumes"] = state ? state.rootVolumes : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["systemDiskKmsKeyId"] = state ? state.systemDiskKmsKeyId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
        } else {
            const args = argsOrState as NodeAttachArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.os === undefined) && !opts.urn) {
                throw new Error("Missing required property 'os'");
            }
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dockerBaseSize"] = args ? args.dockerBaseSize : undefined;
            resourceInputs["hostnameConfig"] = args ? args.hostnameConfig : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["initializedConditions"] = args ? args.initializedConditions : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["lvmConfig"] = args ? args.lvmConfig : undefined;
            resourceInputs["maxPods"] = args ? args.maxPods : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nicMultiQueue"] = args ? args.nicMultiQueue : undefined;
            resourceInputs["nicThreshold"] = args ? args.nicThreshold : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["postinstall"] = args ? args.postinstall : undefined;
            resourceInputs["preinstall"] = args ? args.preinstall : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["systemDiskKmsKeyId"] = args ? args.systemDiskKmsKeyId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["chargingMode"] = undefined /*out*/;
            resourceInputs["dataVolumes"] = undefined /*out*/;
            resourceInputs["ecsGroupId"] = undefined /*out*/;
            resourceInputs["enterpriseProjectId"] = undefined /*out*/;
            resourceInputs["extensionNics"] = undefined /*out*/;
            resourceInputs["flavorId"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["rootVolumes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NodeAttach.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodeAttach resources.
 */
export interface NodeAttachState {
    /**
     * The name of the available partition (AZ).
     */
    availabilityZone?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the ID of the cluster. Changing this parameter will create a new
     * resource.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The data disks related configuration.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachDataVolume>[]>;
    /**
     * Specifies the available disk space of a single docker container on the
     * node in device mapper mode. Changing this parameter will create a new resource.
     */
    dockerBaseSize?: pulumi.Input<number>;
    /**
     * The Ecs group ID.
     */
    ecsGroupId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    extensionNics?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachExtensionNic>[]>;
    /**
     * The flavor ID of the CCE node.
     */
    flavorId?: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.Cce.NodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    imageId?: pulumi.Input<string>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will reset the node.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     * Changing this parameter will create a new resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the docker data disk configurations. The following is an
     * example:
     */
    lvmConfig?: pulumi.Input<string>;
    /**
     * Specifies the the maximum number of instances a node is allowed to create.
     * Changing this parameter will create a new resource.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * Specifies the Node Name.
     */
    name?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicMultiQueue?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicThreshold?: pulumi.Input<string>;
    /**
     * Specifies the operating System of the node. Changing this parameter will reset the node.
     * + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
     */
    os?: pulumi.Input<string>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will reset the node.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the script required after installation. The input value can be
     * a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    postinstall?: pulumi.Input<string>;
    /**
     * Specifies the script required before installation. The input value can be
     * a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    preinstall?: pulumi.Input<string>;
    /**
     * Private IP of the CCE node.
     */
    privateIp?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * Public IP of the CCE node.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * The region in which to create the CCE node attach resource. If omitted, the
     * provider-level region will be used. Changing this creates a new CCE node attach resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The system disk related configuration.
     */
    rootVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachRootVolume>[]>;
    /**
     * The runtime of the CCE node.
     */
    runtime?: pulumi.Input<string>;
    /**
     * Specifies the ecs server ID. Changing this parameter will create a new
     * resource.
     */
    serverId?: pulumi.Input<string>;
    /**
     * Node status information.
     */
    status?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.Cce.NodeAttachStorage>;
    /**
     * The ID of the subnet to which the NIC belongs.
     */
    subnetId?: pulumi.Input<string>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * Changing this parameter will create a new resource. Each taint contains the following parameters:
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachTaint>[]>;
}

/**
 * The set of arguments for constructing a NodeAttach resource.
 */
export interface NodeAttachArgs {
    /**
     * Specifies the ID of the cluster. Changing this parameter will create a new
     * resource.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies the available disk space of a single docker container on the
     * node in device mapper mode. Changing this parameter will create a new resource.
     */
    dockerBaseSize?: pulumi.Input<number>;
    hostnameConfig?: pulumi.Input<inputs.Cce.NodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    imageId?: pulumi.Input<string>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will reset the node.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     * Changing this parameter will create a new resource.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the docker data disk configurations. The following is an
     * example:
     */
    lvmConfig?: pulumi.Input<string>;
    /**
     * Specifies the the maximum number of instances a node is allowed to create.
     * Changing this parameter will create a new resource.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * Specifies the Node Name.
     */
    name?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicMultiQueue?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicThreshold?: pulumi.Input<string>;
    /**
     * Specifies the operating System of the node. Changing this parameter will reset the node.
     * + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
     */
    os: pulumi.Input<string>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will reset the node.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the script required after installation. The input value can be
     * a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    postinstall?: pulumi.Input<string>;
    /**
     * Specifies the script required before installation. The input value can be
     * a Base64 encoded string or not. Changing this parameter will create a new resource.
     */
    preinstall?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * The region in which to create the CCE node attach resource. If omitted, the
     * provider-level region will be used. Changing this creates a new CCE node attach resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The runtime of the CCE node.
     */
    runtime?: pulumi.Input<string>;
    /**
     * Specifies the ecs server ID. Changing this parameter will create a new
     * resource.
     */
    serverId: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.Cce.NodeAttachStorage>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * Changing this parameter will create a new resource. Each taint contains the following parameters:
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachTaint>[]>;
}

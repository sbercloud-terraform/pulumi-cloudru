# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetSfsTurboPermRulesResult',
    'AwaitableGetSfsTurboPermRulesResult',
    'get_sfs_turbo_perm_rules',
    'get_sfs_turbo_perm_rules_output',
]

@pulumi.output_type
class GetSfsTurboPermRulesResult:
    """
    A collection of values returned by getSfsTurboPermRules.
    """
    def __init__(__self__, id=None, region=None, rules=None, share_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if rules and not isinstance(rules, list):
            raise TypeError("Expected argument 'rules' to be a list")
        pulumi.set(__self__, "rules", rules)
        if share_id and not isinstance(share_id, str):
            raise TypeError("Expected argument 'share_id' to be a str")
        pulumi.set(__self__, "share_id", share_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetSfsTurboPermRulesRuleResult']:
        return pulumi.get(self, "rules")

    @_builtins.property
    @pulumi.getter(name="shareId")
    def share_id(self) -> _builtins.str:
        return pulumi.get(self, "share_id")


class AwaitableGetSfsTurboPermRulesResult(GetSfsTurboPermRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSfsTurboPermRulesResult(
            id=self.id,
            region=self.region,
            rules=self.rules,
            share_id=self.share_id)


def get_sfs_turbo_perm_rules(region: Optional[_builtins.str] = None,
                             share_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSfsTurboPermRulesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['shareId'] = share_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getSfsTurboPermRules:getSfsTurboPermRules', __args__, opts=opts, typ=GetSfsTurboPermRulesResult).value

    return AwaitableGetSfsTurboPermRulesResult(
        id=pulumi.get(__ret__, 'id'),
        region=pulumi.get(__ret__, 'region'),
        rules=pulumi.get(__ret__, 'rules'),
        share_id=pulumi.get(__ret__, 'share_id'))
def get_sfs_turbo_perm_rules_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    share_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSfsTurboPermRulesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['region'] = region
    __args__['shareId'] = share_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getSfsTurboPermRules:getSfsTurboPermRules', __args__, opts=opts, typ=GetSfsTurboPermRulesResult)
    return __ret__.apply(lambda __response__: GetSfsTurboPermRulesResult(
        id=pulumi.get(__response__, 'id'),
        region=pulumi.get(__response__, 'region'),
        rules=pulumi.get(__response__, 'rules'),
        share_id=pulumi.get(__response__, 'share_id')))

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type CaptureTask struct {
	pulumi.CustomResourceState

	// The creation time of the capture task.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The destination configuration.
	Destination CaptureTaskDestinationOutput `pulumi:"destination"`
	// The capture task duration.
	Duration       pulumi.IntOutput       `pulumi:"duration"`
	EnableForceNew pulumi.StringPtrOutput `pulumi:"enableForceNew"`
	// The ID of the firewall instance.
	FwInstanceId pulumi.StringOutput `pulumi:"fwInstanceId"`
	// The maximum number of packets captured.
	MaxPackets pulumi.IntOutput `pulumi:"maxPackets"`
	// The capture task name.
	Name   pulumi.StringOutput `pulumi:"name"`
	Region pulumi.StringOutput `pulumi:"region"`
	// The service configuration.
	Service CaptureTaskServiceOutput `pulumi:"service"`
	// The source configuration.
	Source CaptureTaskSourceOutput `pulumi:"source"`
	// The status of the capture task.
	Status pulumi.IntOutput `pulumi:"status"`
	// Whether to stop the capture.
	StopCapture pulumi.BoolPtrOutput `pulumi:"stopCapture"`
	// The ID of the capture task.
	TaskId pulumi.StringOutput `pulumi:"taskId"`
	// The update time of the capture task.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewCaptureTask registers a new resource with the given unique name, arguments, and options.
func NewCaptureTask(ctx *pulumi.Context,
	name string, args *CaptureTaskArgs, opts ...pulumi.ResourceOption) (*CaptureTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.Duration == nil {
		return nil, errors.New("invalid value for required argument 'Duration'")
	}
	if args.FwInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'FwInstanceId'")
	}
	if args.MaxPackets == nil {
		return nil, errors.New("invalid value for required argument 'MaxPackets'")
	}
	if args.Service == nil {
		return nil, errors.New("invalid value for required argument 'Service'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CaptureTask
	err := ctx.RegisterResource("cloudru:Cfw/captureTask:CaptureTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCaptureTask gets an existing CaptureTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCaptureTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CaptureTaskState, opts ...pulumi.ResourceOption) (*CaptureTask, error) {
	var resource CaptureTask
	err := ctx.ReadResource("cloudru:Cfw/captureTask:CaptureTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CaptureTask resources.
type captureTaskState struct {
	// The creation time of the capture task.
	CreatedAt *string `pulumi:"createdAt"`
	// The destination configuration.
	Destination *CaptureTaskDestination `pulumi:"destination"`
	// The capture task duration.
	Duration       *int    `pulumi:"duration"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// The ID of the firewall instance.
	FwInstanceId *string `pulumi:"fwInstanceId"`
	// The maximum number of packets captured.
	MaxPackets *int `pulumi:"maxPackets"`
	// The capture task name.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// The service configuration.
	Service *CaptureTaskService `pulumi:"service"`
	// The source configuration.
	Source *CaptureTaskSource `pulumi:"source"`
	// The status of the capture task.
	Status *int `pulumi:"status"`
	// Whether to stop the capture.
	StopCapture *bool `pulumi:"stopCapture"`
	// The ID of the capture task.
	TaskId *string `pulumi:"taskId"`
	// The update time of the capture task.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type CaptureTaskState struct {
	// The creation time of the capture task.
	CreatedAt pulumi.StringPtrInput
	// The destination configuration.
	Destination CaptureTaskDestinationPtrInput
	// The capture task duration.
	Duration       pulumi.IntPtrInput
	EnableForceNew pulumi.StringPtrInput
	// The ID of the firewall instance.
	FwInstanceId pulumi.StringPtrInput
	// The maximum number of packets captured.
	MaxPackets pulumi.IntPtrInput
	// The capture task name.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// The service configuration.
	Service CaptureTaskServicePtrInput
	// The source configuration.
	Source CaptureTaskSourcePtrInput
	// The status of the capture task.
	Status pulumi.IntPtrInput
	// Whether to stop the capture.
	StopCapture pulumi.BoolPtrInput
	// The ID of the capture task.
	TaskId pulumi.StringPtrInput
	// The update time of the capture task.
	UpdatedAt pulumi.StringPtrInput
}

func (CaptureTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*captureTaskState)(nil)).Elem()
}

type captureTaskArgs struct {
	// The destination configuration.
	Destination CaptureTaskDestination `pulumi:"destination"`
	// The capture task duration.
	Duration       int     `pulumi:"duration"`
	EnableForceNew *string `pulumi:"enableForceNew"`
	// The ID of the firewall instance.
	FwInstanceId string `pulumi:"fwInstanceId"`
	// The maximum number of packets captured.
	MaxPackets int `pulumi:"maxPackets"`
	// The capture task name.
	Name   *string `pulumi:"name"`
	Region *string `pulumi:"region"`
	// The service configuration.
	Service CaptureTaskService `pulumi:"service"`
	// The source configuration.
	Source CaptureTaskSource `pulumi:"source"`
	// Whether to stop the capture.
	StopCapture *bool `pulumi:"stopCapture"`
}

// The set of arguments for constructing a CaptureTask resource.
type CaptureTaskArgs struct {
	// The destination configuration.
	Destination CaptureTaskDestinationInput
	// The capture task duration.
	Duration       pulumi.IntInput
	EnableForceNew pulumi.StringPtrInput
	// The ID of the firewall instance.
	FwInstanceId pulumi.StringInput
	// The maximum number of packets captured.
	MaxPackets pulumi.IntInput
	// The capture task name.
	Name   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// The service configuration.
	Service CaptureTaskServiceInput
	// The source configuration.
	Source CaptureTaskSourceInput
	// Whether to stop the capture.
	StopCapture pulumi.BoolPtrInput
}

func (CaptureTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*captureTaskArgs)(nil)).Elem()
}

type CaptureTaskInput interface {
	pulumi.Input

	ToCaptureTaskOutput() CaptureTaskOutput
	ToCaptureTaskOutputWithContext(ctx context.Context) CaptureTaskOutput
}

func (*CaptureTask) ElementType() reflect.Type {
	return reflect.TypeOf((**CaptureTask)(nil)).Elem()
}

func (i *CaptureTask) ToCaptureTaskOutput() CaptureTaskOutput {
	return i.ToCaptureTaskOutputWithContext(context.Background())
}

func (i *CaptureTask) ToCaptureTaskOutputWithContext(ctx context.Context) CaptureTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptureTaskOutput)
}

// CaptureTaskArrayInput is an input type that accepts CaptureTaskArray and CaptureTaskArrayOutput values.
// You can construct a concrete instance of `CaptureTaskArrayInput` via:
//
//	CaptureTaskArray{ CaptureTaskArgs{...} }
type CaptureTaskArrayInput interface {
	pulumi.Input

	ToCaptureTaskArrayOutput() CaptureTaskArrayOutput
	ToCaptureTaskArrayOutputWithContext(context.Context) CaptureTaskArrayOutput
}

type CaptureTaskArray []CaptureTaskInput

func (CaptureTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CaptureTask)(nil)).Elem()
}

func (i CaptureTaskArray) ToCaptureTaskArrayOutput() CaptureTaskArrayOutput {
	return i.ToCaptureTaskArrayOutputWithContext(context.Background())
}

func (i CaptureTaskArray) ToCaptureTaskArrayOutputWithContext(ctx context.Context) CaptureTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptureTaskArrayOutput)
}

// CaptureTaskMapInput is an input type that accepts CaptureTaskMap and CaptureTaskMapOutput values.
// You can construct a concrete instance of `CaptureTaskMapInput` via:
//
//	CaptureTaskMap{ "key": CaptureTaskArgs{...} }
type CaptureTaskMapInput interface {
	pulumi.Input

	ToCaptureTaskMapOutput() CaptureTaskMapOutput
	ToCaptureTaskMapOutputWithContext(context.Context) CaptureTaskMapOutput
}

type CaptureTaskMap map[string]CaptureTaskInput

func (CaptureTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CaptureTask)(nil)).Elem()
}

func (i CaptureTaskMap) ToCaptureTaskMapOutput() CaptureTaskMapOutput {
	return i.ToCaptureTaskMapOutputWithContext(context.Background())
}

func (i CaptureTaskMap) ToCaptureTaskMapOutputWithContext(ctx context.Context) CaptureTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CaptureTaskMapOutput)
}

type CaptureTaskOutput struct{ *pulumi.OutputState }

func (CaptureTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CaptureTask)(nil)).Elem()
}

func (o CaptureTaskOutput) ToCaptureTaskOutput() CaptureTaskOutput {
	return o
}

func (o CaptureTaskOutput) ToCaptureTaskOutputWithContext(ctx context.Context) CaptureTaskOutput {
	return o
}

// The creation time of the capture task.
func (o CaptureTaskOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The destination configuration.
func (o CaptureTaskOutput) Destination() CaptureTaskDestinationOutput {
	return o.ApplyT(func(v *CaptureTask) CaptureTaskDestinationOutput { return v.Destination }).(CaptureTaskDestinationOutput)
}

// The capture task duration.
func (o CaptureTaskOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.IntOutput { return v.Duration }).(pulumi.IntOutput)
}

func (o CaptureTaskOutput) EnableForceNew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.StringPtrOutput { return v.EnableForceNew }).(pulumi.StringPtrOutput)
}

// The ID of the firewall instance.
func (o CaptureTaskOutput) FwInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.StringOutput { return v.FwInstanceId }).(pulumi.StringOutput)
}

// The maximum number of packets captured.
func (o CaptureTaskOutput) MaxPackets() pulumi.IntOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.IntOutput { return v.MaxPackets }).(pulumi.IntOutput)
}

// The capture task name.
func (o CaptureTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CaptureTaskOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The service configuration.
func (o CaptureTaskOutput) Service() CaptureTaskServiceOutput {
	return o.ApplyT(func(v *CaptureTask) CaptureTaskServiceOutput { return v.Service }).(CaptureTaskServiceOutput)
}

// The source configuration.
func (o CaptureTaskOutput) Source() CaptureTaskSourceOutput {
	return o.ApplyT(func(v *CaptureTask) CaptureTaskSourceOutput { return v.Source }).(CaptureTaskSourceOutput)
}

// The status of the capture task.
func (o CaptureTaskOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Whether to stop the capture.
func (o CaptureTaskOutput) StopCapture() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.BoolPtrOutput { return v.StopCapture }).(pulumi.BoolPtrOutput)
}

// The ID of the capture task.
func (o CaptureTaskOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

// The update time of the capture task.
func (o CaptureTaskOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *CaptureTask) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type CaptureTaskArrayOutput struct{ *pulumi.OutputState }

func (CaptureTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CaptureTask)(nil)).Elem()
}

func (o CaptureTaskArrayOutput) ToCaptureTaskArrayOutput() CaptureTaskArrayOutput {
	return o
}

func (o CaptureTaskArrayOutput) ToCaptureTaskArrayOutputWithContext(ctx context.Context) CaptureTaskArrayOutput {
	return o
}

func (o CaptureTaskArrayOutput) Index(i pulumi.IntInput) CaptureTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CaptureTask {
		return vs[0].([]*CaptureTask)[vs[1].(int)]
	}).(CaptureTaskOutput)
}

type CaptureTaskMapOutput struct{ *pulumi.OutputState }

func (CaptureTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CaptureTask)(nil)).Elem()
}

func (o CaptureTaskMapOutput) ToCaptureTaskMapOutput() CaptureTaskMapOutput {
	return o
}

func (o CaptureTaskMapOutput) ToCaptureTaskMapOutputWithContext(ctx context.Context) CaptureTaskMapOutput {
	return o
}

func (o CaptureTaskMapOutput) MapIndex(k pulumi.StringInput) CaptureTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CaptureTask {
		return vs[0].(map[string]*CaptureTask)[vs[1].(string)]
	}).(CaptureTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CaptureTaskInput)(nil)).Elem(), &CaptureTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaptureTaskArrayInput)(nil)).Elem(), CaptureTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CaptureTaskMapInput)(nil)).Elem(), CaptureTaskMap{})
	pulumi.RegisterOutputType(CaptureTaskOutput{})
	pulumi.RegisterOutputType(CaptureTaskArrayOutput{})
	pulumi.RegisterOutputType(CaptureTaskMapOutput{})
}

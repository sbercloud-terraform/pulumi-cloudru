// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export function getEip(args?: GetEipArgs, opts?: pulumi.InvokeOptions): Promise<GetEipResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudru:Eip/getEip:getEip", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "portId": args.portId,
        "publicIp": args.publicIp,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getEip.
 */
export interface GetEipArgs {
    enterpriseProjectId?: string;
    portId?: string;
    publicIp?: string;
    region?: string;
}

/**
 * A collection of values returned by getEip.
 */
export interface GetEipResult {
    readonly bandwidthId: string;
    readonly bandwidthName: string;
    readonly bandwidthShareType: string;
    readonly bandwidthSize: number;
    readonly createdAt: string;
    readonly enterpriseProjectId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipVersion: number;
    readonly ipv6Address: string;
    readonly name: string;
    readonly portId: string;
    readonly privateIp: string;
    readonly publicIp: string;
    readonly region: string;
    readonly status: string;
    readonly type: string;
}
export function getEipOutput(args?: GetEipOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEipResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudru:Eip/getEip:getEip", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "portId": args.portId,
        "publicIp": args.publicIp,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getEip.
 */
export interface GetEipOutputArgs {
    enterpriseProjectId?: pulumi.Input<string>;
    portId?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

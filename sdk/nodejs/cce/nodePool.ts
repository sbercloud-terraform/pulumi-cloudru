// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Add a node pool to a container cluster.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject<any>("clusterId");
 * const keyPair = config.requireObject<any>("keyPair");
 * const availabilityZone = config.requireObject<any>("availabilityZone");
 * const nodePool = new sbercloud.cce.NodePool("node_pool", {
 *     clusterId: clusterId,
 *     name: "testpool",
 *     os: "EulerOS 2.5",
 *     initialNodeCount: 2,
 *     flavorId: "s3.large.4",
 *     availabilityZone: availabilityZone,
 *     keyPair: keypair,
 *     scallEnable: true,
 *     minNodeCount: 1,
 *     maxNodeCount: 10,
 *     scaleDownCooldownTime: 100,
 *     priority: 1,
 *     type: "vm",
 *     rootVolume: {
 *         size: 40,
 *         volumetype: "SAS",
 *     },
 *     dataVolumes: [{
 *         size: 100,
 *         volumetype: "SAS",
 *     }],
 * });
 * ```
 *
 * ### PrePaid node pool
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject<any>("clusterId");
 * const keyPair = config.requireObject<any>("keyPair");
 * const availabilityZone = config.requireObject<any>("availabilityZone");
 * const nodePool = new sbercloud.cce.NodePool("node_pool", {
 *     clusterId: clusterId,
 *     name: "testpool",
 *     os: "EulerOS 2.5",
 *     initialNodeCount: 2,
 *     flavorId: "s3.large.4",
 *     availabilityZone: availabilityZone,
 *     keyPair: keypair,
 *     scallEnable: true,
 *     minNodeCount: 1,
 *     maxNodeCount: 10,
 *     scaleDownCooldownTime: 100,
 *     priority: 1,
 *     type: "vm",
 *     chargingMode: "prePaid",
 *     periodUnit: "month",
 *     period: 1,
 *     rootVolume: {
 *         size: 40,
 *         volumetype: "SAS",
 *     },
 *     dataVolumes: [{
 *         size: 100,
 *         volumetype: "SAS",
 *     }],
 * });
 * ```
 *
 * > You need to remove all nodes in the node pool on the console, before deleting a prepaid node pool.
 *
 * ## Node pool with extension scale groups
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const clusterId = config.requireObject<any>("clusterId");
 * const keyPair = config.requireObject<any>("keyPair");
 * const availabilityZone1 = config.requireObject<any>("availabilityZone1");
 * const availabilityZone2 = config.requireObject<any>("availabilityZone2");
 * const nodePool = new sbercloud.cce.NodePool("node_pool", {
 *     clusterId: clusterId,
 *     name: "testpool",
 *     os: "EulerOS 2.5",
 *     initialNodeCount: 2,
 *     flavorId: "s3.large.4",
 *     availabilityZone: availabilityZone1,
 *     keyPair: keypair,
 *     scallEnable: true,
 *     minNodeCount: 1,
 *     maxNodeCount: 10,
 *     scaleDownCooldownTime: 100,
 *     priority: 1,
 *     type: "vm",
 *     rootVolume: {
 *         size: 40,
 *         volumetype: "SAS",
 *     },
 *     dataVolumes: [{
 *         size: 100,
 *         volumetype: "SAS",
 *     }],
 *     extensionScaleGroups: [
 *         {
 *             metadata: {
 *                 name: "group1",
 *             },
 *             spec: {
 *                 flavor: "s3.large.4",
 *                 az: availabilityZone1,
 *                 autoscaling: {
 *                     extensionPriority: 1,
 *                     enable: true,
 *                 },
 *             },
 *         },
 *         {
 *             metadata: {
 *                 name: "group2",
 *             },
 *             spec: {
 *                 flavor: "s3.xlarge.4",
 *                 az: availabilityZone1,
 *                 autoscaling: {
 *                     extensionPriority: 1,
 *                     enable: true,
 *                 },
 *             },
 *         },
 *         {
 *             metadata: {
 *                 name: "group3",
 *             },
 *             spec: {
 *                 flavor: "s3.xlarge.4",
 *                 az: availabilityZone2,
 *                 autoscaling: {
 *                     extensionPriority: 1,
 *                     enable: true,
 *                 },
 *             },
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * CCE node pool can be imported using the cluster ID and node pool ID separated by a slash, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Cce/nodePool:NodePool my_node_pool <cluster_id>/<id>
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason. The missing attributes include:
 *
 * `password`, `extend_params`, `taints`, `initial_node_count`, `pod_security_groups` and `extension_scale_groups`.
 *
 * It is generally recommended running `pulumi preview` after importing a node pool.
 *
 * You can then decide if changes should be applied to the node pool, or the resource
 *
 * definition should be updated to align with the node pool. Also you can ignore changes as below.
 *
 * hcl
 *
 * resource "sbercloud_cce_node_pool" "my_node_pool" {
 *
 *   ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       password, extend_params,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class NodePool extends pulumi.CustomResource {
    /**
     * Get an existing NodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodePoolState, opts?: pulumi.CustomResourceOptions): NodePool {
        return new NodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cce/nodePool:NodePool';

    /**
     * Returns true if the given object is an instance of NodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodePool.__pulumiType;
    }

    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "false".
     * Changing this parameter will create a new resource.
     */
    public readonly autoRenew!: pulumi.Output<string>;
    /**
     * Specifies the name of the available partition (AZ). Default value
     * is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
     */
    public readonly availabilityZone!: pulumi.Output<string | undefined>;
    /**
     * Billing mode of a node.
     */
    public /*out*/ readonly billingMode!: pulumi.Output<number>;
    /**
     * Specifies the charging mode of the CCE node pool. Valid values are
     * *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
     */
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * Specifies the cluster ID.
     * Changing this parameter will create a new resource.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The current number of the nodes.
     */
    public /*out*/ readonly currentNodeCount!: pulumi.Output<number>;
    /**
     * Specifies the configuration of the data disks.
     * The structure is described below. Changing this parameter will create a new resource.
     */
    public readonly dataVolumes!: pulumi.Output<outputs.Cce.NodePoolDataVolume[]>;
    /**
     * Specifies the ECS group ID. If specified, the node will be created under
     * the cloud server group. Changing this parameter will create a new resource.
     */
    public readonly ecsGroupId!: pulumi.Output<string | undefined>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Specifies the enterprise project ID of the node pool.
     * If updated, the new value will apply only to new nodes.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
     */
    public readonly extendParam!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the extended parameters.
     * The object structure is documented below.
     * Changing this parameter will create a new resource.
     */
    public readonly extendParams!: pulumi.Output<outputs.Cce.NodePoolExtendParams>;
    /**
     * Specifies the configurations of extended scaling groups in the node pool.
     * The object structure is documented below.
     */
    public readonly extensionScaleGroups!: pulumi.Output<outputs.Cce.NodePoolExtensionScaleGroup[] | undefined>;
    /**
     * Specifies the flavor ID. Changing this parameter will create a new
     * resource.
     */
    public readonly flavorId!: pulumi.Output<string>;
    /**
     * Specifies the hostname config of the kubernetes node,
     * which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
     * The object structure is documented below.
     * Changing this parameter will create a new resource.
     */
    public readonly hostnameConfig!: pulumi.Output<outputs.Cce.NodePoolHostnameConfig>;
    /**
     * Specifies the initial number of expected nodes in the node pool.
     * This parameter can be also used to manually scale the node count afterwards.
     */
    public readonly initialNodeCount!: pulumi.Output<number>;
    /**
     * Specifies the custom initialization flags.
     */
    public readonly initializedConditions!: pulumi.Output<string[]>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will create a new resource.
     */
    public readonly keyPair!: pulumi.Output<string | undefined>;
    /**
     * Specifies the label policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **refresh**.
     */
    public readonly labelPolicyOnExistingNodes!: pulumi.Output<string>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the maximum number of nodes allowed if auto scaling is enabled.
     */
    public readonly maxNodeCount!: pulumi.Output<number | undefined>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    public readonly maxPods!: pulumi.Output<number>;
    /**
     * Specifies the minimum number of nodes allowed if auto scaling is enabled.
     */
    public readonly minNodeCount!: pulumi.Output<number | undefined>;
    /**
     * Specifies the node pool name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the operating system of the node.
     * The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
     * please see [documentation](https://support.hc.sbercloud.ru/usermanual/cce/cce_10_0476.html).
     * This parameter is required when the `nodeImageId` in `extendParams` is not specified.
     */
    public readonly os!: pulumi.Output<string>;
    public readonly partition!: pulumi.Output<string | undefined>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
     * lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will create a new resource.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Specifies the charging period of the CCE node pool. If `periodUnit` is set to
     * *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
     * is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
     */
    public readonly period!: pulumi.Output<number | undefined>;
    /**
     * Specifies the charging period unit of the CCE node pool.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this parameter will create a new resource.
     */
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the list of security group IDs for the pod.
     * Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
     */
    public readonly podSecurityGroups!: pulumi.Output<string[] | undefined>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    public readonly postinstall!: pulumi.Output<string | undefined>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    public readonly preinstall!: pulumi.Output<string | undefined>;
    /**
     * Specifies the weight of the node pool.
     * A node pool with a higher weight has a higher priority during scaling.
     */
    public readonly priority!: pulumi.Output<number | undefined>;
    /**
     * The region in which to create the CCE pool resource. If omitted, the
     * provider-level region will be used. Changing this creates a new CCE node pool resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the configuration of the system disk.
     * The structure is described below. Changing this parameter will create a new resource.
     */
    public readonly rootVolume!: pulumi.Output<outputs.Cce.NodePoolRootVolume>;
    /**
     * Specifies the runtime of the CCE node pool. Valid values are *docker* and
     * *containerd*. Changing this creates a new resource.
     */
    public readonly runtime!: pulumi.Output<string>;
    /**
     * Specifies the time interval between two scaling operations, in minutes.
     */
    public readonly scaleDownCooldownTime!: pulumi.Output<number | undefined>;
    /**
     * Specifies whether to enable auto scaling.
     * If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
     */
    public readonly scallEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the list of custom security group IDs for the node pool.
     * If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
     * the rules of the port on which CCE running depends. For details, see
     * [documentation](https://support.hc.sbercloud.ru/usermanual/cce/cce_faq_00265.html).
     */
    public readonly securityGroups!: pulumi.Output<string[]>;
    /**
     * Node status information.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the disk initialization management parameter.
     * If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
     * This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
     */
    public readonly storage!: pulumi.Output<outputs.Cce.NodePoolStorage | undefined>;
    /**
     * Specifies the ID of the subnet to which the NIC belongs.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Specifies the ID list of the subnet to which the NIC belongs.
     */
    public readonly subnetLists!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the tag policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **ignore**.
     */
    public readonly tagPolicyOnExistingNodes!: pulumi.Output<string>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the taint policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **refresh**.
     */
    public readonly taintPolicyOnExistingNodes!: pulumi.Output<string>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * The structure is described below.
     */
    public readonly taints!: pulumi.Output<outputs.Cce.NodePoolTaint[] | undefined>;
    /**
     * Specifies the node pool type. Possible values are: **vm** and **ElasticBMS**.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a NodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodePoolArgs | NodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodePoolState | undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["billingMode"] = state ? state.billingMode : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["currentNodeCount"] = state ? state.currentNodeCount : undefined;
            resourceInputs["dataVolumes"] = state ? state.dataVolumes : undefined;
            resourceInputs["ecsGroupId"] = state ? state.ecsGroupId : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = state ? state.extendParam : undefined;
            resourceInputs["extendParams"] = state ? state.extendParams : undefined;
            resourceInputs["extensionScaleGroups"] = state ? state.extensionScaleGroups : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["hostnameConfig"] = state ? state.hostnameConfig : undefined;
            resourceInputs["initialNodeCount"] = state ? state.initialNodeCount : undefined;
            resourceInputs["initializedConditions"] = state ? state.initializedConditions : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["labelPolicyOnExistingNodes"] = state ? state.labelPolicyOnExistingNodes : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["maxNodeCount"] = state ? state.maxNodeCount : undefined;
            resourceInputs["maxPods"] = state ? state.maxPods : undefined;
            resourceInputs["minNodeCount"] = state ? state.minNodeCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["partition"] = state ? state.partition : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["podSecurityGroups"] = state ? state.podSecurityGroups : undefined;
            resourceInputs["postinstall"] = state ? state.postinstall : undefined;
            resourceInputs["preinstall"] = state ? state.preinstall : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rootVolume"] = state ? state.rootVolume : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["scaleDownCooldownTime"] = state ? state.scaleDownCooldownTime : undefined;
            resourceInputs["scallEnable"] = state ? state.scallEnable : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["subnetLists"] = state ? state.subnetLists : undefined;
            resourceInputs["tagPolicyOnExistingNodes"] = state ? state.tagPolicyOnExistingNodes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["taintPolicyOnExistingNodes"] = state ? state.taintPolicyOnExistingNodes : undefined;
            resourceInputs["taints"] = state ? state.taints : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as NodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.initialNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'initialNodeCount'");
            }
            if ((!args || args.rootVolume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rootVolume'");
            }
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["dataVolumes"] = args ? args.dataVolumes : undefined;
            resourceInputs["ecsGroupId"] = args ? args.ecsGroupId : undefined;
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["extendParam"] = args ? args.extendParam : undefined;
            resourceInputs["extendParams"] = args ? args.extendParams : undefined;
            resourceInputs["extensionScaleGroups"] = args ? args.extensionScaleGroups : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["hostnameConfig"] = args ? args.hostnameConfig : undefined;
            resourceInputs["initialNodeCount"] = args ? args.initialNodeCount : undefined;
            resourceInputs["initializedConditions"] = args ? args.initializedConditions : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["labelPolicyOnExistingNodes"] = args ? args.labelPolicyOnExistingNodes : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["maxNodeCount"] = args ? args.maxNodeCount : undefined;
            resourceInputs["maxPods"] = args ? args.maxPods : undefined;
            resourceInputs["minNodeCount"] = args ? args.minNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["partition"] = args ? args.partition : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["podSecurityGroups"] = args ? args.podSecurityGroups : undefined;
            resourceInputs["postinstall"] = args ? args.postinstall : undefined;
            resourceInputs["preinstall"] = args ? args.preinstall : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["rootVolume"] = args ? args.rootVolume : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["scaleDownCooldownTime"] = args ? args.scaleDownCooldownTime : undefined;
            resourceInputs["scallEnable"] = args ? args.scallEnable : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["subnetLists"] = args ? args.subnetLists : undefined;
            resourceInputs["tagPolicyOnExistingNodes"] = args ? args.tagPolicyOnExistingNodes : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["taintPolicyOnExistingNodes"] = args ? args.taintPolicyOnExistingNodes : undefined;
            resourceInputs["taints"] = args ? args.taints : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["billingMode"] = undefined /*out*/;
            resourceInputs["currentNodeCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodePool resources.
 */
export interface NodePoolState {
    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "false".
     * Changing this parameter will create a new resource.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the name of the available partition (AZ). Default value
     * is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Billing mode of a node.
     */
    billingMode?: pulumi.Input<number>;
    /**
     * Specifies the charging mode of the CCE node pool. Valid values are
     * *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the cluster ID.
     * Changing this parameter will create a new resource.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The current number of the nodes.
     */
    currentNodeCount?: pulumi.Input<number>;
    /**
     * Specifies the configuration of the data disks.
     * The structure is described below. Changing this parameter will create a new resource.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolDataVolume>[]>;
    /**
     * Specifies the ECS group ID. If specified, the node will be created under
     * the cloud server group. Changing this parameter will create a new resource.
     */
    ecsGroupId?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of the node pool.
     * If updated, the new value will apply only to new nodes.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the extended parameters.
     * The object structure is documented below.
     * Changing this parameter will create a new resource.
     */
    extendParams?: pulumi.Input<inputs.Cce.NodePoolExtendParams>;
    /**
     * Specifies the configurations of extended scaling groups in the node pool.
     * The object structure is documented below.
     */
    extensionScaleGroups?: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolExtensionScaleGroup>[]>;
    /**
     * Specifies the flavor ID. Changing this parameter will create a new
     * resource.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Specifies the hostname config of the kubernetes node,
     * which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
     * The object structure is documented below.
     * Changing this parameter will create a new resource.
     */
    hostnameConfig?: pulumi.Input<inputs.Cce.NodePoolHostnameConfig>;
    /**
     * Specifies the initial number of expected nodes in the node pool.
     * This parameter can be also used to manually scale the node count afterwards.
     */
    initialNodeCount?: pulumi.Input<number>;
    /**
     * Specifies the custom initialization flags.
     */
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will create a new resource.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Specifies the label policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **refresh**.
     */
    labelPolicyOnExistingNodes?: pulumi.Input<string>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the maximum number of nodes allowed if auto scaling is enabled.
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of nodes allowed if auto scaling is enabled.
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * Specifies the node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the operating system of the node.
     * The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
     * please see [documentation](https://support.hc.sbercloud.ru/usermanual/cce/cce_10_0476.html).
     * This parameter is required when the `nodeImageId` in `extendParams` is not specified.
     */
    os?: pulumi.Input<string>;
    partition?: pulumi.Input<string>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
     * lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will create a new resource.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the CCE node pool. If `periodUnit` is set to
     * *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
     * is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the CCE node pool.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this parameter will create a new resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the list of security group IDs for the pod.
     * Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
     */
    podSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    postinstall?: pulumi.Input<string>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    preinstall?: pulumi.Input<string>;
    /**
     * Specifies the weight of the node pool.
     * A node pool with a higher weight has a higher priority during scaling.
     */
    priority?: pulumi.Input<number>;
    /**
     * The region in which to create the CCE pool resource. If omitted, the
     * provider-level region will be used. Changing this creates a new CCE node pool resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the configuration of the system disk.
     * The structure is described below. Changing this parameter will create a new resource.
     */
    rootVolume?: pulumi.Input<inputs.Cce.NodePoolRootVolume>;
    /**
     * Specifies the runtime of the CCE node pool. Valid values are *docker* and
     * *containerd*. Changing this creates a new resource.
     */
    runtime?: pulumi.Input<string>;
    /**
     * Specifies the time interval between two scaling operations, in minutes.
     */
    scaleDownCooldownTime?: pulumi.Input<number>;
    /**
     * Specifies whether to enable auto scaling.
     * If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
     */
    scallEnable?: pulumi.Input<boolean>;
    /**
     * Specifies the list of custom security group IDs for the node pool.
     * If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
     * the rules of the port on which CCE running depends. For details, see
     * [documentation](https://support.hc.sbercloud.ru/usermanual/cce/cce_faq_00265.html).
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Node status information.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the disk initialization management parameter.
     * If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
     * This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
     */
    storage?: pulumi.Input<inputs.Cce.NodePoolStorage>;
    /**
     * Specifies the ID of the subnet to which the NIC belongs.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies the ID list of the subnet to which the NIC belongs.
     */
    subnetLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the tag policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **ignore**.
     */
    tagPolicyOnExistingNodes?: pulumi.Input<string>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the taint policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **refresh**.
     */
    taintPolicyOnExistingNodes?: pulumi.Input<string>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * The structure is described below.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolTaint>[]>;
    /**
     * Specifies the node pool type. Possible values are: **vm** and **ElasticBMS**.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NodePool resource.
 */
export interface NodePoolArgs {
    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "false".
     * Changing this parameter will create a new resource.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * Specifies the name of the available partition (AZ). Default value
     * is random to create nodes in a random AZ in the node pool. Changing this parameter will create a new resource.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the charging mode of the CCE node pool. Valid values are
     * *prePaid* and *postPaid*, defaults to *postPaid*. Changing this parameter will create a new resource.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the cluster ID.
     * Changing this parameter will create a new resource.
     */
    clusterId: pulumi.Input<string>;
    /**
     * Specifies the configuration of the data disks.
     * The structure is described below. Changing this parameter will create a new resource.
     */
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolDataVolume>[]>;
    /**
     * Specifies the ECS group ID. If specified, the node will be created under
     * the cloud server group. Changing this parameter will create a new resource.
     */
    ecsGroupId?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the enterprise project ID of the node pool.
     * If updated, the new value will apply only to new nodes.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * schema: Deprecated; This parameter has been replaced by the 'extend_params' parameter.
     */
    extendParam?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the extended parameters.
     * The object structure is documented below.
     * Changing this parameter will create a new resource.
     */
    extendParams?: pulumi.Input<inputs.Cce.NodePoolExtendParams>;
    /**
     * Specifies the configurations of extended scaling groups in the node pool.
     * The object structure is documented below.
     */
    extensionScaleGroups?: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolExtensionScaleGroup>[]>;
    /**
     * Specifies the flavor ID. Changing this parameter will create a new
     * resource.
     */
    flavorId: pulumi.Input<string>;
    /**
     * Specifies the hostname config of the kubernetes node,
     * which is supported by clusters of v1.23.6-r0 to v1.25 or clusters of v1.25.2-r0 or later versions.
     * The object structure is documented below.
     * Changing this parameter will create a new resource.
     */
    hostnameConfig?: pulumi.Input<inputs.Cce.NodePoolHostnameConfig>;
    /**
     * Specifies the initial number of expected nodes in the node pool.
     * This parameter can be also used to manually scale the node count afterwards.
     */
    initialNodeCount: pulumi.Input<number>;
    /**
     * Specifies the custom initialization flags.
     */
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the key pair name when logging in to select the key pair mode.
     * This parameter and `password` are alternative. Changing this parameter will create a new resource.
     */
    keyPair?: pulumi.Input<string>;
    /**
     * Specifies the label policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **refresh**.
     */
    labelPolicyOnExistingNodes?: pulumi.Input<string>;
    /**
     * Specifies the tags of a Kubernetes node, key/value pair format.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the maximum number of nodes allowed if auto scaling is enabled.
     */
    maxNodeCount?: pulumi.Input<number>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    maxPods?: pulumi.Input<number>;
    /**
     * Specifies the minimum number of nodes allowed if auto scaling is enabled.
     */
    minNodeCount?: pulumi.Input<number>;
    /**
     * Specifies the node pool name.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the operating system of the node.
     * The value can be **EulerOS 2.9** and **CentOS 7.6** e.g. For more details,
     * please see [documentation](https://support.hc.sbercloud.ru/usermanual/cce/cce_10_0476.html).
     * This parameter is required when the `nodeImageId` in `extendParams` is not specified.
     */
    os?: pulumi.Input<string>;
    partition?: pulumi.Input<string>;
    /**
     * Specifies the root password when logging in to select the password mode.
     * The password consists of 8 to 26 characters and must contain at least three of following: uppercase letters,
     * lowercase letters, digits, special characters(!@$%^-_=+[{}]:,./?~#*).
     * This parameter can be plain or salted and is alternative to `keyPair`.
     * Changing this parameter will create a new resource.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the charging period of the CCE node pool. If `periodUnit` is set to
     * *month*, the value ranges from 1 to 9. If `periodUnit` is set to *year*, the value ranges from 1 to 3. This parameter
     * is mandatory if `chargingMode` is set to *prePaid*. Changing this parameter will create a new resource.
     */
    period?: pulumi.Input<number>;
    /**
     * Specifies the charging period unit of the CCE node pool.
     * Valid values are *month* and *year*. This parameter is mandatory if `chargingMode` is set to *prePaid*.
     * Changing this parameter will create a new resource.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the list of security group IDs for the pod.
     * Only supported in CCE Turbo clusters of v1.19 and above. Changing this parameter will create a new resource.
     */
    podSecurityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    postinstall?: pulumi.Input<string>;
    /**
     * schema: Deprecated; This parameter can be configured in the 'extend_params' parameter.
     */
    preinstall?: pulumi.Input<string>;
    /**
     * Specifies the weight of the node pool.
     * A node pool with a higher weight has a higher priority during scaling.
     */
    priority?: pulumi.Input<number>;
    /**
     * The region in which to create the CCE pool resource. If omitted, the
     * provider-level region will be used. Changing this creates a new CCE node pool resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the configuration of the system disk.
     * The structure is described below. Changing this parameter will create a new resource.
     */
    rootVolume: pulumi.Input<inputs.Cce.NodePoolRootVolume>;
    /**
     * Specifies the runtime of the CCE node pool. Valid values are *docker* and
     * *containerd*. Changing this creates a new resource.
     */
    runtime?: pulumi.Input<string>;
    /**
     * Specifies the time interval between two scaling operations, in minutes.
     */
    scaleDownCooldownTime?: pulumi.Input<number>;
    /**
     * Specifies whether to enable auto scaling.
     * If Autoscaler is enabled, install the autoscaler add-on to use the auto scaling feature.
     */
    scallEnable?: pulumi.Input<boolean>;
    /**
     * Specifies the list of custom security group IDs for the node pool.
     * If specified, the nodes will be put in these security groups. When specifying a security group, do not modify
     * the rules of the port on which CCE running depends. For details, see
     * [documentation](https://support.hc.sbercloud.ru/usermanual/cce/cce_faq_00265.html).
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the disk initialization management parameter.
     * If omitted, disks are managed based on the DockerLVMConfigOverride parameter in extendParam.
     * This parameter is supported for clusters of v1.15.11 and later. Changing this parameter will create a new resource.
     */
    storage?: pulumi.Input<inputs.Cce.NodePoolStorage>;
    /**
     * Specifies the ID of the subnet to which the NIC belongs.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Specifies the ID list of the subnet to which the NIC belongs.
     */
    subnetLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the tag policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **ignore**.
     */
    tagPolicyOnExistingNodes?: pulumi.Input<string>;
    /**
     * Specifies the tags of a VM node, key/value pair format.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the taint policy on existing nodes.
     * The value can be **ignore** and **refresh**, defaults to **refresh**.
     */
    taintPolicyOnExistingNodes?: pulumi.Input<string>;
    /**
     * Specifies the taints configuration of the nodes to set anti-affinity.
     * The structure is described below.
     */
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodePoolTaint>[]>;
    /**
     * Specifies the node pool type. Possible values are: **vm** and **ElasticBMS**.
     */
    type?: pulumi.Input<string>;
}

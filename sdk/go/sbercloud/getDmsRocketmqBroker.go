// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use this data source to get the list of DMS rocketMQ broker.
func GetDmsRocketmqBroker(ctx *pulumi.Context, args *GetDmsRocketmqBrokerArgs, opts ...pulumi.InvokeOption) (*GetDmsRocketmqBrokerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDmsRocketmqBrokerResult
	err := ctx.Invoke("sbercloud:index/getDmsRocketmqBroker:getDmsRocketmqBroker", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDmsRocketmqBroker.
type GetDmsRocketmqBrokerArgs struct {
	// Specifies the ID of the rocketMQ instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getDmsRocketmqBroker.
type GetDmsRocketmqBrokerResult struct {
	// Indicates the list of the brokers.
	Brokers []string `pulumi:"brokers"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	Region     string `pulumi:"region"`
}

func GetDmsRocketmqBrokerOutput(ctx *pulumi.Context, args GetDmsRocketmqBrokerOutputArgs, opts ...pulumi.InvokeOption) GetDmsRocketmqBrokerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDmsRocketmqBrokerResultOutput, error) {
			args := v.(GetDmsRocketmqBrokerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getDmsRocketmqBroker:getDmsRocketmqBroker", args, GetDmsRocketmqBrokerResultOutput{}, options).(GetDmsRocketmqBrokerResultOutput), nil
		}).(GetDmsRocketmqBrokerResultOutput)
}

// A collection of arguments for invoking getDmsRocketmqBroker.
type GetDmsRocketmqBrokerOutputArgs struct {
	// Specifies the ID of the rocketMQ instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetDmsRocketmqBrokerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsRocketmqBrokerArgs)(nil)).Elem()
}

// A collection of values returned by getDmsRocketmqBroker.
type GetDmsRocketmqBrokerResultOutput struct{ *pulumi.OutputState }

func (GetDmsRocketmqBrokerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsRocketmqBrokerResult)(nil)).Elem()
}

func (o GetDmsRocketmqBrokerResultOutput) ToGetDmsRocketmqBrokerResultOutput() GetDmsRocketmqBrokerResultOutput {
	return o
}

func (o GetDmsRocketmqBrokerResultOutput) ToGetDmsRocketmqBrokerResultOutputWithContext(ctx context.Context) GetDmsRocketmqBrokerResultOutput {
	return o
}

// Indicates the list of the brokers.
func (o GetDmsRocketmqBrokerResultOutput) Brokers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDmsRocketmqBrokerResult) []string { return v.Brokers }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDmsRocketmqBrokerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqBrokerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqBrokerResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqBrokerResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqBrokerResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqBrokerResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDmsRocketmqBrokerResultOutput{})
}

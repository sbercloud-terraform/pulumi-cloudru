// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get available SberCloud elb load balancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/elb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			lbName := cfg.RequireObject("lbName")
//			_, err := elb.GetLoadbalancer(ctx, &elb.GetLoadbalancerArgs{
//				Name: pulumi.StringRef(lbName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLoadbalancer(ctx *pulumi.Context, args *LookupLoadbalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadbalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadbalancerResult
	err := ctx.Invoke("sbercloud:Elb/getLoadbalancer:getLoadbalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadbalancer.
type LookupLoadbalancerArgs struct {
	// Specifies the supplementary information about the load balancer.
	Description *string `pulumi:"description"`
	// Specifies the enterprise project id of the load balancer.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the data source ID of the load balancer in UUID format.
	Id *string `pulumi:"id"`
	// Specifies the name of the load balancer.
	Name *string `pulumi:"name"`
	// Specifies the region in which to obtain the load balancer. If omitted, the
	// provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the operating status of the load balancer. Valid values are *ONLINE* and
	// *FROZEN*.
	Status *string `pulumi:"status"`
	// Specifies the private IP address of the load balancer.
	VipAddress *string `pulumi:"vipAddress"`
	// Specifies the **IPv4 subnet ID** of the subnet where the load balancer works.
	VipSubnetId *string `pulumi:"vipSubnetId"`
}

// A collection of values returned by getLoadbalancer.
type LookupLoadbalancerResult struct {
	Description         string `pulumi:"description"`
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	Id                  string `pulumi:"id"`
	Name                string `pulumi:"name"`
	// The EIP address that is associated to the Load Balancer instance.
	PublicIp string `pulumi:"publicIp"`
	Region   string `pulumi:"region"`
	Status   string `pulumi:"status"`
	// The tags associated with the load balancer.
	Tags       map[string]string `pulumi:"tags"`
	VipAddress string            `pulumi:"vipAddress"`
	// The ID of the port bound to the private IP address of the load balancer.
	VipPortId   string `pulumi:"vipPortId"`
	VipSubnetId string `pulumi:"vipSubnetId"`
}

func LookupLoadbalancerOutput(ctx *pulumi.Context, args LookupLoadbalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadbalancerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLoadbalancerResultOutput, error) {
			args := v.(LookupLoadbalancerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Elb/getLoadbalancer:getLoadbalancer", args, LookupLoadbalancerResultOutput{}, options).(LookupLoadbalancerResultOutput), nil
		}).(LookupLoadbalancerResultOutput)
}

// A collection of arguments for invoking getLoadbalancer.
type LookupLoadbalancerOutputArgs struct {
	// Specifies the supplementary information about the load balancer.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Specifies the enterprise project id of the load balancer.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the data source ID of the load balancer in UUID format.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the load balancer.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to obtain the load balancer. If omitted, the
	// provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the operating status of the load balancer. Valid values are *ONLINE* and
	// *FROZEN*.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the private IP address of the load balancer.
	VipAddress pulumi.StringPtrInput `pulumi:"vipAddress"`
	// Specifies the **IPv4 subnet ID** of the subnet where the load balancer works.
	VipSubnetId pulumi.StringPtrInput `pulumi:"vipSubnetId"`
}

func (LookupLoadbalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadbalancerArgs)(nil)).Elem()
}

// A collection of values returned by getLoadbalancer.
type LookupLoadbalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadbalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadbalancerResult)(nil)).Elem()
}

func (o LookupLoadbalancerResultOutput) ToLookupLoadbalancerResultOutput() LookupLoadbalancerResultOutput {
	return o
}

func (o LookupLoadbalancerResultOutput) ToLookupLoadbalancerResultOutputWithContext(ctx context.Context) LookupLoadbalancerResultOutput {
	return o
}

func (o LookupLoadbalancerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupLoadbalancerResultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o LookupLoadbalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLoadbalancerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.Name }).(pulumi.StringOutput)
}

// The EIP address that is associated to the Load Balancer instance.
func (o LookupLoadbalancerResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o LookupLoadbalancerResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupLoadbalancerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.Status }).(pulumi.StringOutput)
}

// The tags associated with the load balancer.
func (o LookupLoadbalancerResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o LookupLoadbalancerResultOutput) VipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.VipAddress }).(pulumi.StringOutput)
}

// The ID of the port bound to the private IP address of the load balancer.
func (o LookupLoadbalancerResultOutput) VipPortId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.VipPortId }).(pulumi.StringOutput)
}

func (o LookupLoadbalancerResultOutput) VipSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadbalancerResult) string { return v.VipSubnetId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadbalancerResultOutput{})
}

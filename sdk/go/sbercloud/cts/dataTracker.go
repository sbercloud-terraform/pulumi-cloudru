// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cts

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages CTS **data** tracker resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/cts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			dataBucket := cfg.RequireObject("dataBucket")
//			transferBucket := cfg.RequireObject("transferBucket")
//			_, err := cts.NewDataTracker(ctx, "tracker", &cts.DataTrackerArgs{
//				Name:       pulumi.String("data-tracker"),
//				DataBucket: pulumi.Any(dataBucket),
//				BucketName: pulumi.Any(transferBucket),
//				FilePrefix: pulumi.String("cloudTrace"),
//				LtsEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CTS data tracker can be imported using `name`, e.g.:
//
// ```sh
// $ pulumi import sbercloud:Cts/dataTracker:DataTracker tracker your_tracker_name
// ```
type DataTracker struct {
	pulumi.CustomResourceState

	AgencyName pulumi.StringOutput `pulumi:"agencyName"`
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName   pulumi.StringPtrOutput `pulumi:"bucketName"`
	CompressType pulumi.StringPtrOutput `pulumi:"compressType"`
	CreateTime   pulumi.IntOutput       `pulumi:"createTime"`
	// Specifies the OBS bucket tracked by the data tracker.
	// Changing this creates a new resource.
	DataBucket pulumi.StringOutput `pulumi:"dataBucket"`
	// Specifies an array of operation types tracked by the data tracker,
	// the value of operation can be **WRITE** or **READ**.
	DataOperations pulumi.StringArrayOutput `pulumi:"dataOperations"`
	Detail         pulumi.StringOutput      `pulumi:"detail"`
	DomainId       pulumi.StringOutput      `pulumi:"domainId"`
	// Specifies whether tracker is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix         pulumi.StringPtrOutput `pulumi:"filePrefix"`
	GroupId            pulumi.StringOutput    `pulumi:"groupId"`
	IsAuthorizedBucket pulumi.BoolOutput      `pulumi:"isAuthorizedBucket"`
	IsSortByService    pulumi.BoolPtrOutput   `pulumi:"isSortByService"`
	LogGroupName       pulumi.StringOutput    `pulumi:"logGroupName"`
	LogTopicName       pulumi.StringOutput    `pulumi:"logTopicName"`
	// Specifies whether trace analysis is enabled.
	LtsEnabled pulumi.BoolPtrOutput `pulumi:"ltsEnabled"`
	// Specifies the data tracker name. The name cannot be system or ststem-trace.
	// Changing this creates a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the retention period that traces are stored in `bucketName`,
	// the value can be **0**(permanent), **30**, **60**, **90**, **180** or **1095**.
	ObsRetentionPeriod pulumi.IntPtrOutput `pulumi:"obsRetentionPeriod"`
	// Specifies the region in which to manage the CTS data tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The tracker status, the value can be **enabled**, **disabled** or **error**.
	Status   pulumi.StringOutput    `pulumi:"status"`
	StreamId pulumi.StringOutput    `pulumi:"streamId"`
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	// Whether traces will be transferred.
	TransferEnabled pulumi.BoolOutput `pulumi:"transferEnabled"`
	// The tracker type, only **data** is available.
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile pulumi.BoolPtrOutput `pulumi:"validateFile"`
}

// NewDataTracker registers a new resource with the given unique name, arguments, and options.
func NewDataTracker(ctx *pulumi.Context,
	name string, args *DataTrackerArgs, opts ...pulumi.ResourceOption) (*DataTracker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataBucket == nil {
		return nil, errors.New("invalid value for required argument 'DataBucket'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataTracker
	err := ctx.RegisterResource("sbercloud:Cts/dataTracker:DataTracker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataTracker gets an existing DataTracker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataTracker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataTrackerState, opts ...pulumi.ResourceOption) (*DataTracker, error) {
	var resource DataTracker
	err := ctx.ReadResource("sbercloud:Cts/dataTracker:DataTracker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataTracker resources.
type dataTrackerState struct {
	AgencyName *string `pulumi:"agencyName"`
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName   *string `pulumi:"bucketName"`
	CompressType *string `pulumi:"compressType"`
	CreateTime   *int    `pulumi:"createTime"`
	// Specifies the OBS bucket tracked by the data tracker.
	// Changing this creates a new resource.
	DataBucket *string `pulumi:"dataBucket"`
	// Specifies an array of operation types tracked by the data tracker,
	// the value of operation can be **WRITE** or **READ**.
	DataOperations []string `pulumi:"dataOperations"`
	Detail         *string  `pulumi:"detail"`
	DomainId       *string  `pulumi:"domainId"`
	// Specifies whether tracker is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix         *string `pulumi:"filePrefix"`
	GroupId            *string `pulumi:"groupId"`
	IsAuthorizedBucket *bool   `pulumi:"isAuthorizedBucket"`
	IsSortByService    *bool   `pulumi:"isSortByService"`
	LogGroupName       *string `pulumi:"logGroupName"`
	LogTopicName       *string `pulumi:"logTopicName"`
	// Specifies whether trace analysis is enabled.
	LtsEnabled *bool `pulumi:"ltsEnabled"`
	// Specifies the data tracker name. The name cannot be system or ststem-trace.
	// Changing this creates a new resource.
	Name *string `pulumi:"name"`
	// Specifies the retention period that traces are stored in `bucketName`,
	// the value can be **0**(permanent), **30**, **60**, **90**, **180** or **1095**.
	ObsRetentionPeriod *int `pulumi:"obsRetentionPeriod"`
	// Specifies the region in which to manage the CTS data tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The tracker status, the value can be **enabled**, **disabled** or **error**.
	Status   *string           `pulumi:"status"`
	StreamId *string           `pulumi:"streamId"`
	Tags     map[string]string `pulumi:"tags"`
	// Whether traces will be transferred.
	TransferEnabled *bool `pulumi:"transferEnabled"`
	// The tracker type, only **data** is available.
	Type *string `pulumi:"type"`
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile *bool `pulumi:"validateFile"`
}

type DataTrackerState struct {
	AgencyName pulumi.StringPtrInput
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName   pulumi.StringPtrInput
	CompressType pulumi.StringPtrInput
	CreateTime   pulumi.IntPtrInput
	// Specifies the OBS bucket tracked by the data tracker.
	// Changing this creates a new resource.
	DataBucket pulumi.StringPtrInput
	// Specifies an array of operation types tracked by the data tracker,
	// the value of operation can be **WRITE** or **READ**.
	DataOperations pulumi.StringArrayInput
	Detail         pulumi.StringPtrInput
	DomainId       pulumi.StringPtrInput
	// Specifies whether tracker is enabled.
	Enabled pulumi.BoolPtrInput
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix         pulumi.StringPtrInput
	GroupId            pulumi.StringPtrInput
	IsAuthorizedBucket pulumi.BoolPtrInput
	IsSortByService    pulumi.BoolPtrInput
	LogGroupName       pulumi.StringPtrInput
	LogTopicName       pulumi.StringPtrInput
	// Specifies whether trace analysis is enabled.
	LtsEnabled pulumi.BoolPtrInput
	// Specifies the data tracker name. The name cannot be system or ststem-trace.
	// Changing this creates a new resource.
	Name pulumi.StringPtrInput
	// Specifies the retention period that traces are stored in `bucketName`,
	// the value can be **0**(permanent), **30**, **60**, **90**, **180** or **1095**.
	ObsRetentionPeriod pulumi.IntPtrInput
	// Specifies the region in which to manage the CTS data tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The tracker status, the value can be **enabled**, **disabled** or **error**.
	Status   pulumi.StringPtrInput
	StreamId pulumi.StringPtrInput
	Tags     pulumi.StringMapInput
	// Whether traces will be transferred.
	TransferEnabled pulumi.BoolPtrInput
	// The tracker type, only **data** is available.
	Type pulumi.StringPtrInput
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile pulumi.BoolPtrInput
}

func (DataTrackerState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataTrackerState)(nil)).Elem()
}

type dataTrackerArgs struct {
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName   *string `pulumi:"bucketName"`
	CompressType *string `pulumi:"compressType"`
	// Specifies the OBS bucket tracked by the data tracker.
	// Changing this creates a new resource.
	DataBucket string `pulumi:"dataBucket"`
	// Specifies an array of operation types tracked by the data tracker,
	// the value of operation can be **WRITE** or **READ**.
	DataOperations []string `pulumi:"dataOperations"`
	// Specifies whether tracker is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix      *string `pulumi:"filePrefix"`
	IsSortByService *bool   `pulumi:"isSortByService"`
	// Specifies whether trace analysis is enabled.
	LtsEnabled *bool `pulumi:"ltsEnabled"`
	// Specifies the data tracker name. The name cannot be system or ststem-trace.
	// Changing this creates a new resource.
	Name *string `pulumi:"name"`
	// Specifies the retention period that traces are stored in `bucketName`,
	// the value can be **0**(permanent), **30**, **60**, **90**, **180** or **1095**.
	ObsRetentionPeriod *int `pulumi:"obsRetentionPeriod"`
	// Specifies the region in which to manage the CTS data tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string           `pulumi:"region"`
	Tags   map[string]string `pulumi:"tags"`
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile *bool `pulumi:"validateFile"`
}

// The set of arguments for constructing a DataTracker resource.
type DataTrackerArgs struct {
	// Specifies the OBS bucket to which traces will be transferred.
	BucketName   pulumi.StringPtrInput
	CompressType pulumi.StringPtrInput
	// Specifies the OBS bucket tracked by the data tracker.
	// Changing this creates a new resource.
	DataBucket pulumi.StringInput
	// Specifies an array of operation types tracked by the data tracker,
	// the value of operation can be **WRITE** or **READ**.
	DataOperations pulumi.StringArrayInput
	// Specifies whether tracker is enabled.
	Enabled pulumi.BoolPtrInput
	// Specifies the file name prefix to mark trace files that need to be stored
	// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
	// and periods (.) are allowed.
	FilePrefix      pulumi.StringPtrInput
	IsSortByService pulumi.BoolPtrInput
	// Specifies whether trace analysis is enabled.
	LtsEnabled pulumi.BoolPtrInput
	// Specifies the data tracker name. The name cannot be system or ststem-trace.
	// Changing this creates a new resource.
	Name pulumi.StringPtrInput
	// Specifies the retention period that traces are stored in `bucketName`,
	// the value can be **0**(permanent), **30**, **60**, **90**, **180** or **1095**.
	ObsRetentionPeriod pulumi.IntPtrInput
	// Specifies the region in which to manage the CTS data tracker resource.
	// If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	Tags   pulumi.StringMapInput
	// Specifies whether trace file verification is enabled during trace transfer.
	ValidateFile pulumi.BoolPtrInput
}

func (DataTrackerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataTrackerArgs)(nil)).Elem()
}

type DataTrackerInput interface {
	pulumi.Input

	ToDataTrackerOutput() DataTrackerOutput
	ToDataTrackerOutputWithContext(ctx context.Context) DataTrackerOutput
}

func (*DataTracker) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTracker)(nil)).Elem()
}

func (i *DataTracker) ToDataTrackerOutput() DataTrackerOutput {
	return i.ToDataTrackerOutputWithContext(context.Background())
}

func (i *DataTracker) ToDataTrackerOutputWithContext(ctx context.Context) DataTrackerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTrackerOutput)
}

// DataTrackerArrayInput is an input type that accepts DataTrackerArray and DataTrackerArrayOutput values.
// You can construct a concrete instance of `DataTrackerArrayInput` via:
//
//	DataTrackerArray{ DataTrackerArgs{...} }
type DataTrackerArrayInput interface {
	pulumi.Input

	ToDataTrackerArrayOutput() DataTrackerArrayOutput
	ToDataTrackerArrayOutputWithContext(context.Context) DataTrackerArrayOutput
}

type DataTrackerArray []DataTrackerInput

func (DataTrackerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataTracker)(nil)).Elem()
}

func (i DataTrackerArray) ToDataTrackerArrayOutput() DataTrackerArrayOutput {
	return i.ToDataTrackerArrayOutputWithContext(context.Background())
}

func (i DataTrackerArray) ToDataTrackerArrayOutputWithContext(ctx context.Context) DataTrackerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTrackerArrayOutput)
}

// DataTrackerMapInput is an input type that accepts DataTrackerMap and DataTrackerMapOutput values.
// You can construct a concrete instance of `DataTrackerMapInput` via:
//
//	DataTrackerMap{ "key": DataTrackerArgs{...} }
type DataTrackerMapInput interface {
	pulumi.Input

	ToDataTrackerMapOutput() DataTrackerMapOutput
	ToDataTrackerMapOutputWithContext(context.Context) DataTrackerMapOutput
}

type DataTrackerMap map[string]DataTrackerInput

func (DataTrackerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataTracker)(nil)).Elem()
}

func (i DataTrackerMap) ToDataTrackerMapOutput() DataTrackerMapOutput {
	return i.ToDataTrackerMapOutputWithContext(context.Background())
}

func (i DataTrackerMap) ToDataTrackerMapOutputWithContext(ctx context.Context) DataTrackerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataTrackerMapOutput)
}

type DataTrackerOutput struct{ *pulumi.OutputState }

func (DataTrackerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataTracker)(nil)).Elem()
}

func (o DataTrackerOutput) ToDataTrackerOutput() DataTrackerOutput {
	return o
}

func (o DataTrackerOutput) ToDataTrackerOutputWithContext(ctx context.Context) DataTrackerOutput {
	return o
}

func (o DataTrackerOutput) AgencyName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.AgencyName }).(pulumi.StringOutput)
}

// Specifies the OBS bucket to which traces will be transferred.
func (o DataTrackerOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringPtrOutput { return v.BucketName }).(pulumi.StringPtrOutput)
}

func (o DataTrackerOutput) CompressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringPtrOutput { return v.CompressType }).(pulumi.StringPtrOutput)
}

func (o DataTrackerOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// Specifies the OBS bucket tracked by the data tracker.
// Changing this creates a new resource.
func (o DataTrackerOutput) DataBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.DataBucket }).(pulumi.StringOutput)
}

// Specifies an array of operation types tracked by the data tracker,
// the value of operation can be **WRITE** or **READ**.
func (o DataTrackerOutput) DataOperations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringArrayOutput { return v.DataOperations }).(pulumi.StringArrayOutput)
}

func (o DataTrackerOutput) Detail() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.Detail }).(pulumi.StringOutput)
}

func (o DataTrackerOutput) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// Specifies whether tracker is enabled.
func (o DataTrackerOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the file name prefix to mark trace files that need to be stored
// in an OBS bucket. The value contains 0 to 64 characters. Only letters, numbers, hyphens (-), underscores (_),
// and periods (.) are allowed.
func (o DataTrackerOutput) FilePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringPtrOutput { return v.FilePrefix }).(pulumi.StringPtrOutput)
}

func (o DataTrackerOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

func (o DataTrackerOutput) IsAuthorizedBucket() pulumi.BoolOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.BoolOutput { return v.IsAuthorizedBucket }).(pulumi.BoolOutput)
}

func (o DataTrackerOutput) IsSortByService() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.BoolPtrOutput { return v.IsSortByService }).(pulumi.BoolPtrOutput)
}

func (o DataTrackerOutput) LogGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.LogGroupName }).(pulumi.StringOutput)
}

func (o DataTrackerOutput) LogTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.LogTopicName }).(pulumi.StringOutput)
}

// Specifies whether trace analysis is enabled.
func (o DataTrackerOutput) LtsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.BoolPtrOutput { return v.LtsEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies the data tracker name. The name cannot be system or ststem-trace.
// Changing this creates a new resource.
func (o DataTrackerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the retention period that traces are stored in `bucketName`,
// the value can be **0**(permanent), **30**, **60**, **90**, **180** or **1095**.
func (o DataTrackerOutput) ObsRetentionPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.IntPtrOutput { return v.ObsRetentionPeriod }).(pulumi.IntPtrOutput)
}

// Specifies the region in which to manage the CTS data tracker resource.
// If omitted, the provider-level region will be used. Changing this creates a new resource.
func (o DataTrackerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The tracker status, the value can be **enabled**, **disabled** or **error**.
func (o DataTrackerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o DataTrackerOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

func (o DataTrackerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Whether traces will be transferred.
func (o DataTrackerOutput) TransferEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.BoolOutput { return v.TransferEnabled }).(pulumi.BoolOutput)
}

// The tracker type, only **data** is available.
func (o DataTrackerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Specifies whether trace file verification is enabled during trace transfer.
func (o DataTrackerOutput) ValidateFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DataTracker) pulumi.BoolPtrOutput { return v.ValidateFile }).(pulumi.BoolPtrOutput)
}

type DataTrackerArrayOutput struct{ *pulumi.OutputState }

func (DataTrackerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataTracker)(nil)).Elem()
}

func (o DataTrackerArrayOutput) ToDataTrackerArrayOutput() DataTrackerArrayOutput {
	return o
}

func (o DataTrackerArrayOutput) ToDataTrackerArrayOutputWithContext(ctx context.Context) DataTrackerArrayOutput {
	return o
}

func (o DataTrackerArrayOutput) Index(i pulumi.IntInput) DataTrackerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataTracker {
		return vs[0].([]*DataTracker)[vs[1].(int)]
	}).(DataTrackerOutput)
}

type DataTrackerMapOutput struct{ *pulumi.OutputState }

func (DataTrackerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataTracker)(nil)).Elem()
}

func (o DataTrackerMapOutput) ToDataTrackerMapOutput() DataTrackerMapOutput {
	return o
}

func (o DataTrackerMapOutput) ToDataTrackerMapOutputWithContext(ctx context.Context) DataTrackerMapOutput {
	return o
}

func (o DataTrackerMapOutput) MapIndex(k pulumi.StringInput) DataTrackerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataTracker {
		return vs[0].(map[string]*DataTracker)[vs[1].(string)]
	}).(DataTrackerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataTrackerInput)(nil)).Elem(), &DataTracker{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTrackerArrayInput)(nil)).Elem(), DataTrackerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataTrackerMapInput)(nil)).Elem(), DataTrackerMap{})
	pulumi.RegisterOutputType(DataTrackerOutput{})
	pulumi.RegisterOutputType(DataTrackerArrayOutput{})
	pulumi.RegisterOutputType(DataTrackerMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ObsBucketAcl extends pulumi.CustomResource {
    /**
     * Get an existing ObsBucketAcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObsBucketAclState, opts?: pulumi.CustomResourceOptions): ObsBucketAcl {
        return new ObsBucketAcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/obsBucketAcl:ObsBucketAcl';

    /**
     * Returns true if the given object is an instance of ObsBucketAcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObsBucketAcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObsBucketAcl.__pulumiType;
    }

    /**
     * Specifies the account permissions.
     */
    declare public readonly accountPermissions: pulumi.Output<outputs.ObsBucketAclAccountPermission[] | undefined>;
    /**
     * Specifies the name of the bucket to which to set the acl.
     */
    declare public readonly bucket: pulumi.Output<string>;
    /**
     * Specifies the log delivery user permission.
     */
    declare public readonly logDeliveryUserPermission: pulumi.Output<outputs.ObsBucketAclLogDeliveryUserPermission | undefined>;
    /**
     * Specifies the bucket owner permission.
     */
    declare public readonly ownerPermission: pulumi.Output<outputs.ObsBucketAclOwnerPermission>;
    /**
     * Specifies the public permission.
     */
    declare public readonly publicPermission: pulumi.Output<outputs.ObsBucketAclPublicPermission | undefined>;
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a ObsBucketAcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObsBucketAclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObsBucketAclArgs | ObsBucketAclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObsBucketAclState | undefined;
            resourceInputs["accountPermissions"] = state?.accountPermissions;
            resourceInputs["bucket"] = state?.bucket;
            resourceInputs["logDeliveryUserPermission"] = state?.logDeliveryUserPermission;
            resourceInputs["ownerPermission"] = state?.ownerPermission;
            resourceInputs["publicPermission"] = state?.publicPermission;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as ObsBucketAclArgs | undefined;
            if (args?.bucket === undefined && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            resourceInputs["accountPermissions"] = args?.accountPermissions;
            resourceInputs["bucket"] = args?.bucket;
            resourceInputs["logDeliveryUserPermission"] = args?.logDeliveryUserPermission;
            resourceInputs["ownerPermission"] = args?.ownerPermission;
            resourceInputs["publicPermission"] = args?.publicPermission;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ObsBucketAcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ObsBucketAcl resources.
 */
export interface ObsBucketAclState {
    /**
     * Specifies the account permissions.
     */
    accountPermissions?: pulumi.Input<pulumi.Input<inputs.ObsBucketAclAccountPermission>[]>;
    /**
     * Specifies the name of the bucket to which to set the acl.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Specifies the log delivery user permission.
     */
    logDeliveryUserPermission?: pulumi.Input<inputs.ObsBucketAclLogDeliveryUserPermission>;
    /**
     * Specifies the bucket owner permission.
     */
    ownerPermission?: pulumi.Input<inputs.ObsBucketAclOwnerPermission>;
    /**
     * Specifies the public permission.
     */
    publicPermission?: pulumi.Input<inputs.ObsBucketAclPublicPermission>;
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObsBucketAcl resource.
 */
export interface ObsBucketAclArgs {
    /**
     * Specifies the account permissions.
     */
    accountPermissions?: pulumi.Input<pulumi.Input<inputs.ObsBucketAclAccountPermission>[]>;
    /**
     * Specifies the name of the bucket to which to set the acl.
     */
    bucket: pulumi.Input<string>;
    /**
     * Specifies the log delivery user permission.
     */
    logDeliveryUserPermission?: pulumi.Input<inputs.ObsBucketAclLogDeliveryUserPermission>;
    /**
     * Specifies the bucket owner permission.
     */
    ownerPermission?: pulumi.Input<inputs.ObsBucketAclOwnerPermission>;
    /**
     * Specifies the public permission.
     */
    publicPermission?: pulumi.Input<inputs.ObsBucketAclPublicPermission>;
    region?: pulumi.Input<string>;
}

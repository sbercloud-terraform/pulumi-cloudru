# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ApigApiCheckArgs', 'ApigApiCheck']

@pulumi.input_type
class ApigApiCheckArgs:
    def __init__(__self__, *,
                 instance_id: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 req_method: Optional[pulumi.Input[_builtins.str]] = None,
                 req_uri: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ApigApiCheck resource.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] type: The type of the API to be checked.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be excluded from the check.
        :param pulumi.Input[_builtins.str] group_id: The ID of the group to which the API belongs.
        :param pulumi.Input[_builtins.str] match_mode: The matching mode of the API.
        :param pulumi.Input[_builtins.str] name: The name of the API.
        :param pulumi.Input[_builtins.str] req_method: The request method of the API.
        :param pulumi.Input[_builtins.str] req_uri: The request path of the API.
        """
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "type", type)
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if match_mode is not None:
            pulumi.set(__self__, "match_mode", match_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if req_method is not None:
            pulumi.set(__self__, "req_method", req_method)
        if req_uri is not None:
            pulumi.set(__self__, "req_uri", req_uri)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the API to be checked.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the API to be excluded from the check.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the group to which the API belongs.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The matching mode of the API.
        """
        return pulumi.get(self, "match_mode")

    @match_mode.setter
    def match_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "match_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the API.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="reqMethod")
    def req_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request method of the API.
        """
        return pulumi.get(self, "req_method")

    @req_method.setter
    def req_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "req_method", value)

    @_builtins.property
    @pulumi.getter(name="reqUri")
    def req_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request path of the API.
        """
        return pulumi.get(self, "req_uri")

    @req_uri.setter
    def req_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "req_uri", value)


@pulumi.input_type
class _ApigApiCheckState:
    def __init__(__self__, *,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 req_method: Optional[pulumi.Input[_builtins.str]] = None,
                 req_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ApigApiCheck resources.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be excluded from the check.
        :param pulumi.Input[_builtins.str] group_id: The ID of the group to which the API belongs.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] match_mode: The matching mode of the API.
        :param pulumi.Input[_builtins.str] name: The name of the API.
        :param pulumi.Input[_builtins.str] req_method: The request method of the API.
        :param pulumi.Input[_builtins.str] req_uri: The request path of the API.
        :param pulumi.Input[_builtins.str] type: The type of the API to be checked.
        """
        if api_id is not None:
            pulumi.set(__self__, "api_id", api_id)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if match_mode is not None:
            pulumi.set(__self__, "match_mode", match_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if req_method is not None:
            pulumi.set(__self__, "req_method", req_method)
        if req_uri is not None:
            pulumi.set(__self__, "req_uri", req_uri)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the API to be excluded from the check.
        """
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "api_id", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the group to which the API belongs.
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "group_id", value)

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @_builtins.property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The matching mode of the API.
        """
        return pulumi.get(self, "match_mode")

    @match_mode.setter
    def match_mode(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "match_mode", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the API.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="reqMethod")
    def req_method(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request method of the API.
        """
        return pulumi.get(self, "req_method")

    @req_method.setter
    def req_method(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "req_method", value)

    @_builtins.property
    @pulumi.getter(name="reqUri")
    def req_uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The request path of the API.
        """
        return pulumi.get(self, "req_uri")

    @req_uri.setter
    def req_uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "req_uri", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the API to be checked.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("cloudru:index/apigApiCheck:ApigApiCheck")
class ApigApiCheck(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 req_method: Optional[pulumi.Input[_builtins.str]] = None,
                 req_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a ApigApiCheck resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be excluded from the check.
        :param pulumi.Input[_builtins.str] group_id: The ID of the group to which the API belongs.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] match_mode: The matching mode of the API.
        :param pulumi.Input[_builtins.str] name: The name of the API.
        :param pulumi.Input[_builtins.str] req_method: The request method of the API.
        :param pulumi.Input[_builtins.str] req_uri: The request path of the API.
        :param pulumi.Input[_builtins.str] type: The type of the API to be checked.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApigApiCheckArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ApigApiCheck resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApigApiCheckArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApigApiCheckArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                 match_mode: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 req_method: Optional[pulumi.Input[_builtins.str]] = None,
                 req_uri: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApigApiCheckArgs.__new__(ApigApiCheckArgs)

            __props__.__dict__["api_id"] = api_id
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["group_id"] = group_id
            if instance_id is None and not opts.urn:
                raise TypeError("Missing required property 'instance_id'")
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["match_mode"] = match_mode
            __props__.__dict__["name"] = name
            __props__.__dict__["region"] = region
            __props__.__dict__["req_method"] = req_method
            __props__.__dict__["req_uri"] = req_uri
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(ApigApiCheck, __self__).__init__(
            'cloudru:index/apigApiCheck:ApigApiCheck',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_id: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            group_id: Optional[pulumi.Input[_builtins.str]] = None,
            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
            match_mode: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            req_method: Optional[pulumi.Input[_builtins.str]] = None,
            req_uri: Optional[pulumi.Input[_builtins.str]] = None,
            type: Optional[pulumi.Input[_builtins.str]] = None) -> 'ApigApiCheck':
        """
        Get an existing ApigApiCheck resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] api_id: The ID of the API to be excluded from the check.
        :param pulumi.Input[_builtins.str] group_id: The ID of the group to which the API belongs.
        :param pulumi.Input[_builtins.str] instance_id: The ID of the dedicated instance to which the API belongs.
        :param pulumi.Input[_builtins.str] match_mode: The matching mode of the API.
        :param pulumi.Input[_builtins.str] name: The name of the API.
        :param pulumi.Input[_builtins.str] req_method: The request method of the API.
        :param pulumi.Input[_builtins.str] req_uri: The request path of the API.
        :param pulumi.Input[_builtins.str] type: The type of the API to be checked.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApigApiCheckState.__new__(_ApigApiCheckState)

        __props__.__dict__["api_id"] = api_id
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["match_mode"] = match_mode
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["req_method"] = req_method
        __props__.__dict__["req_uri"] = req_uri
        __props__.__dict__["type"] = type
        return ApigApiCheck(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the API to be excluded from the check.
        """
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID of the group to which the API belongs.
        """
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the dedicated instance to which the API belongs.
        """
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="matchMode")
    def match_mode(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The matching mode of the API.
        """
        return pulumi.get(self, "match_mode")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the API.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="reqMethod")
    def req_method(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The request method of the API.
        """
        return pulumi.get(self, "req_method")

    @_builtins.property
    @pulumi.getter(name="reqUri")
    def req_uri(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The request path of the API.
        """
        return pulumi.get(self, "req_uri")

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the API to be checked.
        """
        return pulumi.get(self, "type")


// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// The VPC Peering Connection data source provides details about a specific VPC peering connection.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := vpc.GetVpc(ctx, &vpc.GetVpcArgs{
//				Name: pulumi.StringRef("vpc"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			peerVpc, err := vpc.GetVpc(ctx, &vpc.GetVpcArgs{
//				Name: pulumi.StringRef("peer_vpc"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			peering, err := vpc.GetPeeringConnection(ctx, &vpc.GetPeeringConnectionArgs{
//				VpcId:     pulumi.StringRef(vpc.Id),
//				PeerVpcId: pulumi.StringRef(peerVpc.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewRoute(ctx, "vpc_route", &vpc.RouteArgs{
//				Type:        pulumi.String("peering"),
//				Nexthop:     pulumi.String(peering.Id),
//				Destination: pulumi.String("192.168.0.0/16"),
//				VpcId:       pulumi.String(vpc.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPeeringConnection(ctx *pulumi.Context, args *LookupPeeringConnectionArgs, opts ...pulumi.InvokeOption) (*LookupPeeringConnectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPeeringConnectionResult
	err := ctx.Invoke("sbercloud:Vpc/getPeeringConnection:getPeeringConnection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPeeringConnection.
type LookupPeeringConnectionArgs struct {
	// The ID of the specific VPC Peering Connection to retrieve.
	Id *string `pulumi:"id"`
	// The name of the specific VPC Peering Connection to retrieve.
	Name *string `pulumi:"name"`
	// The Tenant ID of the accepter/peer VPC of the specific VPC Peering Connection to
	// retrieve.
	PeerTenantId *string `pulumi:"peerTenantId"`
	// The ID of the accepter/peer VPC of the specific VPC Peering Connection to retrieve.
	PeerVpcId *string `pulumi:"peerVpcId"`
	// The region in which to obtain the VPC Peering Connection. If omitted, the provider-level
	// region will be used.
	Region *string `pulumi:"region"`
	// The status of the specific VPC Peering Connection to retrieve.
	Status *string `pulumi:"status"`
	// The ID of the requester VPC of the specific VPC Peering Connection to retrieve.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getPeeringConnection.
type LookupPeeringConnectionResult struct {
	Description  string `pulumi:"description"`
	Id           string `pulumi:"id"`
	Name         string `pulumi:"name"`
	PeerTenantId string `pulumi:"peerTenantId"`
	PeerVpcId    string `pulumi:"peerVpcId"`
	Region       string `pulumi:"region"`
	Status       string `pulumi:"status"`
	VpcId        string `pulumi:"vpcId"`
}

func LookupPeeringConnectionOutput(ctx *pulumi.Context, args LookupPeeringConnectionOutputArgs, opts ...pulumi.InvokeOption) LookupPeeringConnectionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPeeringConnectionResultOutput, error) {
			args := v.(LookupPeeringConnectionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Vpc/getPeeringConnection:getPeeringConnection", args, LookupPeeringConnectionResultOutput{}, options).(LookupPeeringConnectionResultOutput), nil
		}).(LookupPeeringConnectionResultOutput)
}

// A collection of arguments for invoking getPeeringConnection.
type LookupPeeringConnectionOutputArgs struct {
	// The ID of the specific VPC Peering Connection to retrieve.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the specific VPC Peering Connection to retrieve.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The Tenant ID of the accepter/peer VPC of the specific VPC Peering Connection to
	// retrieve.
	PeerTenantId pulumi.StringPtrInput `pulumi:"peerTenantId"`
	// The ID of the accepter/peer VPC of the specific VPC Peering Connection to retrieve.
	PeerVpcId pulumi.StringPtrInput `pulumi:"peerVpcId"`
	// The region in which to obtain the VPC Peering Connection. If omitted, the provider-level
	// region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The status of the specific VPC Peering Connection to retrieve.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The ID of the requester VPC of the specific VPC Peering Connection to retrieve.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (LookupPeeringConnectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPeeringConnectionArgs)(nil)).Elem()
}

// A collection of values returned by getPeeringConnection.
type LookupPeeringConnectionResultOutput struct{ *pulumi.OutputState }

func (LookupPeeringConnectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPeeringConnectionResult)(nil)).Elem()
}

func (o LookupPeeringConnectionResultOutput) ToLookupPeeringConnectionResultOutput() LookupPeeringConnectionResultOutput {
	return o
}

func (o LookupPeeringConnectionResultOutput) ToLookupPeeringConnectionResultOutputWithContext(ctx context.Context) LookupPeeringConnectionResultOutput {
	return o
}

func (o LookupPeeringConnectionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringConnectionResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupPeeringConnectionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringConnectionResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPeeringConnectionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringConnectionResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupPeeringConnectionResultOutput) PeerTenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringConnectionResult) string { return v.PeerTenantId }).(pulumi.StringOutput)
}

func (o LookupPeeringConnectionResultOutput) PeerVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringConnectionResult) string { return v.PeerVpcId }).(pulumi.StringOutput)
}

func (o LookupPeeringConnectionResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringConnectionResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupPeeringConnectionResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringConnectionResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupPeeringConnectionResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPeeringConnectionResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPeeringConnectionResultOutput{})
}

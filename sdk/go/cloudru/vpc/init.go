// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "sbercloud:Vpc/addressGroup:AddressGroup":
		r = &AddressGroup{}
	case "sbercloud:Vpc/bandwidth:Bandwidth":
		r = &Bandwidth{}
	case "sbercloud:Vpc/eip:Eip":
		r = &Eip{}
	case "sbercloud:Vpc/peeringConnection:PeeringConnection":
		r = &PeeringConnection{}
	case "sbercloud:Vpc/peeringConnectionAccepter:PeeringConnectionAccepter":
		r = &PeeringConnectionAccepter{}
	case "sbercloud:Vpc/route:Route":
		r = &Route{}
	case "sbercloud:Vpc/routeTable:RouteTable":
		r = &RouteTable{}
	case "sbercloud:Vpc/secgroup:Secgroup":
		r = &Secgroup{}
	case "sbercloud:Vpc/secgroupRule:SecgroupRule":
		r = &SecgroupRule{}
	case "sbercloud:Vpc/subnet:Subnet":
		r = &Subnet{}
	case "sbercloud:Vpc/vip:Vip":
		r = &Vip{}
	case "sbercloud:Vpc/vipAssociate:VipAssociate":
		r = &VipAssociate{}
	case "sbercloud:Vpc/vpc:Vpc":
		r = &Vpc{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/addressGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/bandwidth",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/eip",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/peeringConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/peeringConnectionAccepter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/route",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/routeTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/secgroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/secgroupRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/subnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/vip",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/vipAssociate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"sbercloud",
		"Vpc/vpc",
		&module{version},
	)
}

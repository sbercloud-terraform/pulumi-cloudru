// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages an ELB certificate resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const certificate1 = new sbercloud.ElbCertificate("certificate_1", {
 *     name: "certificate_1",
 *     description: "terraform test certificate",
 *     domain: "www.elb.com",
 *     privateKey: `-----BEGIN RSA PRIVATE KEY-----
 * MIIEowIBAAKCAQEAwZ5UJULAjWr7p6FVwGRQRjFN2s8tZ/6LC3X82fajpVsYqF1x
 * qEuUDndDXVD09E4u83MS6HO6a3bIVQDp6/klnYldiE6Vp8HH5BSKaCWKVg8lGWg1
 * UM9wZFnlryi14KgmpIFmcu9nA8yV/6MZAe6RSDmb3iyNBmiZ8aZhGw2pI1YwR+15
 * MVqFFGB+7ExkziROi7L8CFCyCezK2/oOOvQsH1dzQ8z1JXWdg8/9Zx7Ktvgwu5PQ
 * M3cJtSHX6iBPOkMU8Z8TugLlTqQXKZOEgwajwvQ5mf2DPkVgM08XAgaLJcLigwD5
 * 13koAdtJd5v+9irw+5LAuO3JclqwTvwy7u/YwwIDAQABAoIBACU9S5fjD9/jTMXA
 * DRs08A+gGgZUxLn0xk+NAPX3LyB1tfdkCaFB8BccLzO6h3KZuwQOBPv6jkdvEDbx
 * Nwyw3eA/9GJsIvKiHc0rejdvyPymaw9I8MA7NbXHaJrY7KpqDQyk6sx+aUTcy5jg
 * iMXLWdwXYHhJ/1HVOo603oZyiS6HZeYU089NDUcX+1SJi3e5Ke0gPVXEqCq1O11/
 * rh24bMxnwZo4PKBWdcMBN5Zf/4ij9vrZE+fFzW7vGBO48A5lvZxWU2U5t/OZQRtN
 * 1uLOHmMFa0FIF2aWbTVfwdUWAFsvAOkHj9VV8BXOUwKOUuEktdkfAlvrxmsFrO/H
 * yDeYYPkCgYEA/S55CBbR0sMXpSZ56uRn8JHApZJhgkgvYr+FqDlJq/e92nAzf01P
 * RoEBUajwrnf1ycevN/SDfbtWzq2XJGqhWdJmtpO16b7KBsC6BdRcH6dnOYh31jgA
 * vABMIP3wzI4zSVTyxRE8LDuboytF1mSCeV5tHYPQTZNwrplDnLQhywcCgYEAw8Yc
 * Uk/eiFr3hfH/ZohMfV5p82Qp7DNIGRzw8YtVG/3+vNXrAXW1VhugNhQY6L+zLtJC
 * aKn84ooup0m3YCg0hvINqJuvzfsuzQgtjTXyaE0cEwsjUusOmiuj09vVx/3U7siK
 * Hdjd2ICPCvQ6Q8tdi8jV320gMs05AtaBkZdsiWUCgYEAtLw4Kk4f+xTKDFsrLUNf
 * 75wcqhWVBiwBp7yQ7UX4EYsJPKZcHMRTk0EEcAbpyaJZE3I44vjp5ReXIHNLMfPs
 * uvI34J4Rfot0LN3n7cFrAi2+wpNo+MOBwrNzpRmijGP2uKKrq4JiMjFbKV/6utGF
 * Up7VxfwS904JYpqGaZctiIECgYA1A6nZtF0riY6ry/uAdXpZHL8ONNqRZtWoT0kD
 * 79otSVu5ISiRbaGcXsDExC52oKrSDAgFtbqQUiEOFg09UcXfoR6HwRkba2CiDwve
 * yHQLQI5Qrdxz8Mk0gIrNrSM4FAmcW9vi9z4kCbQyoC5C+4gqeUlJRpDIkQBWP2Y4
 * 2ct/bQKBgHv8qCsQTZphOxc31BJPa2xVhuv18cEU3XLUrVfUZ/1f43JhLp7gynS2
 * ep++LKUi9D0VGXY8bqvfJjbECoCeu85vl8NpCXwe/LoVoIn+7KaVIZMwqoGMfgNl
 * nEqm7HWkNxHhf8A6En/IjleuddS1sf9e/x+TJN1Xhnt9W6pe7Fk1
 * -----END RSA PRIVATE KEY-----
 * `,
 *     certificate: `-----BEGIN CERTIFICATE-----
 * MIIDpTCCAo2gAwIBAgIJAKdmmOBYnFvoMA0GCSqGSIb3DQEBCwUAMGkxCzAJBgNV
 * BAYTAnh4MQswCQYDVQQIDAJ4eDELMAkGA1UEBwwCeHgxCzAJBgNVBAoMAnh4MQsw
 * CQYDVQQLDAJ4eDELMAkGA1UEAwwCeHgxGTAXBgkqhkiG9w0BCQEWCnh4QDE2My5j
 * b20wHhcNMTcxMjA0MDM0MjQ5WhcNMjAxMjAzMDM0MjQ5WjBpMQswCQYDVQQGEwJ4
 * eDELMAkGA1UECAwCeHgxCzAJBgNVBAcMAnh4MQswCQYDVQQKDAJ4eDELMAkGA1UE
 * CwwCeHgxCzAJBgNVBAMMAnh4MRkwFwYJKoZIhvcNAQkBFgp4eEAxNjMuY29tMIIB
 * IjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwZ5UJULAjWr7p6FVwGRQRjFN
 * 2s8tZ/6LC3X82fajpVsYqF1xqEuUDndDXVD09E4u83MS6HO6a3bIVQDp6/klnYld
 * iE6Vp8HH5BSKaCWKVg8lGWg1UM9wZFnlryi14KgmpIFmcu9nA8yV/6MZAe6RSDmb
 * 3iyNBmiZ8aZhGw2pI1YwR+15MVqFFGB+7ExkziROi7L8CFCyCezK2/oOOvQsH1dz
 * Q8z1JXWdg8/9Zx7Ktvgwu5PQM3cJtSHX6iBPOkMU8Z8TugLlTqQXKZOEgwajwvQ5
 * mf2DPkVgM08XAgaLJcLigwD513koAdtJd5v+9irw+5LAuO3JclqwTvwy7u/YwwID
 * AQABo1AwTjAdBgNVHQ4EFgQUo5A2tIu+bcUfvGTD7wmEkhXKFjcwHwYDVR0jBBgw
 * FoAUo5A2tIu+bcUfvGTD7wmEkhXKFjcwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B
 * AQsFAAOCAQEAWJ2rS6Mvlqk3GfEpboezx2J3X7l1z8Sxoqg6ntwB+rezvK3mc9H0
 * 83qcVeUcoH+0A0lSHyFN4FvRQL6X1hEheHarYwJK4agb231vb5erasuGO463eYEG
 * r4SfTuOm7SyiV2xxbaBKrXJtpBp4WLL/s+LF+nklKjaOxkmxUX0sM4CTA7uFJypY
 * c8Tdr8lDDNqoUtMD8BrUCJi+7lmMXRcC3Qi3oZJW76ja+kZA5mKVFPd1ATih8TbA
 * i34R7EQDtFeiSvBdeKRsPp8c0KT8H1B4lXNkkCQs2WX5p4lm99+ZtLD4glw8x6Ic
 * i1YhgnQbn5E0hz55OLu5jvOkKQjPCW+8Kg==
 * -----END CERTIFICATE-----
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * ELB certificate can be imported using the certificate ID, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:index/elbCertificate:ElbCertificate certificate_1 5c20fdad-7288-11eb-b817-0255ac10158b
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason. The missing attributes include: `enterprise_project_id`.
 *
 * It is generally recommended running `pulumi preview` after importing a certificate.
 *
 * You can then decide if changes should be applied to the certificate, or the resource
 *
 * definition should be updated to align with the certificate. Also you can ignore changes as below.
 *
 * resource "sbercloud_elb_certificate" "certificate_1" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       enterprise_project_id,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class ElbCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ElbCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElbCertificateState, opts?: pulumi.CustomResourceOptions): ElbCertificate {
        return new ElbCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/elbCertificate:ElbCertificate';

    /**
     * Returns true if the given object is an instance of ElbCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElbCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElbCertificate.__pulumiType;
    }

    /**
     * The public encrypted key of the Certificate, PEM format.
     */
    declare public readonly certificate: pulumi.Output<string>;
    declare public /*out*/ readonly commonName: pulumi.Output<string>;
    /**
     * Indicates the creation time.
     */
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    /**
     * Human-readable description for the Certificate.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The domain of the Certificate. The value contains a maximum of 100 characters. This
     * parameter is valid only when `type` is set to "server".
     */
    declare public readonly domain: pulumi.Output<string | undefined>;
    declare public readonly encCertificate: pulumi.Output<string | undefined>;
    declare public readonly encPrivateKey: pulumi.Output<string | undefined>;
    /**
     * The enterprise project id of the certificate.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * Indicates the expire time.
     */
    declare public /*out*/ readonly expireTime: pulumi.Output<string>;
    declare public /*out*/ readonly fingerprint: pulumi.Output<string>;
    /**
     * Human-readable name for the Certificate. Does not have to be unique.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The private encrypted key of the Certificate, PEM format. This parameter is valid
     * and mandatory only when `type` is set to "server".
     */
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    /**
     * The region in which to create the ELB certificate resource. If omitted, the
     * provider-level region will be used. Changing this creates a new certificate.
     */
    declare public readonly region: pulumi.Output<string>;
    declare public readonly scmCertificateId: pulumi.Output<string>;
    declare public /*out*/ readonly subjectAlternativeNames: pulumi.Output<string[]>;
    /**
     * Specifies the certificate type. The default value is "server". The value can be
     * one of the following:
     * + server: indicates the server certificate.
     * + client: indicates the CA certificate.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * Indicates the update time.
     */
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;

    /**
     * Create a ElbCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElbCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElbCertificateArgs | ElbCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElbCertificateState | undefined;
            resourceInputs["certificate"] = state?.certificate;
            resourceInputs["commonName"] = state?.commonName;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["description"] = state?.description;
            resourceInputs["domain"] = state?.domain;
            resourceInputs["encCertificate"] = state?.encCertificate;
            resourceInputs["encPrivateKey"] = state?.encPrivateKey;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["expireTime"] = state?.expireTime;
            resourceInputs["fingerprint"] = state?.fingerprint;
            resourceInputs["name"] = state?.name;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["region"] = state?.region;
            resourceInputs["scmCertificateId"] = state?.scmCertificateId;
            resourceInputs["subjectAlternativeNames"] = state?.subjectAlternativeNames;
            resourceInputs["type"] = state?.type;
            resourceInputs["updateTime"] = state?.updateTime;
        } else {
            const args = argsOrState as ElbCertificateArgs | undefined;
            if (args?.certificate === undefined && !opts.urn) {
                throw new Error("Missing required property 'certificate'");
            }
            resourceInputs["certificate"] = args?.certificate;
            resourceInputs["description"] = args?.description;
            resourceInputs["domain"] = args?.domain;
            resourceInputs["encCertificate"] = args?.encCertificate;
            resourceInputs["encPrivateKey"] = args?.encPrivateKey;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["name"] = args?.name;
            resourceInputs["privateKey"] = args?.privateKey;
            resourceInputs["region"] = args?.region;
            resourceInputs["scmCertificateId"] = args?.scmCertificateId;
            resourceInputs["type"] = args?.type;
            resourceInputs["commonName"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["expireTime"] = undefined /*out*/;
            resourceInputs["fingerprint"] = undefined /*out*/;
            resourceInputs["subjectAlternativeNames"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElbCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElbCertificate resources.
 */
export interface ElbCertificateState {
    /**
     * The public encrypted key of the Certificate, PEM format.
     */
    certificate?: pulumi.Input<string>;
    commonName?: pulumi.Input<string>;
    /**
     * Indicates the creation time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Human-readable description for the Certificate.
     */
    description?: pulumi.Input<string>;
    /**
     * The domain of the Certificate. The value contains a maximum of 100 characters. This
     * parameter is valid only when `type` is set to "server".
     */
    domain?: pulumi.Input<string>;
    encCertificate?: pulumi.Input<string>;
    encPrivateKey?: pulumi.Input<string>;
    /**
     * The enterprise project id of the certificate.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Indicates the expire time.
     */
    expireTime?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    /**
     * Human-readable name for the Certificate. Does not have to be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The private encrypted key of the Certificate, PEM format. This parameter is valid
     * and mandatory only when `type` is set to "server".
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The region in which to create the ELB certificate resource. If omitted, the
     * provider-level region will be used. Changing this creates a new certificate.
     */
    region?: pulumi.Input<string>;
    scmCertificateId?: pulumi.Input<string>;
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the certificate type. The default value is "server". The value can be
     * one of the following:
     * + server: indicates the server certificate.
     * + client: indicates the CA certificate.
     */
    type?: pulumi.Input<string>;
    /**
     * Indicates the update time.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElbCertificate resource.
 */
export interface ElbCertificateArgs {
    /**
     * The public encrypted key of the Certificate, PEM format.
     */
    certificate: pulumi.Input<string>;
    /**
     * Human-readable description for the Certificate.
     */
    description?: pulumi.Input<string>;
    /**
     * The domain of the Certificate. The value contains a maximum of 100 characters. This
     * parameter is valid only when `type` is set to "server".
     */
    domain?: pulumi.Input<string>;
    encCertificate?: pulumi.Input<string>;
    encPrivateKey?: pulumi.Input<string>;
    /**
     * The enterprise project id of the certificate.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Human-readable name for the Certificate. Does not have to be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * The private encrypted key of the Certificate, PEM format. This parameter is valid
     * and mandatory only when `type` is set to "server".
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The region in which to create the ELB certificate resource. If omitted, the
     * provider-level region will be used. Changing this creates a new certificate.
     */
    region?: pulumi.Input<string>;
    scmCertificateId?: pulumi.Input<string>;
    /**
     * Specifies the certificate type. The default value is "server". The value can be
     * one of the following:
     * + server: indicates the server certificate.
     * + client: indicates the CA certificate.
     */
    type?: pulumi.Input<string>;
}

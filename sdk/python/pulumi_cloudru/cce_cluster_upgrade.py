# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CceClusterUpgradeArgs', 'CceClusterUpgrade']

@pulumi.input_type
class CceClusterUpgradeArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[_builtins.str],
                 strategy: pulumi.Input['CceClusterUpgradeStrategyArgs'],
                 target_version: pulumi.Input[_builtins.str],
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterUpgradeAddonArgs']]]] = None,
                 current_version: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_postcheck: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CceClusterUpgrade resource.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "strategy", strategy)
        pulumi.set(__self__, "target_version", target_version)
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_postcheck is not None:
            pulumi.set(__self__, "is_postcheck", is_postcheck)
        if is_snapshot is not None:
            pulumi.set(__self__, "is_snapshot", is_snapshot)
        if node_order is not None:
            pulumi.set(__self__, "node_order", node_order)
        if nodepool_order is not None:
            pulumi.set(__self__, "nodepool_order", nodepool_order)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Input['CceClusterUpgradeStrategyArgs']:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: pulumi.Input['CceClusterUpgradeStrategyArgs']):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "target_version", value)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterUpgradeAddonArgs']]]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterUpgradeAddonArgs']]]]):
        pulumi.set(self, "addons", value)

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "current_version")

    @current_version.setter
    def current_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "current_version", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isPostcheck")
    def is_postcheck(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_postcheck")

    @is_postcheck.setter
    def is_postcheck(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_postcheck", value)

    @_builtins.property
    @pulumi.getter(name="isSnapshot")
    def is_snapshot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_snapshot")

    @is_snapshot.setter
    def is_snapshot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_snapshot", value)

    @_builtins.property
    @pulumi.getter(name="nodeOrder")
    def node_order(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "node_order")

    @node_order.setter
    def node_order(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_order", value)

    @_builtins.property
    @pulumi.getter(name="nodepoolOrder")
    def nodepool_order(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "nodepool_order")

    @nodepool_order.setter
    def nodepool_order(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "nodepool_order", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class _CceClusterUpgradeState:
    def __init__(__self__, *,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterUpgradeAddonArgs']]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 current_version: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_postcheck: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input['CceClusterUpgradeStrategyArgs']] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering CceClusterUpgrade resources.
        """
        if addons is not None:
            pulumi.set(__self__, "addons", addons)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if enable_force_new is not None:
            pulumi.set(__self__, "enable_force_new", enable_force_new)
        if is_postcheck is not None:
            pulumi.set(__self__, "is_postcheck", is_postcheck)
        if is_snapshot is not None:
            pulumi.set(__self__, "is_snapshot", is_snapshot)
        if node_order is not None:
            pulumi.set(__self__, "node_order", node_order)
        if nodepool_order is not None:
            pulumi.set(__self__, "nodepool_order", nodepool_order)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if target_version is not None:
            pulumi.set(__self__, "target_version", target_version)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterUpgradeAddonArgs']]]]:
        return pulumi.get(self, "addons")

    @addons.setter
    def addons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CceClusterUpgradeAddonArgs']]]]):
        pulumi.set(self, "addons", value)

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "current_version")

    @current_version.setter
    def current_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "current_version", value)

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @enable_force_new.setter
    def enable_force_new(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "enable_force_new", value)

    @_builtins.property
    @pulumi.getter(name="isPostcheck")
    def is_postcheck(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_postcheck")

    @is_postcheck.setter
    def is_postcheck(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_postcheck", value)

    @_builtins.property
    @pulumi.getter(name="isSnapshot")
    def is_snapshot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_snapshot")

    @is_snapshot.setter
    def is_snapshot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_snapshot", value)

    @_builtins.property
    @pulumi.getter(name="nodeOrder")
    def node_order(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "node_order")

    @node_order.setter
    def node_order(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "node_order", value)

    @_builtins.property
    @pulumi.getter(name="nodepoolOrder")
    def nodepool_order(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]]:
        return pulumi.get(self, "nodepool_order")

    @nodepool_order.setter
    def nodepool_order(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]]):
        pulumi.set(self, "nodepool_order", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input['CceClusterUpgradeStrategyArgs']]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input['CceClusterUpgradeStrategyArgs']]):
        pulumi.set(self, "strategy", value)

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "target_version")

    @target_version.setter
    def target_version(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "target_version", value)


@pulumi.type_token("cloudru:index/cceClusterUpgrade:CceClusterUpgrade")
class CceClusterUpgrade(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterUpgradeAddonArgs', 'CceClusterUpgradeAddonArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 current_version: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_postcheck: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[Union['CceClusterUpgradeStrategyArgs', 'CceClusterUpgradeStrategyArgsDict']]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Create a CceClusterUpgrade resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CceClusterUpgradeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CceClusterUpgrade resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CceClusterUpgradeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CceClusterUpgradeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterUpgradeAddonArgs', 'CceClusterUpgradeAddonArgsDict']]]]] = None,
                 cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
                 current_version: Optional[pulumi.Input[_builtins.str]] = None,
                 enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
                 is_postcheck: Optional[pulumi.Input[_builtins.bool]] = None,
                 is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
                 node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 strategy: Optional[pulumi.Input[Union['CceClusterUpgradeStrategyArgs', 'CceClusterUpgradeStrategyArgsDict']]] = None,
                 target_version: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CceClusterUpgradeArgs.__new__(CceClusterUpgradeArgs)

            __props__.__dict__["addons"] = addons
            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["current_version"] = current_version
            __props__.__dict__["enable_force_new"] = enable_force_new
            __props__.__dict__["is_postcheck"] = is_postcheck
            __props__.__dict__["is_snapshot"] = is_snapshot
            __props__.__dict__["node_order"] = node_order
            __props__.__dict__["nodepool_order"] = nodepool_order
            __props__.__dict__["region"] = region
            if strategy is None and not opts.urn:
                raise TypeError("Missing required property 'strategy'")
            __props__.__dict__["strategy"] = strategy
            if target_version is None and not opts.urn:
                raise TypeError("Missing required property 'target_version'")
            __props__.__dict__["target_version"] = target_version
        super(CceClusterUpgrade, __self__).__init__(
            'cloudru:index/cceClusterUpgrade:CceClusterUpgrade',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addons: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CceClusterUpgradeAddonArgs', 'CceClusterUpgradeAddonArgsDict']]]]] = None,
            cluster_id: Optional[pulumi.Input[_builtins.str]] = None,
            current_version: Optional[pulumi.Input[_builtins.str]] = None,
            enable_force_new: Optional[pulumi.Input[_builtins.str]] = None,
            is_postcheck: Optional[pulumi.Input[_builtins.bool]] = None,
            is_snapshot: Optional[pulumi.Input[_builtins.bool]] = None,
            node_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
            nodepool_order: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.int]]]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            strategy: Optional[pulumi.Input[Union['CceClusterUpgradeStrategyArgs', 'CceClusterUpgradeStrategyArgsDict']]] = None,
            target_version: Optional[pulumi.Input[_builtins.str]] = None) -> 'CceClusterUpgrade':
        """
        Get an existing CceClusterUpgrade resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CceClusterUpgradeState.__new__(_CceClusterUpgradeState)

        __props__.__dict__["addons"] = addons
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["current_version"] = current_version
        __props__.__dict__["enable_force_new"] = enable_force_new
        __props__.__dict__["is_postcheck"] = is_postcheck
        __props__.__dict__["is_snapshot"] = is_snapshot
        __props__.__dict__["node_order"] = node_order
        __props__.__dict__["nodepool_order"] = nodepool_order
        __props__.__dict__["region"] = region
        __props__.__dict__["strategy"] = strategy
        __props__.__dict__["target_version"] = target_version
        return CceClusterUpgrade(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def addons(self) -> pulumi.Output[Optional[Sequence['outputs.CceClusterUpgradeAddon']]]:
        return pulumi.get(self, "addons")

    @_builtins.property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "cluster_id")

    @_builtins.property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "current_version")

    @_builtins.property
    @pulumi.getter(name="enableForceNew")
    def enable_force_new(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "enable_force_new")

    @_builtins.property
    @pulumi.getter(name="isPostcheck")
    def is_postcheck(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "is_postcheck")

    @_builtins.property
    @pulumi.getter(name="isSnapshot")
    def is_snapshot(self) -> pulumi.Output[Optional[_builtins.bool]]:
        return pulumi.get(self, "is_snapshot")

    @_builtins.property
    @pulumi.getter(name="nodeOrder")
    def node_order(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "node_order")

    @_builtins.property
    @pulumi.getter(name="nodepoolOrder")
    def nodepool_order(self) -> pulumi.Output[Optional[Mapping[str, _builtins.int]]]:
        return pulumi.get(self, "nodepool_order")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def strategy(self) -> pulumi.Output['outputs.CceClusterUpgradeStrategy']:
        return pulumi.get(self, "strategy")

    @_builtins.property
    @pulumi.getter(name="targetVersion")
    def target_version(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "target_version")


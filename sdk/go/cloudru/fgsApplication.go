// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages an application within SberCloud.
//
// > Currently, only available in `cn-north-4` and `cn-east-3` regions.
//
// ## Example Usage
//
// ## Import
//
// Application can be imported using the `id`, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:index/fgsApplication:FgsApplication test <id>
// ```
//
// # Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
//
// API response.
//
// The missing attributes include: `template_id`, `agency_name`, `params`.
//
// It is generally recommended running `pulumi preview` after importing the application.
//
// # You can then decide if changes should be applied to the application, or the resource definition should be updated to
//
// align with the application. Also you can ignore changes as below.
//
// hcl
//
// resource "sbercloud_fgs_application" "test" {
//
//	...
//
//	lifecycle {
//
//	  ignore_changes = [
//
//	    template_id, agency_name,
//
//	  ]
//
//	}
//
// }
type FgsApplication struct {
	pulumi.CustomResourceState

	// Specifies the agency name used by the application.\
	// Changing this parameter will create a new resource.
	//
	// > If omitted, the service will automatically create an agency, please ensure that the tenant has IAM related
	// permissions. The agency will be deleted when the application is deleted.
	AgencyName pulumi.StringPtrOutput `pulumi:"agencyName"`
	// Specifies the description of the application.\
	// The description can contain a maximum of `1,024` characters.
	// Changing this parameter will create a new resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the application name.\
	// The name can contain a maximum of 60 characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the template parameters, in JSON format.\
	// Changing this parameter will create a new resource.
	Params pulumi.StringPtrOutput `pulumi:"params"`
	// Specifies the region in which to create an application.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The repository information.\
	// The repository structure is documented below.
	Repositories FgsApplicationRepositoryArrayOutput `pulumi:"repositories"`
	// The ID of the stack where the application is deployed.
	StackId pulumi.StringOutput `pulumi:"stackId"`
	// The list of the stack resources information.\
	// The stackResources structure is documented below.
	StackResources FgsApplicationStackResourceArrayOutput `pulumi:"stackResources"`
	// The repository status.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the ID of the template used by the application.\
	// Changing this parameter will create a new resource.
	TemplateId pulumi.StringPtrOutput `pulumi:"templateId"`
}

// NewFgsApplication registers a new resource with the given unique name, arguments, and options.
func NewFgsApplication(ctx *pulumi.Context,
	name string, args *FgsApplicationArgs, opts ...pulumi.ResourceOption) (*FgsApplication, error) {
	if args == nil {
		args = &FgsApplicationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FgsApplication
	err := ctx.RegisterResource("sbercloud:index/fgsApplication:FgsApplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFgsApplication gets an existing FgsApplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFgsApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FgsApplicationState, opts ...pulumi.ResourceOption) (*FgsApplication, error) {
	var resource FgsApplication
	err := ctx.ReadResource("sbercloud:index/fgsApplication:FgsApplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FgsApplication resources.
type fgsApplicationState struct {
	// Specifies the agency name used by the application.\
	// Changing this parameter will create a new resource.
	//
	// > If omitted, the service will automatically create an agency, please ensure that the tenant has IAM related
	// permissions. The agency will be deleted when the application is deleted.
	AgencyName *string `pulumi:"agencyName"`
	// Specifies the description of the application.\
	// The description can contain a maximum of `1,024` characters.
	// Changing this parameter will create a new resource.
	Description *string `pulumi:"description"`
	// Specifies the application name.\
	// The name can contain a maximum of 60 characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the template parameters, in JSON format.\
	// Changing this parameter will create a new resource.
	Params *string `pulumi:"params"`
	// Specifies the region in which to create an application.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// The repository information.\
	// The repository structure is documented below.
	Repositories []FgsApplicationRepository `pulumi:"repositories"`
	// The ID of the stack where the application is deployed.
	StackId *string `pulumi:"stackId"`
	// The list of the stack resources information.\
	// The stackResources structure is documented below.
	StackResources []FgsApplicationStackResource `pulumi:"stackResources"`
	// The repository status.
	Status *string `pulumi:"status"`
	// Specifies the ID of the template used by the application.\
	// Changing this parameter will create a new resource.
	TemplateId *string `pulumi:"templateId"`
}

type FgsApplicationState struct {
	// Specifies the agency name used by the application.\
	// Changing this parameter will create a new resource.
	//
	// > If omitted, the service will automatically create an agency, please ensure that the tenant has IAM related
	// permissions. The agency will be deleted when the application is deleted.
	AgencyName pulumi.StringPtrInput
	// Specifies the description of the application.\
	// The description can contain a maximum of `1,024` characters.
	// Changing this parameter will create a new resource.
	Description pulumi.StringPtrInput
	// Specifies the application name.\
	// The name can contain a maximum of 60 characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the template parameters, in JSON format.\
	// Changing this parameter will create a new resource.
	Params pulumi.StringPtrInput
	// Specifies the region in which to create an application.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// The repository information.\
	// The repository structure is documented below.
	Repositories FgsApplicationRepositoryArrayInput
	// The ID of the stack where the application is deployed.
	StackId pulumi.StringPtrInput
	// The list of the stack resources information.\
	// The stackResources structure is documented below.
	StackResources FgsApplicationStackResourceArrayInput
	// The repository status.
	Status pulumi.StringPtrInput
	// Specifies the ID of the template used by the application.\
	// Changing this parameter will create a new resource.
	TemplateId pulumi.StringPtrInput
}

func (FgsApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsApplicationState)(nil)).Elem()
}

type fgsApplicationArgs struct {
	// Specifies the agency name used by the application.\
	// Changing this parameter will create a new resource.
	//
	// > If omitted, the service will automatically create an agency, please ensure that the tenant has IAM related
	// permissions. The agency will be deleted when the application is deleted.
	AgencyName *string `pulumi:"agencyName"`
	// Specifies the description of the application.\
	// The description can contain a maximum of `1,024` characters.
	// Changing this parameter will create a new resource.
	Description *string `pulumi:"description"`
	// Specifies the application name.\
	// The name can contain a maximum of 60 characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// Specifies the template parameters, in JSON format.\
	// Changing this parameter will create a new resource.
	Params *string `pulumi:"params"`
	// Specifies the region in which to create an application.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the ID of the template used by the application.\
	// Changing this parameter will create a new resource.
	TemplateId *string `pulumi:"templateId"`
}

// The set of arguments for constructing a FgsApplication resource.
type FgsApplicationArgs struct {
	// Specifies the agency name used by the application.\
	// Changing this parameter will create a new resource.
	//
	// > If omitted, the service will automatically create an agency, please ensure that the tenant has IAM related
	// permissions. The agency will be deleted when the application is deleted.
	AgencyName pulumi.StringPtrInput
	// Specifies the description of the application.\
	// The description can contain a maximum of `1,024` characters.
	// Changing this parameter will create a new resource.
	Description pulumi.StringPtrInput
	// Specifies the application name.\
	// The name can contain a maximum of 60 characters and must start with a letter and end with a letter or digit.
	// Only letters, digits, underscores (_) and hyphens (-) are allowed.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput
	// Specifies the template parameters, in JSON format.\
	// Changing this parameter will create a new resource.
	Params pulumi.StringPtrInput
	// Specifies the region in which to create an application.\
	// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the ID of the template used by the application.\
	// Changing this parameter will create a new resource.
	TemplateId pulumi.StringPtrInput
}

func (FgsApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsApplicationArgs)(nil)).Elem()
}

type FgsApplicationInput interface {
	pulumi.Input

	ToFgsApplicationOutput() FgsApplicationOutput
	ToFgsApplicationOutputWithContext(ctx context.Context) FgsApplicationOutput
}

func (*FgsApplication) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsApplication)(nil)).Elem()
}

func (i *FgsApplication) ToFgsApplicationOutput() FgsApplicationOutput {
	return i.ToFgsApplicationOutputWithContext(context.Background())
}

func (i *FgsApplication) ToFgsApplicationOutputWithContext(ctx context.Context) FgsApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsApplicationOutput)
}

// FgsApplicationArrayInput is an input type that accepts FgsApplicationArray and FgsApplicationArrayOutput values.
// You can construct a concrete instance of `FgsApplicationArrayInput` via:
//
//	FgsApplicationArray{ FgsApplicationArgs{...} }
type FgsApplicationArrayInput interface {
	pulumi.Input

	ToFgsApplicationArrayOutput() FgsApplicationArrayOutput
	ToFgsApplicationArrayOutputWithContext(context.Context) FgsApplicationArrayOutput
}

type FgsApplicationArray []FgsApplicationInput

func (FgsApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsApplication)(nil)).Elem()
}

func (i FgsApplicationArray) ToFgsApplicationArrayOutput() FgsApplicationArrayOutput {
	return i.ToFgsApplicationArrayOutputWithContext(context.Background())
}

func (i FgsApplicationArray) ToFgsApplicationArrayOutputWithContext(ctx context.Context) FgsApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsApplicationArrayOutput)
}

// FgsApplicationMapInput is an input type that accepts FgsApplicationMap and FgsApplicationMapOutput values.
// You can construct a concrete instance of `FgsApplicationMapInput` via:
//
//	FgsApplicationMap{ "key": FgsApplicationArgs{...} }
type FgsApplicationMapInput interface {
	pulumi.Input

	ToFgsApplicationMapOutput() FgsApplicationMapOutput
	ToFgsApplicationMapOutputWithContext(context.Context) FgsApplicationMapOutput
}

type FgsApplicationMap map[string]FgsApplicationInput

func (FgsApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsApplication)(nil)).Elem()
}

func (i FgsApplicationMap) ToFgsApplicationMapOutput() FgsApplicationMapOutput {
	return i.ToFgsApplicationMapOutputWithContext(context.Background())
}

func (i FgsApplicationMap) ToFgsApplicationMapOutputWithContext(ctx context.Context) FgsApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsApplicationMapOutput)
}

type FgsApplicationOutput struct{ *pulumi.OutputState }

func (FgsApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsApplication)(nil)).Elem()
}

func (o FgsApplicationOutput) ToFgsApplicationOutput() FgsApplicationOutput {
	return o
}

func (o FgsApplicationOutput) ToFgsApplicationOutputWithContext(ctx context.Context) FgsApplicationOutput {
	return o
}

// Specifies the agency name used by the application.\
// Changing this parameter will create a new resource.
//
// > If omitted, the service will automatically create an agency, please ensure that the tenant has IAM related
// permissions. The agency will be deleted when the application is deleted.
func (o FgsApplicationOutput) AgencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsApplication) pulumi.StringPtrOutput { return v.AgencyName }).(pulumi.StringPtrOutput)
}

// Specifies the description of the application.\
// The description can contain a maximum of `1,024` characters.
// Changing this parameter will create a new resource.
func (o FgsApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsApplication) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the application name.\
// The name can contain a maximum of 60 characters and must start with a letter and end with a letter or digit.
// Only letters, digits, underscores (_) and hyphens (-) are allowed.
// Changing this parameter will create a new resource.
func (o FgsApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsApplication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the template parameters, in JSON format.\
// Changing this parameter will create a new resource.
func (o FgsApplicationOutput) Params() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsApplication) pulumi.StringPtrOutput { return v.Params }).(pulumi.StringPtrOutput)
}

// Specifies the region in which to create an application.\
// If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
func (o FgsApplicationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsApplication) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The repository information.\
// The repository structure is documented below.
func (o FgsApplicationOutput) Repositories() FgsApplicationRepositoryArrayOutput {
	return o.ApplyT(func(v *FgsApplication) FgsApplicationRepositoryArrayOutput { return v.Repositories }).(FgsApplicationRepositoryArrayOutput)
}

// The ID of the stack where the application is deployed.
func (o FgsApplicationOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsApplication) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

// The list of the stack resources information.\
// The stackResources structure is documented below.
func (o FgsApplicationOutput) StackResources() FgsApplicationStackResourceArrayOutput {
	return o.ApplyT(func(v *FgsApplication) FgsApplicationStackResourceArrayOutput { return v.StackResources }).(FgsApplicationStackResourceArrayOutput)
}

// The repository status.
func (o FgsApplicationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsApplication) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specifies the ID of the template used by the application.\
// Changing this parameter will create a new resource.
func (o FgsApplicationOutput) TemplateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FgsApplication) pulumi.StringPtrOutput { return v.TemplateId }).(pulumi.StringPtrOutput)
}

type FgsApplicationArrayOutput struct{ *pulumi.OutputState }

func (FgsApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsApplication)(nil)).Elem()
}

func (o FgsApplicationArrayOutput) ToFgsApplicationArrayOutput() FgsApplicationArrayOutput {
	return o
}

func (o FgsApplicationArrayOutput) ToFgsApplicationArrayOutputWithContext(ctx context.Context) FgsApplicationArrayOutput {
	return o
}

func (o FgsApplicationArrayOutput) Index(i pulumi.IntInput) FgsApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FgsApplication {
		return vs[0].([]*FgsApplication)[vs[1].(int)]
	}).(FgsApplicationOutput)
}

type FgsApplicationMapOutput struct{ *pulumi.OutputState }

func (FgsApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsApplication)(nil)).Elem()
}

func (o FgsApplicationMapOutput) ToFgsApplicationMapOutput() FgsApplicationMapOutput {
	return o
}

func (o FgsApplicationMapOutput) ToFgsApplicationMapOutputWithContext(ctx context.Context) FgsApplicationMapOutput {
	return o
}

func (o FgsApplicationMapOutput) MapIndex(k pulumi.StringInput) FgsApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FgsApplication {
		return vs[0].(map[string]*FgsApplication)[vs[1].(string)]
	}).(FgsApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FgsApplicationInput)(nil)).Elem(), &FgsApplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsApplicationArrayInput)(nil)).Elem(), FgsApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsApplicationMapInput)(nil)).Elem(), FgsApplicationMap{})
	pulumi.RegisterOutputType(FgsApplicationOutput{})
	pulumi.RegisterOutputType(FgsApplicationArrayOutput{})
	pulumi.RegisterOutputType(FgsApplicationMapOutput{})
}

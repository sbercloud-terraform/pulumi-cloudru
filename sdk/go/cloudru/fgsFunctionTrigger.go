// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type FgsFunctionTrigger struct {
	pulumi.CustomResourceState

	// The creation time of the function trigger.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The detailed configuration of the function trigger event, in JSON format.
	EventData pulumi.StringOutput `pulumi:"eventData"`
	// The function URN to which the function trigger belongs.
	FunctionUrn pulumi.StringOutput `pulumi:"functionUrn"`
	// The region where the function trigger is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The expected status of the function trigger.
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of the function trigger.
	Type pulumi.StringOutput `pulumi:"type"`
	// The latest update time of the function trigger.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewFgsFunctionTrigger registers a new resource with the given unique name, arguments, and options.
func NewFgsFunctionTrigger(ctx *pulumi.Context,
	name string, args *FgsFunctionTriggerArgs, opts ...pulumi.ResourceOption) (*FgsFunctionTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventData == nil {
		return nil, errors.New("invalid value for required argument 'EventData'")
	}
	if args.FunctionUrn == nil {
		return nil, errors.New("invalid value for required argument 'FunctionUrn'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FgsFunctionTrigger
	err := ctx.RegisterResource("sbercloud:index/fgsFunctionTrigger:FgsFunctionTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFgsFunctionTrigger gets an existing FgsFunctionTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFgsFunctionTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FgsFunctionTriggerState, opts ...pulumi.ResourceOption) (*FgsFunctionTrigger, error) {
	var resource FgsFunctionTrigger
	err := ctx.ReadResource("sbercloud:index/fgsFunctionTrigger:FgsFunctionTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FgsFunctionTrigger resources.
type fgsFunctionTriggerState struct {
	// The creation time of the function trigger.
	CreatedAt *string `pulumi:"createdAt"`
	// The detailed configuration of the function trigger event, in JSON format.
	EventData *string `pulumi:"eventData"`
	// The function URN to which the function trigger belongs.
	FunctionUrn *string `pulumi:"functionUrn"`
	// The region where the function trigger is located.
	Region *string `pulumi:"region"`
	// The expected status of the function trigger.
	Status *string `pulumi:"status"`
	// The type of the function trigger.
	Type *string `pulumi:"type"`
	// The latest update time of the function trigger.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type FgsFunctionTriggerState struct {
	// The creation time of the function trigger.
	CreatedAt pulumi.StringPtrInput
	// The detailed configuration of the function trigger event, in JSON format.
	EventData pulumi.StringPtrInput
	// The function URN to which the function trigger belongs.
	FunctionUrn pulumi.StringPtrInput
	// The region where the function trigger is located.
	Region pulumi.StringPtrInput
	// The expected status of the function trigger.
	Status pulumi.StringPtrInput
	// The type of the function trigger.
	Type pulumi.StringPtrInput
	// The latest update time of the function trigger.
	UpdatedAt pulumi.StringPtrInput
}

func (FgsFunctionTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionTriggerState)(nil)).Elem()
}

type fgsFunctionTriggerArgs struct {
	// The detailed configuration of the function trigger event, in JSON format.
	EventData string `pulumi:"eventData"`
	// The function URN to which the function trigger belongs.
	FunctionUrn string `pulumi:"functionUrn"`
	// The region where the function trigger is located.
	Region *string `pulumi:"region"`
	// The expected status of the function trigger.
	Status *string `pulumi:"status"`
	// The type of the function trigger.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a FgsFunctionTrigger resource.
type FgsFunctionTriggerArgs struct {
	// The detailed configuration of the function trigger event, in JSON format.
	EventData pulumi.StringInput
	// The function URN to which the function trigger belongs.
	FunctionUrn pulumi.StringInput
	// The region where the function trigger is located.
	Region pulumi.StringPtrInput
	// The expected status of the function trigger.
	Status pulumi.StringPtrInput
	// The type of the function trigger.
	Type pulumi.StringInput
}

func (FgsFunctionTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsFunctionTriggerArgs)(nil)).Elem()
}

type FgsFunctionTriggerInput interface {
	pulumi.Input

	ToFgsFunctionTriggerOutput() FgsFunctionTriggerOutput
	ToFgsFunctionTriggerOutputWithContext(ctx context.Context) FgsFunctionTriggerOutput
}

func (*FgsFunctionTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunctionTrigger)(nil)).Elem()
}

func (i *FgsFunctionTrigger) ToFgsFunctionTriggerOutput() FgsFunctionTriggerOutput {
	return i.ToFgsFunctionTriggerOutputWithContext(context.Background())
}

func (i *FgsFunctionTrigger) ToFgsFunctionTriggerOutputWithContext(ctx context.Context) FgsFunctionTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionTriggerOutput)
}

// FgsFunctionTriggerArrayInput is an input type that accepts FgsFunctionTriggerArray and FgsFunctionTriggerArrayOutput values.
// You can construct a concrete instance of `FgsFunctionTriggerArrayInput` via:
//
//	FgsFunctionTriggerArray{ FgsFunctionTriggerArgs{...} }
type FgsFunctionTriggerArrayInput interface {
	pulumi.Input

	ToFgsFunctionTriggerArrayOutput() FgsFunctionTriggerArrayOutput
	ToFgsFunctionTriggerArrayOutputWithContext(context.Context) FgsFunctionTriggerArrayOutput
}

type FgsFunctionTriggerArray []FgsFunctionTriggerInput

func (FgsFunctionTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunctionTrigger)(nil)).Elem()
}

func (i FgsFunctionTriggerArray) ToFgsFunctionTriggerArrayOutput() FgsFunctionTriggerArrayOutput {
	return i.ToFgsFunctionTriggerArrayOutputWithContext(context.Background())
}

func (i FgsFunctionTriggerArray) ToFgsFunctionTriggerArrayOutputWithContext(ctx context.Context) FgsFunctionTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionTriggerArrayOutput)
}

// FgsFunctionTriggerMapInput is an input type that accepts FgsFunctionTriggerMap and FgsFunctionTriggerMapOutput values.
// You can construct a concrete instance of `FgsFunctionTriggerMapInput` via:
//
//	FgsFunctionTriggerMap{ "key": FgsFunctionTriggerArgs{...} }
type FgsFunctionTriggerMapInput interface {
	pulumi.Input

	ToFgsFunctionTriggerMapOutput() FgsFunctionTriggerMapOutput
	ToFgsFunctionTriggerMapOutputWithContext(context.Context) FgsFunctionTriggerMapOutput
}

type FgsFunctionTriggerMap map[string]FgsFunctionTriggerInput

func (FgsFunctionTriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunctionTrigger)(nil)).Elem()
}

func (i FgsFunctionTriggerMap) ToFgsFunctionTriggerMapOutput() FgsFunctionTriggerMapOutput {
	return i.ToFgsFunctionTriggerMapOutputWithContext(context.Background())
}

func (i FgsFunctionTriggerMap) ToFgsFunctionTriggerMapOutputWithContext(ctx context.Context) FgsFunctionTriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsFunctionTriggerMapOutput)
}

type FgsFunctionTriggerOutput struct{ *pulumi.OutputState }

func (FgsFunctionTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsFunctionTrigger)(nil)).Elem()
}

func (o FgsFunctionTriggerOutput) ToFgsFunctionTriggerOutput() FgsFunctionTriggerOutput {
	return o
}

func (o FgsFunctionTriggerOutput) ToFgsFunctionTriggerOutputWithContext(ctx context.Context) FgsFunctionTriggerOutput {
	return o
}

// The creation time of the function trigger.
func (o FgsFunctionTriggerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTrigger) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The detailed configuration of the function trigger event, in JSON format.
func (o FgsFunctionTriggerOutput) EventData() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTrigger) pulumi.StringOutput { return v.EventData }).(pulumi.StringOutput)
}

// The function URN to which the function trigger belongs.
func (o FgsFunctionTriggerOutput) FunctionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTrigger) pulumi.StringOutput { return v.FunctionUrn }).(pulumi.StringOutput)
}

// The region where the function trigger is located.
func (o FgsFunctionTriggerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTrigger) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The expected status of the function trigger.
func (o FgsFunctionTriggerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTrigger) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of the function trigger.
func (o FgsFunctionTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTrigger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The latest update time of the function trigger.
func (o FgsFunctionTriggerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsFunctionTrigger) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type FgsFunctionTriggerArrayOutput struct{ *pulumi.OutputState }

func (FgsFunctionTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsFunctionTrigger)(nil)).Elem()
}

func (o FgsFunctionTriggerArrayOutput) ToFgsFunctionTriggerArrayOutput() FgsFunctionTriggerArrayOutput {
	return o
}

func (o FgsFunctionTriggerArrayOutput) ToFgsFunctionTriggerArrayOutputWithContext(ctx context.Context) FgsFunctionTriggerArrayOutput {
	return o
}

func (o FgsFunctionTriggerArrayOutput) Index(i pulumi.IntInput) FgsFunctionTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FgsFunctionTrigger {
		return vs[0].([]*FgsFunctionTrigger)[vs[1].(int)]
	}).(FgsFunctionTriggerOutput)
}

type FgsFunctionTriggerMapOutput struct{ *pulumi.OutputState }

func (FgsFunctionTriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsFunctionTrigger)(nil)).Elem()
}

func (o FgsFunctionTriggerMapOutput) ToFgsFunctionTriggerMapOutput() FgsFunctionTriggerMapOutput {
	return o
}

func (o FgsFunctionTriggerMapOutput) ToFgsFunctionTriggerMapOutputWithContext(ctx context.Context) FgsFunctionTriggerMapOutput {
	return o
}

func (o FgsFunctionTriggerMapOutput) MapIndex(k pulumi.StringInput) FgsFunctionTriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FgsFunctionTrigger {
		return vs[0].(map[string]*FgsFunctionTrigger)[vs[1].(string)]
	}).(FgsFunctionTriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionTriggerInput)(nil)).Elem(), &FgsFunctionTrigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionTriggerArrayInput)(nil)).Elem(), FgsFunctionTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsFunctionTriggerMapInput)(nil)).Elem(), FgsFunctionTriggerMap{})
	pulumi.RegisterOutputType(FgsFunctionTriggerOutput{})
	pulumi.RegisterOutputType(FgsFunctionTriggerArrayOutput{})
	pulumi.RegisterOutputType(FgsFunctionTriggerMapOutput{})
}

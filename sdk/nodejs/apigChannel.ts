// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ApigChannel extends pulumi.CustomResource {
    /**
     * Get an existing ApigChannel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigChannelState, opts?: pulumi.CustomResourceOptions): ApigChannel {
        return new ApigChannel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/apigChannel:ApigChannel';

    /**
     * Returns true if the given object is an instance of ApigChannel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigChannel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigChannel.__pulumiType;
    }

    /**
     * The distribution algorithm.
     */
    public readonly balanceStrategy!: pulumi.Output<number>;
    /**
     * The creation time of the channel.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
     */
    public readonly healthCheck!: pulumi.Output<outputs.ApigChannelHealthCheck>;
    /**
     * The ID of the dedicated instance to which the channel belongs.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The backend server groups of the channel.
     */
    public readonly memberGroups!: pulumi.Output<outputs.ApigChannelMemberGroup[]>;
    /**
     * The member type of the channel.
     */
    public readonly memberType!: pulumi.Output<string>;
    /**
     * The backend servers of the channel.
     */
    public readonly members!: pulumi.Output<outputs.ApigChannelMember[]>;
    /**
     * The configuration of the microservice.
     */
    public readonly microservice!: pulumi.Output<outputs.ApigChannelMicroservice>;
    /**
     * The channel name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The default port for health check in channel.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The region where the dedicated instance is located.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The current status of the channel.
     */
    public /*out*/ readonly status!: pulumi.Output<number>;
    /**
     * The type of the channel.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a ApigChannel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigChannelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigChannelArgs | ApigChannelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigChannelState | undefined;
            resourceInputs["balanceStrategy"] = state ? state.balanceStrategy : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["memberGroups"] = state ? state.memberGroups : undefined;
            resourceInputs["memberType"] = state ? state.memberType : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["microservice"] = state ? state.microservice : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ApigChannelArgs | undefined;
            if ((!args || args.balanceStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'balanceStrategy'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["balanceStrategy"] = args ? args.balanceStrategy : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["memberGroups"] = args ? args.memberGroups : undefined;
            resourceInputs["memberType"] = args ? args.memberType : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["microservice"] = args ? args.microservice : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigChannel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApigChannel resources.
 */
export interface ApigChannelState {
    /**
     * The distribution algorithm.
     */
    balanceStrategy?: pulumi.Input<number>;
    /**
     * The creation time of the channel.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
     */
    healthCheck?: pulumi.Input<inputs.ApigChannelHealthCheck>;
    /**
     * The ID of the dedicated instance to which the channel belongs.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The backend server groups of the channel.
     */
    memberGroups?: pulumi.Input<pulumi.Input<inputs.ApigChannelMemberGroup>[]>;
    /**
     * The member type of the channel.
     */
    memberType?: pulumi.Input<string>;
    /**
     * The backend servers of the channel.
     */
    members?: pulumi.Input<pulumi.Input<inputs.ApigChannelMember>[]>;
    /**
     * The configuration of the microservice.
     */
    microservice?: pulumi.Input<inputs.ApigChannelMicroservice>;
    /**
     * The channel name.
     */
    name?: pulumi.Input<string>;
    /**
     * The default port for health check in channel.
     */
    port?: pulumi.Input<number>;
    /**
     * The region where the dedicated instance is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The current status of the channel.
     */
    status?: pulumi.Input<number>;
    /**
     * The type of the channel.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ApigChannel resource.
 */
export interface ApigChannelArgs {
    /**
     * The distribution algorithm.
     */
    balanceStrategy: pulumi.Input<number>;
    /**
     * The health configuration of cloud servers associated with the load balance channel for APIG regularly check.
     */
    healthCheck?: pulumi.Input<inputs.ApigChannelHealthCheck>;
    /**
     * The ID of the dedicated instance to which the channel belongs.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The backend server groups of the channel.
     */
    memberGroups?: pulumi.Input<pulumi.Input<inputs.ApigChannelMemberGroup>[]>;
    /**
     * The member type of the channel.
     */
    memberType?: pulumi.Input<string>;
    /**
     * The backend servers of the channel.
     */
    members?: pulumi.Input<pulumi.Input<inputs.ApigChannelMember>[]>;
    /**
     * The configuration of the microservice.
     */
    microservice?: pulumi.Input<inputs.ApigChannelMicroservice>;
    /**
     * The channel name.
     */
    name?: pulumi.Input<string>;
    /**
     * The default port for health check in channel.
     */
    port: pulumi.Input<number>;
    /**
     * The region where the dedicated instance is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The type of the channel.
     */
    type?: pulumi.Input<string>;
}

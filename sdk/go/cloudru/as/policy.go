// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Policy struct {
	pulumi.CustomResourceState

	Action              pulumi.StringOutput             `pulumi:"action"`
	AlarmId             pulumi.StringPtrOutput          `pulumi:"alarmId"`
	CoolDownTime        pulumi.IntOutput                `pulumi:"coolDownTime"`
	CreateTime          pulumi.StringOutput             `pulumi:"createTime"`
	Region              pulumi.StringOutput             `pulumi:"region"`
	ScalingGroupId      pulumi.StringOutput             `pulumi:"scalingGroupId"`
	ScalingPolicyAction PolicyScalingPolicyActionOutput `pulumi:"scalingPolicyAction"`
	ScalingPolicyName   pulumi.StringOutput             `pulumi:"scalingPolicyName"`
	ScalingPolicyType   pulumi.StringOutput             `pulumi:"scalingPolicyType"`
	ScheduledPolicy     PolicyScheduledPolicyOutput     `pulumi:"scheduledPolicy"`
	Status              pulumi.StringOutput             `pulumi:"status"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ScalingGroupId'")
	}
	if args.ScalingPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyName'")
	}
	if args.ScalingPolicyType == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("cloudru:As/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("cloudru:As/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	Action              *string                    `pulumi:"action"`
	AlarmId             *string                    `pulumi:"alarmId"`
	CoolDownTime        *int                       `pulumi:"coolDownTime"`
	CreateTime          *string                    `pulumi:"createTime"`
	Region              *string                    `pulumi:"region"`
	ScalingGroupId      *string                    `pulumi:"scalingGroupId"`
	ScalingPolicyAction *PolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	ScalingPolicyName   *string                    `pulumi:"scalingPolicyName"`
	ScalingPolicyType   *string                    `pulumi:"scalingPolicyType"`
	ScheduledPolicy     *PolicyScheduledPolicy     `pulumi:"scheduledPolicy"`
	Status              *string                    `pulumi:"status"`
}

type PolicyState struct {
	Action              pulumi.StringPtrInput
	AlarmId             pulumi.StringPtrInput
	CoolDownTime        pulumi.IntPtrInput
	CreateTime          pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	ScalingGroupId      pulumi.StringPtrInput
	ScalingPolicyAction PolicyScalingPolicyActionPtrInput
	ScalingPolicyName   pulumi.StringPtrInput
	ScalingPolicyType   pulumi.StringPtrInput
	ScheduledPolicy     PolicyScheduledPolicyPtrInput
	Status              pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	Action              *string                    `pulumi:"action"`
	AlarmId             *string                    `pulumi:"alarmId"`
	CoolDownTime        *int                       `pulumi:"coolDownTime"`
	Region              *string                    `pulumi:"region"`
	ScalingGroupId      string                     `pulumi:"scalingGroupId"`
	ScalingPolicyAction *PolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	ScalingPolicyName   string                     `pulumi:"scalingPolicyName"`
	ScalingPolicyType   string                     `pulumi:"scalingPolicyType"`
	ScheduledPolicy     *PolicyScheduledPolicy     `pulumi:"scheduledPolicy"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	Action              pulumi.StringPtrInput
	AlarmId             pulumi.StringPtrInput
	CoolDownTime        pulumi.IntPtrInput
	Region              pulumi.StringPtrInput
	ScalingGroupId      pulumi.StringInput
	ScalingPolicyAction PolicyScalingPolicyActionPtrInput
	ScalingPolicyName   pulumi.StringInput
	ScalingPolicyType   pulumi.StringInput
	ScheduledPolicy     PolicyScheduledPolicyPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o PolicyOutput) AlarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.AlarmId }).(pulumi.StringPtrOutput)
}

func (o PolicyOutput) CoolDownTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntOutput { return v.CoolDownTime }).(pulumi.IntOutput)
}

func (o PolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o PolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o PolicyOutput) ScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ScalingGroupId }).(pulumi.StringOutput)
}

func (o PolicyOutput) ScalingPolicyAction() PolicyScalingPolicyActionOutput {
	return o.ApplyT(func(v *Policy) PolicyScalingPolicyActionOutput { return v.ScalingPolicyAction }).(PolicyScalingPolicyActionOutput)
}

func (o PolicyOutput) ScalingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ScalingPolicyName }).(pulumi.StringOutput)
}

func (o PolicyOutput) ScalingPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ScalingPolicyType }).(pulumi.StringOutput)
}

func (o PolicyOutput) ScheduledPolicy() PolicyScheduledPolicyOutput {
	return o.ApplyT(func(v *Policy) PolicyScheduledPolicyOutput { return v.ScheduledPolicy }).(PolicyScheduledPolicyOutput)
}

func (o PolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}

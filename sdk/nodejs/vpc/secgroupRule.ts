// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class SecgroupRule extends pulumi.CustomResource {
    /**
     * Get an existing SecgroupRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecgroupRuleState, opts?: pulumi.CustomResourceOptions): SecgroupRule {
        return new SecgroupRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Vpc/secgroupRule:SecgroupRule';

    /**
     * Returns true if the given object is an instance of SecgroupRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecgroupRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecgroupRule.__pulumiType;
    }

    declare public readonly action: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly direction: pulumi.Output<string>;
    declare public readonly ethertype: pulumi.Output<string>;
    declare public readonly portRangeMax: pulumi.Output<number>;
    declare public readonly portRangeMin: pulumi.Output<number>;
    declare public readonly ports: pulumi.Output<string>;
    declare public readonly priority: pulumi.Output<number>;
    declare public readonly protocol: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly remoteAddressGroupId: pulumi.Output<string>;
    declare public readonly remoteGroupId: pulumi.Output<string>;
    declare public readonly remoteIpPrefix: pulumi.Output<string>;
    declare public readonly securityGroupId: pulumi.Output<string>;

    /**
     * Create a SecgroupRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecgroupRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecgroupRuleArgs | SecgroupRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecgroupRuleState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["description"] = state?.description;
            resourceInputs["direction"] = state?.direction;
            resourceInputs["ethertype"] = state?.ethertype;
            resourceInputs["portRangeMax"] = state?.portRangeMax;
            resourceInputs["portRangeMin"] = state?.portRangeMin;
            resourceInputs["ports"] = state?.ports;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["region"] = state?.region;
            resourceInputs["remoteAddressGroupId"] = state?.remoteAddressGroupId;
            resourceInputs["remoteGroupId"] = state?.remoteGroupId;
            resourceInputs["remoteIpPrefix"] = state?.remoteIpPrefix;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
        } else {
            const args = argsOrState as SecgroupRuleArgs | undefined;
            if (args?.direction === undefined && !opts.urn) {
                throw new Error("Missing required property 'direction'");
            }
            if (args?.ethertype === undefined && !opts.urn) {
                throw new Error("Missing required property 'ethertype'");
            }
            if (args?.securityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["description"] = args?.description;
            resourceInputs["direction"] = args?.direction;
            resourceInputs["ethertype"] = args?.ethertype;
            resourceInputs["portRangeMax"] = args?.portRangeMax;
            resourceInputs["portRangeMin"] = args?.portRangeMin;
            resourceInputs["ports"] = args?.ports;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["region"] = args?.region;
            resourceInputs["remoteAddressGroupId"] = args?.remoteAddressGroupId;
            resourceInputs["remoteGroupId"] = args?.remoteGroupId;
            resourceInputs["remoteIpPrefix"] = args?.remoteIpPrefix;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecgroupRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecgroupRule resources.
 */
export interface SecgroupRuleState {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    direction?: pulumi.Input<string>;
    ethertype?: pulumi.Input<string>;
    portRangeMax?: pulumi.Input<number>;
    portRangeMin?: pulumi.Input<number>;
    ports?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    remoteAddressGroupId?: pulumi.Input<string>;
    remoteGroupId?: pulumi.Input<string>;
    remoteIpPrefix?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SecgroupRule resource.
 */
export interface SecgroupRuleArgs {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    direction: pulumi.Input<string>;
    ethertype: pulumi.Input<string>;
    portRangeMax?: pulumi.Input<number>;
    portRangeMin?: pulumi.Input<number>;
    ports?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    remoteAddressGroupId?: pulumi.Input<string>;
    remoteGroupId?: pulumi.Input<string>;
    remoteIpPrefix?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
}

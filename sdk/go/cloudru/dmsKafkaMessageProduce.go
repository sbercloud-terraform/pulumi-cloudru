// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type DmsKafkaMessageProduce struct {
	pulumi.CustomResourceState

	Body          pulumi.StringOutput                           `pulumi:"body"`
	InstanceId    pulumi.StringOutput                           `pulumi:"instanceId"`
	PropertyLists DmsKafkaMessageProducePropertyListArrayOutput `pulumi:"propertyLists"`
	Region        pulumi.StringOutput                           `pulumi:"region"`
	Topic         pulumi.StringOutput                           `pulumi:"topic"`
}

// NewDmsKafkaMessageProduce registers a new resource with the given unique name, arguments, and options.
func NewDmsKafkaMessageProduce(ctx *pulumi.Context,
	name string, args *DmsKafkaMessageProduceArgs, opts ...pulumi.ResourceOption) (*DmsKafkaMessageProduce, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DmsKafkaMessageProduce
	err := ctx.RegisterResource("sbercloud:index/dmsKafkaMessageProduce:DmsKafkaMessageProduce", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDmsKafkaMessageProduce gets an existing DmsKafkaMessageProduce resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDmsKafkaMessageProduce(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DmsKafkaMessageProduceState, opts ...pulumi.ResourceOption) (*DmsKafkaMessageProduce, error) {
	var resource DmsKafkaMessageProduce
	err := ctx.ReadResource("sbercloud:index/dmsKafkaMessageProduce:DmsKafkaMessageProduce", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DmsKafkaMessageProduce resources.
type dmsKafkaMessageProduceState struct {
	Body          *string                              `pulumi:"body"`
	InstanceId    *string                              `pulumi:"instanceId"`
	PropertyLists []DmsKafkaMessageProducePropertyList `pulumi:"propertyLists"`
	Region        *string                              `pulumi:"region"`
	Topic         *string                              `pulumi:"topic"`
}

type DmsKafkaMessageProduceState struct {
	Body          pulumi.StringPtrInput
	InstanceId    pulumi.StringPtrInput
	PropertyLists DmsKafkaMessageProducePropertyListArrayInput
	Region        pulumi.StringPtrInput
	Topic         pulumi.StringPtrInput
}

func (DmsKafkaMessageProduceState) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaMessageProduceState)(nil)).Elem()
}

type dmsKafkaMessageProduceArgs struct {
	Body          string                               `pulumi:"body"`
	InstanceId    string                               `pulumi:"instanceId"`
	PropertyLists []DmsKafkaMessageProducePropertyList `pulumi:"propertyLists"`
	Region        *string                              `pulumi:"region"`
	Topic         string                               `pulumi:"topic"`
}

// The set of arguments for constructing a DmsKafkaMessageProduce resource.
type DmsKafkaMessageProduceArgs struct {
	Body          pulumi.StringInput
	InstanceId    pulumi.StringInput
	PropertyLists DmsKafkaMessageProducePropertyListArrayInput
	Region        pulumi.StringPtrInput
	Topic         pulumi.StringInput
}

func (DmsKafkaMessageProduceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dmsKafkaMessageProduceArgs)(nil)).Elem()
}

type DmsKafkaMessageProduceInput interface {
	pulumi.Input

	ToDmsKafkaMessageProduceOutput() DmsKafkaMessageProduceOutput
	ToDmsKafkaMessageProduceOutputWithContext(ctx context.Context) DmsKafkaMessageProduceOutput
}

func (*DmsKafkaMessageProduce) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaMessageProduce)(nil)).Elem()
}

func (i *DmsKafkaMessageProduce) ToDmsKafkaMessageProduceOutput() DmsKafkaMessageProduceOutput {
	return i.ToDmsKafkaMessageProduceOutputWithContext(context.Background())
}

func (i *DmsKafkaMessageProduce) ToDmsKafkaMessageProduceOutputWithContext(ctx context.Context) DmsKafkaMessageProduceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaMessageProduceOutput)
}

// DmsKafkaMessageProduceArrayInput is an input type that accepts DmsKafkaMessageProduceArray and DmsKafkaMessageProduceArrayOutput values.
// You can construct a concrete instance of `DmsKafkaMessageProduceArrayInput` via:
//
//	DmsKafkaMessageProduceArray{ DmsKafkaMessageProduceArgs{...} }
type DmsKafkaMessageProduceArrayInput interface {
	pulumi.Input

	ToDmsKafkaMessageProduceArrayOutput() DmsKafkaMessageProduceArrayOutput
	ToDmsKafkaMessageProduceArrayOutputWithContext(context.Context) DmsKafkaMessageProduceArrayOutput
}

type DmsKafkaMessageProduceArray []DmsKafkaMessageProduceInput

func (DmsKafkaMessageProduceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaMessageProduce)(nil)).Elem()
}

func (i DmsKafkaMessageProduceArray) ToDmsKafkaMessageProduceArrayOutput() DmsKafkaMessageProduceArrayOutput {
	return i.ToDmsKafkaMessageProduceArrayOutputWithContext(context.Background())
}

func (i DmsKafkaMessageProduceArray) ToDmsKafkaMessageProduceArrayOutputWithContext(ctx context.Context) DmsKafkaMessageProduceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaMessageProduceArrayOutput)
}

// DmsKafkaMessageProduceMapInput is an input type that accepts DmsKafkaMessageProduceMap and DmsKafkaMessageProduceMapOutput values.
// You can construct a concrete instance of `DmsKafkaMessageProduceMapInput` via:
//
//	DmsKafkaMessageProduceMap{ "key": DmsKafkaMessageProduceArgs{...} }
type DmsKafkaMessageProduceMapInput interface {
	pulumi.Input

	ToDmsKafkaMessageProduceMapOutput() DmsKafkaMessageProduceMapOutput
	ToDmsKafkaMessageProduceMapOutputWithContext(context.Context) DmsKafkaMessageProduceMapOutput
}

type DmsKafkaMessageProduceMap map[string]DmsKafkaMessageProduceInput

func (DmsKafkaMessageProduceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaMessageProduce)(nil)).Elem()
}

func (i DmsKafkaMessageProduceMap) ToDmsKafkaMessageProduceMapOutput() DmsKafkaMessageProduceMapOutput {
	return i.ToDmsKafkaMessageProduceMapOutputWithContext(context.Background())
}

func (i DmsKafkaMessageProduceMap) ToDmsKafkaMessageProduceMapOutputWithContext(ctx context.Context) DmsKafkaMessageProduceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DmsKafkaMessageProduceMapOutput)
}

type DmsKafkaMessageProduceOutput struct{ *pulumi.OutputState }

func (DmsKafkaMessageProduceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DmsKafkaMessageProduce)(nil)).Elem()
}

func (o DmsKafkaMessageProduceOutput) ToDmsKafkaMessageProduceOutput() DmsKafkaMessageProduceOutput {
	return o
}

func (o DmsKafkaMessageProduceOutput) ToDmsKafkaMessageProduceOutputWithContext(ctx context.Context) DmsKafkaMessageProduceOutput {
	return o
}

func (o DmsKafkaMessageProduceOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaMessageProduce) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

func (o DmsKafkaMessageProduceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaMessageProduce) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DmsKafkaMessageProduceOutput) PropertyLists() DmsKafkaMessageProducePropertyListArrayOutput {
	return o.ApplyT(func(v *DmsKafkaMessageProduce) DmsKafkaMessageProducePropertyListArrayOutput { return v.PropertyLists }).(DmsKafkaMessageProducePropertyListArrayOutput)
}

func (o DmsKafkaMessageProduceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaMessageProduce) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o DmsKafkaMessageProduceOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *DmsKafkaMessageProduce) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

type DmsKafkaMessageProduceArrayOutput struct{ *pulumi.OutputState }

func (DmsKafkaMessageProduceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DmsKafkaMessageProduce)(nil)).Elem()
}

func (o DmsKafkaMessageProduceArrayOutput) ToDmsKafkaMessageProduceArrayOutput() DmsKafkaMessageProduceArrayOutput {
	return o
}

func (o DmsKafkaMessageProduceArrayOutput) ToDmsKafkaMessageProduceArrayOutputWithContext(ctx context.Context) DmsKafkaMessageProduceArrayOutput {
	return o
}

func (o DmsKafkaMessageProduceArrayOutput) Index(i pulumi.IntInput) DmsKafkaMessageProduceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DmsKafkaMessageProduce {
		return vs[0].([]*DmsKafkaMessageProduce)[vs[1].(int)]
	}).(DmsKafkaMessageProduceOutput)
}

type DmsKafkaMessageProduceMapOutput struct{ *pulumi.OutputState }

func (DmsKafkaMessageProduceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DmsKafkaMessageProduce)(nil)).Elem()
}

func (o DmsKafkaMessageProduceMapOutput) ToDmsKafkaMessageProduceMapOutput() DmsKafkaMessageProduceMapOutput {
	return o
}

func (o DmsKafkaMessageProduceMapOutput) ToDmsKafkaMessageProduceMapOutputWithContext(ctx context.Context) DmsKafkaMessageProduceMapOutput {
	return o
}

func (o DmsKafkaMessageProduceMapOutput) MapIndex(k pulumi.StringInput) DmsKafkaMessageProduceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DmsKafkaMessageProduce {
		return vs[0].(map[string]*DmsKafkaMessageProduce)[vs[1].(string)]
	}).(DmsKafkaMessageProduceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaMessageProduceInput)(nil)).Elem(), &DmsKafkaMessageProduce{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaMessageProduceArrayInput)(nil)).Elem(), DmsKafkaMessageProduceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DmsKafkaMessageProduceMapInput)(nil)).Elem(), DmsKafkaMessageProduceMap{})
	pulumi.RegisterOutputType(DmsKafkaMessageProduceOutput{})
	pulumi.RegisterOutputType(DmsKafkaMessageProduceArrayOutput{})
	pulumi.RegisterOutputType(DmsKafkaMessageProduceMapOutput{})
}

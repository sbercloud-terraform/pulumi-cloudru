// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class CaptureTask extends pulumi.CustomResource {
    /**
     * Get an existing CaptureTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CaptureTaskState, opts?: pulumi.CustomResourceOptions): CaptureTask {
        return new CaptureTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Cfw/captureTask:CaptureTask';

    /**
     * Returns true if the given object is an instance of CaptureTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CaptureTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CaptureTask.__pulumiType;
    }

    /**
     * The creation time of the capture task.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The destination configuration.
     */
    declare public readonly destination: pulumi.Output<outputs.Cfw.CaptureTaskDestination>;
    /**
     * The capture task duration.
     */
    declare public readonly duration: pulumi.Output<number>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    /**
     * The ID of the firewall instance.
     */
    declare public readonly fwInstanceId: pulumi.Output<string>;
    /**
     * The maximum number of packets captured.
     */
    declare public readonly maxPackets: pulumi.Output<number>;
    /**
     * The capture task name.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    /**
     * The service configuration.
     */
    declare public readonly service: pulumi.Output<outputs.Cfw.CaptureTaskService>;
    /**
     * The source configuration.
     */
    declare public readonly source: pulumi.Output<outputs.Cfw.CaptureTaskSource>;
    /**
     * The status of the capture task.
     */
    declare public /*out*/ readonly status: pulumi.Output<number>;
    /**
     * Whether to stop the capture.
     */
    declare public readonly stopCapture: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the capture task.
     */
    declare public /*out*/ readonly taskId: pulumi.Output<string>;
    /**
     * The update time of the capture task.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a CaptureTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CaptureTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CaptureTaskArgs | CaptureTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CaptureTaskState | undefined;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["destination"] = state?.destination;
            resourceInputs["duration"] = state?.duration;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["fwInstanceId"] = state?.fwInstanceId;
            resourceInputs["maxPackets"] = state?.maxPackets;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["service"] = state?.service;
            resourceInputs["source"] = state?.source;
            resourceInputs["status"] = state?.status;
            resourceInputs["stopCapture"] = state?.stopCapture;
            resourceInputs["taskId"] = state?.taskId;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as CaptureTaskArgs | undefined;
            if (args?.destination === undefined && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if (args?.duration === undefined && !opts.urn) {
                throw new Error("Missing required property 'duration'");
            }
            if (args?.fwInstanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'fwInstanceId'");
            }
            if (args?.maxPackets === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxPackets'");
            }
            if (args?.service === undefined && !opts.urn) {
                throw new Error("Missing required property 'service'");
            }
            if (args?.source === undefined && !opts.urn) {
                throw new Error("Missing required property 'source'");
            }
            resourceInputs["destination"] = args?.destination;
            resourceInputs["duration"] = args?.duration;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["fwInstanceId"] = args?.fwInstanceId;
            resourceInputs["maxPackets"] = args?.maxPackets;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["service"] = args?.service;
            resourceInputs["source"] = args?.source;
            resourceInputs["stopCapture"] = args?.stopCapture;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["taskId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CaptureTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CaptureTask resources.
 */
export interface CaptureTaskState {
    /**
     * The creation time of the capture task.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The destination configuration.
     */
    destination?: pulumi.Input<inputs.Cfw.CaptureTaskDestination>;
    /**
     * The capture task duration.
     */
    duration?: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * The ID of the firewall instance.
     */
    fwInstanceId?: pulumi.Input<string>;
    /**
     * The maximum number of packets captured.
     */
    maxPackets?: pulumi.Input<number>;
    /**
     * The capture task name.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The service configuration.
     */
    service?: pulumi.Input<inputs.Cfw.CaptureTaskService>;
    /**
     * The source configuration.
     */
    source?: pulumi.Input<inputs.Cfw.CaptureTaskSource>;
    /**
     * The status of the capture task.
     */
    status?: pulumi.Input<number>;
    /**
     * Whether to stop the capture.
     */
    stopCapture?: pulumi.Input<boolean>;
    /**
     * The ID of the capture task.
     */
    taskId?: pulumi.Input<string>;
    /**
     * The update time of the capture task.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CaptureTask resource.
 */
export interface CaptureTaskArgs {
    /**
     * The destination configuration.
     */
    destination: pulumi.Input<inputs.Cfw.CaptureTaskDestination>;
    /**
     * The capture task duration.
     */
    duration: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * The ID of the firewall instance.
     */
    fwInstanceId: pulumi.Input<string>;
    /**
     * The maximum number of packets captured.
     */
    maxPackets: pulumi.Input<number>;
    /**
     * The capture task name.
     */
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    /**
     * The service configuration.
     */
    service: pulumi.Input<inputs.Cfw.CaptureTaskService>;
    /**
     * The source configuration.
     */
    source: pulumi.Input<inputs.Cfw.CaptureTaskSource>;
    /**
     * Whether to stop the capture.
     */
    stopCapture?: pulumi.Input<boolean>;
}

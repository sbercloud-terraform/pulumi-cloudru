# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPgDatabasesResult',
    'AwaitableGetPgDatabasesResult',
    'get_pg_databases',
    'get_pg_databases_output',
]

@pulumi.output_type
class GetPgDatabasesResult:
    """
    A collection of values returned by getPgDatabases.
    """
    def __init__(__self__, character_set=None, databases=None, id=None, instance_id=None, lc_collate=None, name=None, owner=None, region=None, size=None):
        if character_set and not isinstance(character_set, str):
            raise TypeError("Expected argument 'character_set' to be a str")
        pulumi.set(__self__, "character_set", character_set)
        if databases and not isinstance(databases, list):
            raise TypeError("Expected argument 'databases' to be a list")
        pulumi.set(__self__, "databases", databases)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if lc_collate and not isinstance(lc_collate, str):
            raise TypeError("Expected argument 'lc_collate' to be a str")
        pulumi.set(__self__, "lc_collate", lc_collate)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if size and not isinstance(size, int):
            raise TypeError("Expected argument 'size' to be a int")
        pulumi.set(__self__, "size", size)

    @_builtins.property
    @pulumi.getter(name="characterSet")
    def character_set(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "character_set")

    @_builtins.property
    @pulumi.getter
    def databases(self) -> Sequence['outputs.GetPgDatabasesDatabaseResult']:
        return pulumi.get(self, "databases")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "lc_collate")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "size")


class AwaitableGetPgDatabasesResult(GetPgDatabasesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPgDatabasesResult(
            character_set=self.character_set,
            databases=self.databases,
            id=self.id,
            instance_id=self.instance_id,
            lc_collate=self.lc_collate,
            name=self.name,
            owner=self.owner,
            region=self.region,
            size=self.size)


def get_pg_databases(character_set: Optional[_builtins.str] = None,
                     instance_id: Optional[_builtins.str] = None,
                     lc_collate: Optional[_builtins.str] = None,
                     name: Optional[_builtins.str] = None,
                     owner: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     size: Optional[_builtins.int] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPgDatabasesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['characterSet'] = character_set
    __args__['instanceId'] = instance_id
    __args__['lcCollate'] = lc_collate
    __args__['name'] = name
    __args__['owner'] = owner
    __args__['region'] = region
    __args__['size'] = size
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:Rds/getPgDatabases:getPgDatabases', __args__, opts=opts, typ=GetPgDatabasesResult).value

    return AwaitableGetPgDatabasesResult(
        character_set=pulumi.get(__ret__, 'character_set'),
        databases=pulumi.get(__ret__, 'databases'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        lc_collate=pulumi.get(__ret__, 'lc_collate'),
        name=pulumi.get(__ret__, 'name'),
        owner=pulumi.get(__ret__, 'owner'),
        region=pulumi.get(__ret__, 'region'),
        size=pulumi.get(__ret__, 'size'))
def get_pg_databases_output(character_set: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                            lc_collate: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            owner: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            size: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPgDatabasesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['characterSet'] = character_set
    __args__['instanceId'] = instance_id
    __args__['lcCollate'] = lc_collate
    __args__['name'] = name
    __args__['owner'] = owner
    __args__['region'] = region
    __args__['size'] = size
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:Rds/getPgDatabases:getPgDatabases', __args__, opts=opts, typ=GetPgDatabasesResult)
    return __ret__.apply(lambda __response__: GetPgDatabasesResult(
        character_set=pulumi.get(__response__, 'character_set'),
        databases=pulumi.get(__response__, 'databases'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        lc_collate=pulumi.get(__response__, 'lc_collate'),
        name=pulumi.get(__response__, 'name'),
        owner=pulumi.get(__response__, 'owner'),
        region=pulumi.get(__response__, 'region'),
        size=pulumi.get(__response__, 'size')))

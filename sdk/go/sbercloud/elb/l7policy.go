// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages an ELB L7 Policy resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/elb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			loadbalancer1, err := elb.NewLoadbalancer(ctx, "loadbalancer_1", &elb.LoadbalancerArgs{
//				Name:        pulumi.String("loadbalancer_1"),
//				VipSubnetId: pulumi.Any(subnetId),
//			})
//			if err != nil {
//				return err
//			}
//			listener1, err := elb.NewListener(ctx, "listener_1", &elb.ListenerArgs{
//				Name:           pulumi.String("listener_1"),
//				Protocol:       pulumi.String("HTTP"),
//				ProtocolPort:   pulumi.Int(8080),
//				LoadbalancerId: loadbalancer1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			pool1, err := elb.NewPool(ctx, "pool_1", &elb.PoolArgs{
//				Name:           pulumi.String("pool_1"),
//				Protocol:       pulumi.String("HTTP"),
//				LbMethod:       pulumi.String("ROUND_ROBIN"),
//				LoadbalancerId: loadbalancer1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = elb.NewL7policy(ctx, "l7policy_1", &elb.L7policyArgs{
//				Name:           pulumi.String("test"),
//				Action:         pulumi.String("REDIRECT_TO_POOL"),
//				Description:    pulumi.String("test l7 policy"),
//				Position:       pulumi.Int(1),
//				ListenerId:     listener1.ID(),
//				RedirectPoolId: pool1.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Load Balancer L7 Policy can be imported using the L7 Policy ID, e.g.:
//
// ```sh
// $ pulumi import sbercloud:Elb/l7policy:L7policy l7policy_1 8a7a79c2-cf17-4e65-b2ae-ddc8bfcf6c74
// ```
type L7policy struct {
	pulumi.CustomResourceState

	// Specifies whether requests are forwarded to another backend server group
	// or redirected to an HTTPS listener. Changing this creates a new L7 Policy. The value ranges:
	// + **REDIRECT_TO_POOL**: Requests are forwarded to the backend server group specified by `redirectPoolId`.
	// + **REDIRECT_TO_LISTENER**: Requests are redirected from the HTTP listener specified by `listenerId` to the
	//   HTTPS listener specified by `redirectListenerId`.
	Action pulumi.StringOutput `pulumi:"action"`
	// The administrative state of the L7 Policy. This value can only be true (UP).
	AdminStateUp pulumi.BoolPtrOutput `pulumi:"adminStateUp"`
	// Human-readable description for the L7 Policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the listener for which the forwarding policy is added.
	// Changing this creates a new L7 Policy.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of this policy on the listener. Positions start at 1.
	// Changing this creates a new L7 Policy.
	Position pulumi.IntOutput `pulumi:"position"`
	// Specifies the ID of the listener to which the traffic is redirected.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_LISTENER**. The listener must meet the
	// following requirements:
	// + Can only be an HTTPS listener.
	// + Can only be a listener of the same load balancer.
	RedirectListenerId pulumi.StringPtrOutput `pulumi:"redirectListenerId"`
	// Specifies the ID of the backend server group to which traffic is forwarded.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_POOL**. The backend server group must meet the
	// following requirements:
	// + Cannot be the default backend server group of the listener.
	// + Cannot be the backend server group used by forwarding policies of other listeners.
	RedirectPoolId pulumi.StringPtrOutput `pulumi:"redirectPoolId"`
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region pulumi.StringOutput `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewL7policy registers a new resource with the given unique name, arguments, and options.
func NewL7policy(ctx *pulumi.Context,
	name string, args *L7policyArgs, opts ...pulumi.ResourceOption) (*L7policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource L7policy
	err := ctx.RegisterResource("sbercloud:Elb/l7policy:L7policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetL7policy gets an existing L7policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetL7policy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *L7policyState, opts ...pulumi.ResourceOption) (*L7policy, error) {
	var resource L7policy
	err := ctx.ReadResource("sbercloud:Elb/l7policy:L7policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering L7policy resources.
type l7policyState struct {
	// Specifies whether requests are forwarded to another backend server group
	// or redirected to an HTTPS listener. Changing this creates a new L7 Policy. The value ranges:
	// + **REDIRECT_TO_POOL**: Requests are forwarded to the backend server group specified by `redirectPoolId`.
	// + **REDIRECT_TO_LISTENER**: Requests are redirected from the HTTP listener specified by `listenerId` to the
	//   HTTPS listener specified by `redirectListenerId`.
	Action *string `pulumi:"action"`
	// The administrative state of the L7 Policy. This value can only be true (UP).
	AdminStateUp *bool `pulumi:"adminStateUp"`
	// Human-readable description for the L7 Policy.
	Description *string `pulumi:"description"`
	// Specifies the ID of the listener for which the forwarding policy is added.
	// Changing this creates a new L7 Policy.
	ListenerId *string `pulumi:"listenerId"`
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name *string `pulumi:"name"`
	// The position of this policy on the listener. Positions start at 1.
	// Changing this creates a new L7 Policy.
	Position *int `pulumi:"position"`
	// Specifies the ID of the listener to which the traffic is redirected.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_LISTENER**. The listener must meet the
	// following requirements:
	// + Can only be an HTTPS listener.
	// + Can only be a listener of the same load balancer.
	RedirectListenerId *string `pulumi:"redirectListenerId"`
	// Specifies the ID of the backend server group to which traffic is forwarded.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_POOL**. The backend server group must meet the
	// following requirements:
	// + Cannot be the default backend server group of the listener.
	// + Cannot be the backend server group used by forwarding policies of other listeners.
	RedirectPoolId *string `pulumi:"redirectPoolId"`
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
}

type L7policyState struct {
	// Specifies whether requests are forwarded to another backend server group
	// or redirected to an HTTPS listener. Changing this creates a new L7 Policy. The value ranges:
	// + **REDIRECT_TO_POOL**: Requests are forwarded to the backend server group specified by `redirectPoolId`.
	// + **REDIRECT_TO_LISTENER**: Requests are redirected from the HTTP listener specified by `listenerId` to the
	//   HTTPS listener specified by `redirectListenerId`.
	Action pulumi.StringPtrInput
	// The administrative state of the L7 Policy. This value can only be true (UP).
	AdminStateUp pulumi.BoolPtrInput
	// Human-readable description for the L7 Policy.
	Description pulumi.StringPtrInput
	// Specifies the ID of the listener for which the forwarding policy is added.
	// Changing this creates a new L7 Policy.
	ListenerId pulumi.StringPtrInput
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name pulumi.StringPtrInput
	// The position of this policy on the listener. Positions start at 1.
	// Changing this creates a new L7 Policy.
	Position pulumi.IntPtrInput
	// Specifies the ID of the listener to which the traffic is redirected.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_LISTENER**. The listener must meet the
	// following requirements:
	// + Can only be an HTTPS listener.
	// + Can only be a listener of the same load balancer.
	RedirectListenerId pulumi.StringPtrInput
	// Specifies the ID of the backend server group to which traffic is forwarded.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_POOL**. The backend server group must meet the
	// following requirements:
	// + Cannot be the default backend server group of the listener.
	// + Cannot be the backend server group used by forwarding policies of other listeners.
	RedirectPoolId pulumi.StringPtrInput
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
}

func (L7policyState) ElementType() reflect.Type {
	return reflect.TypeOf((*l7policyState)(nil)).Elem()
}

type l7policyArgs struct {
	// Specifies whether requests are forwarded to another backend server group
	// or redirected to an HTTPS listener. Changing this creates a new L7 Policy. The value ranges:
	// + **REDIRECT_TO_POOL**: Requests are forwarded to the backend server group specified by `redirectPoolId`.
	// + **REDIRECT_TO_LISTENER**: Requests are redirected from the HTTP listener specified by `listenerId` to the
	//   HTTPS listener specified by `redirectListenerId`.
	Action string `pulumi:"action"`
	// The administrative state of the L7 Policy. This value can only be true (UP).
	AdminStateUp *bool `pulumi:"adminStateUp"`
	// Human-readable description for the L7 Policy.
	Description *string `pulumi:"description"`
	// Specifies the ID of the listener for which the forwarding policy is added.
	// Changing this creates a new L7 Policy.
	ListenerId string `pulumi:"listenerId"`
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name *string `pulumi:"name"`
	// The position of this policy on the listener. Positions start at 1.
	// Changing this creates a new L7 Policy.
	Position *int `pulumi:"position"`
	// Specifies the ID of the listener to which the traffic is redirected.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_LISTENER**. The listener must meet the
	// following requirements:
	// + Can only be an HTTPS listener.
	// + Can only be a listener of the same load balancer.
	RedirectListenerId *string `pulumi:"redirectListenerId"`
	// Specifies the ID of the backend server group to which traffic is forwarded.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_POOL**. The backend server group must meet the
	// following requirements:
	// + Cannot be the default backend server group of the listener.
	// + Cannot be the backend server group used by forwarding policies of other listeners.
	RedirectPoolId *string `pulumi:"redirectPoolId"`
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
}

// The set of arguments for constructing a L7policy resource.
type L7policyArgs struct {
	// Specifies whether requests are forwarded to another backend server group
	// or redirected to an HTTPS listener. Changing this creates a new L7 Policy. The value ranges:
	// + **REDIRECT_TO_POOL**: Requests are forwarded to the backend server group specified by `redirectPoolId`.
	// + **REDIRECT_TO_LISTENER**: Requests are redirected from the HTTP listener specified by `listenerId` to the
	//   HTTPS listener specified by `redirectListenerId`.
	Action pulumi.StringInput
	// The administrative state of the L7 Policy. This value can only be true (UP).
	AdminStateUp pulumi.BoolPtrInput
	// Human-readable description for the L7 Policy.
	Description pulumi.StringPtrInput
	// Specifies the ID of the listener for which the forwarding policy is added.
	// Changing this creates a new L7 Policy.
	ListenerId pulumi.StringInput
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name pulumi.StringPtrInput
	// The position of this policy on the listener. Positions start at 1.
	// Changing this creates a new L7 Policy.
	Position pulumi.IntPtrInput
	// Specifies the ID of the listener to which the traffic is redirected.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_LISTENER**. The listener must meet the
	// following requirements:
	// + Can only be an HTTPS listener.
	// + Can only be a listener of the same load balancer.
	RedirectListenerId pulumi.StringPtrInput
	// Specifies the ID of the backend server group to which traffic is forwarded.
	// This parameter is mandatory when `action` is set to **REDIRECT_TO_POOL**. The backend server group must meet the
	// following requirements:
	// + Cannot be the default backend server group of the listener.
	// + Cannot be the backend server group used by forwarding policies of other listeners.
	RedirectPoolId pulumi.StringPtrInput
	// The region in which to create the L7 Policy resource. If omitted, the
	// provider-level region will be used. Changing this creates a new L7 Policy.
	Region pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
}

func (L7policyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*l7policyArgs)(nil)).Elem()
}

type L7policyInput interface {
	pulumi.Input

	ToL7policyOutput() L7policyOutput
	ToL7policyOutputWithContext(ctx context.Context) L7policyOutput
}

func (*L7policy) ElementType() reflect.Type {
	return reflect.TypeOf((**L7policy)(nil)).Elem()
}

func (i *L7policy) ToL7policyOutput() L7policyOutput {
	return i.ToL7policyOutputWithContext(context.Background())
}

func (i *L7policy) ToL7policyOutputWithContext(ctx context.Context) L7policyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyOutput)
}

// L7policyArrayInput is an input type that accepts L7policyArray and L7policyArrayOutput values.
// You can construct a concrete instance of `L7policyArrayInput` via:
//
//	L7policyArray{ L7policyArgs{...} }
type L7policyArrayInput interface {
	pulumi.Input

	ToL7policyArrayOutput() L7policyArrayOutput
	ToL7policyArrayOutputWithContext(context.Context) L7policyArrayOutput
}

type L7policyArray []L7policyInput

func (L7policyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L7policy)(nil)).Elem()
}

func (i L7policyArray) ToL7policyArrayOutput() L7policyArrayOutput {
	return i.ToL7policyArrayOutputWithContext(context.Background())
}

func (i L7policyArray) ToL7policyArrayOutputWithContext(ctx context.Context) L7policyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyArrayOutput)
}

// L7policyMapInput is an input type that accepts L7policyMap and L7policyMapOutput values.
// You can construct a concrete instance of `L7policyMapInput` via:
//
//	L7policyMap{ "key": L7policyArgs{...} }
type L7policyMapInput interface {
	pulumi.Input

	ToL7policyMapOutput() L7policyMapOutput
	ToL7policyMapOutputWithContext(context.Context) L7policyMapOutput
}

type L7policyMap map[string]L7policyInput

func (L7policyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L7policy)(nil)).Elem()
}

func (i L7policyMap) ToL7policyMapOutput() L7policyMapOutput {
	return i.ToL7policyMapOutputWithContext(context.Background())
}

func (i L7policyMap) ToL7policyMapOutputWithContext(ctx context.Context) L7policyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7policyMapOutput)
}

type L7policyOutput struct{ *pulumi.OutputState }

func (L7policyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L7policy)(nil)).Elem()
}

func (o L7policyOutput) ToL7policyOutput() L7policyOutput {
	return o
}

func (o L7policyOutput) ToL7policyOutputWithContext(ctx context.Context) L7policyOutput {
	return o
}

// Specifies whether requests are forwarded to another backend server group
// or redirected to an HTTPS listener. Changing this creates a new L7 Policy. The value ranges:
//   - **REDIRECT_TO_POOL**: Requests are forwarded to the backend server group specified by `redirectPoolId`.
//   - **REDIRECT_TO_LISTENER**: Requests are redirected from the HTTP listener specified by `listenerId` to the
//     HTTPS listener specified by `redirectListenerId`.
func (o L7policyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The administrative state of the L7 Policy. This value can only be true (UP).
func (o L7policyOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

// Human-readable description for the L7 Policy.
func (o L7policyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the listener for which the forwarding policy is added.
// Changing this creates a new L7 Policy.
func (o L7policyOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// Human-readable name for the L7 Policy. Does not have to be unique.
func (o L7policyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of this policy on the listener. Positions start at 1.
// Changing this creates a new L7 Policy.
func (o L7policyOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *L7policy) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Specifies the ID of the listener to which the traffic is redirected.
// This parameter is mandatory when `action` is set to **REDIRECT_TO_LISTENER**. The listener must meet the
// following requirements:
// + Can only be an HTTPS listener.
// + Can only be a listener of the same load balancer.
func (o L7policyOutput) RedirectListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringPtrOutput { return v.RedirectListenerId }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the backend server group to which traffic is forwarded.
// This parameter is mandatory when `action` is set to **REDIRECT_TO_POOL**. The backend server group must meet the
// following requirements:
// + Cannot be the default backend server group of the listener.
// + Cannot be the backend server group used by forwarding policies of other listeners.
func (o L7policyOutput) RedirectPoolId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringPtrOutput { return v.RedirectPoolId }).(pulumi.StringPtrOutput)
}

// The region in which to create the L7 Policy resource. If omitted, the
// provider-level region will be used. Changing this creates a new L7 Policy.
func (o L7policyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o L7policyOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7policy) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

type L7policyArrayOutput struct{ *pulumi.OutputState }

func (L7policyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L7policy)(nil)).Elem()
}

func (o L7policyArrayOutput) ToL7policyArrayOutput() L7policyArrayOutput {
	return o
}

func (o L7policyArrayOutput) ToL7policyArrayOutputWithContext(ctx context.Context) L7policyArrayOutput {
	return o
}

func (o L7policyArrayOutput) Index(i pulumi.IntInput) L7policyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *L7policy {
		return vs[0].([]*L7policy)[vs[1].(int)]
	}).(L7policyOutput)
}

type L7policyMapOutput struct{ *pulumi.OutputState }

func (L7policyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L7policy)(nil)).Elem()
}

func (o L7policyMapOutput) ToL7policyMapOutput() L7policyMapOutput {
	return o
}

func (o L7policyMapOutput) ToL7policyMapOutputWithContext(ctx context.Context) L7policyMapOutput {
	return o
}

func (o L7policyMapOutput) MapIndex(k pulumi.StringInput) L7policyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *L7policy {
		return vs[0].(map[string]*L7policy)[vs[1].(string)]
	}).(L7policyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyInput)(nil)).Elem(), &L7policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyArrayInput)(nil)).Elem(), L7policyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7policyMapInput)(nil)).Elem(), L7policyMap{})
	pulumi.RegisterOutputType(L7policyOutput{})
	pulumi.RegisterOutputType(L7policyArrayOutput{})
	pulumi.RegisterOutputType(L7policyMapOutput{})
}

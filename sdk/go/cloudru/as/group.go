// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Group struct {
	pulumi.CustomResourceState

	ActivityType      pulumi.StringOutput      `pulumi:"activityType"`
	AgencyName        pulumi.StringOutput      `pulumi:"agencyName"`
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// schema: Deprecated; use availabilityZones instead
	AvailableZones pulumi.StringArrayOutput `pulumi:"availableZones"`
	// The cooling duration, in seconds.
	CoolDownTime          pulumi.IntPtrOutput `pulumi:"coolDownTime"`
	CreateTime            pulumi.StringOutput `pulumi:"createTime"`
	CurrentInstanceNumber pulumi.IntOutput    `pulumi:"currentInstanceNumber"`
	// Whether to delete instances when they are removed from the AS group.
	DeleteInstances      pulumi.StringPtrOutput `pulumi:"deleteInstances"`
	DeletePublicip       pulumi.BoolPtrOutput   `pulumi:"deletePublicip"`
	DeleteVolume         pulumi.BoolOutput      `pulumi:"deleteVolume"`
	Description          pulumi.StringOutput    `pulumi:"description"`
	DesireInstanceNumber pulumi.IntOutput       `pulumi:"desireInstanceNumber"`
	Detail               pulumi.StringOutput    `pulumi:"detail"`
	Enable               pulumi.BoolPtrOutput   `pulumi:"enable"`
	EnterpriseProjectId  pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	ForceDelete          pulumi.BoolPtrOutput   `pulumi:"forceDelete"`
	// The health check grace period for instances, in seconds.
	HealthPeriodicAuditGracePeriod pulumi.IntOutput       `pulumi:"healthPeriodicAuditGracePeriod"`
	HealthPeriodicAuditMethod      pulumi.StringPtrOutput `pulumi:"healthPeriodicAuditMethod"`
	// The health check period for instances, in minutes.
	HealthPeriodicAuditTime pulumi.IntPtrOutput    `pulumi:"healthPeriodicAuditTime"`
	InstanceTerminatePolicy pulumi.StringPtrOutput `pulumi:"instanceTerminatePolicy"`
	// The instances id list in the as group.
	Instances pulumi.StringArrayOutput `pulumi:"instances"`
	IsScaling pulumi.BoolOutput        `pulumi:"isScaling"`
	// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
	//
	// Deprecated: use lbaasListeners instead
	LbListenerId         pulumi.StringPtrOutput        `pulumi:"lbListenerId"`
	LbaasListeners       GroupLbaasListenerArrayOutput `pulumi:"lbaasListeners"`
	MaxInstanceNumber    pulumi.IntPtrOutput           `pulumi:"maxInstanceNumber"`
	MinInstanceNumber    pulumi.IntPtrOutput           `pulumi:"minInstanceNumber"`
	MultiAzScalingPolicy pulumi.StringOutput           `pulumi:"multiAzScalingPolicy"`
	Networks             GroupNetworkArrayOutput       `pulumi:"networks"`
	// schema: Deprecated; The notification mode has been canceled
	Notifications pulumi.StringArrayOutput `pulumi:"notifications"`
	Region        pulumi.StringOutput      `pulumi:"region"`
	// schema: Required
	ScalingConfigurationId   pulumi.StringOutput           `pulumi:"scalingConfigurationId"`
	ScalingConfigurationName pulumi.StringOutput           `pulumi:"scalingConfigurationName"`
	ScalingGroupName         pulumi.StringOutput           `pulumi:"scalingGroupName"`
	SecurityGroups           GroupSecurityGroupArrayOutput `pulumi:"securityGroups"`
	Status                   pulumi.StringOutput           `pulumi:"status"`
	Tags                     pulumi.StringMapOutput        `pulumi:"tags"`
	VpcId                    pulumi.StringOutput           `pulumi:"vpcId"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Networks == nil {
		return nil, errors.New("invalid value for required argument 'Networks'")
	}
	if args.ScalingGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingGroupName'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("cloudru:As/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("cloudru:As/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	ActivityType      *string  `pulumi:"activityType"`
	AgencyName        *string  `pulumi:"agencyName"`
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// schema: Deprecated; use availabilityZones instead
	AvailableZones []string `pulumi:"availableZones"`
	// The cooling duration, in seconds.
	CoolDownTime          *int    `pulumi:"coolDownTime"`
	CreateTime            *string `pulumi:"createTime"`
	CurrentInstanceNumber *int    `pulumi:"currentInstanceNumber"`
	// Whether to delete instances when they are removed from the AS group.
	DeleteInstances      *string `pulumi:"deleteInstances"`
	DeletePublicip       *bool   `pulumi:"deletePublicip"`
	DeleteVolume         *bool   `pulumi:"deleteVolume"`
	Description          *string `pulumi:"description"`
	DesireInstanceNumber *int    `pulumi:"desireInstanceNumber"`
	Detail               *string `pulumi:"detail"`
	Enable               *bool   `pulumi:"enable"`
	EnterpriseProjectId  *string `pulumi:"enterpriseProjectId"`
	ForceDelete          *bool   `pulumi:"forceDelete"`
	// The health check grace period for instances, in seconds.
	HealthPeriodicAuditGracePeriod *int    `pulumi:"healthPeriodicAuditGracePeriod"`
	HealthPeriodicAuditMethod      *string `pulumi:"healthPeriodicAuditMethod"`
	// The health check period for instances, in minutes.
	HealthPeriodicAuditTime *int    `pulumi:"healthPeriodicAuditTime"`
	InstanceTerminatePolicy *string `pulumi:"instanceTerminatePolicy"`
	// The instances id list in the as group.
	Instances []string `pulumi:"instances"`
	IsScaling *bool    `pulumi:"isScaling"`
	// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
	//
	// Deprecated: use lbaasListeners instead
	LbListenerId         *string              `pulumi:"lbListenerId"`
	LbaasListeners       []GroupLbaasListener `pulumi:"lbaasListeners"`
	MaxInstanceNumber    *int                 `pulumi:"maxInstanceNumber"`
	MinInstanceNumber    *int                 `pulumi:"minInstanceNumber"`
	MultiAzScalingPolicy *string              `pulumi:"multiAzScalingPolicy"`
	Networks             []GroupNetwork       `pulumi:"networks"`
	// schema: Deprecated; The notification mode has been canceled
	Notifications []string `pulumi:"notifications"`
	Region        *string  `pulumi:"region"`
	// schema: Required
	ScalingConfigurationId   *string              `pulumi:"scalingConfigurationId"`
	ScalingConfigurationName *string              `pulumi:"scalingConfigurationName"`
	ScalingGroupName         *string              `pulumi:"scalingGroupName"`
	SecurityGroups           []GroupSecurityGroup `pulumi:"securityGroups"`
	Status                   *string              `pulumi:"status"`
	Tags                     map[string]string    `pulumi:"tags"`
	VpcId                    *string              `pulumi:"vpcId"`
}

type GroupState struct {
	ActivityType      pulumi.StringPtrInput
	AgencyName        pulumi.StringPtrInput
	AvailabilityZones pulumi.StringArrayInput
	// schema: Deprecated; use availabilityZones instead
	AvailableZones pulumi.StringArrayInput
	// The cooling duration, in seconds.
	CoolDownTime          pulumi.IntPtrInput
	CreateTime            pulumi.StringPtrInput
	CurrentInstanceNumber pulumi.IntPtrInput
	// Whether to delete instances when they are removed from the AS group.
	DeleteInstances      pulumi.StringPtrInput
	DeletePublicip       pulumi.BoolPtrInput
	DeleteVolume         pulumi.BoolPtrInput
	Description          pulumi.StringPtrInput
	DesireInstanceNumber pulumi.IntPtrInput
	Detail               pulumi.StringPtrInput
	Enable               pulumi.BoolPtrInput
	EnterpriseProjectId  pulumi.StringPtrInput
	ForceDelete          pulumi.BoolPtrInput
	// The health check grace period for instances, in seconds.
	HealthPeriodicAuditGracePeriod pulumi.IntPtrInput
	HealthPeriodicAuditMethod      pulumi.StringPtrInput
	// The health check period for instances, in minutes.
	HealthPeriodicAuditTime pulumi.IntPtrInput
	InstanceTerminatePolicy pulumi.StringPtrInput
	// The instances id list in the as group.
	Instances pulumi.StringArrayInput
	IsScaling pulumi.BoolPtrInput
	// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
	//
	// Deprecated: use lbaasListeners instead
	LbListenerId         pulumi.StringPtrInput
	LbaasListeners       GroupLbaasListenerArrayInput
	MaxInstanceNumber    pulumi.IntPtrInput
	MinInstanceNumber    pulumi.IntPtrInput
	MultiAzScalingPolicy pulumi.StringPtrInput
	Networks             GroupNetworkArrayInput
	// schema: Deprecated; The notification mode has been canceled
	Notifications pulumi.StringArrayInput
	Region        pulumi.StringPtrInput
	// schema: Required
	ScalingConfigurationId   pulumi.StringPtrInput
	ScalingConfigurationName pulumi.StringPtrInput
	ScalingGroupName         pulumi.StringPtrInput
	SecurityGroups           GroupSecurityGroupArrayInput
	Status                   pulumi.StringPtrInput
	Tags                     pulumi.StringMapInput
	VpcId                    pulumi.StringPtrInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	AgencyName        *string  `pulumi:"agencyName"`
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// schema: Deprecated; use availabilityZones instead
	AvailableZones []string `pulumi:"availableZones"`
	// The cooling duration, in seconds.
	CoolDownTime *int `pulumi:"coolDownTime"`
	// Whether to delete instances when they are removed from the AS group.
	DeleteInstances      *string `pulumi:"deleteInstances"`
	DeletePublicip       *bool   `pulumi:"deletePublicip"`
	DeleteVolume         *bool   `pulumi:"deleteVolume"`
	Description          *string `pulumi:"description"`
	DesireInstanceNumber *int    `pulumi:"desireInstanceNumber"`
	Enable               *bool   `pulumi:"enable"`
	EnterpriseProjectId  *string `pulumi:"enterpriseProjectId"`
	ForceDelete          *bool   `pulumi:"forceDelete"`
	// The health check grace period for instances, in seconds.
	HealthPeriodicAuditGracePeriod *int    `pulumi:"healthPeriodicAuditGracePeriod"`
	HealthPeriodicAuditMethod      *string `pulumi:"healthPeriodicAuditMethod"`
	// The health check period for instances, in minutes.
	HealthPeriodicAuditTime *int    `pulumi:"healthPeriodicAuditTime"`
	InstanceTerminatePolicy *string `pulumi:"instanceTerminatePolicy"`
	// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
	//
	// Deprecated: use lbaasListeners instead
	LbListenerId         *string              `pulumi:"lbListenerId"`
	LbaasListeners       []GroupLbaasListener `pulumi:"lbaasListeners"`
	MaxInstanceNumber    *int                 `pulumi:"maxInstanceNumber"`
	MinInstanceNumber    *int                 `pulumi:"minInstanceNumber"`
	MultiAzScalingPolicy *string              `pulumi:"multiAzScalingPolicy"`
	Networks             []GroupNetwork       `pulumi:"networks"`
	// schema: Deprecated; The notification mode has been canceled
	Notifications []string `pulumi:"notifications"`
	Region        *string  `pulumi:"region"`
	// schema: Required
	ScalingConfigurationId *string              `pulumi:"scalingConfigurationId"`
	ScalingGroupName       string               `pulumi:"scalingGroupName"`
	SecurityGroups         []GroupSecurityGroup `pulumi:"securityGroups"`
	Tags                   map[string]string    `pulumi:"tags"`
	VpcId                  string               `pulumi:"vpcId"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	AgencyName        pulumi.StringPtrInput
	AvailabilityZones pulumi.StringArrayInput
	// schema: Deprecated; use availabilityZones instead
	AvailableZones pulumi.StringArrayInput
	// The cooling duration, in seconds.
	CoolDownTime pulumi.IntPtrInput
	// Whether to delete instances when they are removed from the AS group.
	DeleteInstances      pulumi.StringPtrInput
	DeletePublicip       pulumi.BoolPtrInput
	DeleteVolume         pulumi.BoolPtrInput
	Description          pulumi.StringPtrInput
	DesireInstanceNumber pulumi.IntPtrInput
	Enable               pulumi.BoolPtrInput
	EnterpriseProjectId  pulumi.StringPtrInput
	ForceDelete          pulumi.BoolPtrInput
	// The health check grace period for instances, in seconds.
	HealthPeriodicAuditGracePeriod pulumi.IntPtrInput
	HealthPeriodicAuditMethod      pulumi.StringPtrInput
	// The health check period for instances, in minutes.
	HealthPeriodicAuditTime pulumi.IntPtrInput
	InstanceTerminatePolicy pulumi.StringPtrInput
	// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
	//
	// Deprecated: use lbaasListeners instead
	LbListenerId         pulumi.StringPtrInput
	LbaasListeners       GroupLbaasListenerArrayInput
	MaxInstanceNumber    pulumi.IntPtrInput
	MinInstanceNumber    pulumi.IntPtrInput
	MultiAzScalingPolicy pulumi.StringPtrInput
	Networks             GroupNetworkArrayInput
	// schema: Deprecated; The notification mode has been canceled
	Notifications pulumi.StringArrayInput
	Region        pulumi.StringPtrInput
	// schema: Required
	ScalingConfigurationId pulumi.StringPtrInput
	ScalingGroupName       pulumi.StringInput
	SecurityGroups         GroupSecurityGroupArrayInput
	Tags                   pulumi.StringMapInput
	VpcId                  pulumi.StringInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

func (o GroupOutput) ActivityType() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.ActivityType }).(pulumi.StringOutput)
}

func (o GroupOutput) AgencyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.AgencyName }).(pulumi.StringOutput)
}

func (o GroupOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// schema: Deprecated; use availabilityZones instead
func (o GroupOutput) AvailableZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.AvailableZones }).(pulumi.StringArrayOutput)
}

// The cooling duration, in seconds.
func (o GroupOutput) CoolDownTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.CoolDownTime }).(pulumi.IntPtrOutput)
}

func (o GroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o GroupOutput) CurrentInstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.CurrentInstanceNumber }).(pulumi.IntOutput)
}

// Whether to delete instances when they are removed from the AS group.
func (o GroupOutput) DeleteInstances() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.DeleteInstances }).(pulumi.StringPtrOutput)
}

func (o GroupOutput) DeletePublicip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.DeletePublicip }).(pulumi.BoolPtrOutput)
}

func (o GroupOutput) DeleteVolume() pulumi.BoolOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolOutput { return v.DeleteVolume }).(pulumi.BoolOutput)
}

func (o GroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o GroupOutput) DesireInstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.DesireInstanceNumber }).(pulumi.IntOutput)
}

func (o GroupOutput) Detail() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Detail }).(pulumi.StringOutput)
}

func (o GroupOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.Enable }).(pulumi.BoolPtrOutput)
}

func (o GroupOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o GroupOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// The health check grace period for instances, in seconds.
func (o GroupOutput) HealthPeriodicAuditGracePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.HealthPeriodicAuditGracePeriod }).(pulumi.IntOutput)
}

func (o GroupOutput) HealthPeriodicAuditMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.HealthPeriodicAuditMethod }).(pulumi.StringPtrOutput)
}

// The health check period for instances, in minutes.
func (o GroupOutput) HealthPeriodicAuditTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.HealthPeriodicAuditTime }).(pulumi.IntPtrOutput)
}

func (o GroupOutput) InstanceTerminatePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.InstanceTerminatePolicy }).(pulumi.StringPtrOutput)
}

// The instances id list in the as group.
func (o GroupOutput) Instances() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.Instances }).(pulumi.StringArrayOutput)
}

func (o GroupOutput) IsScaling() pulumi.BoolOutput {
	return o.ApplyT(func(v *Group) pulumi.BoolOutput { return v.IsScaling }).(pulumi.BoolOutput)
}

// The system supports the binding of up to six ELB listeners, the IDs of which are separated using a comma.
//
// Deprecated: use lbaasListeners instead
func (o GroupOutput) LbListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.LbListenerId }).(pulumi.StringPtrOutput)
}

func (o GroupOutput) LbaasListeners() GroupLbaasListenerArrayOutput {
	return o.ApplyT(func(v *Group) GroupLbaasListenerArrayOutput { return v.LbaasListeners }).(GroupLbaasListenerArrayOutput)
}

func (o GroupOutput) MaxInstanceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.MaxInstanceNumber }).(pulumi.IntPtrOutput)
}

func (o GroupOutput) MinInstanceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.IntPtrOutput { return v.MinInstanceNumber }).(pulumi.IntPtrOutput)
}

func (o GroupOutput) MultiAzScalingPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.MultiAzScalingPolicy }).(pulumi.StringOutput)
}

func (o GroupOutput) Networks() GroupNetworkArrayOutput {
	return o.ApplyT(func(v *Group) GroupNetworkArrayOutput { return v.Networks }).(GroupNetworkArrayOutput)
}

// schema: Deprecated; The notification mode has been canceled
func (o GroupOutput) Notifications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.Notifications }).(pulumi.StringArrayOutput)
}

func (o GroupOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// schema: Required
func (o GroupOutput) ScalingConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.ScalingConfigurationId }).(pulumi.StringOutput)
}

func (o GroupOutput) ScalingConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.ScalingConfigurationName }).(pulumi.StringOutput)
}

func (o GroupOutput) ScalingGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.ScalingGroupName }).(pulumi.StringOutput)
}

func (o GroupOutput) SecurityGroups() GroupSecurityGroupArrayOutput {
	return o.ApplyT(func(v *Group) GroupSecurityGroupArrayOutput { return v.SecurityGroups }).(GroupSecurityGroupArrayOutput)
}

func (o GroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o GroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Group) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}

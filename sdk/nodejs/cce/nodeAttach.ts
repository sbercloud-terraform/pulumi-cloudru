// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class NodeAttach extends pulumi.CustomResource {
    /**
     * Get an existing NodeAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodeAttachState, opts?: pulumi.CustomResourceOptions): NodeAttach {
        return new NodeAttach(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Cce/nodeAttach:NodeAttach';

    /**
     * Returns true if the given object is an instance of NodeAttach.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeAttach {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeAttach.__pulumiType;
    }

    declare public /*out*/ readonly availabilityZone: pulumi.Output<string>;
    declare public /*out*/ readonly chargingMode: pulumi.Output<string>;
    declare public readonly clusterId: pulumi.Output<string>;
    declare public /*out*/ readonly dataVolumes: pulumi.Output<outputs.Cce.NodeAttachDataVolume[]>;
    declare public readonly dockerBaseSize: pulumi.Output<number | undefined>;
    declare public /*out*/ readonly ecsGroupId: pulumi.Output<string>;
    declare public /*out*/ readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly extensionNics: pulumi.Output<outputs.Cce.NodeAttachExtensionNic[]>;
    declare public /*out*/ readonly flavorId: pulumi.Output<string>;
    declare public readonly hostnameConfig: pulumi.Output<outputs.Cce.NodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    declare public readonly imageId: pulumi.Output<string | undefined>;
    declare public readonly initializedConditions: pulumi.Output<string[]>;
    declare public readonly keyPair: pulumi.Output<string | undefined>;
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly lvmConfig: pulumi.Output<string | undefined>;
    declare public readonly maxPods: pulumi.Output<number | undefined>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * schema: Internal
     */
    declare public readonly nicMultiQueue: pulumi.Output<string | undefined>;
    /**
     * schema: Internal
     */
    declare public readonly nicThreshold: pulumi.Output<string | undefined>;
    declare public readonly os: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string | undefined>;
    declare public readonly postinstall: pulumi.Output<string | undefined>;
    declare public readonly preinstall: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly privateIp: pulumi.Output<string>;
    declare public readonly privateKey: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly publicIp: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly rootVolumes: pulumi.Output<outputs.Cce.NodeAttachRootVolume[]>;
    declare public readonly runtime: pulumi.Output<string>;
    declare public readonly serverId: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly storage: pulumi.Output<outputs.Cce.NodeAttachStorage | undefined>;
    declare public /*out*/ readonly subnetId: pulumi.Output<string>;
    declare public readonly systemDiskKmsKeyId: pulumi.Output<string | undefined>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly taints: pulumi.Output<outputs.Cce.NodeAttachTaint[] | undefined>;

    /**
     * Create a NodeAttach resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeAttachArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodeAttachArgs | NodeAttachState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodeAttachState | undefined;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["dataVolumes"] = state?.dataVolumes;
            resourceInputs["dockerBaseSize"] = state?.dockerBaseSize;
            resourceInputs["ecsGroupId"] = state?.ecsGroupId;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["extensionNics"] = state?.extensionNics;
            resourceInputs["flavorId"] = state?.flavorId;
            resourceInputs["hostnameConfig"] = state?.hostnameConfig;
            resourceInputs["imageId"] = state?.imageId;
            resourceInputs["initializedConditions"] = state?.initializedConditions;
            resourceInputs["keyPair"] = state?.keyPair;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["lvmConfig"] = state?.lvmConfig;
            resourceInputs["maxPods"] = state?.maxPods;
            resourceInputs["name"] = state?.name;
            resourceInputs["nicMultiQueue"] = state?.nicMultiQueue;
            resourceInputs["nicThreshold"] = state?.nicThreshold;
            resourceInputs["os"] = state?.os;
            resourceInputs["password"] = state?.password;
            resourceInputs["postinstall"] = state?.postinstall;
            resourceInputs["preinstall"] = state?.preinstall;
            resourceInputs["privateIp"] = state?.privateIp;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["region"] = state?.region;
            resourceInputs["rootVolumes"] = state?.rootVolumes;
            resourceInputs["runtime"] = state?.runtime;
            resourceInputs["serverId"] = state?.serverId;
            resourceInputs["status"] = state?.status;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["systemDiskKmsKeyId"] = state?.systemDiskKmsKeyId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["taints"] = state?.taints;
        } else {
            const args = argsOrState as NodeAttachArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.os === undefined && !opts.urn) {
                throw new Error("Missing required property 'os'");
            }
            if (args?.serverId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["dockerBaseSize"] = args?.dockerBaseSize;
            resourceInputs["hostnameConfig"] = args?.hostnameConfig;
            resourceInputs["imageId"] = args?.imageId;
            resourceInputs["initializedConditions"] = args?.initializedConditions;
            resourceInputs["keyPair"] = args?.keyPair;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["lvmConfig"] = args?.lvmConfig;
            resourceInputs["maxPods"] = args?.maxPods;
            resourceInputs["name"] = args?.name;
            resourceInputs["nicMultiQueue"] = args?.nicMultiQueue;
            resourceInputs["nicThreshold"] = args?.nicThreshold;
            resourceInputs["os"] = args?.os;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["postinstall"] = args?.postinstall;
            resourceInputs["preinstall"] = args?.preinstall;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["region"] = args?.region;
            resourceInputs["runtime"] = args?.runtime;
            resourceInputs["serverId"] = args?.serverId;
            resourceInputs["storage"] = args?.storage;
            resourceInputs["systemDiskKmsKeyId"] = args?.systemDiskKmsKeyId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["taints"] = args?.taints;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["chargingMode"] = undefined /*out*/;
            resourceInputs["dataVolumes"] = undefined /*out*/;
            resourceInputs["ecsGroupId"] = undefined /*out*/;
            resourceInputs["enterpriseProjectId"] = undefined /*out*/;
            resourceInputs["extensionNics"] = undefined /*out*/;
            resourceInputs["flavorId"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["rootVolumes"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NodeAttach.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodeAttach resources.
 */
export interface NodeAttachState {
    availabilityZone?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    dataVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachDataVolume>[]>;
    dockerBaseSize?: pulumi.Input<number>;
    ecsGroupId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    extensionNics?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachExtensionNic>[]>;
    flavorId?: pulumi.Input<string>;
    hostnameConfig?: pulumi.Input<inputs.Cce.NodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    imageId?: pulumi.Input<string>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    keyPair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lvmConfig?: pulumi.Input<string>;
    maxPods?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicMultiQueue?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicThreshold?: pulumi.Input<string>;
    os?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    postinstall?: pulumi.Input<string>;
    preinstall?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    rootVolumes?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachRootVolume>[]>;
    runtime?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.Cce.NodeAttachStorage>;
    subnetId?: pulumi.Input<string>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachTaint>[]>;
}

/**
 * The set of arguments for constructing a NodeAttach resource.
 */
export interface NodeAttachArgs {
    clusterId: pulumi.Input<string>;
    dockerBaseSize?: pulumi.Input<number>;
    hostnameConfig?: pulumi.Input<inputs.Cce.NodeAttachHostnameConfig>;
    /**
     * schema: Internal
     */
    imageId?: pulumi.Input<string>;
    initializedConditions?: pulumi.Input<pulumi.Input<string>[]>;
    keyPair?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    lvmConfig?: pulumi.Input<string>;
    maxPods?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicMultiQueue?: pulumi.Input<string>;
    /**
     * schema: Internal
     */
    nicThreshold?: pulumi.Input<string>;
    os: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    postinstall?: pulumi.Input<string>;
    preinstall?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    runtime?: pulumi.Input<string>;
    serverId: pulumi.Input<string>;
    storage?: pulumi.Input<inputs.Cce.NodeAttachStorage>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taints?: pulumi.Input<pulumi.Input<inputs.Cce.NodeAttachTaint>[]>;
}

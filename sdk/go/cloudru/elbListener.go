// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ElbListener struct {
	pulumi.CustomResourceState

	AccessPolicy              pulumi.StringPtrOutput          `pulumi:"accessPolicy"`
	AdvancedForwardingEnabled pulumi.BoolOutput               `pulumi:"advancedForwardingEnabled"`
	CaCertificate             pulumi.StringPtrOutput          `pulumi:"caCertificate"`
	Cps                       pulumi.IntOutput                `pulumi:"cps"`
	CreatedAt                 pulumi.StringOutput             `pulumi:"createdAt"`
	DefaultPoolId             pulumi.StringOutput             `pulumi:"defaultPoolId"`
	Description               pulumi.StringPtrOutput          `pulumi:"description"`
	EnableMemberRetry         pulumi.BoolOutput               `pulumi:"enableMemberRetry"`
	EnableQuicUpgrade         pulumi.StringPtrOutput          `pulumi:"enableQuicUpgrade"`
	EnterpriseProjectId       pulumi.StringOutput             `pulumi:"enterpriseProjectId"`
	ForceDelete               pulumi.BoolPtrOutput            `pulumi:"forceDelete"`
	ForwardEip                pulumi.BoolOutput               `pulumi:"forwardEip"`
	ForwardElb                pulumi.BoolOutput               `pulumi:"forwardElb"`
	ForwardHost               pulumi.BoolPtrOutput            `pulumi:"forwardHost"`
	ForwardPort               pulumi.BoolOutput               `pulumi:"forwardPort"`
	ForwardProto              pulumi.BoolOutput               `pulumi:"forwardProto"`
	ForwardRequestPort        pulumi.BoolOutput               `pulumi:"forwardRequestPort"`
	ForwardTlsCertificate     pulumi.BoolOutput               `pulumi:"forwardTlsCertificate"`
	ForwardTlsCipher          pulumi.BoolOutput               `pulumi:"forwardTlsCipher"`
	ForwardTlsProtocol        pulumi.BoolOutput               `pulumi:"forwardTlsProtocol"`
	GzipEnable                pulumi.BoolOutput               `pulumi:"gzipEnable"`
	Http2Enable               pulumi.BoolOutput               `pulumi:"http2Enable"`
	IdleTimeout               pulumi.IntOutput                `pulumi:"idleTimeout"`
	IpGroup                   pulumi.StringPtrOutput          `pulumi:"ipGroup"`
	IpGroupEnable             pulumi.StringOutput             `pulumi:"ipGroupEnable"`
	LoadbalancerId            pulumi.StringOutput             `pulumi:"loadbalancerId"`
	MaxConnection             pulumi.IntOutput                `pulumi:"maxConnection"`
	Name                      pulumi.StringOutput             `pulumi:"name"`
	PortRanges                ElbListenerPortRangeArrayOutput `pulumi:"portRanges"`
	ProtectionReason          pulumi.StringPtrOutput          `pulumi:"protectionReason"`
	ProtectionStatus          pulumi.StringOutput             `pulumi:"protectionStatus"`
	Protocol                  pulumi.StringOutput             `pulumi:"protocol"`
	ProtocolPort              pulumi.IntOutput                `pulumi:"protocolPort"`
	ProxyProtocolEnable       pulumi.BoolOutput               `pulumi:"proxyProtocolEnable"`
	QuicListenerId            pulumi.StringPtrOutput          `pulumi:"quicListenerId"`
	RealIp                    pulumi.BoolOutput               `pulumi:"realIp"`
	Region                    pulumi.StringOutput             `pulumi:"region"`
	RequestTimeout            pulumi.IntOutput                `pulumi:"requestTimeout"`
	ResponseTimeout           pulumi.IntOutput                `pulumi:"responseTimeout"`
	SecurityPolicyId          pulumi.StringPtrOutput          `pulumi:"securityPolicyId"`
	ServerCertificate         pulumi.StringPtrOutput          `pulumi:"serverCertificate"`
	SniCertificates           pulumi.StringArrayOutput        `pulumi:"sniCertificates"`
	SniMatchAlgo              pulumi.StringOutput             `pulumi:"sniMatchAlgo"`
	SslEarlyDataEnable        pulumi.BoolPtrOutput            `pulumi:"sslEarlyDataEnable"`
	Tags                      pulumi.StringMapOutput          `pulumi:"tags"`
	TlsCiphersPolicy          pulumi.StringOutput             `pulumi:"tlsCiphersPolicy"`
	UpdatedAt                 pulumi.StringOutput             `pulumi:"updatedAt"`
}

// NewElbListener registers a new resource with the given unique name, arguments, and options.
func NewElbListener(ctx *pulumi.Context,
	name string, args *ElbListenerArgs, opts ...pulumi.ResourceOption) (*ElbListener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadbalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadbalancerId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElbListener
	err := ctx.RegisterResource("sbercloud:index/elbListener:ElbListener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbListener gets an existing ElbListener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbListenerState, opts ...pulumi.ResourceOption) (*ElbListener, error) {
	var resource ElbListener
	err := ctx.ReadResource("sbercloud:index/elbListener:ElbListener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbListener resources.
type elbListenerState struct {
	AccessPolicy              *string                `pulumi:"accessPolicy"`
	AdvancedForwardingEnabled *bool                  `pulumi:"advancedForwardingEnabled"`
	CaCertificate             *string                `pulumi:"caCertificate"`
	Cps                       *int                   `pulumi:"cps"`
	CreatedAt                 *string                `pulumi:"createdAt"`
	DefaultPoolId             *string                `pulumi:"defaultPoolId"`
	Description               *string                `pulumi:"description"`
	EnableMemberRetry         *bool                  `pulumi:"enableMemberRetry"`
	EnableQuicUpgrade         *string                `pulumi:"enableQuicUpgrade"`
	EnterpriseProjectId       *string                `pulumi:"enterpriseProjectId"`
	ForceDelete               *bool                  `pulumi:"forceDelete"`
	ForwardEip                *bool                  `pulumi:"forwardEip"`
	ForwardElb                *bool                  `pulumi:"forwardElb"`
	ForwardHost               *bool                  `pulumi:"forwardHost"`
	ForwardPort               *bool                  `pulumi:"forwardPort"`
	ForwardProto              *bool                  `pulumi:"forwardProto"`
	ForwardRequestPort        *bool                  `pulumi:"forwardRequestPort"`
	ForwardTlsCertificate     *bool                  `pulumi:"forwardTlsCertificate"`
	ForwardTlsCipher          *bool                  `pulumi:"forwardTlsCipher"`
	ForwardTlsProtocol        *bool                  `pulumi:"forwardTlsProtocol"`
	GzipEnable                *bool                  `pulumi:"gzipEnable"`
	Http2Enable               *bool                  `pulumi:"http2Enable"`
	IdleTimeout               *int                   `pulumi:"idleTimeout"`
	IpGroup                   *string                `pulumi:"ipGroup"`
	IpGroupEnable             *string                `pulumi:"ipGroupEnable"`
	LoadbalancerId            *string                `pulumi:"loadbalancerId"`
	MaxConnection             *int                   `pulumi:"maxConnection"`
	Name                      *string                `pulumi:"name"`
	PortRanges                []ElbListenerPortRange `pulumi:"portRanges"`
	ProtectionReason          *string                `pulumi:"protectionReason"`
	ProtectionStatus          *string                `pulumi:"protectionStatus"`
	Protocol                  *string                `pulumi:"protocol"`
	ProtocolPort              *int                   `pulumi:"protocolPort"`
	ProxyProtocolEnable       *bool                  `pulumi:"proxyProtocolEnable"`
	QuicListenerId            *string                `pulumi:"quicListenerId"`
	RealIp                    *bool                  `pulumi:"realIp"`
	Region                    *string                `pulumi:"region"`
	RequestTimeout            *int                   `pulumi:"requestTimeout"`
	ResponseTimeout           *int                   `pulumi:"responseTimeout"`
	SecurityPolicyId          *string                `pulumi:"securityPolicyId"`
	ServerCertificate         *string                `pulumi:"serverCertificate"`
	SniCertificates           []string               `pulumi:"sniCertificates"`
	SniMatchAlgo              *string                `pulumi:"sniMatchAlgo"`
	SslEarlyDataEnable        *bool                  `pulumi:"sslEarlyDataEnable"`
	Tags                      map[string]string      `pulumi:"tags"`
	TlsCiphersPolicy          *string                `pulumi:"tlsCiphersPolicy"`
	UpdatedAt                 *string                `pulumi:"updatedAt"`
}

type ElbListenerState struct {
	AccessPolicy              pulumi.StringPtrInput
	AdvancedForwardingEnabled pulumi.BoolPtrInput
	CaCertificate             pulumi.StringPtrInput
	Cps                       pulumi.IntPtrInput
	CreatedAt                 pulumi.StringPtrInput
	DefaultPoolId             pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	EnableMemberRetry         pulumi.BoolPtrInput
	EnableQuicUpgrade         pulumi.StringPtrInput
	EnterpriseProjectId       pulumi.StringPtrInput
	ForceDelete               pulumi.BoolPtrInput
	ForwardEip                pulumi.BoolPtrInput
	ForwardElb                pulumi.BoolPtrInput
	ForwardHost               pulumi.BoolPtrInput
	ForwardPort               pulumi.BoolPtrInput
	ForwardProto              pulumi.BoolPtrInput
	ForwardRequestPort        pulumi.BoolPtrInput
	ForwardTlsCertificate     pulumi.BoolPtrInput
	ForwardTlsCipher          pulumi.BoolPtrInput
	ForwardTlsProtocol        pulumi.BoolPtrInput
	GzipEnable                pulumi.BoolPtrInput
	Http2Enable               pulumi.BoolPtrInput
	IdleTimeout               pulumi.IntPtrInput
	IpGroup                   pulumi.StringPtrInput
	IpGroupEnable             pulumi.StringPtrInput
	LoadbalancerId            pulumi.StringPtrInput
	MaxConnection             pulumi.IntPtrInput
	Name                      pulumi.StringPtrInput
	PortRanges                ElbListenerPortRangeArrayInput
	ProtectionReason          pulumi.StringPtrInput
	ProtectionStatus          pulumi.StringPtrInput
	Protocol                  pulumi.StringPtrInput
	ProtocolPort              pulumi.IntPtrInput
	ProxyProtocolEnable       pulumi.BoolPtrInput
	QuicListenerId            pulumi.StringPtrInput
	RealIp                    pulumi.BoolPtrInput
	Region                    pulumi.StringPtrInput
	RequestTimeout            pulumi.IntPtrInput
	ResponseTimeout           pulumi.IntPtrInput
	SecurityPolicyId          pulumi.StringPtrInput
	ServerCertificate         pulumi.StringPtrInput
	SniCertificates           pulumi.StringArrayInput
	SniMatchAlgo              pulumi.StringPtrInput
	SslEarlyDataEnable        pulumi.BoolPtrInput
	Tags                      pulumi.StringMapInput
	TlsCiphersPolicy          pulumi.StringPtrInput
	UpdatedAt                 pulumi.StringPtrInput
}

func (ElbListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbListenerState)(nil)).Elem()
}

type elbListenerArgs struct {
	AccessPolicy              *string                `pulumi:"accessPolicy"`
	AdvancedForwardingEnabled *bool                  `pulumi:"advancedForwardingEnabled"`
	CaCertificate             *string                `pulumi:"caCertificate"`
	Cps                       *int                   `pulumi:"cps"`
	DefaultPoolId             *string                `pulumi:"defaultPoolId"`
	Description               *string                `pulumi:"description"`
	EnableMemberRetry         *bool                  `pulumi:"enableMemberRetry"`
	EnableQuicUpgrade         *string                `pulumi:"enableQuicUpgrade"`
	ForceDelete               *bool                  `pulumi:"forceDelete"`
	ForwardEip                *bool                  `pulumi:"forwardEip"`
	ForwardElb                *bool                  `pulumi:"forwardElb"`
	ForwardHost               *bool                  `pulumi:"forwardHost"`
	ForwardPort               *bool                  `pulumi:"forwardPort"`
	ForwardProto              *bool                  `pulumi:"forwardProto"`
	ForwardRequestPort        *bool                  `pulumi:"forwardRequestPort"`
	ForwardTlsCertificate     *bool                  `pulumi:"forwardTlsCertificate"`
	ForwardTlsCipher          *bool                  `pulumi:"forwardTlsCipher"`
	ForwardTlsProtocol        *bool                  `pulumi:"forwardTlsProtocol"`
	GzipEnable                *bool                  `pulumi:"gzipEnable"`
	Http2Enable               *bool                  `pulumi:"http2Enable"`
	IdleTimeout               *int                   `pulumi:"idleTimeout"`
	IpGroup                   *string                `pulumi:"ipGroup"`
	IpGroupEnable             *string                `pulumi:"ipGroupEnable"`
	LoadbalancerId            string                 `pulumi:"loadbalancerId"`
	MaxConnection             *int                   `pulumi:"maxConnection"`
	Name                      *string                `pulumi:"name"`
	PortRanges                []ElbListenerPortRange `pulumi:"portRanges"`
	ProtectionReason          *string                `pulumi:"protectionReason"`
	ProtectionStatus          *string                `pulumi:"protectionStatus"`
	Protocol                  string                 `pulumi:"protocol"`
	ProtocolPort              *int                   `pulumi:"protocolPort"`
	ProxyProtocolEnable       *bool                  `pulumi:"proxyProtocolEnable"`
	QuicListenerId            *string                `pulumi:"quicListenerId"`
	RealIp                    *bool                  `pulumi:"realIp"`
	Region                    *string                `pulumi:"region"`
	RequestTimeout            *int                   `pulumi:"requestTimeout"`
	ResponseTimeout           *int                   `pulumi:"responseTimeout"`
	SecurityPolicyId          *string                `pulumi:"securityPolicyId"`
	ServerCertificate         *string                `pulumi:"serverCertificate"`
	SniCertificates           []string               `pulumi:"sniCertificates"`
	SniMatchAlgo              *string                `pulumi:"sniMatchAlgo"`
	SslEarlyDataEnable        *bool                  `pulumi:"sslEarlyDataEnable"`
	Tags                      map[string]string      `pulumi:"tags"`
	TlsCiphersPolicy          *string                `pulumi:"tlsCiphersPolicy"`
}

// The set of arguments for constructing a ElbListener resource.
type ElbListenerArgs struct {
	AccessPolicy              pulumi.StringPtrInput
	AdvancedForwardingEnabled pulumi.BoolPtrInput
	CaCertificate             pulumi.StringPtrInput
	Cps                       pulumi.IntPtrInput
	DefaultPoolId             pulumi.StringPtrInput
	Description               pulumi.StringPtrInput
	EnableMemberRetry         pulumi.BoolPtrInput
	EnableQuicUpgrade         pulumi.StringPtrInput
	ForceDelete               pulumi.BoolPtrInput
	ForwardEip                pulumi.BoolPtrInput
	ForwardElb                pulumi.BoolPtrInput
	ForwardHost               pulumi.BoolPtrInput
	ForwardPort               pulumi.BoolPtrInput
	ForwardProto              pulumi.BoolPtrInput
	ForwardRequestPort        pulumi.BoolPtrInput
	ForwardTlsCertificate     pulumi.BoolPtrInput
	ForwardTlsCipher          pulumi.BoolPtrInput
	ForwardTlsProtocol        pulumi.BoolPtrInput
	GzipEnable                pulumi.BoolPtrInput
	Http2Enable               pulumi.BoolPtrInput
	IdleTimeout               pulumi.IntPtrInput
	IpGroup                   pulumi.StringPtrInput
	IpGroupEnable             pulumi.StringPtrInput
	LoadbalancerId            pulumi.StringInput
	MaxConnection             pulumi.IntPtrInput
	Name                      pulumi.StringPtrInput
	PortRanges                ElbListenerPortRangeArrayInput
	ProtectionReason          pulumi.StringPtrInput
	ProtectionStatus          pulumi.StringPtrInput
	Protocol                  pulumi.StringInput
	ProtocolPort              pulumi.IntPtrInput
	ProxyProtocolEnable       pulumi.BoolPtrInput
	QuicListenerId            pulumi.StringPtrInput
	RealIp                    pulumi.BoolPtrInput
	Region                    pulumi.StringPtrInput
	RequestTimeout            pulumi.IntPtrInput
	ResponseTimeout           pulumi.IntPtrInput
	SecurityPolicyId          pulumi.StringPtrInput
	ServerCertificate         pulumi.StringPtrInput
	SniCertificates           pulumi.StringArrayInput
	SniMatchAlgo              pulumi.StringPtrInput
	SslEarlyDataEnable        pulumi.BoolPtrInput
	Tags                      pulumi.StringMapInput
	TlsCiphersPolicy          pulumi.StringPtrInput
}

func (ElbListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbListenerArgs)(nil)).Elem()
}

type ElbListenerInput interface {
	pulumi.Input

	ToElbListenerOutput() ElbListenerOutput
	ToElbListenerOutputWithContext(ctx context.Context) ElbListenerOutput
}

func (*ElbListener) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbListener)(nil)).Elem()
}

func (i *ElbListener) ToElbListenerOutput() ElbListenerOutput {
	return i.ToElbListenerOutputWithContext(context.Background())
}

func (i *ElbListener) ToElbListenerOutputWithContext(ctx context.Context) ElbListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbListenerOutput)
}

// ElbListenerArrayInput is an input type that accepts ElbListenerArray and ElbListenerArrayOutput values.
// You can construct a concrete instance of `ElbListenerArrayInput` via:
//
//	ElbListenerArray{ ElbListenerArgs{...} }
type ElbListenerArrayInput interface {
	pulumi.Input

	ToElbListenerArrayOutput() ElbListenerArrayOutput
	ToElbListenerArrayOutputWithContext(context.Context) ElbListenerArrayOutput
}

type ElbListenerArray []ElbListenerInput

func (ElbListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbListener)(nil)).Elem()
}

func (i ElbListenerArray) ToElbListenerArrayOutput() ElbListenerArrayOutput {
	return i.ToElbListenerArrayOutputWithContext(context.Background())
}

func (i ElbListenerArray) ToElbListenerArrayOutputWithContext(ctx context.Context) ElbListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbListenerArrayOutput)
}

// ElbListenerMapInput is an input type that accepts ElbListenerMap and ElbListenerMapOutput values.
// You can construct a concrete instance of `ElbListenerMapInput` via:
//
//	ElbListenerMap{ "key": ElbListenerArgs{...} }
type ElbListenerMapInput interface {
	pulumi.Input

	ToElbListenerMapOutput() ElbListenerMapOutput
	ToElbListenerMapOutputWithContext(context.Context) ElbListenerMapOutput
}

type ElbListenerMap map[string]ElbListenerInput

func (ElbListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbListener)(nil)).Elem()
}

func (i ElbListenerMap) ToElbListenerMapOutput() ElbListenerMapOutput {
	return i.ToElbListenerMapOutputWithContext(context.Background())
}

func (i ElbListenerMap) ToElbListenerMapOutputWithContext(ctx context.Context) ElbListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbListenerMapOutput)
}

type ElbListenerOutput struct{ *pulumi.OutputState }

func (ElbListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbListener)(nil)).Elem()
}

func (o ElbListenerOutput) ToElbListenerOutput() ElbListenerOutput {
	return o
}

func (o ElbListenerOutput) ToElbListenerOutputWithContext(ctx context.Context) ElbListenerOutput {
	return o
}

func (o ElbListenerOutput) AccessPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.AccessPolicy }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) AdvancedForwardingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.AdvancedForwardingEnabled }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) Cps() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.IntOutput { return v.Cps }).(pulumi.IntOutput)
}

func (o ElbListenerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) DefaultPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.DefaultPoolId }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) EnableMemberRetry() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.EnableMemberRetry }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) EnableQuicUpgrade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.EnableQuicUpgrade }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

func (o ElbListenerOutput) ForwardEip() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ForwardEip }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) ForwardElb() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ForwardElb }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) ForwardHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolPtrOutput { return v.ForwardHost }).(pulumi.BoolPtrOutput)
}

func (o ElbListenerOutput) ForwardPort() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ForwardPort }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) ForwardProto() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ForwardProto }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) ForwardRequestPort() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ForwardRequestPort }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) ForwardTlsCertificate() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ForwardTlsCertificate }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) ForwardTlsCipher() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ForwardTlsCipher }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) ForwardTlsProtocol() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ForwardTlsProtocol }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) GzipEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.GzipEnable }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) Http2Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.Http2Enable }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) IdleTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.IntOutput { return v.IdleTimeout }).(pulumi.IntOutput)
}

func (o ElbListenerOutput) IpGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.IpGroup }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) IpGroupEnable() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.IpGroupEnable }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) LoadbalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.LoadbalancerId }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) MaxConnection() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.IntOutput { return v.MaxConnection }).(pulumi.IntOutput)
}

func (o ElbListenerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) PortRanges() ElbListenerPortRangeArrayOutput {
	return o.ApplyT(func(v *ElbListener) ElbListenerPortRangeArrayOutput { return v.PortRanges }).(ElbListenerPortRangeArrayOutput)
}

func (o ElbListenerOutput) ProtectionReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.ProtectionReason }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) ProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.ProtectionStatus }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) ProtocolPort() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.IntOutput { return v.ProtocolPort }).(pulumi.IntOutput)
}

func (o ElbListenerOutput) ProxyProtocolEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.ProxyProtocolEnable }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) QuicListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.QuicListenerId }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) RealIp() pulumi.BoolOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolOutput { return v.RealIp }).(pulumi.BoolOutput)
}

func (o ElbListenerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) RequestTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.IntOutput { return v.RequestTimeout }).(pulumi.IntOutput)
}

func (o ElbListenerOutput) ResponseTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.IntOutput { return v.ResponseTimeout }).(pulumi.IntOutput)
}

func (o ElbListenerOutput) SecurityPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.SecurityPolicyId }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) ServerCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringPtrOutput { return v.ServerCertificate }).(pulumi.StringPtrOutput)
}

func (o ElbListenerOutput) SniCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringArrayOutput { return v.SniCertificates }).(pulumi.StringArrayOutput)
}

func (o ElbListenerOutput) SniMatchAlgo() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.SniMatchAlgo }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) SslEarlyDataEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.BoolPtrOutput { return v.SslEarlyDataEnable }).(pulumi.BoolPtrOutput)
}

func (o ElbListenerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ElbListenerOutput) TlsCiphersPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.TlsCiphersPolicy }).(pulumi.StringOutput)
}

func (o ElbListenerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbListener) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ElbListenerArrayOutput struct{ *pulumi.OutputState }

func (ElbListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbListener)(nil)).Elem()
}

func (o ElbListenerArrayOutput) ToElbListenerArrayOutput() ElbListenerArrayOutput {
	return o
}

func (o ElbListenerArrayOutput) ToElbListenerArrayOutputWithContext(ctx context.Context) ElbListenerArrayOutput {
	return o
}

func (o ElbListenerArrayOutput) Index(i pulumi.IntInput) ElbListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbListener {
		return vs[0].([]*ElbListener)[vs[1].(int)]
	}).(ElbListenerOutput)
}

type ElbListenerMapOutput struct{ *pulumi.OutputState }

func (ElbListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbListener)(nil)).Elem()
}

func (o ElbListenerMapOutput) ToElbListenerMapOutput() ElbListenerMapOutput {
	return o
}

func (o ElbListenerMapOutput) ToElbListenerMapOutputWithContext(ctx context.Context) ElbListenerMapOutput {
	return o
}

func (o ElbListenerMapOutput) MapIndex(k pulumi.StringInput) ElbListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbListener {
		return vs[0].(map[string]*ElbListener)[vs[1].(string)]
	}).(ElbListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbListenerInput)(nil)).Elem(), &ElbListener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbListenerArrayInput)(nil)).Elem(), ElbListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbListenerMapInput)(nil)).Elem(), ElbListenerMap{})
	pulumi.RegisterOutputType(ElbListenerOutput{})
	pulumi.RegisterOutputType(ElbListenerArrayOutput{})
	pulumi.RegisterOutputType(ElbListenerMapOutput{})
}

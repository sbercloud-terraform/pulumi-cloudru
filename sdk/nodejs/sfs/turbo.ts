// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class Turbo extends pulumi.CustomResource {
    /**
     * Get an existing Turbo resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TurboState, opts?: pulumi.CustomResourceOptions): Turbo {
        return new Turbo(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Sfs/turbo:Turbo';

    /**
     * Returns true if the given object is an instance of Turbo.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Turbo {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Turbo.__pulumiType;
    }

    declare public readonly autoCreateSecurityGroupRules: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public /*out*/ readonly availableCapacity: pulumi.Output<string>;
    declare public readonly backupId: pulumi.Output<string>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public readonly cryptKeyId: pulumi.Output<string | undefined>;
    declare public readonly dedicatedFlavor: pulumi.Output<string | undefined>;
    declare public readonly dedicatedStorageId: pulumi.Output<string | undefined>;
    declare public readonly enhanced: pulumi.Output<boolean>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly exportLocation: pulumi.Output<string>;
    declare public readonly hpcBandwidth: pulumi.Output<string>;
    declare public readonly hpcCacheBandwidth: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly securityGroupId: pulumi.Output<string>;
    declare public readonly shareProto: pulumi.Output<string | undefined>;
    declare public readonly shareType: pulumi.Output<string | undefined>;
    declare public readonly size: pulumi.Output<number>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public /*out*/ readonly version: pulumi.Output<string>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Turbo resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TurboArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TurboArgs | TurboState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TurboState | undefined;
            resourceInputs["autoCreateSecurityGroupRules"] = state?.autoCreateSecurityGroupRules;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["availableCapacity"] = state?.availableCapacity;
            resourceInputs["backupId"] = state?.backupId;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["cryptKeyId"] = state?.cryptKeyId;
            resourceInputs["dedicatedFlavor"] = state?.dedicatedFlavor;
            resourceInputs["dedicatedStorageId"] = state?.dedicatedStorageId;
            resourceInputs["enhanced"] = state?.enhanced;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["exportLocation"] = state?.exportLocation;
            resourceInputs["hpcBandwidth"] = state?.hpcBandwidth;
            resourceInputs["hpcCacheBandwidth"] = state?.hpcCacheBandwidth;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["region"] = state?.region;
            resourceInputs["securityGroupId"] = state?.securityGroupId;
            resourceInputs["shareProto"] = state?.shareProto;
            resourceInputs["shareType"] = state?.shareType;
            resourceInputs["size"] = state?.size;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["version"] = state?.version;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as TurboArgs | undefined;
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if (args?.securityGroupId === undefined && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoCreateSecurityGroupRules"] = args?.autoCreateSecurityGroupRules;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["backupId"] = args?.backupId;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["cryptKeyId"] = args?.cryptKeyId;
            resourceInputs["dedicatedFlavor"] = args?.dedicatedFlavor;
            resourceInputs["dedicatedStorageId"] = args?.dedicatedStorageId;
            resourceInputs["enhanced"] = args?.enhanced;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["hpcBandwidth"] = args?.hpcBandwidth;
            resourceInputs["hpcCacheBandwidth"] = args?.hpcCacheBandwidth;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["region"] = args?.region;
            resourceInputs["securityGroupId"] = args?.securityGroupId;
            resourceInputs["shareProto"] = args?.shareProto;
            resourceInputs["shareType"] = args?.shareType;
            resourceInputs["size"] = args?.size;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["availableCapacity"] = undefined /*out*/;
            resourceInputs["exportLocation"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Turbo.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Turbo resources.
 */
export interface TurboState {
    autoCreateSecurityGroupRules?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    availableCapacity?: pulumi.Input<string>;
    backupId?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    cryptKeyId?: pulumi.Input<string>;
    dedicatedFlavor?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    enhanced?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    exportLocation?: pulumi.Input<string>;
    hpcBandwidth?: pulumi.Input<string>;
    hpcCacheBandwidth?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId?: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    shareType?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    version?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Turbo resource.
 */
export interface TurboArgs {
    autoCreateSecurityGroupRules?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    backupId?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    cryptKeyId?: pulumi.Input<string>;
    dedicatedFlavor?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    enhanced?: pulumi.Input<boolean>;
    enterpriseProjectId?: pulumi.Input<string>;
    hpcBandwidth?: pulumi.Input<string>;
    hpcCacheBandwidth?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    securityGroupId: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    shareType?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    vpcId: pulumi.Input<string>;
}

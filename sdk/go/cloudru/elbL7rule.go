// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ElbL7rule struct {
	pulumi.CustomResourceState

	CompareType pulumi.StringOutput           `pulumi:"compareType"`
	Conditions  ElbL7ruleConditionArrayOutput `pulumi:"conditions"`
	CreatedAt   pulumi.StringOutput           `pulumi:"createdAt"`
	L7policyId  pulumi.StringOutput           `pulumi:"l7policyId"`
	Region      pulumi.StringOutput           `pulumi:"region"`
	Type        pulumi.StringOutput           `pulumi:"type"`
	UpdatedAt   pulumi.StringOutput           `pulumi:"updatedAt"`
	Value       pulumi.StringOutput           `pulumi:"value"`
}

// NewElbL7rule registers a new resource with the given unique name, arguments, and options.
func NewElbL7rule(ctx *pulumi.Context,
	name string, args *ElbL7ruleArgs, opts ...pulumi.ResourceOption) (*ElbL7rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompareType == nil {
		return nil, errors.New("invalid value for required argument 'CompareType'")
	}
	if args.L7policyId == nil {
		return nil, errors.New("invalid value for required argument 'L7policyId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElbL7rule
	err := ctx.RegisterResource("sbercloud:index/elbL7rule:ElbL7rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbL7rule gets an existing ElbL7rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbL7rule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbL7ruleState, opts ...pulumi.ResourceOption) (*ElbL7rule, error) {
	var resource ElbL7rule
	err := ctx.ReadResource("sbercloud:index/elbL7rule:ElbL7rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbL7rule resources.
type elbL7ruleState struct {
	CompareType *string              `pulumi:"compareType"`
	Conditions  []ElbL7ruleCondition `pulumi:"conditions"`
	CreatedAt   *string              `pulumi:"createdAt"`
	L7policyId  *string              `pulumi:"l7policyId"`
	Region      *string              `pulumi:"region"`
	Type        *string              `pulumi:"type"`
	UpdatedAt   *string              `pulumi:"updatedAt"`
	Value       *string              `pulumi:"value"`
}

type ElbL7ruleState struct {
	CompareType pulumi.StringPtrInput
	Conditions  ElbL7ruleConditionArrayInput
	CreatedAt   pulumi.StringPtrInput
	L7policyId  pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	Type        pulumi.StringPtrInput
	UpdatedAt   pulumi.StringPtrInput
	Value       pulumi.StringPtrInput
}

func (ElbL7ruleState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbL7ruleState)(nil)).Elem()
}

type elbL7ruleArgs struct {
	CompareType string               `pulumi:"compareType"`
	Conditions  []ElbL7ruleCondition `pulumi:"conditions"`
	L7policyId  string               `pulumi:"l7policyId"`
	Region      *string              `pulumi:"region"`
	Type        string               `pulumi:"type"`
	Value       *string              `pulumi:"value"`
}

// The set of arguments for constructing a ElbL7rule resource.
type ElbL7ruleArgs struct {
	CompareType pulumi.StringInput
	Conditions  ElbL7ruleConditionArrayInput
	L7policyId  pulumi.StringInput
	Region      pulumi.StringPtrInput
	Type        pulumi.StringInput
	Value       pulumi.StringPtrInput
}

func (ElbL7ruleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbL7ruleArgs)(nil)).Elem()
}

type ElbL7ruleInput interface {
	pulumi.Input

	ToElbL7ruleOutput() ElbL7ruleOutput
	ToElbL7ruleOutputWithContext(ctx context.Context) ElbL7ruleOutput
}

func (*ElbL7rule) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbL7rule)(nil)).Elem()
}

func (i *ElbL7rule) ToElbL7ruleOutput() ElbL7ruleOutput {
	return i.ToElbL7ruleOutputWithContext(context.Background())
}

func (i *ElbL7rule) ToElbL7ruleOutputWithContext(ctx context.Context) ElbL7ruleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbL7ruleOutput)
}

// ElbL7ruleArrayInput is an input type that accepts ElbL7ruleArray and ElbL7ruleArrayOutput values.
// You can construct a concrete instance of `ElbL7ruleArrayInput` via:
//
//	ElbL7ruleArray{ ElbL7ruleArgs{...} }
type ElbL7ruleArrayInput interface {
	pulumi.Input

	ToElbL7ruleArrayOutput() ElbL7ruleArrayOutput
	ToElbL7ruleArrayOutputWithContext(context.Context) ElbL7ruleArrayOutput
}

type ElbL7ruleArray []ElbL7ruleInput

func (ElbL7ruleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbL7rule)(nil)).Elem()
}

func (i ElbL7ruleArray) ToElbL7ruleArrayOutput() ElbL7ruleArrayOutput {
	return i.ToElbL7ruleArrayOutputWithContext(context.Background())
}

func (i ElbL7ruleArray) ToElbL7ruleArrayOutputWithContext(ctx context.Context) ElbL7ruleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbL7ruleArrayOutput)
}

// ElbL7ruleMapInput is an input type that accepts ElbL7ruleMap and ElbL7ruleMapOutput values.
// You can construct a concrete instance of `ElbL7ruleMapInput` via:
//
//	ElbL7ruleMap{ "key": ElbL7ruleArgs{...} }
type ElbL7ruleMapInput interface {
	pulumi.Input

	ToElbL7ruleMapOutput() ElbL7ruleMapOutput
	ToElbL7ruleMapOutputWithContext(context.Context) ElbL7ruleMapOutput
}

type ElbL7ruleMap map[string]ElbL7ruleInput

func (ElbL7ruleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbL7rule)(nil)).Elem()
}

func (i ElbL7ruleMap) ToElbL7ruleMapOutput() ElbL7ruleMapOutput {
	return i.ToElbL7ruleMapOutputWithContext(context.Background())
}

func (i ElbL7ruleMap) ToElbL7ruleMapOutputWithContext(ctx context.Context) ElbL7ruleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbL7ruleMapOutput)
}

type ElbL7ruleOutput struct{ *pulumi.OutputState }

func (ElbL7ruleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbL7rule)(nil)).Elem()
}

func (o ElbL7ruleOutput) ToElbL7ruleOutput() ElbL7ruleOutput {
	return o
}

func (o ElbL7ruleOutput) ToElbL7ruleOutputWithContext(ctx context.Context) ElbL7ruleOutput {
	return o
}

func (o ElbL7ruleOutput) CompareType() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbL7rule) pulumi.StringOutput { return v.CompareType }).(pulumi.StringOutput)
}

func (o ElbL7ruleOutput) Conditions() ElbL7ruleConditionArrayOutput {
	return o.ApplyT(func(v *ElbL7rule) ElbL7ruleConditionArrayOutput { return v.Conditions }).(ElbL7ruleConditionArrayOutput)
}

func (o ElbL7ruleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbL7rule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o ElbL7ruleOutput) L7policyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbL7rule) pulumi.StringOutput { return v.L7policyId }).(pulumi.StringOutput)
}

func (o ElbL7ruleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbL7rule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ElbL7ruleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbL7rule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ElbL7ruleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbL7rule) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o ElbL7ruleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbL7rule) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type ElbL7ruleArrayOutput struct{ *pulumi.OutputState }

func (ElbL7ruleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbL7rule)(nil)).Elem()
}

func (o ElbL7ruleArrayOutput) ToElbL7ruleArrayOutput() ElbL7ruleArrayOutput {
	return o
}

func (o ElbL7ruleArrayOutput) ToElbL7ruleArrayOutputWithContext(ctx context.Context) ElbL7ruleArrayOutput {
	return o
}

func (o ElbL7ruleArrayOutput) Index(i pulumi.IntInput) ElbL7ruleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbL7rule {
		return vs[0].([]*ElbL7rule)[vs[1].(int)]
	}).(ElbL7ruleOutput)
}

type ElbL7ruleMapOutput struct{ *pulumi.OutputState }

func (ElbL7ruleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbL7rule)(nil)).Elem()
}

func (o ElbL7ruleMapOutput) ToElbL7ruleMapOutput() ElbL7ruleMapOutput {
	return o
}

func (o ElbL7ruleMapOutput) ToElbL7ruleMapOutputWithContext(ctx context.Context) ElbL7ruleMapOutput {
	return o
}

func (o ElbL7ruleMapOutput) MapIndex(k pulumi.StringInput) ElbL7ruleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbL7rule {
		return vs[0].(map[string]*ElbL7rule)[vs[1].(string)]
	}).(ElbL7ruleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbL7ruleInput)(nil)).Elem(), &ElbL7rule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbL7ruleArrayInput)(nil)).Elem(), ElbL7ruleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbL7ruleMapInput)(nil)).Elem(), ElbL7ruleMap{})
	pulumi.RegisterOutputType(ElbL7ruleOutput{})
	pulumi.RegisterOutputType(ElbL7ruleArrayOutput{})
	pulumi.RegisterOutputType(ElbL7ruleMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type PgDatabase struct {
	pulumi.CustomResourceState

	// Specifies the database character set.
	CharacterSet pulumi.StringOutput `pulumi:"characterSet"`
	// Specifies the database description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege pulumi.BoolOutput `pulumi:"isRevokePublicPrivilege"`
	// Specifies the database collocation.
	LcCollate pulumi.StringOutput `pulumi:"lcCollate"`
	// Specifies the database classification.
	LcCtype pulumi.StringOutput `pulumi:"lcCtype"`
	// Specifies the database name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the database user.
	Owner  pulumi.StringOutput `pulumi:"owner"`
	Region pulumi.StringOutput `pulumi:"region"`
	// Indicates the database size, in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// Specifies the name of the database template.
	Template pulumi.StringOutput `pulumi:"template"`
}

// NewPgDatabase registers a new resource with the given unique name, arguments, and options.
func NewPgDatabase(ctx *pulumi.Context,
	name string, args *PgDatabaseArgs, opts ...pulumi.ResourceOption) (*PgDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PgDatabase
	err := ctx.RegisterResource("sbercloud:Rds/pgDatabase:PgDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgDatabase gets an existing PgDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgDatabaseState, opts ...pulumi.ResourceOption) (*PgDatabase, error) {
	var resource PgDatabase
	err := ctx.ReadResource("sbercloud:Rds/pgDatabase:PgDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgDatabase resources.
type pgDatabaseState struct {
	// Specifies the database character set.
	CharacterSet *string `pulumi:"characterSet"`
	// Specifies the database description.
	Description *string `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege *bool `pulumi:"isRevokePublicPrivilege"`
	// Specifies the database collocation.
	LcCollate *string `pulumi:"lcCollate"`
	// Specifies the database classification.
	LcCtype *string `pulumi:"lcCtype"`
	// Specifies the database name.
	Name *string `pulumi:"name"`
	// Specifies the database user.
	Owner  *string `pulumi:"owner"`
	Region *string `pulumi:"region"`
	// Indicates the database size, in bytes.
	Size *int `pulumi:"size"`
	// Specifies the name of the database template.
	Template *string `pulumi:"template"`
}

type PgDatabaseState struct {
	// Specifies the database character set.
	CharacterSet pulumi.StringPtrInput
	// Specifies the database description.
	Description pulumi.StringPtrInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringPtrInput
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege pulumi.BoolPtrInput
	// Specifies the database collocation.
	LcCollate pulumi.StringPtrInput
	// Specifies the database classification.
	LcCtype pulumi.StringPtrInput
	// Specifies the database name.
	Name pulumi.StringPtrInput
	// Specifies the database user.
	Owner  pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Indicates the database size, in bytes.
	Size pulumi.IntPtrInput
	// Specifies the name of the database template.
	Template pulumi.StringPtrInput
}

func (PgDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgDatabaseState)(nil)).Elem()
}

type pgDatabaseArgs struct {
	// Specifies the database character set.
	CharacterSet *string `pulumi:"characterSet"`
	// Specifies the database description.
	Description *string `pulumi:"description"`
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege *bool `pulumi:"isRevokePublicPrivilege"`
	// Specifies the database collocation.
	LcCollate *string `pulumi:"lcCollate"`
	// Specifies the database classification.
	LcCtype *string `pulumi:"lcCtype"`
	// Specifies the database name.
	Name *string `pulumi:"name"`
	// Specifies the database user.
	Owner  *string `pulumi:"owner"`
	Region *string `pulumi:"region"`
	// Specifies the name of the database template.
	Template *string `pulumi:"template"`
}

// The set of arguments for constructing a PgDatabase resource.
type PgDatabaseArgs struct {
	// Specifies the database character set.
	CharacterSet pulumi.StringPtrInput
	// Specifies the database description.
	Description pulumi.StringPtrInput
	// Specifies the ID of the RDS PostgreSQL instance.
	InstanceId pulumi.StringInput
	// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
	IsRevokePublicPrivilege pulumi.BoolPtrInput
	// Specifies the database collocation.
	LcCollate pulumi.StringPtrInput
	// Specifies the database classification.
	LcCtype pulumi.StringPtrInput
	// Specifies the database name.
	Name pulumi.StringPtrInput
	// Specifies the database user.
	Owner  pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the name of the database template.
	Template pulumi.StringPtrInput
}

func (PgDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgDatabaseArgs)(nil)).Elem()
}

type PgDatabaseInput interface {
	pulumi.Input

	ToPgDatabaseOutput() PgDatabaseOutput
	ToPgDatabaseOutputWithContext(ctx context.Context) PgDatabaseOutput
}

func (*PgDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**PgDatabase)(nil)).Elem()
}

func (i *PgDatabase) ToPgDatabaseOutput() PgDatabaseOutput {
	return i.ToPgDatabaseOutputWithContext(context.Background())
}

func (i *PgDatabase) ToPgDatabaseOutputWithContext(ctx context.Context) PgDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgDatabaseOutput)
}

// PgDatabaseArrayInput is an input type that accepts PgDatabaseArray and PgDatabaseArrayOutput values.
// You can construct a concrete instance of `PgDatabaseArrayInput` via:
//
//	PgDatabaseArray{ PgDatabaseArgs{...} }
type PgDatabaseArrayInput interface {
	pulumi.Input

	ToPgDatabaseArrayOutput() PgDatabaseArrayOutput
	ToPgDatabaseArrayOutputWithContext(context.Context) PgDatabaseArrayOutput
}

type PgDatabaseArray []PgDatabaseInput

func (PgDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgDatabase)(nil)).Elem()
}

func (i PgDatabaseArray) ToPgDatabaseArrayOutput() PgDatabaseArrayOutput {
	return i.ToPgDatabaseArrayOutputWithContext(context.Background())
}

func (i PgDatabaseArray) ToPgDatabaseArrayOutputWithContext(ctx context.Context) PgDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgDatabaseArrayOutput)
}

// PgDatabaseMapInput is an input type that accepts PgDatabaseMap and PgDatabaseMapOutput values.
// You can construct a concrete instance of `PgDatabaseMapInput` via:
//
//	PgDatabaseMap{ "key": PgDatabaseArgs{...} }
type PgDatabaseMapInput interface {
	pulumi.Input

	ToPgDatabaseMapOutput() PgDatabaseMapOutput
	ToPgDatabaseMapOutputWithContext(context.Context) PgDatabaseMapOutput
}

type PgDatabaseMap map[string]PgDatabaseInput

func (PgDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgDatabase)(nil)).Elem()
}

func (i PgDatabaseMap) ToPgDatabaseMapOutput() PgDatabaseMapOutput {
	return i.ToPgDatabaseMapOutputWithContext(context.Background())
}

func (i PgDatabaseMap) ToPgDatabaseMapOutputWithContext(ctx context.Context) PgDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgDatabaseMapOutput)
}

type PgDatabaseOutput struct{ *pulumi.OutputState }

func (PgDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgDatabase)(nil)).Elem()
}

func (o PgDatabaseOutput) ToPgDatabaseOutput() PgDatabaseOutput {
	return o
}

func (o PgDatabaseOutput) ToPgDatabaseOutputWithContext(ctx context.Context) PgDatabaseOutput {
	return o
}

// Specifies the database character set.
func (o PgDatabaseOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringOutput { return v.CharacterSet }).(pulumi.StringOutput)
}

// Specifies the database description.
func (o PgDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the ID of the RDS PostgreSQL instance.
func (o PgDatabaseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies whether to revoke the PUBLIC CREATE permission of the public schema.
func (o PgDatabaseOutput) IsRevokePublicPrivilege() pulumi.BoolOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.BoolOutput { return v.IsRevokePublicPrivilege }).(pulumi.BoolOutput)
}

// Specifies the database collocation.
func (o PgDatabaseOutput) LcCollate() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringOutput { return v.LcCollate }).(pulumi.StringOutput)
}

// Specifies the database classification.
func (o PgDatabaseOutput) LcCtype() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringOutput { return v.LcCtype }).(pulumi.StringOutput)
}

// Specifies the database name.
func (o PgDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the database user.
func (o PgDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o PgDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Indicates the database size, in bytes.
func (o PgDatabaseOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Specifies the name of the database template.
func (o PgDatabaseOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v *PgDatabase) pulumi.StringOutput { return v.Template }).(pulumi.StringOutput)
}

type PgDatabaseArrayOutput struct{ *pulumi.OutputState }

func (PgDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgDatabase)(nil)).Elem()
}

func (o PgDatabaseArrayOutput) ToPgDatabaseArrayOutput() PgDatabaseArrayOutput {
	return o
}

func (o PgDatabaseArrayOutput) ToPgDatabaseArrayOutputWithContext(ctx context.Context) PgDatabaseArrayOutput {
	return o
}

func (o PgDatabaseArrayOutput) Index(i pulumi.IntInput) PgDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgDatabase {
		return vs[0].([]*PgDatabase)[vs[1].(int)]
	}).(PgDatabaseOutput)
}

type PgDatabaseMapOutput struct{ *pulumi.OutputState }

func (PgDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgDatabase)(nil)).Elem()
}

func (o PgDatabaseMapOutput) ToPgDatabaseMapOutput() PgDatabaseMapOutput {
	return o
}

func (o PgDatabaseMapOutput) ToPgDatabaseMapOutputWithContext(ctx context.Context) PgDatabaseMapOutput {
	return o
}

func (o PgDatabaseMapOutput) MapIndex(k pulumi.StringInput) PgDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgDatabase {
		return vs[0].(map[string]*PgDatabase)[vs[1].(string)]
	}).(PgDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgDatabaseInput)(nil)).Elem(), &PgDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgDatabaseArrayInput)(nil)).Elem(), PgDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgDatabaseMapInput)(nil)).Elem(), PgDatabaseMap{})
	pulumi.RegisterOutputType(PgDatabaseOutput{})
	pulumi.RegisterOutputType(PgDatabaseArrayOutput{})
	pulumi.RegisterOutputType(PgDatabaseMapOutput{})
}

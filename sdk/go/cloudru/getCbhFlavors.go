// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the list of CBH specifications.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sbercloud.GetCbhFlavors(ctx, &cloudru.GetCbhFlavorsArgs{
//				Type: pulumi.StringRef("basic"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCbhFlavors(ctx *pulumi.Context, args *GetCbhFlavorsArgs, opts ...pulumi.InvokeOption) (*GetCbhFlavorsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCbhFlavorsResult
	err := ctx.Invoke("sbercloud:index/getCbhFlavors:getCbhFlavors", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCbhFlavors.
type GetCbhFlavorsArgs struct {
	// Specifies the action of querying instances specification information.
	// The valid values are as follows:
	// + **create**: Query instance specification information that can be created.
	// + **update**: Query instance specification information that can be updated.
	//
	// If omitted, the CBH specifications that can be created will be queried.
	Action *string `pulumi:"action"`
	// Specifies the number of CBH assets.
	Asset *int `pulumi:"asset"`
	// Specifies the ID of the specification of CBH.
	// At present, CBH provides two functional versions: standard version and professional version.
	// The standard version is equipped with asset specifications of 10(for example the `flavorId` is: **cbh.basic.10**),
	// 20, 50, 100, 200, 500, 1000, 2000, 5000, and 10000.
	// The professional version is equipped with 10(for example the `flavorId` is: **cbh.enhance.10**),
	// 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000 asset specifications.
	// The specification 'enhance' is more advanced than the specification 'basic'.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the maximum number of connections to the CBH.
	MaxConnection *int `pulumi:"maxConnection"`
	// Specifies the memory size of the CBH, in GB.
	Memory *int `pulumi:"memory"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the ID of the CBH specification, the query result shows all specifications
	// that can be changed by this specification. This parameter is required when `action` is set to **update**.
	SpecCode *string `pulumi:"specCode"`
	// Specifies the type of CBH specification. The value can be:
	// + **basic**: Standard version.
	// + **enhance**: Professional version.
	Type *string `pulumi:"type"`
	// Specifies the number of CPU cores of the CBH.
	Vcpus *int `pulumi:"vcpus"`
}

// A collection of values returned by getCbhFlavors.
type GetCbhFlavorsResult struct {
	Action *string `pulumi:"action"`
	// The number of CBH assets.
	Asset    *int    `pulumi:"asset"`
	FlavorId *string `pulumi:"flavorId"`
	// Indicates the list of CBH specification.
	// The flavor structure is documented below.
	Flavors []GetCbhFlavorsFlavor `pulumi:"flavors"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The maximum number of connections to the CBH.
	MaxConnection *int `pulumi:"maxConnection"`
	// The memory size of the CBH, in GB.
	Memory   *int    `pulumi:"memory"`
	Region   string  `pulumi:"region"`
	SpecCode *string `pulumi:"specCode"`
	// The type of CBH specification. The value can be:
	// + **basic**: Standard version.
	// + **enhance**: Professional version.
	Type *string `pulumi:"type"`
	// The number of CPU cores of the CBH.
	Vcpus *int `pulumi:"vcpus"`
}

func GetCbhFlavorsOutput(ctx *pulumi.Context, args GetCbhFlavorsOutputArgs, opts ...pulumi.InvokeOption) GetCbhFlavorsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCbhFlavorsResultOutput, error) {
			args := v.(GetCbhFlavorsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getCbhFlavors:getCbhFlavors", args, GetCbhFlavorsResultOutput{}, options).(GetCbhFlavorsResultOutput), nil
		}).(GetCbhFlavorsResultOutput)
}

// A collection of arguments for invoking getCbhFlavors.
type GetCbhFlavorsOutputArgs struct {
	// Specifies the action of querying instances specification information.
	// The valid values are as follows:
	// + **create**: Query instance specification information that can be created.
	// + **update**: Query instance specification information that can be updated.
	//
	// If omitted, the CBH specifications that can be created will be queried.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Specifies the number of CBH assets.
	Asset pulumi.IntPtrInput `pulumi:"asset"`
	// Specifies the ID of the specification of CBH.
	// At present, CBH provides two functional versions: standard version and professional version.
	// The standard version is equipped with asset specifications of 10(for example the `flavorId` is: **cbh.basic.10**),
	// 20, 50, 100, 200, 500, 1000, 2000, 5000, and 10000.
	// The professional version is equipped with 10(for example the `flavorId` is: **cbh.enhance.10**),
	// 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000 asset specifications.
	// The specification 'enhance' is more advanced than the specification 'basic'.
	FlavorId pulumi.StringPtrInput `pulumi:"flavorId"`
	// Specifies the maximum number of connections to the CBH.
	MaxConnection pulumi.IntPtrInput `pulumi:"maxConnection"`
	// Specifies the memory size of the CBH, in GB.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the ID of the CBH specification, the query result shows all specifications
	// that can be changed by this specification. This parameter is required when `action` is set to **update**.
	SpecCode pulumi.StringPtrInput `pulumi:"specCode"`
	// Specifies the type of CBH specification. The value can be:
	// + **basic**: Standard version.
	// + **enhance**: Professional version.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the number of CPU cores of the CBH.
	Vcpus pulumi.IntPtrInput `pulumi:"vcpus"`
}

func (GetCbhFlavorsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCbhFlavorsArgs)(nil)).Elem()
}

// A collection of values returned by getCbhFlavors.
type GetCbhFlavorsResultOutput struct{ *pulumi.OutputState }

func (GetCbhFlavorsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCbhFlavorsResult)(nil)).Elem()
}

func (o GetCbhFlavorsResultOutput) ToGetCbhFlavorsResultOutput() GetCbhFlavorsResultOutput {
	return o
}

func (o GetCbhFlavorsResultOutput) ToGetCbhFlavorsResultOutputWithContext(ctx context.Context) GetCbhFlavorsResultOutput {
	return o
}

func (o GetCbhFlavorsResultOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// The number of CBH assets.
func (o GetCbhFlavorsResultOutput) Asset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) *int { return v.Asset }).(pulumi.IntPtrOutput)
}

func (o GetCbhFlavorsResultOutput) FlavorId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) *string { return v.FlavorId }).(pulumi.StringPtrOutput)
}

// Indicates the list of CBH specification.
// The flavor structure is documented below.
func (o GetCbhFlavorsResultOutput) Flavors() GetCbhFlavorsFlavorArrayOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) []GetCbhFlavorsFlavor { return v.Flavors }).(GetCbhFlavorsFlavorArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCbhFlavorsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The maximum number of connections to the CBH.
func (o GetCbhFlavorsResultOutput) MaxConnection() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) *int { return v.MaxConnection }).(pulumi.IntPtrOutput)
}

// The memory size of the CBH, in GB.
func (o GetCbhFlavorsResultOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o GetCbhFlavorsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetCbhFlavorsResultOutput) SpecCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) *string { return v.SpecCode }).(pulumi.StringPtrOutput)
}

// The type of CBH specification. The value can be:
// + **basic**: Standard version.
// + **enhance**: Professional version.
func (o GetCbhFlavorsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The number of CPU cores of the CBH.
func (o GetCbhFlavorsResultOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetCbhFlavorsResult) *int { return v.Vcpus }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCbhFlavorsResultOutput{})
}

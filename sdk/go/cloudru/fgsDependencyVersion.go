// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type FgsDependencyVersion struct {
	pulumi.CustomResourceState

	// The ID of the dependency package corresponding to the version.
	DependencyId pulumi.StringOutput `pulumi:"dependencyId"`
	// The description of the custom dependency version.
	Description pulumi.StringOutput `pulumi:"description"`
	// The unique ID of the dependency.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// The OBS bucket path where the dependency package is located.
	Link pulumi.StringOutput `pulumi:"link"`
	// The name of the custom dependency package to which the version belongs.
	Name pulumi.StringOutput `pulumi:"name"`
	// The dependency owner, public indicates a public dependency.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The region where the custom dependency version is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The runtime of the custom dependency package version.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// The dependency size, in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The dependency package version.
	Version pulumi.IntOutput `pulumi:"version"`
	// The ID of the dependency package version.
	VersionId pulumi.StringOutput `pulumi:"versionId"`
}

// NewFgsDependencyVersion registers a new resource with the given unique name, arguments, and options.
func NewFgsDependencyVersion(ctx *pulumi.Context,
	name string, args *FgsDependencyVersionArgs, opts ...pulumi.ResourceOption) (*FgsDependencyVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Link == nil {
		return nil, errors.New("invalid value for required argument 'Link'")
	}
	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FgsDependencyVersion
	err := ctx.RegisterResource("sbercloud:index/fgsDependencyVersion:FgsDependencyVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFgsDependencyVersion gets an existing FgsDependencyVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFgsDependencyVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FgsDependencyVersionState, opts ...pulumi.ResourceOption) (*FgsDependencyVersion, error) {
	var resource FgsDependencyVersion
	err := ctx.ReadResource("sbercloud:index/fgsDependencyVersion:FgsDependencyVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FgsDependencyVersion resources.
type fgsDependencyVersionState struct {
	// The ID of the dependency package corresponding to the version.
	DependencyId *string `pulumi:"dependencyId"`
	// The description of the custom dependency version.
	Description *string `pulumi:"description"`
	// The unique ID of the dependency.
	Etag *string `pulumi:"etag"`
	// The OBS bucket path where the dependency package is located.
	Link *string `pulumi:"link"`
	// The name of the custom dependency package to which the version belongs.
	Name *string `pulumi:"name"`
	// The dependency owner, public indicates a public dependency.
	Owner *string `pulumi:"owner"`
	// The region where the custom dependency version is located.
	Region *string `pulumi:"region"`
	// The runtime of the custom dependency package version.
	Runtime *string `pulumi:"runtime"`
	// The dependency size, in bytes.
	Size *int `pulumi:"size"`
	// The dependency package version.
	Version *int `pulumi:"version"`
	// The ID of the dependency package version.
	VersionId *string `pulumi:"versionId"`
}

type FgsDependencyVersionState struct {
	// The ID of the dependency package corresponding to the version.
	DependencyId pulumi.StringPtrInput
	// The description of the custom dependency version.
	Description pulumi.StringPtrInput
	// The unique ID of the dependency.
	Etag pulumi.StringPtrInput
	// The OBS bucket path where the dependency package is located.
	Link pulumi.StringPtrInput
	// The name of the custom dependency package to which the version belongs.
	Name pulumi.StringPtrInput
	// The dependency owner, public indicates a public dependency.
	Owner pulumi.StringPtrInput
	// The region where the custom dependency version is located.
	Region pulumi.StringPtrInput
	// The runtime of the custom dependency package version.
	Runtime pulumi.StringPtrInput
	// The dependency size, in bytes.
	Size pulumi.IntPtrInput
	// The dependency package version.
	Version pulumi.IntPtrInput
	// The ID of the dependency package version.
	VersionId pulumi.StringPtrInput
}

func (FgsDependencyVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsDependencyVersionState)(nil)).Elem()
}

type fgsDependencyVersionArgs struct {
	// The description of the custom dependency version.
	Description *string `pulumi:"description"`
	// The OBS bucket path where the dependency package is located.
	Link string `pulumi:"link"`
	// The name of the custom dependency package to which the version belongs.
	Name *string `pulumi:"name"`
	// The region where the custom dependency version is located.
	Region *string `pulumi:"region"`
	// The runtime of the custom dependency package version.
	Runtime string `pulumi:"runtime"`
}

// The set of arguments for constructing a FgsDependencyVersion resource.
type FgsDependencyVersionArgs struct {
	// The description of the custom dependency version.
	Description pulumi.StringPtrInput
	// The OBS bucket path where the dependency package is located.
	Link pulumi.StringInput
	// The name of the custom dependency package to which the version belongs.
	Name pulumi.StringPtrInput
	// The region where the custom dependency version is located.
	Region pulumi.StringPtrInput
	// The runtime of the custom dependency package version.
	Runtime pulumi.StringInput
}

func (FgsDependencyVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fgsDependencyVersionArgs)(nil)).Elem()
}

type FgsDependencyVersionInput interface {
	pulumi.Input

	ToFgsDependencyVersionOutput() FgsDependencyVersionOutput
	ToFgsDependencyVersionOutputWithContext(ctx context.Context) FgsDependencyVersionOutput
}

func (*FgsDependencyVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsDependencyVersion)(nil)).Elem()
}

func (i *FgsDependencyVersion) ToFgsDependencyVersionOutput() FgsDependencyVersionOutput {
	return i.ToFgsDependencyVersionOutputWithContext(context.Background())
}

func (i *FgsDependencyVersion) ToFgsDependencyVersionOutputWithContext(ctx context.Context) FgsDependencyVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsDependencyVersionOutput)
}

// FgsDependencyVersionArrayInput is an input type that accepts FgsDependencyVersionArray and FgsDependencyVersionArrayOutput values.
// You can construct a concrete instance of `FgsDependencyVersionArrayInput` via:
//
//	FgsDependencyVersionArray{ FgsDependencyVersionArgs{...} }
type FgsDependencyVersionArrayInput interface {
	pulumi.Input

	ToFgsDependencyVersionArrayOutput() FgsDependencyVersionArrayOutput
	ToFgsDependencyVersionArrayOutputWithContext(context.Context) FgsDependencyVersionArrayOutput
}

type FgsDependencyVersionArray []FgsDependencyVersionInput

func (FgsDependencyVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsDependencyVersion)(nil)).Elem()
}

func (i FgsDependencyVersionArray) ToFgsDependencyVersionArrayOutput() FgsDependencyVersionArrayOutput {
	return i.ToFgsDependencyVersionArrayOutputWithContext(context.Background())
}

func (i FgsDependencyVersionArray) ToFgsDependencyVersionArrayOutputWithContext(ctx context.Context) FgsDependencyVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsDependencyVersionArrayOutput)
}

// FgsDependencyVersionMapInput is an input type that accepts FgsDependencyVersionMap and FgsDependencyVersionMapOutput values.
// You can construct a concrete instance of `FgsDependencyVersionMapInput` via:
//
//	FgsDependencyVersionMap{ "key": FgsDependencyVersionArgs{...} }
type FgsDependencyVersionMapInput interface {
	pulumi.Input

	ToFgsDependencyVersionMapOutput() FgsDependencyVersionMapOutput
	ToFgsDependencyVersionMapOutputWithContext(context.Context) FgsDependencyVersionMapOutput
}

type FgsDependencyVersionMap map[string]FgsDependencyVersionInput

func (FgsDependencyVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsDependencyVersion)(nil)).Elem()
}

func (i FgsDependencyVersionMap) ToFgsDependencyVersionMapOutput() FgsDependencyVersionMapOutput {
	return i.ToFgsDependencyVersionMapOutputWithContext(context.Background())
}

func (i FgsDependencyVersionMap) ToFgsDependencyVersionMapOutputWithContext(ctx context.Context) FgsDependencyVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FgsDependencyVersionMapOutput)
}

type FgsDependencyVersionOutput struct{ *pulumi.OutputState }

func (FgsDependencyVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FgsDependencyVersion)(nil)).Elem()
}

func (o FgsDependencyVersionOutput) ToFgsDependencyVersionOutput() FgsDependencyVersionOutput {
	return o
}

func (o FgsDependencyVersionOutput) ToFgsDependencyVersionOutputWithContext(ctx context.Context) FgsDependencyVersionOutput {
	return o
}

// The ID of the dependency package corresponding to the version.
func (o FgsDependencyVersionOutput) DependencyId() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.DependencyId }).(pulumi.StringOutput)
}

// The description of the custom dependency version.
func (o FgsDependencyVersionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The unique ID of the dependency.
func (o FgsDependencyVersionOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// The OBS bucket path where the dependency package is located.
func (o FgsDependencyVersionOutput) Link() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.Link }).(pulumi.StringOutput)
}

// The name of the custom dependency package to which the version belongs.
func (o FgsDependencyVersionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The dependency owner, public indicates a public dependency.
func (o FgsDependencyVersionOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The region where the custom dependency version is located.
func (o FgsDependencyVersionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The runtime of the custom dependency package version.
func (o FgsDependencyVersionOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// The dependency size, in bytes.
func (o FgsDependencyVersionOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The dependency package version.
func (o FgsDependencyVersionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// The ID of the dependency package version.
func (o FgsDependencyVersionOutput) VersionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FgsDependencyVersion) pulumi.StringOutput { return v.VersionId }).(pulumi.StringOutput)
}

type FgsDependencyVersionArrayOutput struct{ *pulumi.OutputState }

func (FgsDependencyVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FgsDependencyVersion)(nil)).Elem()
}

func (o FgsDependencyVersionArrayOutput) ToFgsDependencyVersionArrayOutput() FgsDependencyVersionArrayOutput {
	return o
}

func (o FgsDependencyVersionArrayOutput) ToFgsDependencyVersionArrayOutputWithContext(ctx context.Context) FgsDependencyVersionArrayOutput {
	return o
}

func (o FgsDependencyVersionArrayOutput) Index(i pulumi.IntInput) FgsDependencyVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FgsDependencyVersion {
		return vs[0].([]*FgsDependencyVersion)[vs[1].(int)]
	}).(FgsDependencyVersionOutput)
}

type FgsDependencyVersionMapOutput struct{ *pulumi.OutputState }

func (FgsDependencyVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FgsDependencyVersion)(nil)).Elem()
}

func (o FgsDependencyVersionMapOutput) ToFgsDependencyVersionMapOutput() FgsDependencyVersionMapOutput {
	return o
}

func (o FgsDependencyVersionMapOutput) ToFgsDependencyVersionMapOutputWithContext(ctx context.Context) FgsDependencyVersionMapOutput {
	return o
}

func (o FgsDependencyVersionMapOutput) MapIndex(k pulumi.StringInput) FgsDependencyVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FgsDependencyVersion {
		return vs[0].(map[string]*FgsDependencyVersion)[vs[1].(string)]
	}).(FgsDependencyVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FgsDependencyVersionInput)(nil)).Elem(), &FgsDependencyVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsDependencyVersionArrayInput)(nil)).Elem(), FgsDependencyVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FgsDependencyVersionMapInput)(nil)).Elem(), FgsDependencyVersionMap{})
	pulumi.RegisterOutputType(FgsDependencyVersionOutput{})
	pulumi.RegisterOutputType(FgsDependencyVersionArrayOutput{})
	pulumi.RegisterOutputType(FgsDependencyVersionMapOutput{})
}

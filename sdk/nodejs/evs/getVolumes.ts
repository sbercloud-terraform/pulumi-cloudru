// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getVolumes(args?: GetVolumesArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cloudru:Evs/getVolumes:getVolumes", {
        "availabilityZone": args.availabilityZone,
        "dedicatedStorageId": args.dedicatedStorageId,
        "dedicatedStorageName": args.dedicatedStorageName,
        "enterpriseProjectId": args.enterpriseProjectId,
        "ids": args.ids,
        "metadata": args.metadata,
        "name": args.name,
        "region": args.region,
        "serverId": args.serverId,
        "serviceType": args.serviceType,
        "shareable": args.shareable,
        "sortDir": args.sortDir,
        "sortKey": args.sortKey,
        "status": args.status,
        "tags": args.tags,
        "volumeId": args.volumeId,
        "volumeTypeId": args.volumeTypeId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumes.
 */
export interface GetVolumesArgs {
    availabilityZone?: string;
    dedicatedStorageId?: string;
    dedicatedStorageName?: string;
    enterpriseProjectId?: string;
    ids?: string;
    metadata?: string;
    name?: string;
    region?: string;
    serverId?: string;
    serviceType?: string;
    shareable?: boolean;
    sortDir?: string;
    sortKey?: string;
    status?: string;
    tags?: {[key: string]: string};
    volumeId?: string;
    volumeTypeId?: string;
}

/**
 * A collection of values returned by getVolumes.
 */
export interface GetVolumesResult {
    readonly availabilityZone?: string;
    readonly dedicatedStorageId?: string;
    readonly dedicatedStorageName?: string;
    readonly enterpriseProjectId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string;
    readonly metadata?: string;
    readonly name?: string;
    readonly region?: string;
    readonly serverId?: string;
    readonly serviceType?: string;
    readonly shareable?: boolean;
    readonly sortDir?: string;
    readonly sortKey?: string;
    readonly status?: string;
    readonly tags?: {[key: string]: string};
    readonly volumeId?: string;
    readonly volumeTypeId?: string;
    readonly volumes: outputs.Evs.GetVolumesVolume[];
}
export function getVolumesOutput(args?: GetVolumesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVolumesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cloudru:Evs/getVolumes:getVolumes", {
        "availabilityZone": args.availabilityZone,
        "dedicatedStorageId": args.dedicatedStorageId,
        "dedicatedStorageName": args.dedicatedStorageName,
        "enterpriseProjectId": args.enterpriseProjectId,
        "ids": args.ids,
        "metadata": args.metadata,
        "name": args.name,
        "region": args.region,
        "serverId": args.serverId,
        "serviceType": args.serviceType,
        "shareable": args.shareable,
        "sortDir": args.sortDir,
        "sortKey": args.sortKey,
        "status": args.status,
        "tags": args.tags,
        "volumeId": args.volumeId,
        "volumeTypeId": args.volumeTypeId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumes.
 */
export interface GetVolumesOutputArgs {
    availabilityZone?: pulumi.Input<string>;
    dedicatedStorageId?: pulumi.Input<string>;
    dedicatedStorageName?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    ids?: pulumi.Input<string>;
    metadata?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    serverId?: pulumi.Input<string>;
    serviceType?: pulumi.Input<string>;
    shareable?: pulumi.Input<boolean>;
    sortDir?: pulumi.Input<string>;
    sortKey?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    volumeId?: pulumi.Input<string>;
    volumeTypeId?: pulumi.Input<string>;
}

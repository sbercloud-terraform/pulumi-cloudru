// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get the list of available flavor details within SberCloud.
 *
 * ## Example Usage
 *
 * ### Query the list of kafka flavors for cluster type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.Dms.getFlavors({
 *     type: "cluster",
 * });
 * ```
 *
 * ### Query the kafka flavor details of the specified ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.Dms.getFlavors({
 *     flavorId: "c6.2u4g.cluster",
 * });
 * ```
 *
 * ### Query list of kafka flavors that available in the availability zone list
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const az1 = config.requireObject<any>("az1");
 * const az2 = config.requireObject<any>("az2");
 * const test = sbercloud.Dms.getFlavors({
 *     availabilityZones: [
 *         az1,
 *         az2,
 *     ],
 * });
 * ```
 */
export function getFlavors(args?: GetFlavorsArgs, opts?: pulumi.InvokeOptions): Promise<GetFlavorsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Dms/getFlavors:getFlavors", {
        "archType": args.archType,
        "availabilityZones": args.availabilityZones,
        "chargingMode": args.chargingMode,
        "flavorId": args.flavorId,
        "region": args.region,
        "storageSpecCode": args.storageSpecCode,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getFlavors.
 */
export interface GetFlavorsArgs {
    /**
     * Specifies the type of CPU architecture, e.g. **X86**.
     */
    archType?: string;
    /**
     * Specifies the list of availability zones with available resources.
     */
    availabilityZones?: string[];
    /**
     * Specifies the flavor billing mode.
     * The valid values are **prePaid** and **postPaid**.
     */
    chargingMode?: string;
    /**
     * Specifies the DMS flavor ID, e.g. **c6.2u4g.cluster**.
     */
    flavorId?: string;
    /**
     * Specifies the region in which to obtain the dms kafka flavors.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the disk IO encoding.
     * + **dms.physical.storage.high.v2**: Type of the disk that uses high I/O.
     * + **dms.physical.storage.ultra.v2**: Type of the disk that uses ultra-high I/O.
     */
    storageSpecCode?: string;
    /**
     * Specifies flavor type. The valid values are **single**, **cluster** and **cluster.small**.
     */
    type?: string;
}

/**
 * A collection of values returned by getFlavors.
 */
export interface GetFlavorsResult {
    readonly archType?: string;
    /**
     * The list of availability zones with available resources.
     */
    readonly availabilityZones?: string[];
    readonly chargingMode?: string;
    readonly flavorId?: string;
    /**
     * The list of flavor details.
     * The object structure is documented below.
     */
    readonly flavors: outputs.Dms.GetFlavorsFlavor[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly region: string;
    /**
     * The disk IO encoding.
     */
    readonly storageSpecCode?: string;
    /**
     * The disk type.
     */
    readonly type?: string;
    /**
     * The supported flavor versions.
     */
    readonly versions: string[];
}
/**
 * Use this data source to get the list of available flavor details within SberCloud.
 *
 * ## Example Usage
 *
 * ### Query the list of kafka flavors for cluster type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.Dms.getFlavors({
 *     type: "cluster",
 * });
 * ```
 *
 * ### Query the kafka flavor details of the specified ID
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.Dms.getFlavors({
 *     flavorId: "c6.2u4g.cluster",
 * });
 * ```
 *
 * ### Query list of kafka flavors that available in the availability zone list
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const az1 = config.requireObject<any>("az1");
 * const az2 = config.requireObject<any>("az2");
 * const test = sbercloud.Dms.getFlavors({
 *     availabilityZones: [
 *         az1,
 *         az2,
 *     ],
 * });
 * ```
 */
export function getFlavorsOutput(args?: GetFlavorsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFlavorsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Dms/getFlavors:getFlavors", {
        "archType": args.archType,
        "availabilityZones": args.availabilityZones,
        "chargingMode": args.chargingMode,
        "flavorId": args.flavorId,
        "region": args.region,
        "storageSpecCode": args.storageSpecCode,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getFlavors.
 */
export interface GetFlavorsOutputArgs {
    /**
     * Specifies the type of CPU architecture, e.g. **X86**.
     */
    archType?: pulumi.Input<string>;
    /**
     * Specifies the list of availability zones with available resources.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the flavor billing mode.
     * The valid values are **prePaid** and **postPaid**.
     */
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies the DMS flavor ID, e.g. **c6.2u4g.cluster**.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Specifies the region in which to obtain the dms kafka flavors.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the disk IO encoding.
     * + **dms.physical.storage.high.v2**: Type of the disk that uses high I/O.
     * + **dms.physical.storage.ultra.v2**: Type of the disk that uses ultra-high I/O.
     */
    storageSpecCode?: pulumi.Input<string>;
    /**
     * Specifies flavor type. The valid values are **single**, **cluster** and **cluster.small**.
     */
    type?: pulumi.Input<string>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type KafkaUser struct {
	pulumi.CustomResourceState

	CreatedAt   pulumi.StringOutput    `pulumi:"createdAt"`
	DefaultApp  pulumi.BoolOutput      `pulumi:"defaultApp"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	InstanceId  pulumi.StringOutput    `pulumi:"instanceId"`
	Name        pulumi.StringOutput    `pulumi:"name"`
	Password    pulumi.StringOutput    `pulumi:"password"`
	Region      pulumi.StringOutput    `pulumi:"region"`
	Role        pulumi.StringOutput    `pulumi:"role"`
}

// NewKafkaUser registers a new resource with the given unique name, arguments, and options.
func NewKafkaUser(ctx *pulumi.Context,
	name string, args *KafkaUserArgs, opts ...pulumi.ResourceOption) (*KafkaUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaUser
	err := ctx.RegisterResource("cloudru:Dms/kafkaUser:KafkaUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaUser gets an existing KafkaUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaUserState, opts ...pulumi.ResourceOption) (*KafkaUser, error) {
	var resource KafkaUser
	err := ctx.ReadResource("cloudru:Dms/kafkaUser:KafkaUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaUser resources.
type kafkaUserState struct {
	CreatedAt   *string `pulumi:"createdAt"`
	DefaultApp  *bool   `pulumi:"defaultApp"`
	Description *string `pulumi:"description"`
	InstanceId  *string `pulumi:"instanceId"`
	Name        *string `pulumi:"name"`
	Password    *string `pulumi:"password"`
	Region      *string `pulumi:"region"`
	Role        *string `pulumi:"role"`
}

type KafkaUserState struct {
	CreatedAt   pulumi.StringPtrInput
	DefaultApp  pulumi.BoolPtrInput
	Description pulumi.StringPtrInput
	InstanceId  pulumi.StringPtrInput
	Name        pulumi.StringPtrInput
	Password    pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	Role        pulumi.StringPtrInput
}

func (KafkaUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserState)(nil)).Elem()
}

type kafkaUserArgs struct {
	Description *string `pulumi:"description"`
	InstanceId  string  `pulumi:"instanceId"`
	Name        *string `pulumi:"name"`
	Password    string  `pulumi:"password"`
	Region      *string `pulumi:"region"`
}

// The set of arguments for constructing a KafkaUser resource.
type KafkaUserArgs struct {
	Description pulumi.StringPtrInput
	InstanceId  pulumi.StringInput
	Name        pulumi.StringPtrInput
	Password    pulumi.StringInput
	Region      pulumi.StringPtrInput
}

func (KafkaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaUserArgs)(nil)).Elem()
}

type KafkaUserInput interface {
	pulumi.Input

	ToKafkaUserOutput() KafkaUserOutput
	ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput
}

func (*KafkaUser) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUser)(nil)).Elem()
}

func (i *KafkaUser) ToKafkaUserOutput() KafkaUserOutput {
	return i.ToKafkaUserOutputWithContext(context.Background())
}

func (i *KafkaUser) ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserOutput)
}

// KafkaUserArrayInput is an input type that accepts KafkaUserArray and KafkaUserArrayOutput values.
// You can construct a concrete instance of `KafkaUserArrayInput` via:
//
//	KafkaUserArray{ KafkaUserArgs{...} }
type KafkaUserArrayInput interface {
	pulumi.Input

	ToKafkaUserArrayOutput() KafkaUserArrayOutput
	ToKafkaUserArrayOutputWithContext(context.Context) KafkaUserArrayOutput
}

type KafkaUserArray []KafkaUserInput

func (KafkaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUser)(nil)).Elem()
}

func (i KafkaUserArray) ToKafkaUserArrayOutput() KafkaUserArrayOutput {
	return i.ToKafkaUserArrayOutputWithContext(context.Background())
}

func (i KafkaUserArray) ToKafkaUserArrayOutputWithContext(ctx context.Context) KafkaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserArrayOutput)
}

// KafkaUserMapInput is an input type that accepts KafkaUserMap and KafkaUserMapOutput values.
// You can construct a concrete instance of `KafkaUserMapInput` via:
//
//	KafkaUserMap{ "key": KafkaUserArgs{...} }
type KafkaUserMapInput interface {
	pulumi.Input

	ToKafkaUserMapOutput() KafkaUserMapOutput
	ToKafkaUserMapOutputWithContext(context.Context) KafkaUserMapOutput
}

type KafkaUserMap map[string]KafkaUserInput

func (KafkaUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUser)(nil)).Elem()
}

func (i KafkaUserMap) ToKafkaUserMapOutput() KafkaUserMapOutput {
	return i.ToKafkaUserMapOutputWithContext(context.Background())
}

func (i KafkaUserMap) ToKafkaUserMapOutputWithContext(ctx context.Context) KafkaUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaUserMapOutput)
}

type KafkaUserOutput struct{ *pulumi.OutputState }

func (KafkaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaUser)(nil)).Elem()
}

func (o KafkaUserOutput) ToKafkaUserOutput() KafkaUserOutput {
	return o
}

func (o KafkaUserOutput) ToKafkaUserOutputWithContext(ctx context.Context) KafkaUserOutput {
	return o
}

func (o KafkaUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o KafkaUserOutput) DefaultApp() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.BoolOutput { return v.DefaultApp }).(pulumi.BoolOutput)
}

func (o KafkaUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o KafkaUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o KafkaUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o KafkaUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o KafkaUserOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o KafkaUserOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaUser) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type KafkaUserArrayOutput struct{ *pulumi.OutputState }

func (KafkaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaUser)(nil)).Elem()
}

func (o KafkaUserArrayOutput) ToKafkaUserArrayOutput() KafkaUserArrayOutput {
	return o
}

func (o KafkaUserArrayOutput) ToKafkaUserArrayOutputWithContext(ctx context.Context) KafkaUserArrayOutput {
	return o
}

func (o KafkaUserArrayOutput) Index(i pulumi.IntInput) KafkaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaUser {
		return vs[0].([]*KafkaUser)[vs[1].(int)]
	}).(KafkaUserOutput)
}

type KafkaUserMapOutput struct{ *pulumi.OutputState }

func (KafkaUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaUser)(nil)).Elem()
}

func (o KafkaUserMapOutput) ToKafkaUserMapOutput() KafkaUserMapOutput {
	return o
}

func (o KafkaUserMapOutput) ToKafkaUserMapOutputWithContext(ctx context.Context) KafkaUserMapOutput {
	return o
}

func (o KafkaUserMapOutput) MapIndex(k pulumi.StringInput) KafkaUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaUser {
		return vs[0].(map[string]*KafkaUser)[vs[1].(string)]
	}).(KafkaUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserInput)(nil)).Elem(), &KafkaUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserArrayInput)(nil)).Elem(), KafkaUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaUserMapInput)(nil)).Elem(), KafkaUserMap{})
	pulumi.RegisterOutputType(KafkaUserOutput{})
	pulumi.RegisterOutputType(KafkaUserArrayOutput{})
	pulumi.RegisterOutputType(KafkaUserMapOutput{})
}

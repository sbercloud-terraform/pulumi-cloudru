// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a SWR repository resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			organizationName := cfg.RequireObject("organizationName")
//			_, err := sbercloud.NewSwrRepository(ctx, "test", &sbercloud.SwrRepositoryArgs{
//				Organization: pulumi.Any(organizationName),
//				Name:         pulumi.String("%s"),
//				Description:  pulumi.String("Test repository"),
//				Category:     pulumi.String("linux"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Repository can be imported using the organization name and repository name separated by a slash, e.g.:
//
// ```sh
// $ pulumi import sbercloud:index/swrRepository:SwrRepository test org-name/repo-name
// ```
type SwrRepository struct {
	pulumi.CustomResourceState

	// Specifies the category of the repository.
	// The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
	Category pulumi.StringPtrOutput `pulumi:"category"`
	// Specifies the description of the repository.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Intra-cluster image address for docker pull.
	InternalPath pulumi.StringOutput `pulumi:"internalPath"`
	// Specifies whether the repository is public. Default is false.
	IsPublic pulumi.BoolPtrOutput `pulumi:"isPublic"`
	// Specifies the name of the repository. Changing this creates a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of image tags in a repository.
	NumImages pulumi.IntOutput `pulumi:"numImages"`
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// Image address for docker pull.
	Path pulumi.StringOutput `pulumi:"path"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Numeric ID of the repository
	RepositoryId pulumi.IntOutput `pulumi:"repositoryId"`
	// Repository size.
	Size pulumi.IntOutput `pulumi:"size"`
}

// NewSwrRepository registers a new resource with the given unique name, arguments, and options.
func NewSwrRepository(ctx *pulumi.Context,
	name string, args *SwrRepositoryArgs, opts ...pulumi.ResourceOption) (*SwrRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SwrRepository
	err := ctx.RegisterResource("sbercloud:index/swrRepository:SwrRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSwrRepository gets an existing SwrRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSwrRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SwrRepositoryState, opts ...pulumi.ResourceOption) (*SwrRepository, error) {
	var resource SwrRepository
	err := ctx.ReadResource("sbercloud:index/swrRepository:SwrRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SwrRepository resources.
type swrRepositoryState struct {
	// Specifies the category of the repository.
	// The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
	Category *string `pulumi:"category"`
	// Specifies the description of the repository.
	Description *string `pulumi:"description"`
	// Intra-cluster image address for docker pull.
	InternalPath *string `pulumi:"internalPath"`
	// Specifies whether the repository is public. Default is false.
	IsPublic *bool `pulumi:"isPublic"`
	// Specifies the name of the repository. Changing this creates a new resource.
	Name *string `pulumi:"name"`
	// Number of image tags in a repository.
	NumImages *int `pulumi:"numImages"`
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization *string `pulumi:"organization"`
	// Image address for docker pull.
	Path *string `pulumi:"path"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// Numeric ID of the repository
	RepositoryId *int `pulumi:"repositoryId"`
	// Repository size.
	Size *int `pulumi:"size"`
}

type SwrRepositoryState struct {
	// Specifies the category of the repository.
	// The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
	Category pulumi.StringPtrInput
	// Specifies the description of the repository.
	Description pulumi.StringPtrInput
	// Intra-cluster image address for docker pull.
	InternalPath pulumi.StringPtrInput
	// Specifies whether the repository is public. Default is false.
	IsPublic pulumi.BoolPtrInput
	// Specifies the name of the repository. Changing this creates a new resource.
	Name pulumi.StringPtrInput
	// Number of image tags in a repository.
	NumImages pulumi.IntPtrInput
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization pulumi.StringPtrInput
	// Image address for docker pull.
	Path pulumi.StringPtrInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// Numeric ID of the repository
	RepositoryId pulumi.IntPtrInput
	// Repository size.
	Size pulumi.IntPtrInput
}

func (SwrRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*swrRepositoryState)(nil)).Elem()
}

type swrRepositoryArgs struct {
	// Specifies the category of the repository.
	// The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
	Category *string `pulumi:"category"`
	// Specifies the description of the repository.
	Description *string `pulumi:"description"`
	// Specifies whether the repository is public. Default is false.
	IsPublic *bool `pulumi:"isPublic"`
	// Specifies the name of the repository. Changing this creates a new resource.
	Name *string `pulumi:"name"`
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization string `pulumi:"organization"`
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a SwrRepository resource.
type SwrRepositoryArgs struct {
	// Specifies the category of the repository.
	// The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
	Category pulumi.StringPtrInput
	// Specifies the description of the repository.
	Description pulumi.StringPtrInput
	// Specifies whether the repository is public. Default is false.
	IsPublic pulumi.BoolPtrInput
	// Specifies the name of the repository. Changing this creates a new resource.
	Name pulumi.StringPtrInput
	// Specifies the name of the organization (namespace) the repository belongs.
	// Changing this creates a new resource.
	Organization pulumi.StringInput
	// Specifies the region in which to create the resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (SwrRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*swrRepositoryArgs)(nil)).Elem()
}

type SwrRepositoryInput interface {
	pulumi.Input

	ToSwrRepositoryOutput() SwrRepositoryOutput
	ToSwrRepositoryOutputWithContext(ctx context.Context) SwrRepositoryOutput
}

func (*SwrRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**SwrRepository)(nil)).Elem()
}

func (i *SwrRepository) ToSwrRepositoryOutput() SwrRepositoryOutput {
	return i.ToSwrRepositoryOutputWithContext(context.Background())
}

func (i *SwrRepository) ToSwrRepositoryOutputWithContext(ctx context.Context) SwrRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwrRepositoryOutput)
}

// SwrRepositoryArrayInput is an input type that accepts SwrRepositoryArray and SwrRepositoryArrayOutput values.
// You can construct a concrete instance of `SwrRepositoryArrayInput` via:
//
//	SwrRepositoryArray{ SwrRepositoryArgs{...} }
type SwrRepositoryArrayInput interface {
	pulumi.Input

	ToSwrRepositoryArrayOutput() SwrRepositoryArrayOutput
	ToSwrRepositoryArrayOutputWithContext(context.Context) SwrRepositoryArrayOutput
}

type SwrRepositoryArray []SwrRepositoryInput

func (SwrRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwrRepository)(nil)).Elem()
}

func (i SwrRepositoryArray) ToSwrRepositoryArrayOutput() SwrRepositoryArrayOutput {
	return i.ToSwrRepositoryArrayOutputWithContext(context.Background())
}

func (i SwrRepositoryArray) ToSwrRepositoryArrayOutputWithContext(ctx context.Context) SwrRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwrRepositoryArrayOutput)
}

// SwrRepositoryMapInput is an input type that accepts SwrRepositoryMap and SwrRepositoryMapOutput values.
// You can construct a concrete instance of `SwrRepositoryMapInput` via:
//
//	SwrRepositoryMap{ "key": SwrRepositoryArgs{...} }
type SwrRepositoryMapInput interface {
	pulumi.Input

	ToSwrRepositoryMapOutput() SwrRepositoryMapOutput
	ToSwrRepositoryMapOutputWithContext(context.Context) SwrRepositoryMapOutput
}

type SwrRepositoryMap map[string]SwrRepositoryInput

func (SwrRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwrRepository)(nil)).Elem()
}

func (i SwrRepositoryMap) ToSwrRepositoryMapOutput() SwrRepositoryMapOutput {
	return i.ToSwrRepositoryMapOutputWithContext(context.Background())
}

func (i SwrRepositoryMap) ToSwrRepositoryMapOutputWithContext(ctx context.Context) SwrRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SwrRepositoryMapOutput)
}

type SwrRepositoryOutput struct{ *pulumi.OutputState }

func (SwrRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SwrRepository)(nil)).Elem()
}

func (o SwrRepositoryOutput) ToSwrRepositoryOutput() SwrRepositoryOutput {
	return o
}

func (o SwrRepositoryOutput) ToSwrRepositoryOutputWithContext(ctx context.Context) SwrRepositoryOutput {
	return o
}

// Specifies the category of the repository.
// The value can be `appServer`, `linux`, `frameworkApp`, `database`, `lang`, `other`, `windows`, `arm`.
func (o SwrRepositoryOutput) Category() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.StringPtrOutput { return v.Category }).(pulumi.StringPtrOutput)
}

// Specifies the description of the repository.
func (o SwrRepositoryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Intra-cluster image address for docker pull.
func (o SwrRepositoryOutput) InternalPath() pulumi.StringOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.StringOutput { return v.InternalPath }).(pulumi.StringOutput)
}

// Specifies whether the repository is public. Default is false.
func (o SwrRepositoryOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.BoolPtrOutput { return v.IsPublic }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the repository. Changing this creates a new resource.
func (o SwrRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of image tags in a repository.
func (o SwrRepositoryOutput) NumImages() pulumi.IntOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.IntOutput { return v.NumImages }).(pulumi.IntOutput)
}

// Specifies the name of the organization (namespace) the repository belongs.
// Changing this creates a new resource.
func (o SwrRepositoryOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// Image address for docker pull.
func (o SwrRepositoryOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o SwrRepositoryOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Numeric ID of the repository
func (o SwrRepositoryOutput) RepositoryId() pulumi.IntOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.IntOutput { return v.RepositoryId }).(pulumi.IntOutput)
}

// Repository size.
func (o SwrRepositoryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *SwrRepository) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

type SwrRepositoryArrayOutput struct{ *pulumi.OutputState }

func (SwrRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SwrRepository)(nil)).Elem()
}

func (o SwrRepositoryArrayOutput) ToSwrRepositoryArrayOutput() SwrRepositoryArrayOutput {
	return o
}

func (o SwrRepositoryArrayOutput) ToSwrRepositoryArrayOutputWithContext(ctx context.Context) SwrRepositoryArrayOutput {
	return o
}

func (o SwrRepositoryArrayOutput) Index(i pulumi.IntInput) SwrRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SwrRepository {
		return vs[0].([]*SwrRepository)[vs[1].(int)]
	}).(SwrRepositoryOutput)
}

type SwrRepositoryMapOutput struct{ *pulumi.OutputState }

func (SwrRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SwrRepository)(nil)).Elem()
}

func (o SwrRepositoryMapOutput) ToSwrRepositoryMapOutput() SwrRepositoryMapOutput {
	return o
}

func (o SwrRepositoryMapOutput) ToSwrRepositoryMapOutputWithContext(ctx context.Context) SwrRepositoryMapOutput {
	return o
}

func (o SwrRepositoryMapOutput) MapIndex(k pulumi.StringInput) SwrRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SwrRepository {
		return vs[0].(map[string]*SwrRepository)[vs[1].(string)]
	}).(SwrRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SwrRepositoryInput)(nil)).Elem(), &SwrRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwrRepositoryArrayInput)(nil)).Elem(), SwrRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SwrRepositoryMapInput)(nil)).Elem(), SwrRepositoryMap{})
	pulumi.RegisterOutputType(SwrRepositoryOutput{})
	pulumi.RegisterOutputType(SwrRepositoryArrayOutput{})
	pulumi.RegisterOutputType(SwrRepositoryMapOutput{})
}

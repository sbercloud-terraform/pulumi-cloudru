// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides an VPC subnet resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const vpc = new sbercloud.vpc.Vpc("vpc", {
 *     name: vpcName,
 *     cidr: vpcCidr,
 * });
 * const subnet = new sbercloud.vpc.Subnet("subnet", {
 *     name: subnetName,
 *     cidr: subnetCidr,
 *     gatewayIp: subnetGatewayIp,
 *     vpcId: vpc.id,
 * });
 * const subnetWithTags = new sbercloud.vpc.Subnet("subnet_with_tags", {
 *     name: subnetName,
 *     cidr: subnetCidr,
 *     gatewayIp: subnetGatewayIp,
 *     vpcId: vpc.id,
 *     tags: {
 *         foo: "bar",
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Subnets can be imported using the `subnet id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Vpc/subnet:Subnet sbercloud_vpc_subnet 4779ab1c-7c1a-44b1-a02e-93dfc361b32d
 * ```
 */
export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Vpc/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * Specifies the availability zone (AZ) to which the subnet belongs.
     * The value must be an existing AZ in the system. Changing this creates a new Subnet.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Specifies the network segment on which the subnet resides. The value must be in
     * CIDR format and within the CIDR block of the VPC. The subnet mask cannot be greater than 28. Changing this creates a
     * new Subnet.
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * Specifies supplementary information about the subnet. The value is a string of
     * no more than 255 characters and cannot contain angle brackets (< or >).
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the DHCP function is enabled for the subnet. Defaults to true.
     */
    public readonly dhcpEnable!: pulumi.Output<boolean | undefined>;
    public readonly dhcpLeaseTime!: pulumi.Output<string>;
    /**
     * Specifies the DNS server address list of a subnet. This field is required if you need to
     * use more than two DNS servers. This parameter value is the superset of both DNS server address 1 and DNS server
     * address 2.
     */
    public readonly dnsLists!: pulumi.Output<string[]>;
    /**
     * Specifies the gateway of the subnet. The value must be a valid IP address
     * in the subnet segment. Changing this creates a new Subnet.
     */
    public readonly gatewayIp!: pulumi.Output<string>;
    /**
     * The ID of the IPv4 subnet (Native OpenStack API).
     */
    public /*out*/ readonly ipv4SubnetId!: pulumi.Output<string>;
    /**
     * The IPv6 subnet CIDR block.
     */
    public /*out*/ readonly ipv6Cidr!: pulumi.Output<string>;
    /**
     * Specifies whether the IPv6 function is enabled for the subnet. Defaults to false.
     */
    public readonly ipv6Enable!: pulumi.Output<boolean | undefined>;
    /**
     * The IPv6 subnet gateway.
     */
    public /*out*/ readonly ipv6Gateway!: pulumi.Output<string>;
    /**
     * The ID of the IPv6 subnet (Native OpenStack API).
     */
    public /*out*/ readonly ipv6SubnetId!: pulumi.Output<string>;
    /**
     * Specifies the subnet name. The value is a string of 1 to 64 characters that can contain
     * letters, digits, underscores (_), and hyphens (-).
     */
    public readonly name!: pulumi.Output<string>;
    public readonly ntpServerAddress!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IP address of DNS server 1 on the subnet. The value must be a valid
     * IP address.
     */
    public readonly primaryDns!: pulumi.Output<string>;
    /**
     * Specifies tThe region in which to create the vpc subnet. If omitted, the
     * provider-level region will be used. Changing this creates a new Subnet.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the IP address of DNS server 2 on the subnet. The value must be a valid
     * IP address.
     */
    public readonly secondaryDns!: pulumi.Output<string>;
    /**
     * The subnet (Native OpenStack API) ID.
     */
    public /*out*/ readonly subnetId!: pulumi.Output<string>;
    /**
     * The key/value pairs to associate with the subnet.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies the ID of the VPC to which the subnet belongs. Changing this creates
     * a new Subnet.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dhcpEnable"] = state ? state.dhcpEnable : undefined;
            resourceInputs["dhcpLeaseTime"] = state ? state.dhcpLeaseTime : undefined;
            resourceInputs["dnsLists"] = state ? state.dnsLists : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["ipv4SubnetId"] = state ? state.ipv4SubnetId : undefined;
            resourceInputs["ipv6Cidr"] = state ? state.ipv6Cidr : undefined;
            resourceInputs["ipv6Enable"] = state ? state.ipv6Enable : undefined;
            resourceInputs["ipv6Gateway"] = state ? state.ipv6Gateway : undefined;
            resourceInputs["ipv6SubnetId"] = state ? state.ipv6SubnetId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["ntpServerAddress"] = state ? state.ntpServerAddress : undefined;
            resourceInputs["primaryDns"] = state ? state.primaryDns : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["secondaryDns"] = state ? state.secondaryDns : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.gatewayIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayIp'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dhcpEnable"] = args ? args.dhcpEnable : undefined;
            resourceInputs["dhcpLeaseTime"] = args ? args.dhcpLeaseTime : undefined;
            resourceInputs["dnsLists"] = args ? args.dnsLists : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["ipv6Enable"] = args ? args.ipv6Enable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["ntpServerAddress"] = args ? args.ntpServerAddress : undefined;
            resourceInputs["primaryDns"] = args ? args.primaryDns : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["secondaryDns"] = args ? args.secondaryDns : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["ipv4SubnetId"] = undefined /*out*/;
            resourceInputs["ipv6Cidr"] = undefined /*out*/;
            resourceInputs["ipv6Gateway"] = undefined /*out*/;
            resourceInputs["ipv6SubnetId"] = undefined /*out*/;
            resourceInputs["subnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * Specifies the availability zone (AZ) to which the subnet belongs.
     * The value must be an existing AZ in the system. Changing this creates a new Subnet.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the network segment on which the subnet resides. The value must be in
     * CIDR format and within the CIDR block of the VPC. The subnet mask cannot be greater than 28. Changing this creates a
     * new Subnet.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Specifies supplementary information about the subnet. The value is a string of
     * no more than 255 characters and cannot contain angle brackets (< or >).
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether the DHCP function is enabled for the subnet. Defaults to true.
     */
    dhcpEnable?: pulumi.Input<boolean>;
    dhcpLeaseTime?: pulumi.Input<string>;
    /**
     * Specifies the DNS server address list of a subnet. This field is required if you need to
     * use more than two DNS servers. This parameter value is the superset of both DNS server address 1 and DNS server
     * address 2.
     */
    dnsLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the gateway of the subnet. The value must be a valid IP address
     * in the subnet segment. Changing this creates a new Subnet.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * The ID of the IPv4 subnet (Native OpenStack API).
     */
    ipv4SubnetId?: pulumi.Input<string>;
    /**
     * The IPv6 subnet CIDR block.
     */
    ipv6Cidr?: pulumi.Input<string>;
    /**
     * Specifies whether the IPv6 function is enabled for the subnet. Defaults to false.
     */
    ipv6Enable?: pulumi.Input<boolean>;
    /**
     * The IPv6 subnet gateway.
     */
    ipv6Gateway?: pulumi.Input<string>;
    /**
     * The ID of the IPv6 subnet (Native OpenStack API).
     */
    ipv6SubnetId?: pulumi.Input<string>;
    /**
     * Specifies the subnet name. The value is a string of 1 to 64 characters that can contain
     * letters, digits, underscores (_), and hyphens (-).
     */
    name?: pulumi.Input<string>;
    ntpServerAddress?: pulumi.Input<string>;
    /**
     * Specifies the IP address of DNS server 1 on the subnet. The value must be a valid
     * IP address.
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * Specifies tThe region in which to create the vpc subnet. If omitted, the
     * provider-level region will be used. Changing this creates a new Subnet.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the IP address of DNS server 2 on the subnet. The value must be a valid
     * IP address.
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * The subnet (Native OpenStack API) ID.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the subnet.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the VPC to which the subnet belongs. Changing this creates
     * a new Subnet.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * Specifies the availability zone (AZ) to which the subnet belongs.
     * The value must be an existing AZ in the system. Changing this creates a new Subnet.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the network segment on which the subnet resides. The value must be in
     * CIDR format and within the CIDR block of the VPC. The subnet mask cannot be greater than 28. Changing this creates a
     * new Subnet.
     */
    cidr: pulumi.Input<string>;
    /**
     * Specifies supplementary information about the subnet. The value is a string of
     * no more than 255 characters and cannot contain angle brackets (< or >).
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether the DHCP function is enabled for the subnet. Defaults to true.
     */
    dhcpEnable?: pulumi.Input<boolean>;
    dhcpLeaseTime?: pulumi.Input<string>;
    /**
     * Specifies the DNS server address list of a subnet. This field is required if you need to
     * use more than two DNS servers. This parameter value is the superset of both DNS server address 1 and DNS server
     * address 2.
     */
    dnsLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the gateway of the subnet. The value must be a valid IP address
     * in the subnet segment. Changing this creates a new Subnet.
     */
    gatewayIp: pulumi.Input<string>;
    /**
     * Specifies whether the IPv6 function is enabled for the subnet. Defaults to false.
     */
    ipv6Enable?: pulumi.Input<boolean>;
    /**
     * Specifies the subnet name. The value is a string of 1 to 64 characters that can contain
     * letters, digits, underscores (_), and hyphens (-).
     */
    name?: pulumi.Input<string>;
    ntpServerAddress?: pulumi.Input<string>;
    /**
     * Specifies the IP address of DNS server 1 on the subnet. The value must be a valid
     * IP address.
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * Specifies tThe region in which to create the vpc subnet. If omitted, the
     * provider-level region will be used. Changing this creates a new Subnet.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the IP address of DNS server 2 on the subnet. The value must be a valid
     * IP address.
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the subnet.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the ID of the VPC to which the subnet belongs. Changing this creates
     * a new Subnet.
     */
    vpcId: pulumi.Input<string>;
}

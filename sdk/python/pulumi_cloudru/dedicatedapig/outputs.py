# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ApiBackendParam',
    'ApiFuncGraph',
    'ApiFuncGraphPolicy',
    'ApiFuncGraphPolicyBackendParam',
    'ApiFuncGraphPolicyCondition',
    'ApiMock',
    'ApiMockPolicy',
    'ApiMockPolicyBackendParam',
    'ApiMockPolicyCondition',
    'ApiPublishmentHistory',
    'ApiRequestParam',
    'ApiWeb',
    'ApiWebPolicy',
    'ApiWebPolicyBackendParam',
    'ApiWebPolicyCondition',
    'CustomAuthorizerIdentity',
    'GroupEnvironment',
    'GroupEnvironmentVariable',
    'GroupUrlDomain',
    'InstanceCustomIngressPort',
    'ResponseRule',
    'ResponseRuleHeader',
    'ThrottlingPolicyAppThrottle',
    'ThrottlingPolicyUserThrottle',
    'GetEnvironmentsEnvironmentResult',
]

@pulumi.output_type
class ApiBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiFuncGraph(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraph. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraph.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraph.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 function_urn: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 function_alias_urn: Optional[builtins.str] = None,
                 invocation_type: Optional[builtins.str] = None,
                 network_type: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None,
                 version: Optional[builtins.str] = None):
        """
        :param builtins.str function_urn: The URN of the FunctionGraph function.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param builtins.str invocation_type: The invocation type.
        :param builtins.str network_type: The network architecture (framework) type of the FunctionGraph function.
        :param builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "function_urn", function_urn)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[builtins.str]:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[builtins.str]:
        """
        The invocation type.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[builtins.str]:
        """
        The network architecture (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApiFuncGraphPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "functionUrn":
            suggest = "function_urn"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "functionAliasUrn":
            suggest = "function_alias_urn"
        elif key == "invocationMode":
            suggest = "invocation_mode"
        elif key == "invocationType":
            suggest = "invocation_type"
        elif key == "networkType":
            suggest = "network_type"
        elif key == "requestProtocol":
            suggest = "request_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiFuncGraphPolicyCondition'],
                 function_urn: builtins.str,
                 name: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiFuncGraphPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 function_alias_urn: Optional[builtins.str] = None,
                 invocation_mode: Optional[builtins.str] = None,
                 invocation_type: Optional[builtins.str] = None,
                 network_type: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 timeout: Optional[builtins.int] = None,
                 version: Optional[builtins.str] = None):
        """
        :param Sequence['ApiFuncGraphPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str function_urn: The URN of the FunctionGraph function.
        :param builtins.str name: The name of the backend policy.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['ApiFuncGraphPolicyBackendParamArgs'] backend_params: The configaiton list of the backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str function_alias_urn: The alias URN of the FunctionGraph function.
        :param builtins.str invocation_mode: The invocation mode of the FunctionGraph function.
        :param builtins.str invocation_type: The invocation mode of the FunctionGraph function.
        :param builtins.str network_type: The network (framework) type of the FunctionGraph function.
        :param builtins.str request_protocol: The request protocol of the FunctionGraph function.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str version: The version of the FunctionGraph function.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "function_urn", function_urn)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if function_alias_urn is not None:
            pulumi.set(__self__, "function_alias_urn", function_alias_urn)
        if invocation_mode is not None:
            pulumi.set(__self__, "invocation_mode", invocation_mode)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if network_type is not None:
            pulumi.set(__self__, "network_type", network_type)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiFuncGraphPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="functionUrn")
    def function_urn(self) -> builtins.str:
        """
        The URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_urn")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the backend policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiFuncGraphPolicyBackendParam']]:
        """
        The configaiton list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="functionAliasUrn")
    def function_alias_urn(self) -> Optional[builtins.str]:
        """
        The alias URN of the FunctionGraph function.
        """
        return pulumi.get(self, "function_alias_urn")

    @property
    @pulumi.getter(name="invocationMode")
    def invocation_mode(self) -> Optional[builtins.str]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_mode")

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[builtins.str]:
        """
        The invocation mode of the FunctionGraph function.
        """
        return pulumi.get(self, "invocation_type")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[builtins.str]:
        """
        The network (framework) type of the FunctionGraph function.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The request protocol of the FunctionGraph function.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version of the FunctionGraph function.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ApiFuncGraphPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiFuncGraphPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiFuncGraphPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiFuncGraphPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiFuncGraphPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiMock(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMock. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMock.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMock.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authorizer_id: Optional[builtins.str] = None,
                 response: Optional[builtins.str] = None,
                 status_code: Optional[builtins.int] = None):
        """
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str response: The response content of the mock.
        :param builtins.int status_code: The custom status code of the mock response.
        """
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter
    def response(self) -> Optional[builtins.str]:
        """
        The response content of the mock.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[builtins.int]:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApiMockPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiMockPolicyCondition'],
                 name: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiMockPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 response: Optional[builtins.str] = None,
                 status_code: Optional[builtins.int] = None):
        """
        :param Sequence['ApiMockPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str name: The backend policy name.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param Sequence['ApiMockPolicyBackendParamArgs'] backend_params: The configuration list of backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str response: The response content of the mock.
        :param builtins.int status_code: The custom status code of the mock response.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if response is not None:
            pulumi.set(__self__, "response", response)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiMockPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The backend policy name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiMockPolicyBackendParam']]:
        """
        The configuration list of backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter
    def response(self) -> Optional[builtins.str]:
        """
        The response content of the mock.
        """
        return pulumi.get(self, "response")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[builtins.int]:
        """
        The custom status code of the mock response.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ApiMockPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiMockPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiMockPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiMockPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiMockPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ApiPublishmentHistory(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiPublishmentHistory. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiPublishmentHistory.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiPublishmentHistory.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[builtins.str] = None,
                 version_id: Optional[builtins.str] = None):
        """
        :param builtins.str description: The version description of the API publishment.
        :param builtins.str version_id: The version ID of the API publishment.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The version description of the API publishment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[builtins.str]:
        """
        The version ID of the API publishment.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class ApiRequestParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validEnable":
            suggest = "valid_enable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiRequestParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiRequestParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiRequestParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 default: Optional[builtins.str] = None,
                 description: Optional[builtins.str] = None,
                 enumeration: Optional[builtins.str] = None,
                 example: Optional[builtins.str] = None,
                 location: Optional[builtins.str] = None,
                 maximum: Optional[builtins.int] = None,
                 minimum: Optional[builtins.int] = None,
                 orchestrations: Optional[Sequence[builtins.str]] = None,
                 passthrough: Optional[builtins.bool] = None,
                 required: Optional[builtins.bool] = None,
                 type: Optional[builtins.str] = None,
                 valid_enable: Optional[builtins.int] = None):
        """
        :param builtins.str name: The name of the request parameter.
        :param builtins.str default: The default value of the parameter.
        :param builtins.str description: The parameter description.
        :param builtins.str enumeration: The enumerated value.
        :param builtins.str example: The parameter example.
        :param builtins.str location: Where this parameter is located.
        :param builtins.int maximum: The maximum value or length (string parameter) for parameter.
        :param builtins.int minimum: The minimum value or length (string parameter) for parameter.
        :param Sequence[builtins.str] orchestrations: The list of orchestration rules that parameter used.
        :param builtins.bool passthrough: Whether to transparently transfer the parameter.
        :param builtins.bool required: Whether this parameter is required.
        :param builtins.str type: The parameter type.
        :param builtins.int valid_enable: Whether to enable the parameter validation.
        """
        pulumi.set(__self__, "name", name)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enumeration is not None:
            pulumi.set(__self__, "enumeration", enumeration)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if maximum is not None:
            pulumi.set(__self__, "maximum", maximum)
        if minimum is not None:
            pulumi.set(__self__, "minimum", minimum)
        if orchestrations is not None:
            pulumi.set(__self__, "orchestrations", orchestrations)
        if passthrough is not None:
            pulumi.set(__self__, "passthrough", passthrough)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if valid_enable is not None:
            pulumi.set(__self__, "valid_enable", valid_enable)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the request parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def default(self) -> Optional[builtins.str]:
        """
        The default value of the parameter.
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The parameter description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enumeration(self) -> Optional[builtins.str]:
        """
        The enumerated value.
        """
        return pulumi.get(self, "enumeration")

    @property
    @pulumi.getter
    def example(self) -> Optional[builtins.str]:
        """
        The parameter example.
        """
        return pulumi.get(self, "example")

    @property
    @pulumi.getter
    def location(self) -> Optional[builtins.str]:
        """
        Where this parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def maximum(self) -> Optional[builtins.int]:
        """
        The maximum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "maximum")

    @property
    @pulumi.getter
    def minimum(self) -> Optional[builtins.int]:
        """
        The minimum value or length (string parameter) for parameter.
        """
        return pulumi.get(self, "minimum")

    @property
    @pulumi.getter
    def orchestrations(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of orchestration rules that parameter used.
        """
        return pulumi.get(self, "orchestrations")

    @property
    @pulumi.getter
    def passthrough(self) -> Optional[builtins.bool]:
        """
        Whether to transparently transfer the parameter.
        """
        return pulumi.get(self, "passthrough")

    @property
    @pulumi.getter
    def required(self) -> Optional[builtins.bool]:
        """
        Whether this parameter is required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="validEnable")
    def valid_enable(self) -> Optional[builtins.int]:
        """
        Whether to enable the parameter validation.
        """
        return pulumi.get(self, "valid_enable")


@pulumi.output_type
class ApiWeb(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestMethod":
            suggest = "request_method"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "sslEnable":
            suggest = "ssl_enable"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWeb. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWeb.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWeb.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_address: Optional[builtins.str] = None,
                 host_header: Optional[builtins.str] = None,
                 request_method: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 retry_count: Optional[builtins.int] = None,
                 ssl_enable: Optional[builtins.bool] = None,
                 timeout: Optional[builtins.int] = None,
                 vpc_channel_id: Optional[builtins.str] = None):
        """
        :param builtins.str path: The backend request path.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str backend_address: The backend service address, which consists of a domain name or IP address, and a port number.
        :param builtins.str host_header: The proxy host header.
        :param builtins.str request_method: The backend request method of the API.
        :param builtins.str request_protocol: The web protocol type of the API request.
        :param builtins.int retry_count: The number of retry attempts to request the backend service.
        :param builtins.bool ssl_enable: Whether to enable two-way authentication.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "path", path)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_method is not None:
            pulumi.set(__self__, "request_method", request_method)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if ssl_enable is not None:
            pulumi.set(__self__, "ssl_enable", ssl_enable)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The backend request path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[builtins.str]:
        """
        The backend service address, which consists of a domain name or IP address, and a port number.
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[builtins.str]:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> Optional[builtins.str]:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The web protocol type of the API request.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[builtins.int]:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="sslEnable")
    def ssl_enable(self) -> Optional[builtins.bool]:
        """
        Whether to enable two-way authentication.
        """
        return pulumi.get(self, "ssl_enable")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[builtins.str]:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApiWebPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requestMethod":
            suggest = "request_method"
        elif key == "authorizerId":
            suggest = "authorizer_id"
        elif key == "backendAddress":
            suggest = "backend_address"
        elif key == "backendParams":
            suggest = "backend_params"
        elif key == "effectiveMode":
            suggest = "effective_mode"
        elif key == "hostHeader":
            suggest = "host_header"
        elif key == "requestProtocol":
            suggest = "request_protocol"
        elif key == "retryCount":
            suggest = "retry_count"
        elif key == "vpcChannelId":
            suggest = "vpc_channel_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 conditions: Sequence['outputs.ApiWebPolicyCondition'],
                 name: builtins.str,
                 path: builtins.str,
                 request_method: builtins.str,
                 authorizer_id: Optional[builtins.str] = None,
                 backend_address: Optional[builtins.str] = None,
                 backend_params: Optional[Sequence['outputs.ApiWebPolicyBackendParam']] = None,
                 effective_mode: Optional[builtins.str] = None,
                 host_header: Optional[builtins.str] = None,
                 request_protocol: Optional[builtins.str] = None,
                 retry_count: Optional[builtins.int] = None,
                 timeout: Optional[builtins.int] = None,
                 vpc_channel_id: Optional[builtins.str] = None):
        """
        :param Sequence['ApiWebPolicyConditionArgs'] conditions: The policy conditions.
        :param builtins.str name: The name of the web policy.
        :param builtins.str path: The backend request address.
        :param builtins.str request_method: The backend request method of the API.
        :param builtins.str authorizer_id: The ID of the backend custom authorization.
        :param builtins.str backend_address: The backend service address
        :param Sequence['ApiWebPolicyBackendParamArgs'] backend_params: The configuration list of the backend parameters.
        :param builtins.str effective_mode: The effective mode of the backend policy.
        :param builtins.str host_header: The proxy host header.
        :param builtins.str request_protocol: The backend request protocol.
        :param builtins.int retry_count: The number of retry attempts to request the backend service.
        :param builtins.int timeout: The timeout for API requests to backend service.
        :param builtins.str vpc_channel_id: The VPC channel ID.
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "request_method", request_method)
        if authorizer_id is not None:
            pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_address is not None:
            pulumi.set(__self__, "backend_address", backend_address)
        if backend_params is not None:
            pulumi.set(__self__, "backend_params", backend_params)
        if effective_mode is not None:
            pulumi.set(__self__, "effective_mode", effective_mode)
        if host_header is not None:
            pulumi.set(__self__, "host_header", host_header)
        if request_protocol is not None:
            pulumi.set(__self__, "request_protocol", request_protocol)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if vpc_channel_id is not None:
            pulumi.set(__self__, "vpc_channel_id", vpc_channel_id)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.ApiWebPolicyCondition']:
        """
        The policy conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the web policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> builtins.str:
        """
        The backend request address.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> builtins.str:
        """
        The backend request method of the API.
        """
        return pulumi.get(self, "request_method")

    @property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> Optional[builtins.str]:
        """
        The ID of the backend custom authorization.
        """
        return pulumi.get(self, "authorizer_id")

    @property
    @pulumi.getter(name="backendAddress")
    def backend_address(self) -> Optional[builtins.str]:
        """
        The backend service address
        """
        return pulumi.get(self, "backend_address")

    @property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Optional[Sequence['outputs.ApiWebPolicyBackendParam']]:
        """
        The configuration list of the backend parameters.
        """
        return pulumi.get(self, "backend_params")

    @property
    @pulumi.getter(name="effectiveMode")
    def effective_mode(self) -> Optional[builtins.str]:
        """
        The effective mode of the backend policy.
        """
        return pulumi.get(self, "effective_mode")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> Optional[builtins.str]:
        """
        The proxy host header.
        """
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> Optional[builtins.str]:
        """
        The backend request protocol.
        """
        return pulumi.get(self, "request_protocol")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[builtins.int]:
        """
        The number of retry attempts to request the backend service.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[builtins.int]:
        """
        The timeout for API requests to backend service.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="vpcChannelId")
    def vpc_channel_id(self) -> Optional[builtins.str]:
        """
        The VPC channel ID.
        """
        return pulumi.get(self, "vpc_channel_id")


@pulumi.output_type
class ApiWebPolicyBackendParam(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "systemParamType":
            suggest = "system_param_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicyBackendParam. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicyBackendParam.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicyBackendParam.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 type: builtins.str,
                 value: builtins.str,
                 description: Optional[builtins.str] = None,
                 system_param_type: Optional[builtins.str] = None):
        """
        :param builtins.str location: Where the parameter is located.
        :param builtins.str name: The parameter name.
        :param builtins.str type: The parameter type.
        :param builtins.str value: The value of the parameter
        :param builtins.str description: The description of the parameter.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if system_param_type is not None:
            pulumi.set(__self__, "system_param_type", system_param_type)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        Where the parameter is located.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The parameter name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The parameter type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the parameter
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the parameter.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="systemParamType")
    def system_param_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "system_param_type")


@pulumi.output_type
class ApiWebPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "frontendAuthorizerName":
            suggest = "frontend_authorizer_name"
        elif key == "mappedParamLocation":
            suggest = "mapped_param_location"
        elif key == "mappedParamName":
            suggest = "mapped_param_name"
        elif key == "paramName":
            suggest = "param_name"
        elif key == "sysName":
            suggest = "sys_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiWebPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiWebPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiWebPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value: builtins.str,
                 cookie_name: Optional[builtins.str] = None,
                 frontend_authorizer_name: Optional[builtins.str] = None,
                 mapped_param_location: Optional[builtins.str] = None,
                 mapped_param_name: Optional[builtins.str] = None,
                 param_name: Optional[builtins.str] = None,
                 source: Optional[builtins.str] = None,
                 sys_name: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        """
        :param builtins.str value: The value of the backend policy.
        :param builtins.str cookie_name: The cookie parameter name.
        :param builtins.str frontend_authorizer_name: The frontend authentication parameter name.
        :param builtins.str mapped_param_location: The location of a parameter generated after orchestration.
        :param builtins.str mapped_param_name: The name of a parameter generated after orchestration.
        :param builtins.str param_name: The request parameter name.
        :param builtins.str source: The type of the backend policy.
        :param builtins.str sys_name: The gateway built-in parameter name.
        :param builtins.str type: The condition type.
        """
        pulumi.set(__self__, "value", value)
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if frontend_authorizer_name is not None:
            pulumi.set(__self__, "frontend_authorizer_name", frontend_authorizer_name)
        if mapped_param_location is not None:
            pulumi.set(__self__, "mapped_param_location", mapped_param_location)
        if mapped_param_name is not None:
            pulumi.set(__self__, "mapped_param_name", mapped_param_name)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if sys_name is not None:
            pulumi.set(__self__, "sys_name", sys_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value of the backend policy.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[builtins.str]:
        """
        The cookie parameter name.
        """
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="frontendAuthorizerName")
    def frontend_authorizer_name(self) -> Optional[builtins.str]:
        """
        The frontend authentication parameter name.
        """
        return pulumi.get(self, "frontend_authorizer_name")

    @property
    @pulumi.getter(name="mappedParamLocation")
    def mapped_param_location(self) -> Optional[builtins.str]:
        """
        The location of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_location")

    @property
    @pulumi.getter(name="mappedParamName")
    def mapped_param_name(self) -> Optional[builtins.str]:
        """
        The name of a parameter generated after orchestration.
        """
        return pulumi.get(self, "mapped_param_name")

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[builtins.str]:
        """
        The request parameter name.
        """
        return pulumi.get(self, "param_name")

    @property
    @pulumi.getter
    def source(self) -> Optional[builtins.str]:
        """
        The type of the backend policy.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sysName")
    def sys_name(self) -> Optional[builtins.str]:
        """
        The gateway built-in parameter name.
        """
        return pulumi.get(self, "sys_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        The condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class CustomAuthorizerIdentity(dict):
    def __init__(__self__, *,
                 location: builtins.str,
                 name: builtins.str,
                 validation: Optional[builtins.str] = None):
        """
        :param builtins.str location: The parameter location.
        :param builtins.str name: The name of the parameter to be verified.
        :param builtins.str validation: The parameter verification expression.
        """
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        if validation is not None:
            pulumi.set(__self__, "validation", validation)

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        The parameter location.
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the parameter to be verified.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def validation(self) -> Optional[builtins.str]:
        """
        The parameter verification expression.
        """
        return pulumi.get(self, "validation")


@pulumi.output_type
class GroupEnvironment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentId":
            suggest = "environment_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupEnvironment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupEnvironment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupEnvironment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_id: builtins.str,
                 variables: Sequence['outputs.GroupEnvironmentVariable']):
        """
        :param builtins.str environment_id: The ID of the environment to which the variables belongs.
        :param Sequence['GroupEnvironmentVariableArgs'] variables: The array of one or more environment variables.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> builtins.str:
        """
        The ID of the environment to which the variables belongs.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def variables(self) -> Sequence['outputs.GroupEnvironmentVariable']:
        """
        The array of one or more environment variables.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class GroupEnvironmentVariable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variableId":
            suggest = "variable_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupEnvironmentVariable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupEnvironmentVariable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupEnvironmentVariable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 value: builtins.str,
                 id: Optional[builtins.str] = None,
                 variable_id: Optional[builtins.str] = None):
        """
        :param builtins.str name: The variable name.
        :param builtins.str value: The variable value.
        :param builtins.str id: The ID of the variable that the group has.
        :param builtins.str variable_id: schema: Deprecated; The ID of the variable that the group has.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if variable_id is not None:
            pulumi.set(__self__, "variable_id", variable_id)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The variable name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The variable value.
        """
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the variable that the group has.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="variableId")
    @_utilities.deprecated("""Use 'id' instead""")
    def variable_id(self) -> Optional[builtins.str]:
        """
        schema: Deprecated; The ID of the variable that the group has.
        """
        return pulumi.get(self, "variable_id")


@pulumi.output_type
class GroupUrlDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isHttpRedirectToHttps":
            suggest = "is_http_redirect_to_https"
        elif key == "minSslVersion":
            suggest = "min_ssl_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupUrlDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupUrlDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupUrlDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: builtins.str,
                 is_http_redirect_to_https: Optional[builtins.bool] = None,
                 min_ssl_version: Optional[builtins.str] = None):
        """
        :param builtins.str name: The associated domain name.
        :param builtins.bool is_http_redirect_to_https: Whether to enable redirection from HTTP to HTTPS.
        :param builtins.str min_ssl_version: The minimum SSL protocol version.
        """
        pulumi.set(__self__, "name", name)
        if is_http_redirect_to_https is not None:
            pulumi.set(__self__, "is_http_redirect_to_https", is_http_redirect_to_https)
        if min_ssl_version is not None:
            pulumi.set(__self__, "min_ssl_version", min_ssl_version)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The associated domain name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="isHttpRedirectToHttps")
    def is_http_redirect_to_https(self) -> Optional[builtins.bool]:
        """
        Whether to enable redirection from HTTP to HTTPS.
        """
        return pulumi.get(self, "is_http_redirect_to_https")

    @property
    @pulumi.getter(name="minSslVersion")
    def min_ssl_version(self) -> Optional[builtins.str]:
        """
        The minimum SSL protocol version.
        """
        return pulumi.get(self, "min_ssl_version")


@pulumi.output_type
class InstanceCustomIngressPort(dict):
    def __init__(__self__, *,
                 port: builtins.int,
                 protocol: builtins.str,
                 id: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None):
        """
        :param builtins.int port: Specified port of the custom ingress port.
        :param builtins.str protocol: Specified protocol of the custom ingress port.
        :param builtins.str id: The ID of the custom ingress port.
        :param builtins.str status: The current status of the custom ingress port.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        Specified port of the custom ingress port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> builtins.str:
        """
        Specified protocol of the custom ingress port.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the custom ingress port.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        The current status of the custom ingress port.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ResponseRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorType":
            suggest = "error_type"
        elif key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ResponseRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ResponseRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ResponseRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: builtins.str,
                 error_type: builtins.str,
                 headers: Optional[Sequence['outputs.ResponseRuleHeader']] = None,
                 status_code: Optional[builtins.int] = None):
        """
        :param builtins.str body: The body template of the API custom response rule.
        :param builtins.str error_type: The error type of the API custom response rule.
        :param Sequence['ResponseRuleHeaderArgs'] headers: The configuration of the custom response headers.
        :param builtins.int status_code: The HTTP status code of the API custom response rule.
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "error_type", error_type)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def body(self) -> builtins.str:
        """
        The body template of the API custom response rule.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="errorType")
    def error_type(self) -> builtins.str:
        """
        The error type of the API custom response rule.
        """
        return pulumi.get(self, "error_type")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.ResponseRuleHeader']]:
        """
        The configuration of the custom response headers.
        """
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[builtins.int]:
        """
        The HTTP status code of the API custom response rule.
        """
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ResponseRuleHeader(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: The key name of the response header.
        :param builtins.str value: The value for the specified response header key.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        The key name of the response header.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        The value for the specified response header key.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ThrottlingPolicyAppThrottle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxApiRequests":
            suggest = "max_api_requests"
        elif key == "throttlingObjectId":
            suggest = "throttling_object_id"
        elif key == "throttlingObjectName":
            suggest = "throttling_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThrottlingPolicyAppThrottle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThrottlingPolicyAppThrottle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThrottlingPolicyAppThrottle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_api_requests: builtins.int,
                 throttling_object_id: builtins.str,
                 id: Optional[builtins.str] = None,
                 throttling_object_name: Optional[builtins.str] = None):
        """
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.str throttling_object_id: The object ID which the special throttling policy belongs.
        :param builtins.str id: The ID of the special user/application throttling policy.
        :param builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> builtins.str:
        """
        The object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[builtins.str]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class ThrottlingPolicyUserThrottle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxApiRequests":
            suggest = "max_api_requests"
        elif key == "throttlingObjectId":
            suggest = "throttling_object_id"
        elif key == "throttlingObjectName":
            suggest = "throttling_object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ThrottlingPolicyUserThrottle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ThrottlingPolicyUserThrottle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ThrottlingPolicyUserThrottle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_api_requests: builtins.int,
                 throttling_object_id: builtins.str,
                 id: Optional[builtins.str] = None,
                 throttling_object_name: Optional[builtins.str] = None):
        """
        :param builtins.int max_api_requests: The maximum number of times an API can be accessed within a specified period.
        :param builtins.str throttling_object_id: The object ID which the special throttling policy belongs.
        :param builtins.str id: The ID of the special user/application throttling policy.
        :param builtins.str throttling_object_name: The object name which the special user/application throttling policy belongs.
        """
        pulumi.set(__self__, "max_api_requests", max_api_requests)
        pulumi.set(__self__, "throttling_object_id", throttling_object_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if throttling_object_name is not None:
            pulumi.set(__self__, "throttling_object_name", throttling_object_name)

    @property
    @pulumi.getter(name="maxApiRequests")
    def max_api_requests(self) -> builtins.int:
        """
        The maximum number of times an API can be accessed within a specified period.
        """
        return pulumi.get(self, "max_api_requests")

    @property
    @pulumi.getter(name="throttlingObjectId")
    def throttling_object_id(self) -> builtins.str:
        """
        The object ID which the special throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The ID of the special user/application throttling policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="throttlingObjectName")
    def throttling_object_name(self) -> Optional[builtins.str]:
        """
        The object name which the special user/application throttling policy belongs.
        """
        return pulumi.get(self, "throttling_object_name")


@pulumi.output_type
class GetEnvironmentsEnvironmentResult(dict):
    def __init__(__self__, *,
                 create_time: builtins.str,
                 description: builtins.str,
                 id: builtins.str,
                 name: builtins.str):
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> builtins.str:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")



// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a DMS RocketMQ migration task resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### RoecktMQ migration task from RocketMQ to RocketMQ
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const name = config.requireObject<any>("name");
 * const topicName = config.requireObject<any>("topicName");
 * const groupName = config.requireObject<any>("groupName");
 * const test = new sbercloud.DmsRocketmqMigrationTask("test", {
 *     instanceId: instanceId,
 *     overwrite: "true",
 *     name: name,
 *     type: "rocketmq",
 *     topicConfigs: [{
 *         order: false,
 *         perm: 6,
 *         readQueueNum: 16,
 *         topicFilterType: "SINGLE_TAG",
 *         topicName: topicName,
 *         topicSysFlag: 0,
 *         writeQueueNum: 16,
 *     }],
 *     subscriptionGroups: [{
 *         consumeBroadcastEnable: true,
 *         consumeEnable: true,
 *         consumeFromMinEnable: true,
 *         groupName: groupName,
 *         notifyConsumeridsChangedEnable: true,
 *         retryMaxTimes: 16,
 *         retryQueueNum: 1,
 *         whichBrokerWhenConsumeSlow: 1,
 *     }],
 * });
 * ```
 *
 * ### RoecktMQ migration task from RabbitMQ to RocketMQ
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const name = config.requireObject<any>("name");
 * const vhostName = config.requireObject<any>("vhostName");
 * const queueName = config.requireObject<any>("queueName");
 * const exchangeName = config.requireObject<any>("exchangeName");
 * const test = new sbercloud.DmsRocketmqMigrationTask("test", {
 *     instanceId: instanceId,
 *     overwrite: "true",
 *     name: name,
 *     type: "rabbitToRocket",
 *     vhosts: [{
 *         name: vhostName,
 *     }],
 *     queues: [{
 *         name: queueName,
 *         vhost: vhostName,
 *         durable: false,
 *     }],
 *     exchanges: [{
 *         name: exchangeName,
 *         vhost: vhostName,
 *         type: "topic",
 *         durable: false,
 *     }],
 *     bindings: [{
 *         source: exchangeName,
 *         vhost: vhostName,
 *         destination: queueName,
 *         destinationType: "queue",
 *         routingKey: queueName,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The RocketMQ migration task can be imported using the RocketMQ instance ID and the RocketMQ migration task ID
 *
 * separated by a slash, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:index/dmsRocketmqMigrationTask:DmsRocketmqMigrationTask test <instance_id>/<id>
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason. The missing attribute includes: `overwrite`.
 *
 * It is generally recommended running `pulumi preview` after importing the task. You can then decide
 *
 * if changes should be applied to the task, or the resource definition should be updated to align with the task.
 *
 * Also you can ignore changes as below.
 *
 * hcl
 *
 * resource "sbercloud_dms_rocketmq_migration_task" "test" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       overwrite,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class DmsRocketmqMigrationTask extends pulumi.CustomResource {
    /**
     * Get an existing DmsRocketmqMigrationTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsRocketmqMigrationTaskState, opts?: pulumi.CustomResourceOptions): DmsRocketmqMigrationTask {
        return new DmsRocketmqMigrationTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dmsRocketmqMigrationTask:DmsRocketmqMigrationTask';

    /**
     * Returns true if the given object is an instance of DmsRocketmqMigrationTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsRocketmqMigrationTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsRocketmqMigrationTask.__pulumiType;
    }

    /**
     * Specifies the binding metadata.
     * The bindings structure is documented below.
     * Changing this creates a new resource.
     *
     * > **NOTE:** Parameters `vhosts`, `queues`, `exchanges` and `bindings` are required when `type` is set to **rabbitToRocket**.
     *
     * <a name="RocketMQ_migration_task_topic_configs"></a>
     * The `topicConfigs` block supports:
     */
    public readonly bindings!: pulumi.Output<outputs.DmsRocketmqMigrationTaskBinding[]>;
    /**
     * Specifies the exchange metadata.
     * The exchanges structure is documented below.
     * Changing this creates a new resource.
     */
    public readonly exchanges!: pulumi.Output<outputs.DmsRocketmqMigrationTaskExchange[]>;
    /**
     * Specifies the ID of the RocketMQ instance.
     * Changing this creates a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the switch name. Changing this creates a new resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies whether to overwrite configurations with the same name.
     * Value options:
     * + **true**: Configurations in the destination metadata with the same name as the source metadata will be overwritten.
     * + **false**: An error is reported when a topic or group already exists.
     * Changing this creates a new resource.
     */
    public readonly overwrite!: pulumi.Output<string>;
    /**
     * Specifies the queue metadata.
     * The queues structure is documented below.
     * Changing this creates a new resource.
     */
    public readonly queues!: pulumi.Output<outputs.DmsRocketmqMigrationTaskQueue[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Indicates the start time of the migration task.
     */
    public /*out*/ readonly startDate!: pulumi.Output<string>;
    /**
     * Indicates the status of the migration task. The value can be **finished** or **failed***.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the consumer group metadata.
     * The subscriptionGroups structure is documented below.
     * Changing this creates a new resource.
     *
     * > **NOTE:** Parameters `topicConfigs` and `subscriptionGroups` are required when `type` is set to **rocketmq**.
     */
    public readonly subscriptionGroups!: pulumi.Output<outputs.DmsRocketmqMigrationTaskSubscriptionGroup[]>;
    /**
     * Specifies the topic metadata.
     * The topicConfigs structure is documented below.
     * Changing this creates a new resource.
     */
    public readonly topicConfigs!: pulumi.Output<outputs.DmsRocketmqMigrationTaskTopicConfig[]>;
    /**
     * Specifies the exchange type. Changing this creates a new resource.
     *
     * <a name="RocketMQ_migration_task_bindings"></a>
     * The `bindings` block supports:
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Specifies the virtual hosts metadata.
     * The vhosts structure is documented below.
     * Changing this creates a new resource.
     */
    public readonly vhosts!: pulumi.Output<outputs.DmsRocketmqMigrationTaskVhost[]>;

    /**
     * Create a DmsRocketmqMigrationTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsRocketmqMigrationTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsRocketmqMigrationTaskArgs | DmsRocketmqMigrationTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsRocketmqMigrationTaskState | undefined;
            resourceInputs["bindings"] = state ? state.bindings : undefined;
            resourceInputs["exchanges"] = state ? state.exchanges : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["overwrite"] = state ? state.overwrite : undefined;
            resourceInputs["queues"] = state ? state.queues : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["startDate"] = state ? state.startDate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subscriptionGroups"] = state ? state.subscriptionGroups : undefined;
            resourceInputs["topicConfigs"] = state ? state.topicConfigs : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["vhosts"] = state ? state.vhosts : undefined;
        } else {
            const args = argsOrState as DmsRocketmqMigrationTaskArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.overwrite === undefined) && !opts.urn) {
                throw new Error("Missing required property 'overwrite'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bindings"] = args ? args.bindings : undefined;
            resourceInputs["exchanges"] = args ? args.exchanges : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["overwrite"] = args ? args.overwrite : undefined;
            resourceInputs["queues"] = args ? args.queues : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["subscriptionGroups"] = args ? args.subscriptionGroups : undefined;
            resourceInputs["topicConfigs"] = args ? args.topicConfigs : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["vhosts"] = args ? args.vhosts : undefined;
            resourceInputs["startDate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsRocketmqMigrationTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DmsRocketmqMigrationTask resources.
 */
export interface DmsRocketmqMigrationTaskState {
    /**
     * Specifies the binding metadata.
     * The bindings structure is documented below.
     * Changing this creates a new resource.
     *
     * > **NOTE:** Parameters `vhosts`, `queues`, `exchanges` and `bindings` are required when `type` is set to **rabbitToRocket**.
     *
     * <a name="RocketMQ_migration_task_topic_configs"></a>
     * The `topicConfigs` block supports:
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskBinding>[]>;
    /**
     * Specifies the exchange metadata.
     * The exchanges structure is documented below.
     * Changing this creates a new resource.
     */
    exchanges?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskExchange>[]>;
    /**
     * Specifies the ID of the RocketMQ instance.
     * Changing this creates a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the switch name. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether to overwrite configurations with the same name.
     * Value options:
     * + **true**: Configurations in the destination metadata with the same name as the source metadata will be overwritten.
     * + **false**: An error is reported when a topic or group already exists.
     * Changing this creates a new resource.
     */
    overwrite?: pulumi.Input<string>;
    /**
     * Specifies the queue metadata.
     * The queues structure is documented below.
     * Changing this creates a new resource.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskQueue>[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Indicates the start time of the migration task.
     */
    startDate?: pulumi.Input<string>;
    /**
     * Indicates the status of the migration task. The value can be **finished** or **failed***.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the consumer group metadata.
     * The subscriptionGroups structure is documented below.
     * Changing this creates a new resource.
     *
     * > **NOTE:** Parameters `topicConfigs` and `subscriptionGroups` are required when `type` is set to **rocketmq**.
     */
    subscriptionGroups?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskSubscriptionGroup>[]>;
    /**
     * Specifies the topic metadata.
     * The topicConfigs structure is documented below.
     * Changing this creates a new resource.
     */
    topicConfigs?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskTopicConfig>[]>;
    /**
     * Specifies the exchange type. Changing this creates a new resource.
     *
     * <a name="RocketMQ_migration_task_bindings"></a>
     * The `bindings` block supports:
     */
    type?: pulumi.Input<string>;
    /**
     * Specifies the virtual hosts metadata.
     * The vhosts structure is documented below.
     * Changing this creates a new resource.
     */
    vhosts?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskVhost>[]>;
}

/**
 * The set of arguments for constructing a DmsRocketmqMigrationTask resource.
 */
export interface DmsRocketmqMigrationTaskArgs {
    /**
     * Specifies the binding metadata.
     * The bindings structure is documented below.
     * Changing this creates a new resource.
     *
     * > **NOTE:** Parameters `vhosts`, `queues`, `exchanges` and `bindings` are required when `type` is set to **rabbitToRocket**.
     *
     * <a name="RocketMQ_migration_task_topic_configs"></a>
     * The `topicConfigs` block supports:
     */
    bindings?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskBinding>[]>;
    /**
     * Specifies the exchange metadata.
     * The exchanges structure is documented below.
     * Changing this creates a new resource.
     */
    exchanges?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskExchange>[]>;
    /**
     * Specifies the ID of the RocketMQ instance.
     * Changing this creates a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the switch name. Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies whether to overwrite configurations with the same name.
     * Value options:
     * + **true**: Configurations in the destination metadata with the same name as the source metadata will be overwritten.
     * + **false**: An error is reported when a topic or group already exists.
     * Changing this creates a new resource.
     */
    overwrite: pulumi.Input<string>;
    /**
     * Specifies the queue metadata.
     * The queues structure is documented below.
     * Changing this creates a new resource.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskQueue>[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the consumer group metadata.
     * The subscriptionGroups structure is documented below.
     * Changing this creates a new resource.
     *
     * > **NOTE:** Parameters `topicConfigs` and `subscriptionGroups` are required when `type` is set to **rocketmq**.
     */
    subscriptionGroups?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskSubscriptionGroup>[]>;
    /**
     * Specifies the topic metadata.
     * The topicConfigs structure is documented below.
     * Changing this creates a new resource.
     */
    topicConfigs?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskTopicConfig>[]>;
    /**
     * Specifies the exchange type. Changing this creates a new resource.
     *
     * <a name="RocketMQ_migration_task_bindings"></a>
     * The `bindings` block supports:
     */
    type: pulumi.Input<string>;
    /**
     * Specifies the virtual hosts metadata.
     * The vhosts structure is documented below.
     * Changing this creates a new resource.
     */
    vhosts?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqMigrationTaskVhost>[]>;
}

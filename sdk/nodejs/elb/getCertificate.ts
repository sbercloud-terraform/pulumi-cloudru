// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Use this data source to get the certificates in SberCloud Elastic Load Balance (ELB).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const certificateName = config.requireObject<any>("certificateName");
 * const test = sbercloud.Elb.getCertificate({
 *     name: certificateName,
 *     type: "server",
 * });
 * ```
 */
export function getCertificate(args: GetCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetCertificateResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Elb/getCertificate:getCertificate", {
        "name": args.name,
        "region": args.region,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificate.
 */
export interface GetCertificateArgs {
    /**
     * The name of certificate. The value is case sensitive and does not supports fuzzy matching.
     *
     * > **NOTE:** The certificate name is not unique. Only returns the last created one when matched multiple certificates.
     */
    name: string;
    /**
     * The region in which to obtain the ELB certificate. If omitted, the provider-level region
     * will be used.
     */
    region?: string;
    /**
     * Specifies the certificate type. The default value is `server`. The value can be one of the
     * following:
     */
    type?: string;
}

/**
 * A collection of values returned by getCertificate.
 */
export interface GetCertificateResult {
    /**
     * Human-readable description for the Certificate.
     */
    readonly description: string;
    /**
     * The domain of the Certificate. This parameter is valid only when `type` is "server".
     */
    readonly domain: string;
    /**
     * Indicates the time when the certificate expires.
     */
    readonly expiration: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly region: string;
    readonly type?: string;
}
/**
 * Use this data source to get the certificates in SberCloud Elastic Load Balance (ELB).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const certificateName = config.requireObject<any>("certificateName");
 * const test = sbercloud.Elb.getCertificate({
 *     name: certificateName,
 *     type: "server",
 * });
 * ```
 */
export function getCertificateOutput(args: GetCertificateOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCertificateResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Elb/getCertificate:getCertificate", {
        "name": args.name,
        "region": args.region,
        "type": args.type,
    }, opts);
}

/**
 * A collection of arguments for invoking getCertificate.
 */
export interface GetCertificateOutputArgs {
    /**
     * The name of certificate. The value is case sensitive and does not supports fuzzy matching.
     *
     * > **NOTE:** The certificate name is not unique. Only returns the last created one when matched multiple certificates.
     */
    name: pulumi.Input<string>;
    /**
     * The region in which to obtain the ELB certificate. If omitted, the provider-level region
     * will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the certificate type. The default value is `server`. The value can be one of the
     * following:
     */
    type?: pulumi.Input<string>;
}

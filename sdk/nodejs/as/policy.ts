// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an AS policy resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### AS Recurrence Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const asGroupId = config.requireObject<any>("asGroupId");
 * const myAspolicy = new sbercloud.as.Policy("my_aspolicy", {
 *     scalingPolicyName: "my_aspolicy",
 *     scalingPolicyType: "RECURRENCE",
 *     scalingGroupId: asGroupId,
 *     scalingPolicyAction: {
 *         operation: "ADD",
 *         instanceNumber: 1,
 *     },
 *     scheduledPolicy: {
 *         launchTime: "07:00",
 *         recurrenceType: "Daily",
 *         startTime: "2022-11-30T12:00Z",
 *         endTime: "2022-12-30T12:00Z",
 *     },
 * });
 * ```
 *
 * ### AS Scheduled Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const asGroupId = config.requireObject<any>("asGroupId");
 * const myAspolicy1 = new sbercloud.as.Policy("my_aspolicy_1", {
 *     scalingPolicyName: "my_aspolicy_1",
 *     scalingPolicyType: "SCHEDULED",
 *     scalingGroupId: asGroupId,
 *     scalingPolicyAction: {
 *         operation: "REMOVE",
 *         instanceNumber: 1,
 *     },
 *     scheduledPolicy: {
 *         launchTime: "2022-12-22T12:00Z",
 *     },
 * });
 * ```
 *
 * ### AS Alarm Policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const asGroupId = config.requireObject<any>("asGroupId");
 * const alarmRule = new sbercloud.ces.Alarmrule("alarm_rule", {
 *     alarmName: "as_alarm_rule",
 *     metric: {
 *         namespace: "SYS.AS",
 *         metricName: "cpu_util",
 *         dimensions: [{
 *             name: "AutoScalingGroup",
 *             value: asGroupId,
 *         }],
 *     },
 *     condition: {
 *         period: 300,
 *         filter: "average",
 *         comparisonOperator: ">=",
 *         value: 60,
 *         unit: "%",
 *         count: 1,
 *     },
 *     alarmActions: [{
 *         type: "autoscaling",
 *         notificationLists: [],
 *     }],
 * });
 * const myAspolicy2 = new sbercloud.as.Policy("my_aspolicy_2", {
 *     scalingPolicyName: "my_aspolicy_2",
 *     scalingPolicyType: "ALARM",
 *     scalingGroupId: asGroupId,
 *     alarmId: alarmRule.id,
 *     coolDownTime: 900,
 *     scalingPolicyAction: {
 *         operation: "ADD",
 *         instanceNumber: 1,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AS policies can be imported by their `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:As/policy:Policy test 9fcb65fe-fd79-4407-8fa0-07602044e1c3
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:As/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    /**
     * Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
     * is set to `ALARM`.
     */
    public readonly alarmId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the cooling duration (in seconds).
     * The value ranges from 0 to 86400 and is 300 by default.
     *
     * <a name="scheduledPolicyObject"></a>
     * The `scheduledPolicy` block supports:
     */
    public readonly coolDownTime!: pulumi.Output<number>;
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the AS policy. If omitted, the
     * provider-level region will be used. Changing this creates a new AS policy.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the AS group ID. Changing this creates a new AS policy.
     */
    public readonly scalingGroupId!: pulumi.Output<string>;
    /**
     * Specifies the action of the AS policy.
     * The object structure is documented below.
     */
    public readonly scalingPolicyAction!: pulumi.Output<outputs.As.PolicyScalingPolicyAction>;
    /**
     * Specifies the name of the AS policy. The name contains only letters, digits,
     * underscores(_), and hyphens(-), and cannot exceed 64 characters.
     */
    public readonly scalingPolicyName!: pulumi.Output<string>;
    /**
     * Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
     * + **ALARM**: indicates that the scaling action is triggered by an alarm.
     * + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
     * + **RECURRENCE**: indicates that the scaling action is triggered periodically.
     */
    public readonly scalingPolicyType!: pulumi.Output<string>;
    /**
     * Specifies the periodic or scheduled AS policy.
     * This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
     * The object structure is documented below.
     */
    public readonly scheduledPolicy!: pulumi.Output<outputs.As.PolicyScheduledPolicy>;
    /**
     * The AS policy status. The value can be *INSERVICE*, *PAUSED* or *EXECUTING*.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["alarmId"] = state ? state.alarmId : undefined;
            resourceInputs["coolDownTime"] = state ? state.coolDownTime : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["scalingGroupId"] = state ? state.scalingGroupId : undefined;
            resourceInputs["scalingPolicyAction"] = state ? state.scalingPolicyAction : undefined;
            resourceInputs["scalingPolicyName"] = state ? state.scalingPolicyName : undefined;
            resourceInputs["scalingPolicyType"] = state ? state.scalingPolicyType : undefined;
            resourceInputs["scheduledPolicy"] = state ? state.scheduledPolicy : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.scalingGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingGroupId'");
            }
            if ((!args || args.scalingPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingPolicyName'");
            }
            if ((!args || args.scalingPolicyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scalingPolicyType'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["alarmId"] = args ? args.alarmId : undefined;
            resourceInputs["coolDownTime"] = args ? args.coolDownTime : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["scalingGroupId"] = args ? args.scalingGroupId : undefined;
            resourceInputs["scalingPolicyAction"] = args ? args.scalingPolicyAction : undefined;
            resourceInputs["scalingPolicyName"] = args ? args.scalingPolicyName : undefined;
            resourceInputs["scalingPolicyType"] = args ? args.scalingPolicyType : undefined;
            resourceInputs["scheduledPolicy"] = args ? args.scheduledPolicy : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    action?: pulumi.Input<string>;
    /**
     * Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
     * is set to `ALARM`.
     */
    alarmId?: pulumi.Input<string>;
    /**
     * Specifies the cooling duration (in seconds).
     * The value ranges from 0 to 86400 and is 300 by default.
     *
     * <a name="scheduledPolicyObject"></a>
     * The `scheduledPolicy` block supports:
     */
    coolDownTime?: pulumi.Input<number>;
    createTime?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the AS policy. If omitted, the
     * provider-level region will be used. Changing this creates a new AS policy.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the AS group ID. Changing this creates a new AS policy.
     */
    scalingGroupId?: pulumi.Input<string>;
    /**
     * Specifies the action of the AS policy.
     * The object structure is documented below.
     */
    scalingPolicyAction?: pulumi.Input<inputs.As.PolicyScalingPolicyAction>;
    /**
     * Specifies the name of the AS policy. The name contains only letters, digits,
     * underscores(_), and hyphens(-), and cannot exceed 64 characters.
     */
    scalingPolicyName?: pulumi.Input<string>;
    /**
     * Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
     * + **ALARM**: indicates that the scaling action is triggered by an alarm.
     * + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
     * + **RECURRENCE**: indicates that the scaling action is triggered periodically.
     */
    scalingPolicyType?: pulumi.Input<string>;
    /**
     * Specifies the periodic or scheduled AS policy.
     * This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
     * The object structure is documented below.
     */
    scheduledPolicy?: pulumi.Input<inputs.As.PolicyScheduledPolicy>;
    /**
     * The AS policy status. The value can be *INSERVICE*, *PAUSED* or *EXECUTING*.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    action?: pulumi.Input<string>;
    /**
     * Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
     * is set to `ALARM`.
     */
    alarmId?: pulumi.Input<string>;
    /**
     * Specifies the cooling duration (in seconds).
     * The value ranges from 0 to 86400 and is 300 by default.
     *
     * <a name="scheduledPolicyObject"></a>
     * The `scheduledPolicy` block supports:
     */
    coolDownTime?: pulumi.Input<number>;
    /**
     * Specifies the region in which to create the AS policy. If omitted, the
     * provider-level region will be used. Changing this creates a new AS policy.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the AS group ID. Changing this creates a new AS policy.
     */
    scalingGroupId: pulumi.Input<string>;
    /**
     * Specifies the action of the AS policy.
     * The object structure is documented below.
     */
    scalingPolicyAction?: pulumi.Input<inputs.As.PolicyScalingPolicyAction>;
    /**
     * Specifies the name of the AS policy. The name contains only letters, digits,
     * underscores(_), and hyphens(-), and cannot exceed 64 characters.
     */
    scalingPolicyName: pulumi.Input<string>;
    /**
     * Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
     * + **ALARM**: indicates that the scaling action is triggered by an alarm.
     * + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
     * + **RECURRENCE**: indicates that the scaling action is triggered periodically.
     */
    scalingPolicyType: pulumi.Input<string>;
    /**
     * Specifies the periodic or scheduled AS policy.
     * This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
     * The object structure is documented below.
     */
    scheduledPolicy?: pulumi.Input<inputs.As.PolicyScheduledPolicy>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to get the list of associations.
 *
 * Before using enterprise router, define custom endpoint as shown below:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const routeTableId = config.requireObject<any>("routeTableId");
 * const test = sbercloud.Er.getAssociations({
 *     instanceId: instanceId,
 *     routeTableId: routeTableId,
 * });
 * ```
 */
export function getAssociations(args: GetAssociationsArgs, opts?: pulumi.InvokeOptions): Promise<GetAssociationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Er/getAssociations:getAssociations", {
        "attachmentId": args.attachmentId,
        "attachmentType": args.attachmentType,
        "instanceId": args.instanceId,
        "region": args.region,
        "routeTableId": args.routeTableId,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getAssociations.
 */
export interface GetAssociationsArgs {
    /**
     * Specifies the attachment ID corresponding to the association.
     */
    attachmentId?: string;
    /**
     * Specifies the attachment type corresponding to the association.
     */
    attachmentType?: string;
    /**
     * Specifies the ER instance ID to which the association belongs.
     */
    instanceId: string;
    /**
     * Specifies the region in which to query the data source.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the route table ID to which the association belongs.
     */
    routeTableId: string;
    /**
     * Specifies the status of the association. Default value is `available`.
     * The valid values are as follows:
     * + **available**
     * + **failed**
     */
    status?: string;
}

/**
 * A collection of values returned by getAssociations.
 */
export interface GetAssociationsResult {
    /**
     * All associations that match the filter parameters.
     * The associations structure is documented below.
     */
    readonly associations: outputs.Er.GetAssociationsAssociation[];
    /**
     * The attachment ID corresponding to the association.
     */
    readonly attachmentId?: string;
    /**
     * The type of the attachment corresponding to the association.
     */
    readonly attachmentType?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly region?: string;
    /**
     * The route table ID corresponding to the association.
     */
    readonly routeTableId: string;
    /**
     * The current status of the association.
     */
    readonly status?: string;
}
/**
 * Use this data source to get the list of associations.
 *
 * Before using enterprise router, define custom endpoint as shown below:
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * ```
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const routeTableId = config.requireObject<any>("routeTableId");
 * const test = sbercloud.Er.getAssociations({
 *     instanceId: instanceId,
 *     routeTableId: routeTableId,
 * });
 * ```
 */
export function getAssociationsOutput(args: GetAssociationsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAssociationsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Er/getAssociations:getAssociations", {
        "attachmentId": args.attachmentId,
        "attachmentType": args.attachmentType,
        "instanceId": args.instanceId,
        "region": args.region,
        "routeTableId": args.routeTableId,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getAssociations.
 */
export interface GetAssociationsOutputArgs {
    /**
     * Specifies the attachment ID corresponding to the association.
     */
    attachmentId?: pulumi.Input<string>;
    /**
     * Specifies the attachment type corresponding to the association.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * Specifies the ER instance ID to which the association belongs.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the region in which to query the data source.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the route table ID to which the association belongs.
     */
    routeTableId: pulumi.Input<string>;
    /**
     * Specifies the status of the association. Default value is `available`.
     * The valid values are as follows:
     * + **available**
     * + **failed**
     */
    status?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a CFW ACL rule resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### Create a basic rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject<any>("name");
 * const description = config.requireObject<any>("description");
 * const objectId = config.requireObject<any>("objectId");
 * const test = new sbercloud.cfw.AclRule("test", {
 *     name: name,
 *     objectId: objectId,
 *     description: description,
 *     type: 0,
 *     addressType: 0,
 *     actionType: 0,
 *     longConnectEnable: 0,
 *     status: 1,
 *     sourceAddresses: ["1.1.1.1"],
 *     destinationAddresses: ["1.1.1.2"],
 *     customServices: [{
 *         protocol: 6,
 *         sourcePort: "81",
 *         destPort: "82",
 *     }],
 *     sequence: {
 *         top: 1,
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ### Create a rule with the source address using the region list
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject<any>("name");
 * const description = config.requireObject<any>("description");
 * const objectId = config.requireObject<any>("objectId");
 * const test = new sbercloud.cfw.AclRule("test", {
 *     name: name,
 *     objectId: objectId,
 *     description: description,
 *     type: 0,
 *     addressType: 0,
 *     actionType: 0,
 *     longConnectEnable: 0,
 *     status: 1,
 *     sourceRegionLists: [{
 *         descriptionCn: "中国",
 *         descriptionEn: "Chinese Mainland",
 *         regionId: "CN",
 *         regionType: 0,
 *     }],
 *     destinationAddresses: ["1.1.1.2"],
 *     customServices: [{
 *         protocol: 6,
 *         sourcePort: "81",
 *         destPort: "82",
 *     }],
 *     sequence: {
 *         top: 1,
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ### Create a rule with the custom service groups
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject<any>("name");
 * const description = config.requireObject<any>("description");
 * const objectId = config.requireObject<any>("objectId");
 * const serviceGroupId = config.requireObject<any>("serviceGroupId");
 * const protocol = config.requireObject<any>("protocol");
 * const test = new sbercloud.cfw.AclRule("test", {
 *     name: name,
 *     objectId: objectId,
 *     description: description,
 *     type: 0,
 *     addressType: 0,
 *     actionType: 0,
 *     longConnectEnable: 0,
 *     status: 1,
 *     sourceAddresses: ["1.1.1.1"],
 *     destinationAddresses: ["1.1.1.2"],
 *     customServiceGroups: {
 *         protocols: [protocol],
 *         groupIds: [serviceGroupId],
 *     },
 *     sequence: {
 *         top: 1,
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ### Create a rule with any service
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject<any>("name");
 * const description = config.requireObject<any>("description");
 * const objectId = config.requireObject<any>("objectId");
 * const serviceGroupId = config.requireObject<any>("serviceGroupId");
 * const protocol = config.requireObject<any>("protocol");
 * const test = new sbercloud.cfw.AclRule("test", {
 *     name: name,
 *     objectId: objectId,
 *     description: description,
 *     type: 0,
 *     addressType: 0,
 *     actionType: 0,
 *     longConnectEnable: 0,
 *     status: 1,
 *     sourceAddresses: ["1.1.1.1"],
 *     destinationAddresses: ["1.1.1.2"],
 *     sequence: {
 *         top: 1,
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ### Create a rule with any source address
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject<any>("name");
 * const description = config.requireObject<any>("description");
 * const objectId = config.requireObject<any>("objectId");
 * const serviceGroupId = config.requireObject<any>("serviceGroupId");
 * const protocol = config.requireObject<any>("protocol");
 * const test = new sbercloud.cfw.AclRule("test", {
 *     name: name,
 *     objectId: objectId,
 *     description: description,
 *     type: 0,
 *     addressType: 0,
 *     actionType: 0,
 *     longConnectEnable: 0,
 *     status: 1,
 *     destinationAddresses: ["1.1.1.2"],
 *     customServices: [{
 *         protocol: 6,
 *         sourcePort: "81",
 *         destPort: "82",
 *     }],
 *     sequence: {
 *         top: 1,
 *     },
 *     tags: {
 *         key: "value",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The ACL rule can be imported using `object_id`, `id`, separated by a slash, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Cfw/aclRule:AclRule test <object_id>/<id>
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason.
 *
 * The missing attributes include: `sequence`, `type`, `predefined_service_groups` and `source_predefined_groups`.
 *
 * It is generally recommended running `pulumi preview` after importing the resource.
 *
 * You can then decide if changes should be applied to the instance, or the resource definition should be updated to
 *
 * align with the instance. Also you can ignore changes as below.
 *
 * hcl
 *
 * resource "sbercloud_cfw_acl_rule" "test" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       sequence, type, predefined_service_groups, source_predefined_groups,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class AclRule extends pulumi.CustomResource {
    /**
     * Get an existing AclRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclRuleState, opts?: pulumi.CustomResourceOptions): AclRule {
        return new AclRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Cfw/aclRule:AclRule';

    /**
     * Returns true if the given object is an instance of AclRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclRule.__pulumiType;
    }

    /**
     * The action type.
     * The value can be `0` (allow), `1` (deny).
     */
    public readonly actionType!: pulumi.Output<number>;
    /**
     * The address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    public readonly addressType!: pulumi.Output<number>;
    /**
     * The application list.
     * The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
     * **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
     */
    public readonly applications!: pulumi.Output<string[] | undefined>;
    /**
     * The custom service group list.
     * The customServiceGroups structure is documented below.
     */
    public readonly customServiceGroups!: pulumi.Output<outputs.Cfw.AclRuleCustomServiceGroups | undefined>;
    /**
     * The custom service configuration.
     * The customServices structure is documented below.
     */
    public readonly customServices!: pulumi.Output<outputs.Cfw.AclRuleCustomService[] | undefined>;
    /**
     * The rule description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The destination address group list.
     */
    public readonly destinationAddressGroups!: pulumi.Output<string[] | undefined>;
    /**
     * The destination address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    public readonly destinationAddressType!: pulumi.Output<number | undefined>;
    /**
     * The destination IP address list.
     */
    public readonly destinationAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * The destination domain address name.
     */
    public readonly destinationDomainAddressName!: pulumi.Output<string | undefined>;
    /**
     * The destination domain group ID.
     */
    public readonly destinationDomainGroupId!: pulumi.Output<string | undefined>;
    /**
     * The destination domain group name.
     */
    public readonly destinationDomainGroupName!: pulumi.Output<string | undefined>;
    /**
     * The destination domain group type.
     * The options are as follows:
     * + **4**: application domain name group;
     * + **6**: network domain name group;
     */
    public readonly destinationDomainGroupType!: pulumi.Output<number | undefined>;
    /**
     * The destination region list.
     * The destinationRegionList structure is documented below.
     */
    public readonly destinationRegionLists!: pulumi.Output<outputs.Cfw.AclRuleDestinationRegionList[] | undefined>;
    /**
     * The rule direction. The options are as follows:
     * + **0**: inbound;
     * + **1**: outbound;
     */
    public readonly direction!: pulumi.Output<number>;
    public readonly enableForceNew!: pulumi.Output<string | undefined>;
    /**
     * Whether to support persistent connections.
     */
    public readonly longConnectEnable!: pulumi.Output<number>;
    /**
     * The persistent connection duration (hour).
     */
    public readonly longConnectTimeHour!: pulumi.Output<number>;
    /**
     * The persistent connection duration (minute).
     */
    public readonly longConnectTimeMinute!: pulumi.Output<number>;
    /**
     * The persistent Connection Duration (second).
     */
    public readonly longConnectTimeSecond!: pulumi.Output<number>;
    /**
     * The rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The protected object ID.
     */
    public readonly objectId!: pulumi.Output<string>;
    /**
     * The predefined service group list.
     * The predefinedServiceGroups structure is documented below.
     */
    public readonly predefinedServiceGroups!: pulumi.Output<outputs.Cfw.AclRulePredefinedServiceGroups | undefined>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * The number of times the ACL rule is hit.
     * Setting the value to **0** will clear the hit count. Value options: **0**.
     */
    public readonly ruleHitCount!: pulumi.Output<string>;
    /**
     * The sequence configuration.
     * The sequence structure is documented below.
     */
    public readonly sequence!: pulumi.Output<outputs.Cfw.AclRuleSequence>;
    /**
     * The source address group list.
     */
    public readonly sourceAddressGroups!: pulumi.Output<string[] | undefined>;
    /**
     * The source address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    public readonly sourceAddressType!: pulumi.Output<number | undefined>;
    /**
     * The source IP address list.
     */
    public readonly sourceAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * The source predefined address group list.
     */
    public readonly sourcePredefinedGroups!: pulumi.Output<string[] | undefined>;
    /**
     * The source region list.
     * The sourceRegionList structure is documented below.
     */
    public readonly sourceRegionLists!: pulumi.Output<outputs.Cfw.AclRuleSourceRegionList[] | undefined>;
    /**
     * The rule status. The options are as follows:
     * + **0**: disabled;
     * + **1**: enabled;
     */
    public readonly status!: pulumi.Output<number>;
    /**
     * The key/value pairs to associate with the ACL rule.
     *
     * <a name="Sequence"></a>
     * The `sequence` block supports:
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The rule type.
     * The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
     */
    public readonly type!: pulumi.Output<number>;

    /**
     * Create a AclRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclRuleArgs | AclRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclRuleState | undefined;
            resourceInputs["actionType"] = state ? state.actionType : undefined;
            resourceInputs["addressType"] = state ? state.addressType : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["customServiceGroups"] = state ? state.customServiceGroups : undefined;
            resourceInputs["customServices"] = state ? state.customServices : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationAddressGroups"] = state ? state.destinationAddressGroups : undefined;
            resourceInputs["destinationAddressType"] = state ? state.destinationAddressType : undefined;
            resourceInputs["destinationAddresses"] = state ? state.destinationAddresses : undefined;
            resourceInputs["destinationDomainAddressName"] = state ? state.destinationDomainAddressName : undefined;
            resourceInputs["destinationDomainGroupId"] = state ? state.destinationDomainGroupId : undefined;
            resourceInputs["destinationDomainGroupName"] = state ? state.destinationDomainGroupName : undefined;
            resourceInputs["destinationDomainGroupType"] = state ? state.destinationDomainGroupType : undefined;
            resourceInputs["destinationRegionLists"] = state ? state.destinationRegionLists : undefined;
            resourceInputs["direction"] = state ? state.direction : undefined;
            resourceInputs["enableForceNew"] = state ? state.enableForceNew : undefined;
            resourceInputs["longConnectEnable"] = state ? state.longConnectEnable : undefined;
            resourceInputs["longConnectTimeHour"] = state ? state.longConnectTimeHour : undefined;
            resourceInputs["longConnectTimeMinute"] = state ? state.longConnectTimeMinute : undefined;
            resourceInputs["longConnectTimeSecond"] = state ? state.longConnectTimeSecond : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["predefinedServiceGroups"] = state ? state.predefinedServiceGroups : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["ruleHitCount"] = state ? state.ruleHitCount : undefined;
            resourceInputs["sequence"] = state ? state.sequence : undefined;
            resourceInputs["sourceAddressGroups"] = state ? state.sourceAddressGroups : undefined;
            resourceInputs["sourceAddressType"] = state ? state.sourceAddressType : undefined;
            resourceInputs["sourceAddresses"] = state ? state.sourceAddresses : undefined;
            resourceInputs["sourcePredefinedGroups"] = state ? state.sourcePredefinedGroups : undefined;
            resourceInputs["sourceRegionLists"] = state ? state.sourceRegionLists : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as AclRuleArgs | undefined;
            if ((!args || args.actionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionType'");
            }
            if ((!args || args.addressType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addressType'");
            }
            if ((!args || args.longConnectEnable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'longConnectEnable'");
            }
            if ((!args || args.objectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectId'");
            }
            if ((!args || args.sequence === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sequence'");
            }
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actionType"] = args ? args.actionType : undefined;
            resourceInputs["addressType"] = args ? args.addressType : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["customServiceGroups"] = args ? args.customServiceGroups : undefined;
            resourceInputs["customServices"] = args ? args.customServices : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationAddressGroups"] = args ? args.destinationAddressGroups : undefined;
            resourceInputs["destinationAddressType"] = args ? args.destinationAddressType : undefined;
            resourceInputs["destinationAddresses"] = args ? args.destinationAddresses : undefined;
            resourceInputs["destinationDomainAddressName"] = args ? args.destinationDomainAddressName : undefined;
            resourceInputs["destinationDomainGroupId"] = args ? args.destinationDomainGroupId : undefined;
            resourceInputs["destinationDomainGroupName"] = args ? args.destinationDomainGroupName : undefined;
            resourceInputs["destinationDomainGroupType"] = args ? args.destinationDomainGroupType : undefined;
            resourceInputs["destinationRegionLists"] = args ? args.destinationRegionLists : undefined;
            resourceInputs["direction"] = args ? args.direction : undefined;
            resourceInputs["enableForceNew"] = args ? args.enableForceNew : undefined;
            resourceInputs["longConnectEnable"] = args ? args.longConnectEnable : undefined;
            resourceInputs["longConnectTimeHour"] = args ? args.longConnectTimeHour : undefined;
            resourceInputs["longConnectTimeMinute"] = args ? args.longConnectTimeMinute : undefined;
            resourceInputs["longConnectTimeSecond"] = args ? args.longConnectTimeSecond : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["predefinedServiceGroups"] = args ? args.predefinedServiceGroups : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["ruleHitCount"] = args ? args.ruleHitCount : undefined;
            resourceInputs["sequence"] = args ? args.sequence : undefined;
            resourceInputs["sourceAddressGroups"] = args ? args.sourceAddressGroups : undefined;
            resourceInputs["sourceAddressType"] = args ? args.sourceAddressType : undefined;
            resourceInputs["sourceAddresses"] = args ? args.sourceAddresses : undefined;
            resourceInputs["sourcePredefinedGroups"] = args ? args.sourcePredefinedGroups : undefined;
            resourceInputs["sourceRegionLists"] = args ? args.sourceRegionLists : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclRule resources.
 */
export interface AclRuleState {
    /**
     * The action type.
     * The value can be `0` (allow), `1` (deny).
     */
    actionType?: pulumi.Input<number>;
    /**
     * The address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    addressType?: pulumi.Input<number>;
    /**
     * The application list.
     * The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
     * **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The custom service group list.
     * The customServiceGroups structure is documented below.
     */
    customServiceGroups?: pulumi.Input<inputs.Cfw.AclRuleCustomServiceGroups>;
    /**
     * The custom service configuration.
     * The customServices structure is documented below.
     */
    customServices?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleCustomService>[]>;
    /**
     * The rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination address group list.
     */
    destinationAddressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    destinationAddressType?: pulumi.Input<number>;
    /**
     * The destination IP address list.
     */
    destinationAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination domain address name.
     */
    destinationDomainAddressName?: pulumi.Input<string>;
    /**
     * The destination domain group ID.
     */
    destinationDomainGroupId?: pulumi.Input<string>;
    /**
     * The destination domain group name.
     */
    destinationDomainGroupName?: pulumi.Input<string>;
    /**
     * The destination domain group type.
     * The options are as follows:
     * + **4**: application domain name group;
     * + **6**: network domain name group;
     */
    destinationDomainGroupType?: pulumi.Input<number>;
    /**
     * The destination region list.
     * The destinationRegionList structure is documented below.
     */
    destinationRegionLists?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleDestinationRegionList>[]>;
    /**
     * The rule direction. The options are as follows:
     * + **0**: inbound;
     * + **1**: outbound;
     */
    direction?: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Whether to support persistent connections.
     */
    longConnectEnable?: pulumi.Input<number>;
    /**
     * The persistent connection duration (hour).
     */
    longConnectTimeHour?: pulumi.Input<number>;
    /**
     * The persistent connection duration (minute).
     */
    longConnectTimeMinute?: pulumi.Input<number>;
    /**
     * The persistent Connection Duration (second).
     */
    longConnectTimeSecond?: pulumi.Input<number>;
    /**
     * The rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The protected object ID.
     */
    objectId?: pulumi.Input<string>;
    /**
     * The predefined service group list.
     * The predefinedServiceGroups structure is documented below.
     */
    predefinedServiceGroups?: pulumi.Input<inputs.Cfw.AclRulePredefinedServiceGroups>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The number of times the ACL rule is hit.
     * Setting the value to **0** will clear the hit count. Value options: **0**.
     */
    ruleHitCount?: pulumi.Input<string>;
    /**
     * The sequence configuration.
     * The sequence structure is documented below.
     */
    sequence?: pulumi.Input<inputs.Cfw.AclRuleSequence>;
    /**
     * The source address group list.
     */
    sourceAddressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    sourceAddressType?: pulumi.Input<number>;
    /**
     * The source IP address list.
     */
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source predefined address group list.
     */
    sourcePredefinedGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source region list.
     * The sourceRegionList structure is documented below.
     */
    sourceRegionLists?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleSourceRegionList>[]>;
    /**
     * The rule status. The options are as follows:
     * + **0**: disabled;
     * + **1**: enabled;
     */
    status?: pulumi.Input<number>;
    /**
     * The key/value pairs to associate with the ACL rule.
     *
     * <a name="Sequence"></a>
     * The `sequence` block supports:
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The rule type.
     * The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
     */
    type?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AclRule resource.
 */
export interface AclRuleArgs {
    /**
     * The action type.
     * The value can be `0` (allow), `1` (deny).
     */
    actionType: pulumi.Input<number>;
    /**
     * The address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    addressType: pulumi.Input<number>;
    /**
     * The application list.
     * The valid value can be **HTTP**, **HTTPS**, **TLS1**, **DNS**, **SSH**, **MYSQL**, **SMTP**, **RDP**, **RDPS**,
     * **VNC**, **POP3**, **IMAP4**, **SMTPS**, **POP3S**, **FTPS**, **ANY**, **BGP** and so on.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The custom service group list.
     * The customServiceGroups structure is documented below.
     */
    customServiceGroups?: pulumi.Input<inputs.Cfw.AclRuleCustomServiceGroups>;
    /**
     * The custom service configuration.
     * The customServices structure is documented below.
     */
    customServices?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleCustomService>[]>;
    /**
     * The rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination address group list.
     */
    destinationAddressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    destinationAddressType?: pulumi.Input<number>;
    /**
     * The destination IP address list.
     */
    destinationAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The destination domain address name.
     */
    destinationDomainAddressName?: pulumi.Input<string>;
    /**
     * The destination domain group ID.
     */
    destinationDomainGroupId?: pulumi.Input<string>;
    /**
     * The destination domain group name.
     */
    destinationDomainGroupName?: pulumi.Input<string>;
    /**
     * The destination domain group type.
     * The options are as follows:
     * + **4**: application domain name group;
     * + **6**: network domain name group;
     */
    destinationDomainGroupType?: pulumi.Input<number>;
    /**
     * The destination region list.
     * The destinationRegionList structure is documented below.
     */
    destinationRegionLists?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleDestinationRegionList>[]>;
    /**
     * The rule direction. The options are as follows:
     * + **0**: inbound;
     * + **1**: outbound;
     */
    direction?: pulumi.Input<number>;
    enableForceNew?: pulumi.Input<string>;
    /**
     * Whether to support persistent connections.
     */
    longConnectEnable: pulumi.Input<number>;
    /**
     * The persistent connection duration (hour).
     */
    longConnectTimeHour?: pulumi.Input<number>;
    /**
     * The persistent connection duration (minute).
     */
    longConnectTimeMinute?: pulumi.Input<number>;
    /**
     * The persistent Connection Duration (second).
     */
    longConnectTimeSecond?: pulumi.Input<number>;
    /**
     * The rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The protected object ID.
     */
    objectId: pulumi.Input<string>;
    /**
     * The predefined service group list.
     * The predefinedServiceGroups structure is documented below.
     */
    predefinedServiceGroups?: pulumi.Input<inputs.Cfw.AclRulePredefinedServiceGroups>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used.
     * Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The number of times the ACL rule is hit.
     * Setting the value to **0** will clear the hit count. Value options: **0**.
     */
    ruleHitCount?: pulumi.Input<string>;
    /**
     * The sequence configuration.
     * The sequence structure is documented below.
     */
    sequence: pulumi.Input<inputs.Cfw.AclRuleSequence>;
    /**
     * The source address group list.
     */
    sourceAddressGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source address type.
     * The value can be `0` (IPv4), `1` (IPv6).
     */
    sourceAddressType?: pulumi.Input<number>;
    /**
     * The source IP address list.
     */
    sourceAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source predefined address group list.
     */
    sourcePredefinedGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The source region list.
     * The sourceRegionList structure is documented below.
     */
    sourceRegionLists?: pulumi.Input<pulumi.Input<inputs.Cfw.AclRuleSourceRegionList>[]>;
    /**
     * The rule status. The options are as follows:
     * + **0**: disabled;
     * + **1**: enabled;
     */
    status: pulumi.Input<number>;
    /**
     * The key/value pairs to associate with the ACL rule.
     *
     * <a name="Sequence"></a>
     * The `sequence` block supports:
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The rule type.
     * The value can be `0` (Internet rule), `1` (VPC rule), or `2` (NAT rule).
     */
    type: pulumi.Input<number>;
}

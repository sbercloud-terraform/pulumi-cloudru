// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use this data source to get the details of a specified compute instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			ecsName := cfg.RequireObject("ecsName")
//			_, err := ecs.GetInstance(ctx, &ecs.GetInstanceArgs{
//				Name: pulumi.StringRef(ecsName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceResult
	err := ctx.Invoke("sbercloud:Ecs/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type LookupInstanceArgs struct {
	// Specifies the enterprise project id.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the IPv4 addresses of the ECS.
	FixedIpV4 *string `pulumi:"fixedIpV4"`
	// Specifies the flavor ID.
	FlavorId *string `pulumi:"flavorId"`
	// Specifies the ECS ID.
	// *
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the ECS name, which can be queried with a regular expression.
	Name *string `pulumi:"name"`
	// The region in which to obtain the instance. If omitted, the provider-level region will
	// be used.
	Region *string `pulumi:"region"`
	// The key/value pairs to associate with the instance.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getInstance.
type LookupInstanceResult struct {
	// The availability zone where the instance is located.
	AvailabilityZone    string `pulumi:"availabilityZone"`
	ChargingMode        string `pulumi:"chargingMode"`
	EnterpriseProjectId string `pulumi:"enterpriseProjectId"`
	ExpiredTime         string `pulumi:"expiredTime"`
	// The fixed IPv4 address of the instance on this network.
	FixedIpV4 *string `pulumi:"fixedIpV4"`
	FlavorId  string  `pulumi:"flavorId"`
	// The flavor name of the instance.
	FlavorName string `pulumi:"flavorName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The image ID of the instance.
	ImageId string `pulumi:"imageId"`
	// The image name of the instance.
	ImageName  string  `pulumi:"imageName"`
	InstanceId *string `pulumi:"instanceId"`
	// The key pair that is used to authenticate the instance.
	KeyPair string `pulumi:"keyPair"`
	Name    string `pulumi:"name"`
	// An array of one or more networks to attach to the instance. The network object structure is documented
	// below.
	Networks []GetInstanceNetwork `pulumi:"networks"`
	// The EIP address that is associted to the instance.
	PublicIp string `pulumi:"publicIp"`
	Region   string `pulumi:"region"`
	// The scheduler with hints on how the instance should be launched. The available hints are described
	// below.
	SchedulerHints []GetInstanceSchedulerHint `pulumi:"schedulerHints"`
	// An array of one or more security group IDs to associate with the instance.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// An array of one or more security groups to associate with the instance.Â¶
	SecurityGroups []string `pulumi:"securityGroups"`
	// The status of the instance.
	Status string `pulumi:"status"`
	// The system disk voume ID.
	SystemDiskId string `pulumi:"systemDiskId"`
	// The key/value pairs to associate with the instance.
	Tags map[string]string `pulumi:"tags"`
	// The user data (information after encoding) configured during instance creation.
	UserData string `pulumi:"userData"`
	// An array of one or more disks to attach to the instance. The volumeAttached object structure is
	// documented below.
	VolumeAttacheds []GetInstanceVolumeAttached `pulumi:"volumeAttacheds"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInstanceResultOutput, error) {
			args := v.(LookupInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Ecs/getInstance:getInstance", args, LookupInstanceResultOutput{}, options).(LookupInstanceResultOutput), nil
		}).(LookupInstanceResultOutput)
}

// A collection of arguments for invoking getInstance.
type LookupInstanceOutputArgs struct {
	// Specifies the enterprise project id.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the IPv4 addresses of the ECS.
	FixedIpV4 pulumi.StringPtrInput `pulumi:"fixedIpV4"`
	// Specifies the flavor ID.
	FlavorId pulumi.StringPtrInput `pulumi:"flavorId"`
	// Specifies the ECS ID.
	// *
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// Specifies the ECS name, which can be queried with a regular expression.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The region in which to obtain the instance. If omitted, the provider-level region will
	// be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The key/value pairs to associate with the instance.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (LookupInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getInstance.
type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutput() LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutputWithContext(ctx context.Context) LookupInstanceResultOutput {
	return o
}

// The availability zone where the instance is located.
func (o LookupInstanceResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// The fixed IPv4 address of the instance on this network.
func (o LookupInstanceResultOutput) FixedIpV4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.FixedIpV4 }).(pulumi.StringPtrOutput)
}

func (o LookupInstanceResultOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.FlavorId }).(pulumi.StringOutput)
}

// The flavor name of the instance.
func (o LookupInstanceResultOutput) FlavorName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.FlavorName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The image ID of the instance.
func (o LookupInstanceResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ImageId }).(pulumi.StringOutput)
}

// The image name of the instance.
func (o LookupInstanceResultOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ImageName }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInstanceResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The key pair that is used to authenticate the instance.
func (o LookupInstanceResultOutput) KeyPair() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.KeyPair }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Name }).(pulumi.StringOutput)
}

// An array of one or more networks to attach to the instance. The network object structure is documented
// below.
func (o LookupInstanceResultOutput) Networks() GetInstanceNetworkArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceNetwork { return v.Networks }).(GetInstanceNetworkArrayOutput)
}

// The EIP address that is associted to the instance.
func (o LookupInstanceResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o LookupInstanceResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Region }).(pulumi.StringOutput)
}

// The scheduler with hints on how the instance should be launched. The available hints are described
// below.
func (o LookupInstanceResultOutput) SchedulerHints() GetInstanceSchedulerHintArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceSchedulerHint { return v.SchedulerHints }).(GetInstanceSchedulerHintArrayOutput)
}

// An array of one or more security group IDs to associate with the instance.
func (o LookupInstanceResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// An array of one or more security groups to associate with the instance.Â¶
func (o LookupInstanceResultOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The status of the instance.
func (o LookupInstanceResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Status }).(pulumi.StringOutput)
}

// The system disk voume ID.
func (o LookupInstanceResultOutput) SystemDiskId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.SystemDiskId }).(pulumi.StringOutput)
}

// The key/value pairs to associate with the instance.
func (o LookupInstanceResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupInstanceResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The user data (information after encoding) configured during instance creation.
func (o LookupInstanceResultOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.UserData }).(pulumi.StringOutput)
}

// An array of one or more disks to attach to the instance. The volumeAttached object structure is
// documented below.
func (o LookupInstanceResultOutput) VolumeAttacheds() GetInstanceVolumeAttachedArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceVolumeAttached { return v.VolumeAttacheds }).(GetInstanceVolumeAttachedArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceResultOutput{})
}

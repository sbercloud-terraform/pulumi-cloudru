// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages an EIP resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### EIP with Dedicated Bandwidth
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const eip1 = new sbercloud.vpc.Eip("eip_1", {
 *     publicip: {
 *         type: "5_bgp",
 *     },
 *     bandwidth: {
 *         shareType: "PER",
 *         name: "test",
 *         size: 10,
 *         chargeMode: "traffic",
 *     },
 * });
 * ```
 *
 * ### EIP with Shared Bandwidth
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const bandwidth1 = new sbercloud.vpc.Bandwidth("bandwidth_1", {
 *     name: "bandwidth_1",
 *     size: 5,
 * });
 * const eip1 = new sbercloud.vpc.Eip("eip_1", {
 *     publicip: {
 *         type: "5_bgp",
 *     },
 *     bandwidth: {
 *         shareType: "WHOLE",
 *         id: bandwidth1.id,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * EIPs can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Vpc/eip:Eip eip_1 2c7f39f3-702b-48d1-940c-b50384177ee1
 * ```
 */
export class Eip extends pulumi.CustomResource {
    /**
     * Get an existing Eip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EipState, opts?: pulumi.CustomResourceOptions): Eip {
        return new Eip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Vpc/eip:Eip';

    /**
     * Returns true if the given object is an instance of Eip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Eip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Eip.__pulumiType;
    }

    /**
     * The IP address of the eip.
     */
    declare public /*out*/ readonly address: pulumi.Output<string>;
    declare public /*out*/ readonly associateId: pulumi.Output<string>;
    declare public /*out*/ readonly associateType: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "
     * false". Changing this creates a new resource.
     */
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * The bandwidth object.
     */
    declare public readonly bandwidth: pulumi.Output<outputs.Vpc.EipBandwidth>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The enterprise project id of the elastic IP. Changing this
     * creates a new eip.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly instanceId: pulumi.Output<string>;
    declare public /*out*/ readonly instanceType: pulumi.Output<string>;
    /**
     * The IPv6 address of the EIP.
     */
    declare public /*out*/ readonly ipv6Address: pulumi.Output<string>;
    /**
     * The name of the EIP.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * The port ID which the EIP associated with.
     */
    declare public /*out*/ readonly portId: pulumi.Output<string>;
    /**
     * The private IP address bound to the EIP.
     */
    declare public /*out*/ readonly privateIp: pulumi.Output<string>;
    /**
     * The elastic IP address object.
     */
    declare public readonly publicip: pulumi.Output<outputs.Vpc.EipPublicip>;
    /**
     * The region in which to create the eip resource. If omitted, the provider-level
     * region will be used. Changing this creates a new eip resource.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The status of eip.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the elastic IP.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a Eip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EipArgs | EipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EipState | undefined;
            resourceInputs["address"] = state?.address;
            resourceInputs["associateId"] = state?.associateId;
            resourceInputs["associateType"] = state?.associateType;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["bandwidth"] = state?.bandwidth;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["instanceType"] = state?.instanceType;
            resourceInputs["ipv6Address"] = state?.ipv6Address;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["portId"] = state?.portId;
            resourceInputs["privateIp"] = state?.privateIp;
            resourceInputs["publicip"] = state?.publicip;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as EipArgs | undefined;
            if (args?.bandwidth === undefined && !opts.urn) {
                throw new Error("Missing required property 'bandwidth'");
            }
            if (args?.publicip === undefined && !opts.urn) {
                throw new Error("Missing required property 'publicip'");
            }
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["bandwidth"] = args?.bandwidth;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["publicip"] = args?.publicip;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["address"] = undefined /*out*/;
            resourceInputs["associateId"] = undefined /*out*/;
            resourceInputs["associateType"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["instanceType"] = undefined /*out*/;
            resourceInputs["ipv6Address"] = undefined /*out*/;
            resourceInputs["portId"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Eip.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Eip resources.
 */
export interface EipState {
    /**
     * The IP address of the eip.
     */
    address?: pulumi.Input<string>;
    associateId?: pulumi.Input<string>;
    associateType?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "
     * false". Changing this creates a new resource.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * The bandwidth object.
     */
    bandwidth?: pulumi.Input<inputs.Vpc.EipBandwidth>;
    chargingMode?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    /**
     * The enterprise project id of the elastic IP. Changing this
     * creates a new eip.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    instanceId?: pulumi.Input<string>;
    instanceType?: pulumi.Input<string>;
    /**
     * The IPv6 address of the EIP.
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * The name of the EIP.
     */
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The port ID which the EIP associated with.
     */
    portId?: pulumi.Input<string>;
    /**
     * The private IP address bound to the EIP.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * The elastic IP address object.
     */
    publicip?: pulumi.Input<inputs.Vpc.EipPublicip>;
    /**
     * The region in which to create the eip resource. If omitted, the provider-level
     * region will be used. Changing this creates a new eip resource.
     */
    region?: pulumi.Input<string>;
    /**
     * The status of eip.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the elastic IP.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Eip resource.
 */
export interface EipArgs {
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    /**
     * Specifies whether auto renew is enabled. Valid values are "true" and "
     * false". Changing this creates a new resource.
     */
    autoRenew?: pulumi.Input<string>;
    /**
     * The bandwidth object.
     */
    bandwidth: pulumi.Input<inputs.Vpc.EipBandwidth>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The enterprise project id of the elastic IP. Changing this
     * creates a new eip.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The name of the EIP.
     */
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The elastic IP address object.
     */
    publicip: pulumi.Input<inputs.Vpc.EipPublicip>;
    /**
     * The region in which to create the eip resource. If omitted, the provider-level
     * region will be used. Changing this creates a new eip resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the elastic IP.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclRuleArgs, AclRuleState } from "./aclRule";
export type AclRule = import("./aclRule").AclRule;
export const AclRule: typeof import("./aclRule").AclRule = null as any;
utilities.lazyLoad(exports, ["AclRule"], () => require("./aclRule"));

export { AddressGroupArgs, AddressGroupState } from "./addressGroup";
export type AddressGroup = import("./addressGroup").AddressGroup;
export const AddressGroup: typeof import("./addressGroup").AddressGroup = null as any;
utilities.lazyLoad(exports, ["AddressGroup"], () => require("./addressGroup"));

export { AddressGroupMemberArgs, AddressGroupMemberState } from "./addressGroupMember";
export type AddressGroupMember = import("./addressGroupMember").AddressGroupMember;
export const AddressGroupMember: typeof import("./addressGroupMember").AddressGroupMember = null as any;
utilities.lazyLoad(exports, ["AddressGroupMember"], () => require("./addressGroupMember"));

export { AlarmConfigArgs, AlarmConfigState } from "./alarmConfig";
export type AlarmConfig = import("./alarmConfig").AlarmConfig;
export const AlarmConfig: typeof import("./alarmConfig").AlarmConfig = null as any;
utilities.lazyLoad(exports, ["AlarmConfig"], () => require("./alarmConfig"));

export { AntiVirusArgs, AntiVirusState } from "./antiVirus";
export type AntiVirus = import("./antiVirus").AntiVirus;
export const AntiVirus: typeof import("./antiVirus").AntiVirus = null as any;
utilities.lazyLoad(exports, ["AntiVirus"], () => require("./antiVirus"));

export { BlackWhiteListArgs, BlackWhiteListState } from "./blackWhiteList";
export type BlackWhiteList = import("./blackWhiteList").BlackWhiteList;
export const BlackWhiteList: typeof import("./blackWhiteList").BlackWhiteList = null as any;
utilities.lazyLoad(exports, ["BlackWhiteList"], () => require("./blackWhiteList"));

export { CaptureTaskArgs, CaptureTaskState } from "./captureTask";
export type CaptureTask = import("./captureTask").CaptureTask;
export const CaptureTask: typeof import("./captureTask").CaptureTask = null as any;
utilities.lazyLoad(exports, ["CaptureTask"], () => require("./captureTask"));

export { DnsResolutionArgs, DnsResolutionState } from "./dnsResolution";
export type DnsResolution = import("./dnsResolution").DnsResolution;
export const DnsResolution: typeof import("./dnsResolution").DnsResolution = null as any;
utilities.lazyLoad(exports, ["DnsResolution"], () => require("./dnsResolution"));

export { DomainNameGroupArgs, DomainNameGroupState } from "./domainNameGroup";
export type DomainNameGroup = import("./domainNameGroup").DomainNameGroup;
export const DomainNameGroup: typeof import("./domainNameGroup").DomainNameGroup = null as any;
utilities.lazyLoad(exports, ["DomainNameGroup"], () => require("./domainNameGroup"));

export { EipProtectionArgs, EipProtectionState } from "./eipProtection";
export type EipProtection = import("./eipProtection").EipProtection;
export const EipProtection: typeof import("./eipProtection").EipProtection = null as any;
utilities.lazyLoad(exports, ["EipProtection"], () => require("./eipProtection"));

export { FirewallArgs, FirewallState } from "./firewall";
export type Firewall = import("./firewall").Firewall;
export const Firewall: typeof import("./firewall").Firewall = null as any;
utilities.lazyLoad(exports, ["Firewall"], () => require("./firewall"));

export { GetAccessControlLogsArgs, GetAccessControlLogsResult, GetAccessControlLogsOutputArgs } from "./getAccessControlLogs";
export const getAccessControlLogs: typeof import("./getAccessControlLogs").getAccessControlLogs = null as any;
export const getAccessControlLogsOutput: typeof import("./getAccessControlLogs").getAccessControlLogsOutput = null as any;
utilities.lazyLoad(exports, ["getAccessControlLogs","getAccessControlLogsOutput"], () => require("./getAccessControlLogs"));

export { GetAddressGroupMembersArgs, GetAddressGroupMembersResult, GetAddressGroupMembersOutputArgs } from "./getAddressGroupMembers";
export const getAddressGroupMembers: typeof import("./getAddressGroupMembers").getAddressGroupMembers = null as any;
export const getAddressGroupMembersOutput: typeof import("./getAddressGroupMembers").getAddressGroupMembersOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroupMembers","getAddressGroupMembersOutput"], () => require("./getAddressGroupMembers"));

export { GetAddressGroupsArgs, GetAddressGroupsResult, GetAddressGroupsOutputArgs } from "./getAddressGroups";
export const getAddressGroups: typeof import("./getAddressGroups").getAddressGroups = null as any;
export const getAddressGroupsOutput: typeof import("./getAddressGroups").getAddressGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getAddressGroups","getAddressGroupsOutput"], () => require("./getAddressGroups"));

export { GetAttackLogsArgs, GetAttackLogsResult, GetAttackLogsOutputArgs } from "./getAttackLogs";
export const getAttackLogs: typeof import("./getAttackLogs").getAttackLogs = null as any;
export const getAttackLogsOutput: typeof import("./getAttackLogs").getAttackLogsOutput = null as any;
utilities.lazyLoad(exports, ["getAttackLogs","getAttackLogsOutput"], () => require("./getAttackLogs"));

export { GetBlackWhiteListsArgs, GetBlackWhiteListsResult, GetBlackWhiteListsOutputArgs } from "./getBlackWhiteLists";
export const getBlackWhiteLists: typeof import("./getBlackWhiteLists").getBlackWhiteLists = null as any;
export const getBlackWhiteListsOutput: typeof import("./getBlackWhiteLists").getBlackWhiteListsOutput = null as any;
utilities.lazyLoad(exports, ["getBlackWhiteLists","getBlackWhiteListsOutput"], () => require("./getBlackWhiteLists"));

export { GetCaptureTaskResultsArgs, GetCaptureTaskResultsResult, GetCaptureTaskResultsOutputArgs } from "./getCaptureTaskResults";
export const getCaptureTaskResults: typeof import("./getCaptureTaskResults").getCaptureTaskResults = null as any;
export const getCaptureTaskResultsOutput: typeof import("./getCaptureTaskResults").getCaptureTaskResultsOutput = null as any;
utilities.lazyLoad(exports, ["getCaptureTaskResults","getCaptureTaskResultsOutput"], () => require("./getCaptureTaskResults"));

export { GetCaptureTasksArgs, GetCaptureTasksResult, GetCaptureTasksOutputArgs } from "./getCaptureTasks";
export const getCaptureTasks: typeof import("./getCaptureTasks").getCaptureTasks = null as any;
export const getCaptureTasksOutput: typeof import("./getCaptureTasks").getCaptureTasksOutput = null as any;
utilities.lazyLoad(exports, ["getCaptureTasks","getCaptureTasksOutput"], () => require("./getCaptureTasks"));

export { GetDomainNameGroupsArgs, GetDomainNameGroupsResult, GetDomainNameGroupsOutputArgs } from "./getDomainNameGroups";
export const getDomainNameGroups: typeof import("./getDomainNameGroups").getDomainNameGroups = null as any;
export const getDomainNameGroupsOutput: typeof import("./getDomainNameGroups").getDomainNameGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getDomainNameGroups","getDomainNameGroupsOutput"], () => require("./getDomainNameGroups"));

export { GetDomainNameParseIpListArgs, GetDomainNameParseIpListResult, GetDomainNameParseIpListOutputArgs } from "./getDomainNameParseIpList";
export const getDomainNameParseIpList: typeof import("./getDomainNameParseIpList").getDomainNameParseIpList = null as any;
export const getDomainNameParseIpListOutput: typeof import("./getDomainNameParseIpList").getDomainNameParseIpListOutput = null as any;
utilities.lazyLoad(exports, ["getDomainNameParseIpList","getDomainNameParseIpListOutput"], () => require("./getDomainNameParseIpList"));

export { GetFirewallsArgs, GetFirewallsResult, GetFirewallsOutputArgs } from "./getFirewalls";
export const getFirewalls: typeof import("./getFirewalls").getFirewalls = null as any;
export const getFirewallsOutput: typeof import("./getFirewalls").getFirewallsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewalls","getFirewallsOutput"], () => require("./getFirewalls"));

export { GetFlowLogsArgs, GetFlowLogsResult, GetFlowLogsOutputArgs } from "./getFlowLogs";
export const getFlowLogs: typeof import("./getFlowLogs").getFlowLogs = null as any;
export const getFlowLogsOutput: typeof import("./getFlowLogs").getFlowLogsOutput = null as any;
utilities.lazyLoad(exports, ["getFlowLogs","getFlowLogsOutput"], () => require("./getFlowLogs"));

export { GetIpsCustomRulesArgs, GetIpsCustomRulesResult, GetIpsCustomRulesOutputArgs } from "./getIpsCustomRules";
export const getIpsCustomRules: typeof import("./getIpsCustomRules").getIpsCustomRules = null as any;
export const getIpsCustomRulesOutput: typeof import("./getIpsCustomRules").getIpsCustomRulesOutput = null as any;
utilities.lazyLoad(exports, ["getIpsCustomRules","getIpsCustomRulesOutput"], () => require("./getIpsCustomRules"));

export { GetIpsRuleDetailsArgs, GetIpsRuleDetailsResult, GetIpsRuleDetailsOutputArgs } from "./getIpsRuleDetails";
export const getIpsRuleDetails: typeof import("./getIpsRuleDetails").getIpsRuleDetails = null as any;
export const getIpsRuleDetailsOutput: typeof import("./getIpsRuleDetails").getIpsRuleDetailsOutput = null as any;
utilities.lazyLoad(exports, ["getIpsRuleDetails","getIpsRuleDetailsOutput"], () => require("./getIpsRuleDetails"));

export { GetIpsRulesArgs, GetIpsRulesResult, GetIpsRulesOutputArgs } from "./getIpsRules";
export const getIpsRules: typeof import("./getIpsRules").getIpsRules = null as any;
export const getIpsRulesOutput: typeof import("./getIpsRules").getIpsRulesOutput = null as any;
utilities.lazyLoad(exports, ["getIpsRules","getIpsRulesOutput"], () => require("./getIpsRules"));

export { GetProtectionRulesArgs, GetProtectionRulesResult, GetProtectionRulesOutputArgs } from "./getProtectionRules";
export const getProtectionRules: typeof import("./getProtectionRules").getProtectionRules = null as any;
export const getProtectionRulesOutput: typeof import("./getProtectionRules").getProtectionRulesOutput = null as any;
utilities.lazyLoad(exports, ["getProtectionRules","getProtectionRulesOutput"], () => require("./getProtectionRules"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetResourceTagsArgs, GetResourceTagsResult, GetResourceTagsOutputArgs } from "./getResourceTags";
export const getResourceTags: typeof import("./getResourceTags").getResourceTags = null as any;
export const getResourceTagsOutput: typeof import("./getResourceTags").getResourceTagsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceTags","getResourceTagsOutput"], () => require("./getResourceTags"));

export { GetServiceGroupMembersArgs, GetServiceGroupMembersResult, GetServiceGroupMembersOutputArgs } from "./getServiceGroupMembers";
export const getServiceGroupMembers: typeof import("./getServiceGroupMembers").getServiceGroupMembers = null as any;
export const getServiceGroupMembersOutput: typeof import("./getServiceGroupMembers").getServiceGroupMembersOutput = null as any;
utilities.lazyLoad(exports, ["getServiceGroupMembers","getServiceGroupMembersOutput"], () => require("./getServiceGroupMembers"));

export { GetServiceGroupsArgs, GetServiceGroupsResult, GetServiceGroupsOutputArgs } from "./getServiceGroups";
export const getServiceGroups: typeof import("./getServiceGroups").getServiceGroups = null as any;
export const getServiceGroupsOutput: typeof import("./getServiceGroups").getServiceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getServiceGroups","getServiceGroupsOutput"], () => require("./getServiceGroups"));

export { GetTagsArgs, GetTagsResult, GetTagsOutputArgs } from "./getTags";
export const getTags: typeof import("./getTags").getTags = null as any;
export const getTagsOutput: typeof import("./getTags").getTagsOutput = null as any;
utilities.lazyLoad(exports, ["getTags","getTagsOutput"], () => require("./getTags"));

export { IpsRuleModeChangeArgs, IpsRuleModeChangeState } from "./ipsRuleModeChange";
export type IpsRuleModeChange = import("./ipsRuleModeChange").IpsRuleModeChange;
export const IpsRuleModeChange: typeof import("./ipsRuleModeChange").IpsRuleModeChange = null as any;
utilities.lazyLoad(exports, ["IpsRuleModeChange"], () => require("./ipsRuleModeChange"));

export { LtsLogArgs, LtsLogState } from "./ltsLog";
export type LtsLog = import("./ltsLog").LtsLog;
export const LtsLog: typeof import("./ltsLog").LtsLog = null as any;
utilities.lazyLoad(exports, ["LtsLog"], () => require("./ltsLog"));

export { ServiceGroupArgs, ServiceGroupState } from "./serviceGroup";
export type ServiceGroup = import("./serviceGroup").ServiceGroup;
export const ServiceGroup: typeof import("./serviceGroup").ServiceGroup = null as any;
utilities.lazyLoad(exports, ["ServiceGroup"], () => require("./serviceGroup"));

export { ServiceGroupMemberArgs, ServiceGroupMemberState } from "./serviceGroupMember";
export type ServiceGroupMember = import("./serviceGroupMember").ServiceGroupMember;
export const ServiceGroupMember: typeof import("./serviceGroupMember").ServiceGroupMember = null as any;
utilities.lazyLoad(exports, ["ServiceGroupMember"], () => require("./serviceGroupMember"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sbercloud:Cfw/aclRule:AclRule":
                return new AclRule(name, <any>undefined, { urn })
            case "sbercloud:Cfw/addressGroup:AddressGroup":
                return new AddressGroup(name, <any>undefined, { urn })
            case "sbercloud:Cfw/addressGroupMember:AddressGroupMember":
                return new AddressGroupMember(name, <any>undefined, { urn })
            case "sbercloud:Cfw/alarmConfig:AlarmConfig":
                return new AlarmConfig(name, <any>undefined, { urn })
            case "sbercloud:Cfw/antiVirus:AntiVirus":
                return new AntiVirus(name, <any>undefined, { urn })
            case "sbercloud:Cfw/blackWhiteList:BlackWhiteList":
                return new BlackWhiteList(name, <any>undefined, { urn })
            case "sbercloud:Cfw/captureTask:CaptureTask":
                return new CaptureTask(name, <any>undefined, { urn })
            case "sbercloud:Cfw/dnsResolution:DnsResolution":
                return new DnsResolution(name, <any>undefined, { urn })
            case "sbercloud:Cfw/domainNameGroup:DomainNameGroup":
                return new DomainNameGroup(name, <any>undefined, { urn })
            case "sbercloud:Cfw/eipProtection:EipProtection":
                return new EipProtection(name, <any>undefined, { urn })
            case "sbercloud:Cfw/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "sbercloud:Cfw/ipsRuleModeChange:IpsRuleModeChange":
                return new IpsRuleModeChange(name, <any>undefined, { urn })
            case "sbercloud:Cfw/ltsLog:LtsLog":
                return new LtsLog(name, <any>undefined, { urn })
            case "sbercloud:Cfw/serviceGroup:ServiceGroup":
                return new ServiceGroup(name, <any>undefined, { urn })
            case "sbercloud:Cfw/serviceGroupMember:ServiceGroupMember":
                return new ServiceGroupMember(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/aclRule", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/addressGroup", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/addressGroupMember", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/alarmConfig", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/antiVirus", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/blackWhiteList", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/captureTask", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/dnsResolution", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/domainNameGroup", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/eipProtection", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/firewall", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/ipsRuleModeChange", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/ltsLog", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/serviceGroup", _module)
pulumi.runtime.registerResourceModule("sbercloud", "Cfw/serviceGroupMember", _module)

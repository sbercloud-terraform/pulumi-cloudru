// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class FileSystem extends pulumi.CustomResource {
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileSystemState, opts?: pulumi.CustomResourceOptions): FileSystem {
        return new FileSystem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Sfs/fileSystem:FileSystem';

    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileSystem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }

    declare public readonly accessLevel: pulumi.Output<string>;
    declare public /*out*/ readonly accessRuleStatus: pulumi.Output<string>;
    declare public /*out*/ readonly accessRules: pulumi.Output<outputs.Sfs.FileSystemAccessRule[]>;
    declare public readonly accessTo: pulumi.Output<string | undefined>;
    declare public readonly accessType: pulumi.Output<string>;
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public /*out*/ readonly exportLocation: pulumi.Output<string>;
    declare public readonly isPublic: pulumi.Output<boolean | undefined>;
    declare public readonly metadata: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly shareAccessId: pulumi.Output<string>;
    declare public readonly shareProto: pulumi.Output<string | undefined>;
    declare public readonly size: pulumi.Output<number>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a FileSystem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileSystemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileSystemArgs | FileSystemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileSystemState | undefined;
            resourceInputs["accessLevel"] = state?.accessLevel;
            resourceInputs["accessRuleStatus"] = state?.accessRuleStatus;
            resourceInputs["accessRules"] = state?.accessRules;
            resourceInputs["accessTo"] = state?.accessTo;
            resourceInputs["accessType"] = state?.accessType;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["description"] = state?.description;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["exportLocation"] = state?.exportLocation;
            resourceInputs["isPublic"] = state?.isPublic;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["shareAccessId"] = state?.shareAccessId;
            resourceInputs["shareProto"] = state?.shareProto;
            resourceInputs["size"] = state?.size;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as FileSystemArgs | undefined;
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            resourceInputs["accessLevel"] = args?.accessLevel;
            resourceInputs["accessTo"] = args?.accessTo;
            resourceInputs["accessType"] = args?.accessType;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["description"] = args?.description;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["isPublic"] = args?.isPublic;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["shareProto"] = args?.shareProto;
            resourceInputs["size"] = args?.size;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["accessRuleStatus"] = undefined /*out*/;
            resourceInputs["accessRules"] = undefined /*out*/;
            resourceInputs["exportLocation"] = undefined /*out*/;
            resourceInputs["shareAccessId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileSystem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileSystem resources.
 */
export interface FileSystemState {
    accessLevel?: pulumi.Input<string>;
    accessRuleStatus?: pulumi.Input<string>;
    accessRules?: pulumi.Input<pulumi.Input<inputs.Sfs.FileSystemAccessRule>[]>;
    accessTo?: pulumi.Input<string>;
    accessType?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    exportLocation?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareAccessId?: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a FileSystem resource.
 */
export interface FileSystemArgs {
    accessLevel?: pulumi.Input<string>;
    accessTo?: pulumi.Input<string>;
    accessType?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareProto?: pulumi.Input<string>;
    size: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

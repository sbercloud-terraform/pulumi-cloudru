// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages RDS Mysql database resource within SberCloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/rds"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			_, err := rds.NewMysqlDatabase(ctx, "test", &rds.MysqlDatabaseArgs{
//				InstanceId:   pulumi.Any(instanceId),
//				Name:         pulumi.String("test"),
//				CharacterSet: pulumi.String("utf8"),
//				Description:  pulumi.String("test database"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RDS database can be imported using the `instance id` and `name` separated by slash, e.g.
//
// bash
//
// ```sh
// $ pulumi import sbercloud:Rds/mysqlDatabase:MysqlDatabase database_1 <instance_id>/<name>
// ```
type MysqlDatabase struct {
	pulumi.CustomResourceState

	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet pulumi.StringOutput `pulumi:"characterSet"`
	// Specifies the database description. The value can contain `0` to `512` characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the database name. The database name contains `1` to `64`
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed `10`. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
}

// NewMysqlDatabase registers a new resource with the given unique name, arguments, and options.
func NewMysqlDatabase(ctx *pulumi.Context,
	name string, args *MysqlDatabaseArgs, opts ...pulumi.ResourceOption) (*MysqlDatabase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CharacterSet == nil {
		return nil, errors.New("invalid value for required argument 'CharacterSet'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MysqlDatabase
	err := ctx.RegisterResource("sbercloud:Rds/mysqlDatabase:MysqlDatabase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlDatabase gets an existing MysqlDatabase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlDatabaseState, opts ...pulumi.ResourceOption) (*MysqlDatabase, error) {
	var resource MysqlDatabase
	err := ctx.ReadResource("sbercloud:Rds/mysqlDatabase:MysqlDatabase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlDatabase resources.
type mysqlDatabaseState struct {
	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet *string `pulumi:"characterSet"`
	// Specifies the database description. The value can contain `0` to `512` characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description *string `pulumi:"description"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the database name. The database name contains `1` to `64`
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed `10`. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name *string `pulumi:"name"`
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

type MysqlDatabaseState struct {
	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet pulumi.StringPtrInput
	// Specifies the database description. The value can contain `0` to `512` characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description pulumi.StringPtrInput
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringPtrInput
	// Specifies the database name. The database name contains `1` to `64`
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed `10`. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name pulumi.StringPtrInput
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (MysqlDatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlDatabaseState)(nil)).Elem()
}

type mysqlDatabaseArgs struct {
	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet string `pulumi:"characterSet"`
	// Specifies the database description. The value can contain `0` to `512` characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description *string `pulumi:"description"`
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the database name. The database name contains `1` to `64`
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed `10`. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name *string `pulumi:"name"`
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
}

// The set of arguments for constructing a MysqlDatabase resource.
type MysqlDatabaseArgs struct {
	// Specifies the character set used by the database, For example **utf8**,
	// **gbk**, **ascii**, etc. Changing this will create a new resource.
	CharacterSet pulumi.StringInput
	// Specifies the database description. The value can contain `0` to `512` characters.
	// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
	// or **8.0.21.4**.
	Description pulumi.StringPtrInput
	// Specifies the RDS instance ID. Changing this will create a new resource.
	InstanceId pulumi.StringInput
	// Specifies the database name. The database name contains `1` to `64`
	// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
	// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed `10`. RDS for **MySQL 8.0** does not
	// support dollar signs ($). Changing this will create a new resource.
	Name pulumi.StringPtrInput
	// The region in which to create the RDS database resource. If omitted, the
	// provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
}

func (MysqlDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlDatabaseArgs)(nil)).Elem()
}

type MysqlDatabaseInput interface {
	pulumi.Input

	ToMysqlDatabaseOutput() MysqlDatabaseOutput
	ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput
}

func (*MysqlDatabase) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDatabase)(nil)).Elem()
}

func (i *MysqlDatabase) ToMysqlDatabaseOutput() MysqlDatabaseOutput {
	return i.ToMysqlDatabaseOutputWithContext(context.Background())
}

func (i *MysqlDatabase) ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseOutput)
}

// MysqlDatabaseArrayInput is an input type that accepts MysqlDatabaseArray and MysqlDatabaseArrayOutput values.
// You can construct a concrete instance of `MysqlDatabaseArrayInput` via:
//
//	MysqlDatabaseArray{ MysqlDatabaseArgs{...} }
type MysqlDatabaseArrayInput interface {
	pulumi.Input

	ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput
	ToMysqlDatabaseArrayOutputWithContext(context.Context) MysqlDatabaseArrayOutput
}

type MysqlDatabaseArray []MysqlDatabaseInput

func (MysqlDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlDatabase)(nil)).Elem()
}

func (i MysqlDatabaseArray) ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput {
	return i.ToMysqlDatabaseArrayOutputWithContext(context.Background())
}

func (i MysqlDatabaseArray) ToMysqlDatabaseArrayOutputWithContext(ctx context.Context) MysqlDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseArrayOutput)
}

// MysqlDatabaseMapInput is an input type that accepts MysqlDatabaseMap and MysqlDatabaseMapOutput values.
// You can construct a concrete instance of `MysqlDatabaseMapInput` via:
//
//	MysqlDatabaseMap{ "key": MysqlDatabaseArgs{...} }
type MysqlDatabaseMapInput interface {
	pulumi.Input

	ToMysqlDatabaseMapOutput() MysqlDatabaseMapOutput
	ToMysqlDatabaseMapOutputWithContext(context.Context) MysqlDatabaseMapOutput
}

type MysqlDatabaseMap map[string]MysqlDatabaseInput

func (MysqlDatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlDatabase)(nil)).Elem()
}

func (i MysqlDatabaseMap) ToMysqlDatabaseMapOutput() MysqlDatabaseMapOutput {
	return i.ToMysqlDatabaseMapOutputWithContext(context.Background())
}

func (i MysqlDatabaseMap) ToMysqlDatabaseMapOutputWithContext(ctx context.Context) MysqlDatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlDatabaseMapOutput)
}

type MysqlDatabaseOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlDatabase)(nil)).Elem()
}

func (o MysqlDatabaseOutput) ToMysqlDatabaseOutput() MysqlDatabaseOutput {
	return o
}

func (o MysqlDatabaseOutput) ToMysqlDatabaseOutputWithContext(ctx context.Context) MysqlDatabaseOutput {
	return o
}

// Specifies the character set used by the database, For example **utf8**,
// **gbk**, **ascii**, etc. Changing this will create a new resource.
func (o MysqlDatabaseOutput) CharacterSet() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlDatabase) pulumi.StringOutput { return v.CharacterSet }).(pulumi.StringOutput)
}

// Specifies the database description. The value can contain `0` to `512` characters.
// This parameter takes effect only for DB instances whose kernel versions are at least **5.6.51.3**, **5.7.33.1**,
// or **8.0.21.4**.
func (o MysqlDatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlDatabase) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the RDS instance ID. Changing this will create a new resource.
func (o MysqlDatabaseOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlDatabase) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the database name. The database name contains `1` to `64`
// characters. The name can only consist of lowercase letters, digits, hyphens (-), underscores (_) and dollar signs
// ($). The total number of hyphens (-) and dollar signs ($) cannot exceed `10`. RDS for **MySQL 8.0** does not
// support dollar signs ($). Changing this will create a new resource.
func (o MysqlDatabaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlDatabase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region in which to create the RDS database resource. If omitted, the
// provider-level region will be used. Changing this creates a new resource.
func (o MysqlDatabaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlDatabase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type MysqlDatabaseArrayOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlDatabase)(nil)).Elem()
}

func (o MysqlDatabaseArrayOutput) ToMysqlDatabaseArrayOutput() MysqlDatabaseArrayOutput {
	return o
}

func (o MysqlDatabaseArrayOutput) ToMysqlDatabaseArrayOutputWithContext(ctx context.Context) MysqlDatabaseArrayOutput {
	return o
}

func (o MysqlDatabaseArrayOutput) Index(i pulumi.IntInput) MysqlDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlDatabase {
		return vs[0].([]*MysqlDatabase)[vs[1].(int)]
	}).(MysqlDatabaseOutput)
}

type MysqlDatabaseMapOutput struct{ *pulumi.OutputState }

func (MysqlDatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlDatabase)(nil)).Elem()
}

func (o MysqlDatabaseMapOutput) ToMysqlDatabaseMapOutput() MysqlDatabaseMapOutput {
	return o
}

func (o MysqlDatabaseMapOutput) ToMysqlDatabaseMapOutputWithContext(ctx context.Context) MysqlDatabaseMapOutput {
	return o
}

func (o MysqlDatabaseMapOutput) MapIndex(k pulumi.StringInput) MysqlDatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlDatabase {
		return vs[0].(map[string]*MysqlDatabase)[vs[1].(string)]
	}).(MysqlDatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseInput)(nil)).Elem(), &MysqlDatabase{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseArrayInput)(nil)).Elem(), MysqlDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlDatabaseMapInput)(nil)).Elem(), MysqlDatabaseMap{})
	pulumi.RegisterOutputType(MysqlDatabaseOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseArrayOutput{})
	pulumi.RegisterOutputType(MysqlDatabaseMapOutput{})
}

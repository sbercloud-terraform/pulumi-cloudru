// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ElbMonitor extends pulumi.CustomResource {
    /**
     * Get an existing ElbMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElbMonitorState, opts?: pulumi.CustomResourceOptions): ElbMonitor {
        return new ElbMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:index/elbMonitor:ElbMonitor';

    /**
     * Returns true if the given object is an instance of ElbMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElbMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElbMonitor.__pulumiType;
    }

    declare public readonly domainName: pulumi.Output<string>;
    declare public readonly interval: pulumi.Output<number>;
    declare public readonly maxRetries: pulumi.Output<number>;
    declare public readonly poolId: pulumi.Output<string>;
    declare public readonly port: pulumi.Output<number>;
    declare public readonly protocol: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly statusCode: pulumi.Output<string>;
    declare public readonly timeout: pulumi.Output<number>;
    declare public readonly urlPath: pulumi.Output<string>;

    /**
     * Create a ElbMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElbMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElbMonitorArgs | ElbMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElbMonitorState | undefined;
            resourceInputs["domainName"] = state?.domainName;
            resourceInputs["interval"] = state?.interval;
            resourceInputs["maxRetries"] = state?.maxRetries;
            resourceInputs["poolId"] = state?.poolId;
            resourceInputs["port"] = state?.port;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["region"] = state?.region;
            resourceInputs["statusCode"] = state?.statusCode;
            resourceInputs["timeout"] = state?.timeout;
            resourceInputs["urlPath"] = state?.urlPath;
        } else {
            const args = argsOrState as ElbMonitorArgs | undefined;
            if (args?.interval === undefined && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if (args?.maxRetries === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxRetries'");
            }
            if (args?.poolId === undefined && !opts.urn) {
                throw new Error("Missing required property 'poolId'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if (args?.timeout === undefined && !opts.urn) {
                throw new Error("Missing required property 'timeout'");
            }
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["interval"] = args?.interval;
            resourceInputs["maxRetries"] = args?.maxRetries;
            resourceInputs["poolId"] = args?.poolId;
            resourceInputs["port"] = args?.port;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["region"] = args?.region;
            resourceInputs["statusCode"] = args?.statusCode;
            resourceInputs["timeout"] = args?.timeout;
            resourceInputs["urlPath"] = args?.urlPath;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElbMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElbMonitor resources.
 */
export interface ElbMonitorState {
    domainName?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    maxRetries?: pulumi.Input<number>;
    poolId?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
    timeout?: pulumi.Input<number>;
    urlPath?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElbMonitor resource.
 */
export interface ElbMonitorArgs {
    domainName?: pulumi.Input<string>;
    interval: pulumi.Input<number>;
    maxRetries: pulumi.Input<number>;
    poolId: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    statusCode?: pulumi.Input<string>;
    timeout: pulumi.Input<number>;
    urlPath?: pulumi.Input<string>;
}

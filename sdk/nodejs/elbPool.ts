// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages an ELB pool resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const pool1 = new sbercloud.ElbPool("pool_1", {
 *     protocol: "HTTP",
 *     lbMethod: "ROUND_ROBIN",
 *     listenerId: "{{ listener_id }}",
 *     persistence: {
 *         type: "HTTP_COOKIE",
 *         cookieName: "testCookie",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ELB pool can be imported using the pool ID, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:index/elbPool:ElbPool pool_1 5c20fdad-7288-11eb-b817-0255ac10158b
 * ```
 */
export class ElbPool extends pulumi.CustomResource {
    /**
     * Get an existing ElbPool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElbPoolState, opts?: pulumi.CustomResourceOptions): ElbPool {
        return new ElbPool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/elbPool:ElbPool';

    /**
     * Returns true if the given object is an instance of ElbPool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElbPool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElbPool.__pulumiType;
    }

    declare public readonly anyPortEnable: pulumi.Output<boolean>;
    declare public readonly connectionDrainEnabled: pulumi.Output<boolean>;
    declare public readonly connectionDrainTimeout: pulumi.Output<number>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly deletionProtectionEnable: pulumi.Output<boolean | undefined>;
    /**
     * Human-readable description for the pool.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly ipVersion: pulumi.Output<string>;
    /**
     * The load balancing algorithm to distribute traffic to the pool's members. Must be one
     * of ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP.
     */
    declare public readonly lbMethod: pulumi.Output<string>;
    /**
     * The Listener on which the members of the pool will be associated with.
     * Changing this creates a new pool. Note:  Exactly one of LoadbalancerID or ListenerID must be provided.
     */
    declare public readonly listenerId: pulumi.Output<string>;
    /**
     * The load balancer on which to provision this pool. Changing this
     * creates a new pool. Note:  Exactly one of LoadbalancerID or ListenerID must be provided.
     */
    declare public readonly loadbalancerId: pulumi.Output<string>;
    declare public readonly minimumHealthyMemberCount: pulumi.Output<number>;
    declare public /*out*/ readonly monitorId: pulumi.Output<string>;
    /**
     * Human-readable name for the pool.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Omit this field to prevent session persistence. Indicates whether
     * connections in the same session will be processed by the same Pool member or not. Changing this creates a new pool.
     */
    declare public readonly persistence: pulumi.Output<outputs.ElbPoolPersistence | undefined>;
    declare public readonly protectionReason: pulumi.Output<string | undefined>;
    declare public readonly protectionStatus: pulumi.Output<string>;
    /**
     * The protocol - can either be TCP, UDP, HTTP, HTTPS or QUIC.
     *
     * + When the protocol used by the listener is UDP, the protocol of the backend pool must be UDP or QUIC.
     * + When the protocol used by the listener is TCP, the protocol of the backend pool must be TCP.
     * + When the protocol used by the listener is HTTP, the protocol of the backend pool must be HTTP.
     * + When the protocol used by the listener is HTTPS, the protocol of the backend pool must be HTTPS.
     * + When the protocol used by the listener is TERMINATED_HTTPS, the protocol of the backend pool must be HTTP.
     *
     * Changing this creates a new pool.
     */
    declare public readonly protocol: pulumi.Output<string>;
    declare public readonly publicBorderGroup: pulumi.Output<string>;
    /**
     * The region in which to create the ELB pool resource. If omitted, the the
     * provider-level region will be used. Changing this creates a new pool.
     */
    declare public readonly region: pulumi.Output<string>;
    declare public readonly slowStartDuration: pulumi.Output<number>;
    declare public readonly slowStartEnabled: pulumi.Output<boolean>;
    declare public readonly type: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a ElbPool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElbPoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElbPoolArgs | ElbPoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElbPoolState | undefined;
            resourceInputs["anyPortEnable"] = state?.anyPortEnable;
            resourceInputs["connectionDrainEnabled"] = state?.connectionDrainEnabled;
            resourceInputs["connectionDrainTimeout"] = state?.connectionDrainTimeout;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deletionProtectionEnable"] = state?.deletionProtectionEnable;
            resourceInputs["description"] = state?.description;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["ipVersion"] = state?.ipVersion;
            resourceInputs["lbMethod"] = state?.lbMethod;
            resourceInputs["listenerId"] = state?.listenerId;
            resourceInputs["loadbalancerId"] = state?.loadbalancerId;
            resourceInputs["minimumHealthyMemberCount"] = state?.minimumHealthyMemberCount;
            resourceInputs["monitorId"] = state?.monitorId;
            resourceInputs["name"] = state?.name;
            resourceInputs["persistence"] = state?.persistence;
            resourceInputs["protectionReason"] = state?.protectionReason;
            resourceInputs["protectionStatus"] = state?.protectionStatus;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["publicBorderGroup"] = state?.publicBorderGroup;
            resourceInputs["region"] = state?.region;
            resourceInputs["slowStartDuration"] = state?.slowStartDuration;
            resourceInputs["slowStartEnabled"] = state?.slowStartEnabled;
            resourceInputs["type"] = state?.type;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ElbPoolArgs | undefined;
            if (args?.lbMethod === undefined && !opts.urn) {
                throw new Error("Missing required property 'lbMethod'");
            }
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["anyPortEnable"] = args?.anyPortEnable;
            resourceInputs["connectionDrainEnabled"] = args?.connectionDrainEnabled;
            resourceInputs["connectionDrainTimeout"] = args?.connectionDrainTimeout;
            resourceInputs["deletionProtectionEnable"] = args?.deletionProtectionEnable;
            resourceInputs["description"] = args?.description;
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["ipVersion"] = args?.ipVersion;
            resourceInputs["lbMethod"] = args?.lbMethod;
            resourceInputs["listenerId"] = args?.listenerId;
            resourceInputs["loadbalancerId"] = args?.loadbalancerId;
            resourceInputs["minimumHealthyMemberCount"] = args?.minimumHealthyMemberCount;
            resourceInputs["name"] = args?.name;
            resourceInputs["persistence"] = args?.persistence;
            resourceInputs["protectionReason"] = args?.protectionReason;
            resourceInputs["protectionStatus"] = args?.protectionStatus;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["publicBorderGroup"] = args?.publicBorderGroup;
            resourceInputs["region"] = args?.region;
            resourceInputs["slowStartDuration"] = args?.slowStartDuration;
            resourceInputs["slowStartEnabled"] = args?.slowStartEnabled;
            resourceInputs["type"] = args?.type;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enterpriseProjectId"] = undefined /*out*/;
            resourceInputs["monitorId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElbPool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElbPool resources.
 */
export interface ElbPoolState {
    anyPortEnable?: pulumi.Input<boolean>;
    connectionDrainEnabled?: pulumi.Input<boolean>;
    connectionDrainTimeout?: pulumi.Input<number>;
    createdAt?: pulumi.Input<string>;
    deletionProtectionEnable?: pulumi.Input<boolean>;
    /**
     * Human-readable description for the pool.
     */
    description?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    /**
     * The load balancing algorithm to distribute traffic to the pool's members. Must be one
     * of ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP.
     */
    lbMethod?: pulumi.Input<string>;
    /**
     * The Listener on which the members of the pool will be associated with.
     * Changing this creates a new pool. Note:  Exactly one of LoadbalancerID or ListenerID must be provided.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The load balancer on which to provision this pool. Changing this
     * creates a new pool. Note:  Exactly one of LoadbalancerID or ListenerID must be provided.
     */
    loadbalancerId?: pulumi.Input<string>;
    minimumHealthyMemberCount?: pulumi.Input<number>;
    monitorId?: pulumi.Input<string>;
    /**
     * Human-readable name for the pool.
     */
    name?: pulumi.Input<string>;
    /**
     * Omit this field to prevent session persistence. Indicates whether
     * connections in the same session will be processed by the same Pool member or not. Changing this creates a new pool.
     */
    persistence?: pulumi.Input<inputs.ElbPoolPersistence>;
    protectionReason?: pulumi.Input<string>;
    protectionStatus?: pulumi.Input<string>;
    /**
     * The protocol - can either be TCP, UDP, HTTP, HTTPS or QUIC.
     *
     * + When the protocol used by the listener is UDP, the protocol of the backend pool must be UDP or QUIC.
     * + When the protocol used by the listener is TCP, the protocol of the backend pool must be TCP.
     * + When the protocol used by the listener is HTTP, the protocol of the backend pool must be HTTP.
     * + When the protocol used by the listener is HTTPS, the protocol of the backend pool must be HTTPS.
     * + When the protocol used by the listener is TERMINATED_HTTPS, the protocol of the backend pool must be HTTP.
     *
     * Changing this creates a new pool.
     */
    protocol?: pulumi.Input<string>;
    publicBorderGroup?: pulumi.Input<string>;
    /**
     * The region in which to create the ELB pool resource. If omitted, the the
     * provider-level region will be used. Changing this creates a new pool.
     */
    region?: pulumi.Input<string>;
    slowStartDuration?: pulumi.Input<number>;
    slowStartEnabled?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElbPool resource.
 */
export interface ElbPoolArgs {
    anyPortEnable?: pulumi.Input<boolean>;
    connectionDrainEnabled?: pulumi.Input<boolean>;
    connectionDrainTimeout?: pulumi.Input<number>;
    deletionProtectionEnable?: pulumi.Input<boolean>;
    /**
     * Human-readable description for the pool.
     */
    description?: pulumi.Input<string>;
    enableForceNew?: pulumi.Input<string>;
    ipVersion?: pulumi.Input<string>;
    /**
     * The load balancing algorithm to distribute traffic to the pool's members. Must be one
     * of ROUND_ROBIN, LEAST_CONNECTIONS, or SOURCE_IP.
     */
    lbMethod: pulumi.Input<string>;
    /**
     * The Listener on which the members of the pool will be associated with.
     * Changing this creates a new pool. Note:  Exactly one of LoadbalancerID or ListenerID must be provided.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The load balancer on which to provision this pool. Changing this
     * creates a new pool. Note:  Exactly one of LoadbalancerID or ListenerID must be provided.
     */
    loadbalancerId?: pulumi.Input<string>;
    minimumHealthyMemberCount?: pulumi.Input<number>;
    /**
     * Human-readable name for the pool.
     */
    name?: pulumi.Input<string>;
    /**
     * Omit this field to prevent session persistence. Indicates whether
     * connections in the same session will be processed by the same Pool member or not. Changing this creates a new pool.
     */
    persistence?: pulumi.Input<inputs.ElbPoolPersistence>;
    protectionReason?: pulumi.Input<string>;
    protectionStatus?: pulumi.Input<string>;
    /**
     * The protocol - can either be TCP, UDP, HTTP, HTTPS or QUIC.
     *
     * + When the protocol used by the listener is UDP, the protocol of the backend pool must be UDP or QUIC.
     * + When the protocol used by the listener is TCP, the protocol of the backend pool must be TCP.
     * + When the protocol used by the listener is HTTP, the protocol of the backend pool must be HTTP.
     * + When the protocol used by the listener is HTTPS, the protocol of the backend pool must be HTTPS.
     * + When the protocol used by the listener is TERMINATED_HTTPS, the protocol of the backend pool must be HTTP.
     *
     * Changing this creates a new pool.
     */
    protocol: pulumi.Input<string>;
    publicBorderGroup?: pulumi.Input<string>;
    /**
     * The region in which to create the ELB pool resource. If omitted, the the
     * provider-level region will be used. Changing this creates a new pool.
     */
    region?: pulumi.Input<string>;
    slowStartDuration?: pulumi.Input<number>;
    slowStartEnabled?: pulumi.Input<boolean>;
    type?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

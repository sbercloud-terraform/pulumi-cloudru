# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPgPluginsResult',
    'AwaitableGetPgPluginsResult',
    'get_pg_plugins',
    'get_pg_plugins_output',
]

@pulumi.output_type
class GetPgPluginsResult:
    """
    A collection of values returned by getPgPlugins.
    """
    def __init__(__self__, created=None, database_name=None, id=None, instance_id=None, name=None, plugins=None, region=None, version=None):
        if created and not isinstance(created, bool):
            raise TypeError("Expected argument 'created' to be a bool")
        pulumi.set(__self__, "created", created)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if plugins and not isinstance(plugins, list):
            raise TypeError("Expected argument 'plugins' to be a list")
        pulumi.set(__self__, "plugins", plugins)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def created(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "created")

    @_builtins.property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> _builtins.str:
        return pulumi.get(self, "database_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def plugins(self) -> Sequence['outputs.GetPgPluginsPluginResult']:
        return pulumi.get(self, "plugins")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "version")


class AwaitableGetPgPluginsResult(GetPgPluginsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPgPluginsResult(
            created=self.created,
            database_name=self.database_name,
            id=self.id,
            instance_id=self.instance_id,
            name=self.name,
            plugins=self.plugins,
            region=self.region,
            version=self.version)


def get_pg_plugins(created: Optional[_builtins.bool] = None,
                   database_name: Optional[_builtins.str] = None,
                   instance_id: Optional[_builtins.str] = None,
                   name: Optional[_builtins.str] = None,
                   region: Optional[_builtins.str] = None,
                   version: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPgPluginsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['created'] = created
    __args__['databaseName'] = database_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:Rds/getPgPlugins:getPgPlugins', __args__, opts=opts, typ=GetPgPluginsResult).value

    return AwaitableGetPgPluginsResult(
        created=pulumi.get(__ret__, 'created'),
        database_name=pulumi.get(__ret__, 'database_name'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        name=pulumi.get(__ret__, 'name'),
        plugins=pulumi.get(__ret__, 'plugins'),
        region=pulumi.get(__ret__, 'region'),
        version=pulumi.get(__ret__, 'version'))
def get_pg_plugins_output(created: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                          database_name: Optional[pulumi.Input[_builtins.str]] = None,
                          instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                          name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          version: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPgPluginsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['created'] = created
    __args__['databaseName'] = database_name
    __args__['instanceId'] = instance_id
    __args__['name'] = name
    __args__['region'] = region
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:Rds/getPgPlugins:getPgPlugins', __args__, opts=opts, typ=GetPgPluginsResult)
    return __ret__.apply(lambda __response__: GetPgPluginsResult(
        created=pulumi.get(__response__, 'created'),
        database_name=pulumi.get(__response__, 'database_name'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        name=pulumi.get(__response__, 'name'),
        plugins=pulumi.get(__response__, 'plugins'),
        region=pulumi.get(__response__, 'region'),
        version=pulumi.get(__response__, 'version')))

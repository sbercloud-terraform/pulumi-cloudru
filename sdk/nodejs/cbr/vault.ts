// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Vault extends pulumi.CustomResource {
    /**
     * Get an existing Vault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VaultState, opts?: pulumi.CustomResourceOptions): Vault {
        return new Vault(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:Cbr/vault:Vault';

    /**
     * Returns true if the given object is an instance of Vault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vault {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vault.__pulumiType;
    }

    /**
     * The allocated capacity, in GB.
     */
    declare public /*out*/ readonly allocated: pulumi.Output<number>;
    /**
     * Whether automatic association is supported.
     */
    declare public readonly autoBind: pulumi.Output<boolean>;
    /**
     * Whether to enable auto capacity expansion for the vault.
     */
    declare public readonly autoExpand: pulumi.Output<boolean>;
    /**
     * @deprecated Deprecated
     */
    declare public readonly autoPay: pulumi.Output<string | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * The backup name prefix.
     */
    declare public readonly backupNamePrefix: pulumi.Output<string>;
    /**
     * The rules for automatic association.
     */
    declare public readonly bindRules: pulumi.Output<{[key: string]: string} | undefined>;
    declare public readonly chargingMode: pulumi.Output<string>;
    /**
     * The cloud type of the vault.
     */
    declare public readonly cloudType: pulumi.Output<string>;
    /**
     * The consistent level (specification) of the vault.
     */
    declare public readonly consistentLevel: pulumi.Output<string | undefined>;
    /**
     * The enterprise project ID to which the vault belongs.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * Whether multiple availability zones are used for backing up.
     */
    declare public readonly isMultiAz: pulumi.Output<boolean>;
    /**
     * The name of the vault.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * The policy details to associate with the CBR vault.
     */
    declare public readonly policies: pulumi.Output<outputs.Cbr.VaultPolicy[]>;
    /**
     * schema:Deprecated; Using parameter 'policy' instead.
     */
    declare public readonly policyId: pulumi.Output<string | undefined>;
    /**
     * The protection type of the vault.
     */
    declare public readonly protectionType: pulumi.Output<string>;
    /**
     * The region where the vault is located.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The array of one or more resources to attach to the CBR vault.
     */
    declare public readonly resources: pulumi.Output<outputs.Cbr.VaultResource[]>;
    /**
     * The capacity of the vault, in GB.
     */
    declare public readonly size: pulumi.Output<number>;
    /**
     * The specification code.
     */
    declare public /*out*/ readonly specCode: pulumi.Output<string>;
    /**
     * The vault status.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The name of the bucket for the vault.
     */
    declare public /*out*/ readonly storage: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    /**
     * The type of the vault.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The used capacity, in GB.
     */
    declare public /*out*/ readonly used: pulumi.Output<number>;

    /**
     * Create a Vault resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VaultArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VaultArgs | VaultState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VaultState | undefined;
            resourceInputs["allocated"] = state?.allocated;
            resourceInputs["autoBind"] = state?.autoBind;
            resourceInputs["autoExpand"] = state?.autoExpand;
            resourceInputs["autoPay"] = state?.autoPay;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["backupNamePrefix"] = state?.backupNamePrefix;
            resourceInputs["bindRules"] = state?.bindRules;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["cloudType"] = state?.cloudType;
            resourceInputs["consistentLevel"] = state?.consistentLevel;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["isMultiAz"] = state?.isMultiAz;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["policies"] = state?.policies;
            resourceInputs["policyId"] = state?.policyId;
            resourceInputs["protectionType"] = state?.protectionType;
            resourceInputs["region"] = state?.region;
            resourceInputs["resources"] = state?.resources;
            resourceInputs["size"] = state?.size;
            resourceInputs["specCode"] = state?.specCode;
            resourceInputs["status"] = state?.status;
            resourceInputs["storage"] = state?.storage;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["type"] = state?.type;
            resourceInputs["used"] = state?.used;
        } else {
            const args = argsOrState as VaultArgs | undefined;
            if (args?.protectionType === undefined && !opts.urn) {
                throw new Error("Missing required property 'protectionType'");
            }
            if (args?.size === undefined && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["autoBind"] = args?.autoBind;
            resourceInputs["autoExpand"] = args?.autoExpand;
            resourceInputs["autoPay"] = args?.autoPay;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["backupNamePrefix"] = args?.backupNamePrefix;
            resourceInputs["bindRules"] = args?.bindRules;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["cloudType"] = args?.cloudType;
            resourceInputs["consistentLevel"] = args?.consistentLevel;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["isMultiAz"] = args?.isMultiAz;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["policies"] = args?.policies;
            resourceInputs["policyId"] = args?.policyId;
            resourceInputs["protectionType"] = args?.protectionType;
            resourceInputs["region"] = args?.region;
            resourceInputs["resources"] = args?.resources;
            resourceInputs["size"] = args?.size;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["type"] = args?.type;
            resourceInputs["allocated"] = undefined /*out*/;
            resourceInputs["specCode"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["storage"] = undefined /*out*/;
            resourceInputs["used"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vault.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vault resources.
 */
export interface VaultState {
    /**
     * The allocated capacity, in GB.
     */
    allocated?: pulumi.Input<number>;
    /**
     * Whether automatic association is supported.
     */
    autoBind?: pulumi.Input<boolean>;
    /**
     * Whether to enable auto capacity expansion for the vault.
     */
    autoExpand?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * The backup name prefix.
     */
    backupNamePrefix?: pulumi.Input<string>;
    /**
     * The rules for automatic association.
     */
    bindRules?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The cloud type of the vault.
     */
    cloudType?: pulumi.Input<string>;
    /**
     * The consistent level (specification) of the vault.
     */
    consistentLevel?: pulumi.Input<string>;
    /**
     * The enterprise project ID to which the vault belongs.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Whether multiple availability zones are used for backing up.
     */
    isMultiAz?: pulumi.Input<boolean>;
    /**
     * The name of the vault.
     */
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The policy details to associate with the CBR vault.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.Cbr.VaultPolicy>[]>;
    /**
     * schema:Deprecated; Using parameter 'policy' instead.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The protection type of the vault.
     */
    protectionType?: pulumi.Input<string>;
    /**
     * The region where the vault is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The array of one or more resources to attach to the CBR vault.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.Cbr.VaultResource>[]>;
    /**
     * The capacity of the vault, in GB.
     */
    size?: pulumi.Input<number>;
    /**
     * The specification code.
     */
    specCode?: pulumi.Input<string>;
    /**
     * The vault status.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the bucket for the vault.
     */
    storage?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the vault.
     */
    type?: pulumi.Input<string>;
    /**
     * The used capacity, in GB.
     */
    used?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Vault resource.
 */
export interface VaultArgs {
    /**
     * Whether automatic association is supported.
     */
    autoBind?: pulumi.Input<boolean>;
    /**
     * Whether to enable auto capacity expansion for the vault.
     */
    autoExpand?: pulumi.Input<boolean>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    /**
     * The backup name prefix.
     */
    backupNamePrefix?: pulumi.Input<string>;
    /**
     * The rules for automatic association.
     */
    bindRules?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The cloud type of the vault.
     */
    cloudType?: pulumi.Input<string>;
    /**
     * The consistent level (specification) of the vault.
     */
    consistentLevel?: pulumi.Input<string>;
    /**
     * The enterprise project ID to which the vault belongs.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Whether multiple availability zones are used for backing up.
     */
    isMultiAz?: pulumi.Input<boolean>;
    /**
     * The name of the vault.
     */
    name?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The policy details to associate with the CBR vault.
     */
    policies?: pulumi.Input<pulumi.Input<inputs.Cbr.VaultPolicy>[]>;
    /**
     * schema:Deprecated; Using parameter 'policy' instead.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The protection type of the vault.
     */
    protectionType: pulumi.Input<string>;
    /**
     * The region where the vault is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The array of one or more resources to attach to the CBR vault.
     */
    resources?: pulumi.Input<pulumi.Input<inputs.Cbr.VaultResource>[]>;
    /**
     * The capacity of the vault, in GB.
     */
    size: pulumi.Input<number>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of the vault.
     */
    type: pulumi.Input<string>;
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFgsQuotasResult',
    'AwaitableGetFgsQuotasResult',
    'get_fgs_quotas',
    'get_fgs_quotas_output',
]

@pulumi.output_type
class GetFgsQuotasResult:
    """
    A collection of values returned by getFgsQuotas.
    """
    def __init__(__self__, id=None, quotas=None, region=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if quotas and not isinstance(quotas, list):
            raise TypeError("Expected argument 'quotas' to be a list")
        pulumi.set(__self__, "quotas", quotas)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.GetFgsQuotasQuotaResult']:
        """
        All quotas that match the filter parameters.
        """
        return pulumi.get(self, "quotas")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetFgsQuotasResult(GetFgsQuotasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFgsQuotasResult(
            id=self.id,
            quotas=self.quotas,
            region=self.region)


def get_fgs_quotas(region: Optional[_builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFgsQuotasResult:
    """
    Using this data source to query the list of available resource quotas for FunctionGraph service within SberCloud.


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getFgsQuotas:getFgsQuotas', __args__, opts=opts, typ=GetFgsQuotasResult).value

    return AwaitableGetFgsQuotasResult(
        id=pulumi.get(__ret__, 'id'),
        quotas=pulumi.get(__ret__, 'quotas'),
        region=pulumi.get(__ret__, 'region'))
def get_fgs_quotas_output(region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFgsQuotasResult]:
    """
    Using this data source to query the list of available resource quotas for FunctionGraph service within SberCloud.


    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getFgsQuotas:getFgsQuotas', __args__, opts=opts, typ=GetFgsQuotasResult)
    return __ret__.apply(lambda __response__: GetFgsQuotasResult(
        id=pulumi.get(__response__, 'id'),
        quotas=pulumi.get(__response__, 'quotas'),
        region=pulumi.get(__response__, 'region')))

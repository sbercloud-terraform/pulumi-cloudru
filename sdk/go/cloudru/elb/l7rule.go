// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package elb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type L7rule struct {
	pulumi.CustomResourceState

	AdminStateUp pulumi.BoolPtrOutput   `pulumi:"adminStateUp"`
	CompareType  pulumi.StringOutput    `pulumi:"compareType"`
	Key          pulumi.StringPtrOutput `pulumi:"key"`
	L7policyId   pulumi.StringOutput    `pulumi:"l7policyId"`
	ListenerId   pulumi.StringOutput    `pulumi:"listenerId"`
	Region       pulumi.StringOutput    `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	Type     pulumi.StringOutput `pulumi:"type"`
	Value    pulumi.StringOutput `pulumi:"value"`
}

// NewL7rule registers a new resource with the given unique name, arguments, and options.
func NewL7rule(ctx *pulumi.Context,
	name string, args *L7ruleArgs, opts ...pulumi.ResourceOption) (*L7rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompareType == nil {
		return nil, errors.New("invalid value for required argument 'CompareType'")
	}
	if args.L7policyId == nil {
		return nil, errors.New("invalid value for required argument 'L7policyId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource L7rule
	err := ctx.RegisterResource("sbercloud:Elb/l7rule:L7rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetL7rule gets an existing L7rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetL7rule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *L7ruleState, opts ...pulumi.ResourceOption) (*L7rule, error) {
	var resource L7rule
	err := ctx.ReadResource("sbercloud:Elb/l7rule:L7rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering L7rule resources.
type l7ruleState struct {
	AdminStateUp *bool   `pulumi:"adminStateUp"`
	CompareType  *string `pulumi:"compareType"`
	Key          *string `pulumi:"key"`
	L7policyId   *string `pulumi:"l7policyId"`
	ListenerId   *string `pulumi:"listenerId"`
	Region       *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	Type     *string `pulumi:"type"`
	Value    *string `pulumi:"value"`
}

type L7ruleState struct {
	AdminStateUp pulumi.BoolPtrInput
	CompareType  pulumi.StringPtrInput
	Key          pulumi.StringPtrInput
	L7policyId   pulumi.StringPtrInput
	ListenerId   pulumi.StringPtrInput
	Region       pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	Type     pulumi.StringPtrInput
	Value    pulumi.StringPtrInput
}

func (L7ruleState) ElementType() reflect.Type {
	return reflect.TypeOf((*l7ruleState)(nil)).Elem()
}

type l7ruleArgs struct {
	AdminStateUp *bool   `pulumi:"adminStateUp"`
	CompareType  string  `pulumi:"compareType"`
	Key          *string `pulumi:"key"`
	L7policyId   string  `pulumi:"l7policyId"`
	Region       *string `pulumi:"region"`
	// Deprecated: tenant_id is deprecated
	TenantId *string `pulumi:"tenantId"`
	Type     string  `pulumi:"type"`
	Value    string  `pulumi:"value"`
}

// The set of arguments for constructing a L7rule resource.
type L7ruleArgs struct {
	AdminStateUp pulumi.BoolPtrInput
	CompareType  pulumi.StringInput
	Key          pulumi.StringPtrInput
	L7policyId   pulumi.StringInput
	Region       pulumi.StringPtrInput
	// Deprecated: tenant_id is deprecated
	TenantId pulumi.StringPtrInput
	Type     pulumi.StringInput
	Value    pulumi.StringInput
}

func (L7ruleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*l7ruleArgs)(nil)).Elem()
}

type L7ruleInput interface {
	pulumi.Input

	ToL7ruleOutput() L7ruleOutput
	ToL7ruleOutputWithContext(ctx context.Context) L7ruleOutput
}

func (*L7rule) ElementType() reflect.Type {
	return reflect.TypeOf((**L7rule)(nil)).Elem()
}

func (i *L7rule) ToL7ruleOutput() L7ruleOutput {
	return i.ToL7ruleOutputWithContext(context.Background())
}

func (i *L7rule) ToL7ruleOutputWithContext(ctx context.Context) L7ruleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7ruleOutput)
}

// L7ruleArrayInput is an input type that accepts L7ruleArray and L7ruleArrayOutput values.
// You can construct a concrete instance of `L7ruleArrayInput` via:
//
//	L7ruleArray{ L7ruleArgs{...} }
type L7ruleArrayInput interface {
	pulumi.Input

	ToL7ruleArrayOutput() L7ruleArrayOutput
	ToL7ruleArrayOutputWithContext(context.Context) L7ruleArrayOutput
}

type L7ruleArray []L7ruleInput

func (L7ruleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L7rule)(nil)).Elem()
}

func (i L7ruleArray) ToL7ruleArrayOutput() L7ruleArrayOutput {
	return i.ToL7ruleArrayOutputWithContext(context.Background())
}

func (i L7ruleArray) ToL7ruleArrayOutputWithContext(ctx context.Context) L7ruleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7ruleArrayOutput)
}

// L7ruleMapInput is an input type that accepts L7ruleMap and L7ruleMapOutput values.
// You can construct a concrete instance of `L7ruleMapInput` via:
//
//	L7ruleMap{ "key": L7ruleArgs{...} }
type L7ruleMapInput interface {
	pulumi.Input

	ToL7ruleMapOutput() L7ruleMapOutput
	ToL7ruleMapOutputWithContext(context.Context) L7ruleMapOutput
}

type L7ruleMap map[string]L7ruleInput

func (L7ruleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L7rule)(nil)).Elem()
}

func (i L7ruleMap) ToL7ruleMapOutput() L7ruleMapOutput {
	return i.ToL7ruleMapOutputWithContext(context.Background())
}

func (i L7ruleMap) ToL7ruleMapOutputWithContext(ctx context.Context) L7ruleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7ruleMapOutput)
}

type L7ruleOutput struct{ *pulumi.OutputState }

func (L7ruleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L7rule)(nil)).Elem()
}

func (o L7ruleOutput) ToL7ruleOutput() L7ruleOutput {
	return o
}

func (o L7ruleOutput) ToL7ruleOutputWithContext(ctx context.Context) L7ruleOutput {
	return o
}

func (o L7ruleOutput) AdminStateUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *L7rule) pulumi.BoolPtrOutput { return v.AdminStateUp }).(pulumi.BoolPtrOutput)
}

func (o L7ruleOutput) CompareType() pulumi.StringOutput {
	return o.ApplyT(func(v *L7rule) pulumi.StringOutput { return v.CompareType }).(pulumi.StringOutput)
}

func (o L7ruleOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7rule) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

func (o L7ruleOutput) L7policyId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7rule) pulumi.StringOutput { return v.L7policyId }).(pulumi.StringOutput)
}

func (o L7ruleOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7rule) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

func (o L7ruleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *L7rule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Deprecated: tenant_id is deprecated
func (o L7ruleOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *L7rule) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o L7ruleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *L7rule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o L7ruleOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *L7rule) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

type L7ruleArrayOutput struct{ *pulumi.OutputState }

func (L7ruleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L7rule)(nil)).Elem()
}

func (o L7ruleArrayOutput) ToL7ruleArrayOutput() L7ruleArrayOutput {
	return o
}

func (o L7ruleArrayOutput) ToL7ruleArrayOutputWithContext(ctx context.Context) L7ruleArrayOutput {
	return o
}

func (o L7ruleArrayOutput) Index(i pulumi.IntInput) L7ruleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *L7rule {
		return vs[0].([]*L7rule)[vs[1].(int)]
	}).(L7ruleOutput)
}

type L7ruleMapOutput struct{ *pulumi.OutputState }

func (L7ruleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L7rule)(nil)).Elem()
}

func (o L7ruleMapOutput) ToL7ruleMapOutput() L7ruleMapOutput {
	return o
}

func (o L7ruleMapOutput) ToL7ruleMapOutputWithContext(ctx context.Context) L7ruleMapOutput {
	return o
}

func (o L7ruleMapOutput) MapIndex(k pulumi.StringInput) L7ruleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *L7rule {
		return vs[0].(map[string]*L7rule)[vs[1].(string)]
	}).(L7ruleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*L7ruleInput)(nil)).Elem(), &L7rule{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7ruleArrayInput)(nil)).Elem(), L7ruleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7ruleMapInput)(nil)).Elem(), L7ruleMap{})
	pulumi.RegisterOutputType(L7ruleOutput{})
	pulumi.RegisterOutputType(L7ruleArrayOutput{})
	pulumi.RegisterOutputType(L7ruleMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cce

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Add a node from an existing ecs server to a CCE cluster.
//
// ## Basic Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/cce"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cce.NewNodeAttach(ctx, "test", &cce.NodeAttachArgs{
//				ClusterId: pulumi.Any(clusterId),
//				ServerId:  pulumi.Any(serverId),
//				KeyPair:   pulumi.Any(keypairName),
//				Os:        pulumi.String("CentOS 7.6"),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NodeAttach struct {
	pulumi.CustomResourceState

	// The name of the available partition (AZ).
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	ChargingMode     pulumi.StringOutput `pulumi:"chargingMode"`
	// Specifies the ID of the cluster. Changing this parameter will create a new
	// resource.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The data disks related configuration.
	DataVolumes NodeAttachDataVolumeArrayOutput `pulumi:"dataVolumes"`
	// Specifies the available disk space of a single docker container on the
	// node in device mapper mode. Changing this parameter will create a new resource.
	DockerBaseSize pulumi.IntPtrOutput `pulumi:"dockerBaseSize"`
	// The Ecs group ID.
	EcsGroupId          pulumi.StringOutput               `pulumi:"ecsGroupId"`
	EnterpriseProjectId pulumi.StringOutput               `pulumi:"enterpriseProjectId"`
	ExtensionNics       NodeAttachExtensionNicArrayOutput `pulumi:"extensionNics"`
	// The flavor ID of the CCE node.
	FlavorId       pulumi.StringOutput            `pulumi:"flavorId"`
	HostnameConfig NodeAttachHostnameConfigOutput `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               pulumi.StringPtrOutput   `pulumi:"imageId"`
	InitializedConditions pulumi.StringArrayOutput `pulumi:"initializedConditions"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will reset the node.
	KeyPair pulumi.StringPtrOutput `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will create a new resource.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Specifies the docker data disk configurations. The following is an
	// example:
	LvmConfig pulumi.StringPtrOutput `pulumi:"lvmConfig"`
	// Specifies the the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods pulumi.IntPtrOutput `pulumi:"maxPods"`
	// Specifies the Node Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// schema: Internal
	NicMultiQueue pulumi.StringPtrOutput `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold pulumi.StringPtrOutput `pulumi:"nicThreshold"`
	// Specifies the operating System of the node. Changing this parameter will reset the node.
	// + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
	Os pulumi.StringOutput `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will reset the node.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Specifies the script required after installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall pulumi.StringPtrOutput `pulumi:"postinstall"`
	// Specifies the script required before installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall pulumi.StringPtrOutput `pulumi:"preinstall"`
	// Private IP of the CCE node.
	PrivateIp  pulumi.StringOutput    `pulumi:"privateIp"`
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Public IP of the CCE node.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// The region in which to create the CCE node attach resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node attach resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The system disk related configuration.
	RootVolumes NodeAttachRootVolumeArrayOutput `pulumi:"rootVolumes"`
	// The runtime of the CCE node.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// Specifies the ecs server ID. Changing this parameter will create a new
	// resource.
	ServerId pulumi.StringOutput `pulumi:"serverId"`
	// Node status information.
	Status  pulumi.StringOutput        `pulumi:"status"`
	Storage NodeAttachStoragePtrOutput `pulumi:"storage"`
	// The ID of the subnet to which the NIC belongs.
	SubnetId           pulumi.StringOutput    `pulumi:"subnetId"`
	SystemDiskKmsKeyId pulumi.StringPtrOutput `pulumi:"systemDiskKmsKeyId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will create a new resource. Each taint contains the following parameters:
	Taints NodeAttachTaintArrayOutput `pulumi:"taints"`
}

// NewNodeAttach registers a new resource with the given unique name, arguments, and options.
func NewNodeAttach(ctx *pulumi.Context,
	name string, args *NodeAttachArgs, opts ...pulumi.ResourceOption) (*NodeAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Os == nil {
		return nil, errors.New("invalid value for required argument 'Os'")
	}
	if args.ServerId == nil {
		return nil, errors.New("invalid value for required argument 'ServerId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"privateKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NodeAttach
	err := ctx.RegisterResource("sbercloud:Cce/nodeAttach:NodeAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodeAttach gets an existing NodeAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodeAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodeAttachState, opts ...pulumi.ResourceOption) (*NodeAttach, error) {
	var resource NodeAttach
	err := ctx.ReadResource("sbercloud:Cce/nodeAttach:NodeAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodeAttach resources.
type nodeAttachState struct {
	// The name of the available partition (AZ).
	AvailabilityZone *string `pulumi:"availabilityZone"`
	ChargingMode     *string `pulumi:"chargingMode"`
	// Specifies the ID of the cluster. Changing this parameter will create a new
	// resource.
	ClusterId *string `pulumi:"clusterId"`
	// The data disks related configuration.
	DataVolumes []NodeAttachDataVolume `pulumi:"dataVolumes"`
	// Specifies the available disk space of a single docker container on the
	// node in device mapper mode. Changing this parameter will create a new resource.
	DockerBaseSize *int `pulumi:"dockerBaseSize"`
	// The Ecs group ID.
	EcsGroupId          *string                  `pulumi:"ecsGroupId"`
	EnterpriseProjectId *string                  `pulumi:"enterpriseProjectId"`
	ExtensionNics       []NodeAttachExtensionNic `pulumi:"extensionNics"`
	// The flavor ID of the CCE node.
	FlavorId       *string                   `pulumi:"flavorId"`
	HostnameConfig *NodeAttachHostnameConfig `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               *string  `pulumi:"imageId"`
	InitializedConditions []string `pulumi:"initializedConditions"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will reset the node.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will create a new resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the docker data disk configurations. The following is an
	// example:
	LvmConfig *string `pulumi:"lvmConfig"`
	// Specifies the the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods *int `pulumi:"maxPods"`
	// Specifies the Node Name.
	Name *string `pulumi:"name"`
	// schema: Internal
	NicMultiQueue *string `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold *string `pulumi:"nicThreshold"`
	// Specifies the operating System of the node. Changing this parameter will reset the node.
	// + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
	Os *string `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will reset the node.
	Password *string `pulumi:"password"`
	// Specifies the script required after installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall *string `pulumi:"postinstall"`
	// Specifies the script required before installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall *string `pulumi:"preinstall"`
	// Private IP of the CCE node.
	PrivateIp  *string `pulumi:"privateIp"`
	PrivateKey *string `pulumi:"privateKey"`
	// Public IP of the CCE node.
	PublicIp *string `pulumi:"publicIp"`
	// The region in which to create the CCE node attach resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node attach resource.
	Region *string `pulumi:"region"`
	// The system disk related configuration.
	RootVolumes []NodeAttachRootVolume `pulumi:"rootVolumes"`
	// The runtime of the CCE node.
	Runtime *string `pulumi:"runtime"`
	// Specifies the ecs server ID. Changing this parameter will create a new
	// resource.
	ServerId *string `pulumi:"serverId"`
	// Node status information.
	Status  *string            `pulumi:"status"`
	Storage *NodeAttachStorage `pulumi:"storage"`
	// The ID of the subnet to which the NIC belongs.
	SubnetId           *string `pulumi:"subnetId"`
	SystemDiskKmsKeyId *string `pulumi:"systemDiskKmsKeyId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will create a new resource. Each taint contains the following parameters:
	Taints []NodeAttachTaint `pulumi:"taints"`
}

type NodeAttachState struct {
	// The name of the available partition (AZ).
	AvailabilityZone pulumi.StringPtrInput
	ChargingMode     pulumi.StringPtrInput
	// Specifies the ID of the cluster. Changing this parameter will create a new
	// resource.
	ClusterId pulumi.StringPtrInput
	// The data disks related configuration.
	DataVolumes NodeAttachDataVolumeArrayInput
	// Specifies the available disk space of a single docker container on the
	// node in device mapper mode. Changing this parameter will create a new resource.
	DockerBaseSize pulumi.IntPtrInput
	// The Ecs group ID.
	EcsGroupId          pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ExtensionNics       NodeAttachExtensionNicArrayInput
	// The flavor ID of the CCE node.
	FlavorId       pulumi.StringPtrInput
	HostnameConfig NodeAttachHostnameConfigPtrInput
	// schema: Internal
	ImageId               pulumi.StringPtrInput
	InitializedConditions pulumi.StringArrayInput
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will reset the node.
	KeyPair pulumi.StringPtrInput
	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will create a new resource.
	Labels pulumi.StringMapInput
	// Specifies the docker data disk configurations. The following is an
	// example:
	LvmConfig pulumi.StringPtrInput
	// Specifies the the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods pulumi.IntPtrInput
	// Specifies the Node Name.
	Name pulumi.StringPtrInput
	// schema: Internal
	NicMultiQueue pulumi.StringPtrInput
	// schema: Internal
	NicThreshold pulumi.StringPtrInput
	// Specifies the operating System of the node. Changing this parameter will reset the node.
	// + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
	Os pulumi.StringPtrInput
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will reset the node.
	Password pulumi.StringPtrInput
	// Specifies the script required after installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall pulumi.StringPtrInput
	// Specifies the script required before installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall pulumi.StringPtrInput
	// Private IP of the CCE node.
	PrivateIp  pulumi.StringPtrInput
	PrivateKey pulumi.StringPtrInput
	// Public IP of the CCE node.
	PublicIp pulumi.StringPtrInput
	// The region in which to create the CCE node attach resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node attach resource.
	Region pulumi.StringPtrInput
	// The system disk related configuration.
	RootVolumes NodeAttachRootVolumeArrayInput
	// The runtime of the CCE node.
	Runtime pulumi.StringPtrInput
	// Specifies the ecs server ID. Changing this parameter will create a new
	// resource.
	ServerId pulumi.StringPtrInput
	// Node status information.
	Status  pulumi.StringPtrInput
	Storage NodeAttachStoragePtrInput
	// The ID of the subnet to which the NIC belongs.
	SubnetId           pulumi.StringPtrInput
	SystemDiskKmsKeyId pulumi.StringPtrInput
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will create a new resource. Each taint contains the following parameters:
	Taints NodeAttachTaintArrayInput
}

func (NodeAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeAttachState)(nil)).Elem()
}

type nodeAttachArgs struct {
	// Specifies the ID of the cluster. Changing this parameter will create a new
	// resource.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the available disk space of a single docker container on the
	// node in device mapper mode. Changing this parameter will create a new resource.
	DockerBaseSize *int                      `pulumi:"dockerBaseSize"`
	HostnameConfig *NodeAttachHostnameConfig `pulumi:"hostnameConfig"`
	// schema: Internal
	ImageId               *string  `pulumi:"imageId"`
	InitializedConditions []string `pulumi:"initializedConditions"`
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will reset the node.
	KeyPair *string `pulumi:"keyPair"`
	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will create a new resource.
	Labels map[string]string `pulumi:"labels"`
	// Specifies the docker data disk configurations. The following is an
	// example:
	LvmConfig *string `pulumi:"lvmConfig"`
	// Specifies the the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods *int `pulumi:"maxPods"`
	// Specifies the Node Name.
	Name *string `pulumi:"name"`
	// schema: Internal
	NicMultiQueue *string `pulumi:"nicMultiQueue"`
	// schema: Internal
	NicThreshold *string `pulumi:"nicThreshold"`
	// Specifies the operating System of the node. Changing this parameter will reset the node.
	// + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
	Os string `pulumi:"os"`
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will reset the node.
	Password *string `pulumi:"password"`
	// Specifies the script required after installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall *string `pulumi:"postinstall"`
	// Specifies the script required before installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall *string `pulumi:"preinstall"`
	PrivateKey *string `pulumi:"privateKey"`
	// The region in which to create the CCE node attach resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node attach resource.
	Region *string `pulumi:"region"`
	// The runtime of the CCE node.
	Runtime *string `pulumi:"runtime"`
	// Specifies the ecs server ID. Changing this parameter will create a new
	// resource.
	ServerId           string             `pulumi:"serverId"`
	Storage            *NodeAttachStorage `pulumi:"storage"`
	SystemDiskKmsKeyId *string            `pulumi:"systemDiskKmsKeyId"`
	// Specifies the tags of a VM node, key/value pair format.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will create a new resource. Each taint contains the following parameters:
	Taints []NodeAttachTaint `pulumi:"taints"`
}

// The set of arguments for constructing a NodeAttach resource.
type NodeAttachArgs struct {
	// Specifies the ID of the cluster. Changing this parameter will create a new
	// resource.
	ClusterId pulumi.StringInput
	// Specifies the available disk space of a single docker container on the
	// node in device mapper mode. Changing this parameter will create a new resource.
	DockerBaseSize pulumi.IntPtrInput
	HostnameConfig NodeAttachHostnameConfigPtrInput
	// schema: Internal
	ImageId               pulumi.StringPtrInput
	InitializedConditions pulumi.StringArrayInput
	// Specifies the key pair name when logging in to select the key pair mode.
	// This parameter and `password` are alternative. Changing this parameter will reset the node.
	KeyPair pulumi.StringPtrInput
	// Specifies the tags of a Kubernetes node, key/value pair format.
	// Changing this parameter will create a new resource.
	Labels pulumi.StringMapInput
	// Specifies the docker data disk configurations. The following is an
	// example:
	LvmConfig pulumi.StringPtrInput
	// Specifies the the maximum number of instances a node is allowed to create.
	// Changing this parameter will create a new resource.
	MaxPods pulumi.IntPtrInput
	// Specifies the Node Name.
	Name pulumi.StringPtrInput
	// schema: Internal
	NicMultiQueue pulumi.StringPtrInput
	// schema: Internal
	NicThreshold pulumi.StringPtrInput
	// Specifies the operating System of the node. Changing this parameter will reset the node.
	// + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
	Os pulumi.StringInput
	// Specifies the root password when logging in to select the password mode.
	// This parameter can be plain or salted and is alternative to `keyPair`.
	// Changing this parameter will reset the node.
	Password pulumi.StringPtrInput
	// Specifies the script required after installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Postinstall pulumi.StringPtrInput
	// Specifies the script required before installation. The input value can be
	// a Base64 encoded string or not. Changing this parameter will create a new resource.
	Preinstall pulumi.StringPtrInput
	PrivateKey pulumi.StringPtrInput
	// The region in which to create the CCE node attach resource. If omitted, the
	// provider-level region will be used. Changing this creates a new CCE node attach resource.
	Region pulumi.StringPtrInput
	// The runtime of the CCE node.
	Runtime pulumi.StringPtrInput
	// Specifies the ecs server ID. Changing this parameter will create a new
	// resource.
	ServerId           pulumi.StringInput
	Storage            NodeAttachStoragePtrInput
	SystemDiskKmsKeyId pulumi.StringPtrInput
	// Specifies the tags of a VM node, key/value pair format.
	Tags pulumi.StringMapInput
	// Specifies the taints configuration of the nodes to set anti-affinity.
	// Changing this parameter will create a new resource. Each taint contains the following parameters:
	Taints NodeAttachTaintArrayInput
}

func (NodeAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodeAttachArgs)(nil)).Elem()
}

type NodeAttachInput interface {
	pulumi.Input

	ToNodeAttachOutput() NodeAttachOutput
	ToNodeAttachOutputWithContext(ctx context.Context) NodeAttachOutput
}

func (*NodeAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAttach)(nil)).Elem()
}

func (i *NodeAttach) ToNodeAttachOutput() NodeAttachOutput {
	return i.ToNodeAttachOutputWithContext(context.Background())
}

func (i *NodeAttach) ToNodeAttachOutputWithContext(ctx context.Context) NodeAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachOutput)
}

// NodeAttachArrayInput is an input type that accepts NodeAttachArray and NodeAttachArrayOutput values.
// You can construct a concrete instance of `NodeAttachArrayInput` via:
//
//	NodeAttachArray{ NodeAttachArgs{...} }
type NodeAttachArrayInput interface {
	pulumi.Input

	ToNodeAttachArrayOutput() NodeAttachArrayOutput
	ToNodeAttachArrayOutputWithContext(context.Context) NodeAttachArrayOutput
}

type NodeAttachArray []NodeAttachInput

func (NodeAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeAttach)(nil)).Elem()
}

func (i NodeAttachArray) ToNodeAttachArrayOutput() NodeAttachArrayOutput {
	return i.ToNodeAttachArrayOutputWithContext(context.Background())
}

func (i NodeAttachArray) ToNodeAttachArrayOutputWithContext(ctx context.Context) NodeAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachArrayOutput)
}

// NodeAttachMapInput is an input type that accepts NodeAttachMap and NodeAttachMapOutput values.
// You can construct a concrete instance of `NodeAttachMapInput` via:
//
//	NodeAttachMap{ "key": NodeAttachArgs{...} }
type NodeAttachMapInput interface {
	pulumi.Input

	ToNodeAttachMapOutput() NodeAttachMapOutput
	ToNodeAttachMapOutputWithContext(context.Context) NodeAttachMapOutput
}

type NodeAttachMap map[string]NodeAttachInput

func (NodeAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeAttach)(nil)).Elem()
}

func (i NodeAttachMap) ToNodeAttachMapOutput() NodeAttachMapOutput {
	return i.ToNodeAttachMapOutputWithContext(context.Background())
}

func (i NodeAttachMap) ToNodeAttachMapOutputWithContext(ctx context.Context) NodeAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodeAttachMapOutput)
}

type NodeAttachOutput struct{ *pulumi.OutputState }

func (NodeAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodeAttach)(nil)).Elem()
}

func (o NodeAttachOutput) ToNodeAttachOutput() NodeAttachOutput {
	return o
}

func (o NodeAttachOutput) ToNodeAttachOutputWithContext(ctx context.Context) NodeAttachOutput {
	return o
}

// The name of the available partition (AZ).
func (o NodeAttachOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// Specifies the ID of the cluster. Changing this parameter will create a new
// resource.
func (o NodeAttachOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The data disks related configuration.
func (o NodeAttachOutput) DataVolumes() NodeAttachDataVolumeArrayOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachDataVolumeArrayOutput { return v.DataVolumes }).(NodeAttachDataVolumeArrayOutput)
}

// Specifies the available disk space of a single docker container on the
// node in device mapper mode. Changing this parameter will create a new resource.
func (o NodeAttachOutput) DockerBaseSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.IntPtrOutput { return v.DockerBaseSize }).(pulumi.IntPtrOutput)
}

// The Ecs group ID.
func (o NodeAttachOutput) EcsGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.EcsGroupId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) ExtensionNics() NodeAttachExtensionNicArrayOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachExtensionNicArrayOutput { return v.ExtensionNics }).(NodeAttachExtensionNicArrayOutput)
}

// The flavor ID of the CCE node.
func (o NodeAttachOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) HostnameConfig() NodeAttachHostnameConfigOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachHostnameConfigOutput { return v.HostnameConfig }).(NodeAttachHostnameConfigOutput)
}

// schema: Internal
func (o NodeAttachOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

func (o NodeAttachOutput) InitializedConditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringArrayOutput { return v.InitializedConditions }).(pulumi.StringArrayOutput)
}

// Specifies the key pair name when logging in to select the key pair mode.
// This parameter and `password` are alternative. Changing this parameter will reset the node.
func (o NodeAttachOutput) KeyPair() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.KeyPair }).(pulumi.StringPtrOutput)
}

// Specifies the tags of a Kubernetes node, key/value pair format.
// Changing this parameter will create a new resource.
func (o NodeAttachOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Specifies the docker data disk configurations. The following is an
// example:
func (o NodeAttachOutput) LvmConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.LvmConfig }).(pulumi.StringPtrOutput)
}

// Specifies the the maximum number of instances a node is allowed to create.
// Changing this parameter will create a new resource.
func (o NodeAttachOutput) MaxPods() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.IntPtrOutput { return v.MaxPods }).(pulumi.IntPtrOutput)
}

// Specifies the Node Name.
func (o NodeAttachOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// schema: Internal
func (o NodeAttachOutput) NicMultiQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.NicMultiQueue }).(pulumi.StringPtrOutput)
}

// schema: Internal
func (o NodeAttachOutput) NicThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.NicThreshold }).(pulumi.StringPtrOutput)
}

// Specifies the operating System of the node. Changing this parameter will reset the node.
// + For VM nodes, clusters of v1.13 and later support *CentOS 7.6* and *Ubuntu 18.04*.
func (o NodeAttachOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

// Specifies the root password when logging in to select the password mode.
// This parameter can be plain or salted and is alternative to `keyPair`.
// Changing this parameter will reset the node.
func (o NodeAttachOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Specifies the script required after installation. The input value can be
// a Base64 encoded string or not. Changing this parameter will create a new resource.
func (o NodeAttachOutput) Postinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.Postinstall }).(pulumi.StringPtrOutput)
}

// Specifies the script required before installation. The input value can be
// a Base64 encoded string or not. Changing this parameter will create a new resource.
func (o NodeAttachOutput) Preinstall() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.Preinstall }).(pulumi.StringPtrOutput)
}

// Private IP of the CCE node.
func (o NodeAttachOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Public IP of the CCE node.
func (o NodeAttachOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// The region in which to create the CCE node attach resource. If omitted, the
// provider-level region will be used. Changing this creates a new CCE node attach resource.
func (o NodeAttachOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The system disk related configuration.
func (o NodeAttachOutput) RootVolumes() NodeAttachRootVolumeArrayOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachRootVolumeArrayOutput { return v.RootVolumes }).(NodeAttachRootVolumeArrayOutput)
}

// The runtime of the CCE node.
func (o NodeAttachOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// Specifies the ecs server ID. Changing this parameter will create a new
// resource.
func (o NodeAttachOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.ServerId }).(pulumi.StringOutput)
}

// Node status information.
func (o NodeAttachOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) Storage() NodeAttachStoragePtrOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachStoragePtrOutput { return v.Storage }).(NodeAttachStoragePtrOutput)
}

// The ID of the subnet to which the NIC belongs.
func (o NodeAttachOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o NodeAttachOutput) SystemDiskKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringPtrOutput { return v.SystemDiskKmsKeyId }).(pulumi.StringPtrOutput)
}

// Specifies the tags of a VM node, key/value pair format.
func (o NodeAttachOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NodeAttach) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the taints configuration of the nodes to set anti-affinity.
// Changing this parameter will create a new resource. Each taint contains the following parameters:
func (o NodeAttachOutput) Taints() NodeAttachTaintArrayOutput {
	return o.ApplyT(func(v *NodeAttach) NodeAttachTaintArrayOutput { return v.Taints }).(NodeAttachTaintArrayOutput)
}

type NodeAttachArrayOutput struct{ *pulumi.OutputState }

func (NodeAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodeAttach)(nil)).Elem()
}

func (o NodeAttachArrayOutput) ToNodeAttachArrayOutput() NodeAttachArrayOutput {
	return o
}

func (o NodeAttachArrayOutput) ToNodeAttachArrayOutputWithContext(ctx context.Context) NodeAttachArrayOutput {
	return o
}

func (o NodeAttachArrayOutput) Index(i pulumi.IntInput) NodeAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodeAttach {
		return vs[0].([]*NodeAttach)[vs[1].(int)]
	}).(NodeAttachOutput)
}

type NodeAttachMapOutput struct{ *pulumi.OutputState }

func (NodeAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodeAttach)(nil)).Elem()
}

func (o NodeAttachMapOutput) ToNodeAttachMapOutput() NodeAttachMapOutput {
	return o
}

func (o NodeAttachMapOutput) ToNodeAttachMapOutputWithContext(ctx context.Context) NodeAttachMapOutput {
	return o
}

func (o NodeAttachMapOutput) MapIndex(k pulumi.StringInput) NodeAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodeAttach {
		return vs[0].(map[string]*NodeAttach)[vs[1].(string)]
	}).(NodeAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachInput)(nil)).Elem(), &NodeAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachArrayInput)(nil)).Elem(), NodeAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodeAttachMapInput)(nil)).Elem(), NodeAttachMap{})
	pulumi.RegisterOutputType(NodeAttachOutput{})
	pulumi.RegisterOutputType(NodeAttachArrayOutput{})
	pulumi.RegisterOutputType(NodeAttachMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SnatRule struct {
	pulumi.CustomResourceState

	// The CIDR block connected by SNAT rule (DC side).
	Cidr pulumi.StringPtrOutput `pulumi:"cidr"`
	// The creation time of the SNAT rule.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the SNAT rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The floating IP addresses (separated by commas) connected by SNAT rule.
	FloatingIpAddress pulumi.StringOutput `pulumi:"floatingIpAddress"`
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId pulumi.StringOutput `pulumi:"floatingIpId"`
	// The frozen EIP associated with the SNAT rule.
	FreezedIpAddress pulumi.StringOutput `pulumi:"freezedIpAddress"`
	// The global EIP addresses (separated by commas) connected by SNAT rule.
	GlobalEipAddress pulumi.StringOutput `pulumi:"globalEipAddress"`
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId pulumi.StringOutput `pulumi:"globalEipId"`
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId pulumi.StringPtrOutput `pulumi:"networkId"`
	// The region where the SNAT rule is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The resource type of the SNAT rule.
	SourceType pulumi.IntPtrOutput `pulumi:"sourceType"`
	// The status of the SNAT rule.
	Status pulumi.StringOutput `pulumi:"status"`
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewSnatRule registers a new resource with the given unique name, arguments, and options.
func NewSnatRule(ctx *pulumi.Context,
	name string, args *SnatRuleArgs, opts ...pulumi.ResourceOption) (*SnatRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnatRule
	err := ctx.RegisterResource("cloudru:Nat/snatRule:SnatRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnatRule gets an existing SnatRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnatRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnatRuleState, opts ...pulumi.ResourceOption) (*SnatRule, error) {
	var resource SnatRule
	err := ctx.ReadResource("cloudru:Nat/snatRule:SnatRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnatRule resources.
type snatRuleState struct {
	// The CIDR block connected by SNAT rule (DC side).
	Cidr *string `pulumi:"cidr"`
	// The creation time of the SNAT rule.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the SNAT rule.
	Description *string `pulumi:"description"`
	// The floating IP addresses (separated by commas) connected by SNAT rule.
	FloatingIpAddress *string `pulumi:"floatingIpAddress"`
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The frozen EIP associated with the SNAT rule.
	FreezedIpAddress *string `pulumi:"freezedIpAddress"`
	// The global EIP addresses (separated by commas) connected by SNAT rule.
	GlobalEipAddress *string `pulumi:"globalEipAddress"`
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId *string `pulumi:"globalEipId"`
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId *string `pulumi:"networkId"`
	// The region where the SNAT rule is located.
	Region *string `pulumi:"region"`
	// The resource type of the SNAT rule.
	SourceType *int `pulumi:"sourceType"`
	// The status of the SNAT rule.
	Status *string `pulumi:"status"`
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId *string `pulumi:"subnetId"`
}

type SnatRuleState struct {
	// The CIDR block connected by SNAT rule (DC side).
	Cidr pulumi.StringPtrInput
	// The creation time of the SNAT rule.
	CreatedAt pulumi.StringPtrInput
	// The description of the SNAT rule.
	Description pulumi.StringPtrInput
	// The floating IP addresses (separated by commas) connected by SNAT rule.
	FloatingIpAddress pulumi.StringPtrInput
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId pulumi.StringPtrInput
	// The frozen EIP associated with the SNAT rule.
	FreezedIpAddress pulumi.StringPtrInput
	// The global EIP addresses (separated by commas) connected by SNAT rule.
	GlobalEipAddress pulumi.StringPtrInput
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId pulumi.StringPtrInput
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId pulumi.StringPtrInput
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId pulumi.StringPtrInput
	// The region where the SNAT rule is located.
	Region pulumi.StringPtrInput
	// The resource type of the SNAT rule.
	SourceType pulumi.IntPtrInput
	// The status of the SNAT rule.
	Status pulumi.StringPtrInput
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId pulumi.StringPtrInput
}

func (SnatRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*snatRuleState)(nil)).Elem()
}

type snatRuleArgs struct {
	// The CIDR block connected by SNAT rule (DC side).
	Cidr *string `pulumi:"cidr"`
	// The description of the SNAT rule.
	Description *string `pulumi:"description"`
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId *string `pulumi:"floatingIpId"`
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId *string `pulumi:"globalEipId"`
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId string `pulumi:"natGatewayId"`
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId *string `pulumi:"networkId"`
	// The region where the SNAT rule is located.
	Region *string `pulumi:"region"`
	// The resource type of the SNAT rule.
	SourceType *int `pulumi:"sourceType"`
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SnatRule resource.
type SnatRuleArgs struct {
	// The CIDR block connected by SNAT rule (DC side).
	Cidr pulumi.StringPtrInput
	// The description of the SNAT rule.
	Description pulumi.StringPtrInput
	// The IDs of floating IPs connected by SNAT rule.
	FloatingIpId pulumi.StringPtrInput
	// The IDs (separated by commas) of global EIPs connected by SNAT rule.
	GlobalEipId pulumi.StringPtrInput
	// schema: Required; The ID of the gateway to which the SNAT rule belongs.
	NatGatewayId pulumi.StringInput
	// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
	NetworkId pulumi.StringPtrInput
	// The region where the SNAT rule is located.
	Region pulumi.StringPtrInput
	// The resource type of the SNAT rule.
	SourceType pulumi.IntPtrInput
	// The network IDs of subnet connected by SNAT rule (VPC side).
	SubnetId pulumi.StringPtrInput
}

func (SnatRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snatRuleArgs)(nil)).Elem()
}

type SnatRuleInput interface {
	pulumi.Input

	ToSnatRuleOutput() SnatRuleOutput
	ToSnatRuleOutputWithContext(ctx context.Context) SnatRuleOutput
}

func (*SnatRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SnatRule)(nil)).Elem()
}

func (i *SnatRule) ToSnatRuleOutput() SnatRuleOutput {
	return i.ToSnatRuleOutputWithContext(context.Background())
}

func (i *SnatRule) ToSnatRuleOutputWithContext(ctx context.Context) SnatRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatRuleOutput)
}

// SnatRuleArrayInput is an input type that accepts SnatRuleArray and SnatRuleArrayOutput values.
// You can construct a concrete instance of `SnatRuleArrayInput` via:
//
//	SnatRuleArray{ SnatRuleArgs{...} }
type SnatRuleArrayInput interface {
	pulumi.Input

	ToSnatRuleArrayOutput() SnatRuleArrayOutput
	ToSnatRuleArrayOutputWithContext(context.Context) SnatRuleArrayOutput
}

type SnatRuleArray []SnatRuleInput

func (SnatRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnatRule)(nil)).Elem()
}

func (i SnatRuleArray) ToSnatRuleArrayOutput() SnatRuleArrayOutput {
	return i.ToSnatRuleArrayOutputWithContext(context.Background())
}

func (i SnatRuleArray) ToSnatRuleArrayOutputWithContext(ctx context.Context) SnatRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatRuleArrayOutput)
}

// SnatRuleMapInput is an input type that accepts SnatRuleMap and SnatRuleMapOutput values.
// You can construct a concrete instance of `SnatRuleMapInput` via:
//
//	SnatRuleMap{ "key": SnatRuleArgs{...} }
type SnatRuleMapInput interface {
	pulumi.Input

	ToSnatRuleMapOutput() SnatRuleMapOutput
	ToSnatRuleMapOutputWithContext(context.Context) SnatRuleMapOutput
}

type SnatRuleMap map[string]SnatRuleInput

func (SnatRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnatRule)(nil)).Elem()
}

func (i SnatRuleMap) ToSnatRuleMapOutput() SnatRuleMapOutput {
	return i.ToSnatRuleMapOutputWithContext(context.Background())
}

func (i SnatRuleMap) ToSnatRuleMapOutputWithContext(ctx context.Context) SnatRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatRuleMapOutput)
}

type SnatRuleOutput struct{ *pulumi.OutputState }

func (SnatRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnatRule)(nil)).Elem()
}

func (o SnatRuleOutput) ToSnatRuleOutput() SnatRuleOutput {
	return o
}

func (o SnatRuleOutput) ToSnatRuleOutputWithContext(ctx context.Context) SnatRuleOutput {
	return o
}

// The CIDR block connected by SNAT rule (DC side).
func (o SnatRuleOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringPtrOutput { return v.Cidr }).(pulumi.StringPtrOutput)
}

// The creation time of the SNAT rule.
func (o SnatRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the SNAT rule.
func (o SnatRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The floating IP addresses (separated by commas) connected by SNAT rule.
func (o SnatRuleOutput) FloatingIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.FloatingIpAddress }).(pulumi.StringOutput)
}

// The IDs of floating IPs connected by SNAT rule.
func (o SnatRuleOutput) FloatingIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.FloatingIpId }).(pulumi.StringOutput)
}

// The frozen EIP associated with the SNAT rule.
func (o SnatRuleOutput) FreezedIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.FreezedIpAddress }).(pulumi.StringOutput)
}

// The global EIP addresses (separated by commas) connected by SNAT rule.
func (o SnatRuleOutput) GlobalEipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.GlobalEipAddress }).(pulumi.StringOutput)
}

// The IDs (separated by commas) of global EIPs connected by SNAT rule.
func (o SnatRuleOutput) GlobalEipId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.GlobalEipId }).(pulumi.StringOutput)
}

// schema: Required; The ID of the gateway to which the SNAT rule belongs.
func (o SnatRuleOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.NatGatewayId }).(pulumi.StringOutput)
}

// Deprecated: schema: Deprecated; Use 'subnet_id' instead.
func (o SnatRuleOutput) NetworkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringPtrOutput { return v.NetworkId }).(pulumi.StringPtrOutput)
}

// The region where the SNAT rule is located.
func (o SnatRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The resource type of the SNAT rule.
func (o SnatRuleOutput) SourceType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.IntPtrOutput { return v.SourceType }).(pulumi.IntPtrOutput)
}

// The status of the SNAT rule.
func (o SnatRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The network IDs of subnet connected by SNAT rule (VPC side).
func (o SnatRuleOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatRule) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type SnatRuleArrayOutput struct{ *pulumi.OutputState }

func (SnatRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnatRule)(nil)).Elem()
}

func (o SnatRuleArrayOutput) ToSnatRuleArrayOutput() SnatRuleArrayOutput {
	return o
}

func (o SnatRuleArrayOutput) ToSnatRuleArrayOutputWithContext(ctx context.Context) SnatRuleArrayOutput {
	return o
}

func (o SnatRuleArrayOutput) Index(i pulumi.IntInput) SnatRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnatRule {
		return vs[0].([]*SnatRule)[vs[1].(int)]
	}).(SnatRuleOutput)
}

type SnatRuleMapOutput struct{ *pulumi.OutputState }

func (SnatRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnatRule)(nil)).Elem()
}

func (o SnatRuleMapOutput) ToSnatRuleMapOutput() SnatRuleMapOutput {
	return o
}

func (o SnatRuleMapOutput) ToSnatRuleMapOutputWithContext(ctx context.Context) SnatRuleMapOutput {
	return o
}

func (o SnatRuleMapOutput) MapIndex(k pulumi.StringInput) SnatRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnatRule {
		return vs[0].(map[string]*SnatRule)[vs[1].(string)]
	}).(SnatRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnatRuleInput)(nil)).Elem(), &SnatRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatRuleArrayInput)(nil)).Elem(), SnatRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatRuleMapInput)(nil)).Elem(), SnatRuleMap{})
	pulumi.RegisterOutputType(SnatRuleOutput{})
	pulumi.RegisterOutputType(SnatRuleArrayOutput{})
	pulumi.RegisterOutputType(SnatRuleMapOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dws

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use this data source to get available flavors of DWS cluster node.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/dws"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dws.GetFlaovrs(ctx, &dws.GetFlaovrsArgs{
//				Vcpus: pulumi.IntRef(8),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetFlaovrs(ctx *pulumi.Context, args *GetFlaovrsArgs, opts ...pulumi.InvokeOption) (*GetFlaovrsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFlaovrsResult
	err := ctx.Invoke("sbercloud:Dws/getFlaovrs:getFlaovrs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlaovrs.
type GetFlaovrsArgs struct {
	// The availability zone name.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The type of datastore.\
	// The options are as follows:
	// - **dws**: OLAP, elastic scaling, unlimited scaling of compute and storage capacity.
	// - **hybrid**: a single data warehouse used for transaction and analytics workloads,
	//   in single-node or cluster mode.
	// - **stream**: built-in time series operators; up to 40:1 compression ratio; applicable to IoT services.
	DatastoreType *string `pulumi:"datastoreType"`
	// The ram of the dws node flavor in GB.
	Memory *int `pulumi:"memory"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// The vcpus of the dws node flavor.
	Vcpus *int `pulumi:"vcpus"`
}

// A collection of values returned by getFlaovrs.
type GetFlaovrsResult struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The type of datastore.\
	// The options are as follows:
	// - **dws**: OLAP, elastic scaling, unlimited scaling of compute and storage capacity.
	// - **hybrid**: a single data warehouse used for transaction and analytics workloads,
	//   in single-node or cluster mode.
	// - **stream**: built-in time series operators; up to 40:1 compression ratio; applicable to IoT services.
	DatastoreType *string `pulumi:"datastoreType"`
	// The list of flavor detail.
	// The Flavors structure is documented below.
	Flavors []GetFlaovrsFlavor `pulumi:"flavors"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ram of the dws node flavor in GB.
	Memory *int   `pulumi:"memory"`
	Region string `pulumi:"region"`
	// The vcpus of the dws node flavor.
	Vcpus *int `pulumi:"vcpus"`
}

func GetFlaovrsOutput(ctx *pulumi.Context, args GetFlaovrsOutputArgs, opts ...pulumi.InvokeOption) GetFlaovrsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetFlaovrsResultOutput, error) {
			args := v.(GetFlaovrsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Dws/getFlaovrs:getFlaovrs", args, GetFlaovrsResultOutput{}, options).(GetFlaovrsResultOutput), nil
		}).(GetFlaovrsResultOutput)
}

// A collection of arguments for invoking getFlaovrs.
type GetFlaovrsOutputArgs struct {
	// The availability zone name.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// The type of datastore.\
	// The options are as follows:
	// - **dws**: OLAP, elastic scaling, unlimited scaling of compute and storage capacity.
	// - **hybrid**: a single data warehouse used for transaction and analytics workloads,
	//   in single-node or cluster mode.
	// - **stream**: built-in time series operators; up to 40:1 compression ratio; applicable to IoT services.
	DatastoreType pulumi.StringPtrInput `pulumi:"datastoreType"`
	// The ram of the dws node flavor in GB.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// Specifies the region in which to query the data source.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The vcpus of the dws node flavor.
	Vcpus pulumi.IntPtrInput `pulumi:"vcpus"`
}

func (GetFlaovrsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlaovrsArgs)(nil)).Elem()
}

// A collection of values returned by getFlaovrs.
type GetFlaovrsResultOutput struct{ *pulumi.OutputState }

func (GetFlaovrsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlaovrsResult)(nil)).Elem()
}

func (o GetFlaovrsResultOutput) ToGetFlaovrsResultOutput() GetFlaovrsResultOutput {
	return o
}

func (o GetFlaovrsResultOutput) ToGetFlaovrsResultOutputWithContext(ctx context.Context) GetFlaovrsResultOutput {
	return o
}

func (o GetFlaovrsResultOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlaovrsResult) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// The type of datastore.\
// The options are as follows:
//   - **dws**: OLAP, elastic scaling, unlimited scaling of compute and storage capacity.
//   - **hybrid**: a single data warehouse used for transaction and analytics workloads,
//     in single-node or cluster mode.
//   - **stream**: built-in time series operators; up to 40:1 compression ratio; applicable to IoT services.
func (o GetFlaovrsResultOutput) DatastoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFlaovrsResult) *string { return v.DatastoreType }).(pulumi.StringPtrOutput)
}

// The list of flavor detail.
// The Flavors structure is documented below.
func (o GetFlaovrsResultOutput) Flavors() GetFlaovrsFlavorArrayOutput {
	return o.ApplyT(func(v GetFlaovrsResult) []GetFlaovrsFlavor { return v.Flavors }).(GetFlaovrsFlavorArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFlaovrsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlaovrsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ram of the dws node flavor in GB.
func (o GetFlaovrsResultOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlaovrsResult) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o GetFlaovrsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlaovrsResult) string { return v.Region }).(pulumi.StringOutput)
}

// The vcpus of the dws node flavor.
func (o GetFlaovrsResultOutput) Vcpus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetFlaovrsResult) *int { return v.Vcpus }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFlaovrsResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cbr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages a CBR Policy resource within Sbercloud.
//
// ## Example Usage
//
// ## Import
//
// Policies can be imported by their `id`. For example,
//
// ```sh
// $ pulumi import sbercloud:Cbr/policy:Policy test 4d2c2939-774f-42ef-ab15-e5b126b11ace
// ```
type Policy struct {
	pulumi.CustomResourceState

	// Specifies the scheduling rule for the CBR policy backup execution.
	// The object structure is documented below.
	BackupCycle PolicyBackupCycleOutput `pulumi:"backupCycle"`
	// Specifies the maximum number of retained backups. The value ranges from `2` to
	// `99,999`. This parameter and `timePeriod` are alternative.
	BackupQuantity pulumi.IntPtrOutput `pulumi:"backupQuantity"`
	// Specifies the ID of the replication destination project, which is
	// mandatory for cross-region replication. Required if `protectionType` is **replication**.
	DestinationProjectId pulumi.StringPtrOutput `pulumi:"destinationProjectId"`
	// Specifies the name of the replication destination region, which is mandatory
	// for cross-region replication. Required if `protectionType` is **replication**.
	DestinationRegion pulumi.StringPtrOutput `pulumi:"destinationRegion"`
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration pulumi.BoolPtrOutput `pulumi:"enableAcceleration"`
	// Specifies whether to enable the CBR policy. Default to **true**.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the long-term retention rules, which is an advanced options of
	// the `backupQuantity`. The object structure is documented below.
	//
	// > The configuration of `longTermRetention` and `backupQuantity` will take effect together.
	// When the number of retained backups exceeds the preset value (number of `backupQuantity`), the system automatically
	// deletes the earliest backups. By default, the system automatically clears data every other day.
	LongTermRetention PolicyLongTermRetentionPtrOutput `pulumi:"longTermRetention"`
	// Specifies a unique name of the CBR policy. This parameter can contain a maximum of 64
	// characters, which may consist of chinese characters, letters, digits, underscores(_) and hyphens (-).
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the region in which to create the CBR policy. If omitted, the
	// provider-level region will be used. Changing this will create a new policy.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the duration (in days) for retained backups. The value ranges from `2` to
	// `99,999`.
	//
	// > **NOTE:** If this `backupQuantity` and `timePeriod` are both left blank, the backups will be retained permanently.
	TimePeriod pulumi.IntPtrOutput `pulumi:"timePeriod"`
	// Specifies the UTC time zone, e.g.: `UTC+08:00`.
	// Only available if `longTermRetention` is set.
	//
	// <a name="cbrPolicyBackupCycle"></a>
	// The `backupCycle` block supports:
	TimeZone pulumi.StringOutput `pulumi:"timeZone"`
	// Specifies the protection type of the CBR policy.
	// Valid values are **backup** and **replication**.
	// Changing this will create a new policy.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupCycle == nil {
		return nil, errors.New("invalid value for required argument 'BackupCycle'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("sbercloud:Cbr/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("sbercloud:Cbr/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// Specifies the scheduling rule for the CBR policy backup execution.
	// The object structure is documented below.
	BackupCycle *PolicyBackupCycle `pulumi:"backupCycle"`
	// Specifies the maximum number of retained backups. The value ranges from `2` to
	// `99,999`. This parameter and `timePeriod` are alternative.
	BackupQuantity *int `pulumi:"backupQuantity"`
	// Specifies the ID of the replication destination project, which is
	// mandatory for cross-region replication. Required if `protectionType` is **replication**.
	DestinationProjectId *string `pulumi:"destinationProjectId"`
	// Specifies the name of the replication destination region, which is mandatory
	// for cross-region replication. Required if `protectionType` is **replication**.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// Specifies whether to enable the CBR policy. Default to **true**.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the long-term retention rules, which is an advanced options of
	// the `backupQuantity`. The object structure is documented below.
	//
	// > The configuration of `longTermRetention` and `backupQuantity` will take effect together.
	// When the number of retained backups exceeds the preset value (number of `backupQuantity`), the system automatically
	// deletes the earliest backups. By default, the system automatically clears data every other day.
	LongTermRetention *PolicyLongTermRetention `pulumi:"longTermRetention"`
	// Specifies a unique name of the CBR policy. This parameter can contain a maximum of 64
	// characters, which may consist of chinese characters, letters, digits, underscores(_) and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the CBR policy. If omitted, the
	// provider-level region will be used. Changing this will create a new policy.
	Region *string `pulumi:"region"`
	// Specifies the duration (in days) for retained backups. The value ranges from `2` to
	// `99,999`.
	//
	// > **NOTE:** If this `backupQuantity` and `timePeriod` are both left blank, the backups will be retained permanently.
	TimePeriod *int `pulumi:"timePeriod"`
	// Specifies the UTC time zone, e.g.: `UTC+08:00`.
	// Only available if `longTermRetention` is set.
	//
	// <a name="cbrPolicyBackupCycle"></a>
	// The `backupCycle` block supports:
	TimeZone *string `pulumi:"timeZone"`
	// Specifies the protection type of the CBR policy.
	// Valid values are **backup** and **replication**.
	// Changing this will create a new policy.
	Type *string `pulumi:"type"`
}

type PolicyState struct {
	// Specifies the scheduling rule for the CBR policy backup execution.
	// The object structure is documented below.
	BackupCycle PolicyBackupCyclePtrInput
	// Specifies the maximum number of retained backups. The value ranges from `2` to
	// `99,999`. This parameter and `timePeriod` are alternative.
	BackupQuantity pulumi.IntPtrInput
	// Specifies the ID of the replication destination project, which is
	// mandatory for cross-region replication. Required if `protectionType` is **replication**.
	DestinationProjectId pulumi.StringPtrInput
	// Specifies the name of the replication destination region, which is mandatory
	// for cross-region replication. Required if `protectionType` is **replication**.
	DestinationRegion pulumi.StringPtrInput
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration pulumi.BoolPtrInput
	// Specifies whether to enable the CBR policy. Default to **true**.
	Enabled pulumi.BoolPtrInput
	// Specifies the long-term retention rules, which is an advanced options of
	// the `backupQuantity`. The object structure is documented below.
	//
	// > The configuration of `longTermRetention` and `backupQuantity` will take effect together.
	// When the number of retained backups exceeds the preset value (number of `backupQuantity`), the system automatically
	// deletes the earliest backups. By default, the system automatically clears data every other day.
	LongTermRetention PolicyLongTermRetentionPtrInput
	// Specifies a unique name of the CBR policy. This parameter can contain a maximum of 64
	// characters, which may consist of chinese characters, letters, digits, underscores(_) and hyphens (-).
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the CBR policy. If omitted, the
	// provider-level region will be used. Changing this will create a new policy.
	Region pulumi.StringPtrInput
	// Specifies the duration (in days) for retained backups. The value ranges from `2` to
	// `99,999`.
	//
	// > **NOTE:** If this `backupQuantity` and `timePeriod` are both left blank, the backups will be retained permanently.
	TimePeriod pulumi.IntPtrInput
	// Specifies the UTC time zone, e.g.: `UTC+08:00`.
	// Only available if `longTermRetention` is set.
	//
	// <a name="cbrPolicyBackupCycle"></a>
	// The `backupCycle` block supports:
	TimeZone pulumi.StringPtrInput
	// Specifies the protection type of the CBR policy.
	// Valid values are **backup** and **replication**.
	// Changing this will create a new policy.
	Type pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// Specifies the scheduling rule for the CBR policy backup execution.
	// The object structure is documented below.
	BackupCycle PolicyBackupCycle `pulumi:"backupCycle"`
	// Specifies the maximum number of retained backups. The value ranges from `2` to
	// `99,999`. This parameter and `timePeriod` are alternative.
	BackupQuantity *int `pulumi:"backupQuantity"`
	// Specifies the ID of the replication destination project, which is
	// mandatory for cross-region replication. Required if `protectionType` is **replication**.
	DestinationProjectId *string `pulumi:"destinationProjectId"`
	// Specifies the name of the replication destination region, which is mandatory
	// for cross-region replication. Required if `protectionType` is **replication**.
	DestinationRegion *string `pulumi:"destinationRegion"`
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration *bool `pulumi:"enableAcceleration"`
	// Specifies whether to enable the CBR policy. Default to **true**.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the long-term retention rules, which is an advanced options of
	// the `backupQuantity`. The object structure is documented below.
	//
	// > The configuration of `longTermRetention` and `backupQuantity` will take effect together.
	// When the number of retained backups exceeds the preset value (number of `backupQuantity`), the system automatically
	// deletes the earliest backups. By default, the system automatically clears data every other day.
	LongTermRetention *PolicyLongTermRetention `pulumi:"longTermRetention"`
	// Specifies a unique name of the CBR policy. This parameter can contain a maximum of 64
	// characters, which may consist of chinese characters, letters, digits, underscores(_) and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies the region in which to create the CBR policy. If omitted, the
	// provider-level region will be used. Changing this will create a new policy.
	Region *string `pulumi:"region"`
	// Specifies the duration (in days) for retained backups. The value ranges from `2` to
	// `99,999`.
	//
	// > **NOTE:** If this `backupQuantity` and `timePeriod` are both left blank, the backups will be retained permanently.
	TimePeriod *int `pulumi:"timePeriod"`
	// Specifies the UTC time zone, e.g.: `UTC+08:00`.
	// Only available if `longTermRetention` is set.
	//
	// <a name="cbrPolicyBackupCycle"></a>
	// The `backupCycle` block supports:
	TimeZone *string `pulumi:"timeZone"`
	// Specifies the protection type of the CBR policy.
	// Valid values are **backup** and **replication**.
	// Changing this will create a new policy.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// Specifies the scheduling rule for the CBR policy backup execution.
	// The object structure is documented below.
	BackupCycle PolicyBackupCycleInput
	// Specifies the maximum number of retained backups. The value ranges from `2` to
	// `99,999`. This parameter and `timePeriod` are alternative.
	BackupQuantity pulumi.IntPtrInput
	// Specifies the ID of the replication destination project, which is
	// mandatory for cross-region replication. Required if `protectionType` is **replication**.
	DestinationProjectId pulumi.StringPtrInput
	// Specifies the name of the replication destination region, which is mandatory
	// for cross-region replication. Required if `protectionType` is **replication**.
	DestinationRegion pulumi.StringPtrInput
	// Whether to enable the acceleration function to shorten the replication time for cross-region
	EnableAcceleration pulumi.BoolPtrInput
	// Specifies whether to enable the CBR policy. Default to **true**.
	Enabled pulumi.BoolPtrInput
	// Specifies the long-term retention rules, which is an advanced options of
	// the `backupQuantity`. The object structure is documented below.
	//
	// > The configuration of `longTermRetention` and `backupQuantity` will take effect together.
	// When the number of retained backups exceeds the preset value (number of `backupQuantity`), the system automatically
	// deletes the earliest backups. By default, the system automatically clears data every other day.
	LongTermRetention PolicyLongTermRetentionPtrInput
	// Specifies a unique name of the CBR policy. This parameter can contain a maximum of 64
	// characters, which may consist of chinese characters, letters, digits, underscores(_) and hyphens (-).
	Name pulumi.StringPtrInput
	// Specifies the region in which to create the CBR policy. If omitted, the
	// provider-level region will be used. Changing this will create a new policy.
	Region pulumi.StringPtrInput
	// Specifies the duration (in days) for retained backups. The value ranges from `2` to
	// `99,999`.
	//
	// > **NOTE:** If this `backupQuantity` and `timePeriod` are both left blank, the backups will be retained permanently.
	TimePeriod pulumi.IntPtrInput
	// Specifies the UTC time zone, e.g.: `UTC+08:00`.
	// Only available if `longTermRetention` is set.
	//
	// <a name="cbrPolicyBackupCycle"></a>
	// The `backupCycle` block supports:
	TimeZone pulumi.StringPtrInput
	// Specifies the protection type of the CBR policy.
	// Valid values are **backup** and **replication**.
	// Changing this will create a new policy.
	Type pulumi.StringInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// Specifies the scheduling rule for the CBR policy backup execution.
// The object structure is documented below.
func (o PolicyOutput) BackupCycle() PolicyBackupCycleOutput {
	return o.ApplyT(func(v *Policy) PolicyBackupCycleOutput { return v.BackupCycle }).(PolicyBackupCycleOutput)
}

// Specifies the maximum number of retained backups. The value ranges from `2` to
// `99,999`. This parameter and `timePeriod` are alternative.
func (o PolicyOutput) BackupQuantity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.BackupQuantity }).(pulumi.IntPtrOutput)
}

// Specifies the ID of the replication destination project, which is
// mandatory for cross-region replication. Required if `protectionType` is **replication**.
func (o PolicyOutput) DestinationProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.DestinationProjectId }).(pulumi.StringPtrOutput)
}

// Specifies the name of the replication destination region, which is mandatory
// for cross-region replication. Required if `protectionType` is **replication**.
func (o PolicyOutput) DestinationRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.DestinationRegion }).(pulumi.StringPtrOutput)
}

// Whether to enable the acceleration function to shorten the replication time for cross-region
func (o PolicyOutput) EnableAcceleration() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.EnableAcceleration }).(pulumi.BoolPtrOutput)
}

// Specifies whether to enable the CBR policy. Default to **true**.
func (o PolicyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the long-term retention rules, which is an advanced options of
// the `backupQuantity`. The object structure is documented below.
//
// > The configuration of `longTermRetention` and `backupQuantity` will take effect together.
// When the number of retained backups exceeds the preset value (number of `backupQuantity`), the system automatically
// deletes the earliest backups. By default, the system automatically clears data every other day.
func (o PolicyOutput) LongTermRetention() PolicyLongTermRetentionPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyLongTermRetentionPtrOutput { return v.LongTermRetention }).(PolicyLongTermRetentionPtrOutput)
}

// Specifies a unique name of the CBR policy. This parameter can contain a maximum of 64
// characters, which may consist of chinese characters, letters, digits, underscores(_) and hyphens (-).
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region in which to create the CBR policy. If omitted, the
// provider-level region will be used. Changing this will create a new policy.
func (o PolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the duration (in days) for retained backups. The value ranges from `2` to
// `99,999`.
//
// > **NOTE:** If this `backupQuantity` and `timePeriod` are both left blank, the backups will be retained permanently.
func (o PolicyOutput) TimePeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntPtrOutput { return v.TimePeriod }).(pulumi.IntPtrOutput)
}

// Specifies the UTC time zone, e.g.: `UTC+08:00`.
// Only available if `longTermRetention` is set.
//
// <a name="cbrPolicyBackupCycle"></a>
// The `backupCycle` block supports:
func (o PolicyOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.TimeZone }).(pulumi.StringOutput)
}

// Specifies the protection type of the CBR policy.
// Valid values are **backup** and **replication**.
// Changing this will create a new policy.
func (o PolicyOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}

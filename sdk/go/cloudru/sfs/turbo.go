// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Turbo struct {
	pulumi.CustomResourceState

	AutoRenew           pulumi.StringPtrOutput `pulumi:"autoRenew"`
	AvailabilityZone    pulumi.StringOutput    `pulumi:"availabilityZone"`
	AvailableCapacity   pulumi.StringOutput    `pulumi:"availableCapacity"`
	BackupId            pulumi.StringOutput    `pulumi:"backupId"`
	ChargingMode        pulumi.StringOutput    `pulumi:"chargingMode"`
	CryptKeyId          pulumi.StringPtrOutput `pulumi:"cryptKeyId"`
	DedicatedFlavor     pulumi.StringPtrOutput `pulumi:"dedicatedFlavor"`
	DedicatedStorageId  pulumi.StringPtrOutput `pulumi:"dedicatedStorageId"`
	Enhanced            pulumi.BoolOutput      `pulumi:"enhanced"`
	EnterpriseProjectId pulumi.StringOutput    `pulumi:"enterpriseProjectId"`
	ExportLocation      pulumi.StringOutput    `pulumi:"exportLocation"`
	HpcBandwidth        pulumi.StringOutput    `pulumi:"hpcBandwidth"`
	HpcCacheBandwidth   pulumi.StringOutput    `pulumi:"hpcCacheBandwidth"`
	Name                pulumi.StringOutput    `pulumi:"name"`
	Period              pulumi.IntPtrOutput    `pulumi:"period"`
	PeriodUnit          pulumi.StringPtrOutput `pulumi:"periodUnit"`
	Region              pulumi.StringOutput    `pulumi:"region"`
	SecurityGroupId     pulumi.StringOutput    `pulumi:"securityGroupId"`
	ShareProto          pulumi.StringPtrOutput `pulumi:"shareProto"`
	ShareType           pulumi.StringPtrOutput `pulumi:"shareType"`
	Size                pulumi.IntOutput       `pulumi:"size"`
	Status              pulumi.StringOutput    `pulumi:"status"`
	SubnetId            pulumi.StringOutput    `pulumi:"subnetId"`
	Tags                pulumi.StringMapOutput `pulumi:"tags"`
	Version             pulumi.StringOutput    `pulumi:"version"`
	VpcId               pulumi.StringOutput    `pulumi:"vpcId"`
}

// NewTurbo registers a new resource with the given unique name, arguments, and options.
func NewTurbo(ctx *pulumi.Context,
	name string, args *TurboArgs, opts ...pulumi.ResourceOption) (*Turbo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Turbo
	err := ctx.RegisterResource("sbercloud:Sfs/turbo:Turbo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTurbo gets an existing Turbo resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTurbo(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TurboState, opts ...pulumi.ResourceOption) (*Turbo, error) {
	var resource Turbo
	err := ctx.ReadResource("sbercloud:Sfs/turbo:Turbo", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Turbo resources.
type turboState struct {
	AutoRenew           *string           `pulumi:"autoRenew"`
	AvailabilityZone    *string           `pulumi:"availabilityZone"`
	AvailableCapacity   *string           `pulumi:"availableCapacity"`
	BackupId            *string           `pulumi:"backupId"`
	ChargingMode        *string           `pulumi:"chargingMode"`
	CryptKeyId          *string           `pulumi:"cryptKeyId"`
	DedicatedFlavor     *string           `pulumi:"dedicatedFlavor"`
	DedicatedStorageId  *string           `pulumi:"dedicatedStorageId"`
	Enhanced            *bool             `pulumi:"enhanced"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	ExportLocation      *string           `pulumi:"exportLocation"`
	HpcBandwidth        *string           `pulumi:"hpcBandwidth"`
	HpcCacheBandwidth   *string           `pulumi:"hpcCacheBandwidth"`
	Name                *string           `pulumi:"name"`
	Period              *int              `pulumi:"period"`
	PeriodUnit          *string           `pulumi:"periodUnit"`
	Region              *string           `pulumi:"region"`
	SecurityGroupId     *string           `pulumi:"securityGroupId"`
	ShareProto          *string           `pulumi:"shareProto"`
	ShareType           *string           `pulumi:"shareType"`
	Size                *int              `pulumi:"size"`
	Status              *string           `pulumi:"status"`
	SubnetId            *string           `pulumi:"subnetId"`
	Tags                map[string]string `pulumi:"tags"`
	Version             *string           `pulumi:"version"`
	VpcId               *string           `pulumi:"vpcId"`
}

type TurboState struct {
	AutoRenew           pulumi.StringPtrInput
	AvailabilityZone    pulumi.StringPtrInput
	AvailableCapacity   pulumi.StringPtrInput
	BackupId            pulumi.StringPtrInput
	ChargingMode        pulumi.StringPtrInput
	CryptKeyId          pulumi.StringPtrInput
	DedicatedFlavor     pulumi.StringPtrInput
	DedicatedStorageId  pulumi.StringPtrInput
	Enhanced            pulumi.BoolPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ExportLocation      pulumi.StringPtrInput
	HpcBandwidth        pulumi.StringPtrInput
	HpcCacheBandwidth   pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Period              pulumi.IntPtrInput
	PeriodUnit          pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	SecurityGroupId     pulumi.StringPtrInput
	ShareProto          pulumi.StringPtrInput
	ShareType           pulumi.StringPtrInput
	Size                pulumi.IntPtrInput
	Status              pulumi.StringPtrInput
	SubnetId            pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	Version             pulumi.StringPtrInput
	VpcId               pulumi.StringPtrInput
}

func (TurboState) ElementType() reflect.Type {
	return reflect.TypeOf((*turboState)(nil)).Elem()
}

type turboArgs struct {
	AutoRenew           *string           `pulumi:"autoRenew"`
	AvailabilityZone    string            `pulumi:"availabilityZone"`
	BackupId            *string           `pulumi:"backupId"`
	ChargingMode        *string           `pulumi:"chargingMode"`
	CryptKeyId          *string           `pulumi:"cryptKeyId"`
	DedicatedFlavor     *string           `pulumi:"dedicatedFlavor"`
	DedicatedStorageId  *string           `pulumi:"dedicatedStorageId"`
	Enhanced            *bool             `pulumi:"enhanced"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	HpcBandwidth        *string           `pulumi:"hpcBandwidth"`
	HpcCacheBandwidth   *string           `pulumi:"hpcCacheBandwidth"`
	Name                *string           `pulumi:"name"`
	Period              *int              `pulumi:"period"`
	PeriodUnit          *string           `pulumi:"periodUnit"`
	Region              *string           `pulumi:"region"`
	SecurityGroupId     string            `pulumi:"securityGroupId"`
	ShareProto          *string           `pulumi:"shareProto"`
	ShareType           *string           `pulumi:"shareType"`
	Size                int               `pulumi:"size"`
	SubnetId            string            `pulumi:"subnetId"`
	Tags                map[string]string `pulumi:"tags"`
	VpcId               string            `pulumi:"vpcId"`
}

// The set of arguments for constructing a Turbo resource.
type TurboArgs struct {
	AutoRenew           pulumi.StringPtrInput
	AvailabilityZone    pulumi.StringInput
	BackupId            pulumi.StringPtrInput
	ChargingMode        pulumi.StringPtrInput
	CryptKeyId          pulumi.StringPtrInput
	DedicatedFlavor     pulumi.StringPtrInput
	DedicatedStorageId  pulumi.StringPtrInput
	Enhanced            pulumi.BoolPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	HpcBandwidth        pulumi.StringPtrInput
	HpcCacheBandwidth   pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	Period              pulumi.IntPtrInput
	PeriodUnit          pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	SecurityGroupId     pulumi.StringInput
	ShareProto          pulumi.StringPtrInput
	ShareType           pulumi.StringPtrInput
	Size                pulumi.IntInput
	SubnetId            pulumi.StringInput
	Tags                pulumi.StringMapInput
	VpcId               pulumi.StringInput
}

func (TurboArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*turboArgs)(nil)).Elem()
}

type TurboInput interface {
	pulumi.Input

	ToTurboOutput() TurboOutput
	ToTurboOutputWithContext(ctx context.Context) TurboOutput
}

func (*Turbo) ElementType() reflect.Type {
	return reflect.TypeOf((**Turbo)(nil)).Elem()
}

func (i *Turbo) ToTurboOutput() TurboOutput {
	return i.ToTurboOutputWithContext(context.Background())
}

func (i *Turbo) ToTurboOutputWithContext(ctx context.Context) TurboOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurboOutput)
}

// TurboArrayInput is an input type that accepts TurboArray and TurboArrayOutput values.
// You can construct a concrete instance of `TurboArrayInput` via:
//
//	TurboArray{ TurboArgs{...} }
type TurboArrayInput interface {
	pulumi.Input

	ToTurboArrayOutput() TurboArrayOutput
	ToTurboArrayOutputWithContext(context.Context) TurboArrayOutput
}

type TurboArray []TurboInput

func (TurboArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Turbo)(nil)).Elem()
}

func (i TurboArray) ToTurboArrayOutput() TurboArrayOutput {
	return i.ToTurboArrayOutputWithContext(context.Background())
}

func (i TurboArray) ToTurboArrayOutputWithContext(ctx context.Context) TurboArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurboArrayOutput)
}

// TurboMapInput is an input type that accepts TurboMap and TurboMapOutput values.
// You can construct a concrete instance of `TurboMapInput` via:
//
//	TurboMap{ "key": TurboArgs{...} }
type TurboMapInput interface {
	pulumi.Input

	ToTurboMapOutput() TurboMapOutput
	ToTurboMapOutputWithContext(context.Context) TurboMapOutput
}

type TurboMap map[string]TurboInput

func (TurboMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Turbo)(nil)).Elem()
}

func (i TurboMap) ToTurboMapOutput() TurboMapOutput {
	return i.ToTurboMapOutputWithContext(context.Background())
}

func (i TurboMap) ToTurboMapOutputWithContext(ctx context.Context) TurboMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TurboMapOutput)
}

type TurboOutput struct{ *pulumi.OutputState }

func (TurboOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Turbo)(nil)).Elem()
}

func (o TurboOutput) ToTurboOutput() TurboOutput {
	return o
}

func (o TurboOutput) ToTurboOutputWithContext(ctx context.Context) TurboOutput {
	return o
}

func (o TurboOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

func (o TurboOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o TurboOutput) AvailableCapacity() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.AvailableCapacity }).(pulumi.StringOutput)
}

func (o TurboOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.BackupId }).(pulumi.StringOutput)
}

func (o TurboOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o TurboOutput) CryptKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.CryptKeyId }).(pulumi.StringPtrOutput)
}

func (o TurboOutput) DedicatedFlavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.DedicatedFlavor }).(pulumi.StringPtrOutput)
}

func (o TurboOutput) DedicatedStorageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.DedicatedStorageId }).(pulumi.StringPtrOutput)
}

func (o TurboOutput) Enhanced() pulumi.BoolOutput {
	return o.ApplyT(func(v *Turbo) pulumi.BoolOutput { return v.Enhanced }).(pulumi.BoolOutput)
}

func (o TurboOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o TurboOutput) ExportLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.ExportLocation }).(pulumi.StringOutput)
}

func (o TurboOutput) HpcBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.HpcBandwidth }).(pulumi.StringOutput)
}

func (o TurboOutput) HpcCacheBandwidth() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.HpcCacheBandwidth }).(pulumi.StringOutput)
}

func (o TurboOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o TurboOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o TurboOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

func (o TurboOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o TurboOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

func (o TurboOutput) ShareProto() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.ShareProto }).(pulumi.StringPtrOutput)
}

func (o TurboOutput) ShareType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringPtrOutput { return v.ShareType }).(pulumi.StringPtrOutput)
}

func (o TurboOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Turbo) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o TurboOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o TurboOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o TurboOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o TurboOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

func (o TurboOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Turbo) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type TurboArrayOutput struct{ *pulumi.OutputState }

func (TurboArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Turbo)(nil)).Elem()
}

func (o TurboArrayOutput) ToTurboArrayOutput() TurboArrayOutput {
	return o
}

func (o TurboArrayOutput) ToTurboArrayOutputWithContext(ctx context.Context) TurboArrayOutput {
	return o
}

func (o TurboArrayOutput) Index(i pulumi.IntInput) TurboOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Turbo {
		return vs[0].([]*Turbo)[vs[1].(int)]
	}).(TurboOutput)
}

type TurboMapOutput struct{ *pulumi.OutputState }

func (TurboMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Turbo)(nil)).Elem()
}

func (o TurboMapOutput) ToTurboMapOutput() TurboMapOutput {
	return o
}

func (o TurboMapOutput) ToTurboMapOutputWithContext(ctx context.Context) TurboMapOutput {
	return o
}

func (o TurboMapOutput) MapIndex(k pulumi.StringInput) TurboOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Turbo {
		return vs[0].(map[string]*Turbo)[vs[1].(string)]
	}).(TurboOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TurboInput)(nil)).Elem(), &Turbo{})
	pulumi.RegisterInputType(reflect.TypeOf((*TurboArrayInput)(nil)).Elem(), TurboArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TurboMapInput)(nil)).Elem(), TurboMap{})
	pulumi.RegisterOutputType(TurboOutput{})
	pulumi.RegisterOutputType(TurboArrayOutput{})
	pulumi.RegisterOutputType(TurboMapOutput{})
}

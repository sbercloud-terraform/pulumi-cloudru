// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type MysqlAccount struct {
	pulumi.CustomResourceState

	// Specifies remarks of the DB account.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the password of the DB account.
	Password pulumi.StringOutput `pulumi:"password"`
	Region   pulumi.StringOutput `pulumi:"region"`
}

// NewMysqlAccount registers a new resource with the given unique name, arguments, and options.
func NewMysqlAccount(ctx *pulumi.Context,
	name string, args *MysqlAccountArgs, opts ...pulumi.ResourceOption) (*MysqlAccount, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MysqlAccount
	err := ctx.RegisterResource("cloudru:Rds/mysqlAccount:MysqlAccount", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlAccount gets an existing MysqlAccount resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlAccountState, opts ...pulumi.ResourceOption) (*MysqlAccount, error) {
	var resource MysqlAccount
	err := ctx.ReadResource("cloudru:Rds/mysqlAccount:MysqlAccount", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlAccount resources.
type mysqlAccountState struct {
	// Specifies remarks of the DB account.
	Description *string `pulumi:"description"`
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts []string `pulumi:"hosts"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId *string `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account.
	Password *string `pulumi:"password"`
	Region   *string `pulumi:"region"`
}

type MysqlAccountState struct {
	// Specifies remarks of the DB account.
	Description pulumi.StringPtrInput
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts pulumi.StringArrayInput
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringPtrInput
	// Specifies the username of the DB account.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account.
	Password pulumi.StringPtrInput
	Region   pulumi.StringPtrInput
}

func (MysqlAccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlAccountState)(nil)).Elem()
}

type mysqlAccountArgs struct {
	// Specifies remarks of the DB account.
	Description *string `pulumi:"description"`
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts []string `pulumi:"hosts"`
	// Specifies the ID of the RDS Mysql instance.
	InstanceId string `pulumi:"instanceId"`
	// Specifies the username of the DB account.
	Name *string `pulumi:"name"`
	// Specifies the password of the DB account.
	Password string  `pulumi:"password"`
	Region   *string `pulumi:"region"`
}

// The set of arguments for constructing a MysqlAccount resource.
type MysqlAccountArgs struct {
	// Specifies remarks of the DB account.
	Description pulumi.StringPtrInput
	// Specifies the IP addresses that are allowed to access your DB instance.
	Hosts pulumi.StringArrayInput
	// Specifies the ID of the RDS Mysql instance.
	InstanceId pulumi.StringInput
	// Specifies the username of the DB account.
	Name pulumi.StringPtrInput
	// Specifies the password of the DB account.
	Password pulumi.StringInput
	Region   pulumi.StringPtrInput
}

func (MysqlAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlAccountArgs)(nil)).Elem()
}

type MysqlAccountInput interface {
	pulumi.Input

	ToMysqlAccountOutput() MysqlAccountOutput
	ToMysqlAccountOutputWithContext(ctx context.Context) MysqlAccountOutput
}

func (*MysqlAccount) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlAccount)(nil)).Elem()
}

func (i *MysqlAccount) ToMysqlAccountOutput() MysqlAccountOutput {
	return i.ToMysqlAccountOutputWithContext(context.Background())
}

func (i *MysqlAccount) ToMysqlAccountOutputWithContext(ctx context.Context) MysqlAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlAccountOutput)
}

// MysqlAccountArrayInput is an input type that accepts MysqlAccountArray and MysqlAccountArrayOutput values.
// You can construct a concrete instance of `MysqlAccountArrayInput` via:
//
//	MysqlAccountArray{ MysqlAccountArgs{...} }
type MysqlAccountArrayInput interface {
	pulumi.Input

	ToMysqlAccountArrayOutput() MysqlAccountArrayOutput
	ToMysqlAccountArrayOutputWithContext(context.Context) MysqlAccountArrayOutput
}

type MysqlAccountArray []MysqlAccountInput

func (MysqlAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlAccount)(nil)).Elem()
}

func (i MysqlAccountArray) ToMysqlAccountArrayOutput() MysqlAccountArrayOutput {
	return i.ToMysqlAccountArrayOutputWithContext(context.Background())
}

func (i MysqlAccountArray) ToMysqlAccountArrayOutputWithContext(ctx context.Context) MysqlAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlAccountArrayOutput)
}

// MysqlAccountMapInput is an input type that accepts MysqlAccountMap and MysqlAccountMapOutput values.
// You can construct a concrete instance of `MysqlAccountMapInput` via:
//
//	MysqlAccountMap{ "key": MysqlAccountArgs{...} }
type MysqlAccountMapInput interface {
	pulumi.Input

	ToMysqlAccountMapOutput() MysqlAccountMapOutput
	ToMysqlAccountMapOutputWithContext(context.Context) MysqlAccountMapOutput
}

type MysqlAccountMap map[string]MysqlAccountInput

func (MysqlAccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlAccount)(nil)).Elem()
}

func (i MysqlAccountMap) ToMysqlAccountMapOutput() MysqlAccountMapOutput {
	return i.ToMysqlAccountMapOutputWithContext(context.Background())
}

func (i MysqlAccountMap) ToMysqlAccountMapOutputWithContext(ctx context.Context) MysqlAccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlAccountMapOutput)
}

type MysqlAccountOutput struct{ *pulumi.OutputState }

func (MysqlAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlAccount)(nil)).Elem()
}

func (o MysqlAccountOutput) ToMysqlAccountOutput() MysqlAccountOutput {
	return o
}

func (o MysqlAccountOutput) ToMysqlAccountOutputWithContext(ctx context.Context) MysqlAccountOutput {
	return o
}

// Specifies remarks of the DB account.
func (o MysqlAccountOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MysqlAccount) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the IP addresses that are allowed to access your DB instance.
func (o MysqlAccountOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MysqlAccount) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// Specifies the ID of the RDS Mysql instance.
func (o MysqlAccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlAccount) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Specifies the username of the DB account.
func (o MysqlAccountOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlAccount) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the password of the DB account.
func (o MysqlAccountOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlAccount) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

func (o MysqlAccountOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *MysqlAccount) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

type MysqlAccountArrayOutput struct{ *pulumi.OutputState }

func (MysqlAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlAccount)(nil)).Elem()
}

func (o MysqlAccountArrayOutput) ToMysqlAccountArrayOutput() MysqlAccountArrayOutput {
	return o
}

func (o MysqlAccountArrayOutput) ToMysqlAccountArrayOutputWithContext(ctx context.Context) MysqlAccountArrayOutput {
	return o
}

func (o MysqlAccountArrayOutput) Index(i pulumi.IntInput) MysqlAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MysqlAccount {
		return vs[0].([]*MysqlAccount)[vs[1].(int)]
	}).(MysqlAccountOutput)
}

type MysqlAccountMapOutput struct{ *pulumi.OutputState }

func (MysqlAccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlAccount)(nil)).Elem()
}

func (o MysqlAccountMapOutput) ToMysqlAccountMapOutput() MysqlAccountMapOutput {
	return o
}

func (o MysqlAccountMapOutput) ToMysqlAccountMapOutputWithContext(ctx context.Context) MysqlAccountMapOutput {
	return o
}

func (o MysqlAccountMapOutput) MapIndex(k pulumi.StringInput) MysqlAccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MysqlAccount {
		return vs[0].(map[string]*MysqlAccount)[vs[1].(string)]
	}).(MysqlAccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlAccountInput)(nil)).Elem(), &MysqlAccount{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlAccountArrayInput)(nil)).Elem(), MysqlAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MysqlAccountMapInput)(nil)).Elem(), MysqlAccountMap{})
	pulumi.RegisterOutputType(MysqlAccountOutput{})
	pulumi.RegisterOutputType(MysqlAccountArrayOutput{})
	pulumi.RegisterOutputType(MysqlAccountMapOutput{})
}

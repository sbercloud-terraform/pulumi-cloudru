// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cbr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Vault struct {
	pulumi.CustomResourceState

	// The allocated capacity, in GB.
	Allocated pulumi.Float64Output `pulumi:"allocated"`
	// Whether automatic association is supported.
	AutoBind pulumi.BoolOutput `pulumi:"autoBind"`
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand pulumi.BoolOutput `pulumi:"autoExpand"`
	// Deprecated: Deprecated
	AutoPay   pulumi.StringPtrOutput `pulumi:"autoPay"`
	AutoRenew pulumi.StringPtrOutput `pulumi:"autoRenew"`
	// The backup name prefix.
	BackupNamePrefix pulumi.StringOutput `pulumi:"backupNamePrefix"`
	// The rules for automatic association.
	BindRules    pulumi.StringMapOutput `pulumi:"bindRules"`
	ChargingMode pulumi.StringOutput    `pulumi:"chargingMode"`
	// The cloud type of the vault.
	CloudType pulumi.StringOutput `pulumi:"cloudType"`
	// The consistent level (specification) of the vault.
	ConsistentLevel pulumi.StringPtrOutput `pulumi:"consistentLevel"`
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId pulumi.StringOutput `pulumi:"enterpriseProjectId"`
	// Whether multiple availability zones are used for backing up.
	IsMultiAz pulumi.BoolOutput `pulumi:"isMultiAz"`
	// Locked status of the vault.
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// The name of the vault.
	Name       pulumi.StringOutput    `pulumi:"name"`
	Period     pulumi.IntPtrOutput    `pulumi:"period"`
	PeriodUnit pulumi.StringPtrOutput `pulumi:"periodUnit"`
	// The policy details to associate with the CBR vault.
	Policies VaultPolicyArrayOutput `pulumi:"policies"`
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// The protection type of the vault.
	ProtectionType pulumi.StringOutput `pulumi:"protectionType"`
	// The region where the vault is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The array of one or more resources to attach to the CBR vault.
	Resources VaultResourceArrayOutput `pulumi:"resources"`
	// The capacity of the vault, in GB.
	Size pulumi.IntOutput `pulumi:"size"`
	// The specification code.
	SpecCode pulumi.StringOutput `pulumi:"specCode"`
	// The vault status.
	Status pulumi.StringOutput `pulumi:"status"`
	// The name of the bucket for the vault.
	Storage pulumi.StringOutput    `pulumi:"storage"`
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the vault.
	Type pulumi.StringOutput `pulumi:"type"`
	// The used capacity, in GB.
	Used pulumi.Float64Output `pulumi:"used"`
}

// NewVault registers a new resource with the given unique name, arguments, and options.
func NewVault(ctx *pulumi.Context,
	name string, args *VaultArgs, opts ...pulumi.ResourceOption) (*Vault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProtectionType == nil {
		return nil, errors.New("invalid value for required argument 'ProtectionType'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vault
	err := ctx.RegisterResource("cloudru:Cbr/vault:Vault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVault gets an existing Vault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VaultState, opts ...pulumi.ResourceOption) (*Vault, error) {
	var resource Vault
	err := ctx.ReadResource("cloudru:Cbr/vault:Vault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vault resources.
type vaultState struct {
	// The allocated capacity, in GB.
	Allocated *float64 `pulumi:"allocated"`
	// Whether automatic association is supported.
	AutoBind *bool `pulumi:"autoBind"`
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand *bool `pulumi:"autoExpand"`
	// Deprecated: Deprecated
	AutoPay   *string `pulumi:"autoPay"`
	AutoRenew *string `pulumi:"autoRenew"`
	// The backup name prefix.
	BackupNamePrefix *string `pulumi:"backupNamePrefix"`
	// The rules for automatic association.
	BindRules    map[string]string `pulumi:"bindRules"`
	ChargingMode *string           `pulumi:"chargingMode"`
	// The cloud type of the vault.
	CloudType *string `pulumi:"cloudType"`
	// The consistent level (specification) of the vault.
	ConsistentLevel *string `pulumi:"consistentLevel"`
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether multiple availability zones are used for backing up.
	IsMultiAz *bool `pulumi:"isMultiAz"`
	// Locked status of the vault.
	Locked *bool `pulumi:"locked"`
	// The name of the vault.
	Name       *string `pulumi:"name"`
	Period     *int    `pulumi:"period"`
	PeriodUnit *string `pulumi:"periodUnit"`
	// The policy details to associate with the CBR vault.
	Policies []VaultPolicy `pulumi:"policies"`
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId *string `pulumi:"policyId"`
	// The protection type of the vault.
	ProtectionType *string `pulumi:"protectionType"`
	// The region where the vault is located.
	Region *string `pulumi:"region"`
	// The array of one or more resources to attach to the CBR vault.
	Resources []VaultResource `pulumi:"resources"`
	// The capacity of the vault, in GB.
	Size *int `pulumi:"size"`
	// The specification code.
	SpecCode *string `pulumi:"specCode"`
	// The vault status.
	Status *string `pulumi:"status"`
	// The name of the bucket for the vault.
	Storage *string           `pulumi:"storage"`
	Tags    map[string]string `pulumi:"tags"`
	// The type of the vault.
	Type *string `pulumi:"type"`
	// The used capacity, in GB.
	Used *float64 `pulumi:"used"`
}

type VaultState struct {
	// The allocated capacity, in GB.
	Allocated pulumi.Float64PtrInput
	// Whether automatic association is supported.
	AutoBind pulumi.BoolPtrInput
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand pulumi.BoolPtrInput
	// Deprecated: Deprecated
	AutoPay   pulumi.StringPtrInput
	AutoRenew pulumi.StringPtrInput
	// The backup name prefix.
	BackupNamePrefix pulumi.StringPtrInput
	// The rules for automatic association.
	BindRules    pulumi.StringMapInput
	ChargingMode pulumi.StringPtrInput
	// The cloud type of the vault.
	CloudType pulumi.StringPtrInput
	// The consistent level (specification) of the vault.
	ConsistentLevel pulumi.StringPtrInput
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId pulumi.StringPtrInput
	// Whether multiple availability zones are used for backing up.
	IsMultiAz pulumi.BoolPtrInput
	// Locked status of the vault.
	Locked pulumi.BoolPtrInput
	// The name of the vault.
	Name       pulumi.StringPtrInput
	Period     pulumi.IntPtrInput
	PeriodUnit pulumi.StringPtrInput
	// The policy details to associate with the CBR vault.
	Policies VaultPolicyArrayInput
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId pulumi.StringPtrInput
	// The protection type of the vault.
	ProtectionType pulumi.StringPtrInput
	// The region where the vault is located.
	Region pulumi.StringPtrInput
	// The array of one or more resources to attach to the CBR vault.
	Resources VaultResourceArrayInput
	// The capacity of the vault, in GB.
	Size pulumi.IntPtrInput
	// The specification code.
	SpecCode pulumi.StringPtrInput
	// The vault status.
	Status pulumi.StringPtrInput
	// The name of the bucket for the vault.
	Storage pulumi.StringPtrInput
	Tags    pulumi.StringMapInput
	// The type of the vault.
	Type pulumi.StringPtrInput
	// The used capacity, in GB.
	Used pulumi.Float64PtrInput
}

func (VaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultState)(nil)).Elem()
}

type vaultArgs struct {
	// Whether automatic association is supported.
	AutoBind *bool `pulumi:"autoBind"`
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand *bool `pulumi:"autoExpand"`
	// Deprecated: Deprecated
	AutoPay   *string `pulumi:"autoPay"`
	AutoRenew *string `pulumi:"autoRenew"`
	// The backup name prefix.
	BackupNamePrefix *string `pulumi:"backupNamePrefix"`
	// The rules for automatic association.
	BindRules    map[string]string `pulumi:"bindRules"`
	ChargingMode *string           `pulumi:"chargingMode"`
	// The cloud type of the vault.
	CloudType *string `pulumi:"cloudType"`
	// The consistent level (specification) of the vault.
	ConsistentLevel *string `pulumi:"consistentLevel"`
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Whether multiple availability zones are used for backing up.
	IsMultiAz *bool `pulumi:"isMultiAz"`
	// Locked status of the vault.
	Locked *bool `pulumi:"locked"`
	// The name of the vault.
	Name       *string `pulumi:"name"`
	Period     *int    `pulumi:"period"`
	PeriodUnit *string `pulumi:"periodUnit"`
	// The policy details to associate with the CBR vault.
	Policies []VaultPolicy `pulumi:"policies"`
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId *string `pulumi:"policyId"`
	// The protection type of the vault.
	ProtectionType string `pulumi:"protectionType"`
	// The region where the vault is located.
	Region *string `pulumi:"region"`
	// The array of one or more resources to attach to the CBR vault.
	Resources []VaultResource `pulumi:"resources"`
	// The capacity of the vault, in GB.
	Size int               `pulumi:"size"`
	Tags map[string]string `pulumi:"tags"`
	// The type of the vault.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Vault resource.
type VaultArgs struct {
	// Whether automatic association is supported.
	AutoBind pulumi.BoolPtrInput
	// Whether to enable auto capacity expansion for the vault.
	AutoExpand pulumi.BoolPtrInput
	// Deprecated: Deprecated
	AutoPay   pulumi.StringPtrInput
	AutoRenew pulumi.StringPtrInput
	// The backup name prefix.
	BackupNamePrefix pulumi.StringPtrInput
	// The rules for automatic association.
	BindRules    pulumi.StringMapInput
	ChargingMode pulumi.StringPtrInput
	// The cloud type of the vault.
	CloudType pulumi.StringPtrInput
	// The consistent level (specification) of the vault.
	ConsistentLevel pulumi.StringPtrInput
	// The enterprise project ID to which the vault belongs.
	EnterpriseProjectId pulumi.StringPtrInput
	// Whether multiple availability zones are used for backing up.
	IsMultiAz pulumi.BoolPtrInput
	// Locked status of the vault.
	Locked pulumi.BoolPtrInput
	// The name of the vault.
	Name       pulumi.StringPtrInput
	Period     pulumi.IntPtrInput
	PeriodUnit pulumi.StringPtrInput
	// The policy details to associate with the CBR vault.
	Policies VaultPolicyArrayInput
	// schema:Deprecated; Using parameter 'policy' instead.
	PolicyId pulumi.StringPtrInput
	// The protection type of the vault.
	ProtectionType pulumi.StringInput
	// The region where the vault is located.
	Region pulumi.StringPtrInput
	// The array of one or more resources to attach to the CBR vault.
	Resources VaultResourceArrayInput
	// The capacity of the vault, in GB.
	Size pulumi.IntInput
	Tags pulumi.StringMapInput
	// The type of the vault.
	Type pulumi.StringInput
}

func (VaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vaultArgs)(nil)).Elem()
}

type VaultInput interface {
	pulumi.Input

	ToVaultOutput() VaultOutput
	ToVaultOutputWithContext(ctx context.Context) VaultOutput
}

func (*Vault) ElementType() reflect.Type {
	return reflect.TypeOf((**Vault)(nil)).Elem()
}

func (i *Vault) ToVaultOutput() VaultOutput {
	return i.ToVaultOutputWithContext(context.Background())
}

func (i *Vault) ToVaultOutputWithContext(ctx context.Context) VaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultOutput)
}

// VaultArrayInput is an input type that accepts VaultArray and VaultArrayOutput values.
// You can construct a concrete instance of `VaultArrayInput` via:
//
//	VaultArray{ VaultArgs{...} }
type VaultArrayInput interface {
	pulumi.Input

	ToVaultArrayOutput() VaultArrayOutput
	ToVaultArrayOutputWithContext(context.Context) VaultArrayOutput
}

type VaultArray []VaultInput

func (VaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vault)(nil)).Elem()
}

func (i VaultArray) ToVaultArrayOutput() VaultArrayOutput {
	return i.ToVaultArrayOutputWithContext(context.Background())
}

func (i VaultArray) ToVaultArrayOutputWithContext(ctx context.Context) VaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultArrayOutput)
}

// VaultMapInput is an input type that accepts VaultMap and VaultMapOutput values.
// You can construct a concrete instance of `VaultMapInput` via:
//
//	VaultMap{ "key": VaultArgs{...} }
type VaultMapInput interface {
	pulumi.Input

	ToVaultMapOutput() VaultMapOutput
	ToVaultMapOutputWithContext(context.Context) VaultMapOutput
}

type VaultMap map[string]VaultInput

func (VaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vault)(nil)).Elem()
}

func (i VaultMap) ToVaultMapOutput() VaultMapOutput {
	return i.ToVaultMapOutputWithContext(context.Background())
}

func (i VaultMap) ToVaultMapOutputWithContext(ctx context.Context) VaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VaultMapOutput)
}

type VaultOutput struct{ *pulumi.OutputState }

func (VaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vault)(nil)).Elem()
}

func (o VaultOutput) ToVaultOutput() VaultOutput {
	return o
}

func (o VaultOutput) ToVaultOutputWithContext(ctx context.Context) VaultOutput {
	return o
}

// The allocated capacity, in GB.
func (o VaultOutput) Allocated() pulumi.Float64Output {
	return o.ApplyT(func(v *Vault) pulumi.Float64Output { return v.Allocated }).(pulumi.Float64Output)
}

// Whether automatic association is supported.
func (o VaultOutput) AutoBind() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vault) pulumi.BoolOutput { return v.AutoBind }).(pulumi.BoolOutput)
}

// Whether to enable auto capacity expansion for the vault.
func (o VaultOutput) AutoExpand() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vault) pulumi.BoolOutput { return v.AutoExpand }).(pulumi.BoolOutput)
}

// Deprecated: Deprecated
func (o VaultOutput) AutoPay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringPtrOutput { return v.AutoPay }).(pulumi.StringPtrOutput)
}

func (o VaultOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

// The backup name prefix.
func (o VaultOutput) BackupNamePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.BackupNamePrefix }).(pulumi.StringOutput)
}

// The rules for automatic association.
func (o VaultOutput) BindRules() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringMapOutput { return v.BindRules }).(pulumi.StringMapOutput)
}

func (o VaultOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

// The cloud type of the vault.
func (o VaultOutput) CloudType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.CloudType }).(pulumi.StringOutput)
}

// The consistent level (specification) of the vault.
func (o VaultOutput) ConsistentLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringPtrOutput { return v.ConsistentLevel }).(pulumi.StringPtrOutput)
}

// The enterprise project ID to which the vault belongs.
func (o VaultOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

// Whether multiple availability zones are used for backing up.
func (o VaultOutput) IsMultiAz() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vault) pulumi.BoolOutput { return v.IsMultiAz }).(pulumi.BoolOutput)
}

// Locked status of the vault.
func (o VaultOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vault) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// The name of the vault.
func (o VaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VaultOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o VaultOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// The policy details to associate with the CBR vault.
func (o VaultOutput) Policies() VaultPolicyArrayOutput {
	return o.ApplyT(func(v *Vault) VaultPolicyArrayOutput { return v.Policies }).(VaultPolicyArrayOutput)
}

// schema:Deprecated; Using parameter 'policy' instead.
func (o VaultOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringPtrOutput { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// The protection type of the vault.
func (o VaultOutput) ProtectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.ProtectionType }).(pulumi.StringOutput)
}

// The region where the vault is located.
func (o VaultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The array of one or more resources to attach to the CBR vault.
func (o VaultOutput) Resources() VaultResourceArrayOutput {
	return o.ApplyT(func(v *Vault) VaultResourceArrayOutput { return v.Resources }).(VaultResourceArrayOutput)
}

// The capacity of the vault, in GB.
func (o VaultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Vault) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The specification code.
func (o VaultOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.SpecCode }).(pulumi.StringOutput)
}

// The vault status.
func (o VaultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The name of the bucket for the vault.
func (o VaultOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Storage }).(pulumi.StringOutput)
}

func (o VaultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the vault.
func (o VaultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Vault) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The used capacity, in GB.
func (o VaultOutput) Used() pulumi.Float64Output {
	return o.ApplyT(func(v *Vault) pulumi.Float64Output { return v.Used }).(pulumi.Float64Output)
}

type VaultArrayOutput struct{ *pulumi.OutputState }

func (VaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vault)(nil)).Elem()
}

func (o VaultArrayOutput) ToVaultArrayOutput() VaultArrayOutput {
	return o
}

func (o VaultArrayOutput) ToVaultArrayOutputWithContext(ctx context.Context) VaultArrayOutput {
	return o
}

func (o VaultArrayOutput) Index(i pulumi.IntInput) VaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vault {
		return vs[0].([]*Vault)[vs[1].(int)]
	}).(VaultOutput)
}

type VaultMapOutput struct{ *pulumi.OutputState }

func (VaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vault)(nil)).Elem()
}

func (o VaultMapOutput) ToVaultMapOutput() VaultMapOutput {
	return o
}

func (o VaultMapOutput) ToVaultMapOutputWithContext(ctx context.Context) VaultMapOutput {
	return o
}

func (o VaultMapOutput) MapIndex(k pulumi.StringInput) VaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vault {
		return vs[0].(map[string]*Vault)[vs[1].(string)]
	}).(VaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VaultInput)(nil)).Elem(), &Vault{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultArrayInput)(nil)).Elem(), VaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VaultMapInput)(nil)).Elem(), VaultMap{})
	pulumi.RegisterOutputType(VaultOutput{})
	pulumi.RegisterOutputType(VaultArrayOutput{})
	pulumi.RegisterOutputType(VaultMapOutput{})
}

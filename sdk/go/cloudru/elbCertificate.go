// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ElbCertificate struct {
	pulumi.CustomResourceState

	Certificate             pulumi.StringOutput      `pulumi:"certificate"`
	CommonName              pulumi.StringOutput      `pulumi:"commonName"`
	CreateTime              pulumi.StringOutput      `pulumi:"createTime"`
	Description             pulumi.StringPtrOutput   `pulumi:"description"`
	Domain                  pulumi.StringPtrOutput   `pulumi:"domain"`
	EncCertificate          pulumi.StringPtrOutput   `pulumi:"encCertificate"`
	EncPrivateKey           pulumi.StringPtrOutput   `pulumi:"encPrivateKey"`
	EnterpriseProjectId     pulumi.StringOutput      `pulumi:"enterpriseProjectId"`
	ExpireTime              pulumi.StringOutput      `pulumi:"expireTime"`
	Fingerprint             pulumi.StringOutput      `pulumi:"fingerprint"`
	Name                    pulumi.StringOutput      `pulumi:"name"`
	PrivateKey              pulumi.StringPtrOutput   `pulumi:"privateKey"`
	Region                  pulumi.StringOutput      `pulumi:"region"`
	ScmCertificateId        pulumi.StringOutput      `pulumi:"scmCertificateId"`
	SubjectAlternativeNames pulumi.StringArrayOutput `pulumi:"subjectAlternativeNames"`
	Type                    pulumi.StringOutput      `pulumi:"type"`
	UpdateTime              pulumi.StringOutput      `pulumi:"updateTime"`
}

// NewElbCertificate registers a new resource with the given unique name, arguments, and options.
func NewElbCertificate(ctx *pulumi.Context,
	name string, args *ElbCertificateArgs, opts ...pulumi.ResourceOption) (*ElbCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ElbCertificate
	err := ctx.RegisterResource("sbercloud:index/elbCertificate:ElbCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElbCertificate gets an existing ElbCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElbCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElbCertificateState, opts ...pulumi.ResourceOption) (*ElbCertificate, error) {
	var resource ElbCertificate
	err := ctx.ReadResource("sbercloud:index/elbCertificate:ElbCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElbCertificate resources.
type elbCertificateState struct {
	Certificate             *string  `pulumi:"certificate"`
	CommonName              *string  `pulumi:"commonName"`
	CreateTime              *string  `pulumi:"createTime"`
	Description             *string  `pulumi:"description"`
	Domain                  *string  `pulumi:"domain"`
	EncCertificate          *string  `pulumi:"encCertificate"`
	EncPrivateKey           *string  `pulumi:"encPrivateKey"`
	EnterpriseProjectId     *string  `pulumi:"enterpriseProjectId"`
	ExpireTime              *string  `pulumi:"expireTime"`
	Fingerprint             *string  `pulumi:"fingerprint"`
	Name                    *string  `pulumi:"name"`
	PrivateKey              *string  `pulumi:"privateKey"`
	Region                  *string  `pulumi:"region"`
	ScmCertificateId        *string  `pulumi:"scmCertificateId"`
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	Type                    *string  `pulumi:"type"`
	UpdateTime              *string  `pulumi:"updateTime"`
}

type ElbCertificateState struct {
	Certificate             pulumi.StringPtrInput
	CommonName              pulumi.StringPtrInput
	CreateTime              pulumi.StringPtrInput
	Description             pulumi.StringPtrInput
	Domain                  pulumi.StringPtrInput
	EncCertificate          pulumi.StringPtrInput
	EncPrivateKey           pulumi.StringPtrInput
	EnterpriseProjectId     pulumi.StringPtrInput
	ExpireTime              pulumi.StringPtrInput
	Fingerprint             pulumi.StringPtrInput
	Name                    pulumi.StringPtrInput
	PrivateKey              pulumi.StringPtrInput
	Region                  pulumi.StringPtrInput
	ScmCertificateId        pulumi.StringPtrInput
	SubjectAlternativeNames pulumi.StringArrayInput
	Type                    pulumi.StringPtrInput
	UpdateTime              pulumi.StringPtrInput
}

func (ElbCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*elbCertificateState)(nil)).Elem()
}

type elbCertificateArgs struct {
	Certificate         string  `pulumi:"certificate"`
	Description         *string `pulumi:"description"`
	Domain              *string `pulumi:"domain"`
	EncCertificate      *string `pulumi:"encCertificate"`
	EncPrivateKey       *string `pulumi:"encPrivateKey"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	Name                *string `pulumi:"name"`
	PrivateKey          *string `pulumi:"privateKey"`
	Region              *string `pulumi:"region"`
	ScmCertificateId    *string `pulumi:"scmCertificateId"`
	Type                *string `pulumi:"type"`
}

// The set of arguments for constructing a ElbCertificate resource.
type ElbCertificateArgs struct {
	Certificate         pulumi.StringInput
	Description         pulumi.StringPtrInput
	Domain              pulumi.StringPtrInput
	EncCertificate      pulumi.StringPtrInput
	EncPrivateKey       pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	Name                pulumi.StringPtrInput
	PrivateKey          pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	ScmCertificateId    pulumi.StringPtrInput
	Type                pulumi.StringPtrInput
}

func (ElbCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elbCertificateArgs)(nil)).Elem()
}

type ElbCertificateInput interface {
	pulumi.Input

	ToElbCertificateOutput() ElbCertificateOutput
	ToElbCertificateOutputWithContext(ctx context.Context) ElbCertificateOutput
}

func (*ElbCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbCertificate)(nil)).Elem()
}

func (i *ElbCertificate) ToElbCertificateOutput() ElbCertificateOutput {
	return i.ToElbCertificateOutputWithContext(context.Background())
}

func (i *ElbCertificate) ToElbCertificateOutputWithContext(ctx context.Context) ElbCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbCertificateOutput)
}

// ElbCertificateArrayInput is an input type that accepts ElbCertificateArray and ElbCertificateArrayOutput values.
// You can construct a concrete instance of `ElbCertificateArrayInput` via:
//
//	ElbCertificateArray{ ElbCertificateArgs{...} }
type ElbCertificateArrayInput interface {
	pulumi.Input

	ToElbCertificateArrayOutput() ElbCertificateArrayOutput
	ToElbCertificateArrayOutputWithContext(context.Context) ElbCertificateArrayOutput
}

type ElbCertificateArray []ElbCertificateInput

func (ElbCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbCertificate)(nil)).Elem()
}

func (i ElbCertificateArray) ToElbCertificateArrayOutput() ElbCertificateArrayOutput {
	return i.ToElbCertificateArrayOutputWithContext(context.Background())
}

func (i ElbCertificateArray) ToElbCertificateArrayOutputWithContext(ctx context.Context) ElbCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbCertificateArrayOutput)
}

// ElbCertificateMapInput is an input type that accepts ElbCertificateMap and ElbCertificateMapOutput values.
// You can construct a concrete instance of `ElbCertificateMapInput` via:
//
//	ElbCertificateMap{ "key": ElbCertificateArgs{...} }
type ElbCertificateMapInput interface {
	pulumi.Input

	ToElbCertificateMapOutput() ElbCertificateMapOutput
	ToElbCertificateMapOutputWithContext(context.Context) ElbCertificateMapOutput
}

type ElbCertificateMap map[string]ElbCertificateInput

func (ElbCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbCertificate)(nil)).Elem()
}

func (i ElbCertificateMap) ToElbCertificateMapOutput() ElbCertificateMapOutput {
	return i.ToElbCertificateMapOutputWithContext(context.Background())
}

func (i ElbCertificateMap) ToElbCertificateMapOutputWithContext(ctx context.Context) ElbCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElbCertificateMapOutput)
}

type ElbCertificateOutput struct{ *pulumi.OutputState }

func (ElbCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElbCertificate)(nil)).Elem()
}

func (o ElbCertificateOutput) ToElbCertificateOutput() ElbCertificateOutput {
	return o
}

func (o ElbCertificateOutput) ToElbCertificateOutputWithContext(ctx context.Context) ElbCertificateOutput {
	return o
}

func (o ElbCertificateOutput) Certificate() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.Certificate }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.CommonName }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ElbCertificateOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o ElbCertificateOutput) EncCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringPtrOutput { return v.EncCertificate }).(pulumi.StringPtrOutput)
}

func (o ElbCertificateOutput) EncPrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringPtrOutput { return v.EncPrivateKey }).(pulumi.StringPtrOutput)
}

func (o ElbCertificateOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o ElbCertificateOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) ScmCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.ScmCertificateId }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

func (o ElbCertificateOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ElbCertificateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ElbCertificate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ElbCertificateArrayOutput struct{ *pulumi.OutputState }

func (ElbCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElbCertificate)(nil)).Elem()
}

func (o ElbCertificateArrayOutput) ToElbCertificateArrayOutput() ElbCertificateArrayOutput {
	return o
}

func (o ElbCertificateArrayOutput) ToElbCertificateArrayOutputWithContext(ctx context.Context) ElbCertificateArrayOutput {
	return o
}

func (o ElbCertificateArrayOutput) Index(i pulumi.IntInput) ElbCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElbCertificate {
		return vs[0].([]*ElbCertificate)[vs[1].(int)]
	}).(ElbCertificateOutput)
}

type ElbCertificateMapOutput struct{ *pulumi.OutputState }

func (ElbCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElbCertificate)(nil)).Elem()
}

func (o ElbCertificateMapOutput) ToElbCertificateMapOutput() ElbCertificateMapOutput {
	return o
}

func (o ElbCertificateMapOutput) ToElbCertificateMapOutputWithContext(ctx context.Context) ElbCertificateMapOutput {
	return o
}

func (o ElbCertificateMapOutput) MapIndex(k pulumi.StringInput) ElbCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElbCertificate {
		return vs[0].(map[string]*ElbCertificate)[vs[1].(string)]
	}).(ElbCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElbCertificateInput)(nil)).Elem(), &ElbCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbCertificateArrayInput)(nil)).Elem(), ElbCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElbCertificateMapInput)(nil)).Elem(), ElbCertificateMap{})
	pulumi.RegisterOutputType(ElbCertificateOutput{})
	pulumi.RegisterOutputType(ElbCertificateArrayOutput{})
	pulumi.RegisterOutputType(ElbCertificateMapOutput{})
}

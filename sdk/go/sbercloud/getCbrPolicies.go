// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use this data source to get available CBR policies within Sbercloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			policyName := cfg.RequireObject("policyName")
//			_, err := sbercloud.GetCbrPolicies(ctx, &sbercloud.GetCbrPoliciesArgs{
//				Name: pulumi.StringRef(policyName),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCbrPolicies(ctx *pulumi.Context, args *GetCbrPoliciesArgs, opts ...pulumi.InvokeOption) (*GetCbrPoliciesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCbrPoliciesResult
	err := ctx.Invoke("sbercloud:index/getCbrPolicies:getCbrPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCbrPolicies.
type GetCbrPoliciesArgs struct {
	// Specifies the policy enabling status to query. The valid values are as follows:
	// + **true**: Policy enabled
	// + **false**: Policy not enabled
	Enabled *bool `pulumi:"enabled"`
	// Specifies the policy name used to query.
	Name *string `pulumi:"name"`
	// Specifies the policy ID used to query.
	PolicyId *string `pulumi:"policyId"`
	// Specifies the region in which to query the policies.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the policy type used to query. The valid values are as follows:
	// + **backup**: Backup policy
	// + **replication**: Replication policy
	Type *string `pulumi:"type"`
	// Specifies the vault ID of the associated policy used to query.
	VaultId *string `pulumi:"vaultId"`
}

// A collection of values returned by getCbrPolicies.
type GetCbrPoliciesResult struct {
	// Whether to enable the policy. The valid values are as follows:
	// + **true**: Policy enabled
	// + **false**: Policy not enabled
	Enabled *bool `pulumi:"enabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The policy name.
	Name *string `pulumi:"name"`
	// All CBR policies that match the filter parameters.
	// The policies structure is documented below.
	Policies []GetCbrPoliciesPolicy `pulumi:"policies"`
	PolicyId *string                `pulumi:"policyId"`
	Region   string                 `pulumi:"region"`
	// The protection type of the policy. The valid values are as follows:
	// + **backup**: Backup policy
	// + **replication**: Replication policy
	Type *string `pulumi:"type"`
	// The vault ID of the associated CBR policy.
	VaultId *string `pulumi:"vaultId"`
}

func GetCbrPoliciesOutput(ctx *pulumi.Context, args GetCbrPoliciesOutputArgs, opts ...pulumi.InvokeOption) GetCbrPoliciesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCbrPoliciesResultOutput, error) {
			args := v.(GetCbrPoliciesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getCbrPolicies:getCbrPolicies", args, GetCbrPoliciesResultOutput{}, options).(GetCbrPoliciesResultOutput), nil
		}).(GetCbrPoliciesResultOutput)
}

// A collection of arguments for invoking getCbrPolicies.
type GetCbrPoliciesOutputArgs struct {
	// Specifies the policy enabling status to query. The valid values are as follows:
	// + **true**: Policy enabled
	// + **false**: Policy not enabled
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Specifies the policy name used to query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the policy ID used to query.
	PolicyId pulumi.StringPtrInput `pulumi:"policyId"`
	// Specifies the region in which to query the policies.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the policy type used to query. The valid values are as follows:
	// + **backup**: Backup policy
	// + **replication**: Replication policy
	Type pulumi.StringPtrInput `pulumi:"type"`
	// Specifies the vault ID of the associated policy used to query.
	VaultId pulumi.StringPtrInput `pulumi:"vaultId"`
}

func (GetCbrPoliciesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCbrPoliciesArgs)(nil)).Elem()
}

// A collection of values returned by getCbrPolicies.
type GetCbrPoliciesResultOutput struct{ *pulumi.OutputState }

func (GetCbrPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCbrPoliciesResult)(nil)).Elem()
}

func (o GetCbrPoliciesResultOutput) ToGetCbrPoliciesResultOutput() GetCbrPoliciesResultOutput {
	return o
}

func (o GetCbrPoliciesResultOutput) ToGetCbrPoliciesResultOutputWithContext(ctx context.Context) GetCbrPoliciesResultOutput {
	return o
}

// Whether to enable the policy. The valid values are as follows:
// + **true**: Policy enabled
// + **false**: Policy not enabled
func (o GetCbrPoliciesResultOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCbrPoliciesResult) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCbrPoliciesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCbrPoliciesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The policy name.
func (o GetCbrPoliciesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbrPoliciesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// All CBR policies that match the filter parameters.
// The policies structure is documented below.
func (o GetCbrPoliciesResultOutput) Policies() GetCbrPoliciesPolicyArrayOutput {
	return o.ApplyT(func(v GetCbrPoliciesResult) []GetCbrPoliciesPolicy { return v.Policies }).(GetCbrPoliciesPolicyArrayOutput)
}

func (o GetCbrPoliciesResultOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbrPoliciesResult) *string { return v.PolicyId }).(pulumi.StringPtrOutput)
}

func (o GetCbrPoliciesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCbrPoliciesResult) string { return v.Region }).(pulumi.StringOutput)
}

// The protection type of the policy. The valid values are as follows:
// + **backup**: Backup policy
// + **replication**: Replication policy
func (o GetCbrPoliciesResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbrPoliciesResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The vault ID of the associated CBR policy.
func (o GetCbrPoliciesResultOutput) VaultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbrPoliciesResult) *string { return v.VaultId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCbrPoliciesResultOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Mrs/cluster:cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    declare public readonly analysisCoreNodes: pulumi.Output<outputs.Mrs.ClusterAnalysisCoreNodes | undefined>;
    declare public readonly analysisTaskNodes: pulumi.Output<outputs.Mrs.ClusterAnalysisTaskNodes | undefined>;
    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    declare public readonly availabilityZone: pulumi.Output<string>;
    declare public readonly bootstrapScripts: pulumi.Output<outputs.Mrs.ClusterBootstrapScript[] | undefined>;
    declare public readonly chargingMode: pulumi.Output<string>;
    declare public /*out*/ readonly chargingStartTime: pulumi.Output<string>;
    declare public readonly componentConfigs: pulumi.Output<outputs.Mrs.ClusterComponentConfig[] | undefined>;
    declare public readonly componentLists: pulumi.Output<string[]>;
    declare public /*out*/ readonly createTime: pulumi.Output<string>;
    declare public readonly customNodes: pulumi.Output<outputs.Mrs.ClusterCustomNode[] | undefined>;
    declare public readonly eipId: pulumi.Output<string>;
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly externalDatasources: pulumi.Output<outputs.Mrs.ClusterExternalDatasource[] | undefined>;
    declare public readonly logCollection: pulumi.Output<boolean | undefined>;
    declare public readonly managerAdminPass: pulumi.Output<string>;
    declare public /*out*/ readonly masterNodeIp: pulumi.Output<string>;
    declare public readonly masterNodes: pulumi.Output<outputs.Mrs.ClusterMasterNodes>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly nodeAdminPass: pulumi.Output<string | undefined>;
    declare public readonly nodeKeyPair: pulumi.Output<string | undefined>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly privateIp: pulumi.Output<string>;
    declare public readonly publicIp: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly safeMode: pulumi.Output<boolean | undefined>;
    declare public readonly securityGroupIds: pulumi.Output<string[]>;
    declare public readonly smnNotify: pulumi.Output<outputs.Mrs.ClusterSmnNotify | undefined>;
    declare public /*out*/ readonly status: pulumi.Output<string>;
    declare public readonly streamingCoreNodes: pulumi.Output<outputs.Mrs.ClusterStreamingCoreNodes | undefined>;
    declare public readonly streamingTaskNodes: pulumi.Output<outputs.Mrs.ClusterStreamingTaskNodes | undefined>;
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly templateId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly totalNodeNumber: pulumi.Output<number>;
    declare public readonly type: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly updateTime: pulumi.Output<string>;
    declare public readonly version: pulumi.Output<string>;
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["analysisCoreNodes"] = state?.analysisCoreNodes;
            resourceInputs["analysisTaskNodes"] = state?.analysisTaskNodes;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["availabilityZone"] = state?.availabilityZone;
            resourceInputs["bootstrapScripts"] = state?.bootstrapScripts;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["chargingStartTime"] = state?.chargingStartTime;
            resourceInputs["componentConfigs"] = state?.componentConfigs;
            resourceInputs["componentLists"] = state?.componentLists;
            resourceInputs["createTime"] = state?.createTime;
            resourceInputs["customNodes"] = state?.customNodes;
            resourceInputs["eipId"] = state?.eipId;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["externalDatasources"] = state?.externalDatasources;
            resourceInputs["logCollection"] = state?.logCollection;
            resourceInputs["managerAdminPass"] = state?.managerAdminPass;
            resourceInputs["masterNodeIp"] = state?.masterNodeIp;
            resourceInputs["masterNodes"] = state?.masterNodes;
            resourceInputs["name"] = state?.name;
            resourceInputs["nodeAdminPass"] = state?.nodeAdminPass;
            resourceInputs["nodeKeyPair"] = state?.nodeKeyPair;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["privateIp"] = state?.privateIp;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["region"] = state?.region;
            resourceInputs["safeMode"] = state?.safeMode;
            resourceInputs["securityGroupIds"] = state?.securityGroupIds;
            resourceInputs["smnNotify"] = state?.smnNotify;
            resourceInputs["status"] = state?.status;
            resourceInputs["streamingCoreNodes"] = state?.streamingCoreNodes;
            resourceInputs["streamingTaskNodes"] = state?.streamingTaskNodes;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["templateId"] = state?.templateId;
            resourceInputs["totalNodeNumber"] = state?.totalNodeNumber;
            resourceInputs["type"] = state?.type;
            resourceInputs["updateTime"] = state?.updateTime;
            resourceInputs["version"] = state?.version;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if (args?.availabilityZone === undefined && !opts.urn) {
                throw new Error("Missing required property 'availabilityZone'");
            }
            if (args?.componentLists === undefined && !opts.urn) {
                throw new Error("Missing required property 'componentLists'");
            }
            if (args?.managerAdminPass === undefined && !opts.urn) {
                throw new Error("Missing required property 'managerAdminPass'");
            }
            if (args?.masterNodes === undefined && !opts.urn) {
                throw new Error("Missing required property 'masterNodes'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["analysisCoreNodes"] = args?.analysisCoreNodes;
            resourceInputs["analysisTaskNodes"] = args?.analysisTaskNodes;
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["availabilityZone"] = args?.availabilityZone;
            resourceInputs["bootstrapScripts"] = args?.bootstrapScripts;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["componentConfigs"] = args?.componentConfigs;
            resourceInputs["componentLists"] = args?.componentLists;
            resourceInputs["customNodes"] = args?.customNodes;
            resourceInputs["eipId"] = args?.eipId;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["externalDatasources"] = args?.externalDatasources;
            resourceInputs["logCollection"] = args?.logCollection;
            resourceInputs["managerAdminPass"] = args?.managerAdminPass ? pulumi.secret(args.managerAdminPass) : undefined;
            resourceInputs["masterNodes"] = args?.masterNodes;
            resourceInputs["name"] = args?.name;
            resourceInputs["nodeAdminPass"] = args?.nodeAdminPass ? pulumi.secret(args.nodeAdminPass) : undefined;
            resourceInputs["nodeKeyPair"] = args?.nodeKeyPair;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["publicIp"] = args?.publicIp;
            resourceInputs["region"] = args?.region;
            resourceInputs["safeMode"] = args?.safeMode;
            resourceInputs["securityGroupIds"] = args?.securityGroupIds;
            resourceInputs["smnNotify"] = args?.smnNotify;
            resourceInputs["streamingCoreNodes"] = args?.streamingCoreNodes;
            resourceInputs["streamingTaskNodes"] = args?.streamingTaskNodes;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["templateId"] = args?.templateId;
            resourceInputs["type"] = args?.type;
            resourceInputs["version"] = args?.version;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["chargingStartTime"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["masterNodeIp"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["totalNodeNumber"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["managerAdminPass", "nodeAdminPass"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering cluster resources.
 */
export interface ClusterState {
    analysisCoreNodes?: pulumi.Input<inputs.Mrs.ClusterAnalysisCoreNodes>;
    analysisTaskNodes?: pulumi.Input<inputs.Mrs.ClusterAnalysisTaskNodes>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    bootstrapScripts?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterBootstrapScript>[]>;
    chargingMode?: pulumi.Input<string>;
    chargingStartTime?: pulumi.Input<string>;
    componentConfigs?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterComponentConfig>[]>;
    componentLists?: pulumi.Input<pulumi.Input<string>[]>;
    createTime?: pulumi.Input<string>;
    customNodes?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterCustomNode>[]>;
    eipId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    externalDatasources?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterExternalDatasource>[]>;
    logCollection?: pulumi.Input<boolean>;
    managerAdminPass?: pulumi.Input<string>;
    masterNodeIp?: pulumi.Input<string>;
    masterNodes?: pulumi.Input<inputs.Mrs.ClusterMasterNodes>;
    name?: pulumi.Input<string>;
    nodeAdminPass?: pulumi.Input<string>;
    nodeKeyPair?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    safeMode?: pulumi.Input<boolean>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    smnNotify?: pulumi.Input<inputs.Mrs.ClusterSmnNotify>;
    status?: pulumi.Input<string>;
    streamingCoreNodes?: pulumi.Input<inputs.Mrs.ClusterStreamingCoreNodes>;
    streamingTaskNodes?: pulumi.Input<inputs.Mrs.ClusterStreamingTaskNodes>;
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateId?: pulumi.Input<string>;
    totalNodeNumber?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    updateTime?: pulumi.Input<string>;
    version?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    analysisCoreNodes?: pulumi.Input<inputs.Mrs.ClusterAnalysisCoreNodes>;
    analysisTaskNodes?: pulumi.Input<inputs.Mrs.ClusterAnalysisTaskNodes>;
    autoRenew?: pulumi.Input<string>;
    availabilityZone: pulumi.Input<string>;
    bootstrapScripts?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterBootstrapScript>[]>;
    chargingMode?: pulumi.Input<string>;
    componentConfigs?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterComponentConfig>[]>;
    componentLists: pulumi.Input<pulumi.Input<string>[]>;
    customNodes?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterCustomNode>[]>;
    eipId?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    externalDatasources?: pulumi.Input<pulumi.Input<inputs.Mrs.ClusterExternalDatasource>[]>;
    logCollection?: pulumi.Input<boolean>;
    managerAdminPass: pulumi.Input<string>;
    masterNodes: pulumi.Input<inputs.Mrs.ClusterMasterNodes>;
    name?: pulumi.Input<string>;
    nodeAdminPass?: pulumi.Input<string>;
    nodeKeyPair?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    safeMode?: pulumi.Input<boolean>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    smnNotify?: pulumi.Input<inputs.Mrs.ClusterSmnNotify>;
    streamingCoreNodes?: pulumi.Input<inputs.Mrs.ClusterStreamingCoreNodes>;
    streamingTaskNodes?: pulumi.Input<inputs.Mrs.ClusterStreamingTaskNodes>;
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    templateId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    version: pulumi.Input<string>;
    vpcId: pulumi.Input<string>;
}

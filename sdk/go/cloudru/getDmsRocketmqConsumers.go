// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get the list of RocketMQ consumers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	sbercloud "github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			group := cfg.RequireObject("group")
//			_, err := sbercloud.GetDmsRocketmqConsumers(ctx, &cloudru.GetDmsRocketmqConsumersArgs{
//				InstanceId: instanceId,
//				Group:      group,
//				IsDetail:   pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDmsRocketmqConsumers(ctx *pulumi.Context, args *GetDmsRocketmqConsumersArgs, opts ...pulumi.InvokeOption) (*GetDmsRocketmqConsumersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDmsRocketmqConsumersResult
	err := ctx.Invoke("sbercloud:index/getDmsRocketmqConsumers:getDmsRocketmqConsumers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDmsRocketmqConsumers.
type GetDmsRocketmqConsumersArgs struct {
	// Specifies the consumer group name.
	Group string `pulumi:"group"`
	// Specifies the instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Specifies whether to query the consumer details.
	IsDetail *bool `pulumi:"isDetail"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
}

// A collection of values returned by getDmsRocketmqConsumers.
type GetDmsRocketmqConsumersResult struct {
	// Indicates the list of consumer subscription details.
	Clients []GetDmsRocketmqConsumersClient `pulumi:"clients"`
	Group   string                          `pulumi:"group"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	IsDetail   *bool  `pulumi:"isDetail"`
	// Indicates whether the consumer group is online.
	Online bool   `pulumi:"online"`
	Region string `pulumi:"region"`
	// Indicates whether subscriptions are consistent.
	SubscriptionConsistency bool `pulumi:"subscriptionConsistency"`
}

func GetDmsRocketmqConsumersOutput(ctx *pulumi.Context, args GetDmsRocketmqConsumersOutputArgs, opts ...pulumi.InvokeOption) GetDmsRocketmqConsumersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDmsRocketmqConsumersResultOutput, error) {
			args := v.(GetDmsRocketmqConsumersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:index/getDmsRocketmqConsumers:getDmsRocketmqConsumers", args, GetDmsRocketmqConsumersResultOutput{}, options).(GetDmsRocketmqConsumersResultOutput), nil
		}).(GetDmsRocketmqConsumersResultOutput)
}

// A collection of arguments for invoking getDmsRocketmqConsumers.
type GetDmsRocketmqConsumersOutputArgs struct {
	// Specifies the consumer group name.
	Group pulumi.StringInput `pulumi:"group"`
	// Specifies the instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Specifies whether to query the consumer details.
	IsDetail pulumi.BoolPtrInput `pulumi:"isDetail"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
}

func (GetDmsRocketmqConsumersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsRocketmqConsumersArgs)(nil)).Elem()
}

// A collection of values returned by getDmsRocketmqConsumers.
type GetDmsRocketmqConsumersResultOutput struct{ *pulumi.OutputState }

func (GetDmsRocketmqConsumersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDmsRocketmqConsumersResult)(nil)).Elem()
}

func (o GetDmsRocketmqConsumersResultOutput) ToGetDmsRocketmqConsumersResultOutput() GetDmsRocketmqConsumersResultOutput {
	return o
}

func (o GetDmsRocketmqConsumersResultOutput) ToGetDmsRocketmqConsumersResultOutputWithContext(ctx context.Context) GetDmsRocketmqConsumersResultOutput {
	return o
}

// Indicates the list of consumer subscription details.
func (o GetDmsRocketmqConsumersResultOutput) Clients() GetDmsRocketmqConsumersClientArrayOutput {
	return o.ApplyT(func(v GetDmsRocketmqConsumersResult) []GetDmsRocketmqConsumersClient { return v.Clients }).(GetDmsRocketmqConsumersClientArrayOutput)
}

func (o GetDmsRocketmqConsumersResultOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqConsumersResult) string { return v.Group }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDmsRocketmqConsumersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqConsumersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqConsumersResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqConsumersResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetDmsRocketmqConsumersResultOutput) IsDetail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDmsRocketmqConsumersResult) *bool { return v.IsDetail }).(pulumi.BoolPtrOutput)
}

// Indicates whether the consumer group is online.
func (o GetDmsRocketmqConsumersResultOutput) Online() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDmsRocketmqConsumersResult) bool { return v.Online }).(pulumi.BoolOutput)
}

func (o GetDmsRocketmqConsumersResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetDmsRocketmqConsumersResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates whether subscriptions are consistent.
func (o GetDmsRocketmqConsumersResultOutput) SubscriptionConsistency() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDmsRocketmqConsumersResult) bool { return v.SubscriptionConsistency }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDmsRocketmqConsumersResultOutput{})
}

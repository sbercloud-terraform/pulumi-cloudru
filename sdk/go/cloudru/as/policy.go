// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages an AS policy resource within SberCloud.
//
// ## Example Usage
//
// ### AS Recurrence Policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/as"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			asGroupId := cfg.RequireObject("asGroupId")
//			_, err := as.NewPolicy(ctx, "my_aspolicy", &as.PolicyArgs{
//				ScalingPolicyName: pulumi.String("my_aspolicy"),
//				ScalingPolicyType: pulumi.String("RECURRENCE"),
//				ScalingGroupId:    pulumi.Any(asGroupId),
//				ScalingPolicyAction: &as.PolicyScalingPolicyActionArgs{
//					Operation:      pulumi.String("ADD"),
//					InstanceNumber: pulumi.Int(1),
//				},
//				ScheduledPolicy: &as.PolicyScheduledPolicyArgs{
//					LaunchTime:     pulumi.String("07:00"),
//					RecurrenceType: pulumi.String("Daily"),
//					StartTime:      pulumi.String("2022-11-30T12:00Z"),
//					EndTime:        pulumi.String("2022-12-30T12:00Z"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### AS Scheduled Policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/as"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			asGroupId := cfg.RequireObject("asGroupId")
//			_, err := as.NewPolicy(ctx, "my_aspolicy_1", &as.PolicyArgs{
//				ScalingPolicyName: pulumi.String("my_aspolicy_1"),
//				ScalingPolicyType: pulumi.String("SCHEDULED"),
//				ScalingGroupId:    pulumi.Any(asGroupId),
//				ScalingPolicyAction: &as.PolicyScalingPolicyActionArgs{
//					Operation:      pulumi.String("REMOVE"),
//					InstanceNumber: pulumi.Int(1),
//				},
//				ScheduledPolicy: &as.PolicyScheduledPolicyArgs{
//					LaunchTime: pulumi.String("2022-12-22T12:00Z"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### AS Alarm Policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/as"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/ces"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			asGroupId := cfg.RequireObject("asGroupId")
//			alarmRule, err := ces.NewAlarmrule(ctx, "alarm_rule", &ces.AlarmruleArgs{
//				AlarmName: pulumi.String("as_alarm_rule"),
//				Metric: &ces.AlarmruleMetricArgs{
//					Namespace:  pulumi.String("SYS.AS"),
//					MetricName: pulumi.String("cpu_util"),
//					Dimensions: ces.AlarmruleMetricDimensionArray{
//						&ces.AlarmruleMetricDimensionArgs{
//							Name:  pulumi.String("AutoScalingGroup"),
//							Value: pulumi.Any(asGroupId),
//						},
//					},
//				},
//				Condition: &ces.AlarmruleConditionArgs{
//					Period:             pulumi.Int(300),
//					Filter:             pulumi.String("average"),
//					ComparisonOperator: pulumi.String(">="),
//					Value:              pulumi.Int(60),
//					Unit:               pulumi.String("%"),
//					Count:              pulumi.Int(1),
//				},
//				AlarmActions: ces.AlarmruleAlarmActionArray{
//					&ces.AlarmruleAlarmActionArgs{
//						Type:              pulumi.String("autoscaling"),
//						NotificationLists: pulumi.StringArray{},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = as.NewPolicy(ctx, "my_aspolicy_2", &as.PolicyArgs{
//				ScalingPolicyName: pulumi.String("my_aspolicy_2"),
//				ScalingPolicyType: pulumi.String("ALARM"),
//				ScalingGroupId:    pulumi.Any(asGroupId),
//				AlarmId:           alarmRule.ID(),
//				CoolDownTime:      pulumi.Int(900),
//				ScalingPolicyAction: &as.PolicyScalingPolicyActionArgs{
//					Operation:      pulumi.String("ADD"),
//					InstanceNumber: pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AS policies can be imported by their `id`, e.g.
//
// ```sh
// $ pulumi import sbercloud:As/policy:Policy test 9fcb65fe-fd79-4407-8fa0-07602044e1c3
// ```
type Policy struct {
	pulumi.CustomResourceState

	Action pulumi.StringOutput `pulumi:"action"`
	// Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
	// is set to `ALARM`.
	AlarmId pulumi.StringPtrOutput `pulumi:"alarmId"`
	// Specifies the cooling duration (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	//
	// <a name="scheduledPolicyObject"></a>
	// The `scheduledPolicy` block supports:
	CoolDownTime pulumi.IntOutput    `pulumi:"coolDownTime"`
	CreateTime   pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the region in which to create the AS policy. If omitted, the
	// provider-level region will be used. Changing this creates a new AS policy.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the AS group ID. Changing this creates a new AS policy.
	ScalingGroupId pulumi.StringOutput `pulumi:"scalingGroupId"`
	// Specifies the action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction PolicyScalingPolicyActionOutput `pulumi:"scalingPolicyAction"`
	// Specifies the name of the AS policy. The name contains only letters, digits,
	// underscores(_), and hyphens(-), and cannot exceed 64 characters.
	ScalingPolicyName pulumi.StringOutput `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
	// + **ALARM**: indicates that the scaling action is triggered by an alarm.
	// + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
	// + **RECURRENCE**: indicates that the scaling action is triggered periodically.
	ScalingPolicyType pulumi.StringOutput `pulumi:"scalingPolicyType"`
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
	// The object structure is documented below.
	ScheduledPolicy PolicyScheduledPolicyOutput `pulumi:"scheduledPolicy"`
	// The AS policy status. The value can be *INSERVICE*, *PAUSED* or *EXECUTING*.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ScalingGroupId'")
	}
	if args.ScalingPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyName'")
	}
	if args.ScalingPolicyType == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("sbercloud:As/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("sbercloud:As/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	Action *string `pulumi:"action"`
	// Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
	// is set to `ALARM`.
	AlarmId *string `pulumi:"alarmId"`
	// Specifies the cooling duration (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	//
	// <a name="scheduledPolicyObject"></a>
	// The `scheduledPolicy` block supports:
	CoolDownTime *int    `pulumi:"coolDownTime"`
	CreateTime   *string `pulumi:"createTime"`
	// Specifies the region in which to create the AS policy. If omitted, the
	// provider-level region will be used. Changing this creates a new AS policy.
	Region *string `pulumi:"region"`
	// Specifies the AS group ID. Changing this creates a new AS policy.
	ScalingGroupId *string `pulumi:"scalingGroupId"`
	// Specifies the action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction *PolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	// Specifies the name of the AS policy. The name contains only letters, digits,
	// underscores(_), and hyphens(-), and cannot exceed 64 characters.
	ScalingPolicyName *string `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
	// + **ALARM**: indicates that the scaling action is triggered by an alarm.
	// + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
	// + **RECURRENCE**: indicates that the scaling action is triggered periodically.
	ScalingPolicyType *string `pulumi:"scalingPolicyType"`
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
	// The object structure is documented below.
	ScheduledPolicy *PolicyScheduledPolicy `pulumi:"scheduledPolicy"`
	// The AS policy status. The value can be *INSERVICE*, *PAUSED* or *EXECUTING*.
	Status *string `pulumi:"status"`
}

type PolicyState struct {
	Action pulumi.StringPtrInput
	// Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
	// is set to `ALARM`.
	AlarmId pulumi.StringPtrInput
	// Specifies the cooling duration (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	//
	// <a name="scheduledPolicyObject"></a>
	// The `scheduledPolicy` block supports:
	CoolDownTime pulumi.IntPtrInput
	CreateTime   pulumi.StringPtrInput
	// Specifies the region in which to create the AS policy. If omitted, the
	// provider-level region will be used. Changing this creates a new AS policy.
	Region pulumi.StringPtrInput
	// Specifies the AS group ID. Changing this creates a new AS policy.
	ScalingGroupId pulumi.StringPtrInput
	// Specifies the action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction PolicyScalingPolicyActionPtrInput
	// Specifies the name of the AS policy. The name contains only letters, digits,
	// underscores(_), and hyphens(-), and cannot exceed 64 characters.
	ScalingPolicyName pulumi.StringPtrInput
	// Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
	// + **ALARM**: indicates that the scaling action is triggered by an alarm.
	// + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
	// + **RECURRENCE**: indicates that the scaling action is triggered periodically.
	ScalingPolicyType pulumi.StringPtrInput
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
	// The object structure is documented below.
	ScheduledPolicy PolicyScheduledPolicyPtrInput
	// The AS policy status. The value can be *INSERVICE*, *PAUSED* or *EXECUTING*.
	Status pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	Action *string `pulumi:"action"`
	// Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
	// is set to `ALARM`.
	AlarmId *string `pulumi:"alarmId"`
	// Specifies the cooling duration (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	//
	// <a name="scheduledPolicyObject"></a>
	// The `scheduledPolicy` block supports:
	CoolDownTime *int `pulumi:"coolDownTime"`
	// Specifies the region in which to create the AS policy. If omitted, the
	// provider-level region will be used. Changing this creates a new AS policy.
	Region *string `pulumi:"region"`
	// Specifies the AS group ID. Changing this creates a new AS policy.
	ScalingGroupId string `pulumi:"scalingGroupId"`
	// Specifies the action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction *PolicyScalingPolicyAction `pulumi:"scalingPolicyAction"`
	// Specifies the name of the AS policy. The name contains only letters, digits,
	// underscores(_), and hyphens(-), and cannot exceed 64 characters.
	ScalingPolicyName string `pulumi:"scalingPolicyName"`
	// Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
	// + **ALARM**: indicates that the scaling action is triggered by an alarm.
	// + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
	// + **RECURRENCE**: indicates that the scaling action is triggered periodically.
	ScalingPolicyType string `pulumi:"scalingPolicyType"`
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
	// The object structure is documented below.
	ScheduledPolicy *PolicyScheduledPolicy `pulumi:"scheduledPolicy"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	Action pulumi.StringPtrInput
	// Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
	// is set to `ALARM`.
	AlarmId pulumi.StringPtrInput
	// Specifies the cooling duration (in seconds).
	// The value ranges from 0 to 86400 and is 300 by default.
	//
	// <a name="scheduledPolicyObject"></a>
	// The `scheduledPolicy` block supports:
	CoolDownTime pulumi.IntPtrInput
	// Specifies the region in which to create the AS policy. If omitted, the
	// provider-level region will be used. Changing this creates a new AS policy.
	Region pulumi.StringPtrInput
	// Specifies the AS group ID. Changing this creates a new AS policy.
	ScalingGroupId pulumi.StringInput
	// Specifies the action of the AS policy.
	// The object structure is documented below.
	ScalingPolicyAction PolicyScalingPolicyActionPtrInput
	// Specifies the name of the AS policy. The name contains only letters, digits,
	// underscores(_), and hyphens(-), and cannot exceed 64 characters.
	ScalingPolicyName pulumi.StringInput
	// Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
	// + **ALARM**: indicates that the scaling action is triggered by an alarm.
	// + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
	// + **RECURRENCE**: indicates that the scaling action is triggered periodically.
	ScalingPolicyType pulumi.StringInput
	// Specifies the periodic or scheduled AS policy.
	// This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
	// The object structure is documented below.
	ScheduledPolicy PolicyScheduledPolicyPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func (o PolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Specifies the alarm rule ID. This parameter is mandatory when `scalingPolicyType`
// is set to `ALARM`.
func (o PolicyOutput) AlarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.AlarmId }).(pulumi.StringPtrOutput)
}

// Specifies the cooling duration (in seconds).
// The value ranges from 0 to 86400 and is 300 by default.
//
// <a name="scheduledPolicyObject"></a>
// The `scheduledPolicy` block supports:
func (o PolicyOutput) CoolDownTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntOutput { return v.CoolDownTime }).(pulumi.IntOutput)
}

func (o PolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the region in which to create the AS policy. If omitted, the
// provider-level region will be used. Changing this creates a new AS policy.
func (o PolicyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the AS group ID. Changing this creates a new AS policy.
func (o PolicyOutput) ScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ScalingGroupId }).(pulumi.StringOutput)
}

// Specifies the action of the AS policy.
// The object structure is documented below.
func (o PolicyOutput) ScalingPolicyAction() PolicyScalingPolicyActionOutput {
	return o.ApplyT(func(v *Policy) PolicyScalingPolicyActionOutput { return v.ScalingPolicyAction }).(PolicyScalingPolicyActionOutput)
}

// Specifies the name of the AS policy. The name contains only letters, digits,
// underscores(_), and hyphens(-), and cannot exceed 64 characters.
func (o PolicyOutput) ScalingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ScalingPolicyName }).(pulumi.StringOutput)
}

// Specifies the AS policy type. The value can be `ALARM`, `SCHEDULED` or `RECURRENCE`.
// + **ALARM**: indicates that the scaling action is triggered by an alarm.
// + **SCHEDULED**: indicates that the scaling action is triggered as scheduled.
// + **RECURRENCE**: indicates that the scaling action is triggered periodically.
func (o PolicyOutput) ScalingPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.ScalingPolicyType }).(pulumi.StringOutput)
}

// Specifies the periodic or scheduled AS policy.
// This parameter is mandatory when `scalingPolicyType` is set to `SCHEDULED` or `RECURRENCE`.
// The object structure is documented below.
func (o PolicyOutput) ScheduledPolicy() PolicyScheduledPolicyOutput {
	return o.ApplyT(func(v *Policy) PolicyScheduledPolicyOutput { return v.ScheduledPolicy }).(PolicyScheduledPolicyOutput)
}

// The AS policy status. The value can be *INSERVICE*, *PAUSED* or *EXECUTING*.
func (o PolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}

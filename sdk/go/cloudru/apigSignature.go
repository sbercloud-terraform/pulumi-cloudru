// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type ApigSignature struct {
	pulumi.CustomResourceState

	// The signature algorithm.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// The creation time of the signature.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the dedicated instance to which the signature belongs.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The signature key.
	Key pulumi.StringOutput `pulumi:"key"`
	// The signature name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region where the signature is located.
	Region pulumi.StringOutput `pulumi:"region"`
	// The signature secret.
	Secret pulumi.StringOutput `pulumi:"secret"`
	// The signature type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The latest update time of the signature.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewApigSignature registers a new resource with the given unique name, arguments, and options.
func NewApigSignature(ctx *pulumi.Context,
	name string, args *ApigSignatureArgs, opts ...pulumi.ResourceOption) (*ApigSignature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Secret != nil {
		args.Secret = pulumi.ToSecret(args.Secret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApigSignature
	err := ctx.RegisterResource("cloudru:index/apigSignature:ApigSignature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigSignature gets an existing ApigSignature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigSignature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigSignatureState, opts ...pulumi.ResourceOption) (*ApigSignature, error) {
	var resource ApigSignature
	err := ctx.ReadResource("cloudru:index/apigSignature:ApigSignature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigSignature resources.
type apigSignatureState struct {
	// The signature algorithm.
	Algorithm *string `pulumi:"algorithm"`
	// The creation time of the signature.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the dedicated instance to which the signature belongs.
	InstanceId *string `pulumi:"instanceId"`
	// The signature key.
	Key *string `pulumi:"key"`
	// The signature name.
	Name *string `pulumi:"name"`
	// The region where the signature is located.
	Region *string `pulumi:"region"`
	// The signature secret.
	Secret *string `pulumi:"secret"`
	// The signature type.
	Type *string `pulumi:"type"`
	// The latest update time of the signature.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ApigSignatureState struct {
	// The signature algorithm.
	Algorithm pulumi.StringPtrInput
	// The creation time of the signature.
	CreatedAt pulumi.StringPtrInput
	// The ID of the dedicated instance to which the signature belongs.
	InstanceId pulumi.StringPtrInput
	// The signature key.
	Key pulumi.StringPtrInput
	// The signature name.
	Name pulumi.StringPtrInput
	// The region where the signature is located.
	Region pulumi.StringPtrInput
	// The signature secret.
	Secret pulumi.StringPtrInput
	// The signature type.
	Type pulumi.StringPtrInput
	// The latest update time of the signature.
	UpdatedAt pulumi.StringPtrInput
}

func (ApigSignatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigSignatureState)(nil)).Elem()
}

type apigSignatureArgs struct {
	// The signature algorithm.
	Algorithm *string `pulumi:"algorithm"`
	// The ID of the dedicated instance to which the signature belongs.
	InstanceId string `pulumi:"instanceId"`
	// The signature key.
	Key *string `pulumi:"key"`
	// The signature name.
	Name *string `pulumi:"name"`
	// The region where the signature is located.
	Region *string `pulumi:"region"`
	// The signature secret.
	Secret *string `pulumi:"secret"`
	// The signature type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ApigSignature resource.
type ApigSignatureArgs struct {
	// The signature algorithm.
	Algorithm pulumi.StringPtrInput
	// The ID of the dedicated instance to which the signature belongs.
	InstanceId pulumi.StringInput
	// The signature key.
	Key pulumi.StringPtrInput
	// The signature name.
	Name pulumi.StringPtrInput
	// The region where the signature is located.
	Region pulumi.StringPtrInput
	// The signature secret.
	Secret pulumi.StringPtrInput
	// The signature type.
	Type pulumi.StringInput
}

func (ApigSignatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigSignatureArgs)(nil)).Elem()
}

type ApigSignatureInput interface {
	pulumi.Input

	ToApigSignatureOutput() ApigSignatureOutput
	ToApigSignatureOutputWithContext(ctx context.Context) ApigSignatureOutput
}

func (*ApigSignature) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigSignature)(nil)).Elem()
}

func (i *ApigSignature) ToApigSignatureOutput() ApigSignatureOutput {
	return i.ToApigSignatureOutputWithContext(context.Background())
}

func (i *ApigSignature) ToApigSignatureOutputWithContext(ctx context.Context) ApigSignatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigSignatureOutput)
}

// ApigSignatureArrayInput is an input type that accepts ApigSignatureArray and ApigSignatureArrayOutput values.
// You can construct a concrete instance of `ApigSignatureArrayInput` via:
//
//	ApigSignatureArray{ ApigSignatureArgs{...} }
type ApigSignatureArrayInput interface {
	pulumi.Input

	ToApigSignatureArrayOutput() ApigSignatureArrayOutput
	ToApigSignatureArrayOutputWithContext(context.Context) ApigSignatureArrayOutput
}

type ApigSignatureArray []ApigSignatureInput

func (ApigSignatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigSignature)(nil)).Elem()
}

func (i ApigSignatureArray) ToApigSignatureArrayOutput() ApigSignatureArrayOutput {
	return i.ToApigSignatureArrayOutputWithContext(context.Background())
}

func (i ApigSignatureArray) ToApigSignatureArrayOutputWithContext(ctx context.Context) ApigSignatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigSignatureArrayOutput)
}

// ApigSignatureMapInput is an input type that accepts ApigSignatureMap and ApigSignatureMapOutput values.
// You can construct a concrete instance of `ApigSignatureMapInput` via:
//
//	ApigSignatureMap{ "key": ApigSignatureArgs{...} }
type ApigSignatureMapInput interface {
	pulumi.Input

	ToApigSignatureMapOutput() ApigSignatureMapOutput
	ToApigSignatureMapOutputWithContext(context.Context) ApigSignatureMapOutput
}

type ApigSignatureMap map[string]ApigSignatureInput

func (ApigSignatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigSignature)(nil)).Elem()
}

func (i ApigSignatureMap) ToApigSignatureMapOutput() ApigSignatureMapOutput {
	return i.ToApigSignatureMapOutputWithContext(context.Background())
}

func (i ApigSignatureMap) ToApigSignatureMapOutputWithContext(ctx context.Context) ApigSignatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigSignatureMapOutput)
}

type ApigSignatureOutput struct{ *pulumi.OutputState }

func (ApigSignatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigSignature)(nil)).Elem()
}

func (o ApigSignatureOutput) ToApigSignatureOutput() ApigSignatureOutput {
	return o
}

func (o ApigSignatureOutput) ToApigSignatureOutputWithContext(ctx context.Context) ApigSignatureOutput {
	return o
}

// The signature algorithm.
func (o ApigSignatureOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// The creation time of the signature.
func (o ApigSignatureOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of the dedicated instance to which the signature belongs.
func (o ApigSignatureOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The signature key.
func (o ApigSignatureOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The signature name.
func (o ApigSignatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region where the signature is located.
func (o ApigSignatureOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The signature secret.
func (o ApigSignatureOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.Secret }).(pulumi.StringOutput)
}

// The signature type.
func (o ApigSignatureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The latest update time of the signature.
func (o ApigSignatureOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigSignature) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ApigSignatureArrayOutput struct{ *pulumi.OutputState }

func (ApigSignatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigSignature)(nil)).Elem()
}

func (o ApigSignatureArrayOutput) ToApigSignatureArrayOutput() ApigSignatureArrayOutput {
	return o
}

func (o ApigSignatureArrayOutput) ToApigSignatureArrayOutputWithContext(ctx context.Context) ApigSignatureArrayOutput {
	return o
}

func (o ApigSignatureArrayOutput) Index(i pulumi.IntInput) ApigSignatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApigSignature {
		return vs[0].([]*ApigSignature)[vs[1].(int)]
	}).(ApigSignatureOutput)
}

type ApigSignatureMapOutput struct{ *pulumi.OutputState }

func (ApigSignatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigSignature)(nil)).Elem()
}

func (o ApigSignatureMapOutput) ToApigSignatureMapOutput() ApigSignatureMapOutput {
	return o
}

func (o ApigSignatureMapOutput) ToApigSignatureMapOutputWithContext(ctx context.Context) ApigSignatureMapOutput {
	return o
}

func (o ApigSignatureMapOutput) MapIndex(k pulumi.StringInput) ApigSignatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApigSignature {
		return vs[0].(map[string]*ApigSignature)[vs[1].(string)]
	}).(ApigSignatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigSignatureInput)(nil)).Elem(), &ApigSignature{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigSignatureArrayInput)(nil)).Elem(), ApigSignatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigSignatureMapInput)(nil)).Elem(), ApigSignatureMap{})
	pulumi.RegisterOutputType(ApigSignatureOutput{})
	pulumi.RegisterOutputType(ApigSignatureArrayOutput{})
	pulumi.RegisterOutputType(ApigSignatureMapOutput{})
}

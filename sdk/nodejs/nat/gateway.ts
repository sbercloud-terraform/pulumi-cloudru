// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Gateway extends pulumi.CustomResource {
    /**
     * Get an existing Gateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayState, opts?: pulumi.CustomResourceOptions): Gateway {
        return new Gateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Nat/gateway:Gateway';

    /**
     * Returns true if the given object is an instance of Gateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Gateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Gateway.__pulumiType;
    }

    declare public readonly autoRenew: pulumi.Output<string | undefined>;
    /**
     * The order information of the NAT gateway.
     */
    declare public /*out*/ readonly billingInfo: pulumi.Output<string>;
    /**
     * The bandwidth that the NAT gateway can receive or send per second.
     */
    declare public /*out*/ readonly bpsMax: pulumi.Output<number>;
    declare public readonly chargingMode: pulumi.Output<string>;
    /**
     * The creation time of the NAT gateway.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the NAT gateway.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The maximum number of DNAT rules on the NAT gateway.
     */
    declare public /*out*/ readonly dnatRulesLimit: pulumi.Output<number>;
    /**
     * The enterprise project ID of the NAT gateway.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * The NAT gateway name.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The IP address used for the NG port of the NAT gateway.
     */
    declare public readonly ngportIpAddress: pulumi.Output<string>;
    declare public readonly period: pulumi.Output<number | undefined>;
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * The number of packets that the NAT gateway can receive or send per second.
     */
    declare public /*out*/ readonly ppsMax: pulumi.Output<number>;
    /**
     * The region where the NAT gateway is located.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The session configuration of the NAT gateway.
     */
    declare public readonly sessionConf: pulumi.Output<outputs.Nat.GatewaySessionConf>;
    /**
     * The maximum number of SNAT rules on the NAT gateway.
     */
    declare public /*out*/ readonly snatRulePublicIpLimit: pulumi.Output<number>;
    /**
     * The specification of the NAT gateway.
     */
    declare public readonly spec: pulumi.Output<string>;
    /**
     * The current status of the NAT gateway.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ID of the VPC to which the NAT gateway belongs.
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a Gateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayArgs | GatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayState | undefined;
            resourceInputs["autoRenew"] = state?.autoRenew;
            resourceInputs["billingInfo"] = state?.billingInfo;
            resourceInputs["bpsMax"] = state?.bpsMax;
            resourceInputs["chargingMode"] = state?.chargingMode;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["dnatRulesLimit"] = state?.dnatRulesLimit;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["name"] = state?.name;
            resourceInputs["ngportIpAddress"] = state?.ngportIpAddress;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["ppsMax"] = state?.ppsMax;
            resourceInputs["region"] = state?.region;
            resourceInputs["sessionConf"] = state?.sessionConf;
            resourceInputs["snatRulePublicIpLimit"] = state?.snatRulePublicIpLimit;
            resourceInputs["spec"] = state?.spec;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as GatewayArgs | undefined;
            if (args?.spec === undefined && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoRenew"] = args?.autoRenew;
            resourceInputs["chargingMode"] = args?.chargingMode;
            resourceInputs["description"] = args?.description;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["name"] = args?.name;
            resourceInputs["ngportIpAddress"] = args?.ngportIpAddress;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["region"] = args?.region;
            resourceInputs["sessionConf"] = args?.sessionConf;
            resourceInputs["spec"] = args?.spec;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["billingInfo"] = undefined /*out*/;
            resourceInputs["bpsMax"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dnatRulesLimit"] = undefined /*out*/;
            resourceInputs["ppsMax"] = undefined /*out*/;
            resourceInputs["snatRulePublicIpLimit"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Gateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Gateway resources.
 */
export interface GatewayState {
    autoRenew?: pulumi.Input<string>;
    /**
     * The order information of the NAT gateway.
     */
    billingInfo?: pulumi.Input<string>;
    /**
     * The bandwidth that the NAT gateway can receive or send per second.
     */
    bpsMax?: pulumi.Input<number>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The creation time of the NAT gateway.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the NAT gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * The maximum number of DNAT rules on the NAT gateway.
     */
    dnatRulesLimit?: pulumi.Input<number>;
    /**
     * The enterprise project ID of the NAT gateway.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The NAT gateway name.
     */
    name?: pulumi.Input<string>;
    /**
     * The IP address used for the NG port of the NAT gateway.
     */
    ngportIpAddress?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The number of packets that the NAT gateway can receive or send per second.
     */
    ppsMax?: pulumi.Input<number>;
    /**
     * The region where the NAT gateway is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The session configuration of the NAT gateway.
     */
    sessionConf?: pulumi.Input<inputs.Nat.GatewaySessionConf>;
    /**
     * The maximum number of SNAT rules on the NAT gateway.
     */
    snatRulePublicIpLimit?: pulumi.Input<number>;
    /**
     * The specification of the NAT gateway.
     */
    spec?: pulumi.Input<string>;
    /**
     * The current status of the NAT gateway.
     */
    status?: pulumi.Input<string>;
    /**
     * The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC to which the NAT gateway belongs.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Gateway resource.
 */
export interface GatewayArgs {
    autoRenew?: pulumi.Input<string>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The description of the NAT gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * The enterprise project ID of the NAT gateway.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The NAT gateway name.
     */
    name?: pulumi.Input<string>;
    /**
     * The IP address used for the NG port of the NAT gateway.
     */
    ngportIpAddress?: pulumi.Input<string>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * The region where the NAT gateway is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The session configuration of the NAT gateway.
     */
    sessionConf?: pulumi.Input<inputs.Nat.GatewaySessionConf>;
    /**
     * The specification of the NAT gateway.
     */
    spec: pulumi.Input<string>;
    /**
     * The network ID of the downstream interface (the next hop of the DVR) of the NAT gateway.
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC to which the NAT gateway belongs.
     */
    vpcId: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a DCS account resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const test = new sbercloud.DcsAccount("test", {
 *     instanceId: instanceId,
 *     accountName: "user",
 *     accountRole: "read",
 *     accountPassword: "Terraform@123",
 *     description: "add account",
 * });
 * ```
 *
 * ## Import
 *
 * The DCS account can be imported using the DCS instance ID and the DCS account ID separated by a slash, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:index/dcsAccount:DcsAccount test <instance_id>/<id>
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason. The missing attributes include: `account_password`.
 *
 * It is generally recommended running `pulumi preview` after importing the account.
 *
 * You can then decide if changes should be applied to the account, or the resource definition should be updated to
 *
 * align with the account. Also you can ignore changes as below.
 *
 * hcl
 *
 * resource "sbercloud_dcs_account" "test" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       account_password,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class DcsAccount extends pulumi.CustomResource {
    /**
     * Get an existing DcsAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DcsAccountState, opts?: pulumi.CustomResourceOptions): DcsAccount {
        return new DcsAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dcsAccount:DcsAccount';

    /**
     * Returns true if the given object is an instance of DcsAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DcsAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DcsAccount.__pulumiType;
    }

    /**
     * Specifies the name of the account.
     * Changing this creates a new resource.
     */
    public readonly accountName!: pulumi.Output<string>;
    /**
     * Specifies the password of the account.
     */
    public readonly accountPassword!: pulumi.Output<string>;
    /**
     * Specifies the role of the account.
     * Value options:
     * + **read**: The account has read-only privilege.
     * + **write**: The account has read and write privilege.
     */
    public readonly accountRole!: pulumi.Output<string>;
    /**
     * Indicates the type of the account. The value can be **normal** or **default**.
     */
    public /*out*/ readonly accountType!: pulumi.Output<string>;
    /**
     * Specifies the description of the account.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the ID of the DCS instance.
     * Changing this creates a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Indicates the status of the account. The value can be **CREATING**, **AVAILABLE**, **CREATEFAILED**,
     * **DELETED**, **DELETEFAILED**, **DELETING**, **UPDATING** or **ERROR**.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a DcsAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DcsAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DcsAccountArgs | DcsAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DcsAccountState | undefined;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["accountPassword"] = state ? state.accountPassword : undefined;
            resourceInputs["accountRole"] = state ? state.accountRole : undefined;
            resourceInputs["accountType"] = state ? state.accountType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as DcsAccountArgs | undefined;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.accountPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountPassword'");
            }
            if ((!args || args.accountRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountRole'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["accountPassword"] = args?.accountPassword ? pulumi.secret(args.accountPassword) : undefined;
            resourceInputs["accountRole"] = args ? args.accountRole : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["accountType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["accountPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DcsAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DcsAccount resources.
 */
export interface DcsAccountState {
    /**
     * Specifies the name of the account.
     * Changing this creates a new resource.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Specifies the password of the account.
     */
    accountPassword?: pulumi.Input<string>;
    /**
     * Specifies the role of the account.
     * Value options:
     * + **read**: The account has read-only privilege.
     * + **write**: The account has read and write privilege.
     */
    accountRole?: pulumi.Input<string>;
    /**
     * Indicates the type of the account. The value can be **normal** or **default**.
     */
    accountType?: pulumi.Input<string>;
    /**
     * Specifies the description of the account.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of the DCS instance.
     * Changing this creates a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Indicates the status of the account. The value can be **CREATING**, **AVAILABLE**, **CREATEFAILED**,
     * **DELETED**, **DELETEFAILED**, **DELETING**, **UPDATING** or **ERROR**.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DcsAccount resource.
 */
export interface DcsAccountArgs {
    /**
     * Specifies the name of the account.
     * Changing this creates a new resource.
     */
    accountName: pulumi.Input<string>;
    /**
     * Specifies the password of the account.
     */
    accountPassword: pulumi.Input<string>;
    /**
     * Specifies the role of the account.
     * Value options:
     * + **read**: The account has read-only privilege.
     * + **write**: The account has read and write privilege.
     */
    accountRole: pulumi.Input<string>;
    /**
     * Specifies the description of the account.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of the DCS instance.
     * Changing this creates a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

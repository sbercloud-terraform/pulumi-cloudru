# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetApigChannelsResult',
    'AwaitableGetApigChannelsResult',
    'get_apig_channels',
    'get_apig_channels_output',
]

@pulumi.output_type
class GetApigChannelsResult:
    """
    A collection of values returned by getApigChannels.
    """
    def __init__(__self__, channel_id=None, id=None, instance_id=None, member_group_id=None, member_group_name=None, name=None, precise_search=None, region=None, vpc_channels=None):
        if channel_id and not isinstance(channel_id, str):
            raise TypeError("Expected argument 'channel_id' to be a str")
        pulumi.set(__self__, "channel_id", channel_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if member_group_id and not isinstance(member_group_id, str):
            raise TypeError("Expected argument 'member_group_id' to be a str")
        pulumi.set(__self__, "member_group_id", member_group_id)
        if member_group_name and not isinstance(member_group_name, str):
            raise TypeError("Expected argument 'member_group_name' to be a str")
        pulumi.set(__self__, "member_group_name", member_group_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if precise_search and not isinstance(precise_search, str):
            raise TypeError("Expected argument 'precise_search' to be a str")
        pulumi.set(__self__, "precise_search", precise_search)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if vpc_channels and not isinstance(vpc_channels, list):
            raise TypeError("Expected argument 'vpc_channels' to be a list")
        pulumi.set(__self__, "vpc_channels", vpc_channels)

    @_builtins.property
    @pulumi.getter(name="channelId")
    def channel_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "channel_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="memberGroupId")
    def member_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "member_group_id")

    @_builtins.property
    @pulumi.getter(name="memberGroupName")
    def member_group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "member_group_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="preciseSearch")
    def precise_search(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "precise_search")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="vpcChannels")
    def vpc_channels(self) -> Sequence['outputs.GetApigChannelsVpcChannelResult']:
        return pulumi.get(self, "vpc_channels")


class AwaitableGetApigChannelsResult(GetApigChannelsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApigChannelsResult(
            channel_id=self.channel_id,
            id=self.id,
            instance_id=self.instance_id,
            member_group_id=self.member_group_id,
            member_group_name=self.member_group_name,
            name=self.name,
            precise_search=self.precise_search,
            region=self.region,
            vpc_channels=self.vpc_channels)


def get_apig_channels(channel_id: Optional[_builtins.str] = None,
                      instance_id: Optional[_builtins.str] = None,
                      member_group_id: Optional[_builtins.str] = None,
                      member_group_name: Optional[_builtins.str] = None,
                      name: Optional[_builtins.str] = None,
                      precise_search: Optional[_builtins.str] = None,
                      region: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApigChannelsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['channelId'] = channel_id
    __args__['instanceId'] = instance_id
    __args__['memberGroupId'] = member_group_id
    __args__['memberGroupName'] = member_group_name
    __args__['name'] = name
    __args__['preciseSearch'] = precise_search
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getApigChannels:getApigChannels', __args__, opts=opts, typ=GetApigChannelsResult).value

    return AwaitableGetApigChannelsResult(
        channel_id=pulumi.get(__ret__, 'channel_id'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        member_group_id=pulumi.get(__ret__, 'member_group_id'),
        member_group_name=pulumi.get(__ret__, 'member_group_name'),
        name=pulumi.get(__ret__, 'name'),
        precise_search=pulumi.get(__ret__, 'precise_search'),
        region=pulumi.get(__ret__, 'region'),
        vpc_channels=pulumi.get(__ret__, 'vpc_channels'))
def get_apig_channels_output(channel_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                             member_group_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             member_group_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             precise_search: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApigChannelsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['channelId'] = channel_id
    __args__['instanceId'] = instance_id
    __args__['memberGroupId'] = member_group_id
    __args__['memberGroupName'] = member_group_name
    __args__['name'] = name
    __args__['preciseSearch'] = precise_search
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getApigChannels:getApigChannels', __args__, opts=opts, typ=GetApigChannelsResult)
    return __ret__.apply(lambda __response__: GetApigChannelsResult(
        channel_id=pulumi.get(__response__, 'channel_id'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        member_group_id=pulumi.get(__response__, 'member_group_id'),
        member_group_name=pulumi.get(__response__, 'member_group_name'),
        name=pulumi.get(__response__, 'name'),
        precise_search=pulumi.get(__response__, 'precise_search'),
        region=pulumi.get(__response__, 'region'),
        vpc_channels=pulumi.get(__response__, 'vpc_channels')))

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cts

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Notification struct {
	pulumi.CustomResourceState

	AgencyName     pulumi.StringPtrOutput               `pulumi:"agencyName"`
	CreatedAt      pulumi.StringOutput                  `pulumi:"createdAt"`
	Enabled        pulumi.BoolPtrOutput                 `pulumi:"enabled"`
	Filter         NotificationFilterPtrOutput          `pulumi:"filter"`
	Name           pulumi.StringOutput                  `pulumi:"name"`
	NotificationId pulumi.StringOutput                  `pulumi:"notificationId"`
	OperationType  pulumi.StringOutput                  `pulumi:"operationType"`
	OperationUsers NotificationOperationUserArrayOutput `pulumi:"operationUsers"`
	Operations     NotificationOperationArrayOutput     `pulumi:"operations"`
	Region         pulumi.StringOutput                  `pulumi:"region"`
	SmnTopic       pulumi.StringPtrOutput               `pulumi:"smnTopic"`
	Status         pulumi.StringOutput                  `pulumi:"status"`
}

// NewNotification registers a new resource with the given unique name, arguments, and options.
func NewNotification(ctx *pulumi.Context,
	name string, args *NotificationArgs, opts ...pulumi.ResourceOption) (*Notification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OperationType == nil {
		return nil, errors.New("invalid value for required argument 'OperationType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Notification
	err := ctx.RegisterResource("sbercloud:Cts/notification:Notification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotification gets an existing Notification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationState, opts ...pulumi.ResourceOption) (*Notification, error) {
	var resource Notification
	err := ctx.ReadResource("sbercloud:Cts/notification:Notification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Notification resources.
type notificationState struct {
	AgencyName     *string                     `pulumi:"agencyName"`
	CreatedAt      *string                     `pulumi:"createdAt"`
	Enabled        *bool                       `pulumi:"enabled"`
	Filter         *NotificationFilter         `pulumi:"filter"`
	Name           *string                     `pulumi:"name"`
	NotificationId *string                     `pulumi:"notificationId"`
	OperationType  *string                     `pulumi:"operationType"`
	OperationUsers []NotificationOperationUser `pulumi:"operationUsers"`
	Operations     []NotificationOperation     `pulumi:"operations"`
	Region         *string                     `pulumi:"region"`
	SmnTopic       *string                     `pulumi:"smnTopic"`
	Status         *string                     `pulumi:"status"`
}

type NotificationState struct {
	AgencyName     pulumi.StringPtrInput
	CreatedAt      pulumi.StringPtrInput
	Enabled        pulumi.BoolPtrInput
	Filter         NotificationFilterPtrInput
	Name           pulumi.StringPtrInput
	NotificationId pulumi.StringPtrInput
	OperationType  pulumi.StringPtrInput
	OperationUsers NotificationOperationUserArrayInput
	Operations     NotificationOperationArrayInput
	Region         pulumi.StringPtrInput
	SmnTopic       pulumi.StringPtrInput
	Status         pulumi.StringPtrInput
}

func (NotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationState)(nil)).Elem()
}

type notificationArgs struct {
	AgencyName     *string                     `pulumi:"agencyName"`
	Enabled        *bool                       `pulumi:"enabled"`
	Filter         *NotificationFilter         `pulumi:"filter"`
	Name           *string                     `pulumi:"name"`
	OperationType  string                      `pulumi:"operationType"`
	OperationUsers []NotificationOperationUser `pulumi:"operationUsers"`
	Operations     []NotificationOperation     `pulumi:"operations"`
	Region         *string                     `pulumi:"region"`
	SmnTopic       *string                     `pulumi:"smnTopic"`
}

// The set of arguments for constructing a Notification resource.
type NotificationArgs struct {
	AgencyName     pulumi.StringPtrInput
	Enabled        pulumi.BoolPtrInput
	Filter         NotificationFilterPtrInput
	Name           pulumi.StringPtrInput
	OperationType  pulumi.StringInput
	OperationUsers NotificationOperationUserArrayInput
	Operations     NotificationOperationArrayInput
	Region         pulumi.StringPtrInput
	SmnTopic       pulumi.StringPtrInput
}

func (NotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationArgs)(nil)).Elem()
}

type NotificationInput interface {
	pulumi.Input

	ToNotificationOutput() NotificationOutput
	ToNotificationOutputWithContext(ctx context.Context) NotificationOutput
}

func (*Notification) ElementType() reflect.Type {
	return reflect.TypeOf((**Notification)(nil)).Elem()
}

func (i *Notification) ToNotificationOutput() NotificationOutput {
	return i.ToNotificationOutputWithContext(context.Background())
}

func (i *Notification) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationOutput)
}

// NotificationArrayInput is an input type that accepts NotificationArray and NotificationArrayOutput values.
// You can construct a concrete instance of `NotificationArrayInput` via:
//
//	NotificationArray{ NotificationArgs{...} }
type NotificationArrayInput interface {
	pulumi.Input

	ToNotificationArrayOutput() NotificationArrayOutput
	ToNotificationArrayOutputWithContext(context.Context) NotificationArrayOutput
}

type NotificationArray []NotificationInput

func (NotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notification)(nil)).Elem()
}

func (i NotificationArray) ToNotificationArrayOutput() NotificationArrayOutput {
	return i.ToNotificationArrayOutputWithContext(context.Background())
}

func (i NotificationArray) ToNotificationArrayOutputWithContext(ctx context.Context) NotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationArrayOutput)
}

// NotificationMapInput is an input type that accepts NotificationMap and NotificationMapOutput values.
// You can construct a concrete instance of `NotificationMapInput` via:
//
//	NotificationMap{ "key": NotificationArgs{...} }
type NotificationMapInput interface {
	pulumi.Input

	ToNotificationMapOutput() NotificationMapOutput
	ToNotificationMapOutputWithContext(context.Context) NotificationMapOutput
}

type NotificationMap map[string]NotificationInput

func (NotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notification)(nil)).Elem()
}

func (i NotificationMap) ToNotificationMapOutput() NotificationMapOutput {
	return i.ToNotificationMapOutputWithContext(context.Background())
}

func (i NotificationMap) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationMapOutput)
}

type NotificationOutput struct{ *pulumi.OutputState }

func (NotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Notification)(nil)).Elem()
}

func (o NotificationOutput) ToNotificationOutput() NotificationOutput {
	return o
}

func (o NotificationOutput) ToNotificationOutputWithContext(ctx context.Context) NotificationOutput {
	return o
}

func (o NotificationOutput) AgencyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringPtrOutput { return v.AgencyName }).(pulumi.StringPtrOutput)
}

func (o NotificationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o NotificationOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o NotificationOutput) Filter() NotificationFilterPtrOutput {
	return o.ApplyT(func(v *Notification) NotificationFilterPtrOutput { return v.Filter }).(NotificationFilterPtrOutput)
}

func (o NotificationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NotificationOutput) NotificationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.NotificationId }).(pulumi.StringOutput)
}

func (o NotificationOutput) OperationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.OperationType }).(pulumi.StringOutput)
}

func (o NotificationOutput) OperationUsers() NotificationOperationUserArrayOutput {
	return o.ApplyT(func(v *Notification) NotificationOperationUserArrayOutput { return v.OperationUsers }).(NotificationOperationUserArrayOutput)
}

func (o NotificationOutput) Operations() NotificationOperationArrayOutput {
	return o.ApplyT(func(v *Notification) NotificationOperationArrayOutput { return v.Operations }).(NotificationOperationArrayOutput)
}

func (o NotificationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o NotificationOutput) SmnTopic() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringPtrOutput { return v.SmnTopic }).(pulumi.StringPtrOutput)
}

func (o NotificationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Notification) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type NotificationArrayOutput struct{ *pulumi.OutputState }

func (NotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Notification)(nil)).Elem()
}

func (o NotificationArrayOutput) ToNotificationArrayOutput() NotificationArrayOutput {
	return o
}

func (o NotificationArrayOutput) ToNotificationArrayOutputWithContext(ctx context.Context) NotificationArrayOutput {
	return o
}

func (o NotificationArrayOutput) Index(i pulumi.IntInput) NotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Notification {
		return vs[0].([]*Notification)[vs[1].(int)]
	}).(NotificationOutput)
}

type NotificationMapOutput struct{ *pulumi.OutputState }

func (NotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Notification)(nil)).Elem()
}

func (o NotificationMapOutput) ToNotificationMapOutput() NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) ToNotificationMapOutputWithContext(ctx context.Context) NotificationMapOutput {
	return o
}

func (o NotificationMapOutput) MapIndex(k pulumi.StringInput) NotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Notification {
		return vs[0].(map[string]*Notification)[vs[1].(string)]
	}).(NotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationInput)(nil)).Elem(), &Notification{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationArrayInput)(nil)).Elem(), NotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationMapInput)(nil)).Elem(), NotificationMap{})
	pulumi.RegisterOutputType(NotificationOutput{})
	pulumi.RegisterOutputType(NotificationArrayOutput{})
	pulumi.RegisterOutputType(NotificationMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages DMS RocketMQ topic resources within SberCloud.
 *
 * ## Example Usage
 *
 * ### Create a topic for 5.x version instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const test = new sbercloud.DmsRocketmqTopic("test", {
 *     instanceId: instanceId,
 *     name: "topic_test",
 *     messageType: "NORMAL",
 * });
 * ```
 *
 * ### Create a topic with brokers for 4.8.0 version instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const test = new sbercloud.DmsRocketmqTopic("test", {
 *     instanceId: instanceId,
 *     name: "topic_test",
 *     queueNum: 3,
 *     permission: "all",
 *     brokers: [{
 *         name: "broker-0",
 *     }],
 * });
 * ```
 *
 * ### Create a topic with queues for 4.8.0 version instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const test = new sbercloud.DmsRocketmqTopic("test", {
 *     instanceId: instanceId,
 *     name: "topic_test",
 *     permission: "all",
 *     queues: [{
 *         broker: "broker-0",
 *         queueNum: 3,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The rocketmq topic can be imported using the rocketMQ instance ID and topic name separated by a slash, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:index/dmsRocketmqTopic:DmsRocketmqTopic test c8057fe5-23a8-46ef-ad83-c0055b4e0c5c/topic_1
 * ```
 */
export class DmsRocketmqTopic extends pulumi.CustomResource {
    /**
     * Get an existing DmsRocketmqTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DmsRocketmqTopicState, opts?: pulumi.CustomResourceOptions): DmsRocketmqTopic {
        return new DmsRocketmqTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dmsRocketmqTopic:DmsRocketmqTopic';

    /**
     * Returns true if the given object is an instance of DmsRocketmqTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DmsRocketmqTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DmsRocketmqTopic.__pulumiType;
    }

    /**
     * Specifies the list of associated brokers of the topic.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     * Changing this parameter will create a new resource.
     * The brokers structure is documented below.
     */
    public readonly brokers!: pulumi.Output<outputs.DmsRocketmqTopicBroker[]>;
    /**
     * Specifies the ID of the rocketMQ instance.
     * Changing this parameter will create a new resource.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Specifies the message type of the topic.
     * It's only valid when RocketMQ instance version is **5.x**. Valid values are:
     * + **NORMAL**: Normal messages.
     * + **FIFO**: Ordered messages.
     * + **DELAY**: Scheduled messages.
     * + **TRANSACTION**: Transactional messages.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly messageType!: pulumi.Output<string>;
    /**
     * Specifies the name of the broker.
     *
     * <a name="DmsRocketMQTopic_QueueRef"></a>
     * The `queues` block supports:
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the permissions of the topic.
     * Value options: **all**, **sub**, **pub**. Defaults to **all**.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * Specifies the number of the queues.
     */
    public readonly queueNum!: pulumi.Output<number>;
    /**
     * Specifies the queues information of the topic.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     * The queues structure is documented below.
     * Changing this parameter will create a new resource.
     */
    public readonly queues!: pulumi.Output<outputs.DmsRocketmqTopicQueue[] | undefined>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the total number of read queues.
     */
    public readonly totalReadQueueNum!: pulumi.Output<number>;
    /**
     * Specifies the total number of write queues.
     *
     * <a name="DmsRocketMQTopic_BrokerRef"></a>
     * The `brokers` block supports:
     */
    public readonly totalWriteQueueNum!: pulumi.Output<number>;

    /**
     * Create a DmsRocketmqTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DmsRocketmqTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DmsRocketmqTopicArgs | DmsRocketmqTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DmsRocketmqTopicState | undefined;
            resourceInputs["brokers"] = state ? state.brokers : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["messageType"] = state ? state.messageType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["queueNum"] = state ? state.queueNum : undefined;
            resourceInputs["queues"] = state ? state.queues : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["totalReadQueueNum"] = state ? state.totalReadQueueNum : undefined;
            resourceInputs["totalWriteQueueNum"] = state ? state.totalWriteQueueNum : undefined;
        } else {
            const args = argsOrState as DmsRocketmqTopicArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["brokers"] = args ? args.brokers : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["messageType"] = args ? args.messageType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["queueNum"] = args ? args.queueNum : undefined;
            resourceInputs["queues"] = args ? args.queues : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["totalReadQueueNum"] = args ? args.totalReadQueueNum : undefined;
            resourceInputs["totalWriteQueueNum"] = args ? args.totalWriteQueueNum : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DmsRocketmqTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DmsRocketmqTopic resources.
 */
export interface DmsRocketmqTopicState {
    /**
     * Specifies the list of associated brokers of the topic.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     * Changing this parameter will create a new resource.
     * The brokers structure is documented below.
     */
    brokers?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqTopicBroker>[]>;
    /**
     * Specifies the ID of the rocketMQ instance.
     * Changing this parameter will create a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the message type of the topic.
     * It's only valid when RocketMQ instance version is **5.x**. Valid values are:
     * + **NORMAL**: Normal messages.
     * + **FIFO**: Ordered messages.
     * + **DELAY**: Scheduled messages.
     * + **TRANSACTION**: Transactional messages.
     *
     * Changing this parameter will create a new resource.
     */
    messageType?: pulumi.Input<string>;
    /**
     * Specifies the name of the broker.
     *
     * <a name="DmsRocketMQTopic_QueueRef"></a>
     * The `queues` block supports:
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the permissions of the topic.
     * Value options: **all**, **sub**, **pub**. Defaults to **all**.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     */
    permission?: pulumi.Input<string>;
    /**
     * Specifies the number of the queues.
     */
    queueNum?: pulumi.Input<number>;
    /**
     * Specifies the queues information of the topic.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     * The queues structure is documented below.
     * Changing this parameter will create a new resource.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqTopicQueue>[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the total number of read queues.
     */
    totalReadQueueNum?: pulumi.Input<number>;
    /**
     * Specifies the total number of write queues.
     *
     * <a name="DmsRocketMQTopic_BrokerRef"></a>
     * The `brokers` block supports:
     */
    totalWriteQueueNum?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a DmsRocketmqTopic resource.
 */
export interface DmsRocketmqTopicArgs {
    /**
     * Specifies the list of associated brokers of the topic.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     * Changing this parameter will create a new resource.
     * The brokers structure is documented below.
     */
    brokers?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqTopicBroker>[]>;
    /**
     * Specifies the ID of the rocketMQ instance.
     * Changing this parameter will create a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the message type of the topic.
     * It's only valid when RocketMQ instance version is **5.x**. Valid values are:
     * + **NORMAL**: Normal messages.
     * + **FIFO**: Ordered messages.
     * + **DELAY**: Scheduled messages.
     * + **TRANSACTION**: Transactional messages.
     *
     * Changing this parameter will create a new resource.
     */
    messageType?: pulumi.Input<string>;
    /**
     * Specifies the name of the broker.
     *
     * <a name="DmsRocketMQTopic_QueueRef"></a>
     * The `queues` block supports:
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the permissions of the topic.
     * Value options: **all**, **sub**, **pub**. Defaults to **all**.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     */
    permission?: pulumi.Input<string>;
    /**
     * Specifies the number of the queues.
     */
    queueNum?: pulumi.Input<number>;
    /**
     * Specifies the queues information of the topic.
     * It's only valid when RocketMQ instance version is **4.8.0**.
     * The queues structure is documented below.
     * Changing this parameter will create a new resource.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.DmsRocketmqTopicQueue>[]>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the total number of read queues.
     */
    totalReadQueueNum?: pulumi.Input<number>;
    /**
     * Specifies the total number of write queues.
     *
     * <a name="DmsRocketMQTopic_BrokerRef"></a>
     * The `brokers` block supports:
     */
    totalWriteQueueNum?: pulumi.Input<number>;
}

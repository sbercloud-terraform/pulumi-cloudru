// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a DNS zone in the SberCloud DNS Service.
 *
 * ## Example Usage
 *
 * ### Create a public DNS zone
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const myPublicZone = new sbercloud.dns.Zone("my_public_zone", {
 *     name: "example.com.",
 *     email: "jdoe@example.com",
 *     description: "An example zone",
 *     ttl: 3000,
 *     zoneType: "public",
 * });
 * ```
 *
 * ### Create a private DNS zone
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const myPrivateZone = new sbercloud.dns.Zone("my_private_zone", {
 *     name: "1.example.com.",
 *     email: "jdoe@example.com",
 *     description: "An example zone",
 *     ttl: 3000,
 *     zoneType: "private",
 *     routers: [{
 *         routerId: "2c1fe4bd-ebad-44ca-ae9d-e94e63847b75",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * This resource can be imported by specifying the zone ID:
 *
 * ```sh
 * $ pulumi import sbercloud:Dns/zone:Zone zone_1 <zone_id>
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Dns/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * A description of the zone.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The email address of the administrator managing the zone.
     */
    declare public readonly email: pulumi.Output<string>;
    /**
     * The enterprise project id of the zone. Changing this creates a
     * new zone.
     */
    declare public readonly enterpriseProjectId: pulumi.Output<string>;
    /**
     * An array of master DNS servers.
     */
    declare public /*out*/ readonly masters: pulumi.Output<string[]>;
    /**
     * The name of the zone. Note the `.` at the end of the name. Changing this creates
     * a new DNS zone.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The recursive resolution proxy mode for subdomains of the private zone.
     */
    declare public readonly proxyPattern: pulumi.Output<string>;
    /**
     * The region in which to create the DNS zone. If omitted, the `region` argument
     * of the provider will be used. Changing this creates a new DNS zone.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Router configuration block which is required if zoneType is private. The router
     * structure is documented below.
     */
    declare public readonly routers: pulumi.Output<outputs.Dns.ZoneRouter[] | undefined>;
    /**
     * The status of the zone.
     */
    declare public readonly status: pulumi.Output<string>;
    /**
     * The key/value pairs to associate with the zone.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The time to live (TTL) of the zone.
     */
    declare public readonly ttl: pulumi.Output<number | undefined>;
    /**
     * The type of zone. Can either be `public` or `private`. Changing this
     * creates a new DNS zone.
     */
    declare public readonly zoneType: pulumi.Output<string | undefined>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["email"] = state?.email;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["masters"] = state?.masters;
            resourceInputs["name"] = state?.name;
            resourceInputs["proxyPattern"] = state?.proxyPattern;
            resourceInputs["region"] = state?.region;
            resourceInputs["routers"] = state?.routers;
            resourceInputs["status"] = state?.status;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["ttl"] = state?.ttl;
            resourceInputs["zoneType"] = state?.zoneType;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            resourceInputs["description"] = args?.description;
            resourceInputs["email"] = args?.email;
            resourceInputs["enterpriseProjectId"] = args?.enterpriseProjectId;
            resourceInputs["name"] = args?.name;
            resourceInputs["proxyPattern"] = args?.proxyPattern;
            resourceInputs["region"] = args?.region;
            resourceInputs["routers"] = args?.routers;
            resourceInputs["status"] = args?.status;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["ttl"] = args?.ttl;
            resourceInputs["zoneType"] = args?.zoneType;
            resourceInputs["masters"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * A description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * The email address of the administrator managing the zone.
     */
    email?: pulumi.Input<string>;
    /**
     * The enterprise project id of the zone. Changing this creates a
     * new zone.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * An array of master DNS servers.
     */
    masters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the zone. Note the `.` at the end of the name. Changing this creates
     * a new DNS zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The recursive resolution proxy mode for subdomains of the private zone.
     */
    proxyPattern?: pulumi.Input<string>;
    /**
     * The region in which to create the DNS zone. If omitted, the `region` argument
     * of the provider will be used. Changing this creates a new DNS zone.
     */
    region?: pulumi.Input<string>;
    /**
     * Router configuration block which is required if zoneType is private. The router
     * structure is documented below.
     */
    routers?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneRouter>[]>;
    /**
     * The status of the zone.
     */
    status?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the zone.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time to live (TTL) of the zone.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of zone. Can either be `public` or `private`. Changing this
     * creates a new DNS zone.
     */
    zoneType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * A description of the zone.
     */
    description?: pulumi.Input<string>;
    /**
     * The email address of the administrator managing the zone.
     */
    email?: pulumi.Input<string>;
    /**
     * The enterprise project id of the zone. Changing this creates a
     * new zone.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The name of the zone. Note the `.` at the end of the name. Changing this creates
     * a new DNS zone.
     */
    name?: pulumi.Input<string>;
    /**
     * The recursive resolution proxy mode for subdomains of the private zone.
     */
    proxyPattern?: pulumi.Input<string>;
    /**
     * The region in which to create the DNS zone. If omitted, the `region` argument
     * of the provider will be used. Changing this creates a new DNS zone.
     */
    region?: pulumi.Input<string>;
    /**
     * Router configuration block which is required if zoneType is private. The router
     * structure is documented below.
     */
    routers?: pulumi.Input<pulumi.Input<inputs.Dns.ZoneRouter>[]>;
    /**
     * The status of the zone.
     */
    status?: pulumi.Input<string>;
    /**
     * The key/value pairs to associate with the zone.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The time to live (TTL) of the zone.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The type of zone. Can either be `public` or `private`. Changing this
     * creates a new DNS zone.
     */
    zoneType?: pulumi.Input<string>;
}

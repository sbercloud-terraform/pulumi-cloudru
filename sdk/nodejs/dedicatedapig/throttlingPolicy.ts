// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ThrottlingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing ThrottlingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThrottlingPolicyState, opts?: pulumi.CustomResourceOptions): ThrottlingPolicy {
        return new ThrottlingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:DedicatedApig/throttlingPolicy:ThrottlingPolicy';

    /**
     * Returns true if the given object is an instance of ThrottlingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThrottlingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThrottlingPolicy.__pulumiType;
    }

    /**
     * The array of one or more special throttling policies for APP limit.
     */
    declare public readonly appThrottles: pulumi.Output<outputs.DedicatedApig.ThrottlingPolicyAppThrottle[] | undefined>;
    /**
     * The creation time of the throttling policy.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The description about the API throttling policy.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the dedicated instance to which the throttling policy belongs.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The maximum number of times an API can be accessed within a specified period..
     */
    declare public readonly maxApiRequests: pulumi.Output<number>;
    /**
     * The maximum number of times the API can be accessed by an app within the same period.
     */
    declare public readonly maxAppRequests: pulumi.Output<number | undefined>;
    /**
     * The maximum number of times the API can be accessed by an IP address within the same period.
     */
    declare public readonly maxIpRequests: pulumi.Output<number | undefined>;
    /**
     * The maximum number of times the API can be accessed by a user within the same period.
     */
    declare public readonly maxUserRequests: pulumi.Output<number | undefined>;
    /**
     * The name of the throttling policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The period of time for limiting the number of API calls.
     */
    declare public readonly period: pulumi.Output<number>;
    /**
     * The time unit for limiting the number of API calls.
     */
    declare public readonly periodUnit: pulumi.Output<string | undefined>;
    /**
     * The region where the throttling policy is located.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The type of the request throttling policy.
     */
    declare public readonly type: pulumi.Output<string | undefined>;
    /**
     * The array of one or more special throttling policies for IAM user limit.
     */
    declare public readonly userThrottles: pulumi.Output<outputs.DedicatedApig.ThrottlingPolicyUserThrottle[] | undefined>;

    /**
     * Create a ThrottlingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThrottlingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThrottlingPolicyArgs | ThrottlingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThrottlingPolicyState | undefined;
            resourceInputs["appThrottles"] = state?.appThrottles;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["maxApiRequests"] = state?.maxApiRequests;
            resourceInputs["maxAppRequests"] = state?.maxAppRequests;
            resourceInputs["maxIpRequests"] = state?.maxIpRequests;
            resourceInputs["maxUserRequests"] = state?.maxUserRequests;
            resourceInputs["name"] = state?.name;
            resourceInputs["period"] = state?.period;
            resourceInputs["periodUnit"] = state?.periodUnit;
            resourceInputs["region"] = state?.region;
            resourceInputs["type"] = state?.type;
            resourceInputs["userThrottles"] = state?.userThrottles;
        } else {
            const args = argsOrState as ThrottlingPolicyArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.maxApiRequests === undefined && !opts.urn) {
                throw new Error("Missing required property 'maxApiRequests'");
            }
            if (args?.period === undefined && !opts.urn) {
                throw new Error("Missing required property 'period'");
            }
            resourceInputs["appThrottles"] = args?.appThrottles;
            resourceInputs["description"] = args?.description;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["maxApiRequests"] = args?.maxApiRequests;
            resourceInputs["maxAppRequests"] = args?.maxAppRequests;
            resourceInputs["maxIpRequests"] = args?.maxIpRequests;
            resourceInputs["maxUserRequests"] = args?.maxUserRequests;
            resourceInputs["name"] = args?.name;
            resourceInputs["period"] = args?.period;
            resourceInputs["periodUnit"] = args?.periodUnit;
            resourceInputs["region"] = args?.region;
            resourceInputs["type"] = args?.type;
            resourceInputs["userThrottles"] = args?.userThrottles;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ThrottlingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ThrottlingPolicy resources.
 */
export interface ThrottlingPolicyState {
    /**
     * The array of one or more special throttling policies for APP limit.
     */
    appThrottles?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ThrottlingPolicyAppThrottle>[]>;
    /**
     * The creation time of the throttling policy.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description about the API throttling policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the dedicated instance to which the throttling policy belongs.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The maximum number of times an API can be accessed within a specified period..
     */
    maxApiRequests?: pulumi.Input<number>;
    /**
     * The maximum number of times the API can be accessed by an app within the same period.
     */
    maxAppRequests?: pulumi.Input<number>;
    /**
     * The maximum number of times the API can be accessed by an IP address within the same period.
     */
    maxIpRequests?: pulumi.Input<number>;
    /**
     * The maximum number of times the API can be accessed by a user within the same period.
     */
    maxUserRequests?: pulumi.Input<number>;
    /**
     * The name of the throttling policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The period of time for limiting the number of API calls.
     */
    period?: pulumi.Input<number>;
    /**
     * The time unit for limiting the number of API calls.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * The region where the throttling policy is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The type of the request throttling policy.
     */
    type?: pulumi.Input<string>;
    /**
     * The array of one or more special throttling policies for IAM user limit.
     */
    userThrottles?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ThrottlingPolicyUserThrottle>[]>;
}

/**
 * The set of arguments for constructing a ThrottlingPolicy resource.
 */
export interface ThrottlingPolicyArgs {
    /**
     * The array of one or more special throttling policies for APP limit.
     */
    appThrottles?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ThrottlingPolicyAppThrottle>[]>;
    /**
     * The description about the API throttling policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the dedicated instance to which the throttling policy belongs.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The maximum number of times an API can be accessed within a specified period..
     */
    maxApiRequests: pulumi.Input<number>;
    /**
     * The maximum number of times the API can be accessed by an app within the same period.
     */
    maxAppRequests?: pulumi.Input<number>;
    /**
     * The maximum number of times the API can be accessed by an IP address within the same period.
     */
    maxIpRequests?: pulumi.Input<number>;
    /**
     * The maximum number of times the API can be accessed by a user within the same period.
     */
    maxUserRequests?: pulumi.Input<number>;
    /**
     * The name of the throttling policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The period of time for limiting the number of API calls.
     */
    period: pulumi.Input<number>;
    /**
     * The time unit for limiting the number of API calls.
     */
    periodUnit?: pulumi.Input<string>;
    /**
     * The region where the throttling policy is located.
     */
    region?: pulumi.Input<string>;
    /**
     * The type of the request throttling policy.
     */
    type?: pulumi.Input<string>;
    /**
     * The array of one or more special throttling policies for IAM user limit.
     */
    userThrottles?: pulumi.Input<pulumi.Input<inputs.DedicatedApig.ThrottlingPolicyUserThrottle>[]>;
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Attaches a Volume to an Instance.
//
// ## Example Usage
//
// ### Basic attachment of a single volume to a single instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/ecs"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/evs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myvol, err := evs.NewVolume(ctx, "myvol", &evs.VolumeArgs{
//				Name:             pulumi.String("volume"),
//				AvailabilityZone: pulumi.String("ru-moscow-1a"),
//				VolumeType:       pulumi.String("SAS"),
//				Size:             pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			myinstance, err := ecs.NewInstance(ctx, "myinstance", &ecs.InstanceArgs{
//				Name:     pulumi.String("instance"),
//				ImageId:  pulumi.String("ad091b52-742f-469e-8f3c-fd81cadf0743"),
//				FlavorId: pulumi.String("s6.small.1"),
//				KeyPair:  pulumi.String("my_key_pair_name"),
//				SecurityGroups: pulumi.StringArray{
//					pulumi.String("default"),
//				},
//				AvailabilityZone: pulumi.String("ru-moscow-1a"),
//				Networks: ecs.InstanceNetworkArray{
//					&ecs.InstanceNetworkArgs{
//						Uuid: pulumi.String("55534eaa-533a-419d-9b40-ec427ea7195a"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ecs.NewVolumeAttach(ctx, "attached", &ecs.VolumeAttachArgs{
//				InstanceId: myinstance.ID(),
//				VolumeId:   myvol.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Volume Attachments can be imported using the Instance ID and Volume ID
// separated by a slash, e.g.
//
// ```sh
// $ pulumi import sbercloud:Ecs/volumeAttach:VolumeAttach va_1 89c60255-9bd6-460c-822a-e2b959ede9d2/45670584-225f-46c3-b33e-6707b589b666
// ```
type VolumeAttach struct {
	pulumi.CustomResourceState

	Device pulumi.StringOutput `pulumi:"device"`
	// The ID of the Instance to attach the Volume to.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// PCI address of the block device.
	PciAddress pulumi.StringOutput `pulumi:"pciAddress"`
	// The region in which to create the volume resource. If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// The ID of the Volume to attach to an Instance.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewVolumeAttach registers a new resource with the given unique name, arguments, and options.
func NewVolumeAttach(ctx *pulumi.Context,
	name string, args *VolumeAttachArgs, opts ...pulumi.ResourceOption) (*VolumeAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeAttach
	err := ctx.RegisterResource("sbercloud:Ecs/volumeAttach:VolumeAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeAttach gets an existing VolumeAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeAttachState, opts ...pulumi.ResourceOption) (*VolumeAttach, error) {
	var resource VolumeAttach
	err := ctx.ReadResource("sbercloud:Ecs/volumeAttach:VolumeAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeAttach resources.
type volumeAttachState struct {
	Device *string `pulumi:"device"`
	// The ID of the Instance to attach the Volume to.
	InstanceId *string `pulumi:"instanceId"`
	// PCI address of the block device.
	PciAddress *string `pulumi:"pciAddress"`
	// The region in which to create the volume resource. If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The ID of the Volume to attach to an Instance.
	VolumeId *string `pulumi:"volumeId"`
}

type VolumeAttachState struct {
	Device pulumi.StringPtrInput
	// The ID of the Instance to attach the Volume to.
	InstanceId pulumi.StringPtrInput
	// PCI address of the block device.
	PciAddress pulumi.StringPtrInput
	// The region in which to create the volume resource. If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The ID of the Volume to attach to an Instance.
	VolumeId pulumi.StringPtrInput
}

func (VolumeAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAttachState)(nil)).Elem()
}

type volumeAttachArgs struct {
	Device *string `pulumi:"device"`
	// The ID of the Instance to attach the Volume to.
	InstanceId string `pulumi:"instanceId"`
	// The region in which to create the volume resource. If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region *string `pulumi:"region"`
	// The ID of the Volume to attach to an Instance.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a VolumeAttach resource.
type VolumeAttachArgs struct {
	Device pulumi.StringPtrInput
	// The ID of the Instance to attach the Volume to.
	InstanceId pulumi.StringInput
	// The region in which to create the volume resource. If omitted, the provider-level region will be used. Changing this creates a new resource.
	Region pulumi.StringPtrInput
	// The ID of the Volume to attach to an Instance.
	VolumeId pulumi.StringInput
}

func (VolumeAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeAttachArgs)(nil)).Elem()
}

type VolumeAttachInput interface {
	pulumi.Input

	ToVolumeAttachOutput() VolumeAttachOutput
	ToVolumeAttachOutputWithContext(ctx context.Context) VolumeAttachOutput
}

func (*VolumeAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttach)(nil)).Elem()
}

func (i *VolumeAttach) ToVolumeAttachOutput() VolumeAttachOutput {
	return i.ToVolumeAttachOutputWithContext(context.Background())
}

func (i *VolumeAttach) ToVolumeAttachOutputWithContext(ctx context.Context) VolumeAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachOutput)
}

// VolumeAttachArrayInput is an input type that accepts VolumeAttachArray and VolumeAttachArrayOutput values.
// You can construct a concrete instance of `VolumeAttachArrayInput` via:
//
//	VolumeAttachArray{ VolumeAttachArgs{...} }
type VolumeAttachArrayInput interface {
	pulumi.Input

	ToVolumeAttachArrayOutput() VolumeAttachArrayOutput
	ToVolumeAttachArrayOutputWithContext(context.Context) VolumeAttachArrayOutput
}

type VolumeAttachArray []VolumeAttachInput

func (VolumeAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeAttach)(nil)).Elem()
}

func (i VolumeAttachArray) ToVolumeAttachArrayOutput() VolumeAttachArrayOutput {
	return i.ToVolumeAttachArrayOutputWithContext(context.Background())
}

func (i VolumeAttachArray) ToVolumeAttachArrayOutputWithContext(ctx context.Context) VolumeAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachArrayOutput)
}

// VolumeAttachMapInput is an input type that accepts VolumeAttachMap and VolumeAttachMapOutput values.
// You can construct a concrete instance of `VolumeAttachMapInput` via:
//
//	VolumeAttachMap{ "key": VolumeAttachArgs{...} }
type VolumeAttachMapInput interface {
	pulumi.Input

	ToVolumeAttachMapOutput() VolumeAttachMapOutput
	ToVolumeAttachMapOutputWithContext(context.Context) VolumeAttachMapOutput
}

type VolumeAttachMap map[string]VolumeAttachInput

func (VolumeAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeAttach)(nil)).Elem()
}

func (i VolumeAttachMap) ToVolumeAttachMapOutput() VolumeAttachMapOutput {
	return i.ToVolumeAttachMapOutputWithContext(context.Background())
}

func (i VolumeAttachMap) ToVolumeAttachMapOutputWithContext(ctx context.Context) VolumeAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeAttachMapOutput)
}

type VolumeAttachOutput struct{ *pulumi.OutputState }

func (VolumeAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeAttach)(nil)).Elem()
}

func (o VolumeAttachOutput) ToVolumeAttachOutput() VolumeAttachOutput {
	return o
}

func (o VolumeAttachOutput) ToVolumeAttachOutputWithContext(ctx context.Context) VolumeAttachOutput {
	return o
}

func (o VolumeAttachOutput) Device() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.Device }).(pulumi.StringOutput)
}

// The ID of the Instance to attach the Volume to.
func (o VolumeAttachOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// PCI address of the block device.
func (o VolumeAttachOutput) PciAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.PciAddress }).(pulumi.StringOutput)
}

// The region in which to create the volume resource. If omitted, the provider-level region will be used. Changing this creates a new resource.
func (o VolumeAttachOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The ID of the Volume to attach to an Instance.
func (o VolumeAttachOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeAttach) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type VolumeAttachArrayOutput struct{ *pulumi.OutputState }

func (VolumeAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeAttach)(nil)).Elem()
}

func (o VolumeAttachArrayOutput) ToVolumeAttachArrayOutput() VolumeAttachArrayOutput {
	return o
}

func (o VolumeAttachArrayOutput) ToVolumeAttachArrayOutputWithContext(ctx context.Context) VolumeAttachArrayOutput {
	return o
}

func (o VolumeAttachArrayOutput) Index(i pulumi.IntInput) VolumeAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeAttach {
		return vs[0].([]*VolumeAttach)[vs[1].(int)]
	}).(VolumeAttachOutput)
}

type VolumeAttachMapOutput struct{ *pulumi.OutputState }

func (VolumeAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeAttach)(nil)).Elem()
}

func (o VolumeAttachMapOutput) ToVolumeAttachMapOutput() VolumeAttachMapOutput {
	return o
}

func (o VolumeAttachMapOutput) ToVolumeAttachMapOutputWithContext(ctx context.Context) VolumeAttachMapOutput {
	return o
}

func (o VolumeAttachMapOutput) MapIndex(k pulumi.StringInput) VolumeAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeAttach {
		return vs[0].(map[string]*VolumeAttach)[vs[1].(string)]
	}).(VolumeAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachInput)(nil)).Elem(), &VolumeAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachArrayInput)(nil)).Elem(), VolumeAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeAttachMapInput)(nil)).Elem(), VolumeAttachMap{})
	pulumi.RegisterOutputType(VolumeAttachOutput{})
	pulumi.RegisterOutputType(VolumeAttachArrayOutput{})
	pulumi.RegisterOutputType(VolumeAttachMapOutput{})
}

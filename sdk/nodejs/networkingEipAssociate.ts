// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Associates an EIP to a port.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const myport = sbercloud.Vpc.getPort({
 *     networkId: "a5bbd213-e1d3-49b6-aed1-9df60ea94b9a",
 * });
 * const myeip = new sbercloud.vpc.Eip("myeip", {
 *     publicip: {
 *         type: "5_bgp",
 *     },
 *     bandwidth: {
 *         name: "test",
 *         size: 8,
 *         shareType: "PER",
 *         chargeMode: "traffic",
 *     },
 * });
 * const associated = new sbercloud.NetworkingEipAssociate("associated", {
 *     publicIp: myeip.address,
 *     portId: myport.then(myport => myport.id),
 * });
 * ```
 *
 * ## Import
 *
 * EIP associations can be imported using the `id` of the EIP, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:index/networkingEipAssociate:NetworkingEipAssociate eip 2c7f39f3-702b-48d1-940c-b50384177ee1
 * ```
 */
export class NetworkingEipAssociate extends pulumi.CustomResource {
    /**
     * Get an existing NetworkingEipAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkingEipAssociateState, opts?: pulumi.CustomResourceOptions): NetworkingEipAssociate {
        return new NetworkingEipAssociate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/networkingEipAssociate:NetworkingEipAssociate';

    /**
     * Returns true if the given object is an instance of NetworkingEipAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkingEipAssociate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkingEipAssociate.__pulumiType;
    }

    declare public readonly fixedIp: pulumi.Output<string>;
    declare public /*out*/ readonly macAddress: pulumi.Output<string>;
    declare public readonly networkId: pulumi.Output<string>;
    /**
     * ID of an existing port with at least one IP address to
     * associate with this EIP.
     */
    declare public readonly portId: pulumi.Output<string>;
    /**
     * The EIP to associate.
     */
    declare public readonly publicIp: pulumi.Output<string>;
    declare public /*out*/ readonly publicIpv6: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a NetworkingEipAssociate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkingEipAssociateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkingEipAssociateArgs | NetworkingEipAssociateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkingEipAssociateState | undefined;
            resourceInputs["fixedIp"] = state?.fixedIp;
            resourceInputs["macAddress"] = state?.macAddress;
            resourceInputs["networkId"] = state?.networkId;
            resourceInputs["portId"] = state?.portId;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["publicIpv6"] = state?.publicIpv6;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as NetworkingEipAssociateArgs | undefined;
            if (args?.publicIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'publicIp'");
            }
            resourceInputs["fixedIp"] = args?.fixedIp;
            resourceInputs["networkId"] = args?.networkId;
            resourceInputs["portId"] = args?.portId;
            resourceInputs["publicIp"] = args?.publicIp;
            resourceInputs["region"] = args?.region;
            resourceInputs["macAddress"] = undefined /*out*/;
            resourceInputs["publicIpv6"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkingEipAssociate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkingEipAssociate resources.
 */
export interface NetworkingEipAssociateState {
    fixedIp?: pulumi.Input<string>;
    macAddress?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    /**
     * ID of an existing port with at least one IP address to
     * associate with this EIP.
     */
    portId?: pulumi.Input<string>;
    /**
     * The EIP to associate.
     */
    publicIp?: pulumi.Input<string>;
    publicIpv6?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkingEipAssociate resource.
 */
export interface NetworkingEipAssociateArgs {
    fixedIp?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    /**
     * ID of an existing port with at least one IP address to
     * associate with this EIP.
     */
    portId?: pulumi.Input<string>;
    /**
     * The EIP to associate.
     */
    publicIp: pulumi.Input<string>;
    region?: pulumi.Input<string>;
}

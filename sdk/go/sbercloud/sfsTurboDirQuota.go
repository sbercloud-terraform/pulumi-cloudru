// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sbercloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

type SfsTurboDirQuota struct {
	pulumi.CustomResourceState

	// Specifies the size of the directory.
	Capacity pulumi.IntPtrOutput `pulumi:"capacity"`
	// Specifies the maximum number of inodes allowed in the directory.
	Inode pulumi.IntPtrOutput `pulumi:"inode"`
	// Specifies the valid full path of an existing directory.
	Path   pulumi.StringOutput `pulumi:"path"`
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the SFS Turbo ID.
	ShareId pulumi.StringOutput `pulumi:"shareId"`
	// Specifies the size of the used directory.
	UsedCapacity pulumi.IntOutput `pulumi:"usedCapacity"`
	// Specifies the number of used inodes in the directory.
	UsedInode pulumi.IntOutput `pulumi:"usedInode"`
}

// NewSfsTurboDirQuota registers a new resource with the given unique name, arguments, and options.
func NewSfsTurboDirQuota(ctx *pulumi.Context,
	name string, args *SfsTurboDirQuotaArgs, opts ...pulumi.ResourceOption) (*SfsTurboDirQuota, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	if args.ShareId == nil {
		return nil, errors.New("invalid value for required argument 'ShareId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SfsTurboDirQuota
	err := ctx.RegisterResource("sbercloud:index/sfsTurboDirQuota:SfsTurboDirQuota", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSfsTurboDirQuota gets an existing SfsTurboDirQuota resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSfsTurboDirQuota(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SfsTurboDirQuotaState, opts ...pulumi.ResourceOption) (*SfsTurboDirQuota, error) {
	var resource SfsTurboDirQuota
	err := ctx.ReadResource("sbercloud:index/sfsTurboDirQuota:SfsTurboDirQuota", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SfsTurboDirQuota resources.
type sfsTurboDirQuotaState struct {
	// Specifies the size of the directory.
	Capacity *int `pulumi:"capacity"`
	// Specifies the maximum number of inodes allowed in the directory.
	Inode *int `pulumi:"inode"`
	// Specifies the valid full path of an existing directory.
	Path   *string `pulumi:"path"`
	Region *string `pulumi:"region"`
	// Specifies the SFS Turbo ID.
	ShareId *string `pulumi:"shareId"`
	// Specifies the size of the used directory.
	UsedCapacity *int `pulumi:"usedCapacity"`
	// Specifies the number of used inodes in the directory.
	UsedInode *int `pulumi:"usedInode"`
}

type SfsTurboDirQuotaState struct {
	// Specifies the size of the directory.
	Capacity pulumi.IntPtrInput
	// Specifies the maximum number of inodes allowed in the directory.
	Inode pulumi.IntPtrInput
	// Specifies the valid full path of an existing directory.
	Path   pulumi.StringPtrInput
	Region pulumi.StringPtrInput
	// Specifies the SFS Turbo ID.
	ShareId pulumi.StringPtrInput
	// Specifies the size of the used directory.
	UsedCapacity pulumi.IntPtrInput
	// Specifies the number of used inodes in the directory.
	UsedInode pulumi.IntPtrInput
}

func (SfsTurboDirQuotaState) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboDirQuotaState)(nil)).Elem()
}

type sfsTurboDirQuotaArgs struct {
	// Specifies the size of the directory.
	Capacity *int `pulumi:"capacity"`
	// Specifies the maximum number of inodes allowed in the directory.
	Inode *int `pulumi:"inode"`
	// Specifies the valid full path of an existing directory.
	Path   string  `pulumi:"path"`
	Region *string `pulumi:"region"`
	// Specifies the SFS Turbo ID.
	ShareId string `pulumi:"shareId"`
}

// The set of arguments for constructing a SfsTurboDirQuota resource.
type SfsTurboDirQuotaArgs struct {
	// Specifies the size of the directory.
	Capacity pulumi.IntPtrInput
	// Specifies the maximum number of inodes allowed in the directory.
	Inode pulumi.IntPtrInput
	// Specifies the valid full path of an existing directory.
	Path   pulumi.StringInput
	Region pulumi.StringPtrInput
	// Specifies the SFS Turbo ID.
	ShareId pulumi.StringInput
}

func (SfsTurboDirQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboDirQuotaArgs)(nil)).Elem()
}

type SfsTurboDirQuotaInput interface {
	pulumi.Input

	ToSfsTurboDirQuotaOutput() SfsTurboDirQuotaOutput
	ToSfsTurboDirQuotaOutputWithContext(ctx context.Context) SfsTurboDirQuotaOutput
}

func (*SfsTurboDirQuota) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboDirQuota)(nil)).Elem()
}

func (i *SfsTurboDirQuota) ToSfsTurboDirQuotaOutput() SfsTurboDirQuotaOutput {
	return i.ToSfsTurboDirQuotaOutputWithContext(context.Background())
}

func (i *SfsTurboDirQuota) ToSfsTurboDirQuotaOutputWithContext(ctx context.Context) SfsTurboDirQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDirQuotaOutput)
}

// SfsTurboDirQuotaArrayInput is an input type that accepts SfsTurboDirQuotaArray and SfsTurboDirQuotaArrayOutput values.
// You can construct a concrete instance of `SfsTurboDirQuotaArrayInput` via:
//
//	SfsTurboDirQuotaArray{ SfsTurboDirQuotaArgs{...} }
type SfsTurboDirQuotaArrayInput interface {
	pulumi.Input

	ToSfsTurboDirQuotaArrayOutput() SfsTurboDirQuotaArrayOutput
	ToSfsTurboDirQuotaArrayOutputWithContext(context.Context) SfsTurboDirQuotaArrayOutput
}

type SfsTurboDirQuotaArray []SfsTurboDirQuotaInput

func (SfsTurboDirQuotaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboDirQuota)(nil)).Elem()
}

func (i SfsTurboDirQuotaArray) ToSfsTurboDirQuotaArrayOutput() SfsTurboDirQuotaArrayOutput {
	return i.ToSfsTurboDirQuotaArrayOutputWithContext(context.Background())
}

func (i SfsTurboDirQuotaArray) ToSfsTurboDirQuotaArrayOutputWithContext(ctx context.Context) SfsTurboDirQuotaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDirQuotaArrayOutput)
}

// SfsTurboDirQuotaMapInput is an input type that accepts SfsTurboDirQuotaMap and SfsTurboDirQuotaMapOutput values.
// You can construct a concrete instance of `SfsTurboDirQuotaMapInput` via:
//
//	SfsTurboDirQuotaMap{ "key": SfsTurboDirQuotaArgs{...} }
type SfsTurboDirQuotaMapInput interface {
	pulumi.Input

	ToSfsTurboDirQuotaMapOutput() SfsTurboDirQuotaMapOutput
	ToSfsTurboDirQuotaMapOutputWithContext(context.Context) SfsTurboDirQuotaMapOutput
}

type SfsTurboDirQuotaMap map[string]SfsTurboDirQuotaInput

func (SfsTurboDirQuotaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboDirQuota)(nil)).Elem()
}

func (i SfsTurboDirQuotaMap) ToSfsTurboDirQuotaMapOutput() SfsTurboDirQuotaMapOutput {
	return i.ToSfsTurboDirQuotaMapOutputWithContext(context.Background())
}

func (i SfsTurboDirQuotaMap) ToSfsTurboDirQuotaMapOutputWithContext(ctx context.Context) SfsTurboDirQuotaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboDirQuotaMapOutput)
}

type SfsTurboDirQuotaOutput struct{ *pulumi.OutputState }

func (SfsTurboDirQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboDirQuota)(nil)).Elem()
}

func (o SfsTurboDirQuotaOutput) ToSfsTurboDirQuotaOutput() SfsTurboDirQuotaOutput {
	return o
}

func (o SfsTurboDirQuotaOutput) ToSfsTurboDirQuotaOutputWithContext(ctx context.Context) SfsTurboDirQuotaOutput {
	return o
}

// Specifies the size of the directory.
func (o SfsTurboDirQuotaOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SfsTurboDirQuota) pulumi.IntPtrOutput { return v.Capacity }).(pulumi.IntPtrOutput)
}

// Specifies the maximum number of inodes allowed in the directory.
func (o SfsTurboDirQuotaOutput) Inode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SfsTurboDirQuota) pulumi.IntPtrOutput { return v.Inode }).(pulumi.IntPtrOutput)
}

// Specifies the valid full path of an existing directory.
func (o SfsTurboDirQuotaOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDirQuota) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

func (o SfsTurboDirQuotaOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDirQuota) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the SFS Turbo ID.
func (o SfsTurboDirQuotaOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboDirQuota) pulumi.StringOutput { return v.ShareId }).(pulumi.StringOutput)
}

// Specifies the size of the used directory.
func (o SfsTurboDirQuotaOutput) UsedCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *SfsTurboDirQuota) pulumi.IntOutput { return v.UsedCapacity }).(pulumi.IntOutput)
}

// Specifies the number of used inodes in the directory.
func (o SfsTurboDirQuotaOutput) UsedInode() pulumi.IntOutput {
	return o.ApplyT(func(v *SfsTurboDirQuota) pulumi.IntOutput { return v.UsedInode }).(pulumi.IntOutput)
}

type SfsTurboDirQuotaArrayOutput struct{ *pulumi.OutputState }

func (SfsTurboDirQuotaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboDirQuota)(nil)).Elem()
}

func (o SfsTurboDirQuotaArrayOutput) ToSfsTurboDirQuotaArrayOutput() SfsTurboDirQuotaArrayOutput {
	return o
}

func (o SfsTurboDirQuotaArrayOutput) ToSfsTurboDirQuotaArrayOutputWithContext(ctx context.Context) SfsTurboDirQuotaArrayOutput {
	return o
}

func (o SfsTurboDirQuotaArrayOutput) Index(i pulumi.IntInput) SfsTurboDirQuotaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SfsTurboDirQuota {
		return vs[0].([]*SfsTurboDirQuota)[vs[1].(int)]
	}).(SfsTurboDirQuotaOutput)
}

type SfsTurboDirQuotaMapOutput struct{ *pulumi.OutputState }

func (SfsTurboDirQuotaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboDirQuota)(nil)).Elem()
}

func (o SfsTurboDirQuotaMapOutput) ToSfsTurboDirQuotaMapOutput() SfsTurboDirQuotaMapOutput {
	return o
}

func (o SfsTurboDirQuotaMapOutput) ToSfsTurboDirQuotaMapOutputWithContext(ctx context.Context) SfsTurboDirQuotaMapOutput {
	return o
}

func (o SfsTurboDirQuotaMapOutput) MapIndex(k pulumi.StringInput) SfsTurboDirQuotaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SfsTurboDirQuota {
		return vs[0].(map[string]*SfsTurboDirQuota)[vs[1].(string)]
	}).(SfsTurboDirQuotaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDirQuotaInput)(nil)).Elem(), &SfsTurboDirQuota{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDirQuotaArrayInput)(nil)).Elem(), SfsTurboDirQuotaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboDirQuotaMapInput)(nil)).Elem(), SfsTurboDirQuotaMap{})
	pulumi.RegisterOutputType(SfsTurboDirQuotaOutput{})
	pulumi.RegisterOutputType(SfsTurboDirQuotaArrayOutput{})
	pulumi.RegisterOutputType(SfsTurboDirQuotaMapOutput{})
}

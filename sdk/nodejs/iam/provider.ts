// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages the identity providers within SberCloud IAM service.
 *
 * > **NOTE:** You can create up to 10 identity providers.
 *
 * ## Example Usage
 *
 * ### Create a SAML protocol provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const provider1 = new sbercloud.iam.Provider("provider_1", {
 *     name: "example_com_provider_saml",
 *     protocol: "saml",
 * });
 * ```
 *
 * ### Create a OpenID Connect protocol provider
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const provider2 = new sbercloud.iam.Provider("provider_2", {
 *     name: "example_com_provider_oidc",
 *     protocol: "oidc",
 *     accessConfig: {
 *         accessType: "program_console",
 *         providerUrl: "https://accounts.example.com",
 *         clientId: "your_client_id",
 *         authorizationEndpoint: "https://accounts.example.com/o/oauth2/v2/auth",
 *         scopes: ["openid"],
 *         signingKey: JSON.stringify({
 *             keys: [{
 *                 alg: "RS256",
 *                 e: "AQAB",
 *                 kid: "...",
 *                 kty: "RSA",
 *                 n: "...",
 *                 use: "sig",
 *             }],
 *         }),
 *     },
 * });
 * ```
 *
 * <!--markdownlint-disable MD033-->
 *
 * ## Import
 *
 * Identity provider can be imported using the `name`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Iam/provider:Provider provider_1 example_com_provider_saml
 * ```
 */
export class Provider extends pulumi.CustomResource {
    /**
     * Get an existing Provider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProviderState, opts?: pulumi.CustomResourceOptions): Provider {
        return new Provider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Iam/provider:Provider';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }

    /**
     * Specifies the description of the identity provider.
     * This field is required only if the protocol is set to *oidc*.
     */
    declare public readonly accessConfig: pulumi.Output<outputs.Iam.ProviderAccessConfig | undefined>;
    /**
     * The identity conversion rules of the identity provider.
     * The object structure is documented below
     */
    declare public /*out*/ readonly conversionRules: pulumi.Output<outputs.Iam.ProviderConversionRule[]>;
    /**
     * Specifies the description of the identity provider.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The login link of the identity provider.
     */
    declare public /*out*/ readonly loginLink: pulumi.Output<string>;
    /**
     * Specifies the metadata of the IDP(Identity Provider) server.
     * To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
     * This field is used to import a metadata file to IAM to implement federated identity authentication.
     * This field is required only if the protocol is set to *saml*.
     * The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
     *
     * > **NOTE:**
     * The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
     * It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
     * for example:
     * <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
     */
    declare public readonly metadata: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the identity provider to be registered.
     * The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
     * The name is unique, it is recommended to include domain name information.
     * Changing this creates a new resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the protocol of the identity provider.
     * Valid values are *saml* and *oidc*.
     * Changing this creates a new resource.
     */
    declare public readonly protocol: pulumi.Output<string>;
    /**
     * The single sign-on type of the identity provider.
     */
    declare public readonly ssoType: pulumi.Output<string>;
    /**
     * Enabled status for the identity provider. Defaults to true.
     */
    declare public readonly status: pulumi.Output<boolean | undefined>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProviderArgs | ProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProviderState | undefined;
            resourceInputs["accessConfig"] = state?.accessConfig;
            resourceInputs["conversionRules"] = state?.conversionRules;
            resourceInputs["description"] = state?.description;
            resourceInputs["loginLink"] = state?.loginLink;
            resourceInputs["metadata"] = state?.metadata;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["ssoType"] = state?.ssoType;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as ProviderArgs | undefined;
            if (args?.protocol === undefined && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            resourceInputs["accessConfig"] = args?.accessConfig;
            resourceInputs["description"] = args?.description;
            resourceInputs["metadata"] = args?.metadata;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["ssoType"] = args?.ssoType;
            resourceInputs["status"] = args?.status;
            resourceInputs["conversionRules"] = undefined /*out*/;
            resourceInputs["loginLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Provider resources.
 */
export interface ProviderState {
    /**
     * Specifies the description of the identity provider.
     * This field is required only if the protocol is set to *oidc*.
     */
    accessConfig?: pulumi.Input<inputs.Iam.ProviderAccessConfig>;
    /**
     * The identity conversion rules of the identity provider.
     * The object structure is documented below
     */
    conversionRules?: pulumi.Input<pulumi.Input<inputs.Iam.ProviderConversionRule>[]>;
    /**
     * Specifies the description of the identity provider.
     */
    description?: pulumi.Input<string>;
    /**
     * The login link of the identity provider.
     */
    loginLink?: pulumi.Input<string>;
    /**
     * Specifies the metadata of the IDP(Identity Provider) server.
     * To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
     * This field is used to import a metadata file to IAM to implement federated identity authentication.
     * This field is required only if the protocol is set to *saml*.
     * The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
     *
     * > **NOTE:**
     * The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
     * It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
     * for example:
     * <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
     */
    metadata?: pulumi.Input<string>;
    /**
     * Specifies the name of the identity provider to be registered.
     * The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
     * The name is unique, it is recommended to include domain name information.
     * Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the protocol of the identity provider.
     * Valid values are *saml* and *oidc*.
     * Changing this creates a new resource.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The single sign-on type of the identity provider.
     */
    ssoType?: pulumi.Input<string>;
    /**
     * Enabled status for the identity provider. Defaults to true.
     */
    status?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Specifies the description of the identity provider.
     * This field is required only if the protocol is set to *oidc*.
     */
    accessConfig?: pulumi.Input<inputs.Iam.ProviderAccessConfig>;
    /**
     * Specifies the description of the identity provider.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the metadata of the IDP(Identity Provider) server.
     * To obtain the metadata file of your enterprise IDP, contact the enterprise administrator.
     * This field is used to import a metadata file to IAM to implement federated identity authentication.
     * This field is required only if the protocol is set to *saml*.
     * The maximum length is 30,000 characters and it stores in the state with SHA1 algorithm.
     *
     * > **NOTE:**
     * The metadata file specifies API addresses and certificate information in compliance with the SAML 2.0 standard.
     * It is usually stored in a file. In the TF script, you can import the metafile through the `file` function,
     * for example:
     * <br/>`metadata = file("/usr/local/data/files/metadata.txt")`
     */
    metadata?: pulumi.Input<string>;
    /**
     * Specifies the name of the identity provider to be registered.
     * The maximum length is 64 characters. Only letters, digits, underscores (_), and hyphens (-) are allowed.
     * The name is unique, it is recommended to include domain name information.
     * Changing this creates a new resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the protocol of the identity provider.
     * Valid values are *saml* and *oidc*.
     * Changing this creates a new resource.
     */
    protocol: pulumi.Input<string>;
    /**
     * The single sign-on type of the identity provider.
     */
    ssoType?: pulumi.Input<string>;
    /**
     * Enabled status for the identity provider. Defaults to true.
     */
    status?: pulumi.Input<boolean>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a User resource within SberCloud IAM service.
 *
 * Note: You _must_ have admin privileges in your SberCloud cloud to use this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const user1 = new sbercloud.iam.User("user_1", {
 *     name: "user_1",
 *     description: "A user",
 *     password: "password123!",
 * });
 * ```
 *
 * ## Import
 *
 * Users can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Iam/user:User user_1 89c60255-9bd6-460c-822a-e2b959ede9d2
 * ```
 *
 * But due to the security reason, `password` can not be imported, you can ignore it as below.
 *
 * resource "sbercloud_identity_user" "user_1" {
 *
 *   ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       "password",
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Iam/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    /**
     * Specifies the access type of the user. Available values are:
     * + default: support both programmatic and management console access.
     * + programmatic: only support programmatic access.
     * + console: only support management console access.
     */
    public readonly accessType!: pulumi.Output<string>;
    /**
     * Specifies the country code. The country code of the Chinese mainland is 0086. This
     * parameter must be used together with `phone`.
     */
    public readonly countryCode!: pulumi.Output<string | undefined>;
    /**
     * The time when the IAM user was created.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Specifies the description of the user.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies the email address with a maximum of 255 characters.
     */
    public readonly email!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly externalIdentityId!: pulumi.Output<string | undefined>;
    public readonly externalIdentityType!: pulumi.Output<string>;
    /**
     * The tiem when the IAM user last login.
     */
    public /*out*/ readonly lastLogin!: pulumi.Output<string>;
    public readonly loginProtectVerificationMethod!: pulumi.Output<string | undefined>;
    /**
     * Specifies the name of the user. The user name consists of 5 to 32 characters. It can
     * contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
     * digit.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies the password for the user with 6 to 32 characters. It must contain at least
     * two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Indicates the password strength.
     */
    public /*out*/ readonly passwordStrength!: pulumi.Output<string>;
    /**
     * Specifies the mobile number with a maximum of 32 digits. This parameter must be used
     * together with `countryCode`.
     */
    public readonly phone!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether or not the password should be reset. By default, the password is asked
     * to reset at the first login.
     */
    public readonly pwdReset!: pulumi.Output<boolean | undefined>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["accessType"] = state ? state.accessType : undefined;
            resourceInputs["countryCode"] = state ? state.countryCode : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["externalIdentityId"] = state ? state.externalIdentityId : undefined;
            resourceInputs["externalIdentityType"] = state ? state.externalIdentityType : undefined;
            resourceInputs["lastLogin"] = state ? state.lastLogin : undefined;
            resourceInputs["loginProtectVerificationMethod"] = state ? state.loginProtectVerificationMethod : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordStrength"] = state ? state.passwordStrength : undefined;
            resourceInputs["phone"] = state ? state.phone : undefined;
            resourceInputs["pwdReset"] = state ? state.pwdReset : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            resourceInputs["accessType"] = args ? args.accessType : undefined;
            resourceInputs["countryCode"] = args ? args.countryCode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["externalIdentityId"] = args ? args.externalIdentityId : undefined;
            resourceInputs["externalIdentityType"] = args ? args.externalIdentityType : undefined;
            resourceInputs["loginProtectVerificationMethod"] = args ? args.loginProtectVerificationMethod : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["phone"] = args ? args.phone : undefined;
            resourceInputs["pwdReset"] = args ? args.pwdReset : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["lastLogin"] = undefined /*out*/;
            resourceInputs["passwordStrength"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Specifies the access type of the user. Available values are:
     * + default: support both programmatic and management console access.
     * + programmatic: only support programmatic access.
     * + console: only support management console access.
     */
    accessType?: pulumi.Input<string>;
    /**
     * Specifies the country code. The country code of the Chinese mainland is 0086. This
     * parameter must be used together with `phone`.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * The time when the IAM user was created.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Specifies the description of the user.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the email address with a maximum of 255 characters.
     */
    email?: pulumi.Input<string>;
    /**
     * Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
     */
    enabled?: pulumi.Input<boolean>;
    externalIdentityId?: pulumi.Input<string>;
    externalIdentityType?: pulumi.Input<string>;
    /**
     * The tiem when the IAM user last login.
     */
    lastLogin?: pulumi.Input<string>;
    loginProtectVerificationMethod?: pulumi.Input<string>;
    /**
     * Specifies the name of the user. The user name consists of 5 to 32 characters. It can
     * contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
     * digit.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the password for the user with 6 to 32 characters. It must contain at least
     * two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
     */
    password?: pulumi.Input<string>;
    /**
     * Indicates the password strength.
     */
    passwordStrength?: pulumi.Input<string>;
    /**
     * Specifies the mobile number with a maximum of 32 digits. This parameter must be used
     * together with `countryCode`.
     */
    phone?: pulumi.Input<string>;
    /**
     * Specifies whether or not the password should be reset. By default, the password is asked
     * to reset at the first login.
     */
    pwdReset?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Specifies the access type of the user. Available values are:
     * + default: support both programmatic and management console access.
     * + programmatic: only support programmatic access.
     * + console: only support management console access.
     */
    accessType?: pulumi.Input<string>;
    /**
     * Specifies the country code. The country code of the Chinese mainland is 0086. This
     * parameter must be used together with `phone`.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * Specifies the description of the user.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the email address with a maximum of 255 characters.
     */
    email?: pulumi.Input<string>;
    /**
     * Specifies whether the user is enabled or disabled. Valid values are `true` and `false`.
     */
    enabled?: pulumi.Input<boolean>;
    externalIdentityId?: pulumi.Input<string>;
    externalIdentityType?: pulumi.Input<string>;
    loginProtectVerificationMethod?: pulumi.Input<string>;
    /**
     * Specifies the name of the user. The user name consists of 5 to 32 characters. It can
     * contain only uppercase letters, lowercase letters, digits, spaces, and special characters (-_) and cannot start with a
     * digit.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the password for the user with 6 to 32 characters. It must contain at least
     * two of the following character types: uppercase letters, lowercase letters, digits, and special characters.
     */
    password?: pulumi.Input<string>;
    /**
     * Specifies the mobile number with a maximum of 32 digits. This parameter must be used
     * together with `countryCode`.
     */
    phone?: pulumi.Input<string>;
    /**
     * Specifies whether or not the password should be reset. By default, the password is asked
     * to reset at the first login.
     */
    pwdReset?: pulumi.Input<boolean>;
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AlarmruleAlarmAction',
    'AlarmruleCondition',
    'AlarmruleInsufficientdataAction',
    'AlarmruleMetric',
    'AlarmruleMetricDimension',
    'AlarmruleOkAction',
]

@pulumi.output_type
class AlarmruleAlarmAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleAlarmAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleAlarmAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleAlarmAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmruleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonOperator":
            suggest = "comparison_operator"
        elif key == "suppressDuration":
            suggest = "suppress_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_operator: _builtins.str,
                 count: _builtins.int,
                 filter: _builtins.str,
                 period: _builtins.int,
                 value: _builtins.int,
                 suppress_duration: Optional[_builtins.int] = None,
                 unit: Optional[_builtins.str] = None):
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "value", value)
        if suppress_duration is not None:
            pulumi.set(__self__, "suppress_duration", suppress_duration)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @_builtins.property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> _builtins.str:
        return pulumi.get(self, "comparison_operator")

    @_builtins.property
    @pulumi.getter
    def count(self) -> _builtins.int:
        return pulumi.get(self, "count")

    @_builtins.property
    @pulumi.getter
    def filter(self) -> _builtins.str:
        return pulumi.get(self, "filter")

    @_builtins.property
    @pulumi.getter
    def period(self) -> _builtins.int:
        return pulumi.get(self, "period")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.int:
        return pulumi.get(self, "value")

    @_builtins.property
    @pulumi.getter(name="suppressDuration")
    def suppress_duration(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "suppress_duration")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class AlarmruleInsufficientdataAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleInsufficientdataAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleInsufficientdataAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleInsufficientdataAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class AlarmruleMetric(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleMetric. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleMetric.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleMetric.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_name: _builtins.str,
                 namespace: _builtins.str,
                 dimensions: Optional[Sequence['outputs.AlarmruleMetricDimension']] = None):
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "namespace", namespace)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)

    @_builtins.property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> _builtins.str:
        return pulumi.get(self, "metric_name")

    @_builtins.property
    @pulumi.getter
    def namespace(self) -> _builtins.str:
        return pulumi.get(self, "namespace")

    @_builtins.property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.AlarmruleMetricDimension']]:
        return pulumi.get(self, "dimensions")


@pulumi.output_type
class AlarmruleMetricDimension(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlarmruleOkAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notificationLists":
            suggest = "notification_lists"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlarmruleOkAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlarmruleOkAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlarmruleOkAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 notification_lists: Sequence[_builtins.str],
                 type: _builtins.str):
        pulumi.set(__self__, "notification_lists", notification_lists)
        pulumi.set(__self__, "type", type)

    @_builtins.property
    @pulumi.getter(name="notificationLists")
    def notification_lists(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "notification_lists")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")



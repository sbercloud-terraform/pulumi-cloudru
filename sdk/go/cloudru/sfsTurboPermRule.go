// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SfsTurboPermRule struct {
	pulumi.CustomResourceState

	IpCidr   pulumi.StringOutput `pulumi:"ipCidr"`
	Region   pulumi.StringOutput `pulumi:"region"`
	RwType   pulumi.StringOutput `pulumi:"rwType"`
	ShareId  pulumi.StringOutput `pulumi:"shareId"`
	UserType pulumi.StringOutput `pulumi:"userType"`
}

// NewSfsTurboPermRule registers a new resource with the given unique name, arguments, and options.
func NewSfsTurboPermRule(ctx *pulumi.Context,
	name string, args *SfsTurboPermRuleArgs, opts ...pulumi.ResourceOption) (*SfsTurboPermRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpCidr == nil {
		return nil, errors.New("invalid value for required argument 'IpCidr'")
	}
	if args.RwType == nil {
		return nil, errors.New("invalid value for required argument 'RwType'")
	}
	if args.ShareId == nil {
		return nil, errors.New("invalid value for required argument 'ShareId'")
	}
	if args.UserType == nil {
		return nil, errors.New("invalid value for required argument 'UserType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SfsTurboPermRule
	err := ctx.RegisterResource("cloudru:index/sfsTurboPermRule:SfsTurboPermRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSfsTurboPermRule gets an existing SfsTurboPermRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSfsTurboPermRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SfsTurboPermRuleState, opts ...pulumi.ResourceOption) (*SfsTurboPermRule, error) {
	var resource SfsTurboPermRule
	err := ctx.ReadResource("cloudru:index/sfsTurboPermRule:SfsTurboPermRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SfsTurboPermRule resources.
type sfsTurboPermRuleState struct {
	IpCidr   *string `pulumi:"ipCidr"`
	Region   *string `pulumi:"region"`
	RwType   *string `pulumi:"rwType"`
	ShareId  *string `pulumi:"shareId"`
	UserType *string `pulumi:"userType"`
}

type SfsTurboPermRuleState struct {
	IpCidr   pulumi.StringPtrInput
	Region   pulumi.StringPtrInput
	RwType   pulumi.StringPtrInput
	ShareId  pulumi.StringPtrInput
	UserType pulumi.StringPtrInput
}

func (SfsTurboPermRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboPermRuleState)(nil)).Elem()
}

type sfsTurboPermRuleArgs struct {
	IpCidr   string  `pulumi:"ipCidr"`
	Region   *string `pulumi:"region"`
	RwType   string  `pulumi:"rwType"`
	ShareId  string  `pulumi:"shareId"`
	UserType string  `pulumi:"userType"`
}

// The set of arguments for constructing a SfsTurboPermRule resource.
type SfsTurboPermRuleArgs struct {
	IpCidr   pulumi.StringInput
	Region   pulumi.StringPtrInput
	RwType   pulumi.StringInput
	ShareId  pulumi.StringInput
	UserType pulumi.StringInput
}

func (SfsTurboPermRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sfsTurboPermRuleArgs)(nil)).Elem()
}

type SfsTurboPermRuleInput interface {
	pulumi.Input

	ToSfsTurboPermRuleOutput() SfsTurboPermRuleOutput
	ToSfsTurboPermRuleOutputWithContext(ctx context.Context) SfsTurboPermRuleOutput
}

func (*SfsTurboPermRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboPermRule)(nil)).Elem()
}

func (i *SfsTurboPermRule) ToSfsTurboPermRuleOutput() SfsTurboPermRuleOutput {
	return i.ToSfsTurboPermRuleOutputWithContext(context.Background())
}

func (i *SfsTurboPermRule) ToSfsTurboPermRuleOutputWithContext(ctx context.Context) SfsTurboPermRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboPermRuleOutput)
}

// SfsTurboPermRuleArrayInput is an input type that accepts SfsTurboPermRuleArray and SfsTurboPermRuleArrayOutput values.
// You can construct a concrete instance of `SfsTurboPermRuleArrayInput` via:
//
//	SfsTurboPermRuleArray{ SfsTurboPermRuleArgs{...} }
type SfsTurboPermRuleArrayInput interface {
	pulumi.Input

	ToSfsTurboPermRuleArrayOutput() SfsTurboPermRuleArrayOutput
	ToSfsTurboPermRuleArrayOutputWithContext(context.Context) SfsTurboPermRuleArrayOutput
}

type SfsTurboPermRuleArray []SfsTurboPermRuleInput

func (SfsTurboPermRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboPermRule)(nil)).Elem()
}

func (i SfsTurboPermRuleArray) ToSfsTurboPermRuleArrayOutput() SfsTurboPermRuleArrayOutput {
	return i.ToSfsTurboPermRuleArrayOutputWithContext(context.Background())
}

func (i SfsTurboPermRuleArray) ToSfsTurboPermRuleArrayOutputWithContext(ctx context.Context) SfsTurboPermRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboPermRuleArrayOutput)
}

// SfsTurboPermRuleMapInput is an input type that accepts SfsTurboPermRuleMap and SfsTurboPermRuleMapOutput values.
// You can construct a concrete instance of `SfsTurboPermRuleMapInput` via:
//
//	SfsTurboPermRuleMap{ "key": SfsTurboPermRuleArgs{...} }
type SfsTurboPermRuleMapInput interface {
	pulumi.Input

	ToSfsTurboPermRuleMapOutput() SfsTurboPermRuleMapOutput
	ToSfsTurboPermRuleMapOutputWithContext(context.Context) SfsTurboPermRuleMapOutput
}

type SfsTurboPermRuleMap map[string]SfsTurboPermRuleInput

func (SfsTurboPermRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboPermRule)(nil)).Elem()
}

func (i SfsTurboPermRuleMap) ToSfsTurboPermRuleMapOutput() SfsTurboPermRuleMapOutput {
	return i.ToSfsTurboPermRuleMapOutputWithContext(context.Background())
}

func (i SfsTurboPermRuleMap) ToSfsTurboPermRuleMapOutputWithContext(ctx context.Context) SfsTurboPermRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SfsTurboPermRuleMapOutput)
}

type SfsTurboPermRuleOutput struct{ *pulumi.OutputState }

func (SfsTurboPermRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SfsTurboPermRule)(nil)).Elem()
}

func (o SfsTurboPermRuleOutput) ToSfsTurboPermRuleOutput() SfsTurboPermRuleOutput {
	return o
}

func (o SfsTurboPermRuleOutput) ToSfsTurboPermRuleOutputWithContext(ctx context.Context) SfsTurboPermRuleOutput {
	return o
}

func (o SfsTurboPermRuleOutput) IpCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboPermRule) pulumi.StringOutput { return v.IpCidr }).(pulumi.StringOutput)
}

func (o SfsTurboPermRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboPermRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SfsTurboPermRuleOutput) RwType() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboPermRule) pulumi.StringOutput { return v.RwType }).(pulumi.StringOutput)
}

func (o SfsTurboPermRuleOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboPermRule) pulumi.StringOutput { return v.ShareId }).(pulumi.StringOutput)
}

func (o SfsTurboPermRuleOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v *SfsTurboPermRule) pulumi.StringOutput { return v.UserType }).(pulumi.StringOutput)
}

type SfsTurboPermRuleArrayOutput struct{ *pulumi.OutputState }

func (SfsTurboPermRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SfsTurboPermRule)(nil)).Elem()
}

func (o SfsTurboPermRuleArrayOutput) ToSfsTurboPermRuleArrayOutput() SfsTurboPermRuleArrayOutput {
	return o
}

func (o SfsTurboPermRuleArrayOutput) ToSfsTurboPermRuleArrayOutputWithContext(ctx context.Context) SfsTurboPermRuleArrayOutput {
	return o
}

func (o SfsTurboPermRuleArrayOutput) Index(i pulumi.IntInput) SfsTurboPermRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SfsTurboPermRule {
		return vs[0].([]*SfsTurboPermRule)[vs[1].(int)]
	}).(SfsTurboPermRuleOutput)
}

type SfsTurboPermRuleMapOutput struct{ *pulumi.OutputState }

func (SfsTurboPermRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SfsTurboPermRule)(nil)).Elem()
}

func (o SfsTurboPermRuleMapOutput) ToSfsTurboPermRuleMapOutput() SfsTurboPermRuleMapOutput {
	return o
}

func (o SfsTurboPermRuleMapOutput) ToSfsTurboPermRuleMapOutputWithContext(ctx context.Context) SfsTurboPermRuleMapOutput {
	return o
}

func (o SfsTurboPermRuleMapOutput) MapIndex(k pulumi.StringInput) SfsTurboPermRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SfsTurboPermRule {
		return vs[0].(map[string]*SfsTurboPermRule)[vs[1].(string)]
	}).(SfsTurboPermRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboPermRuleInput)(nil)).Elem(), &SfsTurboPermRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboPermRuleArrayInput)(nil)).Elem(), SfsTurboPermRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SfsTurboPermRuleMapInput)(nil)).Elem(), SfsTurboPermRuleMap{})
	pulumi.RegisterOutputType(SfsTurboPermRuleOutput{})
	pulumi.RegisterOutputType(SfsTurboPermRuleArrayOutput{})
	pulumi.RegisterOutputType(SfsTurboPermRuleMapOutput{})
}

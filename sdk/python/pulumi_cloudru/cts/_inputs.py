# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'NotificationFilterArgs',
    'NotificationFilterArgsDict',
    'NotificationOperationArgs',
    'NotificationOperationArgsDict',
    'NotificationOperationUserArgs',
    'NotificationOperationUserArgsDict',
]

MYPY = False

if not MYPY:
    class NotificationFilterArgsDict(TypedDict):
        condition: pulumi.Input[_builtins.str]
        rules: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    NotificationFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationFilterArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[_builtins.str],
                 rules: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def condition(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "condition", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "rules", value)


if not MYPY:
    class NotificationOperationArgsDict(TypedDict):
        resource: pulumi.Input[_builtins.str]
        """
        Specifies the resource type.
        """
        service: pulumi.Input[_builtins.str]
        """
        Specifies the cloud service.
        """
        trace_names: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies an array of trace names.

        <a name="notification_operation_users_object"></a>
        The `operation_users` block supports:
        """
elif False:
    NotificationOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationOperationArgs:
    def __init__(__self__, *,
                 resource: pulumi.Input[_builtins.str],
                 service: pulumi.Input[_builtins.str],
                 trace_names: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] resource: Specifies the resource type.
        :param pulumi.Input[_builtins.str] service: Specifies the cloud service.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] trace_names: Specifies an array of trace names.
               
               <a name="notification_operation_users_object"></a>
               The `operation_users` block supports:
        """
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "trace_names", trace_names)

    @_builtins.property
    @pulumi.getter
    def resource(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the resource type.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource", value)

    @_builtins.property
    @pulumi.getter
    def service(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the cloud service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service", value)

    @_builtins.property
    @pulumi.getter(name="traceNames")
    def trace_names(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies an array of trace names.

        <a name="notification_operation_users_object"></a>
        The `operation_users` block supports:
        """
        return pulumi.get(self, "trace_names")

    @trace_names.setter
    def trace_names(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "trace_names", value)


if not MYPY:
    class NotificationOperationUserArgsDict(TypedDict):
        group: pulumi.Input[_builtins.str]
        """
        Specifies the IAM user group name.
        """
        users: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Specifies an array of IAM users in the group.
        """
elif False:
    NotificationOperationUserArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NotificationOperationUserArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[_builtins.str],
                 users: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] group: Specifies the IAM user group name.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] users: Specifies an array of IAM users in the group.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def group(self) -> pulumi.Input[_builtins.str]:
        """
        Specifies the IAM user group name.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "group", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Specifies an array of IAM users in the group.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "users", value)



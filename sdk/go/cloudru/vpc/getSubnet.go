// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetResult
	err := ctx.Invoke("sbercloud:Vpc/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	AvailabilityZone *string `pulumi:"availabilityZone"`
	Cidr             *string `pulumi:"cidr"`
	GatewayIp        *string `pulumi:"gatewayIp"`
	Id               *string `pulumi:"id"`
	Name             *string `pulumi:"name"`
	PrimaryDns       *string `pulumi:"primaryDns"`
	Region           *string `pulumi:"region"`
	SecondaryDns     *string `pulumi:"secondaryDns"`
	Status           *string `pulumi:"status"`
	VpcId            *string `pulumi:"vpcId"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	AvailabilityZone string   `pulumi:"availabilityZone"`
	Cidr             string   `pulumi:"cidr"`
	Description      string   `pulumi:"description"`
	DhcpEnable       bool     `pulumi:"dhcpEnable"`
	DnsLists         []string `pulumi:"dnsLists"`
	GatewayIp        string   `pulumi:"gatewayIp"`
	Id               string   `pulumi:"id"`
	Ipv4SubnetId     string   `pulumi:"ipv4SubnetId"`
	Ipv6Cidr         string   `pulumi:"ipv6Cidr"`
	Ipv6Enable       bool     `pulumi:"ipv6Enable"`
	Ipv6Gateway      string   `pulumi:"ipv6Gateway"`
	Ipv6SubnetId     string   `pulumi:"ipv6SubnetId"`
	Name             string   `pulumi:"name"`
	PrimaryDns       string   `pulumi:"primaryDns"`
	Region           string   `pulumi:"region"`
	SecondaryDns     string   `pulumi:"secondaryDns"`
	Status           string   `pulumi:"status"`
	SubnetId         string   `pulumi:"subnetId"`
	VpcId            string   `pulumi:"vpcId"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSubnetResultOutput, error) {
			args := v.(LookupSubnetArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Vpc/getSubnet:getSubnet", args, LookupSubnetResultOutput{}, options).(LookupSubnetResultOutput), nil
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	Cidr             pulumi.StringPtrInput `pulumi:"cidr"`
	GatewayIp        pulumi.StringPtrInput `pulumi:"gatewayIp"`
	Id               pulumi.StringPtrInput `pulumi:"id"`
	Name             pulumi.StringPtrInput `pulumi:"name"`
	PrimaryDns       pulumi.StringPtrInput `pulumi:"primaryDns"`
	Region           pulumi.StringPtrInput `pulumi:"region"`
	SecondaryDns     pulumi.StringPtrInput `pulumi:"secondaryDns"`
	Status           pulumi.StringPtrInput `pulumi:"status"`
	VpcId            pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Cidr }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) DhcpEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.DhcpEnable }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) DnsLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []string { return v.DnsLists }).(pulumi.StringArrayOutput)
}

func (o LookupSubnetResultOutput) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.GatewayIp }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Ipv4SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Ipv4SubnetId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Ipv6Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Ipv6Cidr }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o LookupSubnetResultOutput) Ipv6Gateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Ipv6Gateway }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Ipv6SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Ipv6SubnetId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) PrimaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.PrimaryDns }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) SecondaryDns() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.SecondaryDns }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}

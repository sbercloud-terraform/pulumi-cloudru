// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class SfsTurboDuTask extends pulumi.CustomResource {
    /**
     * Get an existing SfsTurboDuTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SfsTurboDuTaskState, opts?: pulumi.CustomResourceOptions): SfsTurboDuTask {
        return new SfsTurboDuTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:index/sfsTurboDuTask:SfsTurboDuTask';

    /**
     * Returns true if the given object is an instance of SfsTurboDuTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SfsTurboDuTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SfsTurboDuTask.__pulumiType;
    }

    declare public /*out*/ readonly beginTime: pulumi.Output<string>;
    declare public /*out*/ readonly dirUsages: pulumi.Output<outputs.SfsTurboDuTaskDirUsage[]>;
    declare public /*out*/ readonly endTime: pulumi.Output<string>;
    declare public readonly path: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly shareId: pulumi.Output<string>;
    declare public /*out*/ readonly status: pulumi.Output<string>;

    /**
     * Create a SfsTurboDuTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SfsTurboDuTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SfsTurboDuTaskArgs | SfsTurboDuTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SfsTurboDuTaskState | undefined;
            resourceInputs["beginTime"] = state?.beginTime;
            resourceInputs["dirUsages"] = state?.dirUsages;
            resourceInputs["endTime"] = state?.endTime;
            resourceInputs["path"] = state?.path;
            resourceInputs["region"] = state?.region;
            resourceInputs["shareId"] = state?.shareId;
            resourceInputs["status"] = state?.status;
        } else {
            const args = argsOrState as SfsTurboDuTaskArgs | undefined;
            if (args?.path === undefined && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if (args?.shareId === undefined && !opts.urn) {
                throw new Error("Missing required property 'shareId'");
            }
            resourceInputs["path"] = args?.path;
            resourceInputs["region"] = args?.region;
            resourceInputs["shareId"] = args?.shareId;
            resourceInputs["beginTime"] = undefined /*out*/;
            resourceInputs["dirUsages"] = undefined /*out*/;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SfsTurboDuTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SfsTurboDuTask resources.
 */
export interface SfsTurboDuTaskState {
    beginTime?: pulumi.Input<string>;
    dirUsages?: pulumi.Input<pulumi.Input<inputs.SfsTurboDuTaskDirUsage>[]>;
    endTime?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SfsTurboDuTask resource.
 */
export interface SfsTurboDuTaskArgs {
    path: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    shareId: pulumi.Input<string>;
}

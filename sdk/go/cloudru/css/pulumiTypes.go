// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type ClusterBackupStrategy struct {
	// Specifies the IAM agency used to access OBS.
	//
	// > **NOTE:**  If the `bucket`, `backupPath`, and `agency` parameters are empty at the same time, the system will
	// automatically create an OBS bucket and IAM agent, otherwise the configured parameter values will be used.
	Agency *string `pulumi:"agency"`
	// Specifies the storage path of the snapshot in the OBS bucket.
	BackupPath *string `pulumi:"backupPath"`
	// Specifies the OBS bucket used for index data backup. If there is snapshot data in an OBS
	// bucket, only the OBS bucket is used and cannot be changed.
	Bucket *string `pulumi:"bucket"`
	// Specifies the number of days to retain the generated snapshots. Snapshots are reserved
	// for seven days by default.
	KeepDays *int `pulumi:"keepDays"`
	// Specifies the prefix of the snapshot that is automatically created. Defaults to **snapshot**.
	Prefix *string `pulumi:"prefix"`
	// Specifies the time when a snapshot is automatically created everyday. Snapshots can
	// only be created on the hour. The time format is the time followed by the time zone, specifically, **HH:mm z**. In the
	// format, **HH:mm** refers to the hour time and z refers to the time zone. For example, "00:00 GMT+08:00"
	// and "01:00 GMT+08:00".
	StartTime string `pulumi:"startTime"`
}

// ClusterBackupStrategyInput is an input type that accepts ClusterBackupStrategyArgs and ClusterBackupStrategyOutput values.
// You can construct a concrete instance of `ClusterBackupStrategyInput` via:
//
//	ClusterBackupStrategyArgs{...}
type ClusterBackupStrategyInput interface {
	pulumi.Input

	ToClusterBackupStrategyOutput() ClusterBackupStrategyOutput
	ToClusterBackupStrategyOutputWithContext(context.Context) ClusterBackupStrategyOutput
}

type ClusterBackupStrategyArgs struct {
	// Specifies the IAM agency used to access OBS.
	//
	// > **NOTE:**  If the `bucket`, `backupPath`, and `agency` parameters are empty at the same time, the system will
	// automatically create an OBS bucket and IAM agent, otherwise the configured parameter values will be used.
	Agency pulumi.StringPtrInput `pulumi:"agency"`
	// Specifies the storage path of the snapshot in the OBS bucket.
	BackupPath pulumi.StringPtrInput `pulumi:"backupPath"`
	// Specifies the OBS bucket used for index data backup. If there is snapshot data in an OBS
	// bucket, only the OBS bucket is used and cannot be changed.
	Bucket pulumi.StringPtrInput `pulumi:"bucket"`
	// Specifies the number of days to retain the generated snapshots. Snapshots are reserved
	// for seven days by default.
	KeepDays pulumi.IntPtrInput `pulumi:"keepDays"`
	// Specifies the prefix of the snapshot that is automatically created. Defaults to **snapshot**.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// Specifies the time when a snapshot is automatically created everyday. Snapshots can
	// only be created on the hour. The time format is the time followed by the time zone, specifically, **HH:mm z**. In the
	// format, **HH:mm** refers to the hour time and z refers to the time zone. For example, "00:00 GMT+08:00"
	// and "01:00 GMT+08:00".
	StartTime pulumi.StringInput `pulumi:"startTime"`
}

func (ClusterBackupStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBackupStrategy)(nil)).Elem()
}

func (i ClusterBackupStrategyArgs) ToClusterBackupStrategyOutput() ClusterBackupStrategyOutput {
	return i.ToClusterBackupStrategyOutputWithContext(context.Background())
}

func (i ClusterBackupStrategyArgs) ToClusterBackupStrategyOutputWithContext(ctx context.Context) ClusterBackupStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBackupStrategyOutput)
}

func (i ClusterBackupStrategyArgs) ToClusterBackupStrategyPtrOutput() ClusterBackupStrategyPtrOutput {
	return i.ToClusterBackupStrategyPtrOutputWithContext(context.Background())
}

func (i ClusterBackupStrategyArgs) ToClusterBackupStrategyPtrOutputWithContext(ctx context.Context) ClusterBackupStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBackupStrategyOutput).ToClusterBackupStrategyPtrOutputWithContext(ctx)
}

// ClusterBackupStrategyPtrInput is an input type that accepts ClusterBackupStrategyArgs, ClusterBackupStrategyPtr and ClusterBackupStrategyPtrOutput values.
// You can construct a concrete instance of `ClusterBackupStrategyPtrInput` via:
//
//	        ClusterBackupStrategyArgs{...}
//
//	or:
//
//	        nil
type ClusterBackupStrategyPtrInput interface {
	pulumi.Input

	ToClusterBackupStrategyPtrOutput() ClusterBackupStrategyPtrOutput
	ToClusterBackupStrategyPtrOutputWithContext(context.Context) ClusterBackupStrategyPtrOutput
}

type clusterBackupStrategyPtrType ClusterBackupStrategyArgs

func ClusterBackupStrategyPtr(v *ClusterBackupStrategyArgs) ClusterBackupStrategyPtrInput {
	return (*clusterBackupStrategyPtrType)(v)
}

func (*clusterBackupStrategyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBackupStrategy)(nil)).Elem()
}

func (i *clusterBackupStrategyPtrType) ToClusterBackupStrategyPtrOutput() ClusterBackupStrategyPtrOutput {
	return i.ToClusterBackupStrategyPtrOutputWithContext(context.Background())
}

func (i *clusterBackupStrategyPtrType) ToClusterBackupStrategyPtrOutputWithContext(ctx context.Context) ClusterBackupStrategyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterBackupStrategyPtrOutput)
}

type ClusterBackupStrategyOutput struct{ *pulumi.OutputState }

func (ClusterBackupStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterBackupStrategy)(nil)).Elem()
}

func (o ClusterBackupStrategyOutput) ToClusterBackupStrategyOutput() ClusterBackupStrategyOutput {
	return o
}

func (o ClusterBackupStrategyOutput) ToClusterBackupStrategyOutputWithContext(ctx context.Context) ClusterBackupStrategyOutput {
	return o
}

func (o ClusterBackupStrategyOutput) ToClusterBackupStrategyPtrOutput() ClusterBackupStrategyPtrOutput {
	return o.ToClusterBackupStrategyPtrOutputWithContext(context.Background())
}

func (o ClusterBackupStrategyOutput) ToClusterBackupStrategyPtrOutputWithContext(ctx context.Context) ClusterBackupStrategyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterBackupStrategy) *ClusterBackupStrategy {
		return &v
	}).(ClusterBackupStrategyPtrOutput)
}

// Specifies the IAM agency used to access OBS.
//
// > **NOTE:**  If the `bucket`, `backupPath`, and `agency` parameters are empty at the same time, the system will
// automatically create an OBS bucket and IAM agent, otherwise the configured parameter values will be used.
func (o ClusterBackupStrategyOutput) Agency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterBackupStrategy) *string { return v.Agency }).(pulumi.StringPtrOutput)
}

// Specifies the storage path of the snapshot in the OBS bucket.
func (o ClusterBackupStrategyOutput) BackupPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterBackupStrategy) *string { return v.BackupPath }).(pulumi.StringPtrOutput)
}

// Specifies the OBS bucket used for index data backup. If there is snapshot data in an OBS
// bucket, only the OBS bucket is used and cannot be changed.
func (o ClusterBackupStrategyOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterBackupStrategy) *string { return v.Bucket }).(pulumi.StringPtrOutput)
}

// Specifies the number of days to retain the generated snapshots. Snapshots are reserved
// for seven days by default.
func (o ClusterBackupStrategyOutput) KeepDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClusterBackupStrategy) *int { return v.KeepDays }).(pulumi.IntPtrOutput)
}

// Specifies the prefix of the snapshot that is automatically created. Defaults to **snapshot**.
func (o ClusterBackupStrategyOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterBackupStrategy) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

// Specifies the time when a snapshot is automatically created everyday. Snapshots can
// only be created on the hour. The time format is the time followed by the time zone, specifically, **HH:mm z**. In the
// format, **HH:mm** refers to the hour time and z refers to the time zone. For example, "00:00 GMT+08:00"
// and "01:00 GMT+08:00".
func (o ClusterBackupStrategyOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterBackupStrategy) string { return v.StartTime }).(pulumi.StringOutput)
}

type ClusterBackupStrategyPtrOutput struct{ *pulumi.OutputState }

func (ClusterBackupStrategyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterBackupStrategy)(nil)).Elem()
}

func (o ClusterBackupStrategyPtrOutput) ToClusterBackupStrategyPtrOutput() ClusterBackupStrategyPtrOutput {
	return o
}

func (o ClusterBackupStrategyPtrOutput) ToClusterBackupStrategyPtrOutputWithContext(ctx context.Context) ClusterBackupStrategyPtrOutput {
	return o
}

func (o ClusterBackupStrategyPtrOutput) Elem() ClusterBackupStrategyOutput {
	return o.ApplyT(func(v *ClusterBackupStrategy) ClusterBackupStrategy {
		if v != nil {
			return *v
		}
		var ret ClusterBackupStrategy
		return ret
	}).(ClusterBackupStrategyOutput)
}

// Specifies the IAM agency used to access OBS.
//
// > **NOTE:**  If the `bucket`, `backupPath`, and `agency` parameters are empty at the same time, the system will
// automatically create an OBS bucket and IAM agent, otherwise the configured parameter values will be used.
func (o ClusterBackupStrategyPtrOutput) Agency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterBackupStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Agency
	}).(pulumi.StringPtrOutput)
}

// Specifies the storage path of the snapshot in the OBS bucket.
func (o ClusterBackupStrategyPtrOutput) BackupPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterBackupStrategy) *string {
		if v == nil {
			return nil
		}
		return v.BackupPath
	}).(pulumi.StringPtrOutput)
}

// Specifies the OBS bucket used for index data backup. If there is snapshot data in an OBS
// bucket, only the OBS bucket is used and cannot be changed.
func (o ClusterBackupStrategyPtrOutput) Bucket() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterBackupStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Bucket
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of days to retain the generated snapshots. Snapshots are reserved
// for seven days by default.
func (o ClusterBackupStrategyPtrOutput) KeepDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterBackupStrategy) *int {
		if v == nil {
			return nil
		}
		return v.KeepDays
	}).(pulumi.IntPtrOutput)
}

// Specifies the prefix of the snapshot that is automatically created. Defaults to **snapshot**.
func (o ClusterBackupStrategyPtrOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterBackupStrategy) *string {
		if v == nil {
			return nil
		}
		return v.Prefix
	}).(pulumi.StringPtrOutput)
}

// Specifies the time when a snapshot is automatically created everyday. Snapshots can
// only be created on the hour. The time format is the time followed by the time zone, specifically, **HH:mm z**. In the
// format, **HH:mm** refers to the hour time and z refers to the time zone. For example, "00:00 GMT+08:00"
// and "01:00 GMT+08:00".
func (o ClusterBackupStrategyPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterBackupStrategy) *string {
		if v == nil {
			return nil
		}
		return &v.StartTime
	}).(pulumi.StringPtrOutput)
}

type ClusterClientNodeConfig struct {
	// Specifies the flavor name.
	Flavor string `pulumi:"flavor"`
	// Specifies the number of cluster instances.
	// + When it is `masterNodeConfig`, The value range is `3` to `10`.
	// + When it is `clientNodeConfig`, The value range is `1` to `32`.
	InstanceNumber int `pulumi:"instanceNumber"`
	// Specifies the node IDs that needs to be scaled down.
	//
	// <a name="Css_master_or_client_volume"></a>
	// The `volume` block supports:
	ShrinkNodeIds []string `pulumi:"shrinkNodeIds"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume ClusterClientNodeConfigVolume `pulumi:"volume"`
}

// ClusterClientNodeConfigInput is an input type that accepts ClusterClientNodeConfigArgs and ClusterClientNodeConfigOutput values.
// You can construct a concrete instance of `ClusterClientNodeConfigInput` via:
//
//	ClusterClientNodeConfigArgs{...}
type ClusterClientNodeConfigInput interface {
	pulumi.Input

	ToClusterClientNodeConfigOutput() ClusterClientNodeConfigOutput
	ToClusterClientNodeConfigOutputWithContext(context.Context) ClusterClientNodeConfigOutput
}

type ClusterClientNodeConfigArgs struct {
	// Specifies the flavor name.
	Flavor pulumi.StringInput `pulumi:"flavor"`
	// Specifies the number of cluster instances.
	// + When it is `masterNodeConfig`, The value range is `3` to `10`.
	// + When it is `clientNodeConfig`, The value range is `1` to `32`.
	InstanceNumber pulumi.IntInput `pulumi:"instanceNumber"`
	// Specifies the node IDs that needs to be scaled down.
	//
	// <a name="Css_master_or_client_volume"></a>
	// The `volume` block supports:
	ShrinkNodeIds pulumi.StringArrayInput `pulumi:"shrinkNodeIds"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume ClusterClientNodeConfigVolumeInput `pulumi:"volume"`
}

func (ClusterClientNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientNodeConfig)(nil)).Elem()
}

func (i ClusterClientNodeConfigArgs) ToClusterClientNodeConfigOutput() ClusterClientNodeConfigOutput {
	return i.ToClusterClientNodeConfigOutputWithContext(context.Background())
}

func (i ClusterClientNodeConfigArgs) ToClusterClientNodeConfigOutputWithContext(ctx context.Context) ClusterClientNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientNodeConfigOutput)
}

func (i ClusterClientNodeConfigArgs) ToClusterClientNodeConfigPtrOutput() ClusterClientNodeConfigPtrOutput {
	return i.ToClusterClientNodeConfigPtrOutputWithContext(context.Background())
}

func (i ClusterClientNodeConfigArgs) ToClusterClientNodeConfigPtrOutputWithContext(ctx context.Context) ClusterClientNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientNodeConfigOutput).ToClusterClientNodeConfigPtrOutputWithContext(ctx)
}

// ClusterClientNodeConfigPtrInput is an input type that accepts ClusterClientNodeConfigArgs, ClusterClientNodeConfigPtr and ClusterClientNodeConfigPtrOutput values.
// You can construct a concrete instance of `ClusterClientNodeConfigPtrInput` via:
//
//	        ClusterClientNodeConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterClientNodeConfigPtrInput interface {
	pulumi.Input

	ToClusterClientNodeConfigPtrOutput() ClusterClientNodeConfigPtrOutput
	ToClusterClientNodeConfigPtrOutputWithContext(context.Context) ClusterClientNodeConfigPtrOutput
}

type clusterClientNodeConfigPtrType ClusterClientNodeConfigArgs

func ClusterClientNodeConfigPtr(v *ClusterClientNodeConfigArgs) ClusterClientNodeConfigPtrInput {
	return (*clusterClientNodeConfigPtrType)(v)
}

func (*clusterClientNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientNodeConfig)(nil)).Elem()
}

func (i *clusterClientNodeConfigPtrType) ToClusterClientNodeConfigPtrOutput() ClusterClientNodeConfigPtrOutput {
	return i.ToClusterClientNodeConfigPtrOutputWithContext(context.Background())
}

func (i *clusterClientNodeConfigPtrType) ToClusterClientNodeConfigPtrOutputWithContext(ctx context.Context) ClusterClientNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientNodeConfigPtrOutput)
}

type ClusterClientNodeConfigOutput struct{ *pulumi.OutputState }

func (ClusterClientNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientNodeConfig)(nil)).Elem()
}

func (o ClusterClientNodeConfigOutput) ToClusterClientNodeConfigOutput() ClusterClientNodeConfigOutput {
	return o
}

func (o ClusterClientNodeConfigOutput) ToClusterClientNodeConfigOutputWithContext(ctx context.Context) ClusterClientNodeConfigOutput {
	return o
}

func (o ClusterClientNodeConfigOutput) ToClusterClientNodeConfigPtrOutput() ClusterClientNodeConfigPtrOutput {
	return o.ToClusterClientNodeConfigPtrOutputWithContext(context.Background())
}

func (o ClusterClientNodeConfigOutput) ToClusterClientNodeConfigPtrOutputWithContext(ctx context.Context) ClusterClientNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterClientNodeConfig) *ClusterClientNodeConfig {
		return &v
	}).(ClusterClientNodeConfigPtrOutput)
}

// Specifies the flavor name.
func (o ClusterClientNodeConfigOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterClientNodeConfig) string { return v.Flavor }).(pulumi.StringOutput)
}

// Specifies the number of cluster instances.
// + When it is `masterNodeConfig`, The value range is `3` to `10`.
// + When it is `clientNodeConfig`, The value range is `1` to `32`.
func (o ClusterClientNodeConfigOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterClientNodeConfig) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// Specifies the node IDs that needs to be scaled down.
//
// <a name="Css_master_or_client_volume"></a>
// The `volume` block supports:
func (o ClusterClientNodeConfigOutput) ShrinkNodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterClientNodeConfig) []string { return v.ShrinkNodeIds }).(pulumi.StringArrayOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterClientNodeConfigOutput) Volume() ClusterClientNodeConfigVolumeOutput {
	return o.ApplyT(func(v ClusterClientNodeConfig) ClusterClientNodeConfigVolume { return v.Volume }).(ClusterClientNodeConfigVolumeOutput)
}

type ClusterClientNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterClientNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientNodeConfig)(nil)).Elem()
}

func (o ClusterClientNodeConfigPtrOutput) ToClusterClientNodeConfigPtrOutput() ClusterClientNodeConfigPtrOutput {
	return o
}

func (o ClusterClientNodeConfigPtrOutput) ToClusterClientNodeConfigPtrOutputWithContext(ctx context.Context) ClusterClientNodeConfigPtrOutput {
	return o
}

func (o ClusterClientNodeConfigPtrOutput) Elem() ClusterClientNodeConfigOutput {
	return o.ApplyT(func(v *ClusterClientNodeConfig) ClusterClientNodeConfig {
		if v != nil {
			return *v
		}
		var ret ClusterClientNodeConfig
		return ret
	}).(ClusterClientNodeConfigOutput)
}

// Specifies the flavor name.
func (o ClusterClientNodeConfigPtrOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterClientNodeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Flavor
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of cluster instances.
// + When it is `masterNodeConfig`, The value range is `3` to `10`.
// + When it is `clientNodeConfig`, The value range is `1` to `32`.
func (o ClusterClientNodeConfigPtrOutput) InstanceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterClientNodeConfig) *int {
		if v == nil {
			return nil
		}
		return &v.InstanceNumber
	}).(pulumi.IntPtrOutput)
}

// Specifies the node IDs that needs to be scaled down.
//
// <a name="Css_master_or_client_volume"></a>
// The `volume` block supports:
func (o ClusterClientNodeConfigPtrOutput) ShrinkNodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterClientNodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.ShrinkNodeIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterClientNodeConfigPtrOutput) Volume() ClusterClientNodeConfigVolumePtrOutput {
	return o.ApplyT(func(v *ClusterClientNodeConfig) *ClusterClientNodeConfigVolume {
		if v == nil {
			return nil
		}
		return &v.Volume
	}).(ClusterClientNodeConfigVolumePtrOutput)
}

type ClusterClientNodeConfigVolume struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size int `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType string `pulumi:"volumeType"`
}

// ClusterClientNodeConfigVolumeInput is an input type that accepts ClusterClientNodeConfigVolumeArgs and ClusterClientNodeConfigVolumeOutput values.
// You can construct a concrete instance of `ClusterClientNodeConfigVolumeInput` via:
//
//	ClusterClientNodeConfigVolumeArgs{...}
type ClusterClientNodeConfigVolumeInput interface {
	pulumi.Input

	ToClusterClientNodeConfigVolumeOutput() ClusterClientNodeConfigVolumeOutput
	ToClusterClientNodeConfigVolumeOutputWithContext(context.Context) ClusterClientNodeConfigVolumeOutput
}

type ClusterClientNodeConfigVolumeArgs struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (ClusterClientNodeConfigVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientNodeConfigVolume)(nil)).Elem()
}

func (i ClusterClientNodeConfigVolumeArgs) ToClusterClientNodeConfigVolumeOutput() ClusterClientNodeConfigVolumeOutput {
	return i.ToClusterClientNodeConfigVolumeOutputWithContext(context.Background())
}

func (i ClusterClientNodeConfigVolumeArgs) ToClusterClientNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterClientNodeConfigVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientNodeConfigVolumeOutput)
}

func (i ClusterClientNodeConfigVolumeArgs) ToClusterClientNodeConfigVolumePtrOutput() ClusterClientNodeConfigVolumePtrOutput {
	return i.ToClusterClientNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i ClusterClientNodeConfigVolumeArgs) ToClusterClientNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterClientNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientNodeConfigVolumeOutput).ToClusterClientNodeConfigVolumePtrOutputWithContext(ctx)
}

// ClusterClientNodeConfigVolumePtrInput is an input type that accepts ClusterClientNodeConfigVolumeArgs, ClusterClientNodeConfigVolumePtr and ClusterClientNodeConfigVolumePtrOutput values.
// You can construct a concrete instance of `ClusterClientNodeConfigVolumePtrInput` via:
//
//	        ClusterClientNodeConfigVolumeArgs{...}
//
//	or:
//
//	        nil
type ClusterClientNodeConfigVolumePtrInput interface {
	pulumi.Input

	ToClusterClientNodeConfigVolumePtrOutput() ClusterClientNodeConfigVolumePtrOutput
	ToClusterClientNodeConfigVolumePtrOutputWithContext(context.Context) ClusterClientNodeConfigVolumePtrOutput
}

type clusterClientNodeConfigVolumePtrType ClusterClientNodeConfigVolumeArgs

func ClusterClientNodeConfigVolumePtr(v *ClusterClientNodeConfigVolumeArgs) ClusterClientNodeConfigVolumePtrInput {
	return (*clusterClientNodeConfigVolumePtrType)(v)
}

func (*clusterClientNodeConfigVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientNodeConfigVolume)(nil)).Elem()
}

func (i *clusterClientNodeConfigVolumePtrType) ToClusterClientNodeConfigVolumePtrOutput() ClusterClientNodeConfigVolumePtrOutput {
	return i.ToClusterClientNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i *clusterClientNodeConfigVolumePtrType) ToClusterClientNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterClientNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterClientNodeConfigVolumePtrOutput)
}

type ClusterClientNodeConfigVolumeOutput struct{ *pulumi.OutputState }

func (ClusterClientNodeConfigVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterClientNodeConfigVolume)(nil)).Elem()
}

func (o ClusterClientNodeConfigVolumeOutput) ToClusterClientNodeConfigVolumeOutput() ClusterClientNodeConfigVolumeOutput {
	return o
}

func (o ClusterClientNodeConfigVolumeOutput) ToClusterClientNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterClientNodeConfigVolumeOutput {
	return o
}

func (o ClusterClientNodeConfigVolumeOutput) ToClusterClientNodeConfigVolumePtrOutput() ClusterClientNodeConfigVolumePtrOutput {
	return o.ToClusterClientNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (o ClusterClientNodeConfigVolumeOutput) ToClusterClientNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterClientNodeConfigVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterClientNodeConfigVolume) *ClusterClientNodeConfigVolume {
		return &v
	}).(ClusterClientNodeConfigVolumePtrOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterClientNodeConfigVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterClientNodeConfigVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterClientNodeConfigVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterClientNodeConfigVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type ClusterClientNodeConfigVolumePtrOutput struct{ *pulumi.OutputState }

func (ClusterClientNodeConfigVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterClientNodeConfigVolume)(nil)).Elem()
}

func (o ClusterClientNodeConfigVolumePtrOutput) ToClusterClientNodeConfigVolumePtrOutput() ClusterClientNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterClientNodeConfigVolumePtrOutput) ToClusterClientNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterClientNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterClientNodeConfigVolumePtrOutput) Elem() ClusterClientNodeConfigVolumeOutput {
	return o.ApplyT(func(v *ClusterClientNodeConfigVolume) ClusterClientNodeConfigVolume {
		if v != nil {
			return *v
		}
		var ret ClusterClientNodeConfigVolume
		return ret
	}).(ClusterClientNodeConfigVolumeOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterClientNodeConfigVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterClientNodeConfigVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterClientNodeConfigVolumePtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterClientNodeConfigVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type ClusterColdNodeConfig struct {
	// Specifies the flavor name.
	Flavor string `pulumi:"flavor"`
	// Specifies the number of cluster instances.
	// + When it is `masterNodeConfig`, The value range is `3` to `10`.
	// + When it is `clientNodeConfig`, The value range is `1` to `32`.
	InstanceNumber int `pulumi:"instanceNumber"`
	// Specifies the node IDs that needs to be scaled down.
	//
	// <a name="Css_master_or_client_volume"></a>
	// The `volume` block supports:
	ShrinkNodeIds []string `pulumi:"shrinkNodeIds"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume *ClusterColdNodeConfigVolume `pulumi:"volume"`
}

// ClusterColdNodeConfigInput is an input type that accepts ClusterColdNodeConfigArgs and ClusterColdNodeConfigOutput values.
// You can construct a concrete instance of `ClusterColdNodeConfigInput` via:
//
//	ClusterColdNodeConfigArgs{...}
type ClusterColdNodeConfigInput interface {
	pulumi.Input

	ToClusterColdNodeConfigOutput() ClusterColdNodeConfigOutput
	ToClusterColdNodeConfigOutputWithContext(context.Context) ClusterColdNodeConfigOutput
}

type ClusterColdNodeConfigArgs struct {
	// Specifies the flavor name.
	Flavor pulumi.StringInput `pulumi:"flavor"`
	// Specifies the number of cluster instances.
	// + When it is `masterNodeConfig`, The value range is `3` to `10`.
	// + When it is `clientNodeConfig`, The value range is `1` to `32`.
	InstanceNumber pulumi.IntInput `pulumi:"instanceNumber"`
	// Specifies the node IDs that needs to be scaled down.
	//
	// <a name="Css_master_or_client_volume"></a>
	// The `volume` block supports:
	ShrinkNodeIds pulumi.StringArrayInput `pulumi:"shrinkNodeIds"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume ClusterColdNodeConfigVolumePtrInput `pulumi:"volume"`
}

func (ClusterColdNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterColdNodeConfig)(nil)).Elem()
}

func (i ClusterColdNodeConfigArgs) ToClusterColdNodeConfigOutput() ClusterColdNodeConfigOutput {
	return i.ToClusterColdNodeConfigOutputWithContext(context.Background())
}

func (i ClusterColdNodeConfigArgs) ToClusterColdNodeConfigOutputWithContext(ctx context.Context) ClusterColdNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterColdNodeConfigOutput)
}

func (i ClusterColdNodeConfigArgs) ToClusterColdNodeConfigPtrOutput() ClusterColdNodeConfigPtrOutput {
	return i.ToClusterColdNodeConfigPtrOutputWithContext(context.Background())
}

func (i ClusterColdNodeConfigArgs) ToClusterColdNodeConfigPtrOutputWithContext(ctx context.Context) ClusterColdNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterColdNodeConfigOutput).ToClusterColdNodeConfigPtrOutputWithContext(ctx)
}

// ClusterColdNodeConfigPtrInput is an input type that accepts ClusterColdNodeConfigArgs, ClusterColdNodeConfigPtr and ClusterColdNodeConfigPtrOutput values.
// You can construct a concrete instance of `ClusterColdNodeConfigPtrInput` via:
//
//	        ClusterColdNodeConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterColdNodeConfigPtrInput interface {
	pulumi.Input

	ToClusterColdNodeConfigPtrOutput() ClusterColdNodeConfigPtrOutput
	ToClusterColdNodeConfigPtrOutputWithContext(context.Context) ClusterColdNodeConfigPtrOutput
}

type clusterColdNodeConfigPtrType ClusterColdNodeConfigArgs

func ClusterColdNodeConfigPtr(v *ClusterColdNodeConfigArgs) ClusterColdNodeConfigPtrInput {
	return (*clusterColdNodeConfigPtrType)(v)
}

func (*clusterColdNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterColdNodeConfig)(nil)).Elem()
}

func (i *clusterColdNodeConfigPtrType) ToClusterColdNodeConfigPtrOutput() ClusterColdNodeConfigPtrOutput {
	return i.ToClusterColdNodeConfigPtrOutputWithContext(context.Background())
}

func (i *clusterColdNodeConfigPtrType) ToClusterColdNodeConfigPtrOutputWithContext(ctx context.Context) ClusterColdNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterColdNodeConfigPtrOutput)
}

type ClusterColdNodeConfigOutput struct{ *pulumi.OutputState }

func (ClusterColdNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterColdNodeConfig)(nil)).Elem()
}

func (o ClusterColdNodeConfigOutput) ToClusterColdNodeConfigOutput() ClusterColdNodeConfigOutput {
	return o
}

func (o ClusterColdNodeConfigOutput) ToClusterColdNodeConfigOutputWithContext(ctx context.Context) ClusterColdNodeConfigOutput {
	return o
}

func (o ClusterColdNodeConfigOutput) ToClusterColdNodeConfigPtrOutput() ClusterColdNodeConfigPtrOutput {
	return o.ToClusterColdNodeConfigPtrOutputWithContext(context.Background())
}

func (o ClusterColdNodeConfigOutput) ToClusterColdNodeConfigPtrOutputWithContext(ctx context.Context) ClusterColdNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterColdNodeConfig) *ClusterColdNodeConfig {
		return &v
	}).(ClusterColdNodeConfigPtrOutput)
}

// Specifies the flavor name.
func (o ClusterColdNodeConfigOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterColdNodeConfig) string { return v.Flavor }).(pulumi.StringOutput)
}

// Specifies the number of cluster instances.
// + When it is `masterNodeConfig`, The value range is `3` to `10`.
// + When it is `clientNodeConfig`, The value range is `1` to `32`.
func (o ClusterColdNodeConfigOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterColdNodeConfig) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// Specifies the node IDs that needs to be scaled down.
//
// <a name="Css_master_or_client_volume"></a>
// The `volume` block supports:
func (o ClusterColdNodeConfigOutput) ShrinkNodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterColdNodeConfig) []string { return v.ShrinkNodeIds }).(pulumi.StringArrayOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterColdNodeConfigOutput) Volume() ClusterColdNodeConfigVolumePtrOutput {
	return o.ApplyT(func(v ClusterColdNodeConfig) *ClusterColdNodeConfigVolume { return v.Volume }).(ClusterColdNodeConfigVolumePtrOutput)
}

type ClusterColdNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterColdNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterColdNodeConfig)(nil)).Elem()
}

func (o ClusterColdNodeConfigPtrOutput) ToClusterColdNodeConfigPtrOutput() ClusterColdNodeConfigPtrOutput {
	return o
}

func (o ClusterColdNodeConfigPtrOutput) ToClusterColdNodeConfigPtrOutputWithContext(ctx context.Context) ClusterColdNodeConfigPtrOutput {
	return o
}

func (o ClusterColdNodeConfigPtrOutput) Elem() ClusterColdNodeConfigOutput {
	return o.ApplyT(func(v *ClusterColdNodeConfig) ClusterColdNodeConfig {
		if v != nil {
			return *v
		}
		var ret ClusterColdNodeConfig
		return ret
	}).(ClusterColdNodeConfigOutput)
}

// Specifies the flavor name.
func (o ClusterColdNodeConfigPtrOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterColdNodeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Flavor
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of cluster instances.
// + When it is `masterNodeConfig`, The value range is `3` to `10`.
// + When it is `clientNodeConfig`, The value range is `1` to `32`.
func (o ClusterColdNodeConfigPtrOutput) InstanceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterColdNodeConfig) *int {
		if v == nil {
			return nil
		}
		return &v.InstanceNumber
	}).(pulumi.IntPtrOutput)
}

// Specifies the node IDs that needs to be scaled down.
//
// <a name="Css_master_or_client_volume"></a>
// The `volume` block supports:
func (o ClusterColdNodeConfigPtrOutput) ShrinkNodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterColdNodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.ShrinkNodeIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterColdNodeConfigPtrOutput) Volume() ClusterColdNodeConfigVolumePtrOutput {
	return o.ApplyT(func(v *ClusterColdNodeConfig) *ClusterColdNodeConfigVolume {
		if v == nil {
			return nil
		}
		return v.Volume
	}).(ClusterColdNodeConfigVolumePtrOutput)
}

type ClusterColdNodeConfigVolume struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size int `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType string `pulumi:"volumeType"`
}

// ClusterColdNodeConfigVolumeInput is an input type that accepts ClusterColdNodeConfigVolumeArgs and ClusterColdNodeConfigVolumeOutput values.
// You can construct a concrete instance of `ClusterColdNodeConfigVolumeInput` via:
//
//	ClusterColdNodeConfigVolumeArgs{...}
type ClusterColdNodeConfigVolumeInput interface {
	pulumi.Input

	ToClusterColdNodeConfigVolumeOutput() ClusterColdNodeConfigVolumeOutput
	ToClusterColdNodeConfigVolumeOutputWithContext(context.Context) ClusterColdNodeConfigVolumeOutput
}

type ClusterColdNodeConfigVolumeArgs struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (ClusterColdNodeConfigVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterColdNodeConfigVolume)(nil)).Elem()
}

func (i ClusterColdNodeConfigVolumeArgs) ToClusterColdNodeConfigVolumeOutput() ClusterColdNodeConfigVolumeOutput {
	return i.ToClusterColdNodeConfigVolumeOutputWithContext(context.Background())
}

func (i ClusterColdNodeConfigVolumeArgs) ToClusterColdNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterColdNodeConfigVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterColdNodeConfigVolumeOutput)
}

func (i ClusterColdNodeConfigVolumeArgs) ToClusterColdNodeConfigVolumePtrOutput() ClusterColdNodeConfigVolumePtrOutput {
	return i.ToClusterColdNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i ClusterColdNodeConfigVolumeArgs) ToClusterColdNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterColdNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterColdNodeConfigVolumeOutput).ToClusterColdNodeConfigVolumePtrOutputWithContext(ctx)
}

// ClusterColdNodeConfigVolumePtrInput is an input type that accepts ClusterColdNodeConfigVolumeArgs, ClusterColdNodeConfigVolumePtr and ClusterColdNodeConfigVolumePtrOutput values.
// You can construct a concrete instance of `ClusterColdNodeConfigVolumePtrInput` via:
//
//	        ClusterColdNodeConfigVolumeArgs{...}
//
//	or:
//
//	        nil
type ClusterColdNodeConfigVolumePtrInput interface {
	pulumi.Input

	ToClusterColdNodeConfigVolumePtrOutput() ClusterColdNodeConfigVolumePtrOutput
	ToClusterColdNodeConfigVolumePtrOutputWithContext(context.Context) ClusterColdNodeConfigVolumePtrOutput
}

type clusterColdNodeConfigVolumePtrType ClusterColdNodeConfigVolumeArgs

func ClusterColdNodeConfigVolumePtr(v *ClusterColdNodeConfigVolumeArgs) ClusterColdNodeConfigVolumePtrInput {
	return (*clusterColdNodeConfigVolumePtrType)(v)
}

func (*clusterColdNodeConfigVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterColdNodeConfigVolume)(nil)).Elem()
}

func (i *clusterColdNodeConfigVolumePtrType) ToClusterColdNodeConfigVolumePtrOutput() ClusterColdNodeConfigVolumePtrOutput {
	return i.ToClusterColdNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i *clusterColdNodeConfigVolumePtrType) ToClusterColdNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterColdNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterColdNodeConfigVolumePtrOutput)
}

type ClusterColdNodeConfigVolumeOutput struct{ *pulumi.OutputState }

func (ClusterColdNodeConfigVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterColdNodeConfigVolume)(nil)).Elem()
}

func (o ClusterColdNodeConfigVolumeOutput) ToClusterColdNodeConfigVolumeOutput() ClusterColdNodeConfigVolumeOutput {
	return o
}

func (o ClusterColdNodeConfigVolumeOutput) ToClusterColdNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterColdNodeConfigVolumeOutput {
	return o
}

func (o ClusterColdNodeConfigVolumeOutput) ToClusterColdNodeConfigVolumePtrOutput() ClusterColdNodeConfigVolumePtrOutput {
	return o.ToClusterColdNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (o ClusterColdNodeConfigVolumeOutput) ToClusterColdNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterColdNodeConfigVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterColdNodeConfigVolume) *ClusterColdNodeConfigVolume {
		return &v
	}).(ClusterColdNodeConfigVolumePtrOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterColdNodeConfigVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterColdNodeConfigVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterColdNodeConfigVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterColdNodeConfigVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type ClusterColdNodeConfigVolumePtrOutput struct{ *pulumi.OutputState }

func (ClusterColdNodeConfigVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterColdNodeConfigVolume)(nil)).Elem()
}

func (o ClusterColdNodeConfigVolumePtrOutput) ToClusterColdNodeConfigVolumePtrOutput() ClusterColdNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterColdNodeConfigVolumePtrOutput) ToClusterColdNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterColdNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterColdNodeConfigVolumePtrOutput) Elem() ClusterColdNodeConfigVolumeOutput {
	return o.ApplyT(func(v *ClusterColdNodeConfigVolume) ClusterColdNodeConfigVolume {
		if v != nil {
			return *v
		}
		var ret ClusterColdNodeConfigVolume
		return ret
	}).(ClusterColdNodeConfigVolumeOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterColdNodeConfigVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterColdNodeConfigVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterColdNodeConfigVolumePtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterColdNodeConfigVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type ClusterEssNodeConfig struct {
	// Specifies the flavor name.
	Flavor string `pulumi:"flavor"`
	// Specifies the number of cluster instances.
	// + When it is `masterNodeConfig`, The value range is `3` to `10`.
	// + When it is `clientNodeConfig`, The value range is `1` to `32`.
	InstanceNumber int `pulumi:"instanceNumber"`
	// Specifies the node IDs that needs to be scaled down.
	//
	// <a name="Css_master_or_client_volume"></a>
	// The `volume` block supports:
	ShrinkNodeIds []string `pulumi:"shrinkNodeIds"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume *ClusterEssNodeConfigVolume `pulumi:"volume"`
}

// ClusterEssNodeConfigInput is an input type that accepts ClusterEssNodeConfigArgs and ClusterEssNodeConfigOutput values.
// You can construct a concrete instance of `ClusterEssNodeConfigInput` via:
//
//	ClusterEssNodeConfigArgs{...}
type ClusterEssNodeConfigInput interface {
	pulumi.Input

	ToClusterEssNodeConfigOutput() ClusterEssNodeConfigOutput
	ToClusterEssNodeConfigOutputWithContext(context.Context) ClusterEssNodeConfigOutput
}

type ClusterEssNodeConfigArgs struct {
	// Specifies the flavor name.
	Flavor pulumi.StringInput `pulumi:"flavor"`
	// Specifies the number of cluster instances.
	// + When it is `masterNodeConfig`, The value range is `3` to `10`.
	// + When it is `clientNodeConfig`, The value range is `1` to `32`.
	InstanceNumber pulumi.IntInput `pulumi:"instanceNumber"`
	// Specifies the node IDs that needs to be scaled down.
	//
	// <a name="Css_master_or_client_volume"></a>
	// The `volume` block supports:
	ShrinkNodeIds pulumi.StringArrayInput `pulumi:"shrinkNodeIds"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume ClusterEssNodeConfigVolumePtrInput `pulumi:"volume"`
}

func (ClusterEssNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEssNodeConfig)(nil)).Elem()
}

func (i ClusterEssNodeConfigArgs) ToClusterEssNodeConfigOutput() ClusterEssNodeConfigOutput {
	return i.ToClusterEssNodeConfigOutputWithContext(context.Background())
}

func (i ClusterEssNodeConfigArgs) ToClusterEssNodeConfigOutputWithContext(ctx context.Context) ClusterEssNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEssNodeConfigOutput)
}

func (i ClusterEssNodeConfigArgs) ToClusterEssNodeConfigPtrOutput() ClusterEssNodeConfigPtrOutput {
	return i.ToClusterEssNodeConfigPtrOutputWithContext(context.Background())
}

func (i ClusterEssNodeConfigArgs) ToClusterEssNodeConfigPtrOutputWithContext(ctx context.Context) ClusterEssNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEssNodeConfigOutput).ToClusterEssNodeConfigPtrOutputWithContext(ctx)
}

// ClusterEssNodeConfigPtrInput is an input type that accepts ClusterEssNodeConfigArgs, ClusterEssNodeConfigPtr and ClusterEssNodeConfigPtrOutput values.
// You can construct a concrete instance of `ClusterEssNodeConfigPtrInput` via:
//
//	        ClusterEssNodeConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterEssNodeConfigPtrInput interface {
	pulumi.Input

	ToClusterEssNodeConfigPtrOutput() ClusterEssNodeConfigPtrOutput
	ToClusterEssNodeConfigPtrOutputWithContext(context.Context) ClusterEssNodeConfigPtrOutput
}

type clusterEssNodeConfigPtrType ClusterEssNodeConfigArgs

func ClusterEssNodeConfigPtr(v *ClusterEssNodeConfigArgs) ClusterEssNodeConfigPtrInput {
	return (*clusterEssNodeConfigPtrType)(v)
}

func (*clusterEssNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEssNodeConfig)(nil)).Elem()
}

func (i *clusterEssNodeConfigPtrType) ToClusterEssNodeConfigPtrOutput() ClusterEssNodeConfigPtrOutput {
	return i.ToClusterEssNodeConfigPtrOutputWithContext(context.Background())
}

func (i *clusterEssNodeConfigPtrType) ToClusterEssNodeConfigPtrOutputWithContext(ctx context.Context) ClusterEssNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEssNodeConfigPtrOutput)
}

type ClusterEssNodeConfigOutput struct{ *pulumi.OutputState }

func (ClusterEssNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEssNodeConfig)(nil)).Elem()
}

func (o ClusterEssNodeConfigOutput) ToClusterEssNodeConfigOutput() ClusterEssNodeConfigOutput {
	return o
}

func (o ClusterEssNodeConfigOutput) ToClusterEssNodeConfigOutputWithContext(ctx context.Context) ClusterEssNodeConfigOutput {
	return o
}

func (o ClusterEssNodeConfigOutput) ToClusterEssNodeConfigPtrOutput() ClusterEssNodeConfigPtrOutput {
	return o.ToClusterEssNodeConfigPtrOutputWithContext(context.Background())
}

func (o ClusterEssNodeConfigOutput) ToClusterEssNodeConfigPtrOutputWithContext(ctx context.Context) ClusterEssNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEssNodeConfig) *ClusterEssNodeConfig {
		return &v
	}).(ClusterEssNodeConfigPtrOutput)
}

// Specifies the flavor name.
func (o ClusterEssNodeConfigOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterEssNodeConfig) string { return v.Flavor }).(pulumi.StringOutput)
}

// Specifies the number of cluster instances.
// + When it is `masterNodeConfig`, The value range is `3` to `10`.
// + When it is `clientNodeConfig`, The value range is `1` to `32`.
func (o ClusterEssNodeConfigOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterEssNodeConfig) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// Specifies the node IDs that needs to be scaled down.
//
// <a name="Css_master_or_client_volume"></a>
// The `volume` block supports:
func (o ClusterEssNodeConfigOutput) ShrinkNodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterEssNodeConfig) []string { return v.ShrinkNodeIds }).(pulumi.StringArrayOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterEssNodeConfigOutput) Volume() ClusterEssNodeConfigVolumePtrOutput {
	return o.ApplyT(func(v ClusterEssNodeConfig) *ClusterEssNodeConfigVolume { return v.Volume }).(ClusterEssNodeConfigVolumePtrOutput)
}

type ClusterEssNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterEssNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEssNodeConfig)(nil)).Elem()
}

func (o ClusterEssNodeConfigPtrOutput) ToClusterEssNodeConfigPtrOutput() ClusterEssNodeConfigPtrOutput {
	return o
}

func (o ClusterEssNodeConfigPtrOutput) ToClusterEssNodeConfigPtrOutputWithContext(ctx context.Context) ClusterEssNodeConfigPtrOutput {
	return o
}

func (o ClusterEssNodeConfigPtrOutput) Elem() ClusterEssNodeConfigOutput {
	return o.ApplyT(func(v *ClusterEssNodeConfig) ClusterEssNodeConfig {
		if v != nil {
			return *v
		}
		var ret ClusterEssNodeConfig
		return ret
	}).(ClusterEssNodeConfigOutput)
}

// Specifies the flavor name.
func (o ClusterEssNodeConfigPtrOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterEssNodeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Flavor
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of cluster instances.
// + When it is `masterNodeConfig`, The value range is `3` to `10`.
// + When it is `clientNodeConfig`, The value range is `1` to `32`.
func (o ClusterEssNodeConfigPtrOutput) InstanceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterEssNodeConfig) *int {
		if v == nil {
			return nil
		}
		return &v.InstanceNumber
	}).(pulumi.IntPtrOutput)
}

// Specifies the node IDs that needs to be scaled down.
//
// <a name="Css_master_or_client_volume"></a>
// The `volume` block supports:
func (o ClusterEssNodeConfigPtrOutput) ShrinkNodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterEssNodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.ShrinkNodeIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterEssNodeConfigPtrOutput) Volume() ClusterEssNodeConfigVolumePtrOutput {
	return o.ApplyT(func(v *ClusterEssNodeConfig) *ClusterEssNodeConfigVolume {
		if v == nil {
			return nil
		}
		return v.Volume
	}).(ClusterEssNodeConfigVolumePtrOutput)
}

type ClusterEssNodeConfigVolume struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size int `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType string `pulumi:"volumeType"`
}

// ClusterEssNodeConfigVolumeInput is an input type that accepts ClusterEssNodeConfigVolumeArgs and ClusterEssNodeConfigVolumeOutput values.
// You can construct a concrete instance of `ClusterEssNodeConfigVolumeInput` via:
//
//	ClusterEssNodeConfigVolumeArgs{...}
type ClusterEssNodeConfigVolumeInput interface {
	pulumi.Input

	ToClusterEssNodeConfigVolumeOutput() ClusterEssNodeConfigVolumeOutput
	ToClusterEssNodeConfigVolumeOutputWithContext(context.Context) ClusterEssNodeConfigVolumeOutput
}

type ClusterEssNodeConfigVolumeArgs struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (ClusterEssNodeConfigVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEssNodeConfigVolume)(nil)).Elem()
}

func (i ClusterEssNodeConfigVolumeArgs) ToClusterEssNodeConfigVolumeOutput() ClusterEssNodeConfigVolumeOutput {
	return i.ToClusterEssNodeConfigVolumeOutputWithContext(context.Background())
}

func (i ClusterEssNodeConfigVolumeArgs) ToClusterEssNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterEssNodeConfigVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEssNodeConfigVolumeOutput)
}

func (i ClusterEssNodeConfigVolumeArgs) ToClusterEssNodeConfigVolumePtrOutput() ClusterEssNodeConfigVolumePtrOutput {
	return i.ToClusterEssNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i ClusterEssNodeConfigVolumeArgs) ToClusterEssNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterEssNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEssNodeConfigVolumeOutput).ToClusterEssNodeConfigVolumePtrOutputWithContext(ctx)
}

// ClusterEssNodeConfigVolumePtrInput is an input type that accepts ClusterEssNodeConfigVolumeArgs, ClusterEssNodeConfigVolumePtr and ClusterEssNodeConfigVolumePtrOutput values.
// You can construct a concrete instance of `ClusterEssNodeConfigVolumePtrInput` via:
//
//	        ClusterEssNodeConfigVolumeArgs{...}
//
//	or:
//
//	        nil
type ClusterEssNodeConfigVolumePtrInput interface {
	pulumi.Input

	ToClusterEssNodeConfigVolumePtrOutput() ClusterEssNodeConfigVolumePtrOutput
	ToClusterEssNodeConfigVolumePtrOutputWithContext(context.Context) ClusterEssNodeConfigVolumePtrOutput
}

type clusterEssNodeConfigVolumePtrType ClusterEssNodeConfigVolumeArgs

func ClusterEssNodeConfigVolumePtr(v *ClusterEssNodeConfigVolumeArgs) ClusterEssNodeConfigVolumePtrInput {
	return (*clusterEssNodeConfigVolumePtrType)(v)
}

func (*clusterEssNodeConfigVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEssNodeConfigVolume)(nil)).Elem()
}

func (i *clusterEssNodeConfigVolumePtrType) ToClusterEssNodeConfigVolumePtrOutput() ClusterEssNodeConfigVolumePtrOutput {
	return i.ToClusterEssNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i *clusterEssNodeConfigVolumePtrType) ToClusterEssNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterEssNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterEssNodeConfigVolumePtrOutput)
}

type ClusterEssNodeConfigVolumeOutput struct{ *pulumi.OutputState }

func (ClusterEssNodeConfigVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterEssNodeConfigVolume)(nil)).Elem()
}

func (o ClusterEssNodeConfigVolumeOutput) ToClusterEssNodeConfigVolumeOutput() ClusterEssNodeConfigVolumeOutput {
	return o
}

func (o ClusterEssNodeConfigVolumeOutput) ToClusterEssNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterEssNodeConfigVolumeOutput {
	return o
}

func (o ClusterEssNodeConfigVolumeOutput) ToClusterEssNodeConfigVolumePtrOutput() ClusterEssNodeConfigVolumePtrOutput {
	return o.ToClusterEssNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (o ClusterEssNodeConfigVolumeOutput) ToClusterEssNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterEssNodeConfigVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterEssNodeConfigVolume) *ClusterEssNodeConfigVolume {
		return &v
	}).(ClusterEssNodeConfigVolumePtrOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterEssNodeConfigVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterEssNodeConfigVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterEssNodeConfigVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterEssNodeConfigVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type ClusterEssNodeConfigVolumePtrOutput struct{ *pulumi.OutputState }

func (ClusterEssNodeConfigVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterEssNodeConfigVolume)(nil)).Elem()
}

func (o ClusterEssNodeConfigVolumePtrOutput) ToClusterEssNodeConfigVolumePtrOutput() ClusterEssNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterEssNodeConfigVolumePtrOutput) ToClusterEssNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterEssNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterEssNodeConfigVolumePtrOutput) Elem() ClusterEssNodeConfigVolumeOutput {
	return o.ApplyT(func(v *ClusterEssNodeConfigVolume) ClusterEssNodeConfigVolume {
		if v != nil {
			return *v
		}
		var ret ClusterEssNodeConfigVolume
		return ret
	}).(ClusterEssNodeConfigVolumeOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterEssNodeConfigVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterEssNodeConfigVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterEssNodeConfigVolumePtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterEssNodeConfigVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type ClusterKibanaPublicAccess struct {
	// Specifies the public network bandwidth.
	Bandwidth int     `pulumi:"bandwidth"`
	PublicIp  *string `pulumi:"publicIp"`
	// Specifies the whitelist of access control. The whitelisted account id must be unique.
	Whitelist *string `pulumi:"whitelist"`
	// Specifies whether to enable the public network access control.
	WhitelistEnabled bool `pulumi:"whitelistEnabled"`
}

// ClusterKibanaPublicAccessInput is an input type that accepts ClusterKibanaPublicAccessArgs and ClusterKibanaPublicAccessOutput values.
// You can construct a concrete instance of `ClusterKibanaPublicAccessInput` via:
//
//	ClusterKibanaPublicAccessArgs{...}
type ClusterKibanaPublicAccessInput interface {
	pulumi.Input

	ToClusterKibanaPublicAccessOutput() ClusterKibanaPublicAccessOutput
	ToClusterKibanaPublicAccessOutputWithContext(context.Context) ClusterKibanaPublicAccessOutput
}

type ClusterKibanaPublicAccessArgs struct {
	// Specifies the public network bandwidth.
	Bandwidth pulumi.IntInput       `pulumi:"bandwidth"`
	PublicIp  pulumi.StringPtrInput `pulumi:"publicIp"`
	// Specifies the whitelist of access control. The whitelisted account id must be unique.
	Whitelist pulumi.StringPtrInput `pulumi:"whitelist"`
	// Specifies whether to enable the public network access control.
	WhitelistEnabled pulumi.BoolInput `pulumi:"whitelistEnabled"`
}

func (ClusterKibanaPublicAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKibanaPublicAccess)(nil)).Elem()
}

func (i ClusterKibanaPublicAccessArgs) ToClusterKibanaPublicAccessOutput() ClusterKibanaPublicAccessOutput {
	return i.ToClusterKibanaPublicAccessOutputWithContext(context.Background())
}

func (i ClusterKibanaPublicAccessArgs) ToClusterKibanaPublicAccessOutputWithContext(ctx context.Context) ClusterKibanaPublicAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKibanaPublicAccessOutput)
}

func (i ClusterKibanaPublicAccessArgs) ToClusterKibanaPublicAccessPtrOutput() ClusterKibanaPublicAccessPtrOutput {
	return i.ToClusterKibanaPublicAccessPtrOutputWithContext(context.Background())
}

func (i ClusterKibanaPublicAccessArgs) ToClusterKibanaPublicAccessPtrOutputWithContext(ctx context.Context) ClusterKibanaPublicAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKibanaPublicAccessOutput).ToClusterKibanaPublicAccessPtrOutputWithContext(ctx)
}

// ClusterKibanaPublicAccessPtrInput is an input type that accepts ClusterKibanaPublicAccessArgs, ClusterKibanaPublicAccessPtr and ClusterKibanaPublicAccessPtrOutput values.
// You can construct a concrete instance of `ClusterKibanaPublicAccessPtrInput` via:
//
//	        ClusterKibanaPublicAccessArgs{...}
//
//	or:
//
//	        nil
type ClusterKibanaPublicAccessPtrInput interface {
	pulumi.Input

	ToClusterKibanaPublicAccessPtrOutput() ClusterKibanaPublicAccessPtrOutput
	ToClusterKibanaPublicAccessPtrOutputWithContext(context.Context) ClusterKibanaPublicAccessPtrOutput
}

type clusterKibanaPublicAccessPtrType ClusterKibanaPublicAccessArgs

func ClusterKibanaPublicAccessPtr(v *ClusterKibanaPublicAccessArgs) ClusterKibanaPublicAccessPtrInput {
	return (*clusterKibanaPublicAccessPtrType)(v)
}

func (*clusterKibanaPublicAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterKibanaPublicAccess)(nil)).Elem()
}

func (i *clusterKibanaPublicAccessPtrType) ToClusterKibanaPublicAccessPtrOutput() ClusterKibanaPublicAccessPtrOutput {
	return i.ToClusterKibanaPublicAccessPtrOutputWithContext(context.Background())
}

func (i *clusterKibanaPublicAccessPtrType) ToClusterKibanaPublicAccessPtrOutputWithContext(ctx context.Context) ClusterKibanaPublicAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterKibanaPublicAccessPtrOutput)
}

type ClusterKibanaPublicAccessOutput struct{ *pulumi.OutputState }

func (ClusterKibanaPublicAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterKibanaPublicAccess)(nil)).Elem()
}

func (o ClusterKibanaPublicAccessOutput) ToClusterKibanaPublicAccessOutput() ClusterKibanaPublicAccessOutput {
	return o
}

func (o ClusterKibanaPublicAccessOutput) ToClusterKibanaPublicAccessOutputWithContext(ctx context.Context) ClusterKibanaPublicAccessOutput {
	return o
}

func (o ClusterKibanaPublicAccessOutput) ToClusterKibanaPublicAccessPtrOutput() ClusterKibanaPublicAccessPtrOutput {
	return o.ToClusterKibanaPublicAccessPtrOutputWithContext(context.Background())
}

func (o ClusterKibanaPublicAccessOutput) ToClusterKibanaPublicAccessPtrOutputWithContext(ctx context.Context) ClusterKibanaPublicAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterKibanaPublicAccess) *ClusterKibanaPublicAccess {
		return &v
	}).(ClusterKibanaPublicAccessPtrOutput)
}

// Specifies the public network bandwidth.
func (o ClusterKibanaPublicAccessOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterKibanaPublicAccess) int { return v.Bandwidth }).(pulumi.IntOutput)
}

func (o ClusterKibanaPublicAccessOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKibanaPublicAccess) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

// Specifies the whitelist of access control. The whitelisted account id must be unique.
func (o ClusterKibanaPublicAccessOutput) Whitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterKibanaPublicAccess) *string { return v.Whitelist }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the public network access control.
func (o ClusterKibanaPublicAccessOutput) WhitelistEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterKibanaPublicAccess) bool { return v.WhitelistEnabled }).(pulumi.BoolOutput)
}

type ClusterKibanaPublicAccessPtrOutput struct{ *pulumi.OutputState }

func (ClusterKibanaPublicAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterKibanaPublicAccess)(nil)).Elem()
}

func (o ClusterKibanaPublicAccessPtrOutput) ToClusterKibanaPublicAccessPtrOutput() ClusterKibanaPublicAccessPtrOutput {
	return o
}

func (o ClusterKibanaPublicAccessPtrOutput) ToClusterKibanaPublicAccessPtrOutputWithContext(ctx context.Context) ClusterKibanaPublicAccessPtrOutput {
	return o
}

func (o ClusterKibanaPublicAccessPtrOutput) Elem() ClusterKibanaPublicAccessOutput {
	return o.ApplyT(func(v *ClusterKibanaPublicAccess) ClusterKibanaPublicAccess {
		if v != nil {
			return *v
		}
		var ret ClusterKibanaPublicAccess
		return ret
	}).(ClusterKibanaPublicAccessOutput)
}

// Specifies the public network bandwidth.
func (o ClusterKibanaPublicAccessPtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterKibanaPublicAccess) *int {
		if v == nil {
			return nil
		}
		return &v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

func (o ClusterKibanaPublicAccessPtrOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKibanaPublicAccess) *string {
		if v == nil {
			return nil
		}
		return v.PublicIp
	}).(pulumi.StringPtrOutput)
}

// Specifies the whitelist of access control. The whitelisted account id must be unique.
func (o ClusterKibanaPublicAccessPtrOutput) Whitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterKibanaPublicAccess) *string {
		if v == nil {
			return nil
		}
		return v.Whitelist
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the public network access control.
func (o ClusterKibanaPublicAccessPtrOutput) WhitelistEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterKibanaPublicAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.WhitelistEnabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterMasterNodeConfig struct {
	// Specifies the flavor name.
	Flavor string `pulumi:"flavor"`
	// Specifies the number of cluster instances.
	// + When it is `masterNodeConfig`, The value range is `3` to `10`.
	// + When it is `clientNodeConfig`, The value range is `1` to `32`.
	InstanceNumber int `pulumi:"instanceNumber"`
	// Specifies the node IDs that needs to be scaled down.
	//
	// <a name="Css_master_or_client_volume"></a>
	// The `volume` block supports:
	ShrinkNodeIds []string `pulumi:"shrinkNodeIds"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume ClusterMasterNodeConfigVolume `pulumi:"volume"`
}

// ClusterMasterNodeConfigInput is an input type that accepts ClusterMasterNodeConfigArgs and ClusterMasterNodeConfigOutput values.
// You can construct a concrete instance of `ClusterMasterNodeConfigInput` via:
//
//	ClusterMasterNodeConfigArgs{...}
type ClusterMasterNodeConfigInput interface {
	pulumi.Input

	ToClusterMasterNodeConfigOutput() ClusterMasterNodeConfigOutput
	ToClusterMasterNodeConfigOutputWithContext(context.Context) ClusterMasterNodeConfigOutput
}

type ClusterMasterNodeConfigArgs struct {
	// Specifies the flavor name.
	Flavor pulumi.StringInput `pulumi:"flavor"`
	// Specifies the number of cluster instances.
	// + When it is `masterNodeConfig`, The value range is `3` to `10`.
	// + When it is `clientNodeConfig`, The value range is `1` to `32`.
	InstanceNumber pulumi.IntInput `pulumi:"instanceNumber"`
	// Specifies the node IDs that needs to be scaled down.
	//
	// <a name="Css_master_or_client_volume"></a>
	// The `volume` block supports:
	ShrinkNodeIds pulumi.StringArrayInput `pulumi:"shrinkNodeIds"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume ClusterMasterNodeConfigVolumeInput `pulumi:"volume"`
}

func (ClusterMasterNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterNodeConfig)(nil)).Elem()
}

func (i ClusterMasterNodeConfigArgs) ToClusterMasterNodeConfigOutput() ClusterMasterNodeConfigOutput {
	return i.ToClusterMasterNodeConfigOutputWithContext(context.Background())
}

func (i ClusterMasterNodeConfigArgs) ToClusterMasterNodeConfigOutputWithContext(ctx context.Context) ClusterMasterNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterNodeConfigOutput)
}

func (i ClusterMasterNodeConfigArgs) ToClusterMasterNodeConfigPtrOutput() ClusterMasterNodeConfigPtrOutput {
	return i.ToClusterMasterNodeConfigPtrOutputWithContext(context.Background())
}

func (i ClusterMasterNodeConfigArgs) ToClusterMasterNodeConfigPtrOutputWithContext(ctx context.Context) ClusterMasterNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterNodeConfigOutput).ToClusterMasterNodeConfigPtrOutputWithContext(ctx)
}

// ClusterMasterNodeConfigPtrInput is an input type that accepts ClusterMasterNodeConfigArgs, ClusterMasterNodeConfigPtr and ClusterMasterNodeConfigPtrOutput values.
// You can construct a concrete instance of `ClusterMasterNodeConfigPtrInput` via:
//
//	        ClusterMasterNodeConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterMasterNodeConfigPtrInput interface {
	pulumi.Input

	ToClusterMasterNodeConfigPtrOutput() ClusterMasterNodeConfigPtrOutput
	ToClusterMasterNodeConfigPtrOutputWithContext(context.Context) ClusterMasterNodeConfigPtrOutput
}

type clusterMasterNodeConfigPtrType ClusterMasterNodeConfigArgs

func ClusterMasterNodeConfigPtr(v *ClusterMasterNodeConfigArgs) ClusterMasterNodeConfigPtrInput {
	return (*clusterMasterNodeConfigPtrType)(v)
}

func (*clusterMasterNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMasterNodeConfig)(nil)).Elem()
}

func (i *clusterMasterNodeConfigPtrType) ToClusterMasterNodeConfigPtrOutput() ClusterMasterNodeConfigPtrOutput {
	return i.ToClusterMasterNodeConfigPtrOutputWithContext(context.Background())
}

func (i *clusterMasterNodeConfigPtrType) ToClusterMasterNodeConfigPtrOutputWithContext(ctx context.Context) ClusterMasterNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterNodeConfigPtrOutput)
}

type ClusterMasterNodeConfigOutput struct{ *pulumi.OutputState }

func (ClusterMasterNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterNodeConfig)(nil)).Elem()
}

func (o ClusterMasterNodeConfigOutput) ToClusterMasterNodeConfigOutput() ClusterMasterNodeConfigOutput {
	return o
}

func (o ClusterMasterNodeConfigOutput) ToClusterMasterNodeConfigOutputWithContext(ctx context.Context) ClusterMasterNodeConfigOutput {
	return o
}

func (o ClusterMasterNodeConfigOutput) ToClusterMasterNodeConfigPtrOutput() ClusterMasterNodeConfigPtrOutput {
	return o.ToClusterMasterNodeConfigPtrOutputWithContext(context.Background())
}

func (o ClusterMasterNodeConfigOutput) ToClusterMasterNodeConfigPtrOutputWithContext(ctx context.Context) ClusterMasterNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterMasterNodeConfig) *ClusterMasterNodeConfig {
		return &v
	}).(ClusterMasterNodeConfigPtrOutput)
}

// Specifies the flavor name.
func (o ClusterMasterNodeConfigOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMasterNodeConfig) string { return v.Flavor }).(pulumi.StringOutput)
}

// Specifies the number of cluster instances.
// + When it is `masterNodeConfig`, The value range is `3` to `10`.
// + When it is `clientNodeConfig`, The value range is `1` to `32`.
func (o ClusterMasterNodeConfigOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterMasterNodeConfig) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// Specifies the node IDs that needs to be scaled down.
//
// <a name="Css_master_or_client_volume"></a>
// The `volume` block supports:
func (o ClusterMasterNodeConfigOutput) ShrinkNodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterMasterNodeConfig) []string { return v.ShrinkNodeIds }).(pulumi.StringArrayOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterMasterNodeConfigOutput) Volume() ClusterMasterNodeConfigVolumeOutput {
	return o.ApplyT(func(v ClusterMasterNodeConfig) ClusterMasterNodeConfigVolume { return v.Volume }).(ClusterMasterNodeConfigVolumeOutput)
}

type ClusterMasterNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterMasterNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMasterNodeConfig)(nil)).Elem()
}

func (o ClusterMasterNodeConfigPtrOutput) ToClusterMasterNodeConfigPtrOutput() ClusterMasterNodeConfigPtrOutput {
	return o
}

func (o ClusterMasterNodeConfigPtrOutput) ToClusterMasterNodeConfigPtrOutputWithContext(ctx context.Context) ClusterMasterNodeConfigPtrOutput {
	return o
}

func (o ClusterMasterNodeConfigPtrOutput) Elem() ClusterMasterNodeConfigOutput {
	return o.ApplyT(func(v *ClusterMasterNodeConfig) ClusterMasterNodeConfig {
		if v != nil {
			return *v
		}
		var ret ClusterMasterNodeConfig
		return ret
	}).(ClusterMasterNodeConfigOutput)
}

// Specifies the flavor name.
func (o ClusterMasterNodeConfigPtrOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterMasterNodeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Flavor
	}).(pulumi.StringPtrOutput)
}

// Specifies the number of cluster instances.
// + When it is `masterNodeConfig`, The value range is `3` to `10`.
// + When it is `clientNodeConfig`, The value range is `1` to `32`.
func (o ClusterMasterNodeConfigPtrOutput) InstanceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterMasterNodeConfig) *int {
		if v == nil {
			return nil
		}
		return &v.InstanceNumber
	}).(pulumi.IntPtrOutput)
}

// Specifies the node IDs that needs to be scaled down.
//
// <a name="Css_master_or_client_volume"></a>
// The `volume` block supports:
func (o ClusterMasterNodeConfigPtrOutput) ShrinkNodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterMasterNodeConfig) []string {
		if v == nil {
			return nil
		}
		return v.ShrinkNodeIds
	}).(pulumi.StringArrayOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterMasterNodeConfigPtrOutput) Volume() ClusterMasterNodeConfigVolumePtrOutput {
	return o.ApplyT(func(v *ClusterMasterNodeConfig) *ClusterMasterNodeConfigVolume {
		if v == nil {
			return nil
		}
		return &v.Volume
	}).(ClusterMasterNodeConfigVolumePtrOutput)
}

type ClusterMasterNodeConfigVolume struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size int `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType string `pulumi:"volumeType"`
}

// ClusterMasterNodeConfigVolumeInput is an input type that accepts ClusterMasterNodeConfigVolumeArgs and ClusterMasterNodeConfigVolumeOutput values.
// You can construct a concrete instance of `ClusterMasterNodeConfigVolumeInput` via:
//
//	ClusterMasterNodeConfigVolumeArgs{...}
type ClusterMasterNodeConfigVolumeInput interface {
	pulumi.Input

	ToClusterMasterNodeConfigVolumeOutput() ClusterMasterNodeConfigVolumeOutput
	ToClusterMasterNodeConfigVolumeOutputWithContext(context.Context) ClusterMasterNodeConfigVolumeOutput
}

type ClusterMasterNodeConfigVolumeArgs struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (ClusterMasterNodeConfigVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterNodeConfigVolume)(nil)).Elem()
}

func (i ClusterMasterNodeConfigVolumeArgs) ToClusterMasterNodeConfigVolumeOutput() ClusterMasterNodeConfigVolumeOutput {
	return i.ToClusterMasterNodeConfigVolumeOutputWithContext(context.Background())
}

func (i ClusterMasterNodeConfigVolumeArgs) ToClusterMasterNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterMasterNodeConfigVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterNodeConfigVolumeOutput)
}

func (i ClusterMasterNodeConfigVolumeArgs) ToClusterMasterNodeConfigVolumePtrOutput() ClusterMasterNodeConfigVolumePtrOutput {
	return i.ToClusterMasterNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i ClusterMasterNodeConfigVolumeArgs) ToClusterMasterNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterMasterNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterNodeConfigVolumeOutput).ToClusterMasterNodeConfigVolumePtrOutputWithContext(ctx)
}

// ClusterMasterNodeConfigVolumePtrInput is an input type that accepts ClusterMasterNodeConfigVolumeArgs, ClusterMasterNodeConfigVolumePtr and ClusterMasterNodeConfigVolumePtrOutput values.
// You can construct a concrete instance of `ClusterMasterNodeConfigVolumePtrInput` via:
//
//	        ClusterMasterNodeConfigVolumeArgs{...}
//
//	or:
//
//	        nil
type ClusterMasterNodeConfigVolumePtrInput interface {
	pulumi.Input

	ToClusterMasterNodeConfigVolumePtrOutput() ClusterMasterNodeConfigVolumePtrOutput
	ToClusterMasterNodeConfigVolumePtrOutputWithContext(context.Context) ClusterMasterNodeConfigVolumePtrOutput
}

type clusterMasterNodeConfigVolumePtrType ClusterMasterNodeConfigVolumeArgs

func ClusterMasterNodeConfigVolumePtr(v *ClusterMasterNodeConfigVolumeArgs) ClusterMasterNodeConfigVolumePtrInput {
	return (*clusterMasterNodeConfigVolumePtrType)(v)
}

func (*clusterMasterNodeConfigVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMasterNodeConfigVolume)(nil)).Elem()
}

func (i *clusterMasterNodeConfigVolumePtrType) ToClusterMasterNodeConfigVolumePtrOutput() ClusterMasterNodeConfigVolumePtrOutput {
	return i.ToClusterMasterNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i *clusterMasterNodeConfigVolumePtrType) ToClusterMasterNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterMasterNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMasterNodeConfigVolumePtrOutput)
}

type ClusterMasterNodeConfigVolumeOutput struct{ *pulumi.OutputState }

func (ClusterMasterNodeConfigVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMasterNodeConfigVolume)(nil)).Elem()
}

func (o ClusterMasterNodeConfigVolumeOutput) ToClusterMasterNodeConfigVolumeOutput() ClusterMasterNodeConfigVolumeOutput {
	return o
}

func (o ClusterMasterNodeConfigVolumeOutput) ToClusterMasterNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterMasterNodeConfigVolumeOutput {
	return o
}

func (o ClusterMasterNodeConfigVolumeOutput) ToClusterMasterNodeConfigVolumePtrOutput() ClusterMasterNodeConfigVolumePtrOutput {
	return o.ToClusterMasterNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (o ClusterMasterNodeConfigVolumeOutput) ToClusterMasterNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterMasterNodeConfigVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterMasterNodeConfigVolume) *ClusterMasterNodeConfigVolume {
		return &v
	}).(ClusterMasterNodeConfigVolumePtrOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterMasterNodeConfigVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterMasterNodeConfigVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterMasterNodeConfigVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterMasterNodeConfigVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type ClusterMasterNodeConfigVolumePtrOutput struct{ *pulumi.OutputState }

func (ClusterMasterNodeConfigVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterMasterNodeConfigVolume)(nil)).Elem()
}

func (o ClusterMasterNodeConfigVolumePtrOutput) ToClusterMasterNodeConfigVolumePtrOutput() ClusterMasterNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterMasterNodeConfigVolumePtrOutput) ToClusterMasterNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterMasterNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterMasterNodeConfigVolumePtrOutput) Elem() ClusterMasterNodeConfigVolumeOutput {
	return o.ApplyT(func(v *ClusterMasterNodeConfigVolume) ClusterMasterNodeConfigVolume {
		if v != nil {
			return *v
		}
		var ret ClusterMasterNodeConfigVolume
		return ret
	}).(ClusterMasterNodeConfigVolumeOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterMasterNodeConfigVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterMasterNodeConfigVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterMasterNodeConfigVolumePtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterMasterNodeConfigVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type ClusterNode struct {
	// Specifies the availability zone name.
	// Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
	// than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
	// distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
	// between node quantity in any two AZs is **1** at most.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Instance ID.
	Id *string `pulumi:"id"`
	// Instance IP address.
	Ip *string `pulumi:"ip"`
	// Specifies the cluster name. It contains `4` to `32` characters.
	// Only letters, digits, hyphens (-), and underscores (_) are allowed. The value must start with a letter.
	// Changing this parameter will create a new resource.
	Name *string `pulumi:"name"`
	// The resource ID of this instance.
	ResourceId *string `pulumi:"resourceId"`
	// Instance specification code.
	SpecCode *string `pulumi:"specCode"`
	// Instance status.
	Status *string `pulumi:"status"`
	// Node type. The options are as follows:
	// + **ess-master:** Indicates a master node.
	// + **ess-client:** Indicates a client node.
	// + **ess-cold:** Indicates a cold data node.
	// + **ess indicates:** Indicates a data node.
	Type *string `pulumi:"type"`
}

// ClusterNodeInput is an input type that accepts ClusterNodeArgs and ClusterNodeOutput values.
// You can construct a concrete instance of `ClusterNodeInput` via:
//
//	ClusterNodeArgs{...}
type ClusterNodeInput interface {
	pulumi.Input

	ToClusterNodeOutput() ClusterNodeOutput
	ToClusterNodeOutputWithContext(context.Context) ClusterNodeOutput
}

type ClusterNodeArgs struct {
	// Specifies the availability zone name.
	// Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
	// than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
	// distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
	// between node quantity in any two AZs is **1** at most.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// Instance ID.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Instance IP address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Specifies the cluster name. It contains `4` to `32` characters.
	// Only letters, digits, hyphens (-), and underscores (_) are allowed. The value must start with a letter.
	// Changing this parameter will create a new resource.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The resource ID of this instance.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// Instance specification code.
	SpecCode pulumi.StringPtrInput `pulumi:"specCode"`
	// Instance status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Node type. The options are as follows:
	// + **ess-master:** Indicates a master node.
	// + **ess-client:** Indicates a client node.
	// + **ess-cold:** Indicates a cold data node.
	// + **ess indicates:** Indicates a data node.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ClusterNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNode)(nil)).Elem()
}

func (i ClusterNodeArgs) ToClusterNodeOutput() ClusterNodeOutput {
	return i.ToClusterNodeOutputWithContext(context.Background())
}

func (i ClusterNodeArgs) ToClusterNodeOutputWithContext(ctx context.Context) ClusterNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeOutput)
}

// ClusterNodeArrayInput is an input type that accepts ClusterNodeArray and ClusterNodeArrayOutput values.
// You can construct a concrete instance of `ClusterNodeArrayInput` via:
//
//	ClusterNodeArray{ ClusterNodeArgs{...} }
type ClusterNodeArrayInput interface {
	pulumi.Input

	ToClusterNodeArrayOutput() ClusterNodeArrayOutput
	ToClusterNodeArrayOutputWithContext(context.Context) ClusterNodeArrayOutput
}

type ClusterNodeArray []ClusterNodeInput

func (ClusterNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNode)(nil)).Elem()
}

func (i ClusterNodeArray) ToClusterNodeArrayOutput() ClusterNodeArrayOutput {
	return i.ToClusterNodeArrayOutputWithContext(context.Background())
}

func (i ClusterNodeArray) ToClusterNodeArrayOutputWithContext(ctx context.Context) ClusterNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeArrayOutput)
}

type ClusterNodeOutput struct{ *pulumi.OutputState }

func (ClusterNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNode)(nil)).Elem()
}

func (o ClusterNodeOutput) ToClusterNodeOutput() ClusterNodeOutput {
	return o
}

func (o ClusterNodeOutput) ToClusterNodeOutputWithContext(ctx context.Context) ClusterNodeOutput {
	return o
}

// Specifies the availability zone name.
// Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
// than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
// distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
// between node quantity in any two AZs is **1** at most.
func (o ClusterNodeOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNode) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// Instance ID.
func (o ClusterNodeOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNode) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Instance IP address.
func (o ClusterNodeOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNode) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Specifies the cluster name. It contains `4` to `32` characters.
// Only letters, digits, hyphens (-), and underscores (_) are allowed. The value must start with a letter.
// Changing this parameter will create a new resource.
func (o ClusterNodeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNode) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The resource ID of this instance.
func (o ClusterNodeOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNode) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// Instance specification code.
func (o ClusterNodeOutput) SpecCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNode) *string { return v.SpecCode }).(pulumi.StringPtrOutput)
}

// Instance status.
func (o ClusterNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Node type. The options are as follows:
// + **ess-master:** Indicates a master node.
// + **ess-client:** Indicates a client node.
// + **ess-cold:** Indicates a cold data node.
// + **ess indicates:** Indicates a data node.
func (o ClusterNodeOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterNode) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ClusterNodeArrayOutput struct{ *pulumi.OutputState }

func (ClusterNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterNode)(nil)).Elem()
}

func (o ClusterNodeArrayOutput) ToClusterNodeArrayOutput() ClusterNodeArrayOutput {
	return o
}

func (o ClusterNodeArrayOutput) ToClusterNodeArrayOutputWithContext(ctx context.Context) ClusterNodeArrayOutput {
	return o
}

func (o ClusterNodeArrayOutput) Index(i pulumi.IntInput) ClusterNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterNode {
		return vs[0].([]ClusterNode)[vs[1].(int)]
	}).(ClusterNodeOutput)
}

type ClusterNodeConfig struct {
	// Specifies the availability zone name.
	// Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
	// than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
	// distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
	// between node quantity in any two AZs is **1** at most.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// Specifies the flavor name.
	Flavor      string                       `pulumi:"flavor"`
	NetworkInfo ClusterNodeConfigNetworkInfo `pulumi:"networkInfo"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume ClusterNodeConfigVolume `pulumi:"volume"`
}

// ClusterNodeConfigInput is an input type that accepts ClusterNodeConfigArgs and ClusterNodeConfigOutput values.
// You can construct a concrete instance of `ClusterNodeConfigInput` via:
//
//	ClusterNodeConfigArgs{...}
type ClusterNodeConfigInput interface {
	pulumi.Input

	ToClusterNodeConfigOutput() ClusterNodeConfigOutput
	ToClusterNodeConfigOutputWithContext(context.Context) ClusterNodeConfigOutput
}

type ClusterNodeConfigArgs struct {
	// Specifies the availability zone name.
	// Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
	// than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
	// distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
	// between node quantity in any two AZs is **1** at most.
	AvailabilityZone pulumi.StringInput `pulumi:"availabilityZone"`
	// Specifies the flavor name.
	Flavor      pulumi.StringInput                `pulumi:"flavor"`
	NetworkInfo ClusterNodeConfigNetworkInfoInput `pulumi:"networkInfo"`
	// Specifies the information about the volume.
	// The volume structure is documented below.
	Volume ClusterNodeConfigVolumeInput `pulumi:"volume"`
}

func (ClusterNodeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeConfig)(nil)).Elem()
}

func (i ClusterNodeConfigArgs) ToClusterNodeConfigOutput() ClusterNodeConfigOutput {
	return i.ToClusterNodeConfigOutputWithContext(context.Background())
}

func (i ClusterNodeConfigArgs) ToClusterNodeConfigOutputWithContext(ctx context.Context) ClusterNodeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigOutput)
}

func (i ClusterNodeConfigArgs) ToClusterNodeConfigPtrOutput() ClusterNodeConfigPtrOutput {
	return i.ToClusterNodeConfigPtrOutputWithContext(context.Background())
}

func (i ClusterNodeConfigArgs) ToClusterNodeConfigPtrOutputWithContext(ctx context.Context) ClusterNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigOutput).ToClusterNodeConfigPtrOutputWithContext(ctx)
}

// ClusterNodeConfigPtrInput is an input type that accepts ClusterNodeConfigArgs, ClusterNodeConfigPtr and ClusterNodeConfigPtrOutput values.
// You can construct a concrete instance of `ClusterNodeConfigPtrInput` via:
//
//	        ClusterNodeConfigArgs{...}
//
//	or:
//
//	        nil
type ClusterNodeConfigPtrInput interface {
	pulumi.Input

	ToClusterNodeConfigPtrOutput() ClusterNodeConfigPtrOutput
	ToClusterNodeConfigPtrOutputWithContext(context.Context) ClusterNodeConfigPtrOutput
}

type clusterNodeConfigPtrType ClusterNodeConfigArgs

func ClusterNodeConfigPtr(v *ClusterNodeConfigArgs) ClusterNodeConfigPtrInput {
	return (*clusterNodeConfigPtrType)(v)
}

func (*clusterNodeConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeConfig)(nil)).Elem()
}

func (i *clusterNodeConfigPtrType) ToClusterNodeConfigPtrOutput() ClusterNodeConfigPtrOutput {
	return i.ToClusterNodeConfigPtrOutputWithContext(context.Background())
}

func (i *clusterNodeConfigPtrType) ToClusterNodeConfigPtrOutputWithContext(ctx context.Context) ClusterNodeConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigPtrOutput)
}

type ClusterNodeConfigOutput struct{ *pulumi.OutputState }

func (ClusterNodeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeConfig)(nil)).Elem()
}

func (o ClusterNodeConfigOutput) ToClusterNodeConfigOutput() ClusterNodeConfigOutput {
	return o
}

func (o ClusterNodeConfigOutput) ToClusterNodeConfigOutputWithContext(ctx context.Context) ClusterNodeConfigOutput {
	return o
}

func (o ClusterNodeConfigOutput) ToClusterNodeConfigPtrOutput() ClusterNodeConfigPtrOutput {
	return o.ToClusterNodeConfigPtrOutputWithContext(context.Background())
}

func (o ClusterNodeConfigOutput) ToClusterNodeConfigPtrOutputWithContext(ctx context.Context) ClusterNodeConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNodeConfig) *ClusterNodeConfig {
		return &v
	}).(ClusterNodeConfigPtrOutput)
}

// Specifies the availability zone name.
// Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
// than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
// distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
// between node quantity in any two AZs is **1** at most.
func (o ClusterNodeConfigOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeConfig) string { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// Specifies the flavor name.
func (o ClusterNodeConfigOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeConfig) string { return v.Flavor }).(pulumi.StringOutput)
}

func (o ClusterNodeConfigOutput) NetworkInfo() ClusterNodeConfigNetworkInfoOutput {
	return o.ApplyT(func(v ClusterNodeConfig) ClusterNodeConfigNetworkInfo { return v.NetworkInfo }).(ClusterNodeConfigNetworkInfoOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterNodeConfigOutput) Volume() ClusterNodeConfigVolumeOutput {
	return o.ApplyT(func(v ClusterNodeConfig) ClusterNodeConfigVolume { return v.Volume }).(ClusterNodeConfigVolumeOutput)
}

type ClusterNodeConfigPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeConfig)(nil)).Elem()
}

func (o ClusterNodeConfigPtrOutput) ToClusterNodeConfigPtrOutput() ClusterNodeConfigPtrOutput {
	return o
}

func (o ClusterNodeConfigPtrOutput) ToClusterNodeConfigPtrOutputWithContext(ctx context.Context) ClusterNodeConfigPtrOutput {
	return o
}

func (o ClusterNodeConfigPtrOutput) Elem() ClusterNodeConfigOutput {
	return o.ApplyT(func(v *ClusterNodeConfig) ClusterNodeConfig {
		if v != nil {
			return *v
		}
		var ret ClusterNodeConfig
		return ret
	}).(ClusterNodeConfigOutput)
}

// Specifies the availability zone name.
// Separate multiple AZs with commas (,), for example, az1,az2. AZs must be unique. The number of nodes must be greater
// than or equal to the number of AZs. If the number of nodes is a multiple of the number of AZs, the nodes are evenly
// distributed to each AZ. If the number of nodes is not a multiple of the number of AZs, the absolute difference
// between node quantity in any two AZs is **1** at most.
func (o ClusterNodeConfigPtrOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.AvailabilityZone
	}).(pulumi.StringPtrOutput)
}

// Specifies the flavor name.
func (o ClusterNodeConfigPtrOutput) Flavor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Flavor
	}).(pulumi.StringPtrOutput)
}

func (o ClusterNodeConfigPtrOutput) NetworkInfo() ClusterNodeConfigNetworkInfoPtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfig) *ClusterNodeConfigNetworkInfo {
		if v == nil {
			return nil
		}
		return &v.NetworkInfo
	}).(ClusterNodeConfigNetworkInfoPtrOutput)
}

// Specifies the information about the volume.
// The volume structure is documented below.
func (o ClusterNodeConfigPtrOutput) Volume() ClusterNodeConfigVolumePtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfig) *ClusterNodeConfigVolume {
		if v == nil {
			return nil
		}
		return &v.Volume
	}).(ClusterNodeConfigVolumePtrOutput)
}

type ClusterNodeConfigNetworkInfo struct {
	// Specifies the security group ID.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// Specifies the Subnet ID.
	// Changing this parameter will create a new resource.
	SubnetId string `pulumi:"subnetId"`
	// Specifies the VPC ID.
	// Changing this parameter will create a new resource.
	VpcId string `pulumi:"vpcId"`
}

// ClusterNodeConfigNetworkInfoInput is an input type that accepts ClusterNodeConfigNetworkInfoArgs and ClusterNodeConfigNetworkInfoOutput values.
// You can construct a concrete instance of `ClusterNodeConfigNetworkInfoInput` via:
//
//	ClusterNodeConfigNetworkInfoArgs{...}
type ClusterNodeConfigNetworkInfoInput interface {
	pulumi.Input

	ToClusterNodeConfigNetworkInfoOutput() ClusterNodeConfigNetworkInfoOutput
	ToClusterNodeConfigNetworkInfoOutputWithContext(context.Context) ClusterNodeConfigNetworkInfoOutput
}

type ClusterNodeConfigNetworkInfoArgs struct {
	// Specifies the security group ID.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// Specifies the Subnet ID.
	// Changing this parameter will create a new resource.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Specifies the VPC ID.
	// Changing this parameter will create a new resource.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ClusterNodeConfigNetworkInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeConfigNetworkInfo)(nil)).Elem()
}

func (i ClusterNodeConfigNetworkInfoArgs) ToClusterNodeConfigNetworkInfoOutput() ClusterNodeConfigNetworkInfoOutput {
	return i.ToClusterNodeConfigNetworkInfoOutputWithContext(context.Background())
}

func (i ClusterNodeConfigNetworkInfoArgs) ToClusterNodeConfigNetworkInfoOutputWithContext(ctx context.Context) ClusterNodeConfigNetworkInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigNetworkInfoOutput)
}

func (i ClusterNodeConfigNetworkInfoArgs) ToClusterNodeConfigNetworkInfoPtrOutput() ClusterNodeConfigNetworkInfoPtrOutput {
	return i.ToClusterNodeConfigNetworkInfoPtrOutputWithContext(context.Background())
}

func (i ClusterNodeConfigNetworkInfoArgs) ToClusterNodeConfigNetworkInfoPtrOutputWithContext(ctx context.Context) ClusterNodeConfigNetworkInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigNetworkInfoOutput).ToClusterNodeConfigNetworkInfoPtrOutputWithContext(ctx)
}

// ClusterNodeConfigNetworkInfoPtrInput is an input type that accepts ClusterNodeConfigNetworkInfoArgs, ClusterNodeConfigNetworkInfoPtr and ClusterNodeConfigNetworkInfoPtrOutput values.
// You can construct a concrete instance of `ClusterNodeConfigNetworkInfoPtrInput` via:
//
//	        ClusterNodeConfigNetworkInfoArgs{...}
//
//	or:
//
//	        nil
type ClusterNodeConfigNetworkInfoPtrInput interface {
	pulumi.Input

	ToClusterNodeConfigNetworkInfoPtrOutput() ClusterNodeConfigNetworkInfoPtrOutput
	ToClusterNodeConfigNetworkInfoPtrOutputWithContext(context.Context) ClusterNodeConfigNetworkInfoPtrOutput
}

type clusterNodeConfigNetworkInfoPtrType ClusterNodeConfigNetworkInfoArgs

func ClusterNodeConfigNetworkInfoPtr(v *ClusterNodeConfigNetworkInfoArgs) ClusterNodeConfigNetworkInfoPtrInput {
	return (*clusterNodeConfigNetworkInfoPtrType)(v)
}

func (*clusterNodeConfigNetworkInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeConfigNetworkInfo)(nil)).Elem()
}

func (i *clusterNodeConfigNetworkInfoPtrType) ToClusterNodeConfigNetworkInfoPtrOutput() ClusterNodeConfigNetworkInfoPtrOutput {
	return i.ToClusterNodeConfigNetworkInfoPtrOutputWithContext(context.Background())
}

func (i *clusterNodeConfigNetworkInfoPtrType) ToClusterNodeConfigNetworkInfoPtrOutputWithContext(ctx context.Context) ClusterNodeConfigNetworkInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigNetworkInfoPtrOutput)
}

type ClusterNodeConfigNetworkInfoOutput struct{ *pulumi.OutputState }

func (ClusterNodeConfigNetworkInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeConfigNetworkInfo)(nil)).Elem()
}

func (o ClusterNodeConfigNetworkInfoOutput) ToClusterNodeConfigNetworkInfoOutput() ClusterNodeConfigNetworkInfoOutput {
	return o
}

func (o ClusterNodeConfigNetworkInfoOutput) ToClusterNodeConfigNetworkInfoOutputWithContext(ctx context.Context) ClusterNodeConfigNetworkInfoOutput {
	return o
}

func (o ClusterNodeConfigNetworkInfoOutput) ToClusterNodeConfigNetworkInfoPtrOutput() ClusterNodeConfigNetworkInfoPtrOutput {
	return o.ToClusterNodeConfigNetworkInfoPtrOutputWithContext(context.Background())
}

func (o ClusterNodeConfigNetworkInfoOutput) ToClusterNodeConfigNetworkInfoPtrOutputWithContext(ctx context.Context) ClusterNodeConfigNetworkInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNodeConfigNetworkInfo) *ClusterNodeConfigNetworkInfo {
		return &v
	}).(ClusterNodeConfigNetworkInfoPtrOutput)
}

// Specifies the security group ID.
func (o ClusterNodeConfigNetworkInfoOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeConfigNetworkInfo) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// Specifies the Subnet ID.
// Changing this parameter will create a new resource.
func (o ClusterNodeConfigNetworkInfoOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeConfigNetworkInfo) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Specifies the VPC ID.
// Changing this parameter will create a new resource.
func (o ClusterNodeConfigNetworkInfoOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeConfigNetworkInfo) string { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterNodeConfigNetworkInfoPtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeConfigNetworkInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeConfigNetworkInfo)(nil)).Elem()
}

func (o ClusterNodeConfigNetworkInfoPtrOutput) ToClusterNodeConfigNetworkInfoPtrOutput() ClusterNodeConfigNetworkInfoPtrOutput {
	return o
}

func (o ClusterNodeConfigNetworkInfoPtrOutput) ToClusterNodeConfigNetworkInfoPtrOutputWithContext(ctx context.Context) ClusterNodeConfigNetworkInfoPtrOutput {
	return o
}

func (o ClusterNodeConfigNetworkInfoPtrOutput) Elem() ClusterNodeConfigNetworkInfoOutput {
	return o.ApplyT(func(v *ClusterNodeConfigNetworkInfo) ClusterNodeConfigNetworkInfo {
		if v != nil {
			return *v
		}
		var ret ClusterNodeConfigNetworkInfo
		return ret
	}).(ClusterNodeConfigNetworkInfoOutput)
}

// Specifies the security group ID.
func (o ClusterNodeConfigNetworkInfoPtrOutput) SecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfigNetworkInfo) *string {
		if v == nil {
			return nil
		}
		return &v.SecurityGroupId
	}).(pulumi.StringPtrOutput)
}

// Specifies the Subnet ID.
// Changing this parameter will create a new resource.
func (o ClusterNodeConfigNetworkInfoPtrOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfigNetworkInfo) *string {
		if v == nil {
			return nil
		}
		return &v.SubnetId
	}).(pulumi.StringPtrOutput)
}

// Specifies the VPC ID.
// Changing this parameter will create a new resource.
func (o ClusterNodeConfigNetworkInfoPtrOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfigNetworkInfo) *string {
		if v == nil {
			return nil
		}
		return &v.VpcId
	}).(pulumi.StringPtrOutput)
}

type ClusterNodeConfigVolume struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size int `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType string `pulumi:"volumeType"`
}

// ClusterNodeConfigVolumeInput is an input type that accepts ClusterNodeConfigVolumeArgs and ClusterNodeConfigVolumeOutput values.
// You can construct a concrete instance of `ClusterNodeConfigVolumeInput` via:
//
//	ClusterNodeConfigVolumeArgs{...}
type ClusterNodeConfigVolumeInput interface {
	pulumi.Input

	ToClusterNodeConfigVolumeOutput() ClusterNodeConfigVolumeOutput
	ToClusterNodeConfigVolumeOutputWithContext(context.Context) ClusterNodeConfigVolumeOutput
}

type ClusterNodeConfigVolumeArgs struct {
	// Specifies the volume size in **GB**, which must be a multiple of `10`.
	Size pulumi.IntInput `pulumi:"size"`
	// Specifies the volume type. Value options are as follows:
	// + **COMMON**: Common I/O. The SATA disk is used.
	// + **HIGH**: High I/O. The SAS disk is used.
	// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
	//
	// <a name="Css_public_access"></a>
	// The `publicAccess` block supports:
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (ClusterNodeConfigVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeConfigVolume)(nil)).Elem()
}

func (i ClusterNodeConfigVolumeArgs) ToClusterNodeConfigVolumeOutput() ClusterNodeConfigVolumeOutput {
	return i.ToClusterNodeConfigVolumeOutputWithContext(context.Background())
}

func (i ClusterNodeConfigVolumeArgs) ToClusterNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterNodeConfigVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigVolumeOutput)
}

func (i ClusterNodeConfigVolumeArgs) ToClusterNodeConfigVolumePtrOutput() ClusterNodeConfigVolumePtrOutput {
	return i.ToClusterNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i ClusterNodeConfigVolumeArgs) ToClusterNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigVolumeOutput).ToClusterNodeConfigVolumePtrOutputWithContext(ctx)
}

// ClusterNodeConfigVolumePtrInput is an input type that accepts ClusterNodeConfigVolumeArgs, ClusterNodeConfigVolumePtr and ClusterNodeConfigVolumePtrOutput values.
// You can construct a concrete instance of `ClusterNodeConfigVolumePtrInput` via:
//
//	        ClusterNodeConfigVolumeArgs{...}
//
//	or:
//
//	        nil
type ClusterNodeConfigVolumePtrInput interface {
	pulumi.Input

	ToClusterNodeConfigVolumePtrOutput() ClusterNodeConfigVolumePtrOutput
	ToClusterNodeConfigVolumePtrOutputWithContext(context.Context) ClusterNodeConfigVolumePtrOutput
}

type clusterNodeConfigVolumePtrType ClusterNodeConfigVolumeArgs

func ClusterNodeConfigVolumePtr(v *ClusterNodeConfigVolumeArgs) ClusterNodeConfigVolumePtrInput {
	return (*clusterNodeConfigVolumePtrType)(v)
}

func (*clusterNodeConfigVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeConfigVolume)(nil)).Elem()
}

func (i *clusterNodeConfigVolumePtrType) ToClusterNodeConfigVolumePtrOutput() ClusterNodeConfigVolumePtrOutput {
	return i.ToClusterNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (i *clusterNodeConfigVolumePtrType) ToClusterNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterNodeConfigVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterNodeConfigVolumePtrOutput)
}

type ClusterNodeConfigVolumeOutput struct{ *pulumi.OutputState }

func (ClusterNodeConfigVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterNodeConfigVolume)(nil)).Elem()
}

func (o ClusterNodeConfigVolumeOutput) ToClusterNodeConfigVolumeOutput() ClusterNodeConfigVolumeOutput {
	return o
}

func (o ClusterNodeConfigVolumeOutput) ToClusterNodeConfigVolumeOutputWithContext(ctx context.Context) ClusterNodeConfigVolumeOutput {
	return o
}

func (o ClusterNodeConfigVolumeOutput) ToClusterNodeConfigVolumePtrOutput() ClusterNodeConfigVolumePtrOutput {
	return o.ToClusterNodeConfigVolumePtrOutputWithContext(context.Background())
}

func (o ClusterNodeConfigVolumeOutput) ToClusterNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterNodeConfigVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterNodeConfigVolume) *ClusterNodeConfigVolume {
		return &v
	}).(ClusterNodeConfigVolumePtrOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterNodeConfigVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterNodeConfigVolume) int { return v.Size }).(pulumi.IntOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterNodeConfigVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterNodeConfigVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type ClusterNodeConfigVolumePtrOutput struct{ *pulumi.OutputState }

func (ClusterNodeConfigVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterNodeConfigVolume)(nil)).Elem()
}

func (o ClusterNodeConfigVolumePtrOutput) ToClusterNodeConfigVolumePtrOutput() ClusterNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterNodeConfigVolumePtrOutput) ToClusterNodeConfigVolumePtrOutputWithContext(ctx context.Context) ClusterNodeConfigVolumePtrOutput {
	return o
}

func (o ClusterNodeConfigVolumePtrOutput) Elem() ClusterNodeConfigVolumeOutput {
	return o.ApplyT(func(v *ClusterNodeConfigVolume) ClusterNodeConfigVolume {
		if v != nil {
			return *v
		}
		var ret ClusterNodeConfigVolume
		return ret
	}).(ClusterNodeConfigVolumeOutput)
}

// Specifies the volume size in **GB**, which must be a multiple of `10`.
func (o ClusterNodeConfigVolumePtrOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfigVolume) *int {
		if v == nil {
			return nil
		}
		return &v.Size
	}).(pulumi.IntPtrOutput)
}

// Specifies the volume type. Value options are as follows:
// + **COMMON**: Common I/O. The SATA disk is used.
// + **HIGH**: High I/O. The SAS disk is used.
// + **ULTRAHIGH**: Ultra-high I/O. The solid-state drive (SSD) is used.
//
// <a name="Css_public_access"></a>
// The `publicAccess` block supports:
func (o ClusterNodeConfigVolumePtrOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterNodeConfigVolume) *string {
		if v == nil {
			return nil
		}
		return &v.VolumeType
	}).(pulumi.StringPtrOutput)
}

type ClusterPublicAccess struct {
	// Specifies the public network bandwidth.
	Bandwidth int     `pulumi:"bandwidth"`
	PublicIp  *string `pulumi:"publicIp"`
	// Specifies the whitelist of access control. The whitelisted account id must be unique.
	Whitelist *string `pulumi:"whitelist"`
	// Specifies whether to enable the public network access control.
	WhitelistEnabled bool `pulumi:"whitelistEnabled"`
}

// ClusterPublicAccessInput is an input type that accepts ClusterPublicAccessArgs and ClusterPublicAccessOutput values.
// You can construct a concrete instance of `ClusterPublicAccessInput` via:
//
//	ClusterPublicAccessArgs{...}
type ClusterPublicAccessInput interface {
	pulumi.Input

	ToClusterPublicAccessOutput() ClusterPublicAccessOutput
	ToClusterPublicAccessOutputWithContext(context.Context) ClusterPublicAccessOutput
}

type ClusterPublicAccessArgs struct {
	// Specifies the public network bandwidth.
	Bandwidth pulumi.IntInput       `pulumi:"bandwidth"`
	PublicIp  pulumi.StringPtrInput `pulumi:"publicIp"`
	// Specifies the whitelist of access control. The whitelisted account id must be unique.
	Whitelist pulumi.StringPtrInput `pulumi:"whitelist"`
	// Specifies whether to enable the public network access control.
	WhitelistEnabled pulumi.BoolInput `pulumi:"whitelistEnabled"`
}

func (ClusterPublicAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicAccess)(nil)).Elem()
}

func (i ClusterPublicAccessArgs) ToClusterPublicAccessOutput() ClusterPublicAccessOutput {
	return i.ToClusterPublicAccessOutputWithContext(context.Background())
}

func (i ClusterPublicAccessArgs) ToClusterPublicAccessOutputWithContext(ctx context.Context) ClusterPublicAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicAccessOutput)
}

func (i ClusterPublicAccessArgs) ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput {
	return i.ToClusterPublicAccessPtrOutputWithContext(context.Background())
}

func (i ClusterPublicAccessArgs) ToClusterPublicAccessPtrOutputWithContext(ctx context.Context) ClusterPublicAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicAccessOutput).ToClusterPublicAccessPtrOutputWithContext(ctx)
}

// ClusterPublicAccessPtrInput is an input type that accepts ClusterPublicAccessArgs, ClusterPublicAccessPtr and ClusterPublicAccessPtrOutput values.
// You can construct a concrete instance of `ClusterPublicAccessPtrInput` via:
//
//	        ClusterPublicAccessArgs{...}
//
//	or:
//
//	        nil
type ClusterPublicAccessPtrInput interface {
	pulumi.Input

	ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput
	ToClusterPublicAccessPtrOutputWithContext(context.Context) ClusterPublicAccessPtrOutput
}

type clusterPublicAccessPtrType ClusterPublicAccessArgs

func ClusterPublicAccessPtr(v *ClusterPublicAccessArgs) ClusterPublicAccessPtrInput {
	return (*clusterPublicAccessPtrType)(v)
}

func (*clusterPublicAccessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicAccess)(nil)).Elem()
}

func (i *clusterPublicAccessPtrType) ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput {
	return i.ToClusterPublicAccessPtrOutputWithContext(context.Background())
}

func (i *clusterPublicAccessPtrType) ToClusterPublicAccessPtrOutputWithContext(ctx context.Context) ClusterPublicAccessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterPublicAccessPtrOutput)
}

type ClusterPublicAccessOutput struct{ *pulumi.OutputState }

func (ClusterPublicAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterPublicAccess)(nil)).Elem()
}

func (o ClusterPublicAccessOutput) ToClusterPublicAccessOutput() ClusterPublicAccessOutput {
	return o
}

func (o ClusterPublicAccessOutput) ToClusterPublicAccessOutputWithContext(ctx context.Context) ClusterPublicAccessOutput {
	return o
}

func (o ClusterPublicAccessOutput) ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput {
	return o.ToClusterPublicAccessPtrOutputWithContext(context.Background())
}

func (o ClusterPublicAccessOutput) ToClusterPublicAccessPtrOutputWithContext(ctx context.Context) ClusterPublicAccessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterPublicAccess) *ClusterPublicAccess {
		return &v
	}).(ClusterPublicAccessPtrOutput)
}

// Specifies the public network bandwidth.
func (o ClusterPublicAccessOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v ClusterPublicAccess) int { return v.Bandwidth }).(pulumi.IntOutput)
}

func (o ClusterPublicAccessOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPublicAccess) *string { return v.PublicIp }).(pulumi.StringPtrOutput)
}

// Specifies the whitelist of access control. The whitelisted account id must be unique.
func (o ClusterPublicAccessOutput) Whitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClusterPublicAccess) *string { return v.Whitelist }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the public network access control.
func (o ClusterPublicAccessOutput) WhitelistEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterPublicAccess) bool { return v.WhitelistEnabled }).(pulumi.BoolOutput)
}

type ClusterPublicAccessPtrOutput struct{ *pulumi.OutputState }

func (ClusterPublicAccessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterPublicAccess)(nil)).Elem()
}

func (o ClusterPublicAccessPtrOutput) ToClusterPublicAccessPtrOutput() ClusterPublicAccessPtrOutput {
	return o
}

func (o ClusterPublicAccessPtrOutput) ToClusterPublicAccessPtrOutputWithContext(ctx context.Context) ClusterPublicAccessPtrOutput {
	return o
}

func (o ClusterPublicAccessPtrOutput) Elem() ClusterPublicAccessOutput {
	return o.ApplyT(func(v *ClusterPublicAccess) ClusterPublicAccess {
		if v != nil {
			return *v
		}
		var ret ClusterPublicAccess
		return ret
	}).(ClusterPublicAccessOutput)
}

// Specifies the public network bandwidth.
func (o ClusterPublicAccessPtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClusterPublicAccess) *int {
		if v == nil {
			return nil
		}
		return &v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

func (o ClusterPublicAccessPtrOutput) PublicIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPublicAccess) *string {
		if v == nil {
			return nil
		}
		return v.PublicIp
	}).(pulumi.StringPtrOutput)
}

// Specifies the whitelist of access control. The whitelisted account id must be unique.
func (o ClusterPublicAccessPtrOutput) Whitelist() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClusterPublicAccess) *string {
		if v == nil {
			return nil
		}
		return v.Whitelist
	}).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the public network access control.
func (o ClusterPublicAccessPtrOutput) WhitelistEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterPublicAccess) *bool {
		if v == nil {
			return nil
		}
		return &v.WhitelistEnabled
	}).(pulumi.BoolPtrOutput)
}

type ClusterVpcepEndpoint struct {
	// Specifies whether to enable the private domain name.
	EndpointWithDnsName bool `pulumi:"endpointWithDnsName"`
	// Specifies the whitelist of access control. The whitelisted account id must be unique.
	Whitelists []string `pulumi:"whitelists"`
}

// ClusterVpcepEndpointInput is an input type that accepts ClusterVpcepEndpointArgs and ClusterVpcepEndpointOutput values.
// You can construct a concrete instance of `ClusterVpcepEndpointInput` via:
//
//	ClusterVpcepEndpointArgs{...}
type ClusterVpcepEndpointInput interface {
	pulumi.Input

	ToClusterVpcepEndpointOutput() ClusterVpcepEndpointOutput
	ToClusterVpcepEndpointOutputWithContext(context.Context) ClusterVpcepEndpointOutput
}

type ClusterVpcepEndpointArgs struct {
	// Specifies whether to enable the private domain name.
	EndpointWithDnsName pulumi.BoolInput `pulumi:"endpointWithDnsName"`
	// Specifies the whitelist of access control. The whitelisted account id must be unique.
	Whitelists pulumi.StringArrayInput `pulumi:"whitelists"`
}

func (ClusterVpcepEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcepEndpoint)(nil)).Elem()
}

func (i ClusterVpcepEndpointArgs) ToClusterVpcepEndpointOutput() ClusterVpcepEndpointOutput {
	return i.ToClusterVpcepEndpointOutputWithContext(context.Background())
}

func (i ClusterVpcepEndpointArgs) ToClusterVpcepEndpointOutputWithContext(ctx context.Context) ClusterVpcepEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcepEndpointOutput)
}

func (i ClusterVpcepEndpointArgs) ToClusterVpcepEndpointPtrOutput() ClusterVpcepEndpointPtrOutput {
	return i.ToClusterVpcepEndpointPtrOutputWithContext(context.Background())
}

func (i ClusterVpcepEndpointArgs) ToClusterVpcepEndpointPtrOutputWithContext(ctx context.Context) ClusterVpcepEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcepEndpointOutput).ToClusterVpcepEndpointPtrOutputWithContext(ctx)
}

// ClusterVpcepEndpointPtrInput is an input type that accepts ClusterVpcepEndpointArgs, ClusterVpcepEndpointPtr and ClusterVpcepEndpointPtrOutput values.
// You can construct a concrete instance of `ClusterVpcepEndpointPtrInput` via:
//
//	        ClusterVpcepEndpointArgs{...}
//
//	or:
//
//	        nil
type ClusterVpcepEndpointPtrInput interface {
	pulumi.Input

	ToClusterVpcepEndpointPtrOutput() ClusterVpcepEndpointPtrOutput
	ToClusterVpcepEndpointPtrOutputWithContext(context.Context) ClusterVpcepEndpointPtrOutput
}

type clusterVpcepEndpointPtrType ClusterVpcepEndpointArgs

func ClusterVpcepEndpointPtr(v *ClusterVpcepEndpointArgs) ClusterVpcepEndpointPtrInput {
	return (*clusterVpcepEndpointPtrType)(v)
}

func (*clusterVpcepEndpointPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcepEndpoint)(nil)).Elem()
}

func (i *clusterVpcepEndpointPtrType) ToClusterVpcepEndpointPtrOutput() ClusterVpcepEndpointPtrOutput {
	return i.ToClusterVpcepEndpointPtrOutputWithContext(context.Background())
}

func (i *clusterVpcepEndpointPtrType) ToClusterVpcepEndpointPtrOutputWithContext(ctx context.Context) ClusterVpcepEndpointPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVpcepEndpointPtrOutput)
}

type ClusterVpcepEndpointOutput struct{ *pulumi.OutputState }

func (ClusterVpcepEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVpcepEndpoint)(nil)).Elem()
}

func (o ClusterVpcepEndpointOutput) ToClusterVpcepEndpointOutput() ClusterVpcepEndpointOutput {
	return o
}

func (o ClusterVpcepEndpointOutput) ToClusterVpcepEndpointOutputWithContext(ctx context.Context) ClusterVpcepEndpointOutput {
	return o
}

func (o ClusterVpcepEndpointOutput) ToClusterVpcepEndpointPtrOutput() ClusterVpcepEndpointPtrOutput {
	return o.ToClusterVpcepEndpointPtrOutputWithContext(context.Background())
}

func (o ClusterVpcepEndpointOutput) ToClusterVpcepEndpointPtrOutputWithContext(ctx context.Context) ClusterVpcepEndpointPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClusterVpcepEndpoint) *ClusterVpcepEndpoint {
		return &v
	}).(ClusterVpcepEndpointPtrOutput)
}

// Specifies whether to enable the private domain name.
func (o ClusterVpcepEndpointOutput) EndpointWithDnsName() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterVpcepEndpoint) bool { return v.EndpointWithDnsName }).(pulumi.BoolOutput)
}

// Specifies the whitelist of access control. The whitelisted account id must be unique.
func (o ClusterVpcepEndpointOutput) Whitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClusterVpcepEndpoint) []string { return v.Whitelists }).(pulumi.StringArrayOutput)
}

type ClusterVpcepEndpointPtrOutput struct{ *pulumi.OutputState }

func (ClusterVpcepEndpointPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterVpcepEndpoint)(nil)).Elem()
}

func (o ClusterVpcepEndpointPtrOutput) ToClusterVpcepEndpointPtrOutput() ClusterVpcepEndpointPtrOutput {
	return o
}

func (o ClusterVpcepEndpointPtrOutput) ToClusterVpcepEndpointPtrOutputWithContext(ctx context.Context) ClusterVpcepEndpointPtrOutput {
	return o
}

func (o ClusterVpcepEndpointPtrOutput) Elem() ClusterVpcepEndpointOutput {
	return o.ApplyT(func(v *ClusterVpcepEndpoint) ClusterVpcepEndpoint {
		if v != nil {
			return *v
		}
		var ret ClusterVpcepEndpoint
		return ret
	}).(ClusterVpcepEndpointOutput)
}

// Specifies whether to enable the private domain name.
func (o ClusterVpcepEndpointPtrOutput) EndpointWithDnsName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClusterVpcepEndpoint) *bool {
		if v == nil {
			return nil
		}
		return &v.EndpointWithDnsName
	}).(pulumi.BoolPtrOutput)
}

// Specifies the whitelist of access control. The whitelisted account id must be unique.
func (o ClusterVpcepEndpointPtrOutput) Whitelists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterVpcepEndpoint) []string {
		if v == nil {
			return nil
		}
		return v.Whitelists
	}).(pulumi.StringArrayOutput)
}

type GetFlavorsFlavor struct {
	AvailabilityZones string `pulumi:"availabilityZones"`
	// The disk capacity range of an instance, in GB.
	DiskRange string `pulumi:"diskRange"`
	// The ID of CSS flavor.
	Id string `pulumi:"id"`
	// Specifies the memory size(GB) in the CSS flavor.
	Memory int `pulumi:"memory"`
	// Specifies the name of the CSS flavor.
	Name string `pulumi:"name"`
	// Specifies the region in which to obtain the CSS flavors. If omitted, the
	// provider-level region will be used.
	Region string `pulumi:"region"`
	// Specifies the node instance type. The options are `ess`, `ess-cold`, `ess-master`
	// and `ess-client`.
	Type string `pulumi:"type"`
	// Specifies the number of vCPUs in the CSS flavor.
	Vcpus int `pulumi:"vcpus"`
	// Specifies the engine version. The options are `5.5.1`, `6.2.3`, `6.5.4`, `7.1.1`,
	// `7.6.2` and `7.9.3`.
	Version string `pulumi:"version"`
}

// GetFlavorsFlavorInput is an input type that accepts GetFlavorsFlavorArgs and GetFlavorsFlavorOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorInput` via:
//
//	GetFlavorsFlavorArgs{...}
type GetFlavorsFlavorInput interface {
	pulumi.Input

	ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput
	ToGetFlavorsFlavorOutputWithContext(context.Context) GetFlavorsFlavorOutput
}

type GetFlavorsFlavorArgs struct {
	AvailabilityZones pulumi.StringInput `pulumi:"availabilityZones"`
	// The disk capacity range of an instance, in GB.
	DiskRange pulumi.StringInput `pulumi:"diskRange"`
	// The ID of CSS flavor.
	Id pulumi.StringInput `pulumi:"id"`
	// Specifies the memory size(GB) in the CSS flavor.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Specifies the name of the CSS flavor.
	Name pulumi.StringInput `pulumi:"name"`
	// Specifies the region in which to obtain the CSS flavors. If omitted, the
	// provider-level region will be used.
	Region pulumi.StringInput `pulumi:"region"`
	// Specifies the node instance type. The options are `ess`, `ess-cold`, `ess-master`
	// and `ess-client`.
	Type pulumi.StringInput `pulumi:"type"`
	// Specifies the number of vCPUs in the CSS flavor.
	Vcpus pulumi.IntInput `pulumi:"vcpus"`
	// Specifies the engine version. The options are `5.5.1`, `6.2.3`, `6.5.4`, `7.1.1`,
	// `7.6.2` and `7.9.3`.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetFlavorsFlavorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return i.ToGetFlavorsFlavorOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArgs) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorOutput)
}

// GetFlavorsFlavorArrayInput is an input type that accepts GetFlavorsFlavorArray and GetFlavorsFlavorArrayOutput values.
// You can construct a concrete instance of `GetFlavorsFlavorArrayInput` via:
//
//	GetFlavorsFlavorArray{ GetFlavorsFlavorArgs{...} }
type GetFlavorsFlavorArrayInput interface {
	pulumi.Input

	ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput
	ToGetFlavorsFlavorArrayOutputWithContext(context.Context) GetFlavorsFlavorArrayOutput
}

type GetFlavorsFlavorArray []GetFlavorsFlavorInput

func (GetFlavorsFlavorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return i.ToGetFlavorsFlavorArrayOutputWithContext(context.Background())
}

func (i GetFlavorsFlavorArray) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFlavorsFlavorArrayOutput)
}

type GetFlavorsFlavorOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutput() GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) ToGetFlavorsFlavorOutputWithContext(ctx context.Context) GetFlavorsFlavorOutput {
	return o
}

func (o GetFlavorsFlavorOutput) AvailabilityZones() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.AvailabilityZones }).(pulumi.StringOutput)
}

// The disk capacity range of an instance, in GB.
func (o GetFlavorsFlavorOutput) DiskRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.DiskRange }).(pulumi.StringOutput)
}

// The ID of CSS flavor.
func (o GetFlavorsFlavorOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Id }).(pulumi.StringOutput)
}

// Specifies the memory size(GB) in the CSS flavor.
func (o GetFlavorsFlavorOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) int { return v.Memory }).(pulumi.IntOutput)
}

// Specifies the name of the CSS flavor.
func (o GetFlavorsFlavorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Name }).(pulumi.StringOutput)
}

// Specifies the region in which to obtain the CSS flavors. If omitted, the
// provider-level region will be used.
func (o GetFlavorsFlavorOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Region }).(pulumi.StringOutput)
}

// Specifies the node instance type. The options are `ess`, `ess-cold`, `ess-master`
// and `ess-client`.
func (o GetFlavorsFlavorOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Type }).(pulumi.StringOutput)
}

// Specifies the number of vCPUs in the CSS flavor.
func (o GetFlavorsFlavorOutput) Vcpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) int { return v.Vcpus }).(pulumi.IntOutput)
}

// Specifies the engine version. The options are `5.5.1`, `6.2.3`, `6.5.4`, `7.1.1`,
// `7.6.2` and `7.9.3`.
func (o GetFlavorsFlavorOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetFlavorsFlavor) string { return v.Version }).(pulumi.StringOutput)
}

type GetFlavorsFlavorArrayOutput struct{ *pulumi.OutputState }

func (GetFlavorsFlavorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFlavorsFlavor)(nil)).Elem()
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutput() GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) ToGetFlavorsFlavorArrayOutputWithContext(ctx context.Context) GetFlavorsFlavorArrayOutput {
	return o
}

func (o GetFlavorsFlavorArrayOutput) Index(i pulumi.IntInput) GetFlavorsFlavorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFlavorsFlavor {
		return vs[0].([]GetFlavorsFlavor)[vs[1].(int)]
	}).(GetFlavorsFlavorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBackupStrategyInput)(nil)).Elem(), ClusterBackupStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterBackupStrategyPtrInput)(nil)).Elem(), ClusterBackupStrategyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterClientNodeConfigInput)(nil)).Elem(), ClusterClientNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterClientNodeConfigPtrInput)(nil)).Elem(), ClusterClientNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterClientNodeConfigVolumeInput)(nil)).Elem(), ClusterClientNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterClientNodeConfigVolumePtrInput)(nil)).Elem(), ClusterClientNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterColdNodeConfigInput)(nil)).Elem(), ClusterColdNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterColdNodeConfigPtrInput)(nil)).Elem(), ClusterColdNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterColdNodeConfigVolumeInput)(nil)).Elem(), ClusterColdNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterColdNodeConfigVolumePtrInput)(nil)).Elem(), ClusterColdNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEssNodeConfigInput)(nil)).Elem(), ClusterEssNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEssNodeConfigPtrInput)(nil)).Elem(), ClusterEssNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEssNodeConfigVolumeInput)(nil)).Elem(), ClusterEssNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterEssNodeConfigVolumePtrInput)(nil)).Elem(), ClusterEssNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterKibanaPublicAccessInput)(nil)).Elem(), ClusterKibanaPublicAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterKibanaPublicAccessPtrInput)(nil)).Elem(), ClusterKibanaPublicAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMasterNodeConfigInput)(nil)).Elem(), ClusterMasterNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMasterNodeConfigPtrInput)(nil)).Elem(), ClusterMasterNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMasterNodeConfigVolumeInput)(nil)).Elem(), ClusterMasterNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMasterNodeConfigVolumePtrInput)(nil)).Elem(), ClusterMasterNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeInput)(nil)).Elem(), ClusterNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeArrayInput)(nil)).Elem(), ClusterNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeConfigInput)(nil)).Elem(), ClusterNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeConfigPtrInput)(nil)).Elem(), ClusterNodeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeConfigNetworkInfoInput)(nil)).Elem(), ClusterNodeConfigNetworkInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeConfigNetworkInfoPtrInput)(nil)).Elem(), ClusterNodeConfigNetworkInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeConfigVolumeInput)(nil)).Elem(), ClusterNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterNodeConfigVolumePtrInput)(nil)).Elem(), ClusterNodeConfigVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicAccessInput)(nil)).Elem(), ClusterPublicAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterPublicAccessPtrInput)(nil)).Elem(), ClusterPublicAccessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcepEndpointInput)(nil)).Elem(), ClusterVpcepEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVpcepEndpointPtrInput)(nil)).Elem(), ClusterVpcepEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorInput)(nil)).Elem(), GetFlavorsFlavorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFlavorsFlavorArrayInput)(nil)).Elem(), GetFlavorsFlavorArray{})
	pulumi.RegisterOutputType(ClusterBackupStrategyOutput{})
	pulumi.RegisterOutputType(ClusterBackupStrategyPtrOutput{})
	pulumi.RegisterOutputType(ClusterClientNodeConfigOutput{})
	pulumi.RegisterOutputType(ClusterClientNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterClientNodeConfigVolumeOutput{})
	pulumi.RegisterOutputType(ClusterClientNodeConfigVolumePtrOutput{})
	pulumi.RegisterOutputType(ClusterColdNodeConfigOutput{})
	pulumi.RegisterOutputType(ClusterColdNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterColdNodeConfigVolumeOutput{})
	pulumi.RegisterOutputType(ClusterColdNodeConfigVolumePtrOutput{})
	pulumi.RegisterOutputType(ClusterEssNodeConfigOutput{})
	pulumi.RegisterOutputType(ClusterEssNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterEssNodeConfigVolumeOutput{})
	pulumi.RegisterOutputType(ClusterEssNodeConfigVolumePtrOutput{})
	pulumi.RegisterOutputType(ClusterKibanaPublicAccessOutput{})
	pulumi.RegisterOutputType(ClusterKibanaPublicAccessPtrOutput{})
	pulumi.RegisterOutputType(ClusterMasterNodeConfigOutput{})
	pulumi.RegisterOutputType(ClusterMasterNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterMasterNodeConfigVolumeOutput{})
	pulumi.RegisterOutputType(ClusterMasterNodeConfigVolumePtrOutput{})
	pulumi.RegisterOutputType(ClusterNodeOutput{})
	pulumi.RegisterOutputType(ClusterNodeArrayOutput{})
	pulumi.RegisterOutputType(ClusterNodeConfigOutput{})
	pulumi.RegisterOutputType(ClusterNodeConfigPtrOutput{})
	pulumi.RegisterOutputType(ClusterNodeConfigNetworkInfoOutput{})
	pulumi.RegisterOutputType(ClusterNodeConfigNetworkInfoPtrOutput{})
	pulumi.RegisterOutputType(ClusterNodeConfigVolumeOutput{})
	pulumi.RegisterOutputType(ClusterNodeConfigVolumePtrOutput{})
	pulumi.RegisterOutputType(ClusterPublicAccessOutput{})
	pulumi.RegisterOutputType(ClusterPublicAccessPtrOutput{})
	pulumi.RegisterOutputType(ClusterVpcepEndpointOutput{})
	pulumi.RegisterOutputType(ClusterVpcepEndpointPtrOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorOutput{})
	pulumi.RegisterOutputType(GetFlavorsFlavorArrayOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Manages an AS configuration resource within SberCloud.
//
// ## Example Usage
//
// ### Basic AS Configuration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/as"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			flavorId := cfg.RequireObject("flavorId")
//			imageId := cfg.RequireObject("imageId")
//			sshKey := cfg.RequireObject("sshKey")
//			securityGroupId := cfg.RequireObject("securityGroupId")
//			_, err := as.NewConfiguration(ctx, "my_as_config", &as.ConfigurationArgs{
//				ScalingConfigurationName: pulumi.String("my_as_config"),
//				InstanceConfig: &as.ConfigurationInstanceConfigArgs{
//					Flavor:  pulumi.Any(flavorId),
//					Image:   pulumi.Any(imageId),
//					KeyName: pulumi.Any(sshKey),
//					SecurityGroupIds: pulumi.StringArray{
//						securityGroupId,
//					},
//					Disks: as.ConfigurationInstanceConfigDiskArray{
//						&as.ConfigurationInstanceConfigDiskArgs{
//							Size:       pulumi.Int(40),
//							VolumeType: pulumi.String("SSD"),
//							DiskType:   pulumi.String("SYS"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### AS Configuration With Encrypted Data Disk
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/as"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			flavorId := cfg.RequireObject("flavorId")
//			imageId := cfg.RequireObject("imageId")
//			sshKey := cfg.RequireObject("sshKey")
//			kmsId := cfg.RequireObject("kmsId")
//			securityGroupId := cfg.RequireObject("securityGroupId")
//			_, err := as.NewConfiguration(ctx, "my_as_config", &as.ConfigurationArgs{
//				ScalingConfigurationName: pulumi.String("my_as_config"),
//				InstanceConfig: &as.ConfigurationInstanceConfigArgs{
//					Flavor:  pulumi.Any(flavorId),
//					Image:   pulumi.Any(imageId),
//					KeyName: pulumi.Any(sshKey),
//					SecurityGroupIds: pulumi.StringArray{
//						securityGroupId,
//					},
//					Disks: as.ConfigurationInstanceConfigDiskArray{
//						&as.ConfigurationInstanceConfigDiskArgs{
//							Size:       pulumi.Int(40),
//							VolumeType: pulumi.String("SSD"),
//							DiskType:   pulumi.String("SYS"),
//						},
//						&as.ConfigurationInstanceConfigDiskArgs{
//							Size:       pulumi.Int(100),
//							VolumeType: pulumi.String("SSD"),
//							DiskType:   pulumi.String("DATA"),
//							KmsId:      pulumi.Any(kmsId),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### AS Configuration uses the existing instance specifications as the template
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/as"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			instanceId := cfg.RequireObject("instanceId")
//			sshKey := cfg.RequireObject("sshKey")
//			securityGroupId := cfg.RequireObject("securityGroupId")
//			_, err := as.NewConfiguration(ctx, "my_as_config", &as.ConfigurationArgs{
//				ScalingConfigurationName: pulumi.String("my_as_config"),
//				InstanceConfig: &as.ConfigurationInstanceConfigArgs{
//					InstanceId: pulumi.Any(instanceId),
//					KeyName:    pulumi.Any(sshKey),
//					SecurityGroupIds: pulumi.StringArray{
//						securityGroupId,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AS configurations can be imported by their `id`, e.g.
//
// ```sh
// $ pulumi import sbercloud:As/configuration:Configuration test 18518c8a-9d15-416b-8add-2ee874751d18
// ```
//
// Note that the imported state may not be identical to your resource definition, due to `instance_config.0.instance_id`
//
// is missing from the API response. You can ignore changes after importing an AS configuration as below.
//
// resource "sbercloud_as_configuration" "test" {
//
//	...
//
//	lifecycle {
//
//	  ignore_changes = [ instance_config.0.instance_id ]
//
//	}
//
// }
type Configuration struct {
	pulumi.CustomResourceState

	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specifies the information about instance configuration.
	// The object structure is documented below. Changing this will create a new resource.
	InstanceConfig ConfigurationInstanceConfigOutput `pulumi:"instanceConfig"`
	// Specifies the region in which to create the AS configuration.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the AS configuration name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	// Changing this will create a new resource.
	ScalingConfigurationName pulumi.StringOutput `pulumi:"scalingConfigurationName"`
	// The AS configuration status, the value can be **Bound** or **Unbound**.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewConfiguration registers a new resource with the given unique name, arguments, and options.
func NewConfiguration(ctx *pulumi.Context,
	name string, args *ConfigurationArgs, opts ...pulumi.ResourceOption) (*Configuration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceConfig == nil {
		return nil, errors.New("invalid value for required argument 'InstanceConfig'")
	}
	if args.ScalingConfigurationName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingConfigurationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Configuration
	err := ctx.RegisterResource("sbercloud:As/configuration:Configuration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfiguration gets an existing Configuration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationState, opts ...pulumi.ResourceOption) (*Configuration, error) {
	var resource Configuration
	err := ctx.ReadResource("sbercloud:As/configuration:Configuration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Configuration resources.
type configurationState struct {
	CreateTime *string `pulumi:"createTime"`
	// Specifies the information about instance configuration.
	// The object structure is documented below. Changing this will create a new resource.
	InstanceConfig *ConfigurationInstanceConfig `pulumi:"instanceConfig"`
	// Specifies the region in which to create the AS configuration.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the AS configuration name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	// Changing this will create a new resource.
	ScalingConfigurationName *string `pulumi:"scalingConfigurationName"`
	// The AS configuration status, the value can be **Bound** or **Unbound**.
	Status *string `pulumi:"status"`
}

type ConfigurationState struct {
	CreateTime pulumi.StringPtrInput
	// Specifies the information about instance configuration.
	// The object structure is documented below. Changing this will create a new resource.
	InstanceConfig ConfigurationInstanceConfigPtrInput
	// Specifies the region in which to create the AS configuration.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the AS configuration name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	// Changing this will create a new resource.
	ScalingConfigurationName pulumi.StringPtrInput
	// The AS configuration status, the value can be **Bound** or **Unbound**.
	Status pulumi.StringPtrInput
}

func (ConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationState)(nil)).Elem()
}

type configurationArgs struct {
	// Specifies the information about instance configuration.
	// The object structure is documented below. Changing this will create a new resource.
	InstanceConfig ConfigurationInstanceConfig `pulumi:"instanceConfig"`
	// Specifies the region in which to create the AS configuration.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region *string `pulumi:"region"`
	// Specifies the AS configuration name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	// Changing this will create a new resource.
	ScalingConfigurationName string `pulumi:"scalingConfigurationName"`
}

// The set of arguments for constructing a Configuration resource.
type ConfigurationArgs struct {
	// Specifies the information about instance configuration.
	// The object structure is documented below. Changing this will create a new resource.
	InstanceConfig ConfigurationInstanceConfigInput
	// Specifies the region in which to create the AS configuration.
	// If omitted, the provider-level region will be used. Changing this will create a new resource.
	Region pulumi.StringPtrInput
	// Specifies the AS configuration name.
	// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
	// Changing this will create a new resource.
	ScalingConfigurationName pulumi.StringInput
}

func (ConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationArgs)(nil)).Elem()
}

type ConfigurationInput interface {
	pulumi.Input

	ToConfigurationOutput() ConfigurationOutput
	ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput
}

func (*Configuration) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (i *Configuration) ToConfigurationOutput() ConfigurationOutput {
	return i.ToConfigurationOutputWithContext(context.Background())
}

func (i *Configuration) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationOutput)
}

// ConfigurationArrayInput is an input type that accepts ConfigurationArray and ConfigurationArrayOutput values.
// You can construct a concrete instance of `ConfigurationArrayInput` via:
//
//	ConfigurationArray{ ConfigurationArgs{...} }
type ConfigurationArrayInput interface {
	pulumi.Input

	ToConfigurationArrayOutput() ConfigurationArrayOutput
	ToConfigurationArrayOutputWithContext(context.Context) ConfigurationArrayOutput
}

type ConfigurationArray []ConfigurationInput

func (ConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Configuration)(nil)).Elem()
}

func (i ConfigurationArray) ToConfigurationArrayOutput() ConfigurationArrayOutput {
	return i.ToConfigurationArrayOutputWithContext(context.Background())
}

func (i ConfigurationArray) ToConfigurationArrayOutputWithContext(ctx context.Context) ConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationArrayOutput)
}

// ConfigurationMapInput is an input type that accepts ConfigurationMap and ConfigurationMapOutput values.
// You can construct a concrete instance of `ConfigurationMapInput` via:
//
//	ConfigurationMap{ "key": ConfigurationArgs{...} }
type ConfigurationMapInput interface {
	pulumi.Input

	ToConfigurationMapOutput() ConfigurationMapOutput
	ToConfigurationMapOutputWithContext(context.Context) ConfigurationMapOutput
}

type ConfigurationMap map[string]ConfigurationInput

func (ConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Configuration)(nil)).Elem()
}

func (i ConfigurationMap) ToConfigurationMapOutput() ConfigurationMapOutput {
	return i.ToConfigurationMapOutputWithContext(context.Background())
}

func (i ConfigurationMap) ToConfigurationMapOutputWithContext(ctx context.Context) ConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationMapOutput)
}

type ConfigurationOutput struct{ *pulumi.OutputState }

func (ConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Configuration)(nil)).Elem()
}

func (o ConfigurationOutput) ToConfigurationOutput() ConfigurationOutput {
	return o
}

func (o ConfigurationOutput) ToConfigurationOutputWithContext(ctx context.Context) ConfigurationOutput {
	return o
}

func (o ConfigurationOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specifies the information about instance configuration.
// The object structure is documented below. Changing this will create a new resource.
func (o ConfigurationOutput) InstanceConfig() ConfigurationInstanceConfigOutput {
	return o.ApplyT(func(v *Configuration) ConfigurationInstanceConfigOutput { return v.InstanceConfig }).(ConfigurationInstanceConfigOutput)
}

// Specifies the region in which to create the AS configuration.
// If omitted, the provider-level region will be used. Changing this will create a new resource.
func (o ConfigurationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the AS configuration name.
// The name contains only letters, digits, underscores (_), and hyphens (-), and cannot exceed 64 characters.
// Changing this will create a new resource.
func (o ConfigurationOutput) ScalingConfigurationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.ScalingConfigurationName }).(pulumi.StringOutput)
}

// The AS configuration status, the value can be **Bound** or **Unbound**.
func (o ConfigurationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Configuration) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Configuration)(nil)).Elem()
}

func (o ConfigurationArrayOutput) ToConfigurationArrayOutput() ConfigurationArrayOutput {
	return o
}

func (o ConfigurationArrayOutput) ToConfigurationArrayOutputWithContext(ctx context.Context) ConfigurationArrayOutput {
	return o
}

func (o ConfigurationArrayOutput) Index(i pulumi.IntInput) ConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Configuration {
		return vs[0].([]*Configuration)[vs[1].(int)]
	}).(ConfigurationOutput)
}

type ConfigurationMapOutput struct{ *pulumi.OutputState }

func (ConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Configuration)(nil)).Elem()
}

func (o ConfigurationMapOutput) ToConfigurationMapOutput() ConfigurationMapOutput {
	return o
}

func (o ConfigurationMapOutput) ToConfigurationMapOutputWithContext(ctx context.Context) ConfigurationMapOutput {
	return o
}

func (o ConfigurationMapOutput) MapIndex(k pulumi.StringInput) ConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Configuration {
		return vs[0].(map[string]*Configuration)[vs[1].(string)]
	}).(ConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationInput)(nil)).Elem(), &Configuration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationArrayInput)(nil)).Elem(), ConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationMapInput)(nil)).Elem(), ConfigurationMap{})
	pulumi.RegisterOutputType(ConfigurationOutput{})
	pulumi.RegisterOutputType(ConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationMapOutput{})
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use this data source to filter FGS functions within SberCloud.
 *
 * ## Example Usage
 *
 * ### Obtain all public functions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.getFgsFunctions({});
 * ```
 *
 * ### Obtain specific public function by package name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.getFgsFunctions({
 *     packageName: "default",
 * });
 * ```
 */
export function getFgsFunctions(args?: GetFgsFunctionsArgs, opts?: pulumi.InvokeOptions): Promise<GetFgsFunctionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:index/getFgsFunctions:getFgsFunctions", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "name": args.name,
        "packageName": args.packageName,
        "region": args.region,
        "runtime": args.runtime,
        "urn": args.urn,
    }, opts);
}

/**
 * A collection of arguments for invoking getFgsFunctions.
 */
export interface GetFgsFunctionsArgs {
    /**
     * Specifies the ID of the enterprise project to which the functions belong.
     */
    enterpriseProjectId?: string;
    /**
     * Specifies the function name used to query the specified function.
     */
    name?: string;
    /**
     * Specifies the package name used to query the functions.
     */
    packageName?: string;
    /**
     * Specifies the region in which to obtain the functions.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the dependency package runtime used to query the functions.  
     * The valid values are as follows:
     * + **Java8**
     * + **Java11**
     * + **Node.js6.10**
     * + **Node.js8.10**
     * + **Node.js10.16**
     * + **Node.js12.13**
     * + **Node.js14.18**
     * + **Node.js16.17**
     * + **Node.js18.15**
     * + **Python2.7**
     * + **Python3.6**
     * + **Python3.9**
     * + **Python3.10**
     * + **Go1.x**
     * + **C#(.NET Core 2.1)**
     * + **C#(.NET Core 3.1)**
     * + **Custom**
     * + **PHP7.3**
     * + **http**
     * + **Custom Image**
     * + **Cangjie1.0**
     */
    runtime?: string;
    /**
     * Specifies the function URN used to query the specified function.
     */
    urn?: string;
}

/**
 * A collection of values returned by getFgsFunctions.
 */
export interface GetFgsFunctionsResult {
    /**
     * The enterprise project ID to which the function belongs.
     */
    readonly enterpriseProjectId?: string;
    /**
     * All functions that match the filter parameters.  
     * The functions structure is documented below.
     */
    readonly functions: outputs.GetFgsFunctionsFunction[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The function name.
     */
    readonly name?: string;
    readonly packageName?: string;
    readonly region: string;
    /**
     * The dependency package runtime of the function.
     */
    readonly runtime?: string;
    /**
     * The function URN.
     */
    readonly urn?: string;
}
/**
 * Use this data source to filter FGS functions within SberCloud.
 *
 * ## Example Usage
 *
 * ### Obtain all public functions
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.getFgsFunctions({});
 * ```
 *
 * ### Obtain specific public function by package name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const test = sbercloud.getFgsFunctions({
 *     packageName: "default",
 * });
 * ```
 */
export function getFgsFunctionsOutput(args?: GetFgsFunctionsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFgsFunctionsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:index/getFgsFunctions:getFgsFunctions", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "name": args.name,
        "packageName": args.packageName,
        "region": args.region,
        "runtime": args.runtime,
        "urn": args.urn,
    }, opts);
}

/**
 * A collection of arguments for invoking getFgsFunctions.
 */
export interface GetFgsFunctionsOutputArgs {
    /**
     * Specifies the ID of the enterprise project to which the functions belong.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the function name used to query the specified function.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the package name used to query the functions.
     */
    packageName?: pulumi.Input<string>;
    /**
     * Specifies the region in which to obtain the functions.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the dependency package runtime used to query the functions.  
     * The valid values are as follows:
     * + **Java8**
     * + **Java11**
     * + **Node.js6.10**
     * + **Node.js8.10**
     * + **Node.js10.16**
     * + **Node.js12.13**
     * + **Node.js14.18**
     * + **Node.js16.17**
     * + **Node.js18.15**
     * + **Python2.7**
     * + **Python3.6**
     * + **Python3.9**
     * + **Python3.10**
     * + **Go1.x**
     * + **C#(.NET Core 2.1)**
     * + **C#(.NET Core 3.1)**
     * + **Custom**
     * + **PHP7.3**
     * + **http**
     * + **Custom Image**
     * + **Cangjie1.0**
     */
    runtime?: pulumi.Input<string>;
    /**
     * Specifies the function URN used to query the specified function.
     */
    urn?: pulumi.Input<string>;
}

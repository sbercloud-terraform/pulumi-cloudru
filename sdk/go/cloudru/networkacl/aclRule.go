// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkacl

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type AclRule struct {
	pulumi.CustomResourceState

	Action               pulumi.StringOutput    `pulumi:"action"`
	Description          pulumi.StringPtrOutput `pulumi:"description"`
	DestinationIpAddress pulumi.StringPtrOutput `pulumi:"destinationIpAddress"`
	DestinationPort      pulumi.StringPtrOutput `pulumi:"destinationPort"`
	Enabled              pulumi.BoolPtrOutput   `pulumi:"enabled"`
	IpVersion            pulumi.IntPtrOutput    `pulumi:"ipVersion"`
	Name                 pulumi.StringOutput    `pulumi:"name"`
	Protocol             pulumi.StringOutput    `pulumi:"protocol"`
	Region               pulumi.StringOutput    `pulumi:"region"`
	SourceIpAddress      pulumi.StringPtrOutput `pulumi:"sourceIpAddress"`
	SourcePort           pulumi.StringPtrOutput `pulumi:"sourcePort"`
}

// NewAclRule registers a new resource with the given unique name, arguments, and options.
func NewAclRule(ctx *pulumi.Context,
	name string, args *AclRuleArgs, opts ...pulumi.ResourceOption) (*AclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclRule
	err := ctx.RegisterResource("cloudru:NetworkAcl/aclRule:AclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclRule gets an existing AclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclRuleState, opts ...pulumi.ResourceOption) (*AclRule, error) {
	var resource AclRule
	err := ctx.ReadResource("cloudru:NetworkAcl/aclRule:AclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclRule resources.
type aclRuleState struct {
	Action               *string `pulumi:"action"`
	Description          *string `pulumi:"description"`
	DestinationIpAddress *string `pulumi:"destinationIpAddress"`
	DestinationPort      *string `pulumi:"destinationPort"`
	Enabled              *bool   `pulumi:"enabled"`
	IpVersion            *int    `pulumi:"ipVersion"`
	Name                 *string `pulumi:"name"`
	Protocol             *string `pulumi:"protocol"`
	Region               *string `pulumi:"region"`
	SourceIpAddress      *string `pulumi:"sourceIpAddress"`
	SourcePort           *string `pulumi:"sourcePort"`
}

type AclRuleState struct {
	Action               pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DestinationIpAddress pulumi.StringPtrInput
	DestinationPort      pulumi.StringPtrInput
	Enabled              pulumi.BoolPtrInput
	IpVersion            pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	Protocol             pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	SourceIpAddress      pulumi.StringPtrInput
	SourcePort           pulumi.StringPtrInput
}

func (AclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRuleState)(nil)).Elem()
}

type aclRuleArgs struct {
	Action               string  `pulumi:"action"`
	Description          *string `pulumi:"description"`
	DestinationIpAddress *string `pulumi:"destinationIpAddress"`
	DestinationPort      *string `pulumi:"destinationPort"`
	Enabled              *bool   `pulumi:"enabled"`
	IpVersion            *int    `pulumi:"ipVersion"`
	Name                 *string `pulumi:"name"`
	Protocol             string  `pulumi:"protocol"`
	Region               *string `pulumi:"region"`
	SourceIpAddress      *string `pulumi:"sourceIpAddress"`
	SourcePort           *string `pulumi:"sourcePort"`
}

// The set of arguments for constructing a AclRule resource.
type AclRuleArgs struct {
	Action               pulumi.StringInput
	Description          pulumi.StringPtrInput
	DestinationIpAddress pulumi.StringPtrInput
	DestinationPort      pulumi.StringPtrInput
	Enabled              pulumi.BoolPtrInput
	IpVersion            pulumi.IntPtrInput
	Name                 pulumi.StringPtrInput
	Protocol             pulumi.StringInput
	Region               pulumi.StringPtrInput
	SourceIpAddress      pulumi.StringPtrInput
	SourcePort           pulumi.StringPtrInput
}

func (AclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRuleArgs)(nil)).Elem()
}

type AclRuleInput interface {
	pulumi.Input

	ToAclRuleOutput() AclRuleOutput
	ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput
}

func (*AclRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRule)(nil)).Elem()
}

func (i *AclRule) ToAclRuleOutput() AclRuleOutput {
	return i.ToAclRuleOutputWithContext(context.Background())
}

func (i *AclRule) ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleOutput)
}

// AclRuleArrayInput is an input type that accepts AclRuleArray and AclRuleArrayOutput values.
// You can construct a concrete instance of `AclRuleArrayInput` via:
//
//	AclRuleArray{ AclRuleArgs{...} }
type AclRuleArrayInput interface {
	pulumi.Input

	ToAclRuleArrayOutput() AclRuleArrayOutput
	ToAclRuleArrayOutputWithContext(context.Context) AclRuleArrayOutput
}

type AclRuleArray []AclRuleInput

func (AclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRule)(nil)).Elem()
}

func (i AclRuleArray) ToAclRuleArrayOutput() AclRuleArrayOutput {
	return i.ToAclRuleArrayOutputWithContext(context.Background())
}

func (i AclRuleArray) ToAclRuleArrayOutputWithContext(ctx context.Context) AclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleArrayOutput)
}

// AclRuleMapInput is an input type that accepts AclRuleMap and AclRuleMapOutput values.
// You can construct a concrete instance of `AclRuleMapInput` via:
//
//	AclRuleMap{ "key": AclRuleArgs{...} }
type AclRuleMapInput interface {
	pulumi.Input

	ToAclRuleMapOutput() AclRuleMapOutput
	ToAclRuleMapOutputWithContext(context.Context) AclRuleMapOutput
}

type AclRuleMap map[string]AclRuleInput

func (AclRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRule)(nil)).Elem()
}

func (i AclRuleMap) ToAclRuleMapOutput() AclRuleMapOutput {
	return i.ToAclRuleMapOutputWithContext(context.Background())
}

func (i AclRuleMap) ToAclRuleMapOutputWithContext(ctx context.Context) AclRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleMapOutput)
}

type AclRuleOutput struct{ *pulumi.OutputState }

func (AclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRule)(nil)).Elem()
}

func (o AclRuleOutput) ToAclRuleOutput() AclRuleOutput {
	return o
}

func (o AclRuleOutput) ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput {
	return o
}

func (o AclRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

func (o AclRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o AclRuleOutput) DestinationIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.DestinationIpAddress }).(pulumi.StringPtrOutput)
}

func (o AclRuleOutput) DestinationPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.DestinationPort }).(pulumi.StringPtrOutput)
}

func (o AclRuleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o AclRuleOutput) IpVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntPtrOutput { return v.IpVersion }).(pulumi.IntPtrOutput)
}

func (o AclRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AclRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o AclRuleOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AclRuleOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

func (o AclRuleOutput) SourcePort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.SourcePort }).(pulumi.StringPtrOutput)
}

type AclRuleArrayOutput struct{ *pulumi.OutputState }

func (AclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRule)(nil)).Elem()
}

func (o AclRuleArrayOutput) ToAclRuleArrayOutput() AclRuleArrayOutput {
	return o
}

func (o AclRuleArrayOutput) ToAclRuleArrayOutputWithContext(ctx context.Context) AclRuleArrayOutput {
	return o
}

func (o AclRuleArrayOutput) Index(i pulumi.IntInput) AclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclRule {
		return vs[0].([]*AclRule)[vs[1].(int)]
	}).(AclRuleOutput)
}

type AclRuleMapOutput struct{ *pulumi.OutputState }

func (AclRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRule)(nil)).Elem()
}

func (o AclRuleMapOutput) ToAclRuleMapOutput() AclRuleMapOutput {
	return o
}

func (o AclRuleMapOutput) ToAclRuleMapOutputWithContext(ctx context.Context) AclRuleMapOutput {
	return o
}

func (o AclRuleMapOutput) MapIndex(k pulumi.StringInput) AclRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclRule {
		return vs[0].(map[string]*AclRule)[vs[1].(string)]
	}).(AclRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleInput)(nil)).Elem(), &AclRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleArrayInput)(nil)).Elem(), AclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleMapInput)(nil)).Elem(), AclRuleMap{})
	pulumi.RegisterOutputType(AclRuleOutput{})
	pulumi.RegisterOutputType(AclRuleArrayOutput{})
	pulumi.RegisterOutputType(AclRuleMapOutput{})
}

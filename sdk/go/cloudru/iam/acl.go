// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a ACL resource within SberCloud IAM service. The ACL allowing user access only from specified IP address
// ranges and IPv4 CIDR blocks. The ACL take effect for IAM users under the Domain account rather than the account itself.
//
// Note: You _must_ have admin privileges in your SberCloud cloud to use this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewAcl(ctx, "acl", &iam.AclArgs{
//				Type: pulumi.String("console"),
//				IpCidrs: iam.AclIpCidrArray{
//					&iam.AclIpCidrArgs{
//						Cidr:        pulumi.String("159.138.39.192/32"),
//						Description: pulumi.String("This is a test ip address"),
//					},
//				},
//				IpRanges: iam.AclIpRangeArray{
//					&iam.AclIpRangeArgs{
//						Range:       pulumi.String("0.0.0.0-255.255.255.0"),
//						Description: pulumi.String("This is a test ip range"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Acl struct {
	pulumi.CustomResourceState

	// Specifies the IPv4 CIDR blocks from which console access or api access is allowed.
	// The `ipCidrs` cannot repeat. The structure is documented below.
	IpCidrs AclIpCidrArrayOutput `pulumi:"ipCidrs"`
	// Specifies the IP address ranges from which console access or api access is allowed.
	// The `ipRanges` cannot repeat. The structure is documented below.
	IpRanges AclIpRangeArrayOutput `pulumi:"ipRanges"`
	// Specifies the ACL is created through the Console or API. valid value are '
	// console' and 'api'. Changing this parameter will create a new ACL.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("sbercloud:Iam/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("sbercloud:Iam/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	// Specifies the IPv4 CIDR blocks from which console access or api access is allowed.
	// The `ipCidrs` cannot repeat. The structure is documented below.
	IpCidrs []AclIpCidr `pulumi:"ipCidrs"`
	// Specifies the IP address ranges from which console access or api access is allowed.
	// The `ipRanges` cannot repeat. The structure is documented below.
	IpRanges []AclIpRange `pulumi:"ipRanges"`
	// Specifies the ACL is created through the Console or API. valid value are '
	// console' and 'api'. Changing this parameter will create a new ACL.
	Type *string `pulumi:"type"`
}

type AclState struct {
	// Specifies the IPv4 CIDR blocks from which console access or api access is allowed.
	// The `ipCidrs` cannot repeat. The structure is documented below.
	IpCidrs AclIpCidrArrayInput
	// Specifies the IP address ranges from which console access or api access is allowed.
	// The `ipRanges` cannot repeat. The structure is documented below.
	IpRanges AclIpRangeArrayInput
	// Specifies the ACL is created through the Console or API. valid value are '
	// console' and 'api'. Changing this parameter will create a new ACL.
	Type pulumi.StringPtrInput
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	// Specifies the IPv4 CIDR blocks from which console access or api access is allowed.
	// The `ipCidrs` cannot repeat. The structure is documented below.
	IpCidrs []AclIpCidr `pulumi:"ipCidrs"`
	// Specifies the IP address ranges from which console access or api access is allowed.
	// The `ipRanges` cannot repeat. The structure is documented below.
	IpRanges []AclIpRange `pulumi:"ipRanges"`
	// Specifies the ACL is created through the Console or API. valid value are '
	// console' and 'api'. Changing this parameter will create a new ACL.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	// Specifies the IPv4 CIDR blocks from which console access or api access is allowed.
	// The `ipCidrs` cannot repeat. The structure is documented below.
	IpCidrs AclIpCidrArrayInput
	// Specifies the IP address ranges from which console access or api access is allowed.
	// The `ipRanges` cannot repeat. The structure is documented below.
	IpRanges AclIpRangeArrayInput
	// Specifies the ACL is created through the Console or API. valid value are '
	// console' and 'api'. Changing this parameter will create a new ACL.
	Type pulumi.StringInput
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(ctx context.Context) AclOutput
}

func (*Acl) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (i *Acl) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i *Acl) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//	AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

// AclMapInput is an input type that accepts AclMap and AclMapOutput values.
// You can construct a concrete instance of `AclMapInput` via:
//
//	AclMap{ "key": AclArgs{...} }
type AclMapInput interface {
	pulumi.Input

	ToAclMapOutput() AclMapOutput
	ToAclMapOutputWithContext(context.Context) AclMapOutput
}

type AclMap map[string]AclInput

func (AclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (i AclMap) ToAclMapOutput() AclMapOutput {
	return i.ToAclMapOutputWithContext(context.Background())
}

func (i AclMap) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMapOutput)
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

// Specifies the IPv4 CIDR blocks from which console access or api access is allowed.
// The `ipCidrs` cannot repeat. The structure is documented below.
func (o AclOutput) IpCidrs() AclIpCidrArrayOutput {
	return o.ApplyT(func(v *Acl) AclIpCidrArrayOutput { return v.IpCidrs }).(AclIpCidrArrayOutput)
}

// Specifies the IP address ranges from which console access or api access is allowed.
// The `ipRanges` cannot repeat. The structure is documented below.
func (o AclOutput) IpRanges() AclIpRangeArrayOutput {
	return o.ApplyT(func(v *Acl) AclIpRangeArrayOutput { return v.IpRanges }).(AclIpRangeArrayOutput)
}

// Specifies the ACL is created through the Console or API. valid value are '
// console' and 'api'. Changing this parameter will create a new ACL.
func (o AclOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].([]*Acl)[vs[1].(int)]
	}).(AclOutput)
}

type AclMapOutput struct{ *pulumi.OutputState }

func (AclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (o AclMapOutput) ToAclMapOutput() AclMapOutput {
	return o
}

func (o AclMapOutput) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return o
}

func (o AclMapOutput) MapIndex(k pulumi.StringInput) AclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].(map[string]*Acl)[vs[1].(string)]
	}).(AclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclInput)(nil)).Elem(), &Acl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclArrayInput)(nil)).Elem(), AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMapInput)(nil)).Elem(), AclMap{})
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclMapOutput{})
}

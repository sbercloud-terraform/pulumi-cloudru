// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type Volume struct {
	pulumi.CustomResourceState

	AllMetadata            pulumi.StringMapOutput      `pulumi:"allMetadata"`
	AllVolumeImageMetadata pulumi.StringMapOutput      `pulumi:"allVolumeImageMetadata"`
	Attachments            VolumeAttachmentArrayOutput `pulumi:"attachments"`
	// Deprecated: Deprecated
	AutoPay              pulumi.StringPtrOutput               `pulumi:"autoPay"`
	AutoRenew            pulumi.StringPtrOutput               `pulumi:"autoRenew"`
	AvailabilityZone     pulumi.StringOutput                  `pulumi:"availabilityZone"`
	BackupId             pulumi.StringPtrOutput               `pulumi:"backupId"`
	Bootable             pulumi.StringOutput                  `pulumi:"bootable"`
	Cascade              pulumi.BoolPtrOutput                 `pulumi:"cascade"`
	ChargingMode         pulumi.StringOutput                  `pulumi:"chargingMode"`
	CreatedAt            pulumi.StringOutput                  `pulumi:"createdAt"`
	DedicatedStorageId   pulumi.StringPtrOutput               `pulumi:"dedicatedStorageId"`
	DedicatedStorageName pulumi.StringOutput                  `pulumi:"dedicatedStorageName"`
	Description          pulumi.StringPtrOutput               `pulumi:"description"`
	DeviceType           pulumi.StringPtrOutput               `pulumi:"deviceType"`
	EnterpriseProjectId  pulumi.StringOutput                  `pulumi:"enterpriseProjectId"`
	ImageId              pulumi.StringPtrOutput               `pulumi:"imageId"`
	Iops                 pulumi.IntOutput                     `pulumi:"iops"`
	IopsAttributes       VolumeIopsAttributeArrayOutput       `pulumi:"iopsAttributes"`
	KmsId                pulumi.StringPtrOutput               `pulumi:"kmsId"`
	Links                VolumeLinkArrayOutput                `pulumi:"links"`
	Multiattach          pulumi.BoolPtrOutput                 `pulumi:"multiattach"`
	Name                 pulumi.StringOutput                  `pulumi:"name"`
	Period               pulumi.IntPtrOutput                  `pulumi:"period"`
	PeriodUnit           pulumi.StringPtrOutput               `pulumi:"periodUnit"`
	Region               pulumi.StringOutput                  `pulumi:"region"`
	SerialNumber         pulumi.StringOutput                  `pulumi:"serialNumber"`
	ServerId             pulumi.StringPtrOutput               `pulumi:"serverId"`
	ServiceType          pulumi.StringOutput                  `pulumi:"serviceType"`
	Size                 pulumi.IntOutput                     `pulumi:"size"`
	SnapshotId           pulumi.StringPtrOutput               `pulumi:"snapshotId"`
	Status               pulumi.StringOutput                  `pulumi:"status"`
	Tags                 pulumi.StringMapOutput               `pulumi:"tags"`
	Throughput           pulumi.IntOutput                     `pulumi:"throughput"`
	ThroughputAttributes VolumeThroughputAttributeArrayOutput `pulumi:"throughputAttributes"`
	UpdatedAt            pulumi.StringOutput                  `pulumi:"updatedAt"`
	VolumeType           pulumi.StringOutput                  `pulumi:"volumeType"`
	Wwn                  pulumi.StringOutput                  `pulumi:"wwn"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.VolumeType == nil {
		return nil, errors.New("invalid value for required argument 'VolumeType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("sbercloud:Evs/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("sbercloud:Evs/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	AllMetadata            map[string]string  `pulumi:"allMetadata"`
	AllVolumeImageMetadata map[string]string  `pulumi:"allVolumeImageMetadata"`
	Attachments            []VolumeAttachment `pulumi:"attachments"`
	// Deprecated: Deprecated
	AutoPay              *string                     `pulumi:"autoPay"`
	AutoRenew            *string                     `pulumi:"autoRenew"`
	AvailabilityZone     *string                     `pulumi:"availabilityZone"`
	BackupId             *string                     `pulumi:"backupId"`
	Bootable             *string                     `pulumi:"bootable"`
	Cascade              *bool                       `pulumi:"cascade"`
	ChargingMode         *string                     `pulumi:"chargingMode"`
	CreatedAt            *string                     `pulumi:"createdAt"`
	DedicatedStorageId   *string                     `pulumi:"dedicatedStorageId"`
	DedicatedStorageName *string                     `pulumi:"dedicatedStorageName"`
	Description          *string                     `pulumi:"description"`
	DeviceType           *string                     `pulumi:"deviceType"`
	EnterpriseProjectId  *string                     `pulumi:"enterpriseProjectId"`
	ImageId              *string                     `pulumi:"imageId"`
	Iops                 *int                        `pulumi:"iops"`
	IopsAttributes       []VolumeIopsAttribute       `pulumi:"iopsAttributes"`
	KmsId                *string                     `pulumi:"kmsId"`
	Links                []VolumeLink                `pulumi:"links"`
	Multiattach          *bool                       `pulumi:"multiattach"`
	Name                 *string                     `pulumi:"name"`
	Period               *int                        `pulumi:"period"`
	PeriodUnit           *string                     `pulumi:"periodUnit"`
	Region               *string                     `pulumi:"region"`
	SerialNumber         *string                     `pulumi:"serialNumber"`
	ServerId             *string                     `pulumi:"serverId"`
	ServiceType          *string                     `pulumi:"serviceType"`
	Size                 *int                        `pulumi:"size"`
	SnapshotId           *string                     `pulumi:"snapshotId"`
	Status               *string                     `pulumi:"status"`
	Tags                 map[string]string           `pulumi:"tags"`
	Throughput           *int                        `pulumi:"throughput"`
	ThroughputAttributes []VolumeThroughputAttribute `pulumi:"throughputAttributes"`
	UpdatedAt            *string                     `pulumi:"updatedAt"`
	VolumeType           *string                     `pulumi:"volumeType"`
	Wwn                  *string                     `pulumi:"wwn"`
}

type VolumeState struct {
	AllMetadata            pulumi.StringMapInput
	AllVolumeImageMetadata pulumi.StringMapInput
	Attachments            VolumeAttachmentArrayInput
	// Deprecated: Deprecated
	AutoPay              pulumi.StringPtrInput
	AutoRenew            pulumi.StringPtrInput
	AvailabilityZone     pulumi.StringPtrInput
	BackupId             pulumi.StringPtrInput
	Bootable             pulumi.StringPtrInput
	Cascade              pulumi.BoolPtrInput
	ChargingMode         pulumi.StringPtrInput
	CreatedAt            pulumi.StringPtrInput
	DedicatedStorageId   pulumi.StringPtrInput
	DedicatedStorageName pulumi.StringPtrInput
	Description          pulumi.StringPtrInput
	DeviceType           pulumi.StringPtrInput
	EnterpriseProjectId  pulumi.StringPtrInput
	ImageId              pulumi.StringPtrInput
	Iops                 pulumi.IntPtrInput
	IopsAttributes       VolumeIopsAttributeArrayInput
	KmsId                pulumi.StringPtrInput
	Links                VolumeLinkArrayInput
	Multiattach          pulumi.BoolPtrInput
	Name                 pulumi.StringPtrInput
	Period               pulumi.IntPtrInput
	PeriodUnit           pulumi.StringPtrInput
	Region               pulumi.StringPtrInput
	SerialNumber         pulumi.StringPtrInput
	ServerId             pulumi.StringPtrInput
	ServiceType          pulumi.StringPtrInput
	Size                 pulumi.IntPtrInput
	SnapshotId           pulumi.StringPtrInput
	Status               pulumi.StringPtrInput
	Tags                 pulumi.StringMapInput
	Throughput           pulumi.IntPtrInput
	ThroughputAttributes VolumeThroughputAttributeArrayInput
	UpdatedAt            pulumi.StringPtrInput
	VolumeType           pulumi.StringPtrInput
	Wwn                  pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// Deprecated: Deprecated
	AutoPay             *string           `pulumi:"autoPay"`
	AutoRenew           *string           `pulumi:"autoRenew"`
	AvailabilityZone    string            `pulumi:"availabilityZone"`
	BackupId            *string           `pulumi:"backupId"`
	Cascade             *bool             `pulumi:"cascade"`
	ChargingMode        *string           `pulumi:"chargingMode"`
	DedicatedStorageId  *string           `pulumi:"dedicatedStorageId"`
	Description         *string           `pulumi:"description"`
	DeviceType          *string           `pulumi:"deviceType"`
	EnterpriseProjectId *string           `pulumi:"enterpriseProjectId"`
	ImageId             *string           `pulumi:"imageId"`
	Iops                *int              `pulumi:"iops"`
	KmsId               *string           `pulumi:"kmsId"`
	Multiattach         *bool             `pulumi:"multiattach"`
	Name                *string           `pulumi:"name"`
	Period              *int              `pulumi:"period"`
	PeriodUnit          *string           `pulumi:"periodUnit"`
	Region              *string           `pulumi:"region"`
	ServerId            *string           `pulumi:"serverId"`
	Size                *int              `pulumi:"size"`
	SnapshotId          *string           `pulumi:"snapshotId"`
	Tags                map[string]string `pulumi:"tags"`
	Throughput          *int              `pulumi:"throughput"`
	VolumeType          string            `pulumi:"volumeType"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// Deprecated: Deprecated
	AutoPay             pulumi.StringPtrInput
	AutoRenew           pulumi.StringPtrInput
	AvailabilityZone    pulumi.StringInput
	BackupId            pulumi.StringPtrInput
	Cascade             pulumi.BoolPtrInput
	ChargingMode        pulumi.StringPtrInput
	DedicatedStorageId  pulumi.StringPtrInput
	Description         pulumi.StringPtrInput
	DeviceType          pulumi.StringPtrInput
	EnterpriseProjectId pulumi.StringPtrInput
	ImageId             pulumi.StringPtrInput
	Iops                pulumi.IntPtrInput
	KmsId               pulumi.StringPtrInput
	Multiattach         pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	Period              pulumi.IntPtrInput
	PeriodUnit          pulumi.StringPtrInput
	Region              pulumi.StringPtrInput
	ServerId            pulumi.StringPtrInput
	Size                pulumi.IntPtrInput
	SnapshotId          pulumi.StringPtrInput
	Tags                pulumi.StringMapInput
	Throughput          pulumi.IntPtrInput
	VolumeType          pulumi.StringInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

func (o VolumeOutput) AllMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.AllMetadata }).(pulumi.StringMapOutput)
}

func (o VolumeOutput) AllVolumeImageMetadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.AllVolumeImageMetadata }).(pulumi.StringMapOutput)
}

func (o VolumeOutput) Attachments() VolumeAttachmentArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeAttachmentArrayOutput { return v.Attachments }).(VolumeAttachmentArrayOutput)
}

// Deprecated: Deprecated
func (o VolumeOutput) AutoPay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.AutoPay }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) AutoRenew() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.AutoRenew }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o VolumeOutput) BackupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.BackupId }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) Bootable() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Bootable }).(pulumi.StringOutput)
}

func (o VolumeOutput) Cascade() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.Cascade }).(pulumi.BoolPtrOutput)
}

func (o VolumeOutput) ChargingMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ChargingMode }).(pulumi.StringOutput)
}

func (o VolumeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o VolumeOutput) DedicatedStorageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.DedicatedStorageId }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) DedicatedStorageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.DedicatedStorageName }).(pulumi.StringOutput)
}

func (o VolumeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.DeviceType }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o VolumeOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ImageId }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Iops }).(pulumi.IntOutput)
}

func (o VolumeOutput) IopsAttributes() VolumeIopsAttributeArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeIopsAttributeArrayOutput { return v.IopsAttributes }).(VolumeIopsAttributeArrayOutput)
}

func (o VolumeOutput) KmsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.KmsId }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) Links() VolumeLinkArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeLinkArrayOutput { return v.Links }).(VolumeLinkArrayOutput)
}

func (o VolumeOutput) Multiattach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolPtrOutput { return v.Multiattach }).(pulumi.BoolPtrOutput)
}

func (o VolumeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o VolumeOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

func (o VolumeOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o VolumeOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

func (o VolumeOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ServerId }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) ServiceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ServiceType }).(pulumi.StringOutput)
}

func (o VolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o VolumeOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

func (o VolumeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o VolumeOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o VolumeOutput) Throughput() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Throughput }).(pulumi.IntOutput)
}

func (o VolumeOutput) ThroughputAttributes() VolumeThroughputAttributeArrayOutput {
	return o.ApplyT(func(v *Volume) VolumeThroughputAttributeArrayOutput { return v.ThroughputAttributes }).(VolumeThroughputAttributeArrayOutput)
}

func (o VolumeOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o VolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

func (o VolumeOutput) Wwn() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Wwn }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}

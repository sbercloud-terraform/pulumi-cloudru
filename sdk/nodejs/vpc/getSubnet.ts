// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * This resource can prove useful when a module accepts a subnet id as an input variable and needs to, for example,
 * determine the id of the VPC that the subnet belongs to.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const subnet = sbercloud.Vpc.getSubnet({
 *     id: subnetId,
 * });
 * export const subnetVpcId = subnet.then(subnet => subnet.vpcId);
 * ```
 *
 * ## **Attributes Reference**
 *
 * In addition to all arguments above, the following attributes are exported:
 *
 * * `dnsList` - The IP address list of DNS servers on the subnet.
 *
 * * `dhcpEnable` - Whether the DHCP is enabled.
 *
 * * `subnetId` - The subnet (Native OpenStack API) ID.
 *
 * * `description` - The description of the subnet.
 *
 * * `ipv4SubnetId` - The ID of the IPv4 subnet (Native OpenStack API).
 *
 * * `ipv6Enable` - Whether the IPv6 is enabled.
 *
 * * `ipv6SubnetId` - The ID of the IPv6 subnet (Native OpenStack API).
 *
 * * `ipv6Cidr` - The IPv6 subnet CIDR block.
 *
 * * `ipv6Gateway` - The IPv6 subnet gateway.
 */
export function getSubnet(args?: GetSubnetArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Vpc/getSubnet:getSubnet", {
        "availabilityZone": args.availabilityZone,
        "cidr": args.cidr,
        "gatewayIp": args.gatewayIp,
        "id": args.id,
        "name": args.name,
        "primaryDns": args.primaryDns,
        "region": args.region,
        "secondaryDns": args.secondaryDns,
        "status": args.status,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnet.
 */
export interface GetSubnetArgs {
    /**
     * Specifies the availability zone (AZ) to which the subnet should belong.
     */
    availabilityZone?: string;
    /**
     * Specifies the network segment of specific subnet to retrieve. The value must be in CIDR
     * format.
     */
    cidr?: string;
    /**
     * Specifies the subnet gateway address of specific subnet.
     */
    gatewayIp?: string;
    /**
     * Specifies a resource ID in UUID format.
     */
    id?: string;
    /**
     * Specifies the name of the specific subnet to retrieve.
     */
    name?: string;
    /**
     * Specifies the IP address of DNS server 1 on the specific subnet.
     */
    primaryDns?: string;
    /**
     * Specifies the region in which to obtain the subnet. If omitted, the provider-level
     * region will be used.
     */
    region?: string;
    /**
     * Specifies the IP address of DNS server 2 on the specific subnet.
     */
    secondaryDns?: string;
    /**
     * Specifies the value can be ACTIVE, DOWN, UNKNOWN, or ERROR.
     */
    status?: string;
    /**
     * Specifies the id of the VPC that the desired subnet belongs to.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by getSubnet.
 */
export interface GetSubnetResult {
    readonly availabilityZone: string;
    readonly cidr: string;
    readonly description: string;
    readonly dhcpEnable: boolean;
    readonly dnsLists: string[];
    readonly gatewayIp: string;
    readonly id: string;
    readonly ipv4SubnetId: string;
    readonly ipv6Cidr: string;
    readonly ipv6Enable: boolean;
    readonly ipv6Gateway: string;
    readonly ipv6SubnetId: string;
    readonly name: string;
    readonly primaryDns: string;
    readonly region: string;
    readonly secondaryDns: string;
    readonly status: string;
    readonly subnetId: string;
    readonly vpcId: string;
}
/**
 * This resource can prove useful when a module accepts a subnet id as an input variable and needs to, for example,
 * determine the id of the VPC that the subnet belongs to.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const subnet = sbercloud.Vpc.getSubnet({
 *     id: subnetId,
 * });
 * export const subnetVpcId = subnet.then(subnet => subnet.vpcId);
 * ```
 *
 * ## **Attributes Reference**
 *
 * In addition to all arguments above, the following attributes are exported:
 *
 * * `dnsList` - The IP address list of DNS servers on the subnet.
 *
 * * `dhcpEnable` - Whether the DHCP is enabled.
 *
 * * `subnetId` - The subnet (Native OpenStack API) ID.
 *
 * * `description` - The description of the subnet.
 *
 * * `ipv4SubnetId` - The ID of the IPv4 subnet (Native OpenStack API).
 *
 * * `ipv6Enable` - Whether the IPv6 is enabled.
 *
 * * `ipv6SubnetId` - The ID of the IPv6 subnet (Native OpenStack API).
 *
 * * `ipv6Cidr` - The IPv6 subnet CIDR block.
 *
 * * `ipv6Gateway` - The IPv6 subnet gateway.
 */
export function getSubnetOutput(args?: GetSubnetOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSubnetResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Vpc/getSubnet:getSubnet", {
        "availabilityZone": args.availabilityZone,
        "cidr": args.cidr,
        "gatewayIp": args.gatewayIp,
        "id": args.id,
        "name": args.name,
        "primaryDns": args.primaryDns,
        "region": args.region,
        "secondaryDns": args.secondaryDns,
        "status": args.status,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSubnet.
 */
export interface GetSubnetOutputArgs {
    /**
     * Specifies the availability zone (AZ) to which the subnet should belong.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the network segment of specific subnet to retrieve. The value must be in CIDR
     * format.
     */
    cidr?: pulumi.Input<string>;
    /**
     * Specifies the subnet gateway address of specific subnet.
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Specifies a resource ID in UUID format.
     */
    id?: pulumi.Input<string>;
    /**
     * Specifies the name of the specific subnet to retrieve.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the IP address of DNS server 1 on the specific subnet.
     */
    primaryDns?: pulumi.Input<string>;
    /**
     * Specifies the region in which to obtain the subnet. If omitted, the provider-level
     * region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the IP address of DNS server 2 on the specific subnet.
     */
    secondaryDns?: pulumi.Input<string>;
    /**
     * Specifies the value can be ACTIVE, DOWN, UNKNOWN, or ERROR.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the id of the VPC that the desired subnet belongs to.
     */
    vpcId?: pulumi.Input<string>;
}

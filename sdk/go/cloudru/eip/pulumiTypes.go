// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eip

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

var _ = internal.GetEnvOrDefault

type GetBandwidthPublicip struct {
	Id        string `pulumi:"id"`
	IpAddress string `pulumi:"ipAddress"`
	IpVersion int    `pulumi:"ipVersion"`
	Type      string `pulumi:"type"`
}

// GetBandwidthPublicipInput is an input type that accepts GetBandwidthPublicipArgs and GetBandwidthPublicipOutput values.
// You can construct a concrete instance of `GetBandwidthPublicipInput` via:
//
//	GetBandwidthPublicipArgs{...}
type GetBandwidthPublicipInput interface {
	pulumi.Input

	ToGetBandwidthPublicipOutput() GetBandwidthPublicipOutput
	ToGetBandwidthPublicipOutputWithContext(context.Context) GetBandwidthPublicipOutput
}

type GetBandwidthPublicipArgs struct {
	Id        pulumi.StringInput `pulumi:"id"`
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	IpVersion pulumi.IntInput    `pulumi:"ipVersion"`
	Type      pulumi.StringInput `pulumi:"type"`
}

func (GetBandwidthPublicipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPublicip)(nil)).Elem()
}

func (i GetBandwidthPublicipArgs) ToGetBandwidthPublicipOutput() GetBandwidthPublicipOutput {
	return i.ToGetBandwidthPublicipOutputWithContext(context.Background())
}

func (i GetBandwidthPublicipArgs) ToGetBandwidthPublicipOutputWithContext(ctx context.Context) GetBandwidthPublicipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPublicipOutput)
}

// GetBandwidthPublicipArrayInput is an input type that accepts GetBandwidthPublicipArray and GetBandwidthPublicipArrayOutput values.
// You can construct a concrete instance of `GetBandwidthPublicipArrayInput` via:
//
//	GetBandwidthPublicipArray{ GetBandwidthPublicipArgs{...} }
type GetBandwidthPublicipArrayInput interface {
	pulumi.Input

	ToGetBandwidthPublicipArrayOutput() GetBandwidthPublicipArrayOutput
	ToGetBandwidthPublicipArrayOutputWithContext(context.Context) GetBandwidthPublicipArrayOutput
}

type GetBandwidthPublicipArray []GetBandwidthPublicipInput

func (GetBandwidthPublicipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPublicip)(nil)).Elem()
}

func (i GetBandwidthPublicipArray) ToGetBandwidthPublicipArrayOutput() GetBandwidthPublicipArrayOutput {
	return i.ToGetBandwidthPublicipArrayOutputWithContext(context.Background())
}

func (i GetBandwidthPublicipArray) ToGetBandwidthPublicipArrayOutputWithContext(ctx context.Context) GetBandwidthPublicipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPublicipArrayOutput)
}

type GetBandwidthPublicipOutput struct{ *pulumi.OutputState }

func (GetBandwidthPublicipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPublicip)(nil)).Elem()
}

func (o GetBandwidthPublicipOutput) ToGetBandwidthPublicipOutput() GetBandwidthPublicipOutput {
	return o
}

func (o GetBandwidthPublicipOutput) ToGetBandwidthPublicipOutputWithContext(ctx context.Context) GetBandwidthPublicipOutput {
	return o
}

func (o GetBandwidthPublicipOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPublicip) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBandwidthPublicipOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPublicip) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o GetBandwidthPublicipOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetBandwidthPublicip) int { return v.IpVersion }).(pulumi.IntOutput)
}

func (o GetBandwidthPublicipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPublicip) string { return v.Type }).(pulumi.StringOutput)
}

type GetBandwidthPublicipArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthPublicipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPublicip)(nil)).Elem()
}

func (o GetBandwidthPublicipArrayOutput) ToGetBandwidthPublicipArrayOutput() GetBandwidthPublicipArrayOutput {
	return o
}

func (o GetBandwidthPublicipArrayOutput) ToGetBandwidthPublicipArrayOutputWithContext(ctx context.Context) GetBandwidthPublicipArrayOutput {
	return o
}

func (o GetBandwidthPublicipArrayOutput) Index(i pulumi.IntInput) GetBandwidthPublicipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthPublicip {
		return vs[0].([]GetBandwidthPublicip)[vs[1].(int)]
	}).(GetBandwidthPublicipOutput)
}

type GetEipsEip struct {
	BandwidthId         string            `pulumi:"bandwidthId"`
	BandwidthName       string            `pulumi:"bandwidthName"`
	BandwidthShareType  string            `pulumi:"bandwidthShareType"`
	BandwidthSize       int               `pulumi:"bandwidthSize"`
	CreatedAt           string            `pulumi:"createdAt"`
	EnterpriseProjectId string            `pulumi:"enterpriseProjectId"`
	Id                  string            `pulumi:"id"`
	IpVersion           int               `pulumi:"ipVersion"`
	Name                string            `pulumi:"name"`
	PortId              string            `pulumi:"portId"`
	PrivateIp           string            `pulumi:"privateIp"`
	PublicIp            string            `pulumi:"publicIp"`
	PublicIpv6          string            `pulumi:"publicIpv6"`
	Status              string            `pulumi:"status"`
	Tags                map[string]string `pulumi:"tags"`
	Type                string            `pulumi:"type"`
}

// GetEipsEipInput is an input type that accepts GetEipsEipArgs and GetEipsEipOutput values.
// You can construct a concrete instance of `GetEipsEipInput` via:
//
//	GetEipsEipArgs{...}
type GetEipsEipInput interface {
	pulumi.Input

	ToGetEipsEipOutput() GetEipsEipOutput
	ToGetEipsEipOutputWithContext(context.Context) GetEipsEipOutput
}

type GetEipsEipArgs struct {
	BandwidthId         pulumi.StringInput    `pulumi:"bandwidthId"`
	BandwidthName       pulumi.StringInput    `pulumi:"bandwidthName"`
	BandwidthShareType  pulumi.StringInput    `pulumi:"bandwidthShareType"`
	BandwidthSize       pulumi.IntInput       `pulumi:"bandwidthSize"`
	CreatedAt           pulumi.StringInput    `pulumi:"createdAt"`
	EnterpriseProjectId pulumi.StringInput    `pulumi:"enterpriseProjectId"`
	Id                  pulumi.StringInput    `pulumi:"id"`
	IpVersion           pulumi.IntInput       `pulumi:"ipVersion"`
	Name                pulumi.StringInput    `pulumi:"name"`
	PortId              pulumi.StringInput    `pulumi:"portId"`
	PrivateIp           pulumi.StringInput    `pulumi:"privateIp"`
	PublicIp            pulumi.StringInput    `pulumi:"publicIp"`
	PublicIpv6          pulumi.StringInput    `pulumi:"publicIpv6"`
	Status              pulumi.StringInput    `pulumi:"status"`
	Tags                pulumi.StringMapInput `pulumi:"tags"`
	Type                pulumi.StringInput    `pulumi:"type"`
}

func (GetEipsEipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsEip)(nil)).Elem()
}

func (i GetEipsEipArgs) ToGetEipsEipOutput() GetEipsEipOutput {
	return i.ToGetEipsEipOutputWithContext(context.Background())
}

func (i GetEipsEipArgs) ToGetEipsEipOutputWithContext(ctx context.Context) GetEipsEipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipsEipOutput)
}

// GetEipsEipArrayInput is an input type that accepts GetEipsEipArray and GetEipsEipArrayOutput values.
// You can construct a concrete instance of `GetEipsEipArrayInput` via:
//
//	GetEipsEipArray{ GetEipsEipArgs{...} }
type GetEipsEipArrayInput interface {
	pulumi.Input

	ToGetEipsEipArrayOutput() GetEipsEipArrayOutput
	ToGetEipsEipArrayOutputWithContext(context.Context) GetEipsEipArrayOutput
}

type GetEipsEipArray []GetEipsEipInput

func (GetEipsEipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipsEip)(nil)).Elem()
}

func (i GetEipsEipArray) ToGetEipsEipArrayOutput() GetEipsEipArrayOutput {
	return i.ToGetEipsEipArrayOutputWithContext(context.Background())
}

func (i GetEipsEipArray) ToGetEipsEipArrayOutputWithContext(ctx context.Context) GetEipsEipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipsEipArrayOutput)
}

type GetEipsEipOutput struct{ *pulumi.OutputState }

func (GetEipsEipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipsEip)(nil)).Elem()
}

func (o GetEipsEipOutput) ToGetEipsEipOutput() GetEipsEipOutput {
	return o
}

func (o GetEipsEipOutput) ToGetEipsEipOutputWithContext(ctx context.Context) GetEipsEipOutput {
	return o
}

func (o GetEipsEipOutput) BandwidthId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthId }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) BandwidthName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthName }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) BandwidthShareType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.BandwidthShareType }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) BandwidthSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetEipsEip) int { return v.BandwidthSize }).(pulumi.IntOutput)
}

func (o GetEipsEipOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) EnterpriseProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.EnterpriseProjectId }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) IpVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetEipsEip) int { return v.IpVersion }).(pulumi.IntOutput)
}

func (o GetEipsEipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) PortId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PortId }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PrivateIp }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) PublicIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.PublicIpv6 }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetEipsEipOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetEipsEip) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func (o GetEipsEipOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipsEip) string { return v.Type }).(pulumi.StringOutput)
}

type GetEipsEipArrayOutput struct{ *pulumi.OutputState }

func (GetEipsEipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipsEip)(nil)).Elem()
}

func (o GetEipsEipArrayOutput) ToGetEipsEipArrayOutput() GetEipsEipArrayOutput {
	return o
}

func (o GetEipsEipArrayOutput) ToGetEipsEipArrayOutputWithContext(ctx context.Context) GetEipsEipArrayOutput {
	return o
}

func (o GetEipsEipArrayOutput) Index(i pulumi.IntInput) GetEipsEipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEipsEip {
		return vs[0].([]GetEipsEip)[vs[1].(int)]
	}).(GetEipsEipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthPublicipInput)(nil)).Elem(), GetBandwidthPublicipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthPublicipArrayInput)(nil)).Elem(), GetBandwidthPublicipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipsEipInput)(nil)).Elem(), GetEipsEipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipsEipArrayInput)(nil)).Elem(), GetEipsEipArray{})
	pulumi.RegisterOutputType(GetBandwidthPublicipOutput{})
	pulumi.RegisterOutputType(GetBandwidthPublicipArrayOutput{})
	pulumi.RegisterOutputType(GetEipsEipOutput{})
	pulumi.RegisterOutputType(GetEipsEipArrayOutput{})
}

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetApigApiResult',
    'AwaitableGetApigApiResult',
    'get_apig_api',
    'get_apig_api_output',
]

@pulumi.output_type
class GetApigApiResult:
    """
    A collection of values returned by getApigApi.
    """
    def __init__(__self__, api_id=None, authorizer_id=None, backend_params=None, backend_type=None, body_description=None, cors=None, description=None, env_id=None, env_name=None, failure_response=None, func_graph_policies=None, func_graphs=None, group_id=None, group_name=None, group_version=None, id=None, instance_id=None, matching=None, mock_policies=None, mocks=None, name=None, publish_id=None, published_at=None, region=None, registered_at=None, request_method=None, request_params=None, request_path=None, request_protocol=None, response_id=None, security_authentication=None, simple_authentication=None, success_response=None, tags=None, type=None, updated_at=None, web_policies=None, webs=None):
        if api_id and not isinstance(api_id, str):
            raise TypeError("Expected argument 'api_id' to be a str")
        pulumi.set(__self__, "api_id", api_id)
        if authorizer_id and not isinstance(authorizer_id, str):
            raise TypeError("Expected argument 'authorizer_id' to be a str")
        pulumi.set(__self__, "authorizer_id", authorizer_id)
        if backend_params and not isinstance(backend_params, list):
            raise TypeError("Expected argument 'backend_params' to be a list")
        pulumi.set(__self__, "backend_params", backend_params)
        if backend_type and not isinstance(backend_type, str):
            raise TypeError("Expected argument 'backend_type' to be a str")
        pulumi.set(__self__, "backend_type", backend_type)
        if body_description and not isinstance(body_description, str):
            raise TypeError("Expected argument 'body_description' to be a str")
        pulumi.set(__self__, "body_description", body_description)
        if cors and not isinstance(cors, bool):
            raise TypeError("Expected argument 'cors' to be a bool")
        pulumi.set(__self__, "cors", cors)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if env_id and not isinstance(env_id, str):
            raise TypeError("Expected argument 'env_id' to be a str")
        pulumi.set(__self__, "env_id", env_id)
        if env_name and not isinstance(env_name, str):
            raise TypeError("Expected argument 'env_name' to be a str")
        pulumi.set(__self__, "env_name", env_name)
        if failure_response and not isinstance(failure_response, str):
            raise TypeError("Expected argument 'failure_response' to be a str")
        pulumi.set(__self__, "failure_response", failure_response)
        if func_graph_policies and not isinstance(func_graph_policies, list):
            raise TypeError("Expected argument 'func_graph_policies' to be a list")
        pulumi.set(__self__, "func_graph_policies", func_graph_policies)
        if func_graphs and not isinstance(func_graphs, list):
            raise TypeError("Expected argument 'func_graphs' to be a list")
        pulumi.set(__self__, "func_graphs", func_graphs)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if group_name and not isinstance(group_name, str):
            raise TypeError("Expected argument 'group_name' to be a str")
        pulumi.set(__self__, "group_name", group_name)
        if group_version and not isinstance(group_version, str):
            raise TypeError("Expected argument 'group_version' to be a str")
        pulumi.set(__self__, "group_version", group_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if matching and not isinstance(matching, str):
            raise TypeError("Expected argument 'matching' to be a str")
        pulumi.set(__self__, "matching", matching)
        if mock_policies and not isinstance(mock_policies, list):
            raise TypeError("Expected argument 'mock_policies' to be a list")
        pulumi.set(__self__, "mock_policies", mock_policies)
        if mocks and not isinstance(mocks, list):
            raise TypeError("Expected argument 'mocks' to be a list")
        pulumi.set(__self__, "mocks", mocks)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if publish_id and not isinstance(publish_id, str):
            raise TypeError("Expected argument 'publish_id' to be a str")
        pulumi.set(__self__, "publish_id", publish_id)
        if published_at and not isinstance(published_at, str):
            raise TypeError("Expected argument 'published_at' to be a str")
        pulumi.set(__self__, "published_at", published_at)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if registered_at and not isinstance(registered_at, str):
            raise TypeError("Expected argument 'registered_at' to be a str")
        pulumi.set(__self__, "registered_at", registered_at)
        if request_method and not isinstance(request_method, str):
            raise TypeError("Expected argument 'request_method' to be a str")
        pulumi.set(__self__, "request_method", request_method)
        if request_params and not isinstance(request_params, list):
            raise TypeError("Expected argument 'request_params' to be a list")
        pulumi.set(__self__, "request_params", request_params)
        if request_path and not isinstance(request_path, str):
            raise TypeError("Expected argument 'request_path' to be a str")
        pulumi.set(__self__, "request_path", request_path)
        if request_protocol and not isinstance(request_protocol, str):
            raise TypeError("Expected argument 'request_protocol' to be a str")
        pulumi.set(__self__, "request_protocol", request_protocol)
        if response_id and not isinstance(response_id, str):
            raise TypeError("Expected argument 'response_id' to be a str")
        pulumi.set(__self__, "response_id", response_id)
        if security_authentication and not isinstance(security_authentication, str):
            raise TypeError("Expected argument 'security_authentication' to be a str")
        pulumi.set(__self__, "security_authentication", security_authentication)
        if simple_authentication and not isinstance(simple_authentication, bool):
            raise TypeError("Expected argument 'simple_authentication' to be a bool")
        pulumi.set(__self__, "simple_authentication", simple_authentication)
        if success_response and not isinstance(success_response, str):
            raise TypeError("Expected argument 'success_response' to be a str")
        pulumi.set(__self__, "success_response", success_response)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if web_policies and not isinstance(web_policies, list):
            raise TypeError("Expected argument 'web_policies' to be a list")
        pulumi.set(__self__, "web_policies", web_policies)
        if webs and not isinstance(webs, list):
            raise TypeError("Expected argument 'webs' to be a list")
        pulumi.set(__self__, "webs", webs)

    @_builtins.property
    @pulumi.getter(name="apiId")
    def api_id(self) -> _builtins.str:
        return pulumi.get(self, "api_id")

    @_builtins.property
    @pulumi.getter(name="authorizerId")
    def authorizer_id(self) -> _builtins.str:
        return pulumi.get(self, "authorizer_id")

    @_builtins.property
    @pulumi.getter(name="backendParams")
    def backend_params(self) -> Sequence['outputs.GetApigApiBackendParamResult']:
        return pulumi.get(self, "backend_params")

    @_builtins.property
    @pulumi.getter(name="backendType")
    def backend_type(self) -> _builtins.str:
        return pulumi.get(self, "backend_type")

    @_builtins.property
    @pulumi.getter(name="bodyDescription")
    def body_description(self) -> _builtins.str:
        return pulumi.get(self, "body_description")

    @_builtins.property
    @pulumi.getter
    def cors(self) -> _builtins.bool:
        return pulumi.get(self, "cors")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="envId")
    def env_id(self) -> _builtins.str:
        return pulumi.get(self, "env_id")

    @_builtins.property
    @pulumi.getter(name="envName")
    def env_name(self) -> _builtins.str:
        return pulumi.get(self, "env_name")

    @_builtins.property
    @pulumi.getter(name="failureResponse")
    def failure_response(self) -> _builtins.str:
        return pulumi.get(self, "failure_response")

    @_builtins.property
    @pulumi.getter(name="funcGraphPolicies")
    def func_graph_policies(self) -> Sequence['outputs.GetApigApiFuncGraphPolicyResult']:
        return pulumi.get(self, "func_graph_policies")

    @_builtins.property
    @pulumi.getter(name="funcGraphs")
    def func_graphs(self) -> Sequence['outputs.GetApigApiFuncGraphResult']:
        return pulumi.get(self, "func_graphs")

    @_builtins.property
    @pulumi.getter(name="groupId")
    def group_id(self) -> _builtins.str:
        return pulumi.get(self, "group_id")

    @_builtins.property
    @pulumi.getter(name="groupName")
    def group_name(self) -> _builtins.str:
        return pulumi.get(self, "group_name")

    @_builtins.property
    @pulumi.getter(name="groupVersion")
    def group_version(self) -> _builtins.str:
        return pulumi.get(self, "group_version")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def matching(self) -> _builtins.str:
        return pulumi.get(self, "matching")

    @_builtins.property
    @pulumi.getter(name="mockPolicies")
    def mock_policies(self) -> Sequence['outputs.GetApigApiMockPolicyResult']:
        return pulumi.get(self, "mock_policies")

    @_builtins.property
    @pulumi.getter
    def mocks(self) -> Sequence['outputs.GetApigApiMockResult']:
        return pulumi.get(self, "mocks")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="publishId")
    def publish_id(self) -> _builtins.str:
        return pulumi.get(self, "publish_id")

    @_builtins.property
    @pulumi.getter(name="publishedAt")
    def published_at(self) -> _builtins.str:
        return pulumi.get(self, "published_at")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="registeredAt")
    def registered_at(self) -> _builtins.str:
        return pulumi.get(self, "registered_at")

    @_builtins.property
    @pulumi.getter(name="requestMethod")
    def request_method(self) -> _builtins.str:
        return pulumi.get(self, "request_method")

    @_builtins.property
    @pulumi.getter(name="requestParams")
    def request_params(self) -> Sequence['outputs.GetApigApiRequestParamResult']:
        return pulumi.get(self, "request_params")

    @_builtins.property
    @pulumi.getter(name="requestPath")
    def request_path(self) -> _builtins.str:
        return pulumi.get(self, "request_path")

    @_builtins.property
    @pulumi.getter(name="requestProtocol")
    def request_protocol(self) -> _builtins.str:
        return pulumi.get(self, "request_protocol")

    @_builtins.property
    @pulumi.getter(name="responseId")
    def response_id(self) -> _builtins.str:
        return pulumi.get(self, "response_id")

    @_builtins.property
    @pulumi.getter(name="securityAuthentication")
    def security_authentication(self) -> _builtins.str:
        return pulumi.get(self, "security_authentication")

    @_builtins.property
    @pulumi.getter(name="simpleAuthentication")
    def simple_authentication(self) -> _builtins.bool:
        return pulumi.get(self, "simple_authentication")

    @_builtins.property
    @pulumi.getter(name="successResponse")
    def success_response(self) -> _builtins.str:
        return pulumi.get(self, "success_response")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="webPolicies")
    def web_policies(self) -> Sequence['outputs.GetApigApiWebPolicyResult']:
        return pulumi.get(self, "web_policies")

    @_builtins.property
    @pulumi.getter
    def webs(self) -> Sequence['outputs.GetApigApiWebResult']:
        return pulumi.get(self, "webs")


class AwaitableGetApigApiResult(GetApigApiResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApigApiResult(
            api_id=self.api_id,
            authorizer_id=self.authorizer_id,
            backend_params=self.backend_params,
            backend_type=self.backend_type,
            body_description=self.body_description,
            cors=self.cors,
            description=self.description,
            env_id=self.env_id,
            env_name=self.env_name,
            failure_response=self.failure_response,
            func_graph_policies=self.func_graph_policies,
            func_graphs=self.func_graphs,
            group_id=self.group_id,
            group_name=self.group_name,
            group_version=self.group_version,
            id=self.id,
            instance_id=self.instance_id,
            matching=self.matching,
            mock_policies=self.mock_policies,
            mocks=self.mocks,
            name=self.name,
            publish_id=self.publish_id,
            published_at=self.published_at,
            region=self.region,
            registered_at=self.registered_at,
            request_method=self.request_method,
            request_params=self.request_params,
            request_path=self.request_path,
            request_protocol=self.request_protocol,
            response_id=self.response_id,
            security_authentication=self.security_authentication,
            simple_authentication=self.simple_authentication,
            success_response=self.success_response,
            tags=self.tags,
            type=self.type,
            updated_at=self.updated_at,
            web_policies=self.web_policies,
            webs=self.webs)


def get_apig_api(api_id: Optional[_builtins.str] = None,
                 instance_id: Optional[_builtins.str] = None,
                 region: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApigApiResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getApigApi:getApigApi', __args__, opts=opts, typ=GetApigApiResult).value

    return AwaitableGetApigApiResult(
        api_id=pulumi.get(__ret__, 'api_id'),
        authorizer_id=pulumi.get(__ret__, 'authorizer_id'),
        backend_params=pulumi.get(__ret__, 'backend_params'),
        backend_type=pulumi.get(__ret__, 'backend_type'),
        body_description=pulumi.get(__ret__, 'body_description'),
        cors=pulumi.get(__ret__, 'cors'),
        description=pulumi.get(__ret__, 'description'),
        env_id=pulumi.get(__ret__, 'env_id'),
        env_name=pulumi.get(__ret__, 'env_name'),
        failure_response=pulumi.get(__ret__, 'failure_response'),
        func_graph_policies=pulumi.get(__ret__, 'func_graph_policies'),
        func_graphs=pulumi.get(__ret__, 'func_graphs'),
        group_id=pulumi.get(__ret__, 'group_id'),
        group_name=pulumi.get(__ret__, 'group_name'),
        group_version=pulumi.get(__ret__, 'group_version'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        matching=pulumi.get(__ret__, 'matching'),
        mock_policies=pulumi.get(__ret__, 'mock_policies'),
        mocks=pulumi.get(__ret__, 'mocks'),
        name=pulumi.get(__ret__, 'name'),
        publish_id=pulumi.get(__ret__, 'publish_id'),
        published_at=pulumi.get(__ret__, 'published_at'),
        region=pulumi.get(__ret__, 'region'),
        registered_at=pulumi.get(__ret__, 'registered_at'),
        request_method=pulumi.get(__ret__, 'request_method'),
        request_params=pulumi.get(__ret__, 'request_params'),
        request_path=pulumi.get(__ret__, 'request_path'),
        request_protocol=pulumi.get(__ret__, 'request_protocol'),
        response_id=pulumi.get(__ret__, 'response_id'),
        security_authentication=pulumi.get(__ret__, 'security_authentication'),
        simple_authentication=pulumi.get(__ret__, 'simple_authentication'),
        success_response=pulumi.get(__ret__, 'success_response'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        web_policies=pulumi.get(__ret__, 'web_policies'),
        webs=pulumi.get(__ret__, 'webs'))
def get_apig_api_output(api_id: Optional[pulumi.Input[_builtins.str]] = None,
                        instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                        region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApigApiResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiId'] = api_id
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getApigApi:getApigApi', __args__, opts=opts, typ=GetApigApiResult)
    return __ret__.apply(lambda __response__: GetApigApiResult(
        api_id=pulumi.get(__response__, 'api_id'),
        authorizer_id=pulumi.get(__response__, 'authorizer_id'),
        backend_params=pulumi.get(__response__, 'backend_params'),
        backend_type=pulumi.get(__response__, 'backend_type'),
        body_description=pulumi.get(__response__, 'body_description'),
        cors=pulumi.get(__response__, 'cors'),
        description=pulumi.get(__response__, 'description'),
        env_id=pulumi.get(__response__, 'env_id'),
        env_name=pulumi.get(__response__, 'env_name'),
        failure_response=pulumi.get(__response__, 'failure_response'),
        func_graph_policies=pulumi.get(__response__, 'func_graph_policies'),
        func_graphs=pulumi.get(__response__, 'func_graphs'),
        group_id=pulumi.get(__response__, 'group_id'),
        group_name=pulumi.get(__response__, 'group_name'),
        group_version=pulumi.get(__response__, 'group_version'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        matching=pulumi.get(__response__, 'matching'),
        mock_policies=pulumi.get(__response__, 'mock_policies'),
        mocks=pulumi.get(__response__, 'mocks'),
        name=pulumi.get(__response__, 'name'),
        publish_id=pulumi.get(__response__, 'publish_id'),
        published_at=pulumi.get(__response__, 'published_at'),
        region=pulumi.get(__response__, 'region'),
        registered_at=pulumi.get(__response__, 'registered_at'),
        request_method=pulumi.get(__response__, 'request_method'),
        request_params=pulumi.get(__response__, 'request_params'),
        request_path=pulumi.get(__response__, 'request_path'),
        request_protocol=pulumi.get(__response__, 'request_protocol'),
        response_id=pulumi.get(__response__, 'response_id'),
        security_authentication=pulumi.get(__response__, 'security_authentication'),
        simple_authentication=pulumi.get(__response__, 'simple_authentication'),
        success_response=pulumi.get(__response__, 'success_response'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        web_policies=pulumi.get(__response__, 'web_policies'),
        webs=pulumi.get(__response__, 'webs')))

# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDcsAccountsResult',
    'AwaitableGetDcsAccountsResult',
    'get_dcs_accounts',
    'get_dcs_accounts_output',
]

@pulumi.output_type
class GetDcsAccountsResult:
    """
    A collection of values returned by getDcsAccounts.
    """
    def __init__(__self__, account_name=None, account_role=None, account_type=None, accounts=None, description=None, id=None, instance_id=None, region=None, status=None):
        if account_name and not isinstance(account_name, str):
            raise TypeError("Expected argument 'account_name' to be a str")
        pulumi.set(__self__, "account_name", account_name)
        if account_role and not isinstance(account_role, str):
            raise TypeError("Expected argument 'account_role' to be a str")
        pulumi.set(__self__, "account_role", account_role)
        if account_type and not isinstance(account_type, str):
            raise TypeError("Expected argument 'account_type' to be a str")
        pulumi.set(__self__, "account_type", account_type)
        if accounts and not isinstance(accounts, list):
            raise TypeError("Expected argument 'accounts' to be a list")
        pulumi.set(__self__, "accounts", accounts)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_name")

    @_builtins.property
    @pulumi.getter(name="accountRole")
    def account_role(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_role")

    @_builtins.property
    @pulumi.getter(name="accountType")
    def account_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_type")

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetDcsAccountsAccountResult']:
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "status")


class AwaitableGetDcsAccountsResult(GetDcsAccountsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDcsAccountsResult(
            account_name=self.account_name,
            account_role=self.account_role,
            account_type=self.account_type,
            accounts=self.accounts,
            description=self.description,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region,
            status=self.status)


def get_dcs_accounts(account_name: Optional[_builtins.str] = None,
                     account_role: Optional[_builtins.str] = None,
                     account_type: Optional[_builtins.str] = None,
                     description: Optional[_builtins.str] = None,
                     instance_id: Optional[_builtins.str] = None,
                     region: Optional[_builtins.str] = None,
                     status: Optional[_builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDcsAccountsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['accountRole'] = account_role
    __args__['accountType'] = account_type
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDcsAccounts:getDcsAccounts', __args__, opts=opts, typ=GetDcsAccountsResult).value

    return AwaitableGetDcsAccountsResult(
        account_name=pulumi.get(__ret__, 'account_name'),
        account_role=pulumi.get(__ret__, 'account_role'),
        account_type=pulumi.get(__ret__, 'account_type'),
        accounts=pulumi.get(__ret__, 'accounts'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'),
        status=pulumi.get(__ret__, 'status'))
def get_dcs_accounts_output(account_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            account_role: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            account_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            description: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                            region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            status: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDcsAccountsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountName'] = account_name
    __args__['accountRole'] = account_role
    __args__['accountType'] = account_type
    __args__['description'] = description
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    __args__['status'] = status
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDcsAccounts:getDcsAccounts', __args__, opts=opts, typ=GetDcsAccountsResult)
    return __ret__.apply(lambda __response__: GetDcsAccountsResult(
        account_name=pulumi.get(__response__, 'account_name'),
        account_role=pulumi.get(__response__, 'account_role'),
        account_type=pulumi.get(__response__, 'account_type'),
        accounts=pulumi.get(__response__, 'accounts'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region'),
        status=pulumi.get(__response__, 'status')))

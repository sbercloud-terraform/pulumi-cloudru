# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDmsRocketmqMessageTracesResult',
    'AwaitableGetDmsRocketmqMessageTracesResult',
    'get_dms_rocketmq_message_traces',
    'get_dms_rocketmq_message_traces_output',
]

@pulumi.output_type
class GetDmsRocketmqMessageTracesResult:
    """
    A collection of values returned by getDmsRocketmqMessageTraces.
    """
    def __init__(__self__, id=None, instance_id=None, message_id=None, region=None, traces=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if message_id and not isinstance(message_id, str):
            raise TypeError("Expected argument 'message_id' to be a str")
        pulumi.set(__self__, "message_id", message_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if traces and not isinstance(traces, list):
            raise TypeError("Expected argument 'traces' to be a list")
        pulumi.set(__self__, "traces", traces)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter(name="messageId")
    def message_id(self) -> _builtins.str:
        """
        Specifies the message ID.
        """
        return pulumi.get(self, "message_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def traces(self) -> Sequence['outputs.GetDmsRocketmqMessageTracesTraceResult']:
        """
        Specifies the message trace list.
        """
        return pulumi.get(self, "traces")


class AwaitableGetDmsRocketmqMessageTracesResult(GetDmsRocketmqMessageTracesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDmsRocketmqMessageTracesResult(
            id=self.id,
            instance_id=self.instance_id,
            message_id=self.message_id,
            region=self.region,
            traces=self.traces)


def get_dms_rocketmq_message_traces(instance_id: Optional[_builtins.str] = None,
                                    message_id: Optional[_builtins.str] = None,
                                    region: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDmsRocketmqMessageTracesResult:
    """
    Use this data source to get the list of RocketMQ message traces.


    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str message_id: Specifies the message ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['messageId'] = message_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDmsRocketmqMessageTraces:getDmsRocketmqMessageTraces', __args__, opts=opts, typ=GetDmsRocketmqMessageTracesResult).value

    return AwaitableGetDmsRocketmqMessageTracesResult(
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        message_id=pulumi.get(__ret__, 'message_id'),
        region=pulumi.get(__ret__, 'region'),
        traces=pulumi.get(__ret__, 'traces'))
def get_dms_rocketmq_message_traces_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           message_id: Optional[pulumi.Input[_builtins.str]] = None,
                                           region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDmsRocketmqMessageTracesResult]:
    """
    Use this data source to get the list of RocketMQ message traces.


    :param _builtins.str instance_id: Specifies the instance ID.
    :param _builtins.str message_id: Specifies the message ID.
    :param _builtins.str region: Specifies the region in which to query the resource.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['messageId'] = message_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDmsRocketmqMessageTraces:getDmsRocketmqMessageTraces', __args__, opts=opts, typ=GetDmsRocketmqMessageTracesResult)
    return __ret__.apply(lambda __response__: GetDmsRocketmqMessageTracesResult(
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        message_id=pulumi.get(__response__, 'message_id'),
        region=pulumi.get(__response__, 'region'),
        traces=pulumi.get(__response__, 'traces')))

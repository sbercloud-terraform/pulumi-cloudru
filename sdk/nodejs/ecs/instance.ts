// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a ECS VM instance resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### Basic Instance
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const myaz = sbercloud.getAvailabilityZones({});
 * const myflavor = myaz.then(myaz => sbercloud.Ecs.getFlavors({
 *     availabilityZone: myaz.names?.[0],
 *     performanceType: "normal",
 *     cpuCoreCount: 2,
 *     memorySize: 4,
 * }));
 * const mynet = sbercloud.Vpc.getSubnet({
 *     name: "subnet-default",
 * });
 * const myimage = sbercloud.Ims.getImage({
 *     name: "Ubuntu 18.04 server 64bit",
 *     mostRecent: true,
 * });
 * const basic = new sbercloud.ecs.Instance("basic", {
 *     name: "basic",
 *     imageId: myimage.then(myimage => myimage.id),
 *     flavorId: myflavor.then(myflavor => myflavor.ids?.[0]),
 *     securityGroupIds: [secgroupId],
 *     availabilityZone: myaz.then(myaz => myaz.names?.[0]),
 *     networks: [{
 *         uuid: mynet.then(mynet => mynet.id),
 *     }],
 * });
 * ```
 *
 * ### Instance With Associated Eip
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const myinstance = new sbercloud.ecs.Instance("myinstance", {
 *     name: "myinstance",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     flavorId: "s6.small.1",
 *     keyPair: "my_key_pair_name",
 *     securityGroupIds: [secgroupId],
 *     availabilityZone: "ru-moscow-1a",
 *     networks: [{
 *         uuid: "55534eaa-533a-419d-9b40-ec427ea7195a",
 *     }],
 * });
 * const myeip = new sbercloud.vpc.Eip("myeip", {
 *     publicip: {
 *         type: "5_bgp",
 *     },
 *     bandwidth: {
 *         name: "test",
 *         size: 8,
 *         shareType: "PER",
 *         chargeMode: "traffic",
 *     },
 * });
 * const associated = new sbercloud.ecs.EipAssociate("associated", {
 *     publicIp: myeip.address,
 *     instanceId: myinstance.id,
 * });
 * ```
 *
 * ### Instance With Attached Volume
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const myvolume = new sbercloud.evs.Volume("myvolume", {
 *     name: "myvolume",
 *     availabilityZone: "ru-moscow-1a",
 *     volumeType: "SAS",
 *     size: 10,
 * });
 * const myinstance = new sbercloud.ecs.Instance("myinstance", {
 *     name: "myinstance",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     flavorId: "s6.small.1",
 *     keyPair: "my_key_pair_name",
 *     securityGroupIds: [secgroupId],
 *     availabilityZone: "ru-moscow-1a",
 *     networks: [{
 *         uuid: "55534eaa-533a-419d-9b40-ec427ea7195a",
 *     }],
 * });
 * const attached = new sbercloud.ecs.VolumeAttach("attached", {
 *     instanceId: myinstance.id,
 *     volumeId: myvolume.id,
 * });
 * ```
 *
 * ### Instance With Multiple Data Disks
 *
 * It's possible to specify multiple `dataDisks` entries to create an instance with multiple data disks, but we can't
 * ensure the volume attached order. So it's recommended to use `Instance With Attached Volume` above.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const multi_disk = new sbercloud.ecs.Instance("multi-disk", {
 *     name: "multi-net",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     flavorId: "s6.small.1",
 *     keyPair: "my_key_pair_name",
 *     securityGroupIds: [secgroupId],
 *     availabilityZone: "ru-moscow-1a",
 *     systemDiskType: "SAS",
 *     systemDiskSize: 40,
 *     dataDisks: [
 *         {
 *             type: "SAS",
 *             size: 10,
 *         },
 *         {
 *             type: "SAS",
 *             size: 20,
 *         },
 *     ],
 *     deleteDisksOnTermination: true,
 *     networks: [{
 *         uuid: "55534eaa-533a-419d-9b40-ec427ea7195a",
 *     }],
 * });
 * ```
 *
 * ### Instance With Multiple Networks
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const multi_net = new sbercloud.ecs.Instance("multi-net", {
 *     name: "multi-net",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     flavorId: "s6.small.1",
 *     keyPair: "my_key_pair_name",
 *     securityGroupIds: [secgroupId],
 *     availabilityZone: "ru-moscow-1a",
 *     networks: [
 *         {
 *             uuid: "55534eaa-533a-419d-9b40-ec427ea7195a",
 *         },
 *         {
 *             uuid: "3c4a0d74-24b9-46cf-9d7f-8b7a4dc2f65c",
 *         },
 *     ],
 * });
 * ```
 *
 * ### Instance with User Data (cloud-init)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const secgroupId = config.requireObject<any>("secgroupId");
 * const myinstance = new sbercloud.ecs.Instance("myinstance", {
 *     name: "instance",
 *     imageId: "ad091b52-742f-469e-8f3c-fd81cadf0743",
 *     flavorId: "s6.small.1",
 *     keyPair: "my_key_pair_name",
 *     securityGroupIds: [secgroupId],
 *     availabilityZone: "ru-moscow-1a",
 *     userData: `#cloud-config
 * hostname: instance_1.example.com
 * fqdn: instance_1.example.com`,
 *     networks: [{
 *         uuid: "55534eaa-533a-419d-9b40-ec427ea7195a",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Instances can be imported by their `id`. For example,
 *
 * ```sh
 * $ pulumi import sbercloud:Ecs/instance:Instance my_instance b11b407c-e604-4e8d-8bc4-92398320b847
 * ```
 *
 * Note that the imported state may not be identical to your resource definition, due to some attributes missing from the
 *
 * API response, security or some other reason.
 *
 * The missing attributes include: `admin_pass`, `user_data`, `data_disks`, `scheduler_hints`, `stop_before_destroy`,
 *
 * `delete_disks_on_termination`, `delete_eip_on_termination`, `network/access_network`, `bandwidth`, `eip_type`,
 *
 * `power_action` and arguments for pre-paid and spot price.
 *
 * It is generally recommended running `pulumi preview` after importing an instance.
 *
 * You can then decide if changes should be applied to the instance, or the resource definition should be updated to
 *
 * align with the instance. Also you can ignore changes as below.
 *
 * resource "sbercloud_compute_instance" "myinstance" {
 *
 *     ...
 *
 *   lifecycle {
 *
 *     ignore_changes = [
 *     
 *       user_data, data_disks,
 *     
 *     ]
 *
 *   }
 *
 * }
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Ecs/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The first detected Fixed IPv4 address or the Floating IP.
     */
    public /*out*/ readonly accessIpV4!: pulumi.Output<string>;
    /**
     * The first detected Fixed IPv6 address.
     */
    public /*out*/ readonly accessIpV6!: pulumi.Output<string>;
    /**
     * Specifies the administrative password to assign to the instance.
     */
    public readonly adminPass!: pulumi.Output<string | undefined>;
    /**
     * Specifies the IAM agency name which is created on IAM to provide
     * temporary credentials for ECS to access cloud services.
     */
    public readonly agencyName!: pulumi.Output<string>;
    /**
     * Specifies the agent list in comma-separated string.
     * Available agents are:
     */
    public readonly agentList!: pulumi.Output<string>;
    /**
     * @deprecated Deprecated
     */
    public readonly autoPay!: pulumi.Output<string | undefined>;
    public readonly autoRenew!: pulumi.Output<string | undefined>;
    public readonly autoTerminateTime!: pulumi.Output<string | undefined>;
    /**
     * Specifies the availability zone in which to create the instance.
     * Changing this creates a new instance.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Specifies the bandwidth of an EIP that will be automatically assigned to the instance.
     * The object structure is documented below. Changing this creates a new instance.
     */
    public readonly bandwidth!: pulumi.Output<outputs.Ecs.InstanceBandwidth | undefined>;
    public readonly chargingMode!: pulumi.Output<string>;
    /**
     * The creation time, in UTC format.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Specifies an array of one or more data disks to attach to the instance.
     * The dataDisks object structure is documented below. Changing this creates a new instance.
     */
    public readonly dataDisks!: pulumi.Output<outputs.Ecs.InstanceDataDisk[] | undefined>;
    /**
     * Specifies whether to delete the data disks when the instance is terminated.
     * Defaults to *false*. This parameter is valid if `chargingMode` is set to *postPaid*, and all data disks will be deleted
     * in *prePaid* charging mode.
     */
    public readonly deleteDisksOnTermination!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether the EIP is released when the instance is terminated.
     * Defaults to *true*.
     */
    public readonly deleteEipOnTermination!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies the description of the instance. The description consists of 0 to 85
     * characters, and can't contain '<' or '>'.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Specifies the ID of an *existing* EIP assigned to the instance.
     * This parameter and `eipType`, `bandwidth` are alternative. Changing this creates a new instance.
     */
    public readonly eipId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the type of an EIP that will be automatically assigned to the instance.
     * Available values are *5_bgp* (dynamic BGP) and *5_sbgp* (static BGP). Changing this creates a new instance.
     */
    public readonly eipType!: pulumi.Output<string | undefined>;
    /**
     * Specifies a unique id in UUID format of enterprise project.
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    public /*out*/ readonly expiredTime!: pulumi.Output<string>;
    /**
     * Specifies the flavor ID of the instance to be created.
     */
    public readonly flavorId!: pulumi.Output<string>;
    /**
     * The flavor name of the instance.
     */
    public readonly flavorName!: pulumi.Output<string>;
    public readonly hostname!: pulumi.Output<string>;
    /**
     * Required if `imageName` is empty. Specifies the image ID of the desired
     * image for the instance. Changing this creates a new instance.
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Required if `imageId` is empty. Specifies the name of the desired image
     * for the instance. Changing this creates a new instance.
     */
    public readonly imageName!: pulumi.Output<string>;
    /**
     * Specifies the SSH keypair name used for logging in to the instance.
     */
    public readonly keyPair!: pulumi.Output<string | undefined>;
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Specifies a unique name for the instance. The name consists of 1 to 64 characters,
     * including letters, digits, underscores (_), hyphens (-), and periods (.).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specifies an array of one or more networks to attach to the instance. The
     * network object structure is documented below. Changing this creates a new instance.
     */
    public readonly networks!: pulumi.Output<outputs.Ecs.InstanceNetwork[]>;
    public readonly period!: pulumi.Output<number | undefined>;
    public readonly periodUnit!: pulumi.Output<string | undefined>;
    /**
     * Specifies the power action to be done for the instance.
     * The valid values are *ON*, *OFF*, *REBOOT*, *FORCE-OFF* and *FORCE-REBOOT*.
     *
     * > **NOTE:** The `powerAction` is a one-time action.
     */
    public readonly powerAction!: pulumi.Output<string>;
    /**
     * Specifies the the private key of the keypair in use. This parameter is mandatory
     * when replacing or unbinding a keypair and the instance is in **Running** state.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    /**
     * The EIP address that is associted to the instance.
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the instance.
     * If omitted, the provider-level region will be used. Changing this creates a new instance.
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Specifies the scheduler with hints on how the instance should be launched. The
     * available hints are described below.
     */
    public readonly schedulerHints!: pulumi.Output<outputs.Ecs.InstanceSchedulerHint[]>;
    /**
     * Specifies an array of one or more security group IDs to associate with the
     * instance.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * An array of one or more security groups to associate with the instance.
     */
    public readonly securityGroups!: pulumi.Output<string[]>;
    public readonly spotDuration!: pulumi.Output<number | undefined>;
    public readonly spotDurationCount!: pulumi.Output<number>;
    public readonly spotMaximumPrice!: pulumi.Output<string | undefined>;
    /**
     * The status of the instance.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies whether to try stop instance gracefully before destroying it, thus giving
     * chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
     */
    public readonly stopBeforeDestroy!: pulumi.Output<boolean | undefined>;
    public readonly systemDiskDssPoolId!: pulumi.Output<string | undefined>;
    /**
     * The system disk voume ID.
     */
    public /*out*/ readonly systemDiskId!: pulumi.Output<string>;
    public readonly systemDiskIops!: pulumi.Output<number>;
    public readonly systemDiskKmsKeyId!: pulumi.Output<string>;
    /**
     * Specifies the system disk size in GB, The value range is 1 to 1024.
     * Shrinking the disk is not supported.
     */
    public readonly systemDiskSize!: pulumi.Output<number>;
    public readonly systemDiskThroughput!: pulumi.Output<number>;
    /**
     * Specifies the system disk type of the instance. Defaults to `GPSSD`.
     * Changing this creates a new instance.
     *
     * Available options are:
     * + `SAS`: high I/O disk type.
     * + `SSD`: ultra-high I/O disk type.
     * + `ESSD`: Extreme SSD type.
     */
    public readonly systemDiskType!: pulumi.Output<string>;
    /**
     * Specifies the key/value pairs to associate with the instance.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The last update time, in UTC format.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Specifies the user data to be injected during the instance creation. Text
     * and text files can be injected. Changing this creates a new instance.
     *
     * > **NOTE:** If the `userData` field is specified for a Linux ECS that is created using an image with Cloud-Init
     * installed, the `adminPass` field becomes invalid.
     */
    public readonly userData!: pulumi.Output<string | undefined>;
    /**
     * Specifies a user ID, required when using keyPair in prePaid charging mode.
     * Changing this creates a new instance.
     */
    public readonly userId!: pulumi.Output<string | undefined>;
    /**
     * An array of one or more disks to attach to the instance.
     * The volume attached object structure is documented below.
     */
    public /*out*/ readonly volumeAttacheds!: pulumi.Output<outputs.Ecs.InstanceVolumeAttached[]>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["accessIpV4"] = state ? state.accessIpV4 : undefined;
            resourceInputs["accessIpV6"] = state ? state.accessIpV6 : undefined;
            resourceInputs["adminPass"] = state ? state.adminPass : undefined;
            resourceInputs["agencyName"] = state ? state.agencyName : undefined;
            resourceInputs["agentList"] = state ? state.agentList : undefined;
            resourceInputs["autoPay"] = state ? state.autoPay : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["autoTerminateTime"] = state ? state.autoTerminateTime : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["chargingMode"] = state ? state.chargingMode : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dataDisks"] = state ? state.dataDisks : undefined;
            resourceInputs["deleteDisksOnTermination"] = state ? state.deleteDisksOnTermination : undefined;
            resourceInputs["deleteEipOnTermination"] = state ? state.deleteEipOnTermination : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eipId"] = state ? state.eipId : undefined;
            resourceInputs["eipType"] = state ? state.eipType : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["expiredTime"] = state ? state.expiredTime : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["flavorName"] = state ? state.flavorName : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["keyPair"] = state ? state.keyPair : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networks"] = state ? state.networks : undefined;
            resourceInputs["period"] = state ? state.period : undefined;
            resourceInputs["periodUnit"] = state ? state.periodUnit : undefined;
            resourceInputs["powerAction"] = state ? state.powerAction : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["schedulerHints"] = state ? state.schedulerHints : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["spotDuration"] = state ? state.spotDuration : undefined;
            resourceInputs["spotDurationCount"] = state ? state.spotDurationCount : undefined;
            resourceInputs["spotMaximumPrice"] = state ? state.spotMaximumPrice : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stopBeforeDestroy"] = state ? state.stopBeforeDestroy : undefined;
            resourceInputs["systemDiskDssPoolId"] = state ? state.systemDiskDssPoolId : undefined;
            resourceInputs["systemDiskId"] = state ? state.systemDiskId : undefined;
            resourceInputs["systemDiskIops"] = state ? state.systemDiskIops : undefined;
            resourceInputs["systemDiskKmsKeyId"] = state ? state.systemDiskKmsKeyId : undefined;
            resourceInputs["systemDiskSize"] = state ? state.systemDiskSize : undefined;
            resourceInputs["systemDiskThroughput"] = state ? state.systemDiskThroughput : undefined;
            resourceInputs["systemDiskType"] = state ? state.systemDiskType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["userData"] = state ? state.userData : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["volumeAttacheds"] = state ? state.volumeAttacheds : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.networks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networks'");
            }
            resourceInputs["adminPass"] = args?.adminPass ? pulumi.secret(args.adminPass) : undefined;
            resourceInputs["agencyName"] = args ? args.agencyName : undefined;
            resourceInputs["agentList"] = args ? args.agentList : undefined;
            resourceInputs["autoPay"] = args ? args.autoPay : undefined;
            resourceInputs["autoRenew"] = args ? args.autoRenew : undefined;
            resourceInputs["autoTerminateTime"] = args ? args.autoTerminateTime : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["chargingMode"] = args ? args.chargingMode : undefined;
            resourceInputs["dataDisks"] = args ? args.dataDisks : undefined;
            resourceInputs["deleteDisksOnTermination"] = args ? args.deleteDisksOnTermination : undefined;
            resourceInputs["deleteEipOnTermination"] = args ? args.deleteEipOnTermination : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eipId"] = args ? args.eipId : undefined;
            resourceInputs["eipType"] = args ? args.eipType : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["flavorName"] = args ? args.flavorName : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["keyPair"] = args ? args.keyPair : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networks"] = args ? args.networks : undefined;
            resourceInputs["period"] = args ? args.period : undefined;
            resourceInputs["periodUnit"] = args ? args.periodUnit : undefined;
            resourceInputs["powerAction"] = args ? args.powerAction : undefined;
            resourceInputs["privateKey"] = args?.privateKey ? pulumi.secret(args.privateKey) : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["schedulerHints"] = args ? args.schedulerHints : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["spotDuration"] = args ? args.spotDuration : undefined;
            resourceInputs["spotDurationCount"] = args ? args.spotDurationCount : undefined;
            resourceInputs["spotMaximumPrice"] = args ? args.spotMaximumPrice : undefined;
            resourceInputs["stopBeforeDestroy"] = args ? args.stopBeforeDestroy : undefined;
            resourceInputs["systemDiskDssPoolId"] = args ? args.systemDiskDssPoolId : undefined;
            resourceInputs["systemDiskIops"] = args ? args.systemDiskIops : undefined;
            resourceInputs["systemDiskKmsKeyId"] = args ? args.systemDiskKmsKeyId : undefined;
            resourceInputs["systemDiskSize"] = args ? args.systemDiskSize : undefined;
            resourceInputs["systemDiskThroughput"] = args ? args.systemDiskThroughput : undefined;
            resourceInputs["systemDiskType"] = args ? args.systemDiskType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userData"] = args ? args.userData : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["accessIpV4"] = undefined /*out*/;
            resourceInputs["accessIpV6"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["expiredTime"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["systemDiskId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["volumeAttacheds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["adminPass", "privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The first detected Fixed IPv4 address or the Floating IP.
     */
    accessIpV4?: pulumi.Input<string>;
    /**
     * The first detected Fixed IPv6 address.
     */
    accessIpV6?: pulumi.Input<string>;
    /**
     * Specifies the administrative password to assign to the instance.
     */
    adminPass?: pulumi.Input<string>;
    /**
     * Specifies the IAM agency name which is created on IAM to provide
     * temporary credentials for ECS to access cloud services.
     */
    agencyName?: pulumi.Input<string>;
    /**
     * Specifies the agent list in comma-separated string.
     * Available agents are:
     */
    agentList?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    autoTerminateTime?: pulumi.Input<string>;
    /**
     * Specifies the availability zone in which to create the instance.
     * Changing this creates a new instance.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the bandwidth of an EIP that will be automatically assigned to the instance.
     * The object structure is documented below. Changing this creates a new instance.
     */
    bandwidth?: pulumi.Input<inputs.Ecs.InstanceBandwidth>;
    chargingMode?: pulumi.Input<string>;
    /**
     * The creation time, in UTC format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more data disks to attach to the instance.
     * The dataDisks object structure is documented below. Changing this creates a new instance.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceDataDisk>[]>;
    /**
     * Specifies whether to delete the data disks when the instance is terminated.
     * Defaults to *false*. This parameter is valid if `chargingMode` is set to *postPaid*, and all data disks will be deleted
     * in *prePaid* charging mode.
     */
    deleteDisksOnTermination?: pulumi.Input<boolean>;
    /**
     * Specifies whether the EIP is released when the instance is terminated.
     * Defaults to *true*.
     */
    deleteEipOnTermination?: pulumi.Input<boolean>;
    /**
     * Specifies the description of the instance. The description consists of 0 to 85
     * characters, and can't contain '<' or '>'.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of an *existing* EIP assigned to the instance.
     * This parameter and `eipType`, `bandwidth` are alternative. Changing this creates a new instance.
     */
    eipId?: pulumi.Input<string>;
    /**
     * Specifies the type of an EIP that will be automatically assigned to the instance.
     * Available values are *5_bgp* (dynamic BGP) and *5_sbgp* (static BGP). Changing this creates a new instance.
     */
    eipType?: pulumi.Input<string>;
    /**
     * Specifies a unique id in UUID format of enterprise project.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    expiredTime?: pulumi.Input<string>;
    /**
     * Specifies the flavor ID of the instance to be created.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * The flavor name of the instance.
     */
    flavorName?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    /**
     * Required if `imageName` is empty. Specifies the image ID of the desired
     * image for the instance. Changing this creates a new instance.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Required if `imageId` is empty. Specifies the name of the desired image
     * for the instance. Changing this creates a new instance.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Specifies the SSH keypair name used for logging in to the instance.
     */
    keyPair?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies a unique name for the instance. The name consists of 1 to 64 characters,
     * including letters, digits, underscores (_), hyphens (-), and periods (.).
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more networks to attach to the instance. The
     * network object structure is documented below. Changing this creates a new instance.
     */
    networks?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceNetwork>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the power action to be done for the instance.
     * The valid values are *ON*, *OFF*, *REBOOT*, *FORCE-OFF* and *FORCE-REBOOT*.
     *
     * > **NOTE:** The `powerAction` is a one-time action.
     */
    powerAction?: pulumi.Input<string>;
    /**
     * Specifies the the private key of the keypair in use. This parameter is mandatory
     * when replacing or unbinding a keypair and the instance is in **Running** state.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The EIP address that is associted to the instance.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the instance.
     * If omitted, the provider-level region will be used. Changing this creates a new instance.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scheduler with hints on how the instance should be launched. The
     * available hints are described below.
     */
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceSchedulerHint>[]>;
    /**
     * Specifies an array of one or more security group IDs to associate with the
     * instance.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of one or more security groups to associate with the instance.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    spotDuration?: pulumi.Input<number>;
    spotDurationCount?: pulumi.Input<number>;
    spotMaximumPrice?: pulumi.Input<string>;
    /**
     * The status of the instance.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies whether to try stop instance gracefully before destroying it, thus giving
     * chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
     */
    stopBeforeDestroy?: pulumi.Input<boolean>;
    systemDiskDssPoolId?: pulumi.Input<string>;
    /**
     * The system disk voume ID.
     */
    systemDiskId?: pulumi.Input<string>;
    systemDiskIops?: pulumi.Input<number>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the system disk size in GB, The value range is 1 to 1024.
     * Shrinking the disk is not supported.
     */
    systemDiskSize?: pulumi.Input<number>;
    systemDiskThroughput?: pulumi.Input<number>;
    /**
     * Specifies the system disk type of the instance. Defaults to `GPSSD`.
     * Changing this creates a new instance.
     *
     * Available options are:
     * + `SAS`: high I/O disk type.
     * + `SSD`: ultra-high I/O disk type.
     * + `ESSD`: Extreme SSD type.
     */
    systemDiskType?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the instance.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The last update time, in UTC format.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Specifies the user data to be injected during the instance creation. Text
     * and text files can be injected. Changing this creates a new instance.
     *
     * > **NOTE:** If the `userData` field is specified for a Linux ECS that is created using an image with Cloud-Init
     * installed, the `adminPass` field becomes invalid.
     */
    userData?: pulumi.Input<string>;
    /**
     * Specifies a user ID, required when using keyPair in prePaid charging mode.
     * Changing this creates a new instance.
     */
    userId?: pulumi.Input<string>;
    /**
     * An array of one or more disks to attach to the instance.
     * The volume attached object structure is documented below.
     */
    volumeAttacheds?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceVolumeAttached>[]>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Specifies the administrative password to assign to the instance.
     */
    adminPass?: pulumi.Input<string>;
    /**
     * Specifies the IAM agency name which is created on IAM to provide
     * temporary credentials for ECS to access cloud services.
     */
    agencyName?: pulumi.Input<string>;
    /**
     * Specifies the agent list in comma-separated string.
     * Available agents are:
     */
    agentList?: pulumi.Input<string>;
    /**
     * @deprecated Deprecated
     */
    autoPay?: pulumi.Input<string>;
    autoRenew?: pulumi.Input<string>;
    autoTerminateTime?: pulumi.Input<string>;
    /**
     * Specifies the availability zone in which to create the instance.
     * Changing this creates a new instance.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Specifies the bandwidth of an EIP that will be automatically assigned to the instance.
     * The object structure is documented below. Changing this creates a new instance.
     */
    bandwidth?: pulumi.Input<inputs.Ecs.InstanceBandwidth>;
    chargingMode?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more data disks to attach to the instance.
     * The dataDisks object structure is documented below. Changing this creates a new instance.
     */
    dataDisks?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceDataDisk>[]>;
    /**
     * Specifies whether to delete the data disks when the instance is terminated.
     * Defaults to *false*. This parameter is valid if `chargingMode` is set to *postPaid*, and all data disks will be deleted
     * in *prePaid* charging mode.
     */
    deleteDisksOnTermination?: pulumi.Input<boolean>;
    /**
     * Specifies whether the EIP is released when the instance is terminated.
     * Defaults to *true*.
     */
    deleteEipOnTermination?: pulumi.Input<boolean>;
    /**
     * Specifies the description of the instance. The description consists of 0 to 85
     * characters, and can't contain '<' or '>'.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies the ID of an *existing* EIP assigned to the instance.
     * This parameter and `eipType`, `bandwidth` are alternative. Changing this creates a new instance.
     */
    eipId?: pulumi.Input<string>;
    /**
     * Specifies the type of an EIP that will be automatically assigned to the instance.
     * Available values are *5_bgp* (dynamic BGP) and *5_sbgp* (static BGP). Changing this creates a new instance.
     */
    eipType?: pulumi.Input<string>;
    /**
     * Specifies a unique id in UUID format of enterprise project.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies the flavor ID of the instance to be created.
     */
    flavorId?: pulumi.Input<string>;
    /**
     * The flavor name of the instance.
     */
    flavorName?: pulumi.Input<string>;
    hostname?: pulumi.Input<string>;
    /**
     * Required if `imageName` is empty. Specifies the image ID of the desired
     * image for the instance. Changing this creates a new instance.
     */
    imageId?: pulumi.Input<string>;
    /**
     * Required if `imageId` is empty. Specifies the name of the desired image
     * for the instance. Changing this creates a new instance.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Specifies the SSH keypair name used for logging in to the instance.
     */
    keyPair?: pulumi.Input<string>;
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies a unique name for the instance. The name consists of 1 to 64 characters,
     * including letters, digits, underscores (_), hyphens (-), and periods (.).
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies an array of one or more networks to attach to the instance. The
     * network object structure is documented below. Changing this creates a new instance.
     */
    networks: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceNetwork>[]>;
    period?: pulumi.Input<number>;
    periodUnit?: pulumi.Input<string>;
    /**
     * Specifies the power action to be done for the instance.
     * The valid values are *ON*, *OFF*, *REBOOT*, *FORCE-OFF* and *FORCE-REBOOT*.
     *
     * > **NOTE:** The `powerAction` is a one-time action.
     */
    powerAction?: pulumi.Input<string>;
    /**
     * Specifies the the private key of the keypair in use. This parameter is mandatory
     * when replacing or unbinding a keypair and the instance is in **Running** state.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the instance.
     * If omitted, the provider-level region will be used. Changing this creates a new instance.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the scheduler with hints on how the instance should be launched. The
     * available hints are described below.
     */
    schedulerHints?: pulumi.Input<pulumi.Input<inputs.Ecs.InstanceSchedulerHint>[]>;
    /**
     * Specifies an array of one or more security group IDs to associate with the
     * instance.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of one or more security groups to associate with the instance.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    spotDuration?: pulumi.Input<number>;
    spotDurationCount?: pulumi.Input<number>;
    spotMaximumPrice?: pulumi.Input<string>;
    /**
     * Specifies whether to try stop instance gracefully before destroying it, thus giving
     * chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
     */
    stopBeforeDestroy?: pulumi.Input<boolean>;
    systemDiskDssPoolId?: pulumi.Input<string>;
    systemDiskIops?: pulumi.Input<number>;
    systemDiskKmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the system disk size in GB, The value range is 1 to 1024.
     * Shrinking the disk is not supported.
     */
    systemDiskSize?: pulumi.Input<number>;
    systemDiskThroughput?: pulumi.Input<number>;
    /**
     * Specifies the system disk type of the instance. Defaults to `GPSSD`.
     * Changing this creates a new instance.
     *
     * Available options are:
     * + `SAS`: high I/O disk type.
     * + `SSD`: ultra-high I/O disk type.
     * + `ESSD`: Extreme SSD type.
     */
    systemDiskType?: pulumi.Input<string>;
    /**
     * Specifies the key/value pairs to associate with the instance.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the user data to be injected during the instance creation. Text
     * and text files can be injected. Changing this creates a new instance.
     *
     * > **NOTE:** If the `userData` field is specified for a Linux ECS that is created using an image with Cloud-Init
     * installed, the `adminPass` field becomes invalid.
     */
    userData?: pulumi.Input<string>;
    /**
     * Specifies a user ID, required when using keyPair in prePaid charging mode.
     * Changing this creates a new instance.
     */
    userId?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an RDS instance EIP associate resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const publicIp = config.requireObject<any>("publicIp");
 * const publicIpId = config.requireObject<any>("publicIpId");
 * const test = new sbercloud.rds.InstanceEipAssociate("test", {
 *     instanceId: instanceId,
 *     publicIp: publicIp,
 *     publicIpId: nodeId,
 * });
 * ```
 *
 * ## Import
 *
 * The RDS instance eip associate can be imported using the `id`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:Rds/instanceEipAssociate:InstanceEipAssociate test <id>
 * ```
 */
export class InstanceEipAssociate extends pulumi.CustomResource {
    /**
     * Get an existing InstanceEipAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceEipAssociateState, opts?: pulumi.CustomResourceOptions): InstanceEipAssociate {
        return new InstanceEipAssociate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Rds/instanceEipAssociate:InstanceEipAssociate';

    /**
     * Returns true if the given object is an instance of InstanceEipAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceEipAssociate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceEipAssociate.__pulumiType;
    }

    declare public readonly enableForceNew: pulumi.Output<string | undefined>;
    /**
     * Specifies the ID of an RDS instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * Specifies the EIP address to be bound.
     */
    declare public readonly publicIp: pulumi.Output<string>;
    /**
     * Specifies the EIP ID.
     */
    declare public readonly publicIpId: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a InstanceEipAssociate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceEipAssociateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceEipAssociateArgs | InstanceEipAssociateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceEipAssociateState | undefined;
            resourceInputs["enableForceNew"] = state?.enableForceNew;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["publicIpId"] = state?.publicIpId;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as InstanceEipAssociateArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.publicIp === undefined && !opts.urn) {
                throw new Error("Missing required property 'publicIp'");
            }
            if (args?.publicIpId === undefined && !opts.urn) {
                throw new Error("Missing required property 'publicIpId'");
            }
            resourceInputs["enableForceNew"] = args?.enableForceNew;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["publicIp"] = args?.publicIp;
            resourceInputs["publicIpId"] = args?.publicIpId;
            resourceInputs["region"] = args?.region;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceEipAssociate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceEipAssociate resources.
 */
export interface InstanceEipAssociateState {
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the ID of an RDS instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the EIP address to be bound.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * Specifies the EIP ID.
     */
    publicIpId?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceEipAssociate resource.
 */
export interface InstanceEipAssociateArgs {
    enableForceNew?: pulumi.Input<string>;
    /**
     * Specifies the ID of an RDS instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the EIP address to be bound.
     */
    publicIp: pulumi.Input<string>;
    /**
     * Specifies the EIP ID.
     */
    publicIpId: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a DCS configuration parameters within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceId = config.requireObject<any>("instanceId");
 * const projectId = config.requireObject<any>("projectId");
 * const config1 = new sbercloud.DcsParameters("config_1", {
 *     instanceId: instanceId,
 *     projectId: projectId,
 *     parameters: {
 *         timeout: "1000",
 *         maxclients: "2100",
 *         appendfsync: "always",
 *         "maxmemory-policy": "allkeys-random",
 *         "zset-max-ziplist-value": "128",
 *         "repl-timeout": "120",
 *     },
 * });
 * ```
 */
export class DcsParameters extends pulumi.CustomResource {
    /**
     * Get an existing DcsParameters resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DcsParametersState, opts?: pulumi.CustomResourceOptions): DcsParameters {
        return new DcsParameters(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/dcsParameters:DcsParameters';

    /**
     * Returns true if the given object is an instance of DcsParameters.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DcsParameters {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DcsParameters.__pulumiType;
    }

    /**
     * Indicates the parameter configuration defined by users based on the default parameters.
     */
    declare public /*out*/ readonly configurationParameters: pulumi.Output<outputs.DcsParametersConfigurationParameter[]>;
    /**
     * Specifies the ID of the instance.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * A mapping of parameters to assign to the DCS instance. 
     * Each parameter is represented by one key-value pair.
     */
    declare public readonly parameters: pulumi.Output<{[key: string]: string}>;
    /**
     * Specifies the project.
     */
    declare public readonly projectId: pulumi.Output<string>;

    /**
     * Create a DcsParameters resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DcsParametersArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DcsParametersArgs | DcsParametersState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DcsParametersState | undefined;
            resourceInputs["configurationParameters"] = state?.configurationParameters;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["parameters"] = state?.parameters;
            resourceInputs["projectId"] = state?.projectId;
        } else {
            const args = argsOrState as DcsParametersArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.parameters === undefined && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["parameters"] = args?.parameters;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["configurationParameters"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DcsParameters.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DcsParameters resources.
 */
export interface DcsParametersState {
    /**
     * Indicates the parameter configuration defined by users based on the default parameters.
     */
    configurationParameters?: pulumi.Input<pulumi.Input<inputs.DcsParametersConfigurationParameter>[]>;
    /**
     * Specifies the ID of the instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * A mapping of parameters to assign to the DCS instance. 
     * Each parameter is represented by one key-value pair.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the project.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DcsParameters resource.
 */
export interface DcsParametersArgs {
    /**
     * Specifies the ID of the instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * A mapping of parameters to assign to the DCS instance. 
     * Each parameter is represented by one key-value pair.
     */
    parameters: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Specifies the project.
     */
    projectId: pulumi.Input<string>;
}

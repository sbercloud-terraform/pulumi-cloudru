// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/internal"
)

// Use the data source to get the list of CFW IPS custom rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/sbercloud/cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			fwInstanceId := cfg.RequireObject("fwInstanceId")
//			objectId := cfg.RequireObject("objectId")
//			_, err := cfw.GetIpsCustomRules(ctx, &cfw.GetIpsCustomRulesArgs{
//				FwInstanceId: fwInstanceId,
//				ObjectId:     objectId,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetIpsCustomRules(ctx *pulumi.Context, args *GetIpsCustomRulesArgs, opts ...pulumi.InvokeOption) (*GetIpsCustomRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetIpsCustomRulesResult
	err := ctx.Invoke("sbercloud:Cfw/getIpsCustomRules:getIpsCustomRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIpsCustomRules.
type GetIpsCustomRulesArgs struct {
	// Specifies the action type.
	// The valid value can be **0** (log only) or **1** (reset/block).
	ActionType *int `pulumi:"actionType"`
	// Specifies the affected OS.
	// The valid values are as follows:
	// + **1**: Windows;
	// + **2**: Linux;
	// + **3**: FreeBSD;
	// + **4**: Solaris;
	// + **5**: Other Unix;
	// + **6**: Network device;
	// + **7**: MAC OS;
	// + **8**: IOS;
	// + **9**: Android;
	// + **10**: Other;
	AffectedOs *int `pulumi:"affectedOs"`
	// Specifies the attack type.
	// The valid values are as follows:
	// + **1**: access control;
	// + **2**: vulnerability scan;
	// + **3**: email phishing;
	// + **4**: vulnerability exploits;
	// + **5**: web attack;
	// + **6**: password cracking;
	// + **7**: hijacking attack;
	// + **8**: protocol exception;
	// + **9**: trojan;
	// + **10**: worm;
	// + **11**: buffer overflow;
	// + **12**: hacker tool;
	// + **13**: spyware;
	// + **14**: DDoS flood;
	// + **15**: application-layer DDoS attack;
	// + **16**: other suspicious behavior;
	// + **17**: suspicious DNS activity;
	// + **18**: phishing;
	// + **19**: spam;
	AttackType *int `pulumi:"attackType"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the firewall ID.
	FwInstanceId string `pulumi:"fwInstanceId"`
	// Specifies the IPS custom rule name.
	IpsName *string `pulumi:"ipsName"`
	// Specifies the protected object ID.
	ObjectId string `pulumi:"objectId"`
	// Specifies the protocol.
	// The valid values are as follows:
	// + **1**: FTP;
	// + **2**: TELNET;
	// + **3**: SMTP;
	// + **4**: DNS-TCP;
	// + **5**: DNS-UDP;
	// + **6**: DHCP;
	// + **7**: TFTP;
	// + **8**: FINGER;
	// + **9**: HTTP;
	// + **10**: POP3;
	// + **11**: SUNRPC-TCP;
	// + **12**: SUNRPC-UDP;
	// + **13**: NNTP;
	// + **14**: MSRPC-TCP;
	// + **15**: MSRPC-UDP;
	// + **16**: NETBIOS-NAME_TCP;
	// + **17**: NETBIOS-NAME_UDP;
	// + **18**: NETBIOS-SMB;
	// + **19**: NETBIOS-DATAGRAM;
	// + **20**: IMAP4;
	// + **21**: SNMP;
	// + **22**: LDAP;
	// + **23**: MSSQL;
	// + **24**: ORACLE;
	// + **25**: MYSQL;
	// + **26**: VOIP-SIP-TCP;
	// + **27**: VOIP-SIP-UDP;
	// + **28**: VOIP-H245;
	// + **29**: VOIP-Q931;
	// + **30**: OTHER-TCP;
	// + **31**: OTHER-UDP;
	Protocol *int `pulumi:"protocol"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region *string `pulumi:"region"`
	// Specifies the severity.
	// The valid values are as follows:
	// + **0**: critical;
	// + **1**: high;
	// + **2**: medium;
	// + **3**: low;
	Severity *int `pulumi:"severity"`
	// Specifies the affected software.
	// The valid values are as follows:
	// + **1**: ADOBE;
	// + **2**: APACHE;
	// + **3**: APPLE;
	// + **4**: CA;
	// + **5**: CISCO;
	// + **6**: GOOGLE CHROME;
	// + **7**: HP;
	// + **8**: IBM;
	// + **9**: IE;
	// + **10**: IIS;
	// + **11**: MCAFEE;
	// + **12**: MEDIAPLAYER;
	// + **13**: MICROSOFT.NET;
	// + **14**: MICROSOFT EDGE;
	// + **15**: MICROSOFT EXCHANGE;
	// + **16**: MICROSOFT OFFICE;
	// + **17**: MICROSOFT OUTLOOK;
	// + **18**: MICROSOFT SHAREPOINT;
	// + **19**: MICROSOFT WINDOWS;
	// + **20**: MOZILLA;
	// + **21**: MSSQL;
	// + **22**: MYSQL;
	// + **23**: NOVELL;
	// + **24**: ORACLE;
	// + **25**: SAMBA;
	// + **26**: SAMSUNG;
	// + **27**: SAP;
	// + **28**: SCADA;
	// + **29**: SQUID;
	// + **30**: SUN;
	// + **31**: SYMANTEC;
	// + **32**: TREND MICRO;
	// + **33**: VMWARE;
	// + **34**: WORDPRESS;
	// + **35**: OTHER;
	Software *int `pulumi:"software"`
}

// A collection of values returned by getIpsCustomRules.
type GetIpsCustomRulesResult struct {
	ActionType *int `pulumi:"actionType"`
	// The affected OS.
	AffectedOs *int `pulumi:"affectedOs"`
	// The attack type.
	AttackType          *int    `pulumi:"attackType"`
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	FwInstanceId        string  `pulumi:"fwInstanceId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The IPS rule name.
	IpsName  *string `pulumi:"ipsName"`
	ObjectId string  `pulumi:"objectId"`
	// The protocol.
	Protocol *int `pulumi:"protocol"`
	// The custom IPS rule records.
	Records []GetIpsCustomRulesRecord `pulumi:"records"`
	Region  string                    `pulumi:"region"`
	// The severity.
	Severity *int `pulumi:"severity"`
	// The affected software.
	Software *int `pulumi:"software"`
}

func GetIpsCustomRulesOutput(ctx *pulumi.Context, args GetIpsCustomRulesOutputArgs, opts ...pulumi.InvokeOption) GetIpsCustomRulesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetIpsCustomRulesResultOutput, error) {
			args := v.(GetIpsCustomRulesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Cfw/getIpsCustomRules:getIpsCustomRules", args, GetIpsCustomRulesResultOutput{}, options).(GetIpsCustomRulesResultOutput), nil
		}).(GetIpsCustomRulesResultOutput)
}

// A collection of arguments for invoking getIpsCustomRules.
type GetIpsCustomRulesOutputArgs struct {
	// Specifies the action type.
	// The valid value can be **0** (log only) or **1** (reset/block).
	ActionType pulumi.IntPtrInput `pulumi:"actionType"`
	// Specifies the affected OS.
	// The valid values are as follows:
	// + **1**: Windows;
	// + **2**: Linux;
	// + **3**: FreeBSD;
	// + **4**: Solaris;
	// + **5**: Other Unix;
	// + **6**: Network device;
	// + **7**: MAC OS;
	// + **8**: IOS;
	// + **9**: Android;
	// + **10**: Other;
	AffectedOs pulumi.IntPtrInput `pulumi:"affectedOs"`
	// Specifies the attack type.
	// The valid values are as follows:
	// + **1**: access control;
	// + **2**: vulnerability scan;
	// + **3**: email phishing;
	// + **4**: vulnerability exploits;
	// + **5**: web attack;
	// + **6**: password cracking;
	// + **7**: hijacking attack;
	// + **8**: protocol exception;
	// + **9**: trojan;
	// + **10**: worm;
	// + **11**: buffer overflow;
	// + **12**: hacker tool;
	// + **13**: spyware;
	// + **14**: DDoS flood;
	// + **15**: application-layer DDoS attack;
	// + **16**: other suspicious behavior;
	// + **17**: suspicious DNS activity;
	// + **18**: phishing;
	// + **19**: spam;
	AttackType pulumi.IntPtrInput `pulumi:"attackType"`
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the firewall ID.
	FwInstanceId pulumi.StringInput `pulumi:"fwInstanceId"`
	// Specifies the IPS custom rule name.
	IpsName pulumi.StringPtrInput `pulumi:"ipsName"`
	// Specifies the protected object ID.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// Specifies the protocol.
	// The valid values are as follows:
	// + **1**: FTP;
	// + **2**: TELNET;
	// + **3**: SMTP;
	// + **4**: DNS-TCP;
	// + **5**: DNS-UDP;
	// + **6**: DHCP;
	// + **7**: TFTP;
	// + **8**: FINGER;
	// + **9**: HTTP;
	// + **10**: POP3;
	// + **11**: SUNRPC-TCP;
	// + **12**: SUNRPC-UDP;
	// + **13**: NNTP;
	// + **14**: MSRPC-TCP;
	// + **15**: MSRPC-UDP;
	// + **16**: NETBIOS-NAME_TCP;
	// + **17**: NETBIOS-NAME_UDP;
	// + **18**: NETBIOS-SMB;
	// + **19**: NETBIOS-DATAGRAM;
	// + **20**: IMAP4;
	// + **21**: SNMP;
	// + **22**: LDAP;
	// + **23**: MSSQL;
	// + **24**: ORACLE;
	// + **25**: MYSQL;
	// + **26**: VOIP-SIP-TCP;
	// + **27**: VOIP-SIP-UDP;
	// + **28**: VOIP-H245;
	// + **29**: VOIP-Q931;
	// + **30**: OTHER-TCP;
	// + **31**: OTHER-UDP;
	Protocol pulumi.IntPtrInput `pulumi:"protocol"`
	// Specifies the region in which to query the resource.
	// If omitted, the provider-level region will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the severity.
	// The valid values are as follows:
	// + **0**: critical;
	// + **1**: high;
	// + **2**: medium;
	// + **3**: low;
	Severity pulumi.IntPtrInput `pulumi:"severity"`
	// Specifies the affected software.
	// The valid values are as follows:
	// + **1**: ADOBE;
	// + **2**: APACHE;
	// + **3**: APPLE;
	// + **4**: CA;
	// + **5**: CISCO;
	// + **6**: GOOGLE CHROME;
	// + **7**: HP;
	// + **8**: IBM;
	// + **9**: IE;
	// + **10**: IIS;
	// + **11**: MCAFEE;
	// + **12**: MEDIAPLAYER;
	// + **13**: MICROSOFT.NET;
	// + **14**: MICROSOFT EDGE;
	// + **15**: MICROSOFT EXCHANGE;
	// + **16**: MICROSOFT OFFICE;
	// + **17**: MICROSOFT OUTLOOK;
	// + **18**: MICROSOFT SHAREPOINT;
	// + **19**: MICROSOFT WINDOWS;
	// + **20**: MOZILLA;
	// + **21**: MSSQL;
	// + **22**: MYSQL;
	// + **23**: NOVELL;
	// + **24**: ORACLE;
	// + **25**: SAMBA;
	// + **26**: SAMSUNG;
	// + **27**: SAP;
	// + **28**: SCADA;
	// + **29**: SQUID;
	// + **30**: SUN;
	// + **31**: SYMANTEC;
	// + **32**: TREND MICRO;
	// + **33**: VMWARE;
	// + **34**: WORDPRESS;
	// + **35**: OTHER;
	Software pulumi.IntPtrInput `pulumi:"software"`
}

func (GetIpsCustomRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsCustomRulesArgs)(nil)).Elem()
}

// A collection of values returned by getIpsCustomRules.
type GetIpsCustomRulesResultOutput struct{ *pulumi.OutputState }

func (GetIpsCustomRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpsCustomRulesResult)(nil)).Elem()
}

func (o GetIpsCustomRulesResultOutput) ToGetIpsCustomRulesResultOutput() GetIpsCustomRulesResultOutput {
	return o
}

func (o GetIpsCustomRulesResultOutput) ToGetIpsCustomRulesResultOutputWithContext(ctx context.Context) GetIpsCustomRulesResultOutput {
	return o
}

func (o GetIpsCustomRulesResultOutput) ActionType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) *int { return v.ActionType }).(pulumi.IntPtrOutput)
}

// The affected OS.
func (o GetIpsCustomRulesResultOutput) AffectedOs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) *int { return v.AffectedOs }).(pulumi.IntPtrOutput)
}

// The attack type.
func (o GetIpsCustomRulesResultOutput) AttackType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) *int { return v.AttackType }).(pulumi.IntPtrOutput)
}

func (o GetIpsCustomRulesResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

func (o GetIpsCustomRulesResultOutput) FwInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) string { return v.FwInstanceId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetIpsCustomRulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The IPS rule name.
func (o GetIpsCustomRulesResultOutput) IpsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) *string { return v.IpsName }).(pulumi.StringPtrOutput)
}

func (o GetIpsCustomRulesResultOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The protocol.
func (o GetIpsCustomRulesResultOutput) Protocol() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) *int { return v.Protocol }).(pulumi.IntPtrOutput)
}

// The custom IPS rule records.
func (o GetIpsCustomRulesResultOutput) Records() GetIpsCustomRulesRecordArrayOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) []GetIpsCustomRulesRecord { return v.Records }).(GetIpsCustomRulesRecordArrayOutput)
}

func (o GetIpsCustomRulesResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) string { return v.Region }).(pulumi.StringOutput)
}

// The severity.
func (o GetIpsCustomRulesResultOutput) Severity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) *int { return v.Severity }).(pulumi.IntPtrOutput)
}

// The affected software.
func (o GetIpsCustomRulesResultOutput) Software() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetIpsCustomRulesResult) *int { return v.Software }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetIpsCustomRulesResultOutput{})
}

// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package evs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Provides an EVS snapshot resource.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/evs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myvolume, err := evs.NewVolume(ctx, "myvolume", &evs.VolumeArgs{
//				Name:             pulumi.String("volume"),
//				Description:      pulumi.String("my volume"),
//				VolumeType:       pulumi.String("SSD"),
//				Size:             pulumi.Int(20),
//				AvailabilityZone: pulumi.String("ru-moscow-1a"),
//				Tags: pulumi.StringMap{
//					"foo": pulumi.String("bar"),
//					"key": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = evs.NewSnapshot(ctx, "snapshot_1", &evs.SnapshotArgs{
//				Name:        pulumi.String("snapshot-001"),
//				Description: pulumi.String("Daily backup"),
//				VolumeId:    myvolume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// The following arguments are supported:
//
// * `region` - (Optional, String, ForceNew) The region in which to create the evs snapshot resource. If omitted, the provider-level region will be used. Changing this creates a new EVS snapshot resource.
//
// * `volumeId` - (Required, String, ForceNew) The id of the snapshot's source disk. Changing the parameter creates a new snapshot.
//
// * `name` - (Required, String) The name of the snapshot. The value can contain a maximum of 255 bytes.
//
// * `description` - (Optional, String) The description of the snapshot. The value can contain a maximum of 255 bytes.
//
// * `force` - (Optional, Bool) Specifies the flag for forcibly creating a snapshot. Default to false.
//
// In addition to all arguments above, the following attributes are exported:
//
// * `id` - The id of the snapshot.
//
// * `status` - The status of the snapshot.
//
// * `size` - The size of the snapshot in GB.
//
// EVS snapshot can be imported using the `snapshot id`, e.g.
type Snapshot struct {
	pulumi.CustomResourceState

	CreatedAt   pulumi.StringOutput    `pulumi:"createdAt"`
	Description pulumi.StringPtrOutput `pulumi:"description"`
	Force       pulumi.BoolPtrOutput   `pulumi:"force"`
	Metadata    pulumi.StringMapOutput `pulumi:"metadata"`
	// The script configuration value of this change is also the original value used for comparison with
	//  the new value next time the change is made. The corresponding parameter name is 'metadata'.
	MetadataOrigin pulumi.StringMapOutput `pulumi:"metadataOrigin"`
	Name           pulumi.StringOutput    `pulumi:"name"`
	Region         pulumi.StringOutput    `pulumi:"region"`
	Size           pulumi.IntOutput       `pulumi:"size"`
	Status         pulumi.StringOutput    `pulumi:"status"`
	UpdatedAt      pulumi.StringOutput    `pulumi:"updatedAt"`
	VolumeId       pulumi.StringOutput    `pulumi:"volumeId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("sbercloud:Evs/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("sbercloud:Evs/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	CreatedAt   *string           `pulumi:"createdAt"`
	Description *string           `pulumi:"description"`
	Force       *bool             `pulumi:"force"`
	Metadata    map[string]string `pulumi:"metadata"`
	// The script configuration value of this change is also the original value used for comparison with
	//  the new value next time the change is made. The corresponding parameter name is 'metadata'.
	MetadataOrigin map[string]string `pulumi:"metadataOrigin"`
	Name           *string           `pulumi:"name"`
	Region         *string           `pulumi:"region"`
	Size           *int              `pulumi:"size"`
	Status         *string           `pulumi:"status"`
	UpdatedAt      *string           `pulumi:"updatedAt"`
	VolumeId       *string           `pulumi:"volumeId"`
}

type SnapshotState struct {
	CreatedAt   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	Force       pulumi.BoolPtrInput
	Metadata    pulumi.StringMapInput
	// The script configuration value of this change is also the original value used for comparison with
	//  the new value next time the change is made. The corresponding parameter name is 'metadata'.
	MetadataOrigin pulumi.StringMapInput
	Name           pulumi.StringPtrInput
	Region         pulumi.StringPtrInput
	Size           pulumi.IntPtrInput
	Status         pulumi.StringPtrInput
	UpdatedAt      pulumi.StringPtrInput
	VolumeId       pulumi.StringPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	Description *string           `pulumi:"description"`
	Force       *bool             `pulumi:"force"`
	Metadata    map[string]string `pulumi:"metadata"`
	Name        *string           `pulumi:"name"`
	Region      *string           `pulumi:"region"`
	VolumeId    string            `pulumi:"volumeId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	Description pulumi.StringPtrInput
	Force       pulumi.BoolPtrInput
	Metadata    pulumi.StringMapInput
	Name        pulumi.StringPtrInput
	Region      pulumi.StringPtrInput
	VolumeId    pulumi.StringInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

func (o SnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o SnapshotOutput) Force() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.BoolPtrOutput { return v.Force }).(pulumi.BoolPtrOutput)
}

func (o SnapshotOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

// The script configuration value of this change is also the original value used for comparison with
//
//	the new value next time the change is made. The corresponding parameter name is 'metadata'.
func (o SnapshotOutput) MetadataOrigin() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringMapOutput { return v.MetadataOrigin }).(pulumi.StringMapOutput)
}

func (o SnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

func (o SnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SnapshotOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o SnapshotOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}

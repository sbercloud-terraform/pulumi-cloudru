// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a VPN gateway resource within SberCloud.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject<any>("name");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const eipId1 = config.requireObject<any>("eipId1");
 * const eipId2 = config.requireObject<any>("eipId2");
 * const test = sbercloud.getVpnGatewayAvailabilityZones({
 *     flavor: "professional1",
 *     attachmentType: "vpc",
 * });
 * const testVpnGateway = new sbercloud.VpnGateway("test", {
 *     name: name,
 *     vpcId: vpcId,
 *     localSubnets: [
 *         "192.168.0.0/24",
 *         "192.168.1.0/24",
 *     ],
 *     connectSubnet: subnetId,
 *     availabilityZones: [
 *         test.then(test => test.names?.[0]),
 *         test.then(test => test.names?.[1]),
 *     ],
 *     eip1: {
 *         id: eipId1,
 *     },
 *     eip2: {
 *         id: eipId2,
 *     },
 * });
 * ```
 *
 * ### Creating a VPN gateway with creating new EIPs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject<any>("name");
 * const vpcId = config.requireObject<any>("vpcId");
 * const subnetId = config.requireObject<any>("subnetId");
 * const bandwidthName1 = config.requireObject<any>("bandwidthName1");
 * const bandwidthName2 = config.requireObject<any>("bandwidthName2");
 * const test = sbercloud.getVpnGatewayAvailabilityZones({
 *     flavor: "professional1",
 *     attachmentType: "vpc",
 * });
 * const testVpnGateway = new sbercloud.VpnGateway("test", {
 *     name: name,
 *     vpcId: vpcId,
 *     localSubnets: [
 *         "192.168.0.0/24",
 *         "192.168.1.0/24",
 *     ],
 *     connectSubnet: subnetId,
 *     availabilityZones: [
 *         test.then(test => test.names?.[0]),
 *         test.then(test => test.names?.[1]),
 *     ],
 *     eip1: {
 *         bandwidthName: bandwidthName1,
 *         type: "5_bgp",
 *         bandwidthSize: 5,
 *         chargeMode: "traffic",
 *     },
 *     eip2: {
 *         bandwidthName: bandwidthName2,
 *         type: "5_bgp",
 *         bandwidthSize: 5,
 *         chargeMode: "traffic",
 *     },
 * });
 * ```
 *
 * ### Creating a private VPN gateway with Enterprise Router
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const name = config.requireObject<any>("name");
 * const erId = config.requireObject<any>("erId");
 * const accessVpcId = config.requireObject<any>("accessVpcId");
 * const accessSubnetId = config.requireObject<any>("accessSubnetId");
 * const accessPrivateIp1 = config.requireObject<any>("accessPrivateIp1");
 * const accessPrivateIp2 = config.requireObject<any>("accessPrivateIp2");
 * const test = sbercloud.getVpnGatewayAvailabilityZones({
 *     flavor: "professional1",
 *     attachmentType: "er",
 * });
 * const testVpnGateway = new sbercloud.VpnGateway("test", {
 *     name: name,
 *     networkType: "private",
 *     attachmentType: "er",
 *     erId: erId,
 *     availabilityZones: [
 *         test.then(test => test.names?.[0]),
 *         test.then(test => test.names?.[1]),
 *     ],
 *     accessVpcId: accessVpcId,
 *     accessSubnetId: accessSubnetId,
 *     accessPrivateIp1: accessPrivateIp1,
 *     accessPrivateIp2: accessPrivateIp2,
 * });
 * ```
 *
 * ### Creating a GM VPN gateway with certificate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const vpcId = config.requireObject<any>("vpcId");
 * const cidr = config.requireObject<any>("cidr");
 * const subnetId = config.requireObject<any>("subnetId");
 * const test = sbercloud.getVpnGatewayAvailabilityZones({
 *     attachmentType: "er",
 *     flavor: "GM",
 * });
 * const testVpnGateway = new sbercloud.VpnGateway("test", {
 *     name: "test",
 *     vpcId: vpcId,
 *     flavor: "GM",
 *     networkType: "private",
 *     localSubnets: [cidr],
 *     connectSubnet: subnetId,
 *     availabilityZones: [
 *         test.then(test => test.names?.[0]),
 *         test.then(test => test.names?.[1]),
 *     ],
 *     certificate: {
 *         name: "test",
 *         content: `-----BEGIN CERTIFICATE-----
 * THIS IS YOUR CERT CONTENT
 * -----END CERTIFICATE-----`,
 *         privateKey: `-----BEGIN EC PRIVATE KEY-----
 * THIS IS YOUR PRIVATE KEY CONTENT
 * -----END EC PRIVATE KEY-----`,
 *         certificateChain: `-----BEGIN CERTIFICATE-----
 * THIS IS YOUR CERTIFICATE CHAIN CONTENT
 * -----END CERTIFICATE-----`,
 *         encCertificate: `-----BEGIN CERTIFICATE-----
 * THIS IS YOUR ENC CERTIFICATE CONTENT
 * -----END CERTIFICATE-----`,
 *         encPrivateKey: `-----BEGIN EC PRIVATE KEY-----
 * THIS IS YOUR ENC PRIVATE KEY CONTENT
 * -----END EC PRIVATE KEY-----`,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The gateway can be imported using the `id`, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import sbercloud:index/vpnGateway:VpnGateway test <id>
 * ```
 */
export class VpnGateway extends pulumi.CustomResource {
    /**
     * Get an existing VpnGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnGatewayState, opts?: pulumi.CustomResourceOptions): VpnGateway {
        return new VpnGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:index/vpnGateway:VpnGateway';

    /**
     * Returns true if the given object is an instance of VpnGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnGateway.__pulumiType;
    }

    /**
     * The private IP 1 in private network type VPN gateway.
     * It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
     * Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly accessPrivateIp1!: pulumi.Output<string>;
    /**
     * The private IP 2 in private network type VPN gateway.
     * It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
     * Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly accessPrivateIp2!: pulumi.Output<string>;
    /**
     * The access subnet ID.
     * The default value is the value of `connectSubnet`.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly accessSubnetId!: pulumi.Output<string>;
    /**
     * The access VPC ID.
     * The default value is the value of `vpcId`.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly accessVpcId!: pulumi.Output<string>;
    /**
     * The ASN number of BGP. The value ranges from **1** to **4294967295**.
     * Defaults to **64512**
     *
     * Changing this parameter will create a new resource.
     */
    public readonly asn!: pulumi.Output<number | undefined>;
    /**
     * The attachment type. The value can be **vpc** and **er**.
     * Defaults to **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly attachmentType!: pulumi.Output<string | undefined>;
    /**
     * The list of availability zone IDs.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly availabilityZones!: pulumi.Output<string[]>;
    /**
     * The GM certificate of the **GM** flavor gateway.
     * The object structure is documented below.
     */
    public readonly certificate!: pulumi.Output<outputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly connectSubnet!: pulumi.Output<string>;
    /**
     * The create time of the gateway certificate.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    public readonly deleteEipOnTermination!: pulumi.Output<boolean | undefined>;
    /**
     * The master 1 IP in active-active VPN gateway or the master IP
     * in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
     * The object structure is documented below.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly eip1!: pulumi.Output<outputs.VpnGatewayEip1>;
    /**
     * The master 2 IP in active-active VPN gateway or the slave IP
     * in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
     * The object structure is documented below.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly eip2!: pulumi.Output<outputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID.
     *
     * <a name="Gateway_CreateRequestEip"></a>
     * The `eip1` or `eip2` block supports:
     */
    public readonly enterpriseProjectId!: pulumi.Output<string>;
    /**
     * The ER attachment ID.
     */
    public /*out*/ readonly erAttachmentId!: pulumi.Output<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     * This parameter is mandatory when `attachmentType` is **er**.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly erId!: pulumi.Output<string>;
    /**
     * The flavor of the VPN gateway.
     * The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly flavor!: pulumi.Output<string>;
    /**
     * The HA mode of VPN gateway. Valid values are **active-active** and
     * **active-standby**. The default value is **active-active**.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly haMode!: pulumi.Output<string>;
    /**
     * The list of local subnets.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     */
    public readonly localSubnets!: pulumi.Output<string[]>;
    public readonly masterEip!: pulumi.Output<outputs.VpnGatewayMasterEip>;
    /**
     * The name of the gateway certificate.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The network type. The value can be **public** and **private**.
     * Defaults to **public**.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly networkType!: pulumi.Output<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    public readonly region!: pulumi.Output<string>;
    public readonly slaveEip!: pulumi.Output<outputs.VpnGatewaySlaveEip>;
    /**
     * The status of the certificate.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Specifies the tags of the VPN gateway.
     *
     * <a name="Gateway_certificate_attr"></a>
     * The `certificate` block supports:
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The update time of the gateway certificate.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The number of used connection groups.
     */
    public /*out*/ readonly usedConnectionGroup!: pulumi.Output<number>;
    /**
     * The number of used connections.
     */
    public /*out*/ readonly usedConnectionNumber!: pulumi.Output<number>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a VpnGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnGatewayArgs | VpnGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnGatewayState | undefined;
            resourceInputs["accessPrivateIp1"] = state ? state.accessPrivateIp1 : undefined;
            resourceInputs["accessPrivateIp2"] = state ? state.accessPrivateIp2 : undefined;
            resourceInputs["accessSubnetId"] = state ? state.accessSubnetId : undefined;
            resourceInputs["accessVpcId"] = state ? state.accessVpcId : undefined;
            resourceInputs["asn"] = state ? state.asn : undefined;
            resourceInputs["attachmentType"] = state ? state.attachmentType : undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["connectSubnet"] = state ? state.connectSubnet : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deleteEipOnTermination"] = state ? state.deleteEipOnTermination : undefined;
            resourceInputs["eip1"] = state ? state.eip1 : undefined;
            resourceInputs["eip2"] = state ? state.eip2 : undefined;
            resourceInputs["enterpriseProjectId"] = state ? state.enterpriseProjectId : undefined;
            resourceInputs["erAttachmentId"] = state ? state.erAttachmentId : undefined;
            resourceInputs["erId"] = state ? state.erId : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["haMode"] = state ? state.haMode : undefined;
            resourceInputs["localSubnets"] = state ? state.localSubnets : undefined;
            resourceInputs["masterEip"] = state ? state.masterEip : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["slaveEip"] = state ? state.slaveEip : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["usedConnectionGroup"] = state ? state.usedConnectionGroup : undefined;
            resourceInputs["usedConnectionNumber"] = state ? state.usedConnectionNumber : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as VpnGatewayArgs | undefined;
            if ((!args || args.availabilityZones === undefined) && !opts.urn) {
                throw new Error("Missing required property 'availabilityZones'");
            }
            resourceInputs["accessPrivateIp1"] = args ? args.accessPrivateIp1 : undefined;
            resourceInputs["accessPrivateIp2"] = args ? args.accessPrivateIp2 : undefined;
            resourceInputs["accessSubnetId"] = args ? args.accessSubnetId : undefined;
            resourceInputs["accessVpcId"] = args ? args.accessVpcId : undefined;
            resourceInputs["asn"] = args ? args.asn : undefined;
            resourceInputs["attachmentType"] = args ? args.attachmentType : undefined;
            resourceInputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["connectSubnet"] = args ? args.connectSubnet : undefined;
            resourceInputs["deleteEipOnTermination"] = args ? args.deleteEipOnTermination : undefined;
            resourceInputs["eip1"] = args ? args.eip1 : undefined;
            resourceInputs["eip2"] = args ? args.eip2 : undefined;
            resourceInputs["enterpriseProjectId"] = args ? args.enterpriseProjectId : undefined;
            resourceInputs["erId"] = args ? args.erId : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["haMode"] = args ? args.haMode : undefined;
            resourceInputs["localSubnets"] = args ? args.localSubnets : undefined;
            resourceInputs["masterEip"] = args ? args.masterEip : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["slaveEip"] = args ? args.slaveEip : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["erAttachmentId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["usedConnectionGroup"] = undefined /*out*/;
            resourceInputs["usedConnectionNumber"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnGateway resources.
 */
export interface VpnGatewayState {
    /**
     * The private IP 1 in private network type VPN gateway.
     * It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
     * Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
     *
     * Changing this parameter will create a new resource.
     */
    accessPrivateIp1?: pulumi.Input<string>;
    /**
     * The private IP 2 in private network type VPN gateway.
     * It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
     * Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
     *
     * Changing this parameter will create a new resource.
     */
    accessPrivateIp2?: pulumi.Input<string>;
    /**
     * The access subnet ID.
     * The default value is the value of `connectSubnet`.
     *
     * Changing this parameter will create a new resource.
     */
    accessSubnetId?: pulumi.Input<string>;
    /**
     * The access VPC ID.
     * The default value is the value of `vpcId`.
     *
     * Changing this parameter will create a new resource.
     */
    accessVpcId?: pulumi.Input<string>;
    /**
     * The ASN number of BGP. The value ranges from **1** to **4294967295**.
     * Defaults to **64512**
     *
     * Changing this parameter will create a new resource.
     */
    asn?: pulumi.Input<number>;
    /**
     * The attachment type. The value can be **vpc** and **er**.
     * Defaults to **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The list of availability zone IDs.
     *
     * Changing this parameter will create a new resource.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The GM certificate of the **GM** flavor gateway.
     * The object structure is documented below.
     */
    certificate?: pulumi.Input<inputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    connectSubnet?: pulumi.Input<string>;
    /**
     * The create time of the gateway certificate.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    deleteEipOnTermination?: pulumi.Input<boolean>;
    /**
     * The master 1 IP in active-active VPN gateway or the master IP
     * in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
     * The object structure is documented below.
     *
     * Changing this parameter will create a new resource.
     */
    eip1?: pulumi.Input<inputs.VpnGatewayEip1>;
    /**
     * The master 2 IP in active-active VPN gateway or the slave IP
     * in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
     * The object structure is documented below.
     *
     * Changing this parameter will create a new resource.
     */
    eip2?: pulumi.Input<inputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID.
     *
     * <a name="Gateway_CreateRequestEip"></a>
     * The `eip1` or `eip2` block supports:
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The ER attachment ID.
     */
    erAttachmentId?: pulumi.Input<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     * This parameter is mandatory when `attachmentType` is **er**.
     *
     * Changing this parameter will create a new resource.
     */
    erId?: pulumi.Input<string>;
    /**
     * The flavor of the VPN gateway.
     * The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
     *
     * Changing this parameter will create a new resource.
     */
    flavor?: pulumi.Input<string>;
    /**
     * The HA mode of VPN gateway. Valid values are **active-active** and
     * **active-standby**. The default value is **active-active**.
     *
     * Changing this parameter will create a new resource.
     */
    haMode?: pulumi.Input<string>;
    /**
     * The list of local subnets.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     */
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    masterEip?: pulumi.Input<inputs.VpnGatewayMasterEip>;
    /**
     * The name of the gateway certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type. The value can be **public** and **private**.
     * Defaults to **public**.
     *
     * Changing this parameter will create a new resource.
     */
    networkType?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    slaveEip?: pulumi.Input<inputs.VpnGatewaySlaveEip>;
    /**
     * The status of the certificate.
     */
    status?: pulumi.Input<string>;
    /**
     * Specifies the tags of the VPN gateway.
     *
     * <a name="Gateway_certificate_attr"></a>
     * The `certificate` block supports:
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The update time of the gateway certificate.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The number of used connection groups.
     */
    usedConnectionGroup?: pulumi.Input<number>;
    /**
     * The number of used connections.
     */
    usedConnectionNumber?: pulumi.Input<number>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnGateway resource.
 */
export interface VpnGatewayArgs {
    /**
     * The private IP 1 in private network type VPN gateway.
     * It is the master IP 1 in **active-active** HA mode, and the master IP in **active-standby** HA mode.
     * Must declare the **access_private_ip_2** at the same time, and can not use the same IP value.
     *
     * Changing this parameter will create a new resource.
     */
    accessPrivateIp1?: pulumi.Input<string>;
    /**
     * The private IP 2 in private network type VPN gateway.
     * It is the master IP 2 in **active-active** HA mode, and the slave IP in **active-standby** HA mode.
     * Must declare the **access_private_ip_1** at the same time, and can not use the same IP value.
     *
     * Changing this parameter will create a new resource.
     */
    accessPrivateIp2?: pulumi.Input<string>;
    /**
     * The access subnet ID.
     * The default value is the value of `connectSubnet`.
     *
     * Changing this parameter will create a new resource.
     */
    accessSubnetId?: pulumi.Input<string>;
    /**
     * The access VPC ID.
     * The default value is the value of `vpcId`.
     *
     * Changing this parameter will create a new resource.
     */
    accessVpcId?: pulumi.Input<string>;
    /**
     * The ASN number of BGP. The value ranges from **1** to **4294967295**.
     * Defaults to **64512**
     *
     * Changing this parameter will create a new resource.
     */
    asn?: pulumi.Input<number>;
    /**
     * The attachment type. The value can be **vpc** and **er**.
     * Defaults to **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    attachmentType?: pulumi.Input<string>;
    /**
     * The list of availability zone IDs.
     *
     * Changing this parameter will create a new resource.
     */
    availabilityZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The GM certificate of the **GM** flavor gateway.
     * The object structure is documented below.
     */
    certificate?: pulumi.Input<inputs.VpnGatewayCertificate>;
    /**
     * The Network ID of the VPC subnet used by the VPN gateway.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    connectSubnet?: pulumi.Input<string>;
    /**
     * Whether to delete the EIP when the VPN gateway is deleted.
     */
    deleteEipOnTermination?: pulumi.Input<boolean>;
    /**
     * The master 1 IP in active-active VPN gateway or the master IP
     * in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
     * The object structure is documented below.
     *
     * Changing this parameter will create a new resource.
     */
    eip1?: pulumi.Input<inputs.VpnGatewayEip1>;
    /**
     * The master 2 IP in active-active VPN gateway or the slave IP
     * in active-standby VPN gateway. This parameter is mandatory when `networkType` is **public** or left empty.
     * The object structure is documented below.
     *
     * Changing this parameter will create a new resource.
     */
    eip2?: pulumi.Input<inputs.VpnGatewayEip2>;
    /**
     * The enterprise project ID.
     *
     * <a name="Gateway_CreateRequestEip"></a>
     * The `eip1` or `eip2` block supports:
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * The enterprise router ID to attach with to VPN gateway.
     * This parameter is mandatory when `attachmentType` is **er**.
     *
     * Changing this parameter will create a new resource.
     */
    erId?: pulumi.Input<string>;
    /**
     * The flavor of the VPN gateway.
     * The value can be **Basic**, **Professional1**, **Professional2** and **GM**. Defaults to **Professional1**.
     *
     * Changing this parameter will create a new resource.
     */
    flavor?: pulumi.Input<string>;
    /**
     * The HA mode of VPN gateway. Valid values are **active-active** and
     * **active-standby**. The default value is **active-active**.
     *
     * Changing this parameter will create a new resource.
     */
    haMode?: pulumi.Input<string>;
    /**
     * The list of local subnets.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     */
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    masterEip?: pulumi.Input<inputs.VpnGatewayMasterEip>;
    /**
     * The name of the gateway certificate.
     */
    name?: pulumi.Input<string>;
    /**
     * The network type. The value can be **public** and **private**.
     * Defaults to **public**.
     *
     * Changing this parameter will create a new resource.
     */
    networkType?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the resource.
     * If omitted, the provider-level region will be used. Changing this parameter will create a new resource.
     */
    region?: pulumi.Input<string>;
    slaveEip?: pulumi.Input<inputs.VpnGatewaySlaveEip>;
    /**
     * Specifies the tags of the VPN gateway.
     *
     * <a name="Gateway_certificate_attr"></a>
     * The `certificate` block supports:
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC to which the VPN gateway is connected.
     * This parameter is mandatory when `attachmentType` is **vpc**.
     *
     * Changing this parameter will create a new resource.
     */
    vpcId?: pulumi.Input<string>;
}

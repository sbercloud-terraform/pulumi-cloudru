// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query the available instances within sbercloud DMS service.
 *
 * ## Example Usage
 *
 * ### Query all instances with the keyword in the name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const keyword = config.requireObject<any>("keyword");
 * const test = sbercloud.Dms.getInstances({
 *     name: keyword,
 *     fuzzyMatch: true,
 * });
 * ```
 *
 * ### Query the instance with the specified name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceName = config.requireObject<any>("instanceName");
 * const test = sbercloud.Dms.getInstances({
 *     name: instanceName,
 * });
 * ```
 */
export function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sbercloud:Dms/getInstances:getInstances", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "fuzzyMatch": args.fuzzyMatch,
        "includeFailure": args.includeFailure,
        "instanceId": args.instanceId,
        "name": args.name,
        "region": args.region,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    /**
     * Specifies the enterprise project ID to which all instances of the list
     * belong.
     */
    enterpriseProjectId?: string;
    /**
     * Specifies whether to match the instance name fuzzily, the default is a exact
     * match (`flase`).
     */
    fuzzyMatch?: boolean;
    /**
     * Specifies whether the query results contain instances that failed to create.
     */
    includeFailure?: boolean;
    /**
     * Specifies the kafka instance ID to match exactly.
     */
    instanceId?: string;
    /**
     * Specifies the kafka instance name for data-source queries.
     */
    name?: string;
    /**
     * The region in which to query the kafka instance list.
     * If omitted, the provider-level region will be used.
     */
    region?: string;
    /**
     * Specifies the kafka instance status for data-source queries.
     */
    status?: string;
}

/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    /**
     * The enterprise project ID to which the instance belongs.
     */
    readonly enterpriseProjectId?: string;
    readonly fuzzyMatch?: boolean;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly includeFailure?: boolean;
    readonly instanceId?: string;
    /**
     * The result of the query's list of kafka instances. The structure is documented below.
     */
    readonly instances: outputs.Dms.GetInstancesInstance[];
    /**
     * The instance name.
     */
    readonly name?: string;
    readonly region?: string;
    /**
     * The instance status.
     */
    readonly status?: string;
}
/**
 * Use this data source to query the available instances within sbercloud DMS service.
 *
 * ## Example Usage
 *
 * ### Query all instances with the keyword in the name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const keyword = config.requireObject<any>("keyword");
 * const test = sbercloud.Dms.getInstances({
 *     name: keyword,
 *     fuzzyMatch: true,
 * });
 * ```
 *
 * ### Query the instance with the specified name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "pulumi-cloudru";
 *
 * const config = new pulumi.Config();
 * const instanceName = config.requireObject<any>("instanceName");
 * const test = sbercloud.Dms.getInstances({
 *     name: instanceName,
 * });
 * ```
 */
export function getInstancesOutput(args?: GetInstancesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetInstancesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sbercloud:Dms/getInstances:getInstances", {
        "enterpriseProjectId": args.enterpriseProjectId,
        "fuzzyMatch": args.fuzzyMatch,
        "includeFailure": args.includeFailure,
        "instanceId": args.instanceId,
        "name": args.name,
        "region": args.region,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesOutputArgs {
    /**
     * Specifies the enterprise project ID to which all instances of the list
     * belong.
     */
    enterpriseProjectId?: pulumi.Input<string>;
    /**
     * Specifies whether to match the instance name fuzzily, the default is a exact
     * match (`flase`).
     */
    fuzzyMatch?: pulumi.Input<boolean>;
    /**
     * Specifies whether the query results contain instances that failed to create.
     */
    includeFailure?: pulumi.Input<boolean>;
    /**
     * Specifies the kafka instance ID to match exactly.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Specifies the kafka instance name for data-source queries.
     */
    name?: pulumi.Input<string>;
    /**
     * The region in which to query the kafka instance list.
     * If omitted, the provider-level region will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Specifies the kafka instance status for data-source queries.
     */
    status?: pulumi.Input<string>;
}

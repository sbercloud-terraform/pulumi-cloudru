# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDmsRocketmqBrokerResult',
    'AwaitableGetDmsRocketmqBrokerResult',
    'get_dms_rocketmq_broker',
    'get_dms_rocketmq_broker_output',
]

@pulumi.output_type
class GetDmsRocketmqBrokerResult:
    """
    A collection of values returned by getDmsRocketmqBroker.
    """
    def __init__(__self__, brokers=None, id=None, instance_id=None, region=None):
        if brokers and not isinstance(brokers, list):
            raise TypeError("Expected argument 'brokers' to be a list")
        pulumi.set(__self__, "brokers", brokers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)

    @_builtins.property
    @pulumi.getter
    def brokers(self) -> Sequence[_builtins.str]:
        """
        Indicates the list of the brokers.
        """
        return pulumi.get(self, "brokers")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> _builtins.str:
        return pulumi.get(self, "instance_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")


class AwaitableGetDmsRocketmqBrokerResult(GetDmsRocketmqBrokerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDmsRocketmqBrokerResult(
            brokers=self.brokers,
            id=self.id,
            instance_id=self.instance_id,
            region=self.region)


def get_dms_rocketmq_broker(instance_id: Optional[_builtins.str] = None,
                            region: Optional[_builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDmsRocketmqBrokerResult:
    """
    Use this data source to get the list of DMS rocketMQ broker.


    :param _builtins.str instance_id: Specifies the ID of the rocketMQ instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getDmsRocketmqBroker:getDmsRocketmqBroker', __args__, opts=opts, typ=GetDmsRocketmqBrokerResult).value

    return AwaitableGetDmsRocketmqBrokerResult(
        brokers=pulumi.get(__ret__, 'brokers'),
        id=pulumi.get(__ret__, 'id'),
        instance_id=pulumi.get(__ret__, 'instance_id'),
        region=pulumi.get(__ret__, 'region'))
def get_dms_rocketmq_broker_output(instance_id: Optional[pulumi.Input[_builtins.str]] = None,
                                   region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDmsRocketmqBrokerResult]:
    """
    Use this data source to get the list of DMS rocketMQ broker.


    :param _builtins.str instance_id: Specifies the ID of the rocketMQ instance.
    :param _builtins.str region: Specifies the region in which to query the data source.
           If omitted, the provider-level region will be used.
    """
    __args__ = dict()
    __args__['instanceId'] = instance_id
    __args__['region'] = region
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getDmsRocketmqBroker:getDmsRocketmqBroker', __args__, opts=opts, typ=GetDmsRocketmqBrokerResult)
    return __ret__.apply(lambda __response__: GetDmsRocketmqBrokerResult(
        brokers=pulumi.get(__response__, 'brokers'),
        id=pulumi.get(__response__, 'id'),
        instance_id=pulumi.get(__response__, 'instance_id'),
        region=pulumi.get(__response__, 'region')))

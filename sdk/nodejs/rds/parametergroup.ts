// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Parametergroup extends pulumi.CustomResource {
    /**
     * Get an existing Parametergroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ParametergroupState, opts?: pulumi.CustomResourceOptions): Parametergroup {
        return new Parametergroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Rds/parametergroup:Parametergroup';

    /**
     * Returns true if the given object is an instance of Parametergroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Parametergroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Parametergroup.__pulumiType;
    }

    declare public /*out*/ readonly configurationParameters: pulumi.Output<outputs.Rds.ParametergroupConfigurationParameter[]>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly datastore: pulumi.Output<outputs.Rds.ParametergroupDatastore>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    declare public readonly values: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a Parametergroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ParametergroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ParametergroupArgs | ParametergroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ParametergroupState | undefined;
            resourceInputs["configurationParameters"] = state?.configurationParameters;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["datastore"] = state?.datastore;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["values"] = state?.values;
        } else {
            const args = argsOrState as ParametergroupArgs | undefined;
            if (args?.datastore === undefined && !opts.urn) {
                throw new Error("Missing required property 'datastore'");
            }
            resourceInputs["datastore"] = args?.datastore;
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["values"] = args?.values;
            resourceInputs["configurationParameters"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Parametergroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Parametergroup resources.
 */
export interface ParametergroupState {
    configurationParameters?: pulumi.Input<pulumi.Input<inputs.Rds.ParametergroupConfigurationParameter>[]>;
    createdAt?: pulumi.Input<string>;
    datastore?: pulumi.Input<inputs.Rds.ParametergroupDatastore>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Parametergroup resource.
 */
export interface ParametergroupArgs {
    datastore: pulumi.Input<inputs.Rds.ParametergroupDatastore>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    values?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

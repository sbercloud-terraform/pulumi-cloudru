// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ElbL7policy extends pulumi.CustomResource {
    /**
     * Get an existing ElbL7policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ElbL7policyState, opts?: pulumi.CustomResourceOptions): ElbL7policy {
        return new ElbL7policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudru:index/elbL7policy:ElbL7policy';

    /**
     * Returns true if the given object is an instance of ElbL7policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ElbL7policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ElbL7policy.__pulumiType;
    }

    declare public readonly action: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    declare public readonly description: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly enterpriseProjectId: pulumi.Output<string>;
    declare public readonly fixedResponseConfig: pulumi.Output<outputs.ElbL7policyFixedResponseConfig>;
    declare public readonly listenerId: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly priority: pulumi.Output<number>;
    declare public /*out*/ readonly provisioningStatus: pulumi.Output<string>;
    declare public readonly redirectListenerId: pulumi.Output<string>;
    declare public readonly redirectPoolId: pulumi.Output<string>;
    declare public readonly redirectPoolsConfigs: pulumi.Output<outputs.ElbL7policyRedirectPoolsConfig[]>;
    declare public readonly redirectPoolsExtendConfig: pulumi.Output<outputs.ElbL7policyRedirectPoolsExtendConfig>;
    declare public readonly redirectPoolsStickySessionConfig: pulumi.Output<outputs.ElbL7policyRedirectPoolsStickySessionConfig>;
    declare public readonly redirectUrlConfig: pulumi.Output<outputs.ElbL7policyRedirectUrlConfig>;
    declare public readonly region: pulumi.Output<string>;
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a ElbL7policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ElbL7policyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ElbL7policyArgs | ElbL7policyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ElbL7policyState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["enterpriseProjectId"] = state?.enterpriseProjectId;
            resourceInputs["fixedResponseConfig"] = state?.fixedResponseConfig;
            resourceInputs["listenerId"] = state?.listenerId;
            resourceInputs["name"] = state?.name;
            resourceInputs["priority"] = state?.priority;
            resourceInputs["provisioningStatus"] = state?.provisioningStatus;
            resourceInputs["redirectListenerId"] = state?.redirectListenerId;
            resourceInputs["redirectPoolId"] = state?.redirectPoolId;
            resourceInputs["redirectPoolsConfigs"] = state?.redirectPoolsConfigs;
            resourceInputs["redirectPoolsExtendConfig"] = state?.redirectPoolsExtendConfig;
            resourceInputs["redirectPoolsStickySessionConfig"] = state?.redirectPoolsStickySessionConfig;
            resourceInputs["redirectUrlConfig"] = state?.redirectUrlConfig;
            resourceInputs["region"] = state?.region;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as ElbL7policyArgs | undefined;
            if (args?.listenerId === undefined && !opts.urn) {
                throw new Error("Missing required property 'listenerId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["description"] = args?.description;
            resourceInputs["fixedResponseConfig"] = args?.fixedResponseConfig;
            resourceInputs["listenerId"] = args?.listenerId;
            resourceInputs["name"] = args?.name;
            resourceInputs["priority"] = args?.priority;
            resourceInputs["redirectListenerId"] = args?.redirectListenerId;
            resourceInputs["redirectPoolId"] = args?.redirectPoolId;
            resourceInputs["redirectPoolsConfigs"] = args?.redirectPoolsConfigs;
            resourceInputs["redirectPoolsExtendConfig"] = args?.redirectPoolsExtendConfig;
            resourceInputs["redirectPoolsStickySessionConfig"] = args?.redirectPoolsStickySessionConfig;
            resourceInputs["redirectUrlConfig"] = args?.redirectUrlConfig;
            resourceInputs["region"] = args?.region;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enterpriseProjectId"] = undefined /*out*/;
            resourceInputs["provisioningStatus"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ElbL7policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ElbL7policy resources.
 */
export interface ElbL7policyState {
    action?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    enterpriseProjectId?: pulumi.Input<string>;
    fixedResponseConfig?: pulumi.Input<inputs.ElbL7policyFixedResponseConfig>;
    listenerId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    provisioningStatus?: pulumi.Input<string>;
    redirectListenerId?: pulumi.Input<string>;
    redirectPoolId?: pulumi.Input<string>;
    redirectPoolsConfigs?: pulumi.Input<pulumi.Input<inputs.ElbL7policyRedirectPoolsConfig>[]>;
    redirectPoolsExtendConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfig>;
    redirectPoolsStickySessionConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsStickySessionConfig>;
    redirectUrlConfig?: pulumi.Input<inputs.ElbL7policyRedirectUrlConfig>;
    region?: pulumi.Input<string>;
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ElbL7policy resource.
 */
export interface ElbL7policyArgs {
    action?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fixedResponseConfig?: pulumi.Input<inputs.ElbL7policyFixedResponseConfig>;
    listenerId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    priority?: pulumi.Input<number>;
    redirectListenerId?: pulumi.Input<string>;
    redirectPoolId?: pulumi.Input<string>;
    redirectPoolsConfigs?: pulumi.Input<pulumi.Input<inputs.ElbL7policyRedirectPoolsConfig>[]>;
    redirectPoolsExtendConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsExtendConfig>;
    redirectPoolsStickySessionConfig?: pulumi.Input<inputs.ElbL7policyRedirectPoolsStickySessionConfig>;
    redirectUrlConfig?: pulumi.Input<inputs.ElbL7policyRedirectUrlConfig>;
    region?: pulumi.Input<string>;
}

// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * * Associates the **IPv4** address of an ECS instance to a specified EIP.
 * * Associates the **IPv6** address of an ECS instance to a specified **Shared** Bandwidth.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * This resource can be imported by specifying all three arguments, separated by a forward slash:
 *
 * ```sh
 * $ pulumi import sbercloud:Ecs/eipAssociate:EipAssociate bind <eip address or bandwidth_id>/<instance_id>/<fixed_ip>
 * ```
 */
export class EipAssociate extends pulumi.CustomResource {
    /**
     * Get an existing EipAssociate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EipAssociateState, opts?: pulumi.CustomResourceOptions): EipAssociate {
        return new EipAssociate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Ecs/eipAssociate:EipAssociate';

    /**
     * Returns true if the given object is an instance of EipAssociate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EipAssociate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EipAssociate.__pulumiType;
    }

    /**
     * Specifies the **shared** bandwidth ID to associate.
     * It's **mandatory** when you want to associate the ECS instance with a specified shared bandwidth.
     * Changing this creates a new resource.
     */
    declare public readonly bandwidthId: pulumi.Output<string | undefined>;
    /**
     * Specifies the private IP address to direct traffic to. It's **mandatory**
     * and must be a valid IPv6 address when you want to associate the ECS instance with a specified shared bandwidth.
     * Changing this creates a new resource.
     */
    declare public readonly fixedIp: pulumi.Output<string>;
    /**
     * Specifies the ID of ECS instance to associated with.
     * Changing this creates a new resource.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The port ID of the ECS instance that associated with.
     */
    declare public /*out*/ readonly portId: pulumi.Output<string>;
    /**
     * Specifies the EIP address to associate. It's **mandatory**
     * when you want to associate the ECS instance with an EIP. Changing this creates a new resource.
     */
    declare public readonly publicIp: pulumi.Output<string | undefined>;
    /**
     * Specifies the region in which to create the associated resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a EipAssociate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EipAssociateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EipAssociateArgs | EipAssociateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EipAssociateState | undefined;
            resourceInputs["bandwidthId"] = state?.bandwidthId;
            resourceInputs["fixedIp"] = state?.fixedIp;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["portId"] = state?.portId;
            resourceInputs["publicIp"] = state?.publicIp;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as EipAssociateArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["bandwidthId"] = args?.bandwidthId;
            resourceInputs["fixedIp"] = args?.fixedIp;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["publicIp"] = args?.publicIp;
            resourceInputs["region"] = args?.region;
            resourceInputs["portId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EipAssociate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EipAssociate resources.
 */
export interface EipAssociateState {
    /**
     * Specifies the **shared** bandwidth ID to associate.
     * It's **mandatory** when you want to associate the ECS instance with a specified shared bandwidth.
     * Changing this creates a new resource.
     */
    bandwidthId?: pulumi.Input<string>;
    /**
     * Specifies the private IP address to direct traffic to. It's **mandatory**
     * and must be a valid IPv6 address when you want to associate the ECS instance with a specified shared bandwidth.
     * Changing this creates a new resource.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * Specifies the ID of ECS instance to associated with.
     * Changing this creates a new resource.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The port ID of the ECS instance that associated with.
     */
    portId?: pulumi.Input<string>;
    /**
     * Specifies the EIP address to associate. It's **mandatory**
     * when you want to associate the ECS instance with an EIP. Changing this creates a new resource.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the associated resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EipAssociate resource.
 */
export interface EipAssociateArgs {
    /**
     * Specifies the **shared** bandwidth ID to associate.
     * It's **mandatory** when you want to associate the ECS instance with a specified shared bandwidth.
     * Changing this creates a new resource.
     */
    bandwidthId?: pulumi.Input<string>;
    /**
     * Specifies the private IP address to direct traffic to. It's **mandatory**
     * and must be a valid IPv6 address when you want to associate the ECS instance with a specified shared bandwidth.
     * Changing this creates a new resource.
     */
    fixedIp?: pulumi.Input<string>;
    /**
     * Specifies the ID of ECS instance to associated with.
     * Changing this creates a new resource.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Specifies the EIP address to associate. It's **mandatory**
     * when you want to associate the ECS instance with an EIP. Changing this creates a new resource.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * Specifies the region in which to create the associated resource.
     * If omitted, the provider-level region will be used. Changing this creates a new resource.
     */
    region?: pulumi.Input<string>;
}

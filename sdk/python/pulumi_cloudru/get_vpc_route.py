# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetVpcRouteResult',
    'AwaitableGetVpcRouteResult',
    'get_vpc_route',
    'get_vpc_route_output',
]

@pulumi.output_type
class GetVpcRouteResult:
    """
    A collection of values returned by getVpcRoute.
    """
    def __init__(__self__, destination=None, id=None, nexthop=None, region=None, tenant_id=None, type=None, vpc_id=None):
        if destination and not isinstance(destination, str):
            raise TypeError("Expected argument 'destination' to be a str")
        pulumi.set(__self__, "destination", destination)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nexthop and not isinstance(nexthop, str):
            raise TypeError("Expected argument 'nexthop' to be a str")
        pulumi.set(__self__, "nexthop", nexthop)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> _builtins.str:
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def nexthop(self) -> _builtins.str:
        """
        The next hop of the route. If the route type is peering, it will provide VPC peering connection ID.
        """
        return pulumi.get(self, "nexthop")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> _builtins.str:
        return pulumi.get(self, "tenant_id")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> _builtins.str:
        return pulumi.get(self, "vpc_id")


class AwaitableGetVpcRouteResult(GetVpcRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpcRouteResult(
            destination=self.destination,
            id=self.id,
            nexthop=self.nexthop,
            region=self.region,
            tenant_id=self.tenant_id,
            type=self.type,
            vpc_id=self.vpc_id)


def get_vpc_route(destination: Optional[_builtins.str] = None,
                  id: Optional[_builtins.str] = None,
                  region: Optional[_builtins.str] = None,
                  tenant_id: Optional[_builtins.str] = None,
                  type: Optional[_builtins.str] = None,
                  vpc_id: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpcRouteResult:
    """
    !> **WARNING:** It has been deprecated, use `Vpc.RouteTable` to get the route details.

    Provides details about a specific VPC route.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    vpc_route = sbercloud.get_vpc_route(vpc_id=vpc_id)
    ```


    :param _builtins.str destination: The route destination address (CIDR).
    :param _builtins.str id: The id of the specific route to retrieve.
    :param _builtins.str region: The region in which to obtain the vpc route. If omitted, the provider-level region will
           be used.
    :param _builtins.str tenant_id: Only the administrator can specify the tenant ID of other tenants.
    :param _builtins.str type: Route type for filtering.
    :param _builtins.str vpc_id: The id of the VPC that the desired route belongs to.
    """
    __args__ = dict()
    __args__['destination'] = destination
    __args__['id'] = id
    __args__['region'] = region
    __args__['tenantId'] = tenant_id
    __args__['type'] = type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('sbercloud:index/getVpcRoute:getVpcRoute', __args__, opts=opts, typ=GetVpcRouteResult).value

    return AwaitableGetVpcRouteResult(
        destination=pulumi.get(__ret__, 'destination'),
        id=pulumi.get(__ret__, 'id'),
        nexthop=pulumi.get(__ret__, 'nexthop'),
        region=pulumi.get(__ret__, 'region'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        type=pulumi.get(__ret__, 'type'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_vpc_route_output(destination: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         tenant_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         vpc_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpcRouteResult]:
    """
    !> **WARNING:** It has been deprecated, use `Vpc.RouteTable` to get the route details.

    Provides details about a specific VPC route.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_sbercloud as sbercloud

    vpc_route = sbercloud.get_vpc_route(vpc_id=vpc_id)
    ```


    :param _builtins.str destination: The route destination address (CIDR).
    :param _builtins.str id: The id of the specific route to retrieve.
    :param _builtins.str region: The region in which to obtain the vpc route. If omitted, the provider-level region will
           be used.
    :param _builtins.str tenant_id: Only the administrator can specify the tenant ID of other tenants.
    :param _builtins.str type: Route type for filtering.
    :param _builtins.str vpc_id: The id of the VPC that the desired route belongs to.
    """
    __args__ = dict()
    __args__['destination'] = destination
    __args__['id'] = id
    __args__['region'] = region
    __args__['tenantId'] = tenant_id
    __args__['type'] = type
    __args__['vpcId'] = vpc_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('sbercloud:index/getVpcRoute:getVpcRoute', __args__, opts=opts, typ=GetVpcRouteResult)
    return __ret__.apply(lambda __response__: GetVpcRouteResult(
        destination=pulumi.get(__response__, 'destination'),
        id=pulumi.get(__response__, 'id'),
        nexthop=pulumi.get(__response__, 'nexthop'),
        region=pulumi.get(__response__, 'region'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        type=pulumi.get(__response__, 'type'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))

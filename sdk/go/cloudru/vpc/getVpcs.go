// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Use this data source to get a list of VPC.
func GetVpcs(ctx *pulumi.Context, args *GetVpcsArgs, opts ...pulumi.InvokeOption) (*GetVpcsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpcsResult
	err := ctx.Invoke("sbercloud:Vpc/getVpcs:getVpcs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcs.
type GetVpcsArgs struct {
	// Specifies the cidr block of the desired VPC.
	Cidr *string `pulumi:"cidr"`
	// Specifies the enterprise project ID which the desired VPC belongs to.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the id of the desired VPC.
	Id *string `pulumi:"id"`
	// Specifies the name of the desired VPC. The value is a string of no more than 64 characters
	// and can contain digits, letters, underscores (_) and hyphens (-).
	Name *string `pulumi:"name"`
	// Specifies the region in which to obtain the VPC. If omitted, the provider-level region
	// will be used.
	Region *string `pulumi:"region"`
	// Specifies the current status of the desired VPC. The value can be CREATING, OK or ERROR.
	Status *string `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired VPC.
	//
	// > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
	// The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
	// tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
	// The values are in the OR relationship.
	Tags map[string]string `pulumi:"tags"`
}

// A collection of values returned by getVpcs.
type GetVpcsResult struct {
	// Indicates the cidr block of the VPC.
	Cidr *string `pulumi:"cidr"`
	// Indicates the the enterprise project ID of the VPC.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Indicates the ID of the VPC.
	Id string `pulumi:"id"`
	// Indicates the name of the VPC.
	Name   *string `pulumi:"name"`
	Region string  `pulumi:"region"`
	// Indicates the current status of the VPC.
	Status *string `pulumi:"status"`
	// Indicates the key/value pairs which associated with the VPC.
	Tags map[string]string `pulumi:"tags"`
	// Indicates a list of all VPCs found. Structure is documented below.
	Vpcs []GetVpcsVpc `pulumi:"vpcs"`
}

func GetVpcsOutput(ctx *pulumi.Context, args GetVpcsOutputArgs, opts ...pulumi.InvokeOption) GetVpcsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetVpcsResultOutput, error) {
			args := v.(GetVpcsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sbercloud:Vpc/getVpcs:getVpcs", args, GetVpcsResultOutput{}, options).(GetVpcsResultOutput), nil
		}).(GetVpcsResultOutput)
}

// A collection of arguments for invoking getVpcs.
type GetVpcsOutputArgs struct {
	// Specifies the cidr block of the desired VPC.
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// Specifies the enterprise project ID which the desired VPC belongs to.
	EnterpriseProjectId pulumi.StringPtrInput `pulumi:"enterpriseProjectId"`
	// Specifies the id of the desired VPC.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Specifies the name of the desired VPC. The value is a string of no more than 64 characters
	// and can contain digits, letters, underscores (_) and hyphens (-).
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specifies the region in which to obtain the VPC. If omitted, the provider-level region
	// will be used.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// Specifies the current status of the desired VPC. The value can be CREATING, OK or ERROR.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Specifies the included key/value pairs which associated with the desired VPC.
	//
	// > A maximum of 10 tag keys are allowed for each query operation. Each tag key can have up to 10 tag values.
	// The tag key cannot be left blank or set to an empty string. Each tag key must be unique, and each tag value in a
	// tag must be unique, use commas(,) to separate the multiple values. An empty for values indicates any value.
	// The values are in the OR relationship.
	Tags pulumi.StringMapInput `pulumi:"tags"`
}

func (GetVpcsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsArgs)(nil)).Elem()
}

// A collection of values returned by getVpcs.
type GetVpcsResultOutput struct{ *pulumi.OutputState }

func (GetVpcsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsResult)(nil)).Elem()
}

func (o GetVpcsResultOutput) ToGetVpcsResultOutput() GetVpcsResultOutput {
	return o
}

func (o GetVpcsResultOutput) ToGetVpcsResultOutputWithContext(ctx context.Context) GetVpcsResultOutput {
	return o
}

// Indicates the cidr block of the VPC.
func (o GetVpcsResultOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcsResult) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// Indicates the the enterprise project ID of the VPC.
func (o GetVpcsResultOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcsResult) *string { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Indicates the ID of the VPC.
func (o GetVpcsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Indicates the name of the VPC.
func (o GetVpcsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetVpcsResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsResult) string { return v.Region }).(pulumi.StringOutput)
}

// Indicates the current status of the VPC.
func (o GetVpcsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Indicates the key/value pairs which associated with the VPC.
func (o GetVpcsResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetVpcsResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// Indicates a list of all VPCs found. Structure is documented below.
func (o GetVpcsResultOutput) Vpcs() GetVpcsVpcArrayOutput {
	return o.ApplyT(func(v GetVpcsResult) []GetVpcsVpc { return v.Vpcs }).(GetVpcsVpcArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpcsResultOutput{})
}

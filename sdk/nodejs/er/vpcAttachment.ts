// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class VpcAttachment extends pulumi.CustomResource {
    /**
     * Get an existing VpcAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcAttachmentState, opts?: pulumi.CustomResourceOptions): VpcAttachment {
        return new VpcAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Er/vpcAttachment:VpcAttachment';

    /**
     * Returns true if the given object is an instance of VpcAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcAttachment.__pulumiType;
    }

    /**
     * Whether to automatically configure routes for the VPC which pointing to the ER instance.
     */
    declare public readonly autoCreateVpcRoutes: pulumi.Output<boolean>;
    /**
     * The creation time.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The description of the VPC attachment.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The ID of the ER instance to which the VPC attachment belongs.
     */
    declare public readonly instanceId: pulumi.Output<string>;
    /**
     * The name of the VPC attachment.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The region where the ER instance and the VPC attachment are located.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The current status of the VPC attachment.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * The ID of the VPC subnet to which the VPC attachment belongs.
     */
    declare public readonly subnetId: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    /**
     * The latest update time.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The ID of the VPC to which the VPC attachment belongs.
     */
    declare public readonly vpcId: pulumi.Output<string>;

    /**
     * Create a VpcAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcAttachmentArgs | VpcAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcAttachmentState | undefined;
            resourceInputs["autoCreateVpcRoutes"] = state?.autoCreateVpcRoutes;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["description"] = state?.description;
            resourceInputs["instanceId"] = state?.instanceId;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["status"] = state?.status;
            resourceInputs["subnetId"] = state?.subnetId;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["vpcId"] = state?.vpcId;
        } else {
            const args = argsOrState as VpcAttachmentArgs | undefined;
            if (args?.instanceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if (args?.subnetId === undefined && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if (args?.vpcId === undefined && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["autoCreateVpcRoutes"] = args?.autoCreateVpcRoutes;
            resourceInputs["description"] = args?.description;
            resourceInputs["instanceId"] = args?.instanceId;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["subnetId"] = args?.subnetId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcId"] = args?.vpcId;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcAttachment resources.
 */
export interface VpcAttachmentState {
    /**
     * Whether to automatically configure routes for the VPC which pointing to the ER instance.
     */
    autoCreateVpcRoutes?: pulumi.Input<boolean>;
    /**
     * The creation time.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the VPC attachment.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the ER instance to which the VPC attachment belongs.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of the VPC attachment.
     */
    name?: pulumi.Input<string>;
    /**
     * The region where the ER instance and the VPC attachment are located.
     */
    region?: pulumi.Input<string>;
    /**
     * The current status of the VPC attachment.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the VPC subnet to which the VPC attachment belongs.
     */
    subnetId?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The latest update time.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The ID of the VPC to which the VPC attachment belongs.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpcAttachment resource.
 */
export interface VpcAttachmentArgs {
    /**
     * Whether to automatically configure routes for the VPC which pointing to the ER instance.
     */
    autoCreateVpcRoutes?: pulumi.Input<boolean>;
    /**
     * The description of the VPC attachment.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the ER instance to which the VPC attachment belongs.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The name of the VPC attachment.
     */
    name?: pulumi.Input<string>;
    /**
     * The region where the ER instance and the VPC attachment are located.
     */
    region?: pulumi.Input<string>;
    /**
     * The ID of the VPC subnet to which the VPC attachment belongs.
     */
    subnetId: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ID of the VPC to which the VPC attachment belongs.
     */
    vpcId: pulumi.Input<string>;
}

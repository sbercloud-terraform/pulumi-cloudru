// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudru

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

type SmnSubscription struct {
	pulumi.CustomResourceState

	Endpoint  pulumi.StringOutput            `pulumi:"endpoint"`
	Extension SmnSubscriptionExtensionOutput `pulumi:"extension"`
	// The message filter policies of a subscriber.
	FilterPolicies  SmnSubscriptionFilterPolicyArrayOutput `pulumi:"filterPolicies"`
	Owner           pulumi.StringOutput                    `pulumi:"owner"`
	Protocol        pulumi.StringOutput                    `pulumi:"protocol"`
	Region          pulumi.StringOutput                    `pulumi:"region"`
	Remark          pulumi.StringPtrOutput                 `pulumi:"remark"`
	Status          pulumi.IntOutput                       `pulumi:"status"`
	SubscriptionUrn pulumi.StringOutput                    `pulumi:"subscriptionUrn"`
	TopicUrn        pulumi.StringOutput                    `pulumi:"topicUrn"`
}

// NewSmnSubscription registers a new resource with the given unique name, arguments, and options.
func NewSmnSubscription(ctx *pulumi.Context,
	name string, args *SmnSubscriptionArgs, opts ...pulumi.ResourceOption) (*SmnSubscription, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.TopicUrn == nil {
		return nil, errors.New("invalid value for required argument 'TopicUrn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmnSubscription
	err := ctx.RegisterResource("sbercloud:index/smnSubscription:SmnSubscription", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmnSubscription gets an existing SmnSubscription resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmnSubscription(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmnSubscriptionState, opts ...pulumi.ResourceOption) (*SmnSubscription, error) {
	var resource SmnSubscription
	err := ctx.ReadResource("sbercloud:index/smnSubscription:SmnSubscription", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmnSubscription resources.
type smnSubscriptionState struct {
	Endpoint  *string                   `pulumi:"endpoint"`
	Extension *SmnSubscriptionExtension `pulumi:"extension"`
	// The message filter policies of a subscriber.
	FilterPolicies  []SmnSubscriptionFilterPolicy `pulumi:"filterPolicies"`
	Owner           *string                       `pulumi:"owner"`
	Protocol        *string                       `pulumi:"protocol"`
	Region          *string                       `pulumi:"region"`
	Remark          *string                       `pulumi:"remark"`
	Status          *int                          `pulumi:"status"`
	SubscriptionUrn *string                       `pulumi:"subscriptionUrn"`
	TopicUrn        *string                       `pulumi:"topicUrn"`
}

type SmnSubscriptionState struct {
	Endpoint  pulumi.StringPtrInput
	Extension SmnSubscriptionExtensionPtrInput
	// The message filter policies of a subscriber.
	FilterPolicies  SmnSubscriptionFilterPolicyArrayInput
	Owner           pulumi.StringPtrInput
	Protocol        pulumi.StringPtrInput
	Region          pulumi.StringPtrInput
	Remark          pulumi.StringPtrInput
	Status          pulumi.IntPtrInput
	SubscriptionUrn pulumi.StringPtrInput
	TopicUrn        pulumi.StringPtrInput
}

func (SmnSubscriptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*smnSubscriptionState)(nil)).Elem()
}

type smnSubscriptionArgs struct {
	Endpoint  string                    `pulumi:"endpoint"`
	Extension *SmnSubscriptionExtension `pulumi:"extension"`
	Protocol  string                    `pulumi:"protocol"`
	Region    *string                   `pulumi:"region"`
	Remark    *string                   `pulumi:"remark"`
	TopicUrn  string                    `pulumi:"topicUrn"`
}

// The set of arguments for constructing a SmnSubscription resource.
type SmnSubscriptionArgs struct {
	Endpoint  pulumi.StringInput
	Extension SmnSubscriptionExtensionPtrInput
	Protocol  pulumi.StringInput
	Region    pulumi.StringPtrInput
	Remark    pulumi.StringPtrInput
	TopicUrn  pulumi.StringInput
}

func (SmnSubscriptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smnSubscriptionArgs)(nil)).Elem()
}

type SmnSubscriptionInput interface {
	pulumi.Input

	ToSmnSubscriptionOutput() SmnSubscriptionOutput
	ToSmnSubscriptionOutputWithContext(ctx context.Context) SmnSubscriptionOutput
}

func (*SmnSubscription) ElementType() reflect.Type {
	return reflect.TypeOf((**SmnSubscription)(nil)).Elem()
}

func (i *SmnSubscription) ToSmnSubscriptionOutput() SmnSubscriptionOutput {
	return i.ToSmnSubscriptionOutputWithContext(context.Background())
}

func (i *SmnSubscription) ToSmnSubscriptionOutputWithContext(ctx context.Context) SmnSubscriptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnSubscriptionOutput)
}

// SmnSubscriptionArrayInput is an input type that accepts SmnSubscriptionArray and SmnSubscriptionArrayOutput values.
// You can construct a concrete instance of `SmnSubscriptionArrayInput` via:
//
//	SmnSubscriptionArray{ SmnSubscriptionArgs{...} }
type SmnSubscriptionArrayInput interface {
	pulumi.Input

	ToSmnSubscriptionArrayOutput() SmnSubscriptionArrayOutput
	ToSmnSubscriptionArrayOutputWithContext(context.Context) SmnSubscriptionArrayOutput
}

type SmnSubscriptionArray []SmnSubscriptionInput

func (SmnSubscriptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmnSubscription)(nil)).Elem()
}

func (i SmnSubscriptionArray) ToSmnSubscriptionArrayOutput() SmnSubscriptionArrayOutput {
	return i.ToSmnSubscriptionArrayOutputWithContext(context.Background())
}

func (i SmnSubscriptionArray) ToSmnSubscriptionArrayOutputWithContext(ctx context.Context) SmnSubscriptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnSubscriptionArrayOutput)
}

// SmnSubscriptionMapInput is an input type that accepts SmnSubscriptionMap and SmnSubscriptionMapOutput values.
// You can construct a concrete instance of `SmnSubscriptionMapInput` via:
//
//	SmnSubscriptionMap{ "key": SmnSubscriptionArgs{...} }
type SmnSubscriptionMapInput interface {
	pulumi.Input

	ToSmnSubscriptionMapOutput() SmnSubscriptionMapOutput
	ToSmnSubscriptionMapOutputWithContext(context.Context) SmnSubscriptionMapOutput
}

type SmnSubscriptionMap map[string]SmnSubscriptionInput

func (SmnSubscriptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmnSubscription)(nil)).Elem()
}

func (i SmnSubscriptionMap) ToSmnSubscriptionMapOutput() SmnSubscriptionMapOutput {
	return i.ToSmnSubscriptionMapOutputWithContext(context.Background())
}

func (i SmnSubscriptionMap) ToSmnSubscriptionMapOutputWithContext(ctx context.Context) SmnSubscriptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmnSubscriptionMapOutput)
}

type SmnSubscriptionOutput struct{ *pulumi.OutputState }

func (SmnSubscriptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmnSubscription)(nil)).Elem()
}

func (o SmnSubscriptionOutput) ToSmnSubscriptionOutput() SmnSubscriptionOutput {
	return o
}

func (o SmnSubscriptionOutput) ToSmnSubscriptionOutputWithContext(ctx context.Context) SmnSubscriptionOutput {
	return o
}

func (o SmnSubscriptionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnSubscription) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o SmnSubscriptionOutput) Extension() SmnSubscriptionExtensionOutput {
	return o.ApplyT(func(v *SmnSubscription) SmnSubscriptionExtensionOutput { return v.Extension }).(SmnSubscriptionExtensionOutput)
}

// The message filter policies of a subscriber.
func (o SmnSubscriptionOutput) FilterPolicies() SmnSubscriptionFilterPolicyArrayOutput {
	return o.ApplyT(func(v *SmnSubscription) SmnSubscriptionFilterPolicyArrayOutput { return v.FilterPolicies }).(SmnSubscriptionFilterPolicyArrayOutput)
}

func (o SmnSubscriptionOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnSubscription) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o SmnSubscriptionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnSubscription) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

func (o SmnSubscriptionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnSubscription) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o SmnSubscriptionOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SmnSubscription) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

func (o SmnSubscriptionOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *SmnSubscription) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

func (o SmnSubscriptionOutput) SubscriptionUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnSubscription) pulumi.StringOutput { return v.SubscriptionUrn }).(pulumi.StringOutput)
}

func (o SmnSubscriptionOutput) TopicUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *SmnSubscription) pulumi.StringOutput { return v.TopicUrn }).(pulumi.StringOutput)
}

type SmnSubscriptionArrayOutput struct{ *pulumi.OutputState }

func (SmnSubscriptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmnSubscription)(nil)).Elem()
}

func (o SmnSubscriptionArrayOutput) ToSmnSubscriptionArrayOutput() SmnSubscriptionArrayOutput {
	return o
}

func (o SmnSubscriptionArrayOutput) ToSmnSubscriptionArrayOutputWithContext(ctx context.Context) SmnSubscriptionArrayOutput {
	return o
}

func (o SmnSubscriptionArrayOutput) Index(i pulumi.IntInput) SmnSubscriptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmnSubscription {
		return vs[0].([]*SmnSubscription)[vs[1].(int)]
	}).(SmnSubscriptionOutput)
}

type SmnSubscriptionMapOutput struct{ *pulumi.OutputState }

func (SmnSubscriptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmnSubscription)(nil)).Elem()
}

func (o SmnSubscriptionMapOutput) ToSmnSubscriptionMapOutput() SmnSubscriptionMapOutput {
	return o
}

func (o SmnSubscriptionMapOutput) ToSmnSubscriptionMapOutputWithContext(ctx context.Context) SmnSubscriptionMapOutput {
	return o
}

func (o SmnSubscriptionMapOutput) MapIndex(k pulumi.StringInput) SmnSubscriptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmnSubscription {
		return vs[0].(map[string]*SmnSubscription)[vs[1].(string)]
	}).(SmnSubscriptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmnSubscriptionInput)(nil)).Elem(), &SmnSubscription{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmnSubscriptionArrayInput)(nil)).Elem(), SmnSubscriptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmnSubscriptionMapInput)(nil)).Elem(), SmnSubscriptionMap{})
	pulumi.RegisterOutputType(SmnSubscriptionOutput{})
	pulumi.RegisterOutputType(SmnSubscriptionArrayOutput{})
	pulumi.RegisterOutputType(SmnSubscriptionMapOutput{})
}

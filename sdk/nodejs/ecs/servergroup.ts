// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages Server Group resource within SberCloud.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sbercloud from "@pulumi/sbercloud";
 *
 * const instanceDemo = sbercloud.Ecs.getInstance({
 *     name: "ecs-servergroup-demo",
 * });
 * const test_sg = new sbercloud.ecs.Servergroup("test-sg", {
 *     name: "my-sg",
 *     policies: ["anti-affinity"],
 *     members: [instanceDemo.then(instanceDemo => instanceDemo.id)],
 * });
 * ```
 *
 * ## Import
 *
 * Server Groups can be imported using the `id`, e.g.
 *
 * ```sh
 * $ pulumi import sbercloud:Ecs/servergroup:Servergroup test-sg 1bc30ee9-9d5b-4c30-bdd5-7f1e663f5edf
 * ```
 */
export class Servergroup extends pulumi.CustomResource {
    /**
     * Get an existing Servergroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServergroupState, opts?: pulumi.CustomResourceOptions): Servergroup {
        return new Servergroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sbercloud:Ecs/servergroup:Servergroup';

    /**
     * Returns true if the given object is an instance of Servergroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Servergroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Servergroup.__pulumiType;
    }

    /**
     * schema: Internal
     */
    declare public /*out*/ readonly faultDomains: pulumi.Output<string[]>;
    /**
     * Specifies an array of one or more instance ID to attach server group.
     */
    declare public readonly members: pulumi.Output<string[]>;
    /**
     * Specifies a unique name for the server group. This parameter can contain a
     * maximum of 255 characters, which may consist of letters, digits, underscores (_), and hyphens (-). Changing this
     * creates a new server group.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specifies the set of policies for the server group. Only *anti-affinity*
     * policies are supported.
     *
     * + `anti-affinity`: All ECS in this group must be deployed on different hosts. Changing this creates a new server
     * group.
     */
    declare public readonly policies: pulumi.Output<string[] | undefined>;
    /**
     * Specifies the region in which to create the server group resource. If omitted,
     * the provider-level region will be used. Changing this creates a new server group.
     */
    declare public readonly region: pulumi.Output<string>;

    /**
     * Create a Servergroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServergroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServergroupArgs | ServergroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServergroupState | undefined;
            resourceInputs["faultDomains"] = state?.faultDomains;
            resourceInputs["members"] = state?.members;
            resourceInputs["name"] = state?.name;
            resourceInputs["policies"] = state?.policies;
            resourceInputs["region"] = state?.region;
        } else {
            const args = argsOrState as ServergroupArgs | undefined;
            resourceInputs["members"] = args?.members;
            resourceInputs["name"] = args?.name;
            resourceInputs["policies"] = args?.policies;
            resourceInputs["region"] = args?.region;
            resourceInputs["faultDomains"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Servergroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Servergroup resources.
 */
export interface ServergroupState {
    /**
     * schema: Internal
     */
    faultDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies an array of one or more instance ID to attach server group.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a unique name for the server group. This parameter can contain a
     * maximum of 255 characters, which may consist of letters, digits, underscores (_), and hyphens (-). Changing this
     * creates a new server group.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the set of policies for the server group. Only *anti-affinity*
     * policies are supported.
     *
     * + `anti-affinity`: All ECS in this group must be deployed on different hosts. Changing this creates a new server
     * group.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region in which to create the server group resource. If omitted,
     * the provider-level region will be used. Changing this creates a new server group.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Servergroup resource.
 */
export interface ServergroupArgs {
    /**
     * Specifies an array of one or more instance ID to attach server group.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies a unique name for the server group. This parameter can contain a
     * maximum of 255 characters, which may consist of letters, digits, underscores (_), and hyphens (-). Changing this
     * creates a new server group.
     */
    name?: pulumi.Input<string>;
    /**
     * Specifies the set of policies for the server group. Only *anti-affinity*
     * policies are supported.
     *
     * + `anti-affinity`: All ECS in this group must be deployed on different hosts. Changing this creates a new server
     * group.
     */
    policies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies the region in which to create the server group resource. If omitted,
     * the provider-level region will be used. Changing this creates a new server group.
     */
    region?: pulumi.Input<string>;
}

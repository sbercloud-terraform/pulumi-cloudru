// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/internal"
)

// Manages a CFW IPS rule mode change resource within SberCloud.
//
// > This resource is only a one-time action resource for operating the API.
// Deleting this resource will not clear the corresponding request record,
// but will only remove the resource information from the tfstate file.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/sbercloud-terraform/pulumi-cloudru/sdk/go/cloudru/cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			objectId := cfg.RequireObject("objectId")
//			ipsIds := cfg.RequireObject("ipsIds")
//			status := cfg.RequireObject("status")
//			_, err := cfw.NewIpsRuleModeChange(ctx, "test", &cfw.IpsRuleModeChangeArgs{
//				ObjectId: pulumi.Any(objectId),
//				IpsIds:   pulumi.Any(ipsIds),
//				Status:   pulumi.Any(status),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type IpsRuleModeChange struct {
	pulumi.CustomResourceState

	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrOutput `pulumi:"enterpriseProjectId"`
	// Specifies the IPS rule ID list.
	IpsIds pulumi.StringArrayOutput `pulumi:"ipsIds"`
	// Specifies the protected object ID.
	ObjectId pulumi.StringOutput `pulumi:"objectId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region pulumi.StringOutput `pulumi:"region"`
	// Specifies the IPS rule status.
	// The valid value can be **OBSERVE**, **ENABLE**, **CLOSE**, **DEFAULT** or **ALL_DEFAULT**.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewIpsRuleModeChange registers a new resource with the given unique name, arguments, and options.
func NewIpsRuleModeChange(ctx *pulumi.Context,
	name string, args *IpsRuleModeChangeArgs, opts ...pulumi.ResourceOption) (*IpsRuleModeChange, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ObjectId == nil {
		return nil, errors.New("invalid value for required argument 'ObjectId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpsRuleModeChange
	err := ctx.RegisterResource("sbercloud:Cfw/ipsRuleModeChange:IpsRuleModeChange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpsRuleModeChange gets an existing IpsRuleModeChange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpsRuleModeChange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpsRuleModeChangeState, opts ...pulumi.ResourceOption) (*IpsRuleModeChange, error) {
	var resource IpsRuleModeChange
	err := ctx.ReadResource("sbercloud:Cfw/ipsRuleModeChange:IpsRuleModeChange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpsRuleModeChange resources.
type ipsRuleModeChangeState struct {
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the IPS rule ID list.
	IpsIds []string `pulumi:"ipsIds"`
	// Specifies the protected object ID.
	ObjectId *string `pulumi:"objectId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region *string `pulumi:"region"`
	// Specifies the IPS rule status.
	// The valid value can be **OBSERVE**, **ENABLE**, **CLOSE**, **DEFAULT** or **ALL_DEFAULT**.
	Status *string `pulumi:"status"`
}

type IpsRuleModeChangeState struct {
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the IPS rule ID list.
	IpsIds pulumi.StringArrayInput
	// Specifies the protected object ID.
	ObjectId pulumi.StringPtrInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region pulumi.StringPtrInput
	// Specifies the IPS rule status.
	// The valid value can be **OBSERVE**, **ENABLE**, **CLOSE**, **DEFAULT** or **ALL_DEFAULT**.
	Status pulumi.StringPtrInput
}

func (IpsRuleModeChangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsRuleModeChangeState)(nil)).Elem()
}

type ipsRuleModeChangeArgs struct {
	// Specifies the enterprise project ID.
	EnterpriseProjectId *string `pulumi:"enterpriseProjectId"`
	// Specifies the IPS rule ID list.
	IpsIds []string `pulumi:"ipsIds"`
	// Specifies the protected object ID.
	ObjectId string `pulumi:"objectId"`
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region *string `pulumi:"region"`
	// Specifies the IPS rule status.
	// The valid value can be **OBSERVE**, **ENABLE**, **CLOSE**, **DEFAULT** or **ALL_DEFAULT**.
	Status string `pulumi:"status"`
}

// The set of arguments for constructing a IpsRuleModeChange resource.
type IpsRuleModeChangeArgs struct {
	// Specifies the enterprise project ID.
	EnterpriseProjectId pulumi.StringPtrInput
	// Specifies the IPS rule ID list.
	IpsIds pulumi.StringArrayInput
	// Specifies the protected object ID.
	ObjectId pulumi.StringInput
	// Specifies the region in which to create the resource.
	// If omitted, the provider-level region will be used. Changing this will create new resource.
	Region pulumi.StringPtrInput
	// Specifies the IPS rule status.
	// The valid value can be **OBSERVE**, **ENABLE**, **CLOSE**, **DEFAULT** or **ALL_DEFAULT**.
	Status pulumi.StringInput
}

func (IpsRuleModeChangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipsRuleModeChangeArgs)(nil)).Elem()
}

type IpsRuleModeChangeInput interface {
	pulumi.Input

	ToIpsRuleModeChangeOutput() IpsRuleModeChangeOutput
	ToIpsRuleModeChangeOutputWithContext(ctx context.Context) IpsRuleModeChangeOutput
}

func (*IpsRuleModeChange) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsRuleModeChange)(nil)).Elem()
}

func (i *IpsRuleModeChange) ToIpsRuleModeChangeOutput() IpsRuleModeChangeOutput {
	return i.ToIpsRuleModeChangeOutputWithContext(context.Background())
}

func (i *IpsRuleModeChange) ToIpsRuleModeChangeOutputWithContext(ctx context.Context) IpsRuleModeChangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleModeChangeOutput)
}

// IpsRuleModeChangeArrayInput is an input type that accepts IpsRuleModeChangeArray and IpsRuleModeChangeArrayOutput values.
// You can construct a concrete instance of `IpsRuleModeChangeArrayInput` via:
//
//	IpsRuleModeChangeArray{ IpsRuleModeChangeArgs{...} }
type IpsRuleModeChangeArrayInput interface {
	pulumi.Input

	ToIpsRuleModeChangeArrayOutput() IpsRuleModeChangeArrayOutput
	ToIpsRuleModeChangeArrayOutputWithContext(context.Context) IpsRuleModeChangeArrayOutput
}

type IpsRuleModeChangeArray []IpsRuleModeChangeInput

func (IpsRuleModeChangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsRuleModeChange)(nil)).Elem()
}

func (i IpsRuleModeChangeArray) ToIpsRuleModeChangeArrayOutput() IpsRuleModeChangeArrayOutput {
	return i.ToIpsRuleModeChangeArrayOutputWithContext(context.Background())
}

func (i IpsRuleModeChangeArray) ToIpsRuleModeChangeArrayOutputWithContext(ctx context.Context) IpsRuleModeChangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleModeChangeArrayOutput)
}

// IpsRuleModeChangeMapInput is an input type that accepts IpsRuleModeChangeMap and IpsRuleModeChangeMapOutput values.
// You can construct a concrete instance of `IpsRuleModeChangeMapInput` via:
//
//	IpsRuleModeChangeMap{ "key": IpsRuleModeChangeArgs{...} }
type IpsRuleModeChangeMapInput interface {
	pulumi.Input

	ToIpsRuleModeChangeMapOutput() IpsRuleModeChangeMapOutput
	ToIpsRuleModeChangeMapOutputWithContext(context.Context) IpsRuleModeChangeMapOutput
}

type IpsRuleModeChangeMap map[string]IpsRuleModeChangeInput

func (IpsRuleModeChangeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsRuleModeChange)(nil)).Elem()
}

func (i IpsRuleModeChangeMap) ToIpsRuleModeChangeMapOutput() IpsRuleModeChangeMapOutput {
	return i.ToIpsRuleModeChangeMapOutputWithContext(context.Background())
}

func (i IpsRuleModeChangeMap) ToIpsRuleModeChangeMapOutputWithContext(ctx context.Context) IpsRuleModeChangeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpsRuleModeChangeMapOutput)
}

type IpsRuleModeChangeOutput struct{ *pulumi.OutputState }

func (IpsRuleModeChangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpsRuleModeChange)(nil)).Elem()
}

func (o IpsRuleModeChangeOutput) ToIpsRuleModeChangeOutput() IpsRuleModeChangeOutput {
	return o
}

func (o IpsRuleModeChangeOutput) ToIpsRuleModeChangeOutputWithContext(ctx context.Context) IpsRuleModeChangeOutput {
	return o
}

// Specifies the enterprise project ID.
func (o IpsRuleModeChangeOutput) EnterpriseProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IpsRuleModeChange) pulumi.StringPtrOutput { return v.EnterpriseProjectId }).(pulumi.StringPtrOutput)
}

// Specifies the IPS rule ID list.
func (o IpsRuleModeChangeOutput) IpsIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpsRuleModeChange) pulumi.StringArrayOutput { return v.IpsIds }).(pulumi.StringArrayOutput)
}

// Specifies the protected object ID.
func (o IpsRuleModeChangeOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRuleModeChange) pulumi.StringOutput { return v.ObjectId }).(pulumi.StringOutput)
}

// Specifies the region in which to create the resource.
// If omitted, the provider-level region will be used. Changing this will create new resource.
func (o IpsRuleModeChangeOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRuleModeChange) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Specifies the IPS rule status.
// The valid value can be **OBSERVE**, **ENABLE**, **CLOSE**, **DEFAULT** or **ALL_DEFAULT**.
func (o IpsRuleModeChangeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *IpsRuleModeChange) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type IpsRuleModeChangeArrayOutput struct{ *pulumi.OutputState }

func (IpsRuleModeChangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpsRuleModeChange)(nil)).Elem()
}

func (o IpsRuleModeChangeArrayOutput) ToIpsRuleModeChangeArrayOutput() IpsRuleModeChangeArrayOutput {
	return o
}

func (o IpsRuleModeChangeArrayOutput) ToIpsRuleModeChangeArrayOutputWithContext(ctx context.Context) IpsRuleModeChangeArrayOutput {
	return o
}

func (o IpsRuleModeChangeArrayOutput) Index(i pulumi.IntInput) IpsRuleModeChangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpsRuleModeChange {
		return vs[0].([]*IpsRuleModeChange)[vs[1].(int)]
	}).(IpsRuleModeChangeOutput)
}

type IpsRuleModeChangeMapOutput struct{ *pulumi.OutputState }

func (IpsRuleModeChangeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpsRuleModeChange)(nil)).Elem()
}

func (o IpsRuleModeChangeMapOutput) ToIpsRuleModeChangeMapOutput() IpsRuleModeChangeMapOutput {
	return o
}

func (o IpsRuleModeChangeMapOutput) ToIpsRuleModeChangeMapOutputWithContext(ctx context.Context) IpsRuleModeChangeMapOutput {
	return o
}

func (o IpsRuleModeChangeMapOutput) MapIndex(k pulumi.StringInput) IpsRuleModeChangeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpsRuleModeChange {
		return vs[0].(map[string]*IpsRuleModeChange)[vs[1].(string)]
	}).(IpsRuleModeChangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleModeChangeInput)(nil)).Elem(), &IpsRuleModeChange{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleModeChangeArrayInput)(nil)).Elem(), IpsRuleModeChangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpsRuleModeChangeMapInput)(nil)).Elem(), IpsRuleModeChangeMap{})
	pulumi.RegisterOutputType(IpsRuleModeChangeOutput{})
	pulumi.RegisterOutputType(IpsRuleModeChangeArrayOutput{})
	pulumi.RegisterOutputType(IpsRuleModeChangeMapOutput{})
}
